[{"title":"2021 暑假生活记录","url":"/2021/06/29/2021-summer-record/","content":"经过 6 月 22 日到 28\n日这几天的折腾，大概和高中的老师、驾校教练等人商量了一些后续的安排。现在终于可以安定下来，准备做一些学习、开发、摸鱼的事情了。\n\n总体而言，这个暑假想要做的事情其实还是很多的。\n\n学习一些新东西\n\nJava / Android 开发相关（或许最终的结果是随便看了看 Java\n的语法，装好 IDE 就不做事了）\n汇编语言和量子计算（这属于完全不知道干啥，写在这里是因为小学期）\nVerilog 相关（但是这个属于想想而已，因为对这东西没有兴趣，下学期\nxge 带我就好）\n编译原理相关（这个也属于想想而已，写这个是因为自动机学得惨不忍睹，要补一点）\n图形学相关（纯纯因为安主席的安利）\n\n跟进一些东西\n\n实验室项目（主要是最近划了，要跟上）\nTHUInfo 的 UI 翻新以及培养计划 / 课程表功能翻新\n科协技能引导文档的结构初始化\n\n考试相关\n\n科目二（再不考是来不及了，大三不计划回家）\nGRE（属于想考一下试一下）\n\n\n此外还有一些杂事，包括买一个新电脑、预定 GRE\n考试、选大三的课、重办身份证、回高中讲竞赛、和高中东方同好会线下聚会、陪\nSakana 玩等各种。\n因为想做的事情很多，所以想着不如就在这里开一个日记贴，就每天写一下想干什么，最后干了什么之类的。没啥价值，目标就是让自己做点事情，别划水了。\n2021.06.29\n今天想要做的事情：\n\n去驾校办理科目二入学手续\n公布科协网络部招新结果，准备一下文档初始化\nCRACKER 一日游，就到处看看有什么资料\n准备 THUInfo 主页 UI 翻新\n问一下韩旭下一步可以做什么\n\n其实想做的多，最后能做完的，凭运气吧。睡大觉去了，祝自己好梦，祝自己暑假顺利。也祝\nSakana 军训平稳度过。\n今天汇报：\n基本上弄完了网络部招新的通知工作，飞书还没有完全摸完，这个晚上慢慢来。后面应该要去问一下技术顾问团他们的情况，好准备做点事情。不过考虑到零字班的新生估计还要等他们军训完了才能安排工作，所以初始化应该暂且由老人完成。\n给韩旭发了微信消息，等他安排吧。\n目前下学期应该是四大原理 + 人机交互 + 计算机网络安全 + 台球 /\n网球，所以也可以开始做点准备了。\n之后就是逛 CRACKER。目前的一个打算是汇编和计组应该就通过 CSAPP\n先摸一下。计组可能还需要一些 Verilog 什么的东西，这个以后等买了 Windows\n电脑再来搞一搞，造 CPU 的那本书也已经拿到手了，也可以拿 PPT\n做一些补充。Java 相关是不打算弄多少，总之和 xge\n他们组队搬砖，所以就打算把一些算法代码改成 Java\n的，熟悉一下语法算了。\n编原那就是纯纯的逆天，因为我自动机学不明白，所以编译原理需要先看一些讲义和\nCompiler 那本书。\n信号据说是数学课，所以找个课本随便学应该也就应付过去了。网原看起来属于巨大背诵的一门课，找了个《计算机网络：自顶而下》，然后要到了所有的课件，就打算看着玩玩算了。\n至于那些限选课，网络安全技术看起来和网原巨大相关，懒得搞。然后就是人机交互没啥经验，就算了。\n最后是打算学习图形学，问安主席要到了整本书的电子版，然后找到了网课链接，总之打算干活。\n2021.06.30\n今天想要做的事情：\n\n去驾校办理科目二入学手续，开始练车\n还有一位网络部新人没有联系上，需要补联系，并且需要搞一下飞书\n推一点点 CSAPP、图形学什么的\n准备 THUInfo 主页 UI 翻新\n\n其实也没什么好说的，就是学点新知识之后做一点之前就有的锅。明天要早起所以赶快睡大觉吧。\n今天汇报：\n以为去报名的，结果刚进去就被拉上车开始练了，估计以后就是早上八点下午两点，一整个白天都要在驾校了，所以推活、上课这些事情都得是晚上来做了。\n那个还没联系上的新人联系上了，所以招新基本上就结束了，可以开始具体规划下面一步要做的事情了。然后对下面的工作做了一点点的推进。\n然后就是 THUInfo 还在消极怠工，不过最近会开工的，会开工的。\n2021.07.01\n今天想要做的事情：\n\n科目二学侧方停车、倒车入库、坡道起步\n推一点点 CSAPP 之类的\n准备 THUInfo 主页 UI 翻新\n\n主要是晚上和家里人聊了比较多，所以说实际上今天晚上也没有认真学一些东西。\n今天汇报：\n学车真的是比较无聊，就开车十分钟等待两小时，于是其实天气热什么的都不是最大的问题，无聊是最需要解决的。\n然后，看了一点信号处理原理和编译原理，然后就发现自己的数学全忘完了，还是得回来再学一点点。\n没什么好说的，以后估计就是这样的重复的生活了。\n2021.07.02\n今天想要做的事情：\n\n科目二继续练习，但是要问清楚考试时间这些东西\n推一点点 CSAPP 之类的（这个真的要赶快了）\n准备 THUInfo 主页 UI 翻新（栋栋跑起来 THUInfo\n了，工期来了）\n网络部工作规划再稍微写详细一点，准备主席团会议\n\n这两天除了科目二看起来什么都没有做呢，所以说下面还是要准备开工吧。之前似乎还说过要买新电脑的，似乎也给我搞忘了。\n想到一年前的自己还宣称着一个人孤独地走下去反而好，现在却苦于这里找不到人一起做事，莫名有点可笑。\n七月份，下半年的开始，要准备拾起自己了。\n今天汇报：\n很平凡地过了一天，晚上想回姜堰找人吃饭，结果因为下雨没去得了。学习也没学多少，看了一点点\nCSAPP，但是也是很肤浅。\n话说直到现在才猛然发现自己似乎没有什么兴趣爱好，这个时候又突然想到自己之前小学的时候填兴趣爱好，永远都是大众化的“读书”。思来想去，觉得自己可能不太喜欢一直呆着，自己还是比较喜欢在路上的感觉。于是就有了一个还在萌芽的想法，就是只用公交或者地铁，去很远的地方，比如说从家到北京、到广州。也正如我自己感觉的那样，我自己还算喜欢折磨自己。这个规划算是很远期很远期的了。然后问了一下\nSakana 有没有兴趣，但是她也没有给出明确答复。\n学习？那是不可能学习的。在闷热的天气底下随时准备被教练喊去练车，这种情况下那是不可能学习的。于是我是真的把贴吧、知乎刷到推荐都开始循环，然后就开始戳\nSakana\n等她回复，要么就是水群。但哪里有闲人像我这样一整天啥事没有呢，或多或少都要去做点什么事，打游戏也算。\n自己还是很不擅长应对无聊这个问题啊。其实只要有一个聊得来的人在，但是我能聊得来的都有事情，这就尴尬了。\n2021.07.03\n今天想要做的事情：\n想做的事情和之前差不多，觉得也没有必要再写一遍了。\n大概还有一些感慨吧，感慨自己怎么很容易变得惆怅起来，会有那种莫名其妙的伤感。\n今天汇报：\n今天下午和明天都不用去练车了，还算比较开心。但是相应的，我需要在这段时间内，把之前剩下来的事情处理好，包括之前自学内容要整理成文字，网络部的工作规划还是要继续细化一下，韩旭那边还要继续跟进。\n下午先写一些工作规划，然后等韩旭那边的回复，然后就是写博客了。\n然后目前实验室下一步要做的事情就是先调教好 T5 以保证能够做\nprompt。具体的东西会在实验室周报上写，这里就不会写了，毕竟也不是什么太适合公开的东西。\n2021.07.04\n今天想要做的事情：\n从驾校休息了一天，计划就是什么事情不做，好好放松一下\n今天汇报：\n发现自己最大的问题实际上是，闲下来的时候很容易胡思乱想，进而就是情绪容易不稳定。最近身边也没什么了解情况的人可以好好聊聊，所以就比较尴尬了。\n今晚似乎喝得有点多，又对 Sakana\n说了一堆胡话，大概自己到现在还没学会控制情绪。\n2021.07.05\n今天想要做的事情：\n暑期回校的计划最终安定下来了，6 号开始讲课到 22\n号，我主要负责答疑。由于 12\n号科目二才能考完，所以打算到时候再回去，这前面的一个星期就晚上线上答疑吧。\n要做的事情，大概就是继续看看论文，晚上回学校协商一下后面的安排。至于\nTHUInfo 和科协那边，真的有点过意不去了快要。\n本来想今晚找 Sakana 聊聊的，但看来落空了，所以还是自己调节吧。Holder\n能做到的，或许吧。\n今天汇报：\n回高中和 FFF 遇了一下，商量了后面的安排。\n当然还有一些和 Sakana\n那边的事情，这里不多说，但是至少我现在，真的感到很安心很快乐就是了。\n2021.07.06\n今天想要做的事情：\n没有什么很想做的，就是很平凡地看书学习、写写\nTHUInfo、写写实验室代码、写写科协文档。\n今天汇报：\n选课掉了康总的计组和人机交互，可能打算去搞 VLSI\n来混学分。出乎意料的是台球上了。\n自从昨天开始，Holder\n就变得似乎没那么难受了，或许也与梅雨渐渐离开有关。今天上午看了一点点\nCSAPP，也预约好了 12 号的科目二考试，之后就是每天去练一练就好。\n晚上主要在安排暑培和技能引导文档那边，夏老板突然提到了可以和企业 /\n实验室 /\n其他学生组织做双向链接，这样的话既解决了文档来源比较单一的问题，也一定程度上提高了文档的实用价值。\n【和 Sakana 约了见面再聊，默默期待，还有一些误解，需要慢慢解开】\n2021.07.07\n今天想要做的事情：\n因为上午不去驾校，所以睡大觉放松一下。晚上的话照常工作，不过比较紧急的事情是编写竞赛习题解答以及和猫猫准备一下文档的部署。\n今天汇报：\n回学校了，旁听了 FFF 的一节课。\n大概是觉得这一届的基础有点问题吧，很基础的解析几何都没有把握很快给出正解，这就比较困难了。\n目前老师的意思是想让我带一下几个有机会去清华夏令营的同学，自己也要开始复习一些自主招生题了。\n2021.07.08\n今天想要做的事情：\n回家拿一些当时的自主招生参考资料，然后准备码点字吧。自己的事的话，可能就学习一些基本的东西，然后\nTHUInfo 开一些工。\n今天汇报：\n出卷子真的是好累啊，到处翻找资料，然后还要想尽办法保证我是站在一个中学生的角度来思考问题。磨了一整天还熬了一夜，基本上把一份数理化的试卷全都出完了，大概准备\n10 号来考这一份卷子，以筛选出适合去清北夏令营的同学。\n我现在比较担心的是，大家都考得不高，最后还是拉不开差距。\n2021.07.09\n今天想要做的事情：\n学车，然后有什么事情就做什么事情。现在是越来越不太想把自己逼得太紧。\n今天汇报：\n下午把昨天出的卷子的答案给搞出来了，结果发现这份卷子应该是比较困难的，可能会把他们搞得很惨。\nTHUInfo\n说要开工到现在都没有动静，实验室没干活，科协现在还在筹划。总之就是除了正事之外的事情都在做。\n今晚回家的时候突然想起来 GRE\n还没有报名，可能都快没有考位了，还是赶快把坑填上。身份证也已经做好了，要找个时间去拿。眼镜有点刮花了，其实要去重配，但是也一直在拖。头发也要去剪一下了，现在还是得注意下形象？\n明天早上回学校与那些考试的同学见一下面，监考一下之类的。明天下午尽快把卷子批改好成绩公布。\n另外，我仔细思考了一下，暑假还是不要预习下学期的内容为好，暑假应该做一些其他的事情。\n所以说这个暑假的主线就变成了 THUInfo、科协、实验室、高中竞赛、\nGRE。至于新电脑、身份证、眼镜、头发之类的也就是支线任务了，科目二也将会在\n12 号迎来终结。\n2021.07.10\n今天想要做的事情：\n上午回去监考，下午批改试卷并且和老师交流一下。然后尽可能能开工的东西就得开工，目前比较急的就是实验室和技能引导文档了。\n今天汇报：\n去监了个考，然后尽快把试卷给批改好了给老师。整体而言学弟们做得还是不错，但是细节上属于是真的需要很大的工夫去训练。\n然后就是平凡的学车和练习。\n另外就是，盼望 Sakana 回来。\n2021.07.11\n今天想要做的事情：\n去高港模考科目二，期间要开始阅读论文，至于能看多少，能领悟多少就是另外一回事情了。\n然后就是尽快考虑新电脑的事情，并且尽快制定后面的讲课计划吧。\n今天汇报：\n高港练车真的是好累好累，一整天就在那里站着看各个考试位的点位，很没意思还很折磨。\n当天也没别的什么事情了，出去参加了一个饭局，平平凡凡地结束了一天。\n2021.07.12\n今天想要做的事情：\n考科目二，然后回去准备和参加清北夏令营的各位见一个面。顺便安排之后的课程。\n今天汇报：\n科目二让我整整坐在那里等了六个小时，几乎是最后一个才考的。\n于是顺理成章地没有赶得上下午回学校，晚上才和学弟学妹们见了个面，稍微聊了一些没有什么含金量的话题。\nSakana 从上海回来了，但我以后白天就似乎没有什么时间去找她玩了。\n2021.07.13\n今天想要做的事情：\n给他们讲一点很简单的东西。\n自己也要开始干各种的活了，包括看论文，写\nTHUInfo。其实最主要的是科协那边似乎真的拖不下去了。\n今天汇报：\n上课是真的很累，站很长时间会让自己很累很难受，然后还要说很多话，口干舌燥。\n其他倒是没有什么特别的感受，总体而言就是觉得过了很平凡的一天。\n2021.07.14\n今天想要做的事情：\n做一些平凡的事情，讲讲课。晚上被提前安排了饭局，所以还是得去。\n今天汇报：\n照样是讲了很平凡的一些课，没有涉及到很深层次的东西。给他们做了一个限时训练，估计效果不会很好吧。\n晚上饭局结束，去了一趟宾馆取回东西。和 Sakana\n连麦闲聊了一段时间，约了明天出来玩。然后确定买了一个新电脑，联想拯救者\nY7000，显卡只是 RTX3050，处理器是 i5\n的。买这个电脑是为了混一下大作业，顺便尝试一下一些只有 Windows\n有的小游戏。\n也是很平凡地结束了一整天。\n2021.07.15\n今天想要做的事情：\n和 Sakana 约了去猫咖看看，然后吃烧烤打电动。\n本来上午打算睡懒觉的，结果接到消息说清北夏令营同学不放假，所以还得去一趟。\n今天汇报：\n玩得算是很开心？撸猫很好玩，但是猫毛真的是很烦人，到现在我背后都是微微发痒。撸完猫吃了甜品之后去找\nFFF 吃烧烤。随后就去时代广场打电动了。\nSakana\n说大夏天的不想出门，但这也算是没办法吧。我俩的暑假完美错开，相交的时间几乎只有一个星期左右，所以要见面的话也就只有这一点时间。不过我的新电脑到货了，以后可以找\nSakana 连麦打游戏。\n明天被家里人安排了，后天和 Sakana 约了晚上看\n1921，大后天就得送她走了。于是这个暑假就这样等价于结束了。\n2021.07.16\n今天想要做的事情：\n蹲在学校正常讲讲课，晚上已经有了安排所以就没啥了。\n今天汇报：\n实际情况是，高中突然出现了电力故障导致学校全部停课，但是参与清北夏令营的同学由于在小教室里没有被电力故障波及所以电力一切正常。但是可以想见的是，看见同学们放假了，他们也完全没有心思学习。所以我就和他们玩狼人杀，聊了聊他们现在的焦虑和压力。\n他们不是不想学习，但是高中这个体系给他们的限制实在是比较多，我作为学长也只能劝说他们做一些适应和牺牲。其实有的时候，也真的是毫无方法。\n有时治愈，常常帮助，总是安慰。\nTo cure sometimes, to relieve often, to comfort always.\n\n这是特鲁多的名言，本来是形容医生的。但现在看起来我有的时候也像是这样，我帮不了他们实现他们理想中的高中生活，我最多只能做到帮助他们去理解这个可能有些扭曲的体系，让他们稍微以一种平稳的心态度过高中。\n高中这边结束之后就去忙自己的事情了。明天去见 Sakana，18\n号还有一小波聚会。\n2021.07.17\n今天想要做的事情：\n正常地活下去。重要的事情是开工技能引导文档。\n今天汇报：\n结果上午翘班了，在配置新电脑的 C 语言编译器和装\nPython。结果就这两件事硬生生让我一个上午耗费完了。下午平凡地来高中简单讲了些东西，也顺便做了一些小事情。\n晚上陪 Sakana 看了\n1921，虽然对题材没有特别的兴趣，对演员无感，但感觉看下来还算是一部不错的电影，除了叙事线很多很杂，要不是了解一些历史可能就会错乱吧。\nSakana 不急着 18 号就直接回去了，打算 20 号左右回去，于是就默默约了\n19 号再出来玩。\n总之就是，一切都在慢慢变好。\n2021.07.18\n今天想要做的事情：\n今天约了同学聚会，所以重点会在出去玩上。不过高中这边也应该好好干活。\n今天汇报：\n和姜东会玩了一个下午一个晚上，先去麦当劳吃饭搓音游，然后星巴克打雀、掼蛋、闲聊，之后定番小菜园聚餐和舞立方手痒打机，最后\nKTV。\nKTV 上我唱了不少歌，但最满意的还是《太阳系\nDISCO》。作为自己很喜欢和大家都能参与（指鼓掌和参与オーオオー以及ナナナナナナナー环节）的一首歌，整体气氛还是很好的，比那些大部分人看不懂歌词也不熟悉的比较冷的\nV\n曲要好一些。当然唱完这首歌我嗓子就明显不行了，中途的一段几乎就是在纯靠喊。\nあの一等星のさんざめく光で，あなたとダンスを踊ろうか。\n——「太陽系ディスコ」\n\n回来之后就是和 Sakana 闲聊了一会，然后转头就装了个有补丁的 Riddle\nJoker\n开始推。由于之前认真推过没有补丁的七海线，所以这次就很快地过掉了，看了一下\nH 情节怎么搞的就睡觉去了。\n2021.07.19\n今天想要做的事情：\n今天 Sakana\n家里有一些事情不能出门了，所以今天见不了面了。有一些话不如连麦的时候随便扯一下吧，晚上陪她打打游戏什么的也不是不行。\n其他事情就正常慢慢推进就好。\n【我自己依然在为一些虚无缥缈的东西而伤心，Holder\n还是需要花一些时间来恢复理性】\n今天汇报：\n用了点时间给自己的网站加了个评论系统，本来是想用 Valine\n的，结果现在较高版本的 NexT 不支持了，所以退而求其次装了\nDisqusJS，他的缺点就是需要翻墙的账号。\n之后听从了栋栋的建议换了 Twikoo，发现是真的好用而且还不用翻墙，现在我直接安利这个评论系统。\n2021.07.20\n今天想要做的事情：\n今天 Sakana 回上海了，所以估计是不能去找她了。\nHolder 一个人要好好地过好自己的生活。\n今天汇报：\n大概就是接着修了一下评论系统，然后出去吃了个饭，结果又喝多了（Holder\n从来没有信守过自己的 flag）。回来之后和 Sakana\n连麦闲聊了一点点，似乎一直在说胡话，语无伦次。\n之后就是和 LCR 两个人联机打\nMinecraft，但说是一起玩，实际上就是两个人在已经建好的一个挡里面骑马。\n【LCR】芜湖，上次骑马出去忘了把第二只马骑回来，Holder 你没马了。\n\n大概就这样平凡地过去了一整天。\n2021.07.21\n今天想要做的事情：\n今天和高中的老师一起吃饭讨论这几天讲课的情况，实际上 Holder\n并没有做出什么很突出的贡献。\n接着过下去就好了。\n今天汇报：\n听闻 LCR\n那边可以提供他们宿舍给我住，突然有点想要去上海玩一圈，也正好送一下\nSakana。但是南京突如其来的疫情让家里人对此很担心，我自己还算是不太认为会影响到什么，但也因此搞得很不愉快就是了。\n上海不去就算了吧，反正也只是去见个面，最多晚上陪 Sakana\n在交大转转圈，再陪 LCR 打一白天加一晚上游戏。\n2021.07.22\n今天想要做的事情：\n好好生活。\n今天汇报：\n最近一直比较烦躁，不知道是因为无聊还是因为什么。其实能隐隐约约感到实际上就是因为当下各种事情都不顺遂（科协事情没做，实验室那边也在咕咕咕，高中这边还是感觉自己没做到什么有用的事情）加上后面还要和\nSakana 失联，一下子又没有了倾诉的人，FFF\n不久出去旅游，这下子是真的没有谁出来一起玩了。还是那句话，想到一年前的自己甘愿一个人闭锁在黑暗的房间里，独自对着屏幕无论是欢笑还是难过，都不愿意和其他人过多交流，现在的我无疑是对过去的讽刺。\n不过稍微好一些的是，我可能解开了一些心结。概括来说大概就是，我以往认为自己伤感的来源是别人变得特立独行而怪异，但是自己认认真真享受过生活之后，我才认识到，以往昏暗的我才是最为特立独行的。\n从一个本就不合群还自认为合群的人的眼光之中看去，那一切的平凡和正常，反倒是怪异。\n\n所以 Holder 重新立起 flag，从今开始好好生活。\n【箴言：Holder 的 flag 没有不倒的】\n\n于是今天上午的 Holder 起床之后就在 Riddle\nJoker，现在应该只剩下茉优线没有完全结束了（年上系真的不在我的 XP\n上，最后推自然没有任何的问题）。\n中午的 Holder 开始到处看 V 曲的 live，真的突然想去一次 V\n家演唱会。要说现场感比较好的歌的话，《Unknown\nMother\nGoose》是首推（众人おおおーおおー的那个场面真的是很震撼的），之后就是《劣等上等》（Giga\n的专业炸场子歌），《号哭》和《东京泰迪熊》也算是很有感觉的。然后就似乎沿着推荐来到了几个网络合唱视频，首先是\n2017 年的《砂之惑星》（八爷\nyyds，可惜出道娱乐圈了，当个 P 主不好么），然后是 2011 年的《千本樱》，也算是猛然回忆起高中的一些时光了。\n之前在关于页提到我最喜欢《无梦之梦》，但是这首歌适合一个人在难过的时候自己听，用来做安慰用的。其实春卷饭的歌基本都是这个特征，很温柔，适合一个人独自欣赏，很难在演唱会上表演得好。同理还有新曲《第三心脏》，也是最近很喜欢的。\n\n最终通过一番协商，还是决定去上海了。自己的一时冲动把 Sakana\n还有家里人的安排搞得一团乱，说实话现在还是有一点愧疚。然后在安排在上海的行程的时候，发现竟然想不到可以去哪里玩。\n所以说，Holder 的脑子一热带来的是无数若干的混乱，让 Sakana\n落单还拉着她一起不知道干什么，一时间不知道说什么好。\n今天 Sakana 应该是和同学们出去玩去了，Holder\n一个人默默地去未来极越把卡里的钱给用掉了，之后骑车绕县城转了一圈。\n一个人真的很无聊，无聊的时候就喜欢胡思乱想，然后可能就会做出很没有理由的事情。\n惋惜我自己的高中没有发展若干的朋友，导致现在回到家乡竟然是四处无人。还不如早点回北京，至少我的舍友可以一起打牌，一起出去找地方看个电影或者是到处找点吃的。或者就是找北大的几个熟人出去转转，要么也可以和迅哥哥等\n308 闲聊。\n于是 Holder 又开始莫名难过起来，Holder\n自以为值得夸耀的，竟然是一片荒芜。\nHolder\n嫉妒且憎恨着那些现实生活充实的人们，虽然这种无名火显得幼稚且没有道理。Holder\n似乎就像是对着并不存在的敌人宣战一般，对着自己幻想中的困境，对着不存在的挫折精神低落而恍惚。\n那个好好生活的 flag 突然显得可笑。\n\n我一直在思索着，现在的我的生活多么像我先前的追求。和同学彻夜聚会，和\nSakana\n看电影、逛街、撸猫，即使一地鸡毛但依然决定去上海，那种自由挥洒情感，自由表达自己，不计成本地为了简单的目标而大闹一番的生活。然而我却似乎不像是之前那样无忧无虑，我每天都被一种不能明状的忧伤所萦绕。即使某天我说我释怀了，我看开了，我似乎找到了生活的乐趣。即使我这么说，我的心中实际上从未解开过这种难过的感情，只不过是因为当下的愉悦而暂且麻痹。\n在房间里自说自话地走了几圈，尝试理清楚自己这个情感的来源。结果还是不太弄得明白，所以暂且作罢。\n2021.07.23\n今天想要做的事情：\n逃到上海，然后不知道干什么。\n今天汇报：\n单纯地溜来上海了，Sakana\n因为绿格那边的政策一直没有很能确定下来比较低落，于是也就很单纯地一起吃了饭，去了私影玩了一圈而已。\n晚上打算玩冬日计划，结果因为网络原因一直没有能够一起玩得了，只能作罢。\n2021.07.24\n今天想要做的事情：\n和 LCR 混一天。\n今天汇报：\n大概就是中午先和 Sakana 吃了一顿饭然后就和 LCR 一起到处瞎跑了。\n本来的预定是去外滩，沿着江边随便走走，结果 LCR\n在地铁半路上突然提到想要去海边，但是已经出发一段路了，就决定去黄浦江入长江口转一圈。地铁坐了整整两个小时到双江路下，然后就是沿着黄浦江骑车十几公里。本来以为沿着江边能看到什么的，结果全是造船厂，能看到的就是一堆重型机械和工人们。值得一提的是本来今天是台风来的日子，结果雨是真的没有下下来，倒是风是相当的大，大到我骑车下坡不蹬的话，风会把我吹上坡。\n然后就是沿着一条路一路骑到了入江口，那里的风已经是相当大了，但依然没有能阻挡钓鱼佬们翻越围墙站到江边的防波堤上钓鱼。自己胆子小，就没翻过去看看，所以也就站在墙外拍了照片，打了个车回去了。\n至于今晚发生的一些并不太愉悦的事情，还是暂且不提吧。只能说现在的\nHolder 不太振作得起来。\n2021.07.25\n今天想要做的事情：\n活着。\n今天汇报：\n台风终于登陆上海了，整个天都是漆黑的那种，狂风大作暴雨如注。然而我还是和\nLCR\n两个人出了门在上交里面转了好长一段时间，跑去下院瞎窜，去思源湖边上看台风，去宿舍楼的风口看被吹倒的树。\n反正就是两个不要命的人在台风天的无聊之举，和昨天顶着台风去江边上差不多。结果是误了回去的火车，不得不立刻改签第二天的。\nSakana\n自然在台风天不愿意出来，所以一整天都没有见到，晚上喊她打游戏也没有理我，说是没有兴致。\n2021.07.26\n今天想要做的事情：\n继续活着。\n今天汇报：\n早上爬起来就接到了火车取消的消息，于是不得不接着留一天。\n早上和 LCR 就一直在打 Minecraft\n消磨时间，生存档从零开始真的是很耗时间的一种玩法。玩好了之后和 Sakana\n说了下午陪她去做核酸，最后是自己任性地拉着她冒着还算不小的雨去了天街。\n晚上没事做，于是合计了一下和 LCR\n又出门了，结果是一天去了两次天街（这个时候就得说交大旁边真的是没啥玩的，除了两个商场、一个桌游店、一个\nKTV、若干小饭馆之外似乎什么都没有了，喊 Sakana\n出门最终的归宿永远是找一个吃饭的地方闲聊，最多去看电影）。\n2021.07.27\n今天想要做的事情：\n回家，然后活着。\n今天汇报：\n早上 Sakana\n突然说打算送我去火车站，但实际上我知道她出远门的东西还没收拾好，但还是答应了。\n然后就没有什么特别的事情了，在火车站拥抱后分别，自己一个人坐火车然后兜兜转转回到了家，冒着雨赶去高中。\n一整天都过得比较累，回来之后又不得不通宵清掉了一些任务。\n2021.07.28\n今天想要做的事情：\n清闲地活着。\n今天汇报：\n今天是给高中的学弟学妹们考试的日子，自己是出题人也是监考。监考这个活是真的令人烦躁，无聊至极，甚至愿意出点事情让自己不至于无聊。\nSakana\n最终踏上了旅程，坐了十个小时的火车前往兰州，她也在经受着无聊的时光。两个人一起听歌了一个小时，她到达兰州之后需要办理一系列的事务，便暂且失联了。\n\n不过 Holder\n似乎算是慢慢理清楚自己到底在担忧什么了，异地造成的交流不畅和误解真的是相当折磨。不多说吧，总之就是意识到了我和\nSakana\n处境其实类似，而我潜意识里深刻地误解了很多的事情而已。所以现在应该心态平稳很多了，Holder\n也已经下定决心要保证自己生活乐趣的多元化了。\n2021.07.29\n今天想要做的事情：\n一个人活着。\n今天汇报：\n今天什么都没有发生，起床吃饭，一个人躺在床上刷手机。就是典型的一个无聊的人应该有的样子。\n现在 Sakana\n应该到达了最终的目的地，可能以后就会是几乎完全失联了。大概如此。\n2021.07.30\n今天想要做的事情：\n把科协暑培好好弄好。\n今天汇报：\nSakana\n现在彻底处于失联状态了，多半是不到晚上联系不上了。虽然有点消沉，而且为生日怎么办的事情有点烦躁，但是自己的事情还是得好好做下去。\n\n就这样吧，这个纪录就此结束，新的生活渐渐就要开始了。\nHolder\n通过这个暑假，大概是缓慢地将自己的心态平稳下来了，或许还有一些不能言说的不舍、迷惘、辛酸等等，但暂且都埋藏起来吧。不过相较于一个自闭的\nHolder，虽然现在的我或许不如以往那样沉稳专注，但可能更像一个正常的人吧。\nあたしが愛を語るのなら，そのすべてはこの歌だ。\n誰も知らないこの物語，また口ずさんでしまったみたいだ。\n「Unknown Mother Goose」\n\n总而言之，或许还有许多的困难，还有许多的考验，还有很多我们需要去做的事情，但我依然坚信未来可期。\n我是 Holder，我们继续走下去吧。\n","categories":["【生活记录】日记"]},{"title":"2022 暑假生活记录","url":"/2022/05/27/2022-summer-record/","content":"2022 年的暑假，将会来得意外地早，因为我提前回家了。\n或许是抑制不住灵魂对自由的向往，或者是想要回到高中见见曾经带过的学弟学妹们，或者是想要见见\nSakana，都可以是我提早回家的理由。\n总之面对着可能有三个月的暑假，还是稍微记录点东西省的虚度。\n\n2022.05.27 - 2022.05.29\n先回想一下自己需要完成什么事情吧：\n【下述事务列表更新于\n8.15，删除、调整部分事务，后续不再更新且不再具有效力】\n\n科协\n\n【半搁置状态】308 权限系统\n【半搁置状态】与软工课程的对接安排\n图形学文档编写\nRL Tutorial 合并\n【半搁置状态】前期文档补助核发\n\nTHUInfo\n\n培养计划功能\n\n各类项目相关\n\n参与实验室快手合作项目\n实习收尾工作\n\n递交离职申请\n\n\n下学期预备工作\n\n继续编写日语语法手册\n学习抽象代数 Artin\n\n一些杂杂的东西\n\n冲雀圣【至少打回雀豪三吧 OTZ】\n四系麻将联赛\n\n\n基本上而言，课内实际上压力并不大，所以升学相关一定是要重点考虑的，目前的\nTarget 是孙立峰教授或者艾海舟教授，还是稍微多去做点准备。\n总之是回去之前把体育相关全都清理掉。回去之后在期末结束之前都是课内为主，同时升学相关内容也得做做，估计期末结束后也就隔离结束了。之后就可以暑期干实习、做实验室的事情、做自己想做的事情。\n看起来还是前途一片光明的。\n\n这几天总体而言就是简单的准备回家，总之是下面的几项工作：\n\n事务性\n\n离校事务\n\n递交离校申请书\n完成北京市要求的集中核酸检测\n向辅导员、班主任、院系报备\n\n回家事务\n\n和村支书对接接站、隔离政策\n提前和家里人商量打扫房间\n\n路程\n\n预约送站校车\n预定火车票\n\n收拾行李\n\n清理必须要在学校内完成的事情\n\n完成阳光体育打卡\n完成体育期末考试\n\n\n除了这些事情，也就多完成了一个开放 THUInfo 内测组的事情。\n这些事情，已经足以让两天都没有什么闲功夫了。\n\n最终总算是到家了，对于从有中高风险地区归乡，但是出发地低风险的旅客，政策似乎是需要落地后做两次核酸检测，统一转运到集散点，由目的地社区凭社区接收人员报告来接人。\n疫情反反复复，我回家也从疫情前的直接从火车站搭 1\n路公交，变成了需要查验健康码，再变成需要回家后立刻向社区报备，最后就成为了现在这样，八点到站，十一点我才到家。\n不过已经到家了，就是好事。熟悉的水汽蒸腾、潮湿闷热的夏日的家乡。\n2022.05.30\n新生活的第一天，要从睡懒觉开始，一觉睡到了十一二点，被家里人从床上拽下来了。\n下午简简单单抄完了数学实验最后一次实验报告，稍微看了看数据挖掘的作业，但是一点都没有头绪。\n今天比较大的事情就是 Career9\n发布运营了，可以看到导师公布的名额数和当前招生情况，然后校内版也可以在同学间互相交流自己的推免状态。这个网站大约是很有用的，但是感觉推进下去会比较困难，毕竟老师那边的态度比较模糊。\n但是可能我不太想关注这个网站的运营了，而是关注我自己的推免情况。\n其实真正到现在都没有老师的是少数了，大部分人只是找好导师但是还没有双向确认而已，所以我现在比较重视周三和孙立峰老师的交流，看看他的态度是什么。\n哎，这种事情不是什么很急的事情，它就像初夏闷热潮湿的那种感觉，仿佛有什么东西附着在身上，挥之不去，只有一种无力的烦躁感。\n2022.05.31\n五月的最后一天了，明天就要和孙立峰老师交流了，也就会决定我的六月是开门红，还是会延续五月这种莫名的阴郁。\n今天本来是打算快速写完数据挖掘的最后一次作业、看看搜索引擎，然后去了解一下孙立峰老师相关情况的。但实际上，在写数据挖掘作业的时候还是被\nPage Rank 卡住了，然后就是熟悉的，卡住就去摸鱼，和学长闲聊。\n中途家里人突然因为网络银行无法使用安全插件，几十万卡在账户上转不出去，火急火燎地。然后我尝试着上手看，就看到\nActiveX 格式的插件。不禁感叹怎么还在用这种古老的东西，所以手动设定 Edge\n浏览器浏览网银页面的时候使用 IE 模式，于是这个问题就这么解决了。\n果然是上古遗物啊。\n\n反应过来数据挖掘作业还没写，又去网上到处找 Page Rank\n的讲解文，半懂不懂地写完了代码搞出来了和舍友一样的答案，这个时候我才明白\nPage Rank 只是一个简单的在图上的马尔可夫过程。\n好多次都是这样，抄答案抄着抄着看会了。只不过这个理论上不用一小时就能写完的作业我从下午两点写到了晚上九点。\n2022.06.01\n今早和孙立峰老师见了个面，但是自我感觉不是很好，感觉很多话想说都没说，有些不该说的还是说了。比如说我应该不透露我还有其他老师想选，比如说我应该再解释一下我为什么到处乱跑。\n不过孙立峰老师确实似乎展现出了一点的兴趣，大约是对着我的简历问了很多问题。\n在和老师见面之前，几位学长告诫我说一定要展现出对老师研究方向的兴趣，这样成功机会会大一些。但我只能说，我尽力去了解孙立峰老师的方向了，但是还是很难当场就展现出那种兴趣盎然的样子。\n孙立峰老师的博士生学长说如果夏令营那边没有很强的申请者，我应该是稳了。\n但是他也不知道我就是因为半路杀出来的强者而被上一个老师拒绝的。\n我现在是越来越认可这句话了，就是说人都是活在假设里的。我们假设道路畅通，我们假设我们可以随意流动，我们假设外卖总能到达，我们假设超市总是货源充足，但是疫情的封控措施摧毁了这些假设，我们就变得不安。我的推免也是这样，我总是假设老师的认可就代表我高枕无忧，但实际上面对变故，不是白纸黑字的约定，都可以摧毁。\n所以实际上我依然是不安的，没有斩钉截铁的口头肯定或者直接认定，说实话，我不敢保证这次不会和上次一样突然跌落。\n\n下午被镇里要求去做了核酸，回来想起来体育打卡还没有做，草草拿手机拍了视频交了上去，就算完成任务了。\n晚上突然告知数学实验取消期末考试仅考虑平时实验报告分数，虽然少了一门考试很高兴，但是说实话我也有点害怕因为大家拉不开分差突然吃一个\n3.6，我的 GPA 挂在 30% 的边缘摇摇欲坠，希望不要在我想要 KEEP GPA\n的时候来意外。\n\n晚上和 Sakana 打了三四个小时的电话，先是打 Escape\nSimulator，然后她因为电脑过烫就不想玩了。之后就在闲聊，聊游戏，聊未来的打算，聊最近有意思的事情。\n其实是挺快乐的，很平凡很平凡的快乐。\n\n从今天开始突然打算早睡了，因为确实最近身体也感觉到了有点不堪重负，可能熬夜的伤害也在慢慢显现。\n年轻人还是对自己的身子稍微好一点点吧，先从能两点睡觉开始。\n2022.06.02\n今天没有什么预定之中的安排，只是很单纯的需要完成还剩下的事情而已，比如说搜索引擎的大作业。\n很久没有碰前端，手还是觉得有一点点生疏，果然这种东西和乐器一样，必须要时时刻刻练习。\n\n在老家实际上还是挺舒服的，除了升学焦虑之外没有什么烦心的事情，日常生活的后勤工作也做得好好的，但是总觉得缺少了点什么。今天和东方同好会的朋友开了个腾讯会议，我共享屏幕打牌、打永夜抄、写大作业，在听到同龄人们对我的操作或理解、或吐槽的时候，我大概是觉得，应该要回到这些群体之中了。\n有点按捺不住，想早点去姜堰住几天了。明天就和家里人商量，不妨直接等高考完了就去姜堰，和同学们一起去玩耍吧。\n不过在此之前，依然有相当大量的事情需要我来完成，最基础的就是搜索引擎的大作业和密码学的考试。\n今天在浴室里唱了一小会歌，果然唱歌也是需要时常练习的啊。\n白い桜の花の季節は、遠く夢の中にだけ。\n青々とした桜の葉は、なにも語りはしない。\n「夢と葉桜」\n\n\n实际上最近一直都是这种，对未来隐隐担忧但是并不会影响我做手头上的事情的这样的状态。不过也越来越理解安老板所说的一些话了。\n周六预计是要进行下一届科协副主席的选举面试的，我其实很期待高老板会作何表现。\nWhatever，今天也要早睡。要做到不带有任何压力上床，一觉就睡到第二天天亮。\n2022.06.03\n今天还是做了不少事情的，和 Sakana\n开腾讯会议学习（但是这个人下午晚上都是在床上睡觉\nT^T）。不过我也就简单做了一些搜索引擎，然后复习了一点点密码学。\n因为是端午，晚上家里有小聚餐，但问题在于我又被灌了可能有半斤左右（一杯半）的白酒，中途我通过疯狂喝水喝汤压住了酒劲，才不至于和一年前一样直接低血压晕倒进医院。\n白酒这东西真的好喝吗，我到现在嘴里还是那种混合着今晚饭菜和酒气的味道，十分不好闻。\n中途从聚餐逃离了，因为 V+\n群在商讨你画我猜，于是就回来打你画我猜了。\n不得不说这种接力式的你画我猜非常有意思，因为你永远不知道你的上一个人会给你画个什么，或者给你一个什么样的词语。比如今天\nNe 老师就给我的一个词语就是“P 25 47 23 度和眼镜，莫非是\nneji”，这种词语我也只能乱画，说实话完全不会，但是节目效果拉满。\n\n明天要面试科协新一任的各位副主席了，还是有所期待的。\n但是今天说实话没有怎么学习，倒也是有点隐隐担忧后面的考试和大作业，和孙立峰老师也没有进一步的联系，应该也有点心里悬着。\n2022.06.04 - 2022.06.08\n这五天基本上每天的生活都是一样的，就是起床后写搜索引擎大作业写到睡觉。\n现在回过头来看搜索引擎大作业，我负责的前端部分，说实话我自己是比较满意最后的成果的。刚刚动手写的时候，我意识到了我许久没有写\nReact，但是写着写着发现那些之前的手感会慢慢回来，而且这一次还弄明白了好多之前并不是很明白的一些\nReact 特性。\n最后助教也说写得不错，那我觉得这几天认真做事还是有所回报的。\n\n7 号下午验收搜索引擎大作业，但是 8 号就要考密码学。7\n号我检查完大作业的时候，我的密码学是一点都没有复习，最后我是一晚上突击学了一下直接上考场了。\n说实话密码学的内容真的不多，几种讲了很多次的古典密码、Enigma、DES、AES、RSA、DH\n密钥交换、消息认证码、数字签名，统共也就这些话题。古典密码考的是细致，只要稍微细心点错不了。DES、AES\n总之也是计算量大头，但其实弄明白 𝔽28\n上的乘法定义和多项式乘法定义也就那样，但是考试最后没有考\nAES，白费了我打的乘法表。非对称加密那些东西，不会考很难的计算，密钥都是两位数，计算器算算就行。\n但遗憾的是，我 Enigma\n忘记了明文和对应密文不会是同一个字母这个性质，一道 6\n分题没做出来。消息认证码的答案没来得及写完，最后也不知道老师愿意给几分。不过都说了一周内出分，那就等等看吧。\n\n实际上 7\n号晚上虽然说我在复习密码学，但实际上我主要在做今年的高考数学试卷。我自己做的答案和一些评价写在另外一篇文章了，这里就不说什么，\n近期打算清掉一些任务之后，去姜堰住十天半个月的。暑假也打算南京、无锡到处走走，总之不太想闲着。\n2022.06.09\n今天主要是回去参加一些家里的白事仪式，确实也挺没什么意思的，除了一不小心跌倒扭到了脚，现在还疼着。\n不过今天零零散散做了不少小事，摸了一下家里的钢琴、下载好了孙立峰老师给我的论文列表里的论文、被\nreturn 拉到了日本友人的 Discord\n服务器、找到了许久之前就想玩的游戏的资源等等。\n不过倒也是荒废的一天，没有做什么特别有价值的事情。\n想起来自己还没有给密码学第三次作业作出什么贡献，不如明天稍微找点时间看看，而且\nOS 也得开始动手，系统结构也得开始复习了。\n但是，明天去吃一顿 KFC 才是重中之重。\n2022.06.10\n今天其实整体都有点阴郁的感觉，因为数学实验按照老师的意思是有可能把考勤分放大到五十分，这意味着一堂课都没有去的我有可能会被挂科。\n我确实也是有这种情感倾向，就是容易滑坡。当遇到挂科风险的时候，我就会想到我的\nGPA 可能没办法\nkeep，想到可能达不到导师的要求，就想到可能没有书读，总之这样一连串下去，我就瞬间觉得没什么动力去做事情了。\n然后今天就有这种奇妙的焦虑感，在此基础上于是赶快去看论文，和孙立峰老师包括他的学生去交流。\n不过其实按照安老板所说，如果真的老师决定招收，那么其实只要成绩达到国家政策硬性要求就行，而这个要求是很低的。\n但是在和安老板交流的时候，我对孙立峰老师这边的不确定性的焦虑也是愈发严重。总之这些事情叠加起来，就会让我非常的不知所措，所以一整天都过的并不安分。\n\n不过现在回头来看，按照我这里光认识的就有四五个数学实验一堂课没有去过，签到一次没有去过的，可能最后真给挂科的可能性也不大。\n孙立峰老师似乎也还在跟进我这边。\n实际上总之就是什么都吊着胃口，这种处境是最为难受的。\n不过后面就要开始糊弄 OS Lab 和\nOS、系统结构的考试了，论文一定得好好看，但是现在课内该糊弄还是得糊弄。\n2022.06.11 - 2022.06.13\n这段时间过得比较恍惚，首先是周六简单地忙了点事情出去散了个心去吃了一顿\nKFC，和孙立峰老师那边有了更多的一些简单交流。晚上给一位才高考完的学弟讲了一堂简单的日语课。\n周日则一直在忙上忙下赶作业，最后 OS\n还是没写完，交了一个写了一半的版本上去了。\n周一则更加颓废，面临三份大作业、两个虽然不重要但还是一点没有底气的考试，面临可能的挂科风险，面临还没有确定的博士名额。我只记得我中午才起，吃完午饭还又睡到了四五点，打了两把牌吃了晚饭就一直在不知道要干什么。\n\n现在整个人都处于一种由于未来不确定感下的恍惚之中，或许也与我从来没有如此迷茫过有关。\n但是我能怎么办呢，我只能说我尽力了。稍微给自己打点劲开始做点事情吧。先大致给一下后面几天的安排：\n\n13 日晚：OS 复习、写日语课讲义、看数据挖掘\n14 日：上午复习 OS，下午考试，之后复习系统结构\n15 日：上午系统结构考试，下午晚上做数据挖掘作业、写日语课讲义\n16 日：搬家，之后的事情之后说\n\n其实只要熬到 24 日所有的大作业结束之后，课内就尘埃落定了。\n安慰自己应该不至于再被咕咕咕一次，安慰自己不至于就这样被挂科。\n让自己再一次活在假设之中。\n\n深夜最终还是不放心 OS\n开始复习，但是深夜的时候真的特别容易因为没有人交流而唐突陷入一种情绪的低谷状态，本来最近状态就不是很好，现在更是非常难受。\n还是稍微宽慰一点吧，反正六月底，最晚最晚总不能六月底这些事情都不会结束吧。还是期望着最好的结果，推免名额有个落定，数学实验也能混个\n2.6 之上的分数，所有的大作业都能高质量完成。\n希望如此，希望如此。\n2022.06.14\n凌晨五点睡到了早上九点，草草吃了点东西之后继续看了一小会\nOS，但实际上这种困倦的状态真的是一点都看不进去。\n下午的 OS 考试，说实话直接给我考懵了，我只能庆幸我记了\nPF，不然的话可能真的要给绩点带来重大打击。如果要说的话，前面判断题不算难，文件系统的实践题也不难，简单做做就好了，文件系统的理论题非常繁复，计算量很大，花了我可能得有二十分钟。同步互斥相关题目，这道题直接给我看傻了，我直接盯着这道题看不出一点头绪，即使我自己还稍微认真看了这一部分的内容。银行家算法，前面都还好，但是后面我理解错了意思，可能一整条都做得不太对。\n但总之我计算过了，期中考试我 82 分，五次实验满分 40\n分我就当他给我扣掉 5 分，我考到 30\n分卷面分也就及格了。前面的简单题再怎么说，我也应该凑凑有 30 分了。\n\n考完动身去了姜堰，和姜中音游群的同学见了面，吃了开封菜打了一堆音游。回来之后便赶快开始赶工系统结构的复习。但说实话，我看了一晚上，现在已经是凌晨四点，我还是没开始\nTomasulo\n算法。本来想着系统结构差不多考到四五十分就够了，放掉这一道题不算什么的，但是一想自己的大作业最终还是得做\nTomasulo 算法，早学晚学都得学啊。\n今天连轴转了一天，居然就在这种繁忙的压力之下找回来了一点感觉，那种隐隐约约觉得好像我还能掌握生活的感觉。\n今晚要是能摸索出来\nTomasulo，大作业也就可以开始动手，考试也应该大体是没有问题的，系统结构这门课大概也就圆满结束了。之后数据挖掘和图形学的大作业，再冲一冲也应该能写完。\n总而言是烦心事也是慢慢减少的，好日子终究会来的。\n2022.06.15\n今天考了系统结构，发现考试也不算是很难，除了没有复习的 Tomasulo\n算法之外，其他的至少都是能做的，虽然对不对不重要了。\n因为通宵复习了下午直接睡昏过去，晚上爬起来吃了晚饭出去转了一圈，然后就要准备做大作业和跟进老师那边了。\n\n密码学出分了，没想到只复习了一晚上，两道大题胡乱写也能考\n95，早知道不那么努力了（弥天大雾）。\n2022.06.16 - 2022.06.18\n已经在姜堰住了三天了，但感觉好像还是没什么特别的记忆点。\n刚来的那天晚上，请了今年高考完的两位同学吃了个烧烤，期间从大学生活一直聊到了姜中目前的情况、暑假能干什么、各个专业的就业前途，甚至还聊到了人类的科技发展（大雾）。那天确实也是话很投机，从九点开始吃，聊天一直到靠近晚上三点。\n其实和他们聊也主要是帮他们排解一下最近的压力，他们似乎也因为高考还没有出分比较紧张，尤其是自我感觉不是很好的。\n\n第二天就是一整天都在家里写数据挖掘的大作业了，这个作业说实话也就是照着网上写的比较好的一顿狂抄，反正他们用了什么特征工程我们就照着这样提取特征，然后模型的超参数也是随手调调。\n然而实际到现在我们也没有做出来什么很好的结果，ROC 评分一直卡在 0.64\n左右，离我们的目标还是有一段距离。\n\n第三天主要是陪 Sakana\n出门去了，然而姜堰也就这么点大地方，早就给我们逛遍了。结果就是逛了会累了到星巴克坐着，我写了会大作业后，Sakana\n突然说想打麻将，于是就简单教了她一点日本麻将规则。\n晚上我自己要打 MCLeague，于是事先回来了，普普通通吃三，无功无过。\n明天去混姜中的毕业典礼，就当散心了。\n当然今天的插曲就是我的 fufu\n被我家里人签收了，他们震惊于二十几岁小伙子还在买毛绒玩具（大雾）。不过也确实，可能这种对可爱的\nfufu 的喜好也很难被刻板印象所接受。\nOS\n期末也出分了，我居然成功卷面分及格，这让我很是震惊，因为我几乎是裸考的，我本来的估分是最高\n40 分来着的。\n\n说实话最近确实有一点找回生活节奏的感觉，感觉之前烦心的事情慢慢淡出了视野。\n就这样平凡地过下去也挺好的。\n2022.06.19\n因为数据挖掘的作业导致只睡了大概三四个小时就跑去姜中看毕业典礼了，感觉办得超出预期，至少每一个节目都有完成度，而且独舞节目也实在是不错。\n期间遇到了姜中音游群的各位群友，于是散场之后简单聚餐了。\n他们怎么说呢，还在学校的签名墙上宣群，而且打出的广告语是“群里有\nHolder”。\n\n下午跑去学校见各位老师了，可惜的是孙校没有时间，于是只能明早再去看看了。之后简单遇到了刘老师和邱老师，和他们主要是交流的是一些自己的近况和姜中的近况，其实也就是随便聊聊，但是没注意时间就到五六点了。\n晚上有饭局，好玩的是他们七点开席，但我七点有保研政策宣讲会，于是只能边吃边听。这中间我舍友还催我数据挖掘的作业，于是中途又离场去写作业了。\n\n今天还是比较累的，本来就睡的少，结果还到处跑，加上明天还要早起，黄天驰学长也在催我看论文，大作业也还有两个，一瞬间压力就上来了。\n只不过还好数据挖掘的结果还不错，所以就还好。\n2022.06.20\n早上早早起来去学校找孙校长，但中途接到消息说有老师心脏病犯了被送去了医院，孙校急急赶过去，也就没有聊到什么特别有用的内容。\n上午回到家本来以为精神状况应该还行的，结果躺在沙发上睡着了，期间错过了暑期实习选专题，打开群的时候已经剩不了多少了，不过仔细看了看，有一个有关计算几何的好像没人选，就先选上算了。\n下午是暑培的前期组织者交流会，其实进行得很顺利，大家也都很有想法，但问题就在于好像没有就\nPython Track 到底布置什么样的作业达成共识，总之现在还是等等。\n然后就是看论文看论文看论文，好像没什么好说的。\n啊，这种平凡的生活倒也不错。但是问题在于，马上又要交 Tomasulo\n算法大作业，又要花点时间写了，什么时候课内才能真正结束啊。\n\nTomasulo 算法决定只写算法主体部分，GUI 就不是很打算写了。\n然后今天下午说是数学实验出分了，但是等来等去都没有等到 Info\n网站上的成绩，问了舍友他也没查到，是不是只更新了毕业生成绩，我们还要继续等的意思。\n论文也没看，又开始焦虑会不会因为太摸鱼再次被拒绝了。\n一周的开始并不是那么顺利啊，还是需要稍微进一步的。\n2022.06.21\n记 PF 的好处在于你可以摆得很彻底，所以今天也是半划水半干活地写完了\nTomasulo，但是明天的验收也不知道会怎么样，不管了。\n所以，图形学、论文都要开始了。\n今天数学实验的助教和我说，似乎最后老师决定了考勤分仅有两分，这么说来，我反而满绩了。\n\n今天在 Sakana\n注视之下打了一把雀，然后点了至少三四个炮被飞了。我怎么说呢，感谢 Sakana\n还觉得我打牌还行。\n2022.06.22\n上午系统结构 Tomasulo 大作业检查出锅了，sw\n指令似乎又没有处理好，但反正只要不是零分就其实问题不大。\n话说助教捉着我的分支预测一顿疯狂提问，可能这就是没写 GUI\n的特殊待遇吧。\n今天下午本来是要好好写图形学的，结果又躺在沙发上睡着了，有点过于摸鱼了。\n\n今天的一大好事就是，孙立峰那边确认给我名额了，所以我现在，所有事情就都安定下来了，唯一需要解决的就是课内需要稍微卷一卷。\n啊，生活最终还是变好了。\n2022.06.23 - 2022.06.26\n这四天应该来说过得很充实，充实着快乐着。\n先是 23 号通宵到 24 号写图形学，完全就是从零平地起高楼写完了\nSPPM，还写了软阴影、UV 贴图、KDTree 加速、Octree\n加速、景深、复杂网格等一堆东西。但没想到我们助教实在是查得太松散了，大概有这样的一段对话：\n助教：“同学你写了软阴影吗？”\n我：“有的有的！”\n** 正准备打开面光源采样得头文件自证 **\n助教：“好的知道了。”\n** 此时头文件还没打开 **\n\n总之感觉比较随便，可能还是最终报告之中的图会比较重要吧。\n话说我图形学最后实在是在验收前没有办法写一些什么很复杂的东西了，于是就拿两个斯坦福兔子随便摆了摆就当验收了。\n\n图形学验收完了就是办理暑期实习的入职，暑期实习的时间也就定在了 6.27 -\n8.06，六个星期。\n但与此同时，我弟弟的高考成绩出来了，然后实验室学长说可以开一个简单的开题会讲一讲最近要做什么事情。\n于是 24\n号的晚上愣是没能歇下来，即使我已经快四十几个小时没有睡过觉了。\n当天晚上最好玩的事情就是，我水群的时候勉勉哥突然提到想唱\nK，结果我也有点想去，虽然很累。结果是两人一拍即合打算就在家门口的 KTV\n随便玩一会就散，结果群里一堆人都附和，最后变成了晚上九点钟五个大男人一瞬间就组好了\nKTV 车队。\n不得不说小县城的 KTV\n不仅外语歌不全，而且音响效果也不好，不过本来就是过个瘾而已，那也就算了。\n\n25 号就立刻去找 Sakana\n去了，每年暑假的必定活动——混入上海交大招生组。当天下午简简单单陪他们打了一小会牌之后便去了学校准备第二天的摊位。\n但是这个时候有个比较大的问题就是我们数据挖掘大作业的报告需要交了，于是还得在这中间抽时间写报告。\n当晚有了饭局，所以短暂分开了一会，吃完饭之后还是去了上交招生组那边，和他们打麻将去了（弥天大雾）。\n26\n号便是简简单单地去学校摆摊，期间遇到了音游群的各位，结果就和他们顺势在上交的摊位旁边，支起来了一个姜中音游群摊位。简单拿着迪拉熊、Arcaea\n的碟和 Holder 宣传，当然意料之中的就是没多少人来。\n\n26\n号比较大的事情就是和很多的清北挂线毕业生聊了很多很多，其中有一位可以强基进北大数院，但是实际上也不能保稳，然后强基还不能转专业。我和他以及他家长提了很多次如果不能转专业就意味着那些数学本科转金融、计算机的捷径不存在了，必须要近十年完全贡献给理论数学，这个耐心要有。而且我也和他提过多次北大数院的竞争，如此云云。\n虽然其实我自己感情上不是很想他来北大遭罪，但是考虑到在这样说太多毕竟会和高中的利益冲突，和他家长内心早就拿好的决定冲突，我也便悄悄退出讨论了。\n感觉这一届我们高中说实话，特高分层实在是被腰斩了。还以为他们会发挥稳定的，谁知道只有一两个裸分上线，也不知道哪个环节出现了问题。\n\n另外一个有点奇妙的事情就是，在和同学们交流完了，自己数据挖掘的报告也写完了之后，我回到上交招生组找\nSakana，正好她在和一个学妹说绿格实践的事情。\n怎么说呢，有的时候听到这些东西就不由自主地开始回想到一年之前那段不堪回首的经历，虽然我现在也已经不太在意\nSakana\n的交友问题（毕竟她先是独立的人），虽然早已经安慰好自己，虽然早就和她平稳地又度过了一年，平凡地庆祝了四周年。\n但是一年前，无论是当时刚得知 Sakana\n对我心灰意冷，自己也愧疚于三年前的冷漠，还是之后无理取闹地将他们一群人拆散，还是因为搞得\nSakana\n当时也混乱不堪而自责。总之一年前的那一次情感的崩盘，即使已经似乎修复了，但是依然在一些时候，回光返照。我还是会有时在梦中体会到一次又一次失去她的信任的恐惧。\n一年前的那些事情，搞得我即使已经是现在还是时不时神经紧张，今天在听到那些字眼，还是会出现心头一紧的生理反射。其实\nSakana\n也是，今晚我和她一提到这件事，她很快就在和我说自己已经和他们没有联系了，她也被我折腾到形成了属于她的条件反射。\n其实只要把这件事掩藏起来，实际上就和什么都没有发生一样，我和 Sakana\n的关系确乎也在这一年随着把这件事情彻底敞开谈了之后回到了正轨。\n但是这件事，确确实实地给我和她，带来了一些感情上的禁忌。\n虽然似乎一切都不会是尽善尽美的，都可能会经过这些折磨，但今晚，确实还让我感觉我的感性还是脆弱的。\n\n但明天就是实习的入职仪式，最近还是可以找 Sakana\n随便玩玩，自己的生活依然是在正轨上，倒也，没有那么多可以担心的事情。\n2022.06.27\n今天直接就是在家睡了一整天，因为入职仪式也没有说什么有用的信息，我\nmentor 也一直没来找我，所以我就无所事事了。\n晚上正常去吃了点饭，就回来睡觉了。\n2022.06.28\n最终我的 mentor\n还是说好了安排，简而言之就是不查考勤，只要每周汇报就可以。然后现在安排的任务就是学一些自动驾驶方向的基础概念。说实话应该不太困难。\n但是我的图形学和实验室那边的任务似乎又搁置一段时间了。\n\n今天和 Sakana 一起去了星巴克学习，但这个人，先打了两个小时的\nPvZ（大雾）。\n然后晚上就回泰州了，和家里人交流了很久关于无论是我自己的未来还是我弟我妹、姜中的未来等等奇奇怪怪的内容。总之还是有很多需要做的事情吧。\n2022.06.29\n今天应该说需要让生活回到正轨了，该找找我妹稍微聊聊，然后该安排一下自己科目三的事情了。\n之后就应该是周一到周五做实习项目、实验室项目，然后周末练车的无聊生活了。\n\n经过交涉，科目三那边因为实在打不满学时所以没办法去学了。然后本来想着早点去北京见见导师的，结果因为政策混乱也暂且没有什么去的想法了。\n今天图形学很努力在做了，但是实在是没有什么推进，真的不想写报告。\n\n我现在也渐渐发现了，我感觉我一到暑假这种没有什么事情占着我的精力的时间段，我立刻就会陷入一种极度敏感的状态内，很容易因为各种小事变成一种郁郁寡欢的情感。这个时候只要有点不太顺心的外部刺激，可能就会出现一年前的情感崩溃。\n我不太明白这到底是什么缘故，我感觉我就像依赖着精神药物才活着那样的瘾君子一样，只要不沉浸在忙碌之中，就全身不自在。\n仿佛除了把我的生命贡献给无休止的折磨之外，我就找不到什么特别的意义一样。\n好像一年前我就已经得到了这样的结论。\n就像今天晚上我处于这种状态，仅仅是因为 Sakana\n回消息晚了一点点都有可能导致一瞬间堵了一下那样的感觉。但是我先前在通宵做大作业的时候，连续两天和\nSakana 一共就说了两句话也丝毫没有什么影响。\n然后因此打开了一年前的日记，开始独自回味当时的混乱。万事万物总归会奇妙地让我重新回到那一个深渊。\n当时的事情仿佛是完全解决了，但是也不知是我自己的担惊受怕还是我自己所谓的病态的完美主义，总认为还存在着什么，还有什么没有做到，还有什么问题没有解决，还有什么结没有解开那样，做着无止境的自我反思。\n似乎有人提到过放弃一切事物都存在简单完美的解决方案这样的思想是成熟的标志，学会接受、学会隐藏、学会平衡是最终的目标。但我还偏偏和那些做基础数学的人一样幻想着总有一天所有的悬念都会揭晓，所有的不安都有结局。\n我还是不是很懂。其实从今年五月被徐昆拒绝之后，似乎我的心态都有这样的感觉。\n随着自己暗示着自己一年前的混乱并没有解决的时候，那种熟悉但令人恐惧的不安再一次席卷全身。\n先尝试着自己挣扎吧。\n\n2022.06.30\n今天因为组会暂停，于是拉着 Sakana\n和我的同学们打了两个小时左右的牌，我被她吊着打（确信）。\n然后快速干完了图形学的报告，于是大三下学期的所有课程我都完成了，下面就是等待出成绩，只要没有什么很明显的大问题，我这个学期总之是平稳地过去了。\n下面就是白天做实习的事情，晚上看实验室的事情，两边都是每周开会，所以还是需要稍微注意注意。\n七月份了，可以开始迎接新的自己了。\n2022.07.01\n今天开始干实习和实验室的锅了。\n然后顺理成章地摸了一天的鱼。\n2022.07.02\n今天主要是在看强化学习入门，然后和 Sakana\n因为她摸鱼产生一点点摩擦。\n强化学习也就看了还没有和深度学习结合的部分，感觉很 make\nsense，但是好玩的就是遇到了“狼一头撞死”这样的笑话。\n那个笑话的意思大约就是作者需要训练一个狼去捉羊，但是那只狼好像不怎么聪明，一直捉不到羊，于是作者加大了捉不到羊的惩罚，结果发现狼一出生就会直接撞死在石头上避免惩罚。所以作者在感叹人工智能都会拒绝内卷。\n而我今天要训练的是一个走迷宫的模型，地图上有两个地狱，遇到就会有惩罚，有一个天堂，遇到就会有奖励。去天堂需要稍微绕路，去地狱出门就是。但是我用的那个教程上他写的代码框架里面，有个问题，就是当模型在角落的时候应该缩小决策空间让模型不至于不动（比如在左上角的时候就不能作出向左走的决策），但是他没有，这就导致训练出来的模型如果没有碰巧在随机走步的时候到达过天堂留下正向反馈，那么他就会直接缩在角落避免进入地狱。\n只能说人工智能还是会帮助我们发现一些奇怪的思维盲区，人工智能还是比我想象的稍微聪明一点啊。\n2022.07.03\n今天主要陪 Sakana 去了，简单把之前没有逛过的万象城简单逛了一下。\n不过今天也顺手第一次去玩了舞萌 DX，不过不得不说迪拉熊真的好好玩。\n2022.07.04\n今天说实话倒也没有什么很好玩的事情，首先是一大早就要去姜中找孙校长有事情，没有交通工具也只能走路，夏天十点的太阳就已经非常让人难受了。\n中午回来吃饭，想着下午好好看看 DQN\n的，然而实际情况是吃完饭想着先打一把牌应该没问题，结果是越打越困，从坐着打牌变成躺在躺椅上打牌，最后直接爬到床上去了，熬到了南四局结束之后，直接手机一扔不省人事睡着了。\n一路睡到了快四点，而晚上本来就约好了和 Sakana\n去剧本杀，于是草率看了两眼 DQN，也就要准备去吃晚饭了。\n\n话说我这个暑期实习真的是让人一言难尽，mentor\n一直在奇奇怪怪地摸鱼，我还要绞尽脑汁编日报，一点活都不给我做，我倒也真的一直没干什么事情。\n然而这里就有一个问题，合同上说的挺明白的，实习工资会有 280\n一天，总共有八千多的实习工资。但是 HR\n也说得挺明白的，如果无法确认考勤，就会以旷工停发工资。现在在北京的同学已经可以去公司打卡上班了，但是我这蹲在家里的就比较难受，毕竟八千块怎么说都是钱，而且自己也有换平板的计划。\n去问我 mentor，他说不知道，去问我\nHR，她倒先站在高地说了我一通要讲诚信，考勤这件事我们看得很重。弯弯绕绕说了一堆，我都没明白我这个考勤怎么办。\n虽然最后折腾到了结果，就是走考勤申诉，只要 mentor\n认可，就可以按照到班计工资。而我那个 mentor\n确实也比较不管我，所以这一关倒是很顺利地给我过了。\n\n晚上剧本杀挺难说的，先是 DM\n就是我姐，然后就是，还没开打呢，又被老孙一通电话叫过去做招生工作去了。\n我一个清华的学生，为什么要掺和北大和交大之间的招生问题.jpg\n\n不过反正就是到处找人问政策情况，然后期间老孙老邱都来打听我做工作情况，和学生家长、本人也聊了一些。\n不过最搞我的就是，这人十一点多都没给我准信。他只要给了，我这个工作就能交班结束，但是显然，不能。\n然后这人，我一点半回了个收到，他说他当时睡不着。\n虽然我也很能理解学生这种三小时决定未来七八年的紧张和不安，但是，我着实是，作为编外人员到处玩的个人，比任某这位编内人员都忙的多（没有黑任某的意思，他今年很认真了，确实）。\n\n晚上挺郁闷的，正事也没做，这就导致我明明第二天约好了去打街机也不安分，晚上也没玩上。\n这下就我没打过线下剧本杀了，人生体验缺失一大块（确信）。\n\n郁闷就去喝酒呗。\n2022.07.05\n反正就是打了一天街机。\n回来还想着好好把 DQN 给看完，不过我倒是，很不能适应\nTensorflow，为什么有人要用 TF 写代码啊，好好用 Pytorch\n皆大欢喜了好吧。\n但是牢骚归牢骚，TF 学不会 DQN 学不会，小心学长把你扔出实验室。\n困了。\n2022.07.06\n出去干活终究是一点效率都没有的，而且琢磨比较烦的东西终究还是要一个人坐着好好想才行。\n昨天暴打迪拉熊的后果就是今天一整天都没有精神，只能靠浓缩咖啡顶着，艰难地看完了\nDQN family，写完了 demo\n代码。说实话有点觉得自己学习能力怎么变得这么差的感觉。\n真的，劳累的时候确实有一点令人容易陷入\nemo，即使实际上一切都很好。\n迅哥哥说准备回北京了，我其实也有点想回去，但是回去就见不了\nSakana，一定程度上还挺受限。但是回去见导师确实也是一件需要准备去做的事情。\n又有点担心 Sakana 太摸鱼了，但怎么说呢，其实我也不想说太多吧。\n已经答应了明天尝试用 Pytorch 写一遍\nPensieve-DQN，既然答应了就得写出来吧。\n2022.07.07 - 2022.07.08\n两天都在学习，但实际上没有什么特别的产出，Policy gradients\n看了好长时间了，也还没有把代码写出来。\n心里关于 Sakana 还是有点没有越过去的坎。\n还是很嫉妒他们一起去过的沙漠，真的，心中就仿佛有这么一道难以逾越的城墙一般，每次想到这件事情，便是懊悔、内疚、嫉妒、自责。\n所以想带 Sakana 一起去旅游的冲动，一直是有的。\n但我真的并不是什么有趣的灵魂，我的朋友也是，没有那种能谈笑风生或者安排精彩的旅程的能力。\n怎么说呢，其实再不解决这个问题我只怕后续更加失衡。\n2022.07.09 - 2022.07.14\n说实话毫无特色的一个星期，每天就是起来之后干活，之后无聊吃完晚饭，然后继续干活。\n最近最烦的事情就是每天晚上都会有饭局，这样就让我晚上可以自主支配的时间巨大缩短，更加没有意思了。\n实习那边交掉了一份 demo\n代码，得到了认可，还算不错。但是实验室这边的进展一直缓慢，正在考虑到底怎么做比较好了。\n妹妹从南京回来快一个星期了，除了 14 号带着去了一趟万象城看看电脑和\niPad，我自己打了一小会滴蜡熊之外，好像也没有什么可以叙说的事情了。\nSakana\n这几天一直在练车，完全没有什么可以交流的时间。所以我自己要不还是好好干活吧。\n2022.07.15 - 2022.07.17\n现在有点不太想写日记了，日记已经好几天没好好写了，但其实也和这几天没有发生什么大事有关系吧。\n15\n号是东方群的聚会，还是日常的麦当劳自闭角见面，下午打麻将，顺手还打了剧本杀，晚上小菜园吃完饭，去唱\nK。\n16\n号没有发生什么事情，单纯在睡觉，非常无趣，晚上去了中骏世界城转了一圈，打了打舞立方和台球，然后步行四公里回家。\n17 号上午去练科目三了，结果回来巨困，睡了一天。\n这一周因为无穷无尽的应酬其实折磨得有点难受，不过现在已经答应了不会轻易出门吃晚饭，这样还是不错的。然后自己也应下来了科目三的事情，尽量七月底能拿到驾照，解决掉一件事情还是不错的。之后和黄天驰学长交流还算顺利。\n下周还是赶快做事情，实习的事情，实验室的事情，抽象代数和日语再咕咕咕一下应该也没有什么事情。\n八月，空出来享受一下暑假。\n2022.07.18\n做了一整天的事情，大概就是一直在学 Actor Critic 算法，顺便把之前\nPolicy Gradients 不太清楚的部分给弄明白了。\n摸索了一下 B 站直播，播了十个小时左右，发现还挺好玩的。\n今天算是做了不少事情，收获还是不少的。\n2022.07.19\n做了整整一天的事情，确实很有收获。PG、A2C、DDPG\n都差不多整明白了。之后又去了万象城，吃了饭打了滴蜡熊。\n但其实并不太开心，大概是太劳累了，然后被 Sakana 一句话气到了。\n说实话我还是不是很明白我自己有的时候的一些思维回路，确实挺奇怪的。\n但是话说回来，好想找 Sakana 玩，然后这个时候就会有点敏感于 Sakana\n有的时候的一些玩笑，然后陷入一些很奇怪的郁闷之中。\n想找她，但是这几天我上午练车，她下午晚上练车，这就非常烦。\n2022.07.20 - 2022.07.22\n这三天由于没有什么特别的事情想要做，于是就一直在干活。先是推了一下 RL\nTutorial，之后推了一下实习那边的 Minkowski Sum Demo，然后今天又回来推 RL\nTutorial。\n科目三练得马马虎虎，最大的问题其实是方向感很差，真的不是很清楚应该怎么打方向盘，但总之随便弄弄过了拿本就行，我也不指望近几年内我能用机动车通勤。\n说实话认真干活反倒给了我一种安心感，之前赶期末的时候也是这样，在忙碌的时候感到安心。\n不过现在，已经不知不觉快七月底了，暑假居然也就这样过了快两个月了。想想当时五月底仓皇出逃，到现在这么长的时间里，居然也仅仅是干了这么点事情，反倒有点自嘲的意味在。翻看之前的日记，发现七月份的日记竟然是那么地粗糙，一时间回忆不起来自己的七月在干什么，就好像每天都是同一个模板里翻来覆去而已。\n昨晚看到了原先 Sakana\n社团的某人的恋爱一周年纪念说说，想到去年这个时候他们在沙漠确定了关系。\n当时翻看了一些去年的日记，当时自己应该一直在一种混沌之中，日记也总是混沌的心理推论。\n不过去年有小学期，所以日记到七月底也就匆匆结束，其实要是有当时八月那种学业压力和心理压力并存的一些日记就好了，至少我就能更清晰地回忆起那段至暗时刻的一些细节。不过当时的自己确实也没有心情去记录那些烦心事，也算是正常。\n\n倒是现在想起来自己图形学的技能引导文档没写，现在还想把自己的 RL\nTutorial 贡献给技能引导文档。\n也真的是应了 Sakana\n的那句话，“总是喜欢在最忙的时候继续揽活折磨自己”。\n2022.07.23 - 2022.07.24\n摸鱼的周末，周六没练车，随便做了一点事情就去姜堰了，结果 Sakana\n有大作业没办法出来，就喊了东方群的人去打舞立方和唱\nK，就这样也一路从下午六点玩到了半夜十二点。\n周日练完车吃个饭滚去万象城打 maimai 了，本来是想着遇一下 Sakana\n的，结果还是没遇到，因为她要赶末班车赶快回家。\n然后再一次成功因为忘记交实习报告被实习群点名批评，但反正已经迟交了，那也就慢慢写了。\n这周最后一周在驾校了应该，然后也应该是实习的倒数第二周了。其实反过来看一下我实习做的事情，真的没什么含金量，不过这也是好事，大家一起当混子就很舒服。\n这几天稍微加快点做事情的进度吧，实验室那边还是要做做。\n2022.07.25\n周一，稍微干了一点点事情，但实际上还是被 PPO\n卡住了，没有钻出来什么有用的东西。\n今天主要是找到了姜堰有一家主机游戏体验店，预约了周五的双人位打算和\nSakana 一起去。\n其实还是有一点想早点去找 Sakana\n的，但是最近的事情还是比较多，科目三也没完全弄好。\n八月吧，还是等到八月最后再安排安排吧。\n2022.07.26\n因为学时没有打够的原因，科目三不得不到八月三号才能考，所以还得在驾校折磨一段时间。\n然后勉勉哥在约着八月去南京打街机，所以现在也就准备安排着去南京的规划。\n湖中很早之前就在说八月可以去广州逛逛，但现在也没什么下文，所以暂且也还什么都不知道。\n迅哥哥今天也来催了一下 THUInfo\n的培养方案功能，所以说还是要准备开工了。七月最后一点时间，好好用好吧。\n2022.07.27\n周三，接到了 FL\n打算周四去回学校的消息，于是想着也可以去找找老邱，就和他约定一起去了。\n之后想到既然已经去了姜堰，为何不把 Sakana\n喊出来呢，于是又约起来了周四的局。然而工作日实在是找不到多少人陪我们玩，最后也不过凑齐了四个人勉勉强强一桌麻将。\n最后还真的决定在麦当劳打麻将，我甚至还借到了一副日麻牌。\n2022.07.28\n早起练车，效果还行。\n中午赶忙跑去应酬，敷衍过了之后就去找 FL\n进学校找老师。和邱聊了大概半个下午的样子，主要还是目前我们在大学里的情况以及对后面姜中弄竞赛的一些想法。\n现在姜中打算把竞赛在强化班搞成正规课程，有月考有期中期末，纳入强化班考核。这样搞我觉得是可以的，但是问题是老师资源可能真的不够，毕竟现在也不过招到了一位南大本科的老师。\n晚上遇到了 Sakana，四个人打了一个半庄之后就觉得无聊起来，最终还是去了\nKTV。\n比较好玩的事情是，即使 Sakana\n事先说打算闭麦不唱歌，最终还是唱了一些，但是 FL 是真的一点没唱，在 KTV\n里面硬生生玩了三个小时手机。\n2022.07.29\n和 Sakana 去约好了的主机游戏体验馆，9.9\n双人玩一下午的优惠只有七月底有了，八月就是原价，所以得快点去。\n打了 A Way\nOut，但是实在是太长了，一下午六个小时两个人没有打通，但是其实也接近通关了，卡在最后一点点的枪战上。\n晚上滚去看《独行月球》，说实话是个不错的电影，但是另外一方面，他很想带一点点的情感戏，又想带一点点的宏大叙事，还想维护住喜剧主线，这三个混杂在一起，说实话就导致一些桥段不伦不类的。不过瑕不掩瑜，总体而言是个好电影。\n2022.07.30\n周六，本来是玩了两天后应该好好做事的一天，结果是上午练完车太累了直接睡了一整个下午，之后借我麻将朋友说要拿回麻将，结果是晚上又去麦当劳打了一晚上麻将。\n确实是有那么一点点怠惰了。\n2022.07.31\n一周的事情压到最后，终究是要给出一点点的交代，于是上午滚去高港看完科目三的考场之后，回来也只能草草睡一个短短的午觉便需要赶快爬起来把之前实习的事情拿起来赶快做。\n今天有点乱，其实。首先是早上科三看考场实际上出了点问题，方向感不好，不知道怎么转弯的问题依然存在，现在有点担心我三号到底能不能考过了。\n下午和 ZSJ 他们约了约，感觉可以带 Sakana\n去浙江玩，一番折腾，大致的行程也规划差不多了。\n结果最大的变故是原来和勉勉哥打算周末南京玩一圈的，结果勉勉哥没有时间，这就导致我有可能取消南京的行程直接去浙江。\n不过去旅游终究还是要基于我三号能拿到驾驶证，在这之前好好练科三好好背科四，还是挺烦的。\n2022.08.01 - 2022.08.02\n八月的最初两天过得非常平凡，几乎没有什么特别的事情发生，一直在做实习那边的事情。\n说实话还是高估了自己解决问题的能力，我本以为只要一两天就能解决掉这个问题，结果连带着摸鱼这个问题做了我整整快四天。\n浙江旅游的计划已经差不多固定下来了。七号出发去宁波，晚上在湖边转转，八号看一圈市区景点，打打牌，九号去象山，玩到十一号回来。\n然后明天要考科目三四了，希望这次能顺利拿到驾驶证，这样省得回家还要折腾这种无聊的事情。\n2022.08.03\n今天去考科目三，定的是九点的下半场，本来想着早点考完可以回去睡一觉再去考科目四。然而事实情况是，我很早就被拉去考场等考试，但是运气实在太好，抽中了这一批的最后一个，所以非常顺利地上午没轮到我，只能下午再考。\n下午我是第一个考试，然而遇到了一个非常不想遇到的情况，两辆考试车同时起步而且我还是后面那个，结果就是我一直只能憋屈跟在后面，然后因为变道之后贴过紧被考官一个刹车带走了。不过还好，第二次顺利通过。\n考完科目三，稍微等了一会就滚去考科目四，科目四很简单，小学思想品德题，随便做做就通过了，去等制证。\n拿到驾驶证就算了掉一件事情了。\n2022.08.04\n七夕。\n和我弟把 Sakana\n约出来，先是蹲在星巴克自习了一下午，晚上本来打算去万达吃自助，结果可能是因为七夕的缘故，那家自助人爆满，要排号二十几桌，遂放弃。\n结果是我弟喊着说自己太饿，没办法只能随随便便找了一家饭店，但问题就是，这家饭店评分真的十分差，而且确实饭菜相当不行。\n晚上本来是没有什么具体安排的，于是就三个人到处逛，期间我们发现了原来要市民卡才能开的共享单车居然可以直接扫码打开，于是顺手三人开始骑车兜风，然而由于\nSakana\n的电瓶车电量不够用，只能将她先送回去，我和我弟两人继续兜风到一点多才回家。\n2022.08.05 - 2022.08.11\n这一个星期大概是发生了很多事情的。\n先是和 TTL 他们一起去游泳过夜玩游戏，看了《彗星来临的晚上》，帮 LCR\n搭好了他的个人网站之后也就没做什么了。\n之后就和 Sakana 去宁波了。\n宁波玩的这一星期其实说实话很慵懒，就是那种起床吃个早饭然后慢慢悠悠规划今天应该干啥的那种假期生活。\n旅游本来就是用来放松的。\n—— Sakana\n\n于是在这样的方针指导下，我们宁波市内几乎只是去了一趟天一阁和宁波博物馆随便逛逛，然后和\nSakana\n去东钱湖、韩岭散了一会步而已。按照一些旅游团的规划，这些地方完全可以一天就给走完，但是我们从七号到达一直到九号下午去象山，这快三天的时间也才逛了这些地方。\n这种不紧不慢的步调，反倒很舒适。睡个自然醒，吃点早饭，和朋友打打牌之后规划午饭，下午简单逛逛，晚上等到天色渐暗温度降低的时候去晚饭然后散步，累了就回住处贴贴看番顺便点小烧烤外卖，很理想的生活。\n九号去了象山，结果是快到晚上才到达，收拾完东西吃了个简单的晚饭也便睡了。十号赶去了石浦镇，去了海滩，玩了一些海边大家都会玩的一些娱乐设施，晚上啤酒烧烤一波之后又得赶回象山。\n今天则是一点没玩，全在赶路，反倒是这几天里面最累的一天。\n\n要是说这次旅游留下了什么，除了一些照片、沙雕聊天记录之类的寻常之物之外，倒也是让我对旅游的组织方式有了一种新的认识，果然我这种人还是比较适应松散的时间表，那种要是实在不想去就不如在床上躺着的旅游，反倒有意思。\n和 Sakana 玩得很开心，下回继续贴贴。\n\n2022.08.12 - 2022.08.13\n全都在写实习报告，最后写完了。\n这就是，毫无意思的两天，写完了的话后面还有几件事情要做，比如说问问返校政策、去姜堰取回我的保险、处理之前的危险化学品、和\nSakana 贴贴。\n后面实验室的事情，还是得好好推进。\n2022.08.14\n\n最近 Sakana\n有点冷冷的，感觉是回家开始重度手机游戏，不回我消息了。\n\n今天本来打算好好看 Sutton 的强化学习的，结果是没怎么推进，前面的\nIntroduction\n部分实在是很烦，但是又觉得他会在里面写很多高屋建瓴的观点，又不想直接跳过，所以还是当成英语阅读理解算了。\n2022.08.15 - 2022.08.18\n最近写日记确实越来越怠惰了，主要是感觉已经没有什么很特殊的事情给我留下印象了。\n不过随着暑假即将结束，我越来越感受到我需要好好把下个学期过好，卷卷科研这样的决心。\n嘛，要不这个暑假记录就到此结束吧，已经正在规划回北京的事情了。\n这个暑假确实过得比较充实，做了不少事情，但也玩了不少，回头看看暑假开始前的暑期规划，基本上还是完成了七八成的。\n那么，就这样结束吧，Holder 要开始他的大四生活了。\n","categories":["【生活记录】日记"]},{"title":"2023 秋季学期记录","url":"/2023/09/01/2023-autumn-record/","content":"博士生涯正式开始了，还是和之前一样，开一个日记来记录自己的生活吧。博士的第一份事情应该是和吴成磊学长一起做一个云游戏相关的系统，希望能至少攒出来一篇\npaper。\n\n2023.09.01\n今天是新生报到，说实话就是去领一堆杂七杂八而且不一定有啥用的东西，但总之得去一下。另外，今天做的最主要的一件事情就是回绝了实习那边的事情，一方面是导师不是很想让我做那种“没有营养”的事情，一方面自己也想全神贯注投入到博士生活之中。\n之后现在手上就剩下 AI 协会那边需要做一个\nTutorial，然后软工助教可能也得开始做学期初准备。此外，实验室这边暂且是先看论文，以及要准备\n8 号左右前往温州的 CHINANET 会议。\n突然有种对未来的憧憬感了，虽然第二天不得不早起前往开学典礼。这种形式化的东西什么时候才能结束啊。\n2023.09.02\n早上是研究生开学典礼，想当年本科的开学典礼还算是认真参加的，但是现在老油条了就真的不高兴听那些空泛的讲话，于是就在分会场里默默睡了一大觉。睡醒了就去吃午饭，吃完了回来睡了个午觉又要去下午的系开学典礼。系开学典礼倒是比较文明，四十分钟就结束了，然而这个时候我已经困得受不了了，回去还得接着看论文。\n一想到后面好几天都得早起参加这样那样没意思的活动，瞬间就失去了乐趣。\n今天实在是困到生活不能自理，晚上吃完饭更是一点精神都没有，正在思考早睡早起的可能性。\n2023.09.03\n结果今天下午全在打牌，连今天是魔法未来放映会都忘掉了，只能看着合照羡慕。本来想着下午人多，我可以在等待桌子的时候看会论文，结果莫名其妙多来了几个人就变成了八个人开两桌连打，这下是一下午啥事都没干了，不得不赶快开始赶进度。\n晚上还是正常看论文，而且毫无进度。\n2023.09.04\n还是无聊的入学教育，下午三点结束之后先去实验室和师姐简单规划了一下去温州的行程，定了机票酒店，然后让导师开了一下假条。搞完这些我发现我困的不得了，于是莫名其妙在工位上睡着了。\n睡醒后，没忍住，骑车去了上地出勤，没想到的是没几把就鸟了\nSqlupp。当晚，一时兴起开了亚特兰蒂斯，结果 touch 突然开窍了，从 S\n直接飞上鸟。晚上回去学习了一下谱面确认，决定明天去推鸟加。\n今晚其实还有麻将个人赛海选，随便去打了一下，吃三不痛不痒回来了。\n2023.09.05\n早上签完到立刻出勤，打了一下午终于鸟加了亚特兰蒂斯，随后吃了点分上\n15600\n了，还顺手把标奶推了一下。总之由于五道口下午人都不算多，所以打得还是很爽，然而右臂又开始疼了。\n在机厅看完了第一篇论文，后面还有三篇，慢慢看吧。\n2023.09.06\n今天是体检，大概是最麻烦的事情，因为要起大早而且还不能翘。早上困到什么程度呢，就是抽完血之后我直接出现了晕眩的现象，立刻吃了饭回去睡觉去了。下午随随便便选了选课之后做完了体检剩余的项目。\n晚上听说空调要回上地出勤，于是就溜过来了，但是今天莫名其妙上地全是人，这我就有点不太理解了。不过由于昨天推完分了，今天打了疫苗也不太方便大开大合，所以也就随便了，继续机厅看论文。\n2023.09.07\n今天组会，简单混了一下，组会之后就直接去出勤了。说实话这几天除了看论文就是研究怎么出勤，似乎生活确实没啥意思了。日记也不知道写什么，论文阅读写到笔记里面，出勤研究写在备忘录，除此以外真的啥都没有了。\n就先这样吧，明天还得去温州。\n2023.09.08\n早起赶路前往温州，倒了两趟飞机，然后倒地铁公交才到了会场搞完签到，随后办了入住后就决定去机厅看看。离酒店最近的机厅是第一回合，这个机厅哪里都好，问题在于来这里出勤的人怎么都这么强，大量的\n16000 rating 和各种\n15500+。然后，今天由于赶路很累，体力歌打不动，本来想着推一推跳拍练习曲，结果把\nStrange Bar 打手癖了，太难绷了。\n晚上压了会马路，感觉温州这个地方还是福建味道太浓，和传统想象中的浙江还是不太一样。\n2023.09.09\n早起开会，然后听到一半睡着了，快到最后的时候想着早点去吃饭人会少一点就先溜出去了。不得不说，这家酒店的自助午饭确实不差，虽然保留了大锅饭咋做都不会太精致的缺点，但至少调味什么方面没什么大问题。然而搞笑的是，我都吃了两盘子了，我导师突然喊我们出去吃饭，这就尴尬了。之后我导师把我们带到了一处居民区小店，吃了顿海鲜。应该说还好是海鲜，海鲜这玩意不顶饱，要是吃什么烤肉糯米团子，我估计已经撑死了。\n下午听了个大模型的论坛，感觉没什么新意，把 PPT\n放给黄老师贾老师他们讨论，他们也觉得很没意思。晚上吃完饭后去了另外一家机厅，这家机厅明显是新机子而且键很硬，主要的好处是这里新手很多，可以心态放平了。然而几天出勤实在是难受，虽然解决了\nStrange Bar，但是我 Sqlupp 打到了 100.47%\n之后卡住了，怎么也鸟加不了，于是决定还是以后再来。\n晚上把教师节礼物买了，和学姐商议了一下决定睡过上午无聊的主旨报告，洗了个澡，舒舒服服睡过去了。\n2023.09.10\n中午才起床，决定下午看论文然后晚上出勤解决一下\nSqlupp。结果是下午也没怎么看论文，早早出门出勤去了。但说实话，这次出勤有点难绷，因为推\nSqlupp\n最后鸟加的时候确实着急了，打得有点拆，被有点严厉地训了一顿。倒也不是说不承认，只是这种被陌生人劈头盖脸一顿说真的难受，虽然已经知错就改了，但还是觉得是不是指出的方式能优化一下。然而毕竟我也没立场，就这样吧。\n晚上到酒店，学姐和我说她被拉去和导师吃饭，气氛一度十分尴尬，很后悔没和我一样提前开溜。不过明天就回北京了，再说吧。\n2023.09.11\n今天就是赶一整天的飞机，飞机还延误了三四个小时，晚上靠近十一点才到宿舍，赶快洗个澡第二天还得接着去新生教育。\n赶路真的没啥好记录的东西。\n2023.09.12\n今天主要是和学长约了讨论腾讯的项目，于是速速赶了一下论文就赶过去开会。会上大概聊了一下质量感知的云游戏系统的大概想法，交流了一下之前的四篇论文。经过这次讨论我也差不多掌握了一下要做的事情，但是还是没有什么头绪，也不知道接下来做什么。\n开完会就是出勤，主要是打白龙，运气比较好，很快就鸟了，但是鸟加太难，一点手感都没有。\n2023.09.13\n一样的，水掉新生教育，交掉报销材料之后就去出勤了。先去的五道口，结果是啥都没打出来，人还越来越多，于是速速跑去上地。结果在上地随手就解决了\nFreedom Dive 和僵尸娘的鸟加，吃分吃了个爽。\n这几天说实话事情还不少，助教的事情、AI\n协会的事情、实验室的事情，一个不少。然而还是出勤，真的是无药可救了。\n2023.09.14\n今天依然是出勤，但其实我已经不是很想出了，然而很早以前就约好了，也躲不掉了。结果也和想的一样，完全没有手感，打什么都打不上去。加上晚上学长急急忙忙找我开会通知如果要去腾讯实习的话要和他组长做个小面试，加上第二天得开组会，加上周六得讲\nAI\n入门，总之就是事情一下子全都涌上来了，正好最近没什么能打的分，干脆就好好学习吧。\n晚上的会的意思就是说现在的项目因为要投 5 月的 NSDI\n并不是很急，所以把打算投 2 月 SIGCOMM\n的另外一个项目优先级拉上来了。这个项目大概就是做显示器一侧的一些 jitter\n优化，但是因为学长说得急急忙忙的，我也不知道究竟是个什么算法架构，走一步看一步吧。\n其实现在比较担心的是我到底能不能接下来这个项目，因为学长一直在和我说之前有个硕士来他那边做项目，结果他组长发现这个硕士得手把手教才能做事，很不满意。然而我自己就有点觉得自己也得手把手教，毕竟之前还是没什么科研项目经验，现在总之就是很害怕很害怕，不是很清楚能不能胜任这份工作，能不能再博一攒出来一篇\npaper（即使不是一作）。\n2023.09.15\n组会，并没有发生什么很有意思的事情，简单讲了一下和学长那边的讨论进展之后就没有了。组会之后就是出勤，但是这次手感实在是太烂了，旋转木马和\nMAXRAGE\n都没有能成功出分，晚上陪坐标刷了一段时间紫皇帝，更是一点不会。\n回去之后讨论了一下软工小作业的相关事情，把软工文档搞完之后回去做了 AI\nTutorial 的课件，一直到五点才昏昏睡过去。\n2023.09.16\n不知道为什么今天很早就起来了，起来了之后直接去上地出勤了，毕竟昨晚练了一晚上的旋转木马。今天上地几乎一直保持着\n12 人的规模，然而我还是尽力把旋转木马鸟加了，但是 MAXRAGE\n还是没能解决。打到最后，手感几乎已经爆炸了，所以赶快退勤。\n回去之后就是讲 AI\nTutorial，这次讲座讲下来自我感觉也很不错，下面的反响也不错，感觉是 AI\n协会的一个好开头，希望能蒸蒸日上吧。\n2023.09.17\n周日约了 V+ 群的群\nK，结果我到场发现很多老面孔已经见不到了。其实也很正常啊，那些我熟知的八字班群友们该工作的工作，该被导师压榨的压榨，只有零零星星几个还有闲时间的才会来这里。\n今天唱了不少，最满意的还是 From Y to\nY，但是还是很遗憾没有人唱女高声部，导致演绎出来的效果还是差了一截。\n2023.09.18\n开学第一天，周一，按照课表的话早上有一门网络性能评估的课，下午有中国马克思主义，还挺忙的。好不容易早起之后赶快赶到教学楼，坐定之后听了两节课，结果发现和预想中的一模一样，这种课就是超级催眠。任教这门课的看起来就是那种老教师，语气绵软催眠，实在忍不下去了于是中途开溜，去五道口出勤了。\n然而今天手感真的超级烂，加上五道口机子的机况本来就每况愈下，所以最后一点分也没出，只能匆忙赶回学校上下午的课。说到下午的中马课的话，不得不说刘恩至老师的课确实相当有意思。我对一门课的最高评价就是，“宛如平时闲聊一样”，也就是说一门课能够和闲聊一样让我释放压力，也没有说教感，又能够听故事增长见识，那无疑是优秀的一门课。而刘恩至老师的中马课一定得在优秀课程上榜上有名。\n晚上就没有什么好说的了，点了一份外卖和零食，然后看了一晚上《孤独摇滚》，于是晚上就这样无聊地过去了。\n2023.09.19\n周二本来就和 hhh\n约好了去吃烤肉，于是早上先去上地堵门出勤，本来想解决掉 MAXRAGE 或者\nRevive the Rave\n的，结果还是一个没解决，反倒是右臂的疼痛感加剧了。中午吃了顿鹤一烤肉，吃完后和\nhhh\n散步去新奥，中途聊了很多我们两人高中时期的经历，果然闲聊还是最有意思的活动。在新奥随便打了点歌就回去了，回去又是聊了一路，甚至之后直接去\nhhh 宿舍接着聊。聊累了，就和 numen 一起联机打 Malody\n4k，结果我好久没打，水平退化严重，连 v3 3dan 都没有过。\n今天纯纯摸鱼了一整天，不过也还好吧，也没什么要紧事情。\n2023.09.20\n周三，本来是要早上起来去组合数学的，结果偷懒了睡回去了，然而一路睡到了一点十五。当时我在床上看到这个时间的时候立刻就想到了下午导师的课要迟到了，于是速速爬起来洗漱穿衣去上课。导师的课显然是没有什么要听的，都在他实验室打工了，这些基础再不会估计也就没救了。上完课补了顿午饭，就去实验室干活了。\n2023.09.21\n今天是生日，虽然好久没有为自己庆祝过生日了，然而今天还是尝试约了 hhh\n和空调等人来吃晚饭，结果还是凑齐了八个人吃了烤串。今天下午就去了上地出勤，然而还是一分没推上去。晚上赶快去吃饭，结果还被店里面搞了一些社死活动，比如全店放生日歌之类的。怎么说呢，我还是不能接受这种活动，但是既然大家都看起来很开心的话，那我也觉得值得吧。\n吃完饭之后继续去出勤了，结果发现自己打小歌的手感开始上来了，比如盘古、天火明命、南十字之类的，加上现在还是觉得自己基础不是很牢靠，所以最终决定回去刷\n13+ 将，尽力先把底力提升上来，稳定性提升上来之后再去攻击\n14，或许会有更好的效果。\n晚上和 hhh\n聊了不少，回到宿舍之后还是得稍微干点活，至少明天组会能够交差。\n2023.09.22\n周五首先是组会，组会之后自然还是出勤。\n说实话我也有点觉得这样的生活是不是也没有什么写日记的必要，每天的行动路径基本一致，每天除了做实验室的一些事情就是出勤，也没有什么特别有意思的事情或者有意思的想法值得让我在日记里面写上一笔。\n但是还是继续写吧，万一哪一天就突然有了想法想写下来但是苦于之前没有日记本呢。\n2023.09.23\n周末，早上起床先去置办了一些生活物资后去把之前的所有快递都拿了回来，包括买的鼠标键盘。这次为了尝试，买了一个静电容键盘，说实话静电容键盘的好处就是真的声音很小，用我的手劲都不会很扰民。然而相对应的有个很麻烦的事情，就是触发力度实在是太小了，我买的是\n35\n克触发的，这导致我手稍微刮到就足够按下去，而且我还有不打字的时候把手指放在键盘上休息的习惯，原来的茶轴机械键盘这种力度根本按不下去，但是静电容键盘就不行，这点力度就足够触发连打了。果然还是得花一段时间适应一下吧。\n晚上还是偷偷摸摸去出勤，匆匆打了一个 Starry Colors\n的鸟之后就回去了。之后是科协迎新，然而这一次我因为和大家实在是差了有些年头了（三年差不多了），所以也没什么好聊的，于是混了点吃的就走了。回宿舍之后就是打牌，打到晚上四五点钟才昏昏睡过去。\n2023.09.24\n今天是得赶快工作了，明天早上得早起去软工那边，下午还得和学长导师聊一下接下来的工作安排。然而今天工作了一天也没感觉到学到什么东西，反倒是人很累，也不知道这个书读了个什么名堂。\n2023.09.25\n早上赶早起床去软工课堂念 PPT，说实话光靠这点 PPT\n也没办法教会他们前端，只能希望他们小作业顺利了。讲完之后迅速赶到工位开始继续看\nWebRTC 源码，希望能在下午开会之前至少能够建立起来一个基本的了解吧。\n今天开会讲了不少，主要意思就是目前算法已经在腾讯上线了，效果其实非常不错，然而这套系统想要写成论文还是欠缺一点有意思的背景，看起来比较像\nWebRTC\n的实际工程改进版，而非一个很有创新性的新系统。今天这次小会主要就是在讨论怎么去写这一篇论文，最后也没讨论出来特别有意思的结果。这次会后我问学长现在可以继续做什么工作，但似乎由于我还没有入职拿不到数据，实在是做不出来什么有意思的工作。学长绞尽脑汁思考一番之后和我说，“要不你去用我们的云游戏系统去玩玩原神”。这么说，以后我打游戏也算是一种工作了，有点奇妙。\n另外一件好玩的事情就是，开完会后一位同学提醒我中马课上开始搞教学相长线下小测了，但我当时人还在实验室。于是我迅速打印了答题纸作答，写完后飙车把答题纸送到了教室，极限操作我还是有一手的。\n晚上又去出勤了，结果就是 Starry Colors 手癖，完全没法打鸟加了。\n2023.09.26\n无所事事的一天，早上陪坐标堵五道口的门，中午去六道口吃牛肉火锅，下午去新奥出勤后回到上地继续出勤。\n不过今天解决了 MAXRAGE，然后零零散散打了些别的小歌，鸟了 Mutation\n和初音天地开辟神话，北琦玉也进入了射程范围。\n2023.09.27\n周三自然是一天的课程，起床之后去上了导师的课，上完课之后还是老老实实去出勤了。说实话总感觉读博之后，时间安排其实更加自由了，简单来说就是你不想干活的话也不会有谁来管你，这种自由度比本科更为突出。所以我遍历了一下之前的日记，发现还是出勤占据了大部分的时间，虽然说我感觉也不是没干活，但是仅仅从日记上来看的话大概我生活就只有出勤了。\n2023.09.28\n今天需要开一个软工的大例会，大例会整体而言还是随便开一下就可以的。这一学期我带三个组，比上学期带四个组要轻松不少。本来我以为反季选课的同学基础可能比较薄弱，但是我整体考察下来，感觉大家基础似乎比上学期我带的四个组要强了不少。\n晚上已经订好了惠多港的酒店，然而我忽略掉了明天是中秋节的事实，结果就是不得不顶着最后一个工作日的人流挤地铁，三个小时之后才到达了目的地。经此之后晚上出勤的心态全无，但是虽然没啥心情，手感却还是来了，Revive\nthe Rave 打上了 100.4，还顺手 AP 了红雷切。\n2023.09.29\n在惠多港出勤一天，基本上就是把 Revive the Rave\n解决掉之后随便打，然后随手开了一把 LANCE 鸟加了。\n出到一半还把 wyx 骗到了惠多港，他刷了一段时间 Sage 和\nsolips，晚上吃完饭就回去了。\n2023.09.30\n简单出了一下勤，但是随后就发现不对了，我右臂的疼痛越来越显著了。在这种状态下理所当然的一点分都没能打出来，随便打了点小歌吃了个饭就赶快回去了。晚上也没干什么事情，吃了个夜宵然后和舍友随便聊了聊就睡觉了。\n2023.10.01\n今天是国庆节，之前就已经和同学约好了今天去雀庄打牌，所以也就早起去了。但比较烦心的事情是，早上起床的时候接到家里人的电话，得知家里大概出现了一些小矛盾，虽然不是什么很有影响的大事，但总之是有了些烦人事。\n打了一天牌也没什么收获，晚上回到宿舍就和家里人通电话直到深夜，等到挂电话的时候已经是凌晨五点了，于是在椅子上稍微睡了一会之后赶上六点钟来热水洗澡睡觉。\n2023.10.02\n昨天那种情况，今天理所当然起的特别晚，约了 hhh\n去吃潮汕牛肉火锅，于是起床之后就去了。边吃边聊也就一路弄到了七八点钟，回到宿舍又已经是九点多了。想到先前希望国庆的时候能够做点实在点的事情，所以今晚还是稍微学点什么吧。\n2023.10.03\n今天一整天都没有离开宿舍，昨天说是打算认真学点什么东西，确实是认真学了一整天，然而是在学习日语的助词。不得不说这个语法点，语法学界至今自己还在吵架先不说，我自己实际上都还没理出来一条能说服自己的逻辑链。也正是因此，今天看了一整天的日语论文，看得头昏脑胀。这个时候我也在感叹，要是我读博的时候看媒体方向论文也这样上心就好了。\n最近高老板去法国开 ICCV\n去了，要是我还是大二大三的时候，应该会对这种事情无限向往，心想为什么我不能去。然而过了那段对自己要求过高的日子之后，现在只是叹息一声自己果然不适合学计算机，然后继续去看日语论文。\n不过话说回来，我确实该学一点 WebRTC\n基础了，最近最好还要和学长讨论一下什么时候面试，不然国庆之后我组会说些什么我都不知道。\n以及最近突然很想在养好右臂之后去鸟加海澜之家，按照道理我现在应该要开始练习谱面确认了，然而还是很懒，一点没看，还一直在打德州扑克。\n2023.10.04\n昨天和 xjj\n约好了晚上去吃饭，于是今天还是毫无作为地过完了下午然后晚上去吃饭了。吃完饭发现自己已经来到了领展附近，有点没忍住，破戒打\nmai\n去了。不得不说，很久没有出勤的手感真的是非常的烂，加上领展机子不是很适应，所以一点分都没打出来，除了把海澜之家鸟了，打到了\n100.3。这下，海澜之家鸟加肯定要成为重要目标了。\n2023.10.05\n周四，本来以为国庆假期就能躲掉一次软工例会的，结果还是得开。不得不说，这一学期我带的几个组似乎基础真的都还行，三个组里面有两个组都已经能够写出一些页面来了，感觉大家动手速度比上学期真的快了好多。\n下午开完会就和 numen\n出勤去了，本来是说和他一起推海澜之家的，结果两个人都没有打上去，晚上只能遗憾退勤了。回到宿舍想了想，国庆多少什么事情都没有做，于是悄悄把组合数学作业给写完了，写完一看已经五点多了。\n2023.10.06\n今天基本上就是出勤，早上堵门之后以刷海澜之家为目标一直勤到闭店。当然，最后还是心想事成了，海澜之家如愿以偿鸟加。\n随着海澜之家鸟加，我也来到了 15694，离 15700\n的阶段目标也不过是临门一脚了，但是今天时间实在是不够了，于是也没能在今天内成功达成\n15700。回来之后分析了一下旧底分，目前也达到了\n7862，大概也就是集火攻击几首简单 14 的距离了。虽然还是想让万分最后一首是\n14+，但是看起来暂且也没有哪个 14+\n进入目标，自己也不是很急，所以就随他去吧。\n2023.10.07\n今天就在宿舍里好好呆了一整天，昨晚虽然睡得很早，但是今天也硬生生睡到了下午才醒。下午昏昏沉沉吃了个饭之后继续摸鱼和摆烂，上床刷了会手机之后吃了晚饭，才想起来应该做点事情了。\n结果一整天也是白白荒废掉了，不知道为啥最近的工作热情一直很低迷，始终处于一种反正暂且没找我那我就摆烂的态度。\n2023.10.08\n今天是周日，按照调休补周五的课，虽然应该是没有小测签到的，但我还是早起去上了数据挖掘。上午的课实在是有点坐牢，下课之后和坐标约了去五道口吃了顿饭，出了一小会勤，晚上去实验室坐了一会，主要还是和学长聊了聊项目的事情。\n学长聊的意思大概是，最近还是主要学习一下 SIGCOMM 23\n的一些云游戏相关论文，主要分析他们的用户实验都是怎么设计的。目前来看我大概率会被分配去做这篇论文的用户实验部分，论证画面撕裂问题在云游戏场景之下显得更为严重。虽然还是有点像触碰到一些比较核心的东西，但是似乎由于核心算法毕竟已经上线了，好像我也参与不了什么了。\n只能一声叹息，可能我已经摆烂成性了吧。\n2023.10.09\n今天出勤，主要目标是白 FLOWER，结果不明不白地打完了鸟加打上了\n15700，在这之后推了两把 Never Get\nOver，顺利鸟了之后鸟加没能拿下。晚上回来又开始摆烂。\n2023.10.10\n说是要好好学习的一天，不过下午也确实好好学了一下午，但是晚上涵涵过生日喊去吃饭，还是没忍住去了。结果几个人从下午五点开始一直玩到快凌晨五点，吃饭唱歌聊天啥的，确实比较欢乐。不过到宿舍了之后，又开始陷入那种我怎么啥事没干的\nemo 循环，有的时候感觉自己还是太控制不了自己了。\n于是先给自己定了一些小目标，希望能够尽快完成吧。大概就是两天内清掉目前手上的任务，其实手上真的没啥真的难的任务，只是自己实在是有点摆烂。\n2023.10.11\n今天就在工位上做了一整天作业，把最近的作业基本都清空了。然而现在腾讯那边依然是一点动静没有，这也快一个半月了，再不让我入职我都在怀疑我能做多少事情了，该准备\npush 我学长了。\n2023.10.12\n周四开组会，实在是没有什么好说的，不过组会之后贾老师请实验室的各位去吃他舍友家开的火锅。该说不说，真觉得没多好吃，或者说因为人多导致我没放开点自己喜欢吃的，最后也只能碍于此没能吃爽，只能在角落里孤独把一大桶水果冰吃完了，那个水果冰还一股香精味。\n回程的时候发现路过新奥机厅，于是去摸了两把，本来以为人会很多，结果今天是日服更新日，饼机全都是排队的人，国服反倒是没有人打，我于是吧唧一晚上，直接把\nN3 推上了鸟加。本来想一鼓作气把北埼玉也给拿下的，结果还是没能成功。\n2023.10.13\n今天出了一整天勤，但是收获颇丰，拿下了 Starry\nColors、北埼玉、白吹爆等三首 14 以及一首 b15 侧 13+，加上昨天拿下的\nN3，两次出勤一口气上了 42 分，老算法的话也一口气从 7869 一路飙升到\n7891，几乎已经是临门一脚的状态了。\n不过今天的遗憾就是 Aiolos 和 MEGATON BLAST\n没能鸟加，要是这两个鸟加了的话万分就已经达成了。\n2023.10.14\n因为昨天出勤太猛，今天起来完全没有劲，腰酸背痛的，还得准备批改软工小作业。改了一整天作业的感觉就是，大家真的喜欢用\nChatGPT，改下来没少看到 ChatGPT 生成的答案，可惜，是错的。\n晚上摸了一晚上鱼，研究了一下万分最后应该打点什么就准备睡觉了。\n2023.10.15\n今天基本上就是改了一整天的软工小作业然后在宿舍里面把杂七杂八的事情做了一下，大概学了一点\nBLACK SWAN 和\nUniTas，找时间再去打吧。之前学长说周一要找他开会，明天看看能不能迅速把论文看完找他讨论。\n2023.10.16\n周一就是开会，疯狂开会。这里做一些项目的记录：\n目标：在保持低延迟的条件下尽量避免画面撕裂\n基本思路：通过决策客户端将各帧送显的时机来控制画面撕裂\n原先的理解是，现代显示器并没有采用逐行扫描的方式，所以 60 Hz 对应的\n16\n毫秒显示槽中应当有空转时间可以把帧送显而不画面撕裂，所以决策算法可以较为简单地控制每一帧都尽可能对应到空转槽即可。\n然而现在发现现代显示器依然采用逐行扫描，这意味着不存在先前理解的空转槽，因而只要是不在显示槽开头送显都会出现画面撕裂，然而我们做不到在低延迟条件下保证时刻在显示槽开头送显。\n由于我们要做的是画面撕裂和延迟之间的 trade off，所以有两个显然的\nbaseline：\n\n垂直同步（完全杜绝画面撕裂，但是会带来巨大的延迟）\nWebRTC jitter\nbuffer（在不考虑送显流程的条件下尽可能压低延迟，但是也因此有严重的画面撕裂）\n\n目前已经有的一种 trade off 设计方式是，在抛弃垂直同步的基础上：\n\n论证出现在屏幕上半部分的撕裂不会被注意到。这一部分需要用户实验证明，参考\nEkho 论文设计（#1：考虑分享一下 ITU 用户实验设计的原理和流程）\n通过图像处理方式处理掉出现在屏幕中央的撕裂\n论证出现在屏幕下半部分的撕裂完全可以按照垂直同步方式处理而不增加很多延迟\n\n此外，做一些 content aware 的，在某些能够容忍延迟的游戏中通过增大\njitter buffer 换帧率也是一种优化。\n有个问题：没有太能想明白的在这里，这里是否和我们原先设定的优化目标不太一样？我们的一个重要限制应该是控制低延迟，这里针对某些游戏内容做让步似乎不太能嵌入整个故事之中？\n此外，需要思考、调查还有没有其他的可以完成这一个 trade off\n的设计方式。\n\n2023.10.17\n今天出勤，早上打了两把就解决了黑天鹅的鸟，本来以为万分已经是临门一脚，结果打了一下午的\nAiolos 和 UniTas 都没能解决，最后也只能遗憾离场了。\n2023.10.18\n周三还是一样，得去上导师的课，上完之后就去工位坐着打算做点事情。但是这一下午真的除了把组合数学的作业做掉之外完全不知道干些什么，学长那边因为也没有给材料，我自己也不知道该看些什么材料，于是只能干着急，啥都做不了。\n自己真的有点迷茫，完全不知道科研应该干什么，感觉应该是花费大量时间阅读大量资料，但是我连找资料的思路都不太有，或者应该就是沿着论文的引用链条往下看他个十篇八篇的吧。\n2023.10.19\n周四的组会平稳混过去，然后继续去上地打\nUniTas，十分不凑巧，还是没打出来。周二一天加上今天半天，万分的最后 7\n分死活解决不掉，于是我又想着能不能拆解了。\n晚上回去就开始郁闷，这几天其实是有点小感冒的，而且咳嗽得厉害，吃了点一般的感冒药，但是终究得靠身体自己扛过去。郁闷的主要原因倒不是身体，而是自己真的感觉读博毫无方向感，学期已经开始一个月左右了，自己却毫无算得上东西的进展，也不知道该怎么进行，只能不停打\nmai，用这种廉价的成就感淹没自己。哎，其实要是说自己工作上有了点进展，倒也不会用这种东西麻痹自己了，终究还是得想办法从读博本身寻找到一些成就感比较好。\n其实我自己也在想，日语本来也就是个爱好，但我查找日文资料的动力就凶狠得多，基本上有问题了掘地三尺都给你挖出来，果然兴趣还得是最好的老师啊。\n2023.10.20\n周五大概首先是数据挖掘的小测，好玩的是我还没出门，小测的答案就被 rls\n发过来了，于是我干脆也就不去教室了，直接在线上做完了小测，在六教坐着休息了一会就去工位了。在工位上随便看了会论文，就是学长约的会议，这次开会大概讨论了一些杂七杂八的实验结果，以及后面的文献调研的计划，于是自己也就大概有了些论文\nsurvey 的任务要做了。\n2023.10.21\n今天出勤，出了一天，一点分没出，郁闷。\n2023.10.22\n今天解决了一些生活上的事情，比如取快递、买洗发水、重新配眼镜等等。这么忙完一波之后去了北门口，买了点小零食回来，看完了之前闲得无聊翻出来的\nCOP\nCRAFT。这部番我怎么说呢，说实话女主很对我的口味，无论是性格还是外貌。这种矮我一头多的白发萝莉，但是又意外地很有战斗力，很有自己的见解，还会为了我改变自己，怎么说呢，只能说是理想型。而且这部番的制作组看得出来很舍得在女主上下功夫，作画就不说，每一集几乎都会有新的衣服，无论是战斗服、常服、礼服，都几乎戳在我的好球区。\n谁能拒绝贫乳白丝一米六白发萝莉呢。而且，那种，松松垮垮的着装，或者说夸张点，披风式的服装，真的没人做吗，大家除了\nJK 水手服之外就没有什么服装设计了吗。\n这部番剧情也很不错，讨论的主题也有深度。但是，毁就毁在制作组太穷了，没法画动作戏，一旦进打斗场景，立刻开始\nPPT\n甚至出现我都能看出来的作画错误。这种问题导致，我经常在刚刚被剧情吸引住的时候，突然被穷到极致的作画出戏。说实话，虽然能看得出来制作组很努力了，但是最终的效果确实实在是差强人意。\n\n但是女主实在是太讨喜了啊，真的，完完全全的理想型。画画日常也行啊，中间第七集左右的日常实在是太好看了，为什么不多画一点！\n\n看完番，又进入了那种，空虚时期，简而言之就是完全不知道该干什么，即使有任务。于是我又开始琢磨什么时候去解决了\nMEGATON BLAST，最近出勤实在是一点分不加，导致我现在对 maimai\n都快失去热情了。\n但是说实话，我自己还是觉得，我现在的状态，不适合有很强目的性地去做什么事情，更适合随随便便混混日子。然而，周三讲课和周四周五讨论会又慢慢迫近，不得不开始工作。\n这种空虚感，这种无目的感其实就是缺乏正反馈了，无论是工作还是 maimai\n还是看番，都没能给我带来一些什么正反馈，那我和耗尽能量别无二致，基本上就是处于省电模式，等到什么事情重新激发起我的热情。嘛，希望这次是工作让我充满热情。\n2023.10.23\n今天结果是出勤，但是今天一把解决了 MEGATON\nBLAST，于是离万分也就差最后一分了。但是反而到了这个时候，我却一点想打万分的心态都没了，只想打点术的\nAP 来听歌，找回玩 maimai 的初心。\n晚上回来看了会论文就睡了，没啥特别的事情发生。\n另外就是发现 Zotero 真好用，以后就在 Zotero 上写论文笔记了，用个人\nblog 写论文笔记也实在是太坐牢了。\n2023.10.24\n因为明天要去讲课，所以今天起床就开始看论文，但是三篇论文要一天看完然后做\nPPT\n也实在是太困难了，熬了一个大夜才勉强做了大部分，到最后甚至躺在椅子上睡了两三个小时。\n2023.10.25\n并没能睡个好觉，起来之后立刻就去讲课，说实话效果确实出乎我的意料，整个场子的氛围很好，大家也确实到最后参与了一些讨论，而且自己也几乎没有掉链子，即使我觉得我对那三篇论文的理解也不过如此。\n下午没忍住，出勤去了，一开始也就三四个人，于是我单刷解决了 Now or\nNever，拿下了万分。拿下万分之后就在试着越\n14+，结果除了静蓝能够勉强打打前面之外，其他的几乎连 S\n都很难。哎，果然自己的 maimai\n水平还是太低了，想到之前还说过“万分就代表玩透了这个游戏”这样的评论，果然还是太年轻。\n2023.10.26\n周四本来是要有组会的，但是大家都去 CNCC\n了，结果就是组会取消，然而下午的软工例会还是得开。\n下午顺手混掉软工例会之后本来还在想着是应该准备一下之前说的论文 survey\n的事情了，然而还是没能抵制住做万分分表的诱惑，干了一下午总算是把视频给投稿出去了。晚上之后和\nzz、yuki 他们把组合数学的作业给做了，一看时间也不早了，就睡觉了。\n2023.10.27\n周五并没有做任何的事情，早上被吴成磊学长催了一下论文 survey\n之后只能开始缓慢查找论文，然后看论文。\n不过说实话真的不知道论文 survey\n应该怎么去做，感觉自己做下来就是找不到什么特别有意思的论文，但还是加把劲搞吧。\n2023.10.28\n非常粗暴地把论文 survey 的结果交给了学长，然后询问了一下论文 survey\n到底需要做到什么地步，果然学长非常认真地回答了我。\n但是说实话今天也一直没什么动力，于是只是非常平淡地消磨掉了周末的第一天。\n2023.10.29\n今天本来就约好了出勤，那就出了，顺手请了一顿万分饭。然而今天出勤实在是有点气，首先是\nUniTas，几乎稳定到最后结果一不小心脑梗在双押接三下八分单点的地方灰了一个绿了一个，最后\n100.41，否则我已经鸟加了。然后是 Aiolos，保持到 100.68\n快到最后，结果粉了两个绝赞，直接爆炸。\n但由于已经上万分了其实也没之前那么着急，也不想着后面几天集火攻击这两首，但是还是想着这往后每次出勤尽量都抽一下奖，抽中了就是\n24 分。最近倒是比较想打 Mutation 或者 Sage，再说吧，现在说实话冲刺 15800\n也没有那么有兴趣。然而我自己还是觉得有点上升无力了，简而言之就是明显感觉到我为了上分需要付出的\npc\n数越来越多，我越来越需要死磕上分，很难再像以往一样随缘就能上。虽然一方面是\n14\n的曲目不过数十首，能打的范围很小，但我还是觉得主要原因是没有研究明白就开始打导致手癖，所以还是计划之后好好在\nAstroDX 上打明白再上机。\n然后就该准备周一全新的一周了，这周得赶快干掉论文 survey\n然后和老师聊聊。\n2023.10.30\n上完了中马之后抱着试一试的心态去了新奥，结果发现真的没人，认真打了一下\nAiolos 和 UniTas，结果 UniTas 没有手感，但是 Aiolos 打了个 100.4678\nFC+。哎，真的是，真的不如回去沉淀或者打点 14.2 之类的简单 14\n来锻炼一下。\n2023.10.31\n十月最后一天，也就是在看论文了，啥事都没有干，有点废物了。\n2023.11.01\n十一月的第一天，先去上了导师的课，然后回来看论文，但是一直没有理出来一点头绪，看得云里雾里，也不知道明天的分享会到底能讲出来个什么东西，感叹啊。\n2023.11.02\n周四，之前就约好了讨论论文\nsurvey，下午开完软工的例会就回到工位开始看论文，看完论文开完会分配完下一阶段任务就直接回宿舍睡大觉去了。\n2023.11.03\n周五组会，没什么好说的，混完之后就立刻去出勤，结果网实在是太烂，被关了好几回小黑屋之后想着不如在游客模式练习一下水母姐，结果一练习，基本也就会了。下一把能上号了，于是开始推，原来我最高纪录是\n99.5，结果我都打到结尾的大散点了，还剩了\n100.53，于是人又着急了，最后的扫键掉到了\n100.49，然而这把断网没能传上去。于是，也就只能打趣说，要是真的出分了，才是真的急。\n其他没打什么，很早就回去了。\n2023.11.04\n早起堵门新奥，先是打中二解了 Blue\nZone，之后就是趁着上午网好人少赶快推水母姐。好玩的事情是，我打了四把 New\nRecord，分别是\n100.45、100.46、100.47、100.48，当时真的是，想把滴蜡熊一把打穿的心都有了。\n下午网已经开始不稳定了，于是也就不打分了，专心打小歌\nAP。晚上人少了网也慢慢好了，本来想着在国服上再打打的，但是还是有人在排队，于是我就去饼上练习水母姐，没想到，两把直接鸟加了。这个时候我已经很急躁了，于是赶着闭店前，在国服上上号，又打了一个\n100.52 鸟加，然而，就在这个时候不偏不倚的断网了。\n哎，当时整个人都已经快炸了，明明有这个水平，但就是没出分。\n2023.11.05\n早上堵门去西局出勤，到地方之后发现真的是一个人没有，于是立刻吧唧，热完手就开始爆推水母姐。预料之中，没打多少把就顺利拿下鸟加。事实上我从堵门打到这个时候，机厅里面都没有来第二个人，倒是有一位母亲带着孩子来玩，我反正当时已经解决心头之患，就把机子让给他们，自己上楼吃饭了。\n吃完饭下来发现还是没有人，于是继续断断续续打，虽然说下一个目标应该是福瑞火箭，但说实话没打几次，剩余时间都在打小歌听歌。最后打累了，完全打不动了，把空调喊了过来。在等空调来的时候，我一回头，发现装着一百个游戏币的塑料框不见了，当时有一群类似常客的人在收拾他们抓娃娃机的战利品，我当时就算是带了点火气问他们我的币呢，他们也没觉得是自己拿的，反驳了我，于是我就去调监控了。监控显示确实就是他们一群人拿的，那就没啥好说的，在保安的监视之下他们取了一百个游戏币还给我，这事就算过去了。\n空调来这里随便打了几把，结果在我的号上把变态主义给鸟了，虽然当时是我注意到已经断了网让他不要控分随便打的，但也算是制造了点笑料。好玩的事情在于，空调本来应该早点回去赶火车回雁栖湖，他也这么做了，结果是，走得晚了两三分钟没赶上末班火车，他就又回到了机厅。当时费米也来了，我俩看到他莫名其妙折返回来，在机厅里面笑了至少有两分钟。\n最后就是一直打到七八点钟，我也就出了个失败作少女四星\nAP，其他也没啥成绩，回去把作业做了就直接睡了。\n2023.11.06\n周一是中马，一觉睡到上课，于是立刻匆匆忙忙赶到，因为这节课是必然小测的。上课实在是坐牢，小测更是坐牢中的坐牢，毕竟冬天大家穿得都很厚，教室里又是人挨着人，结果就是可活动的范围极小，氧气含量也几乎跌破下限，昏昏沉沉做完小测就跑去上地出勤了。\n上地依然全都是人，今天没能打到什么有意思的成绩，随便打两把就回去了。\n2023.11.07\n周二，本来就约好了和 yuki\n他们去香山，于是早早起床，吃了早饭就去了。本想着工作日的上午香山怎么的人也不会多吧，结果到了门口，发现还算不少，大多都是退休的大爷大妈模样，或者就是我们这种无所事事的大学生。香山的叶子其实也还没怎么变红，整体来看还是翠绿一片，除了山顶稀稀朗朗的淡红之外。\n当天天气实在是太冷，明明穿了一件卫衣和防风的风衣，却依然被山上的冷风不断提醒现在是寒潮。顶着寒风爬到香炉峰，还没喘息多久就直接坐着索道下山了。说实话玩得也是实在匆忙，确实没能看到什么有意思的风景，可能单纯的外出徒步也是一种乐趣吧。\n回来的时候路过万柳机厅，于是小小出勤一把，把标奶推到了\n100.37，打了一个暴力扳机的四星 AP，除此以外就没有出分了。\n2023.11.08\n今天就是上课，看论文，写作业。今天事情其实还真的不少，中马的 pre\n材料准备到了 ddl，然后学长问我加紧要了 ITU-T\n用户测试的材料，明天组会要讲的论文也还没准备，周四还得交高级机器学习的\nproposal，总之就是一直在忙，到了一点多还没完全搞完。\n2023.11.09\n周四，还是一样的简单混完组会和软工会，但是这次不能出勤了，因为得赶快回去搞\nproposal。不过比较好的一件事情是，回去之后 yuki\n和我说他大概知道要干什么了，于是 proposal\n整体写得也就比较顺利，早早完工早早交掉。\n晚上本来是要和学长聊用户实验相关的东西的，但是学长肺炎在休息说另找时间，也就先搁置了。\n2023.11.10\n今天就是非常单纯睡了一个大觉然后出勤，手感比较好，AP\n了白火花然后鸟加了 HERA2\n和福瑞火箭，晚上本来想迅速解决白死镰的，结果粉了好几次绝赞痛失鸟加，到了闭店也没打完，于是只能赶快回去准备和学长开会。\n这次开会基本上没有什么有意思的东西，大概就是这周末稍微思考一下用户实验怎么尽可能地在保持真实交互的条件下又符合\nITU\n标准，然后约了周一再开一次会交流一下线上算法和用户实验设计，周四周五再找老板聊一下。总之就是，有了点事情要做，但是确实也一下子没啥思路。\n好玩的一件事就是，今天早上我才发现上周五数据挖掘小测了，于是总评高高兴兴减了\n10 分，不过研究生的绩点终究是随便搞搞，所以估计混个 3.6\n也就随随便便过去了。但是，麻烦就在，以后真的不能翘课了，再缺一次小测成绩就实在是太难看了。\n2023.11.11\n出勤，去了东直门，很快解决了白死镰之后瑞文皇帝打了个 100.52\n进结尾绿绝赞。哎，真的是觉得绝赞是我的一生之敌，UniTas 和 Aiolos\n也是掉绝赞，白死镰之前也是掉绝赞。\n晚上是高老板的特奖饭，吃完在五道口又小出了一会回来准备写作业。不过说实话确实挺纠结明天出不出勤的，因为瑞文皇帝确实还是比较手痒，但是手上又有一门作业、Approval9\n以及实验室的东西。比较好的一种安排就是今晚早点睡明早早点起把作业和\nApproval9 初步给清理掉，然后下午五点这样去新奥出勤。\n2023.11.12\n周日，主要做的事情就是在宿舍里面清理作业，这次作业是马尔可夫相关的一些东西，本来以为很快能解决的，结果还是花了段时间才磨了个七七八八。中途应该是\nzsj 在活动室约了一群人一起看比赛打雀，我也过去混了一个半庄。\n2023.11.13\n周一把中马的 pre 混掉之后出勤，结果一不小心把静蓝打到了\n99.8，集火推了一下，未果。\n晚上和坐标他们吃了一顿五道双马，他们家的厚切猪排确实好吃，然而店开的位置实在是有点刁钻，去的话也有点麻烦而且外卖不卖厚切。还是下回有机会的话，找找看有没有可能再去吃一顿吧。\n2023.11.14\n周二就是出勤，实在是没什么好记录的，本来想解决静蓝的，结果是解决了红枪吃了\n7 分烂分。\n2023.11.15\n周三还是一样，先去上老板的课，上完之后也不知道该干些什么就回到了宿舍准备学点东西，结果一个下午偏偏一点正事都没做出来，反倒是看了很久的国际新闻和评论，看到了第二天早七点才昏昏睡去。\n2023.11.16\n昨晚睡得太晚的结果就是今天组会居然没起得来，迟到十五分钟才匆匆忙忙赶到会议室。然而，更尴尬的就在于我组会上也没没什么能够讲的，结果还被导师点名讲点东西，我也只能尽可能的混了一下。\n说实话还是摆烂太过了，真的，还是没有搞明白自己应该干些什么，不过这次之后我做了一些规划，希望能够在接下来的一段时间里，能够有所进展。\n晚上是规划中的出勤，一共打了一两把，最后一把断网打游客号，结果一不小心把紫茄子打上\n99.5 了，这下子目标来了。\n2023.11.17\n今天周五，早上起来把数据挖掘的小测混掉之后就是出勤。今天出勤没想到手感真的很好，很快就解决了紫茄子，拿下了\n14+ 的第一个鸟。\n之后就是杂七杂八打了点东西，也没吃到分，就这样吧。\n2023.11.18\n周六已经完全记不得在干什么了，感觉就是摆烂过去了。\n2023.11.19\nlcr\n说今天要一起吃晚饭，于是起床就开始做性能评价作业，做完之后赶快前往西直门见他。中途没什么有意思的东西，买了个一般的巧克力派，然后吃了个平均水平的泰式餐厅，在周末西直门的人潮里面挤来挤去。\nlcr\n说明天就打算走，从北京南站出发，所以我们决定一路往南，走到哪里算哪里，最后我们到了西单。我算是有点手痒了，就说我去机厅抓个同学，lcr\n就差不多懂意思了，于是在此分别。\n晚上简单出了一小会，成果就是鸟加了 Climax。\n2023.11.20\n看了一天论文，毫无进展，也没摸鱼，但工作也没成果。\n2023.11.21\n周二没有事情，打算验证一下西单插电师是不是如大家所说工作日没人，于是去西单出勤了。到地方发现，还真的没人，于是基本就是吧唧乱打。今天主要的几个目标是两个\n13 的\nAP，这都不难，很快拿下了。然后，本来是想打钢铁超音速或者宿星审判的，结果这两个都不会，倒是泽拉斯莫名其妙开窍，正好人少，我就在饼上开\nfree mode 练习了好几把，最后在要退勤的时候拿下泽拉斯。\n2023.11.22\n周三做了一天的事情，主要还是组合数学的作业。组合数学现在讲到了母函数，其实就是数列的形式幂级数，然而这玩意真的讲得不明不白，又想出难题，但上课又不好好讲严谨的逻辑推理，导致最后作业只能忽略好多可能的\ncorner case\n瞎做乱做，我个人是很反感的。于是，在最后交的作业里面我把这件事批判了一通，希望助教不要在意。\n做完作业简单做了一些数据处理，就睡觉准备组会了。\n2023.11.23\n今天组会老师不来，于是随便聊了一下就散掉了，期间贾老师问我为啥不把毕设投出去。说实话，因为我一直觉得我毕设做得实在是不咋样，所以也不敢和老师说投出去这件事，然后手上的项目进展也没那么顺利，更不敢节外生枝提这些事情。不过今天贾老师确实说的有道理，现在这个项目进展没那么顺利，不如投一个保底的\nB 会至少丰富一下 pub list。\n组会之后简单交流了一下软工就去出勤了，一分没吃到，但是好像会打一点天秤了。\n2023.11.24\n今天就单纯出勤，目标就是天秤，但是大概打了一下午给我断网断了六回，我最后直接心态炸了，吃了顿萨莉亚就准备走。然而我想起来\nif 说要给我带游戏币，找他打了几把之后邪心又起来了，结果真的 1pc\n内打完鸟加。天秤说实话难点太集中了，很有翠子的风格，和亚特兰蒂斯、泽拉斯这种差不多，70%\n白送，20% 有点难，10% 要好好学。天秤怎么说也是个 14.4，于是爽吃 12\n分退勤。\n2023.11.25\n已经快要忘记周六干了些什么了，我记得我也没有出勤，我也没有做任何有意义的事情。大概又是睡到下午起来，然后行尸走肉一般混过去了一天。\n2023.11.26\n周日是 lambda\n的生日，性能评价的作业做到一半就赶过去吃饭了，吃完之后出了一小会勤，结果打出了标奶\n100.3 灰绝赞，这下真的不得不考虑要不要集火推了。\n晚上最后还是得交作业，火速回去补了一下上交。\n2023.11.27\n周一，什么事情都没有做，也没有出勤，非常缓慢地推进了一下组合数学的作业。\n2023.11.28\n下午应要求来到实验室开了一下项目会，大概意思就是有个题目要开，导师让我和学长写一下开题的本子，这个活之前真没干过，还得学习一下。开完会之后就一直在实验室里写组合数学作业，写完就去五道口吃饭出勤了。\n今天出勤实在是忍不住了，标奶的分就明晃晃放在那里，还是太诱人了。不过好事就是，这次出勤人品大爆发，打出了\n10 粉以内标奶鸟加的爆炸成绩，算是近期为数不多的好消息了。\n2023.11.29\n今天说是要好好干活的，结果上完课到了宿舍就摆烂了一整天，说不出来摆烂干啥去了，反正就是啥都没干。\n最近的事情还是不少的，而且确实给我一种我被人需要的快感，动力也慢慢回来了。然而由于摆烂成性，现在还是没能进入那种马力全开的状态，今天依然因为写本子没有思路而拖延了很多任务。目前还是得尽快规划一下，把这些事情给做完。\n2023.11.30\n组会莫名其妙取消了，我还想着和老师交流一下近况的。\n今天实在没什么可以记录的东西，晚上出勤解决了瑞文皇帝之外，也就没什么可说的了。\n2023.12.01\n今天手感太火热了，一下子解决了 BATTLE NO.1 之后莫名其妙抽中了 Aiolos\n鸟加，之后随便打了个新歌 13.9 上了\n15900，随后在退勤前莫名其妙打出来了个紫茄子\n100.38。这下不得不开始规划万六了。\n2023.12.02\n今天就是出勤，解决了 Sage 的鸟。期间收到了贾老师又中了一篇 INFOCOM\n的信息，不过心情似乎也没有什么波澜。\n下午简单做了一下作业，排队论确实是怎么学都没有什么头绪。晚上陪坐标去吃了一人一千的和牛，不过不得不说这钱花的确实很值，虽说不如暑假在日本吃的那种超高级和牛那么惊艳，但是论口感已经十分贴近，论香气虽没那么充盈但也足够了。\n吃完就回去摆烂了，今天不知为什么左手的手腕处开始异常疼痛，虽然怀疑是出勤，但是这个位置疼只能让我想到军训的时候摔到地上时手掌撑地导致软组织挫伤的经历，我怀疑又是什么时候手掌像那样受了过大的力导致挫伤了。\n2023.12.03\n今天在宿舍里面做了一整天的作业和杂活，也没什么可以记录的。实验室的开题报告书真是麻烦，要我们在八字还没一撇的时候就要写比较详细的研究计划，实在是无从下手。\n晚上大概还是在想如何从 trace\n里面挖出来一些送显冲突的原因，但是做来做去确实是没做出来一点头绪。唯一值得欣慰的一点就是确实能够从\ntrace\n里面验证出来送显时刻是以显示槽开始时刻为中心的正态分布，但是除此以外就再也没有什么有效的进展了。甚至可以说，目前很多前置假设都是值得质疑的，例如帧送显甚至可以不是不减序列，意味着逻辑上靠后的帧有可能会提前处理完毕，这些帧在算法中又是如何处理的我这里也是一概不知，虽然这种情况少之又少。再者，三帧乃至更多帧竞争同一个显示槽的情况比我想得多得多，这一部分的数据处理又是一个大麻烦。\n另外就是今晚幻想了一下打算在冲刺 16000 之后打一个 1-13\n曲目的大将，13+ 大将太远，14-15 大将更是理论\nrating。虽然这种目标的挑战更多来源于出勤的币钱，但我觉得鸟加还是太好看了。\n2023.12.04\n今天依然去出勤了，解决了黑天鹅，然而左手的伤势确实是越来越重，现在基本是拍到什么地方都会疼。\n晚上回来和学长简单开了个会，然而毕竟我三周都没做出来什么有用的东西，学长还是有很大的不满的。于是只能赶快私密马赛然后迅速问清楚了要干啥。然而还是明天再做事吧，今天太累了。\n2023.12.05\n今天把生活上的事情处理了一下，清理了一下宿舍，打理了一下胡子和头发，拿了快递，把停在东主楼的车骑回来了，买了牙膏等日用品，把之前的风衣给洗了，然后就是去医院看了一下左手的伤势。\n简单来说，就是确诊腱鞘炎了，估计原因就是 maimai\n打多了，手腕部分一直在受力导致磨损。事到如今也已经没有别的解决方案了，只能拿止痛药顶着，让它自然恢复，近期出勤显然是不能再去了，正好花点时间清理一下工作吧。\n2023.12.06\n今天尝试做了一下离线最优化，先实现了一个最为简单的算法，也就是贪心地安排到最近的空闲显示槽，并且以给定概率\np\n丢弃一部分帧。首先观察了一下帧率，显然丢帧率 p\n对帧率的影响是几乎严格线性的，符合预期。在 p = 0 的时候帧率大概在\n58FPS。同样符合预期的是，虽然这种做法保住了所有的有效帧，但是显然拉高了延迟，大概在\n5000 秒的视频过程中会产生 44 秒左右的额外延迟，这显然是不可接受的。\n这个结果至少表明了这个 trace\n是过饱和的，也就是说服务器出帧的帧率略高于\n60FPS，所以必须一定程度地丢弃一部分帧才能保证延迟稳定。\n之后我尝试了一下提高 p\n观察延迟的变化（依然使用贪心的安排方式），可以注意到即使 p 都快提升到 1（最后的显示帧率都快和 PPT\n一样了），延迟也几乎有 9ms\n左右，这已经是相当大的代价了。这也就说明粗暴的贪心算法是不可行的，必须要有更加精细的算法来保证延迟的稳定。\n\n事实上丢帧的目的就是为了空出一些槽来防止延迟的跳变。比如说显示槽为\n17ms 宽的时候，三个帧分别在 0ms、13ms、18ms\n到达，如果按照不丢帧的算法安排，这三帧分别会被安排到\n0ms、17ms、34ms，额外延迟就已经达到了\n16ms，相当高了。但如果我们能够积极地丢掉第二帧，然后意识到第三帧的画面撕裂程度可以接受，那么这里延迟就能压到\n0ms，虽然以丢一帧为代价，但是完全是可以接受的。\n现在有两件事情可以尝试去做：\n\n算出真正的最优解\n\n算出帧率的最大优化目标（可以做的其实也就是限制延迟阈值然后尝试给出离线最优解，现在也没有什么头绪可以做）\n给出帧率和延迟平衡表达式（其实就是自己给一个 QoE 表达）\n\n实现给定延迟阈值最优化局部帧率的算法\n\n最近才感觉到，读博的话，要做事有的是事情可以做，不做事，也完全可以一点事情不干。这几天，稍微给自己提了点要求，要求组会认真准备，言之有物，要求每周都要有点想法，瞬间压力就上来了。\n2023.12.07\n似乎并没有什么可以记录的，组会讲了个 STARLINK 的 WWW\n测量工作，我评价为 primary school level\nwork，然而毕竟是最近热点，而且确实算是数据翔实，看了眼 open\nreview，大概平均分得有 5-6 分，多半就是中了。\n这篇文章有意思的地方在于，这个作者宣称测量了三十多个国家的 STARLINK\n网络性能，然而我仔细想了想，他也就测量了一下 RTT\n和吞吐量，基本上就是全组人公费全球旅游，每到一个地方就把电脑打开跑一下测速。然后这么搞完还能拿个会议论文，我怎么想也还是想不通为啥我不能做做这样的工作，我看着论文里面出现的各种陌生的地名总有一种悲伤从中来。\n2023.12.08\n周五并没有干什么有意义的事情，一觉睡到下午之后去上地尝试看看手还能不能打\nmai，结果随便打了几把，把巴比特打到了\n100.4。在这个基础上，以我的心态我立刻就开始赌气单刷，然而结果并不理想，我打出了五个\n100.4。\n晚上回去大概是要和学长和老师简单开个项目会的，然而说是简单开，最后还是聊了快两个半小时。项目会还算顺利，后面安排也比较明朗，我把最近的任务交付掉之后也暂且是完全没有任务了。\n2023.12.09\n今天和 hhh\n约好了去西局出勤，我正好在打算把八比特赶快解决掉。然而今天结果确实比较搞笑，他倒是很快解决了，而我又打出来了两把\n100.4，其中还有个 100.4998，我没话说。\n下午腱鞘炎大概是严重到完全无法活动了，所有涉及到左臂的运动都会巨大疼。在这种情况下，也只能先把之前安排好的所有出勤计划全都推迟了，本来打算年内解决掉\nw6，这下看来也是没啥希望了。\n2023.12.10 - 2023.12.17\n忘记了一整周的日记，这一周说实在的没有什么可以记录的。因为腱鞘炎，出勤实在是无法再像先前那样频繁，再加上学长那边工作催得也慢慢变得越来越急，一周连开三场会，加上课内杂七杂八的任务，事情是越来越多。\n工作上确实也取得了一些小进展，也逐渐明白了要做些什么，和学长的交流也越发顺畅，每次组会都至少能够讲出来点工作效果和未来计划。出勤虽然没那么勤快但还是稍微出了一两次，但是莫名其妙效率高了好多，这一周接连解决八比特、白龙、出生、蓝区、信用，一路飞到\n15984，这下真的离 w6 不过是一首脑天直击了。\n2023.12.18\n这一学期实在是不想再记录了，渐渐发现每天的生活慢慢变得同质化，不过我倒是不排斥，同质化意味着安稳和可预测，倒也是一种好事。\n","categories":["【生活记录】日记"]},{"title":"2024 春季学期记录","url":"/2024/02/26/2024-spring-record/","content":"虽然有预感这一学期可能和之前一样每天都是无聊的重复，但是还是开个日记，以免真的有什么想要记录的时候却苦恼于没有地方写。\n\n2024.02.26\n这一学期的第一天，然而今天就要处理掉不少工作：\n\nTHUInfo 一些信息需要提交掉\n软工那边需要拉一些人\nTON 实验的打表还没做\n\n虽然都是一些很零碎的小工作，可能一个下午也就做完了，但不知道为什么最近我的拖延症越来越明显，以往是有那么点拖延但也不至于现在这样。\n\n忙活了一整天，软工那边似乎暂且不需要我参与什么，THUInfo\n那边迅哥哥也暂且不急，所以今天就几乎全用来跑 TON\n的实验，然后因为接到了第二天有腾讯 HR 面试的通知，还稍微做了点准备。\nTON\n这边实验的想法很简单，因为学长想要收集一些真实网络拥塞控制的情况来做 RL\n训练，然而 RL\n训练时现跑网络发包会导致训练大幅度延迟，所以不得不去思考怎么缩时间。那么，有个想法就是打表，针对所有可能的参数把\nbaseline CC 的 performance 都打表打出来，训练的时候直接读取就行。\n然而参数空间不得不说还是挺大的，所以可能需要多机打表，目前讨论确定使用\n50 台机子打表，那么就需要一个中心机来 assign\ntask，而这就是我需要做的。\n最初我觉得直接在 SSH 后面附上命令就可以了，然而如果直接使用\nos.system(\"ssh [name]@[ip] '[cmd]')\n的方式，就和串行没有什么区别了，而且这一方法需要保持 SSH\n连接，以我现在的知识来说，我还真不知道如何让中心机和其他 50\n台机子同时保持 SSH 连接。\n所以最终采用的方式是让中心机发指令给边缘机，令其开一个 tmux\n后台运行，之后就可以直接断开 SSH 了。\n不过说起来简单，操作的时候事情还不少。首先边缘机上没装\ntmux，需要手动装，然而要装就需要 sudo，sudo\n又需要手动输密码，怎么在代码里面模拟终端交互行为当时卡了有段时间。不过最后还是找到了\nparamiko 这个库，其 invoke_shell\n方法可以模拟终端，大概类似于：\nPython# Connect to remote serverclient = paramiko.SSHClient()client.set_missing_host_key_policy(paramiko.AutoAddPolicy())client.connect(ip, username=&quot;[name]&quot;, password=&quot;[password]&quot;, port=22)# Run scriptchannel = client.invoke_shell()channel.send(&quot;cd ~/pantheon &amp;&amp; tmux new-session -d -s ton &#x27;[command]&#x27;\\n&quot;)output = channel.recv(65535).decode(&quot;utf-8&quot;)\n整体用起来还是比较舒服的。\n然而就在我以为一切都已经解决了的时候，我发现 loss rate\n一直为零，这意味着我有参数没有设置正确。这个时候，我得知了一个令我震惊的东西：Python2\n的除法对整数是向下取整的。写惯了 Python3\n里面默认返回浮点数的除法，这个 bug\n我完全没有注意到，找了大概有一整个晚上才发现。\n不过就算这样还是有无法理解的地方，那就是现在依然存在有的时候程序随机爆炸，打表打到一半突然死亡，这个更是我不知道原因到底在哪里，明天和贾老师联系一下再来思考。\n2024.02.27\n今天是约定了的腾讯那边 HR\n面试的日子，本来以为这个面试应该多正式，结果就是线上和 HR\n聊了一些我也不知道有关还是无关的问题也就结束了，晚上上传了一下身份信息之后似乎就只要等\noffer 就可以了。\n昨天出勤的时候无意中把鸢尾花打到了\n100.45，今天自然就没有忍住出勤去了，手感确实不算差，大概三把左右就把鸢尾花鸟加拿下。\n晚上回来主要是因为要给 fyk\n他们简单讲一节日语课，九点钟讲到十二点左右，本来想着赶快开始把贾老师和腾讯那边工作启动的，还是因为太累了，就先睡了。\n目前看来生活还是比较 under control\n的，希望这种势头能够保持下去吧。\n2024.02.28\n下午有导师的课程，但是十一点就已经从床上爬起来了。爬起来之后简单折腾了一下腾讯那边的工作，把\ncode base\n基本修好了之后就算是启动工作了，忙完这些清理了一下宿舍垃圾就去上课了。\n课程本身是没啥意思的，不过有意思的事情是明明这是计算机系的专业课程，却莫名其妙吸引了不少来自美院、教育学院的文科同学来上课，我对这一现象暂且找不到合理的解释。\n上完课就去工位坐牢，腾讯那边的工作启动起来了之后目前来看还都是比较顺畅的，新的\nbaseline algorithm\n已经跑起来了，确实比之前有相当大的提升。现在的核心任务就是统计 1% low\nFPS\n这个指标，然后针对这个指标做一些简单的文献调研。除此以外，大概就是得花时间手搓一下\nQoE，看一眼离线最优算法能够搞出来什么东西，远期的话 code base\n应该需要对窗口延迟等指标做一些调整，但是这些已经是后话了。\n另外就是 TON\n实验现在完全没有动，感觉还是得找个时间去工位好好坐牢一下。\n2024.02.29\n今天主要就用来出勤了，不过出勤也是收获颇丰，把风神和白香水都鸟加了，于是顺利取得\n14.5 全鸟加的成绩。大概，3 月更新之后把那几首歌打完，b15\n侧地板也就差不多来到\n14.3，这样的话就可以简单做个分表了。后续一方面吃下位 14+\n的分，一方面打算打 14.3 的全鸟加。\n工作上的话，THUInfo\n那边因为拖延惹得迅哥哥有点生气，所以赶快把信息交掉了。腾讯那边 1% low\nFPS 的数字有点奇异难看，可能还是得对着 log\n再去想想有没有什么地方出现问题，因为最多延迟两帧，再怎么说也不太可能出现那么大的帧持续时间，除非就是送显时间戳本身距离就很离谱。TON\n那边还在尝试 debug，也不知道什么时候能够搞出来，暂且先搞着吧。\n2024.03.01\n今天早上看了一眼服务器，大概挂掉了 5\n台，感觉还是可以控制的。然而我现在最懊悔的事情是我居然在程序里面没有存储中间结果，这导致我要是挂程序了就必须从头开始。现在决定就是，递进式地更换程序，哪台服务器挂了我就把哪台的换成能保存中间结果的，没挂的就最好。然后我还得写一个监控程序观察哪台服务器挂了，这就得去找找阿里云相关的\nAPI 了。\n下午混掉组会，简单思考了一下那个脚本的写法，发觉需要研究阿里云\nAPI，然而一顿折腾我发现阿里云的 API\n实在是难以使用，所以只能搁置。晚上吃了顿饭心灰意冷决定摸鱼，打了一晚上麻将和舍友刚教我的湖南跑胡子，然后顺利发现服务器欠费停机，所有的实验结果全都没保存下来。\n至此，我只能说，我又一次被这玩意打败了，反正已经这样了，不如赶快睡觉保命。\n2024.03.02\n今天的任务只有一个，就是出勤，迅速解决掉本次更新里面的两个\n14，电光石火以及华为。然而今天实在是有点诸事不顺，早上堵门来到上地的时候人数就已经逼近\n10\n人，蹭了一下非律的华为迅速解决掉之后，来了个来上地团建的小团体，人数直接突破\n20，这完全没法打了，而且这个时候我电光石火甚至还没鸟，手感爆炸烂。退勤之后越想越气，于是立刻转战天通苑机厅，结果人也完全说不上少。然而还好在场的人还都比较友善地让我反复刷电光石火，最终终于在快闭店的时候，鏖战\n30 把拿下电光石火。\n晚上回去的时候精神状态实际上就已经很不好了，主要是太疲劳，前一天晚上没睡多长时间今天又奋战了一整天，于是只能赶快计划着回去睡大头觉。\n2024.03.03\n睡得很晚才起，大概到了晚上四五点钟才从床上下来，今天得立刻前往工位开始赶事情。周一约了\nmfy 把软工课上的事情准备好，那今天已经得尽力拿下手上的工作。\n现在 TON 的实验暂且写了一个每隔 15\n分钟监控一下并且看情况重启的版本，现在也不是很清楚是不是能用的下去，至少目前为止所有事情都暂且按着我想的方式发展，希望最终没事。以及虽然这个实验的经费最终是要走报销渠道，但是毕竟现在暂且是从我手上出钱，或多或少还是有点心疼的。过了一段时间，我观察了一下那个脚本的运作情况，果然有一次检查到了死机子，并且很成功地重启了这台机子，也就是说目前为止理论上应该能支撑到这个实验跑完了。\n2024.03.04\n今天主要还是折腾了一下 TON\n实验的事情，因为我发现过了一晚上运行进度只有\n5%，按这个估算，需要十天才能跑完，这完全不能容忍。和贾老师一波讨论之后决定降低参数采样率，减小遍历空间来控制实验时间，这样操作之后目前预计明天就能拿到第一波试验结果。\n晚上和 mfy 讨论了一下软工的课前准备，目前也已经有了基本的\ntimeline，希望一切正常推进吧。\n然而最让人烦心的事情就是，大四的那个实习写的小程序，因为里面有些静态图片我挂在了腾讯云上，而这个存储桶似乎因为欠费已经释放掉了，导致现在小程序已经几乎没法使用。但是，我对这个实习实在是有点厌恶，真的很毁坏我现在\nunder control 的心情。\n2024.03.05\n昨晚睡得超级晚，到了快六点钟才上床，于是早上九点半赶去上课的时候人已经完全不是人样了。软工课这波改革之后，前三周的课程变成了助教讲解技术细节，然后学生课上实操，其余助教答疑。不得不说，这个模式其实我还挺支持的，但是对助教的要求也就随之高了起来，辛苦今天已经不成人样的我坚守完了第一次答疑。\n然后，实习那边找到了问题原因是 CDN\n欠费，也就是说实际上和我没有关系，那真是可喜可贺。\n下午按照计划出勤，很快就解决了标准\n8bit，但是毕竟只睡了三四个小时，下午出勤的时候还是很不在状态，完全打不出来什么有意义的分数，于是早早回来把事情清理了一下，包括布置了软工预习作业，把最近实验结果总结了一下之类的。\n最近打算做 maimai\n的分表了，然后也打算好好坐工位了，希望能够有所收获吧。\n2024.03.06\n今天大量的事情都动了起来，收到了腾讯的\noffer，贾老师那边第一阶段的数据处理完毕进入下一阶段，课内任务逐渐加重，实习那边催我重设背景图，软工文档需要修改，甚至我还花了点时间屏蔽了一下阿里云的推销短信和电话。果然啊，进入了事情开始堆积我开始雄心壮志的阶段，但我这次希望能够把这个状态持续久一些，不要像之前一样事情做到一半去摆烂了。\n结果今天下午大概是学了一整个下午的近世代数，写完了作业。晚饭和迅哥哥聊了一下把\nSaiblo 引入 DRL\n课程的一些事，然而目前来看还是空中楼阁，所以这个话题进行了一半就回到了吐槽日常生活。\n晚上工位坐牢，今天还有不少事情要去处理，希望能够尽快解决吧。\n2024.03.07\n昨晚睡得很晚，因为没忍住开始做 maimai 分表了，这次学习了如何用 PPT\n做视频，意外地还挺好用，效果也不错。唯一的坏处是，七点钟才爬上床。\n下午的组会说实话没啥好汇报的，总觉得自己很忙但是没啥好说的，只说了一句“在帮贾老师跑实验”似乎就没了，果然还是得在自己手上的项目上再下一些功夫，不然实在显得有点没有成果。\n今天整体来说还算干了不少事情的，主要的一件事还是和吴老师那边对了一下腾讯的工作。目前来看大方向需要做一些调整，先前我们一直希望聚焦于，或者至少侧重于将帧从解码器送往显示器的控制算法，然而这一部分面临两个问题，一个是优化空间实在太小，二个是评测指标很难完全规避\nQoE 建模以及繁杂的用户实验。最终考虑下来，还是希望把 story\n讲成比较全流程的送显优化，侧重于如何提高出解码器时间戳的预测准确度。这样的话，我目前要做的，就是多做点\nWebRTC 等相关技术的调研工作了。\n晚上把 maimai 分表做了，然后还需要搞软工的事情以及 TON\n的事情，希望能够尽快解决吧。\n2024.03.08\n今天是软工试讲，本来以为是随便搞搞的事情，但没有想到的是裴老师提出了很多很多的意见，甚至建议把授课结构都重组一下。虽然说哪怕没有裴老师的意见我也得重新洗一遍\nPPT，只不过有了这个意见之后工作量肉眼可见地高了。\n讲完软工忍不住了，去出勤了，但是好久没有出勤手感冰凉，几乎什么都打不上，最后也只能遗憾退勤。\n实习那边似乎还是得我来处理静态资源的事情，TON\n实验那边也开始回收实验结果，总之慢慢事情又堆起来了。\n2024.03.09\n周六，例行堵门出勤，本来打算解决雷切，结果今天打得头昏脑胀还没解决。\n工作稍微推进了一点吧，把小作业的 code base\n搞好了，总之接下来的周日，又是辛苦的一天。\n2024.03.10\n现在有些不太好的征兆，就是渐渐地我开始拖延了，必须要想办法遏制住这一点。简单来说现在要干的事情也不少，但是似乎开始逐渐有了一些畏难情绪，不是很想把手放下来，这不行。\n今天在宿舍做了一天软工的\nPPT，整体问题不大，但确实是花费了太多时间，晚上又是靠近五点多才睡觉。\n2024.03.11\n最近被雷切搞得心烦意乱，又没忍住决定出勤了，然而今天即使状态不错，雷切还是一直没能出分，现在\npc 数已经破百，我又开始质疑自己能否完成这一任务了。我一直都是把 maimai\n当成自己发泄情绪的地方，用简单的身体运动和放空的大脑来休息，然而现在面临的问题就是似乎如果我\nmaimai 进度卡住，就会连带着一些负面情绪，反倒影响了自己的工作。\n想到这里，决定还是重整一下心情，迅速把手头一些简单的工作做掉，然后继续堆尸雷切。我自己毫不在意通过无数若干次的糊和抽奖来获得成绩，毕竟我的本质目的是放松心情而已。\n手上把实习的事情先解决掉吧，不算什么大事，但是不能一直烦我。\n\n不知不觉紫雷切的 pc 数来到了\n146，说实话，在我推的时候已经隐隐约约有先前焦虑症复发的感觉了，直到店员闭店把电拔了才如梦初醒。\n似乎真的，最近 maimai\n先放一放吧，至少这一周就先到此为止了，下一周把事情搞得七七八八再来摸索。\n2024.03.12\n今天早上去软工课上讲课，除了时间没有控制得很好之外，似乎其他的部分都很顺利。大家也都跟下来了七七八八，课后也有不少来问问题的小朋友，至少让我觉得我的努力没有白费。\n下午开始基本上就是娱乐了，中午和 wyx\n见面吃了顿饭聊了不少天，下午则去上地陪空调出勤。这次出勤 End Time\n和雷切都没有解决，不过现在也已经看开了，随便吧，什么时候解决，都是解决。现在\nmaimai 决定换个策略，就是按照查分器拟合定数倒序推 14.6+ 的鸟加，和之前打\n14.2+ 的鸟加如出一辙。不过 14.6+\n难度还是很高，也不知道能不能顺利搞下来。\n回来之后已经累的七荤八素了，决定今天先摸鱼，明天做认真学习的好孩子。\n2024.03.13\n上课，然后出勤，然后鸟加雷切，然后回到宿舍补作业。\n说实话，现在越来越不是很清楚读博到底该干什么了，除了把贾老师的任务做掉，似乎真的没有什么一定要做的事情，这让我很迷茫，每天几乎都是在摸鱼度日。我在思考着到底要不要和老师还是谁简单聊聊现在的情况，然而和一些学长交流后，似乎这样的样态才更为常见。\n或许去读读 paper 积攒一些 idea\n才是正确的路径，现在开始或许还不晚吧。\n后天还要早起去入职，今晚大概把事情清理一下，组会被训也拉倒了。\n2024.03.14\n组会并没有发生什么可以说的事情，基本上就是非常平淡地混了过去，组会后稍微折腾了一点事情之后还是选择了前往上地。不过这次组会还是确定了不少之后的路线的，比如说至少\nNSDI 的论文得好好看了，然后和吴老师那边的项目也得好好推进了。\n出勤也并没有发生什么可以说的事情，因为解决了雷切，现在又回到了 14.6\n不知道打什么的状态，目前可能还是先解决江江吧。\n明天得早期入职，希望不会有什么差错。\n2024.03.15\n早期前往腾讯办理入职，入职比我想象的要简单太多了，基本就是到地方之后领取一下东西就行。吴老师已经帮我申请了工位和办公电脑，早上基本上就是装好电脑之后，和吴老师简单聊了一下现在的工作情况，对接了一下两边的理解。\n目前来看，送显控制那篇论文比较麻烦，因为说实话想要在那么小的动作空间里面做出来可观的多目标优化还是很困难。现在是计划把\nstory\n讲成队列优化，把撕裂这一项融入到帧率里面去（相当于搞成有效帧率），然后变成调节队列时有效帧率与延迟的\ntrade-off。把撕裂这么处理，主要是原先认为上半部分的撕裂可以忽略，在这个假设下撕裂里面能榨取出来的优化空间就很大，然而现在发现这个假设不成立，撕裂几乎是不可忍受的，也就是说，撕裂里面能够榨取的优化空间不多，不如合并到帧率里面。\n然后第二篇文章是画质感知流控，和黄老师 QARC\n类似，但是要求更严格，因为云游戏场景下不能提前获取下一帧的内容，也不能使用\nRL 模型来做画质评估。现在想做的就是从 decoder\n里面拿到比较有用的消息去做画质感知，然后主动调整码率。然而这个工作，现在连数据集都没开始准备，所以还是得想想办法。\n今天坐班一天实在是太累了，不过想到以后还是能有点产出还是比较有期待感的。\n2024.03.16\n睡到了下午三四点钟才爬起来，下午非常平常地解决掉了软工的一些破事，然后晚上和\nwyx 聊了很多。\n现在突然有感觉有点 out of control\n了，必须赶快投入到工作中去，不能再摸鱼了。\n2024.03.17\n今天下午没有做什么特别的事情，也就是把软工的杂事清理了个七七八八。本来打算继续整理\nTON\n的实验，但是似乎因为畏难情绪和怕麻烦的心理没能做出多少进展，遂出勤。出勤倒是迅速解决了\nTitania，然后把涡状银河研究了个七七八八。\n晚上回来折腾 TON\n的实验，但是看起来还是有一些比较麻烦的点没能弄清楚，折腾来折腾去倒也就四点多了，明天还得去上班，不得不睡觉了。\n虽说今天实际上没什么有意义的成果，但总之我工作的动力还是在逐渐恢复的。现在看来，我工作的动力还真的就和\nmaimai 高度相关，之前卡雷切的时候工作也做不下去，现在 14.6\n一帆风顺工作动力就一直存在。这种正相关性我也无法解释，虽说有点害怕这样的奇妙联系多半会让我工作很不顺畅，但是至少现在没啥大问题，不如就这样吧。\n2024.03.18\n早上去上班，今天大概就是把代码框架调了个七七八八，然后和吴老师讨论了一下怎么把撕裂融入到当前的框架中去，这个实验应该最近会很快赶出来。晚上顺手把\nTON 的实验搞上了服务器，之后便吃了个饭就回来了。\n晚上按照惯例下班出勤，本来想的是随便打打，但是没有想到涡状银河很快就解决掉了。现在\n14.6\n大概剩下的都是一些不研究也没法打的东西，目前的计划是先从歌比较好听的\nyorugao 入手，希望最近能打得下来吧。\n最近还有件事情就是 lcr\n分手了，这件事情从头到尾都有一种我无法言说的不可理喻的感觉，我想去尝试理解，但是仔细想想还是算了，感情的事情终究还是交给他们自己消化吧。\n2024.03.19\n周二上班，今天主要还是把思路理清了一下，跑了一下原先说的撕裂融入到有效帧率之中的代码，也算是验证了撕裂这一侧几乎没有太大的调整空间这件事。目前详细\nlog\n应该都打出来了，周五要和组长和老师讨论，目前应该是有能够汇报的东西，但是还需要一些整理和分析。\n晚上继续出勤，但是新奥的国服 maimai 真的是人太多了，一台机子 10\n个人排卡，我本来下班也就只有三个小时出勤时间，这么搞的话我完全打不了什么东西。但是今天收获还是有的，就是提亚马特感觉快要开悟了，最近可以慢慢打提亚马特，然后其他时间打\nyorugao。此外，在排队的间隙我去打了两三把中二，还是收获了不少 AJ\n的，可能以后打打也不错。\n2024.03.20\n今天上课，没去上班。虽说晚上还是去出勤打了一晚上提亚马特，但是今天工作真的也不少，整理了组会汇报的论文，做了一下课内的作业，其他的一些事也七七八八做了点。\n说实话，由于事情还是比较杂，所以晚上通宵到了早八点，正巧赶上日本那边更新了\nbuddies plus，蹲了一小段时间 ysk 直播就睡了。buddies plus\n我以为会有什么很大的更新，但是这次看下来还是小修小补，不知道下一个版本会有什么样的动作。\n今天除了做事就是打提亚马特，明天再来折腾 TON\n实验、周五要讲的数据分析啥的吧。\n2024.03.21\n周四说实话还是混组会为主，不过还好，这周的组会简单讲了一下 AUGUR\n的论文也就过去了，另外就是贾老师催了一下\nTON，不过我还是把明天混过去再来考虑这些吧。\n晚上把实验挂上去之后就出勤打提亚马特，不太顺利地鸟加了之后很快退勤回去和学长去开会了。今天也大概是没有什么其他要说的工作进展的。\n2024.03.22\n今天比较低气压，原因很简单，被学长小训了一顿，虽然也算是意料之中。大概就是我在这个项目里面表现得兴趣平平，没有什么主观能动性。其实这个我算是早就有预备了，因为这个项目确实我一直没有能够找到什么头绪，然后想要去分析一点东西也不知道从哪里下手，加上我卡住的时候就会想出勤释放自己。不过被训了也算是好事，至少这些东西摊开来说了之后，也就没什么大不了的，不过之后得好好强迫自己动脑子思考了。\n项目具体来说的话今天还是弄明白了不少东西的，首先就是撕裂上几乎不太可能能压榨出什么有用的东西。中部撕裂不能允许，顶部撕裂即使全都解放了也很难在里面压榨出帧率和延迟优化。后续做了点\nlog 分析，帧率优化不动倒是有一些依据，毕竟 buffer\n上限不动的话很难让有效帧数提升，但是延迟优化不动是有一些其他原因的。大概可以理解为如果说出现了状态切换导致队列积累，很有可能会在明明可以释放掉队列的地方持续导致延迟，所以说应当加入一些主动丢帧的策略来找延迟的低点。\n总之周末现在得去整理结果和尝试做一下主动丢帧模拟，还是强迫自己工作比较好。\n2024.03.23\n今天周六，例行的摸鱼日子，出了一天勤，拿下了\nYorugao，练习了一下鬼叫，手感不错，回来就早睡了。\n摸鱼的日子，还是比较舒服的。\n但是随着春天来到，最近心里那种莫名的忧郁感又开始浮现了，今天听了一整天的《下弦之月》，又开始怀念起一年前的五月，乃至不堪回首的两年前、三年前的五月。cmh\n似乎计划五一前往日本，其实我也挺想去的，但我也只是想去而已，说白了目的地并不重要，我只是很想做点什么和当下无关的事情，有种想要挣脱一些束缚的冲动。当然，另一件让我很尴尬，或者更确切地称之为\nawkward 的事情是，我并不是很想一个人去，但是我却始终不知道邀请谁，打 mai\n的朋友固然关系很好，但是我一直不想和他们叙述心底这些奇了八怪的想法，东方群友？迅哥哥？Idol9？都不太适合，或许这些情感就该让我自己在漫天飞舞的花瓣中自己消化吧。\nなあ、今年もさ、桜が散ってしまうんだ。夢みたいに踊る桃色に騙されてしまいそうだ。\n《坠入地狱》也已经听了快两三年了，每到春天的时候，这句话，还是很戳我，然后，就开始莫名其妙地，郁闷。\n2024.03.24\n周日，做了一整天的工作，整理了一下数据和思路，结果发现完全没能找到什么有用的结果。\n最近心情一直比较低谷，也不知道什么时候才能重拾工作热情。\n2024.03.25\n周一去坐班，上午先和组长开会讨论了一些实现细节，下午本来想速战速决某些实验的，但实际是下午开始严重坐骨酸痛，最终只是把一些杂事处理了一下，然后就去出勤了。\n晚上实在是乏善可陈，只能说还是得赶快赶上工作。\n2024.03.26\n今天决定翘班，但说是翘班，只不过是打算今天不上班明天补上而已。上午的软工线下辅导，说实话实在是有点不对味，相比较于之前能有一个完整的教室和时间段，在课上嘈杂的环境中尝试教学，说实话真的收效甚微，最后我也算是放弃了，混过去之后就开始做一些自己的事情。\n下午出勤，速速解决掉削除鬼叫之后随手开了 End\nTime，本来只是想试试内屏会怎么样，结果直接飞上\n100.48，后面又打了几把却一直没能复现当时完美的尾杀发挥。之后大概练了练图灵和\nAMABIE 也就退勤了，14.6 剩下的果然一点都不好惹。\n晚上回来就是做事了，现在就是希望在 maimai\n能稳步推进的时候工作也能有条不紊的进行。\n2024.03.27\n上班，然后做事，然后下班，然后出勤。之后就发现今天交的近世代数作业没做完，赶快回来补上。\n很郁闷，因为工作我一直不知道做的算好还是坏，也不知道未来到底是个什么样，这个博士读得一点没有底气。不过感觉，之前本科第一年的时候我也差不多是这么个样子，完全不知道自己应该去做些什么，然而当时大一的暑假还算是勇敢地拓宽了一下自己，但是博一目前来看好像还没有这样的契机。\n明天组会取消了，正好去打理一下自己吧。\n2024.03.28\n今天起来之后折腾了一下胡子和头发，洗了一波衣服之后就去出勤了，今天虽然最初是打皇冠，但是最终还是没能够拿下，最后就变成了几个人在打水神\n2 接力。\n说实话，最近总有一种游离在失控边缘的感觉，总觉得应该去做些什么，但是只是止步于内耗，一直迈不出去任何有意义的一步。完全不知道怎么办，要不和学长再聊聊吧。\n2024.03.29\n不知道干啥的周五，似乎上班上到一半就去上地打 mai\n了，最近又开始大断网，简单混了个真三段之后就走了。\n晚上是涵涵的海底捞和 KTV，比较普通，没啥值得记录的。\n2024.03.30\n没啥安排，不知道干啥，睡到很晚，然后晚上和 wyx 去探店了一下 LUSH\n汉堡。\n不得不说他家汉堡虽说不算惊艳，但确实算是个中上，给料不算特别足，但是肉饼的油脂香气还是相当不错的。另外我还斥巨资买了份他们家的牛排尝了一下，怎么说呢，可能是吃过比较优质的牛肉之后就很难满足于这种普通的牛排了吧。不过最让我难受的是，他们家的甜品居然是完全的美式甜品，我点了一份巧克力冰淇凌蛋糕，我本来想当作闲聊时搭配的小吃的，结果上来一份覆盖有一层生奶油，一层一厘米厚\nNutella\n巧克力酱，底下是浸泡过糖水的黄油巧克力饼干的巧克力冰淇凌，中间的冰淇凌多半还是高糖。最终，这份甜品我们两人都没吃的下去，只得放弃。\n晚上散步消食，和 wyx 聊了不少，然后也就回来睡觉了。\n2024.03.31\n今天睡得很晚才起，本来其实是打算去工作一会的，结果空调和我说他也去惠多港了，我想了想三个人一起出勤确实有点意思，所以最终还是去出勤了。出勤本身实际上没啥好说的，最近状态差的实在离谱，AMABIE\n随便打了打没有手感，皇冠也是，最后反倒是因为高强度出勤拉伤了左臂，这下正好有理由淡坑了。\n最近没有做什么有效的事情，但是心里想了很多事情。首先是 TON\n实验现在看起来已经主体完工了，开始进入服务器报销阶段，不过阿里云 2\n号才会有报账，到那个时候再来研究，五千块钱都是我垫的，还是得搞回来。之后是有关钱的事情，目前收入其实相当高了，这导致我实际上有点花钱大手大脚的，整个三月估计吃喝玩乐花去了七千多，所以一方面是理财一方面是控制开销，我决定以后发薪后就存定期，然后活期只留大概五千上下使用。然后是\nmaimai，最近我一直有点想慢慢退坑，或者至少是淡坑，因为 14.6\n剩下的那三个实在是太需要抽奖和练习，14+\n还是完全不想动，不过作为替代，确实得找一些有趣的事情做做，目前想的是重启日语自学手册。最后是赴日旅行的一些事，目前计划了给\nwyx 和一览带一些谷子，以及计划去面基\nysk，然后已经买好了机票，预计找个时间和助教说一下就行，其他的就等到四月再说了。\n2024.04.01\n今天有些不想去公司，于是就直接去了 FIT\n楼，然而一整天也没做出来什么有意义的事情。\n晚上和 yuki\n约了打台球，好久没打还有点手生，尝试复健了一下之后好歹赢了两三把。打完台球吃了个饭，回去就开始刷手机摆烂，想到第二天要去软工课堂就早早睡觉了。\n2024.04.02\n先是早起去了软工课堂，这一周大概就需要开始验收小朋友的功能了。我这边似乎进度还是快于平均的，几乎每一组都基本完成了用户管理功能，并且大概已经能看出来项目的基本框架。不过\nyfgg 和 lambda\n那边似乎就不太乐观，他们那几个组加起来一共验收了一个功能点。\n折腾完软工就坐办公室去了，主要成果就是把之前尾部数据给调好了，现在线上所有的算法都已经可以正常运行，后面离线最优这件事情应该就可以准备收尾了。\n2024.04.03\n上完课就出勤，但是今天解决了 AMABIE，十分满意。\n最近还是有些困顿的，学长去休年假了之后我就开始有点不知道做些什么。简单来说，我似乎确实和吴老师想的一样，一直没有能够把这个项目当成自己的事情，一直没能做到花时间去思考和盘问，只是不断地\nfollow\ninstruction。然而我也实在是不知道怎么在这上面体现出自己的思想，我每每这么去做尝试，总是很快遇到思维枯竭的感觉，然后就被更速食、方便的，诸如\nmaimai\n或者日语之类的成就感夺走思维。这种感觉就像是，我被包裹在橡胶球之中，我尝试用力挣脱，但是很快就衰弱下来，始终无法取得有意义的结果，自己还十分劳累。\n明天开始就是清明假期了，我也不知道应该怎么做了，是该自己规划一下\ntimeline 了，至少第二篇论文，一定得有自己的想法。\n2024.04.04\n腾讯的工资到账了，今天清明假期打了一整天的牌然后晚上去了\nKTV，没啥好说的非常单纯的快乐罢了。\n明天，应该要开始 PUA 自己干活了。\n2024.04.05\n本来是在干活的，结果还是去了上地吃了顿萨莉亚，然后摆了一整天。\n不过今天好歹是把一些 TODO 给列出来了，说不定能搞定一些东西。\n2024.04.06\n名义上是在干活，但是实际上就是在宿舍无所事事。\n清明假期的最后一天，然而我每天的状况就是早上起来雄心壮志决定好好工作，蹲在宿舍工作一会就开始刷手机摆烂，混到饭点就去吃个饭，如果实在忍不住就开\nAstroDX 打两把，晚上更是熬到洗澡点之后什么都不干。\n一直不太清楚这是不是一种慢性死亡，因为我一点产出都没有，甚至都没去搞点娱乐活动。\n2024.04.07\n今天原本应该是要去 V+ 群 K\n的，然而实在是不是很想跑去国贸了，于是下午简单在宿舍里面把工作做掉之后就去晚勤。晚勤最一开始是打算打图灵的，虽说图灵有点开窍，能够\n50% 的概率鸟，然而容错低、节奏怪还是太难控制，遂放弃。最近 14.6\n进度不顺，于是开始打算 14.7 开荒，今晚试了一下 BBB，结果一不小心打到了\n100.44，那么最近的目标就这样得到了确立。\n晚上回来之后简单统计了一下最近的花销，目前这么看一个月大概要用掉四千上下，感觉还算是能力范围之内，又有了一种\nunder control 的感觉。\n2024.04.08\n我又想暂且停止日记了，最近生活在工作上游戏上都没有进展，就先这样吧。\n","categories":["【生活记录】日记"]},{"title":"古日语语法笔记","url":"/2023/05/26/ancient-ja/","content":"本章主要介绍古代日语的基本语法，并据此分析现代日语中的古日语语法残余。\n\n历史假名遣\n历史假名遣指的是在现代日语推行假名表音化（即假名严格和发音一一对应）之前所使用的假名表记法。相较于现代假名遣的五十音图，历史假名遣的五十音图的や行和わ行有所不同，其不同之处标注在下表：\n\n\n\n\n\n\n\n\n\n\n\n\nあ段\nい段\nう段\nえ段\nお段\n\n\n\n\nや行「現代仮名遣い」\nや ヤ\n―\nゆ ユ\n―\nよ ヨ\n\n\nや行「歴史仮名遣い」\nや ヤ\nい イ\nゆ ユ\nえ エ\nよ ヨ\n\n\nわ行「現代仮名遣い」\nわ ワ\n―\n―\n―\nを ヲ\n\n\nわ行「歴史仮名遣い」\nわ ワ\nゐ ヰ\nう ウ\nゑ ヱ\nを ヲ\n\n\n\n由于历史假名遣并不一定满足假名和读音一一严格对应，所以仅使用五十音图是不能完全确定使用历史假名遣书写的文句的。但实际上，历史假名遣中需要注意的读音规则基本上仅有下述条目：\n\nは行假名不在词头的时候，发音应当为「ワ・イ・ウ・エ・オ」。这是因为著名的语音流变ハ行转呼，其基本含义为不在词头的は行假名在语音流变过程中辅音丢失（あ段则是辅音转变），而书写表记并未随着语音流变更改。例如写作「いはひ」实则读作「イワイ」，写作「いへ」实则读作「イエ」，但写作「はな」依然读作「ハナ」。\n元音重叠组合「あう・いう・えう・おう」的发音应当为「オー・ユー・ヨー・オー」。例如写作「あうむ」实则读作「オーム」，写作「いうなり」实则读作「ユーナリ」，写作「えうじ」实则读作「ヨージ」，写作「おうな」实则读作「オーナ」。\n上述两个规则可以联合使用。如写作「てふ」，首先根据第一条规则得到ハ行转呼后其发音为「てう」，再根据第二条元音重叠规则即可得到其实际的发音为「テヨー」，而这个音在现代的表记法中应当使用拗音标记，即「チョー」。同理，写作「けふ」实则读作「キョー」。\n「ゐ・ゑ・を」的发音分别为「イ・エ・オ」。这也是ハ行转呼中这三个假名丢失辅音的结果。例如写作「ゐる」实则读作「イル」，写作「こゑ」实则读作「コエ」，写作「をる」实则读作「オル」。\n「ぢ・づ」的发音分别为「ジ・ズ」。\n部分「む」的发音为「ン」，包括不在词头的「む」、助动词「む、らむ」以及助词「なむ」中的「む」。例如写作「ひむがし」实则读作「ヒンガシ」，写作「いくらむ」实则读作「イクラン」。\n\n古日语的动词分类与活用\n古日语的动词分为五个正格类型和四个变格类型。\n\n四段动词。古语的四段动词基本上演化成为了现代的五段动词。四段动词合法的词尾包括「く、ぐ、ふ、つ、る、ぶ、む、す」。这里与现代语相比缺失「ぬ」，这是因为古语中「死ぬ」并非四段动词。\n上一段动词。古语的上一段动词基本上演化成为了现代的上一段动词。\n下一段动词。这类动词包括「蹴る」，该动词演化为现代的五段动词。\n上二段动词。古语的上二段动词基本上通过将词尾固化为イ段后添加新词尾「る」的方式演化成为了现代的上一段动词。\n下二段动词。古语的下二段动词基本上通过将词尾固化为エ段后添加新词尾「る」的方式演化成为了现代的下一段动词。\nラ变动词。这类动词包括「あり、をり、はべり、いまそかり」，其中「あり、をり」演化为现代的五段动词，而「はべり、いまそかり」被废弃不使用。\nナ变动词。这类动词包括「死ぬ、往ぬ」，其中「死ぬ」演化为现代的五段动词，而「往ぬ」被废弃不使用。\nカ变动词。这类动词包括「く」，该动词演化为现代的カ变动词。\nサ变动词。这类动词包括「す、おはす」，其中「す」演化为现代的サ变动词，而「おはす」被废弃不使用。\n\n这些动词的六种活用形式如下所示：\n\n\n\n\n\n\n\n\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nカ四\n書か\n書き\n書く\n書く\n書け\n書け\n\n\nガ四\n泳が\n泳ぎ\n泳ぐ\n泳ぐ\n泳げ\n泳げ\n\n\nサ四\n話さ\n話し\n話す\n話す\n話せ\n話せ\n\n\nタ四\n立た\n立ち\n立つ\n立つ\n立て\n立て\n\n\nハ四\n歌は\n歌ひ\n歌ふ\n歌ふ\n歌へ\n歌へ\n\n\nバ四\n飛ば\n飛び\n飛ぶ\n飛ぶ\n飛べ\n飛べ\n\n\nマ四\n読ま\n読み\n読む\n読む\n読め\n読め\n\n\nラ四\n降ら\n降り\n降る\n降る\n降れ\n降れ\n\n\nカ上一\n@ 着 き\n@ 着 き\n着る\n着る\n着れ\n着よ\n\n\nナ上一\n@ 似 に\n@ 似 に\n似る\n似る\n似れ\n似よ\n\n\nハ上一\n@ 干 ひ\n@ 干 ひ\n干る\n干る\n干れ\n干よ\n\n\nマ上一\n@ 見 み\n@ 見 み\n見る\n見る\n見れ\n見よ\n\n\nヤ上一\n@ 射 い\n@ 射 い\n射る\n射る\n射れ\n射よ\n\n\nワ上一\n@ 居 ゐ\n@ 居 ゐ\n居る\n居る\n居れ\n居よ\n\n\n下一\n@ 蹴 け\n@ 蹴 け\n蹴る\n蹴る\n蹴れ\n蹴よ\n\n\nカ上二\n生き\n生き\n生く\n生くる\n生くれ\n生きよ\n\n\nガ上二\n過ぎ\n過ぎ\n過ぐ\n過ぐる\n過ぐれ\n過ぎよ\n\n\nタ上二\n落ち\n落ち\n落つ\n落つる\n落つれ\n落ちよ\n\n\nダ上二\n閉ぢ\n閉ぢ\n閉づ\n閉づる\n閉づれ\n閉ぢよ\n\n\nハ上二\n恋ひ\n恋ひ\n恋ふ\n恋ふる\n恋ふれ\n恋ひよ\n\n\nバ上二\n詫び\n詫び\n詫ぶ\n詫ぶる\n詫ぶれ\n詫びよ\n\n\nマ上二\n恨み\n恨み\n恨む\n恨むる\n恨むれ\n恨みよ\n\n\nヤ上二\n老い\n老い\n老ゆ\n老ゆる\n老ゆれ\n老いよ\n\n\nラ上二\n懲り\n懲り\n懲る\n懲るる\n懲るれ\n懲りよ\n\n\nカ下二\n受け\n受け\n受く\n受くる\n受くれ\n受けよ\n\n\nガ下二\n告げ\n告げ\n告ぐ\n告ぐる\n告ぐれ\n告げよ\n\n\nタ下二\n捨て\n捨て\n捨つ\n捨つる\n捨つれ\n捨てよ\n\n\nダ下二\n出で\n出で\n出づ\n出づる\n出づれ\n出でよ\n\n\nハ下二\n答へ\n答へ\n答ふ\n答ふる\n答ふれ\n答へよ\n\n\nバ下二\n並べ\n並べ\n並ぶ\n並ぶる\n並ぶれ\n並べよ\n\n\nサ下二\n失せ\n失せ\n失す\n失する\n失すれ\n失せよ\n\n\nザ下二\n混ぜ\n混ぜ\n混ず\n混ずる\n混ずれ\n混ぜよ\n\n\nマ下二\n求め\n求め\n求む\n求むる\n求むれ\n求めよ\n\n\nヤ下二\n見え\n見え\n見ゆ\n見ゆる\n見ゆれ\n見えよ\n\n\nラ下二\n入れ\n入れ\n入る\n入るる\n入るれ\n入れよ\n\n\nワ下二\n植ゑ\n植ゑ\n植う\n植うる\n植うれ\n植ゑよ\n\n\nア下二「単字」\n@ 得 え\n@ 得 え\n@ 得 う\n@ 得 うる\n@ 得 うれ\n@ 得 えよ\n\n\nナ下二「単字」\n@ 寝 ね\n@ 寝 ね\n@ 寝 ぬ\n@ 寝 ぬる\n@ 寝 ぬれ\n@ 寝 ねよ\n\n\nハ下二「単字」\n@ 経 へ\n@ 経 へ\n@ 経 ふ\n@ 経 ふる\n@ 経 ふれ\n@ 経 へよ\n\n\nラ変\n有ら\n有り\n有り\n有る\n有れ\n有れ\n\n\nナ変\n死な\n死に\n死ぬ\n死ぬる\n死ぬれ\n死ね\n\n\nサ変\nせ\nし\nす\nする\nすれ\nせよ\n\n\nカ変\nこ\nき\nく\nくる\nくれ\nこ・こよ\n\n\n\n和现代语对比，可以基本归纳出下述动词演变规律：\n\n古语的四段动词几乎完全演化为现代语五段动词，且除了某一行假名标记发生变动（即「ふ」转写为「う」），其余保持规则。当然，该规则存在例外，类似「借る、足る、飽く」等四段动词则演化为了现代的上一段动词「借りる、足りる、飽きる」。\n古语的二段动词在现代语之中的残留痕迹较为明显。特征是除去词干外，有类似「きる、ける」的以イ段或者エ段假名加上「る」结尾的双假名词尾。这里的イ段或者エ段假名是古语残留的词尾，但是已经固化，而「る」则是现代语的词尾。另外，由于古语下一段动词完全合并入现代语五段动词，所以现代的下一段动词几乎全部都是古语下二段动词的演变产物。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\n文語\n捨て\n捨て\n捨つ\n捨つる\n捨つれ\n捨てよ\n\n\n現代語\n捨て\n捨て\n捨てる\n捨てる\n捨てれ\n捨てろ・捨てよ\n\n\n\n但是在合流过程中，三个单音节的下二段动词「う、ぬ、ふ」演化路径有差别。「ぬ、ふ」类似一般的下二段动词，演化为现代的下一段动词「寝る、経る」。但是「う」则一定程度上保留了下二段动词的痕迹，演化出了两个动词「うる、える」，汉字表记均为「得る」。一般而言，使用较多的是「える」读音，但是「うる」音依然可能会出现，这也就是一种演化残留。\n当然，该规则存在例外，类似「恨む」等上二段动词则演化为了现代的五段动词「恨む」。\n\n古语的上一段动词几乎完全演化为现代的上一段动词，且几乎没有发生活用规则变动。而古语唯一的下一段动词则直接变为现代的五段动词。\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\n文語\nき\nき\nきる\nきる\nきれ\nきよ\n\n\n現代語\nき\nき\nきる\nきる\nきれ\nきろ・きよ\n\n\n\n可以发现现代语中结构简单的上一段动词大部分为古语上一段动词的残余。事实上古语中的上一段动词也极少，大约仅有二十个左右。\n当然，该规则存在例外，古语上一段动词「射る」演化为了现代上一段动词「射る」，但是该动词在部分条件下出现了五段动词的活用形式，如「射った」。\n\n古语的ラ变动词以及ナ变动词除了部分不常用词语外完全合并进现代语五段动词，而カ变动词以及サ变动词除了部分不常用词语外在现代语中保持变格活用。\n\n此外补充一个常用定义，即ラ变型。ラ变型指的是与ラ变动词活用方式一致的一类词语，包括形容词的辅助活用和部分助动词。\n古日语的形容词分类与活用\n古语形容词分为两类，即ク活用形容词和シク活用形容词，活用规则见下。\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nク「主」\n―\n無く\n無し\n無き\n無けれ\n―\n\n\nク「補助」\n無から\n無かり\n―\n無かる\n―\n無かれ\n\n\nシク「主」\n―\n美しく\n美し\n美しき\n美しけれ\n―\n\n\nシク「補助」\n美しから\n美しかり\n―\n美しかる\n―\n美しかれ\n\n\n\n这里的辅助活用则是一种特殊的使用方法，也就是将形容词连用形「○く」加上「あり」后用「あり」的活用来弥补原先形容词规则中缺失的未然形和命令形。在演变过程中，「○くあり」逐渐连读为「○かり」，从而可以认为这是形容词的一种特殊活用，不将其认为是「あり」的活用。由于形容词辅助活用继承自ラ变动词的活用，所以辅助活用的形容词是一种ラ变型。\n辅助活用的主要使用场景为接续各类助动词以及利用命令形表达命令，其余场景下形容词多采用主活用。当然，该规则存在例外，形容词接续打消接续助词「で」的时候使用辅助活用，而接续断定助动词「なり」的时候使用主活用。\n古语形容词演变为现代语形容词的时候，两种活用合流，并且黏性词尾从「し」变为「い」。具体演变为，ク活用形容词直接将「し」变为「い」，而シク活用形容词直接加上新词尾「い」。而各种活用中，加「あり」词尾产生的活用逐步消失或进一步演变，而现代语中形容词规则占主流的依然是形容词的主活用规则。对比表如下。\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nク「主」\n―\n無く\n無し\n無き\n無けれ\n―\n\n\nク「補助」\n無から\n無かり\n―\n無かる\n―\n無かれ\n\n\n現代\n無かろ\n無く・無かっ\n無い\n無い\n無けれ\n―\n\n\nシク「主」\n―\n美しく\n美し\n美しき\n美しけれ\n―\n\n\nシク「補助」\n美しから\n美しかり\n―\n美しかる\n―\n美しかれ\n\n\n現代\n美しかろ\n美しく・美しかっ\n美しい\n美しい\n美しけれ\n―\n\n\n\n这种演变解释了一个语言现象，即现代语中有大量的「しい」结尾的形容词，这些形容词几乎全部是古语シク活用形容词演变的遗留。另外，现代语的形容词依然保留了部分古语用法，比如以「し」作词尾的形容词依然存留于口语中，比如「なし、よし」等惯用语。\n古日语的形容动词分类与活用\n古语形容动词分为两类，即ナリ活用形容词和タリ活用形容词，活用规则见下。\n\n\n\n\n\n\n\n\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nナリ\n静かなら\n静かなり・静かに\n静かなり\n静かなる\n静かなれ\n静かなれ\n\n\nタリ\n平然たら\n平然たり・平然と\n平然たり\n平然たる\n平然たれ\n平然たれ\n\n\n\n这里所有的活用和ラ变动词很类似。有一种看法是，形容动词活用本身就是词干连用形接续「あり」后用「あり」的活用表达的。而和形容词辅助活用发生连读类似，「○にあり・○とあり」随后连读为「○なり・○たり」，从而形成了形容动词活用规则。基于此，由于形容动词活用继承自ラ变动词的活用，所以形容动词是一种ラ变型。\n一般而言，形容动词接续一般动词、接续助词「て、して」的时候使用「○に・○と」连用形，其余场景下使用「○なり・○たり」连用形。\n古语形容动词演变为现代语形容词的时候，两种活用并未合流，并且活用词尾发生了较大的变化。\n\n\n\n\n\n\n\n\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nナリ\n静かなら\n静かなり・静かに\n静かなり\n静かなる\n静かなれ\n静かなれ\n\n\n現代ダ\n静かだろ\n静かで・静かだっ・静かに\n静かだ\n静かな\n静かなら\n―\n\n\nタリ\n平然たら\n平然たり・平然と\n平然たり\n平然たる\n平然たれ\n平然たれ\n\n\n現代タルト\n―\n平然と\n―\n平然たる\n―\n―\n\n\n\n目前来看，形容动词的演变是相当不规则的。\n目前我正使用的古日语课程之中，是这样介绍ナリ活用形容动词演变的。\n首先是「○で」连用形的产生。在使用ナリ活用形容动词修饰的时候常常需要使用连用形接续助词「て」，也就是ナリ活用形容动词常常具有词尾「○にて」。最后「に」音脱落并发生浊化，将助词「て」吸收产生现代语第一连用形「○で」。\n室町时代，ナリ活用形容动词已经出现了尾音「る」脱落的现象，即连体形已经逐步以「な」音结尾，并且在部分情况下，终止形也开始使用「な」结尾的形式。另一方面，新产生的连用形「○で」接续动词「ある」产生了新的连体和终止形「○である」，这种形式之后又发生了尾音「る」脱落，演变为「○であ」。而这个形式在关西演化为「○ぢゃ」，在关东演化为「○だ」。此时这些形式均处于混用状态，最后「○だ」使用频率压过其余形式变为现代语的终止形，「○な」则压过其他形式变为现代语的连体形。\n上述演化中的连体（终止）形「○ぢゃ」开始用于接续「う、た」两个助词，分别表示意识和过去，这分别是未然形和连用形的作用。也就是说未然形接续「う」开始出现「○ぢゃらう」的形式，连用形接续「た」开始出现「○ぢゃった」的形式。随后「ぢゃら」和「ぢゃっ」音便为「だろ」和「だっ」，形成了现代语的未然形和第二连用形。\n现代语假定形「○なら」则是由古语已然形「○なれ」接续助词「ば」得到「○なれば」后约音产生。\n命令形则在演化的时候由于可以使用动词命令形代替表示而逐步丢失。\n\n形容词和形容动词的词干指的是，形容词删去活用词尾「し」，形容动词删去活用词尾「なり・たり」之后剩余的部分。词干具有以下常见的使用场景：\n\n与感叹词「あな」和间投助词「や」形成「あな、○○や」的句式，这里间投助词可省略。如「あな、をさなや」以及「あな、きよら」。该句式用于形成感叹，语意基本类似现代语「ああ、○○だなあ」。\n接续格助词「の」形成连体修饰词用于修饰体言。如「@ 心憂 こころうのことや」以及「をこのしれもの」。\n（仅限形容词词干）与体言「××」、间投助词「を」和接尾词「み」形成「××を○○み」的句式，这里间投助词可省略。该句式常见于和歌。如「瀬をはやみ」。该句式语意基本类似现代语「××が○○なので」。\n\n\n用言的音便准则\n四段动词、ラ变动词与ナ变动词的连用形在接续虚词「て、たり」的时候会发生音便，其音便的准则如下表：\n\n\n\n\n元の形\n音便形\n\n\n\n\n動カ四\n書きて\n書いて\n\n\n動ガ四\n急ぎて\n急いで\n\n\n動ハ四\n思ひて\n思うて\n\n\n動マ四\n頼みて\n頼うで\n\n\n動バ四\n飛びて\n飛んで\n\n\n動タ四\n立ちて\n立つて\n\n\n動ナ変\n死にて\n死んで\n\n\n動ラ変\nありて\nあつて\n\n\n\n古语中的促音标记「つ」依然使用大字书写，但是读音依然是促音。\n另外，形容词主活用的连体形在接续体言或者相关虚词时也会发生音便，具体形式为活用词尾的「き」辅音脱落为「い」。其音便的准则如下表：\n\n\n\n\n元の形\n音便形\n\n\n\n\n形ク\n強き人\n強い人\n\n\n形シク\n美しき人\n美しい人\n\n\n\n而主活用的连用形在接续用言或者相关虚词时也会发生音变，具体形式为活用词尾的「く」辅音脱落为「う」。其音便的准则如下表：\n\n\n\n\n元の形\n音便形\n\n\n\n\n形ク\n強くて\n強うて\n\n\n形シク\n美しくて\n美しうて（読み：美しゅうて）\n\n\n\nラ变型在接续助动词「なり、めり、べし」时发生拨音便。其音便的准则如下表，需要注意的是，有时假名「ん」会略去：\n\n\n\n\n元の形\n音便形\n\n\n\n\n動ラ変\nあるめり\nあめり・あんめり\n\n\n形シク\n美しかるべし\n美しかべし・美しかんべし\n\n\n形動ナリ\n静かなるべし\n静かなべし・静かなんべし\n\n\n助動\nなるなり\nななり・なんなり\n\n\n\n系结法则\n系结法则（日语：係り結びの法則）是古日语中独有，现代已经消亡的语法。系结法则表述为，句中存在的特殊的系助词会导致句末的活用词语须使用特殊的活用形式而非一般用于结句的终止形。常见的系助词包括「ぞ、なむ、や、か、こそ」。观察下述例句：\n\nいづれの山か天に近き。\n\n可以注意到，由于句中出现了系助词「か」，句末的形容词未使用一般的终止形结句，而是使用了连体形。\n从句末使用的活用形式角度分类，上述系助词分为：\n\n（要求句末是连体形）ぞ、なむ、か、や\n（要求句末是已然形）こそ\n\n其中，「ぞ、なむ、こそ」用于表示强调语义，一般不译出，例如下述句：\n\n梅ぞ咲かむ。 →\n梅が咲くだろう。\n梅なむ咲かむ。 →\n梅が咲くだろう。\n梅こそ咲かめ。 →\n梅が咲くだろう。\n\n另外，「こそ」多有逆接语气，可以译出为现代语的逆接助词，例如下述句：\n\n中垣こそあれ、一つ家のやうなり。 →\n中垣があるけれど、…。\n\n「か、や」用于表示疑问、反语语义，具体表示其中何种语义则根据上下文判定，例如下述句：\n\n梅や咲かむ。 →\n（疑問）梅が咲くだろうか。\n梅いかでか咲かむ。 →\n（反語）梅がどうして咲くだろうか、いや咲かないだろう。\n\n此外需要注意系助词和其他助词的连用。这些连用包括「もぞ、もこそ、やは、かは」。\n其中「もぞ、もこそ」常常表达现代语「〜すると困る、〜すると大変だ」的语义：\n\n門よくさしてよ。雨もぞ降る。 →\n…。雨が降ったら大変だ。\nなほ、あやまりもこそあれと、あやしむ人あり。 →\n…、誤りがあったら困る、…。\n\n而「やは、かは」的连用则代表该系助词表达反语语义的概率较高：\n\n（この人より）まさるべきやはある。\n\n古日语助动词\n被动、可能、自发、尊敬助动词「る・らる」\n该助动词遵从下二段活用，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nる\nれ\nれ\nる\nるる\nるれ\nれよ\n\n\nらる\nられ\nられ\nらる\nらるる\nらるれ\nられよ\n\n\n\n接续规则为：\n\n四段、ラ变、ナ变动词使用未然形接续「る」\n此外的动词使用未然形「らる」\n\n该助动词基本与现代助动词「れる・られる」语义近似，可以观察下述例句。\n首先是自发语义，其经常用于「思ふ、思ひ出づ、泣く」等动词之后。该语义多译作「自然と〜れる・自然と〜られる」：\n\n都のみぞ思ひやらるる。 →\n都のことばかりが自然と思いやられる。\n住み慣れしふるさと、限りなく思ひ出でらる。 →\n住み慣れた元の家が、とても自然と思い出される。\n\n这里第一句还体现了「ぞ」的系结法则。\n之后是被动语义。该语义多译作「〜れる・〜られる」：\n\n人に笑はれけり。 → 人に笑われた。\nありがたきもの、@ 舅 しゅうとにほめらるる@ 婿 むこ。\n→ めったいにないもの、舅にほめられる婿。\n\n然后是可能语义。该语义多译作「〜れる・〜られる」：\n\n（横になっても）つゆまどろまれず。 →\nまったく眠ることができない。\nさらにこそ信ぜられね。 →\nまったく信じることができない。\n\n这里第二句还体现了「こそ」的系结法则，「ね」是助动词「ず」的已然形。\n最后是尊敬语义，需要注意的是在结构「れ給ふ、られ給ふ」中该助动词往往不是尊敬语义。该语义多译作「〜れる・〜られる」：\n\n（大将が）福原へこそかへられけれ。 →\n福原へお帰りになった。\n（光源氏が）絵ども集めらる。 →\n絵など集めなさる。\n\n使役、尊敬助动词「す・さす、しむ」\n这两个助动词均遵从下二段活用，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nす\nせ\nせ\nす\nする\nすれ\nせよ\n\n\nさす\nさせ\nさせ\nさす\nさする\nさすれ\nさせよ\n\n\nしむ\nしめ\nしめ\nしむ\nしむる\nしむれ\nしめよ\n\n\n\n接续规则为：\n\n四段、ラ变、ナ变动词使用未然形接续「す」\n此外的动词使用未然形「さす」\n所有具有活用的词语均使用未然形接续「しむ」\n\n「す・さす」演化为现代助动词「せる・させる」的时候丢失了尊敬语义（仅保留在使役被动的最高敬意用法中，该用法几乎被视为过时），使役语义则几乎一致。「しむ」虽然演化为「しめる」，然而由于使用范围过于狭窄，现代语不将其作为独立的助动词考虑。\n首先考虑使役语义。该语义多译作「〜せる・〜させる」：\n\n（かぐや姫を）妻のおうなに預けて@ 養 やしなはす。\n→ 妻のおばあさんに預けて養わせる。\n（女房に）@ 御格子 みこうしをあげさす。\n→ 御格子を上げさせる。\n人を喜ばしむ。 → 人を喜ばせる。\n\n然后是尊敬语义，一般而言表尊敬语义时，会配合「給ふ、おはす、おはします」等表尊敬的词语同时使用。该语义多译作「〜なさる、お〜になる」：\n\n（帝が）いみじう驚かせ給ふ。 →\nひどく驚きなさる。\n（中宮が）出でさせ給ふ。 →\n出かけなさる。\n（藤原道真が）作らしめ給ふ詩。 →\n作りなさる漢詩。\n\n当然，与表尊敬的词语连用的时候也有可能不表尊敬，尤其是与尊敬仅仅是常用语义之一的助动词「る・らる」连用的时候。\n\n（道長が）御随身召して遣水をはらはせ給ふ。 →\n…掃除させなさる。\n\n这里虽然和「給ふ」连用，但依然表示使役语义，尊敬的语义仅仅通过「給ふ」表示。这里是因为“打扫”这一行为并不是主语发出的，主语所发出的行为应当是“命令随从”。\n过去助动词「き、けり」\n这两个助动词一个不规则，一个为ラ变型，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nき\nせ\n○\nき\nし\nしか\n○\n\n\nけり\n（けら）\n○\nけり\nける\nけれ\n○\n\n\n\n接续规则为：\n\n所有具有活用的词语均使用连用形接续「き、けり」\nカ变、サ变动词接续「き」时有例外，见下表\n\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nす＋き\n○\n○\nしき\nせし\nせしか\n○\n\n\nく＋き\n○\n○\n○\nきし・こし\nきしか・こしか\n○\n\n\n\n这种不规则是因为如果按照规则的连用形接续，则有可能形成同音连读的「しし、ししか、きき」等词组，故特别允许使用未然形接续以防止这一类现象。\n「き」表达说话人亲身经历的过去。该语义多译作「〜た」：\n\n（鬼が私を）殺さむとしき。 →\n殺そうとした。\n\n此外，「き」的未然形一般仅用于表示反事实假想，一般使用在句型「〜せば〜まし」之中。该语义多译作「〜なら、〜だろうに」：\n\n世の中にたえて桜のなかりせば、春の心はのどけからまし。\n→\nこの世の中にまったく桜というものがなったら、春における人の心は穏やかであるだろうに。\n\n「けり」表达未亲身经历的过去，即一般表示传闻。该语义多译作「〜たそうだ」：\n\nむかし、男ありけり。 →\n昔は男がいたそうだ。\n\n此外，在「〜なりけり」句式中以及和歌等场景下，该助动词还可以表示咏叹语义。该语义多译作「〜だなあ」：\n\n「今宵は十五夜なりけり」と思ひ出づ。 →\n今宵は十五夜であったなあ。\n\n完了、强意、并列助动词「つ、ぬ」\n这两个助动词一个遵从下二段活用，一个为ナ变型，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nつ\nて\nて\nつ\nつる\nつれ\nてよ\n\n\nぬ\nな\nに\nぬ\nぬる\nぬれ\nね\n\n\n\n接续规则为：\n\n所有具有活用的词语均使用连用形接续「つ、ぬ」\n\n这两个助动词常见的助动词连用词组包括：\n\n（完了）つ、ぬ＋（過去）き、けり →\nてき、てけり、にき、にけり（訳：〜た、〜てしまった）\n（強意）つ、ぬ＋（推量）む、べし… →\nなむ、てむ、にけむ、てけむ、ぬらし、つらし\n\n介绍助动词连用词组的目的是用来区分助动词的语义。上述连用词组应该理解为，「つ、ぬ」与表过去的助动词连用时多表示完了，与表推量的助动词连用时多表示强意。\n\n这两个助动词最常用的语义是表示完了。该语义多译作「〜た、〜てしまった」：\n\n秋田、（この子の名前を）なよ竹のかぐや姫とつけつ。\n→ 秋田はなよ竹のかぐや姫とつけた。\n三河の国八橋といふ所に至りぬ。 →\n…というところに着いた。\n（夢を）たのみそめてき。 →\nあてにし始めてしまった。\n逃げ去りにけり。 →\n逃げ去ってしまった。\n\n然后是强意语义。该语义多译作「きっと〜、はやく〜」：\n\n（港に）御舟（私たちは）返してむ。 →\n…早く引き返そう。\n風吹きぬべし。 → 風がきっと吹くだろう。\n\n自镰仓时代以来，这两个助动词逐渐发展出了表示并列的语义。该语义多译作「〜たり、〜たり」：\n\n僧都、（舟に）乗つては降りつ、降りては乗りつ。\n→ 僧都は（舟に）乗っては降りたり、降りては乗ったり。\n（扇が）浮きぬ、沈みぬ。\n→ （扇が）浮いたり、沈んだり。\n\n完了、存续助动词「たり、り」\n这两个助动词均为ラ变型，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nたり\nたら\nたり\nたり\nたる\nたれ\nたれ\n\n\nり\nら\nり\nり\nる\nれ\nれ\n\n\n\n接续规则为：\n\n所有具有活用的词语均使用连用形接续「たり」\n四段动词使用已然形（命令形）接续「り」，サ变动词使用未然形接续「り」\n\n这两个助动词最常用的语义是表示完了。该语义多译作「〜た、〜てしまった」：\n\n（お寺の住職が）もの、酒おこせたり。 →\n…食べ物やお酒を送ってきた。\n（まったく鬼に）会へる者なし。 →\n…会った者はいない。\n\n其次，这两个助动词还可以用于表示存续。该语义多译作「〜ている、〜てある」：\n\n（水辺に）かきつばたいとおもしろく咲きたり。\n→ …おもしろく咲いている。\n何とも思へらず。 → 何とも思っていない。\n\n如果先学过现代日语，类似「会へる人、知れるもの」之类的表达，真的很容易被误认为是可能动词。事实上，可能动词是很晚才成形的语法，中古日语完全没有。所以，这种表达，一定一定注意是助动词「り」的连体形。这个助动词只有一个假名而且还很容易混在动词后面（「き」已经算是守序的了，它的活用形基本都很显眼，「せ、し」什么的），所以千万注意。\n\n推量、意志、适当、劝诱、婉曲、假定助动词「む、むず」\n这两个助动词一个遵从四段活用，一个遵从下二段活用，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nむ\n○\n○\nむ\nむ\nめ\n○\n\n\nむず\n○\n○\nむず\nむずる\nむずれ\n○\n\n\n\n接续规则为：\n\n所有具有活用的词语均使用未然形接续「む、むず」\n\n在主语是第三人称时，这两个助动词多表推量语义。该语义多译作「〜だろう」：\n\n深きゆゑあらむ。 →\n深い理由があるのだろう。\n\n而主语是第一人称时，这两个助动词多表意志语义。该语义多译作「〜たい、〜よう」：\n\nわれこそ死なめ。 → 私が死のう。\n\n主语是第二人称时，这两个助动词则多表适当或者劝诱语义。\n此时这两个助动词常用的句型有「〜なむ（や）、〜てむ（や）、〜こそ〜め」，这里「なむ、てむ」结构中的「な、て」是表示强意语义的助动词「ぬ、つ」。这两个语义多译作「〜するほうがよい、〜たらどうだ、〜してくれないか」：\n\n（あなたは）花を見てこそ帰り給はめ。\n→ 花を見てからお帰りになるほうがよい。\n\n若这两个助动词后接续体言，则多表婉曲语义。婉曲语义是一种用于软化语气的语义，并不影响所叙述事物的本质逻辑，仅仅是调整叙述的语气。该语义多译作「〜ような」：\n\nうれしからむ心地もせず。 →\nうれしいような気持ちもしない。\n\n若这两个助动词后接续助词，则多表示假定语义。\n此时这两个助动词常见的句型有「〜むが、〜むも、〜むは、〜むに、〜むこそ」。该语义多译作「〜としたら」：\n\n寝ざらむもわろかりなむ。 →\n寝ないとしたら、きっと具合が悪いだろう。\n\n现在推量、现在原因推量、现在婉曲、现在传闻助动词「らむ」\n该助动词遵从四段活用，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nらむ\n○\n○\nらむ\nらむ\nらめ\n○\n\n\n\n接续规则为：\n\n除ラ变型外所有具有活用的词语均使用终止形接续「らむ」\nラ变型使用连体形接续「らむ」\n\n该助动词最主要的语义是现在推量，表示对当下无法观察到的事物的推量。该语义多译作「いまごろは〜ているだろう」：\n\n（竜田山を）夜半にや君がひとり越ゆらむ。 →\nこの夜更けにあの人はひとりでいまごろは越えているだろうか。\n\n此外该助动词亦可表示现在原因推量语义。现在原因推量指的是对正在观察的事物或者与自身相关的事物的原因做出推测的语义。这一语义下，助动词「らむ」往往和表示原因的语句联合使用。该语义多译作「〜（ている）のだろう」：\n\n（月に生えているという@ 桂 かつらの木も）もみぢすればや（月も）照りまさるらむ。\n→ 紅葉するので、（月も）ますます照り輝くのだろうか。\n\n这里可能需要对这句话做出点解释。这句话所描述的场景是，说话人正在赏月并给出了自己对“月光如此皎洁”这一当前观测到的事物的原因的推测，即正是因为月亮上的桂树繁茂，月光才如此皎洁。这里表示因果关系的关键词是助词「ば」，因而暗示了助动词「らむ」表示现在原因推量语义。一个可能的现代汉语翻译为“今夜月光如此皎洁，想必是月桂树上枝繁叶茂吧”。\n又得把这句著名的例句拿出来了：\n\n思ひつつ寝ればや人の見えつらむ。\n\n还是注意到表示原因的助词「ば」，所以助动词「らむ」表示现在原因推量语义。另外注意这里的助动词连用，即表示强意的「つ」使用终止形接续助动词「らむ」。\n在「〜ば（や）〜らむ」这一句式中，后半句表示的是现在所观测到的现象，前半句是对这一现象的原因的推测。这一句话中，由于说话人观测到了“最终一定会见到那个人”（表示强意的「つ」在这里译作「きっと」），而说话人对此作出的原因推测是“一边想着那个人一边入睡”。因而这句话可能的现代汉语翻译为“正是因为不停思索着你的事情入睡，才一定能在梦中与你相会”。\n\n与助动词「む、むず」类似，在后接体言的时候，助动词「らむ」多表示现在婉曲语义。该语义多译作「〜ような」：\n\n（あなたが）思すらむこと何事ぞ。 →\nお思いになるようなことは、どんなことか。\n\n另外，在后接体言的时候，助动词「らむ」也有可能表示现在传闻语义。该语义多译作「〜とかいう」：\n\n鸚鵡いとあはれなり。人の言ふらむことをまねぶらむよ。\n→ …人が言うようなことを真似するとかいうことだよ。\n\n可以注意到这句话里一共有两个「らむ」，其中后者表示现在传闻语义，而前者则相应表示现在婉曲语义。\n过去推量、过去原因推量、过去婉曲、过去传闻助动词「けむ」\n该助动词遵从四段活用，活用表为：\n\n\n\n\n未然形\n連用形\n終止形\n連体形\n已然形\n命令形\n\n\n\n\nけむ\n○\n○\nけむ\nけむ\nけめ\n○\n\n\n\n接续规则为：\n\n所有具有活用的词语均使用连用形接续「けむ」\n\n该助动词的语义几乎和「らむ」构成对应。过去推量语义的含义是对过去的事情做出推测。该语义多译作「〜ただろう」：\n\n（翁は）心にもかなしとや思ひけむ。 →\n…思ったのだろうか。\n\n","categories":["【学习笔记】日语"]},{"title":"2023 春季学期记录","url":"/2023/02/20/2023-spring-record/","content":"应该是本科的最后一个学期了，最近事情也比较多，头绪也没完全理清楚，不如效仿之前假期通过日记的方式强迫自己认真工作，也写些学期中的日记算了。\n目前应该是毕设、先前和快手的项目以及软工助教三件长期的事情，另外有一份可能短期较忙后期平缓的实习。\n\n2023.02.20\n学期的第一天，滚去上了韩语课，没想到的是韩语课居然不让使用电脑，本来还打算以后还可以在课上少说干点活的，看起来也不行了。中午偷摸去五道口出勤，结果还是一堆人，下午只能来工位，把预定中的几件事做了：\n\n迁移好服务器上的数据，跑上实验\n确认小程序的商品列表页面写完，check 一下 yfgg 那边给的信息\n\n本来以为迁移数据是小工作，结果发现还挺麻烦，在经历了实验室机子硬盘满了换挂载之后，我发现我测试集好像没了，现在只能想办法去把这个测试集找出来了。\n最终还是把测试集找出来了，之前写 Pensieve PyTorch\n的时候用了这个数据集然后忘了 ignore 传到了 Github\n上，只能说感谢当时比较粗心了。\n另外就是老师又把我拉到了一个项目的工作群里面，事情又要多起来。之后就是用新\nPuffer\n数据训练出来的模型依然是炸裂状态，洗数据的脚本不知道为什么很慢，而且估计还是有问题。自己个人网站的\nCI\n也不知道为啥停了三个星期没动。我现在真的是，完全不知道从哪里下手。\n\n现在洗数据的脚本慢的问题居然莫名其妙解决了，并且顺带学了一个 Python\n的小知识。\n洗数据有个非常经典的操作，就是不断向一个列表之中 append\n数据，正常都会这么写：\nPythonbatch = []for data in tqdm(data_reader):    # Process    batch.append(data_item)\n然而由于取字段运算符（就是 batch.append 中的\n. 运算符）事实上在 Python\n中占用的资源很大，所以事实上用下面的写法速度会快很多很多：\nPythonbatch = []add_data = batch.appendfor data in tqdm(data_reader):    # Process    add_data(data_item)\n我的数据大约是 106\n量级，然后每次都需要对四个列表\nappend，改用这个写法直接让洗数据时间从近三个小时变成了两分钟左右。\n这种改进方法有个需要注意的地方就是不能改变 batch\n所指向的内存，否则先前的 add_data 将无法正确修改\nbatch 中的内容。比如 batch = batch[: -1]\n之类的重新指向的写法就不能在循环体内出现。\n\n最后发现个人网站 CI 不动的原因是 Travis CI\n收费了，而我自然是欠费的。那么，只能用免费的 Github Actions\n了，虽然要把仓库内容给 Github 去训练\nCopilot，但反正我这个个人网站他能学到个什么呢？\n2023.02.21\n今天早上又得早起，去软工课堂上讲小作业，不过因为学堂路堵车了稍微晚了点到，结果前排位置已经没了，只能坐到角落里。不过，由于高老板已经把小作业的\nSlides\n发出来了，所以我发现坐我前面的同学已经开始做了。要说实话的话，看到他能够非常顺利地把前端小作业运行起来我还是觉得挺欣慰的，毕竟没在这种地方出锅。\n软工课还是一如既往的无聊，周围的同学要么打牌，要么写小作业，要么复习自动机，而我因为没法给电脑充电所以没办法去做实习里的开发，只能坐牢睡觉。\n中午依然是偷偷出勤，现在疫情放开之后，五道口机厅就连工作日的下午往往也有近十个人在打。今天尝试推了推几个\n13+ 的鸟，未果，随后因为又来了至少三四个人于是想了想就撤退回工位了。\n回到工位没想到第一件事情是有同学报告了 THUInfo 的\nbug，虽然没花多少时间就排查出来是课程信息缓存策略有问题，如果退课并选择另一位老师同样的课的话就会导致无法正确更新缓存中的数据。然而即使是小事，这件事情也花了我一些时间。之后就是正常拉新的\nPuffer\n数据然后跑实验，但是现在实验室机子的存储空间大概是不够了，不能像之前那样一跑几天，几千个几千个\nepoch 那样玩了，现在差不多收敛之后跑到 1000 epoch 左右就得停了。\n昨天挂上去的实验结果不是很好，最高的 reward 也只能达到 12\n左右，甚至达不到启发式的\n15，今天换了一个新的、更大的数据集看看，希望能够收获一点正常的结果。\n以及实习那边又开始催了，感觉是该找个时间好好卷卷实习了，然而最近晚上都不太好\n308 直接干，因为连着三天需要早上十点钟去上课，还挺麻烦的。\n晚上和 xjj\n他们去鹤一吃了顿烤肉，结果回来困到直接在椅子上睡着了，本来还想晚上做做事情的。\n另外让我惊讶的是，晚上居然有位同学来问软工小作业相关的东西，一看他都做下去不少了，感觉现在一字班果然还是不可小觑，说不定再过两三天就有人做完了。\n2023.02.22\n今天早上依然是韩语课，今天讲松紧辅音，然而我并不太会。下课之后依然是偷偷去五道口出勤一会然后赶回来上下午的强化学习。\n强化学习我记得课容量应该是四十几左右，结果不仅是微信群里就有一百四五十人，线下教室里也有快两百人，而我这个稍微晚到的就只能站在后面听了一节课。比较难绷的是，因为这堂课的内容我已经基本学过了，所以我就没怎么听，结果还被喊起来回答问题，还要用英语，这就很麻烦。不过说实话，这门课很符合我对大学课堂的想象，一个能有强交互性的、老师能和你保持交流的课堂，比单纯念\nPPT\n的单向授课不知道好了多少，可能也是因为这位老师也并没有大我们多少岁数，交流起来比较没有障碍吧。\n现在计划把目前这个网站上和 RL 相关的东西按照这堂课的 outline\n给整理好，因为我发现这堂课所使用的符号系统之类的比较贴合我所用的，正好也不要废多大的力气。\n下午继续来工位，然后等一手 SOA\n课程的消息，如果事情多、不好混分的话就赶快退了，本来大四也就想摆烂混个及格分赶快毕业得了。结果就是立刻从同学那边听闻课程大作业要求基于\nChatGPT\n做开发，这已经完全超出我所需要了解的内容了，于是立刻退课跑路。\n\n今天看了一下用新一天的 Puffer 的 fox channel\n训练的情况，更是爆炸，甚至到最后都负\nreward，根本没收敛，我现在真的是在怀疑我的数据处理真的存在问题，然而我也是真的不知道怎么往下处理了，但这毕竟总是要结项的，我这边也要给结果的。\n今天估计要做的事情差不多是：\n\n收拾一下强化学习的笔记\n写实习那边的小程序\n毕设看看能不能推进点东西出来\n\n2023.02.23\n周四终于是没有要我十点钟就要起床的事情了，前三天连续早起让我精神状况相当不好，于是周三晚直接很早就睡了，结果一路睡了快十二个小时。\n周四恢复了组会，一点半准时赶到会议室。组会本身是没有什么很大意思的，比较有意思的有两件事，一件是和我一起做毕设的同学好像已经进展很快，这让我比较焦虑，另外一件就是我和老师说了我寒假在实习的事情，他感叹了一句“年轻人忙点好，但是我每周该查你毕设还是查”。总之就是这波组会开下来就让我感觉毕设再不做出点东西好像就得挂了。\n开完组会稍微收拾了点东西，把实习那边微信小程序开发者工具的一个 bug\n修好之后就去上地出勤，不过因为状态不咋样就没怎么打。\n晚上回来之后实习那边的学长也在说我最近事情实在是太多，计划再找一个来帮忙的人，虽然可能需要我让渡部分回报（工资、股份之类的）。我感觉我最近确实也不太想继续推进实习了，实在是太累了，于是就答应了下来。结果他们很快就找来了两位似乎比较有意愿的同学。\n另外就是软工助教那边讨论大作业给分的事情，本来说很快的会，愣是开了一个多小时，就为了讨论应该怎么给同学们解释我们改革的动机和尽力阻止内卷。最后讨论下来，是和同学们明确给出过程评分要求（比如\nGit 开发 comment\n管理之类的评分），并且说明“完成拓展功能很容易导致在过程评分上失分，甚至可能得不偿失”，以此来尽力阻止过度追求满分的行为。\n开完会洗完澡来到 308\n本来计划好好写写实习那边的东西，结果却是一躺就睡着了，一直睡到了周五的十二点，看来这几天是真的困了。\n2023.02.24\n从 308 的沙发上醒来之后，就简单点了个外卖，然后和 return\n讨论了一波日语中助词「は、が」的用法，这些东西稍后整理到自学手册里。外卖到后吃完了就继续推实习那边的事情了。\n结果说是好好做实习的事情的，因为空间里刷到了一条以椭圆曲线加密算法为背景的高中题，就研究了大概几个小时的椭圆曲线。只能说完全不能集中做实习这边的事情。\n好摸啊，今天一整天感觉一直到晚上六点都没做出来什么实际的东西，果然还是得\npush\n一下自己。结果就这样一直到了晚上八点，还是没有做出来什么实质性的东西，倒是实习那边的学长似乎有一些想找我的事情，先来了解一下吧。\n和实习那边新找的技术团队简单见了一个面，看起来他们确实是很有经验的开发团队，至少对商业开发的流程把握比我这种随便写写玩玩的人实在是高到不知道哪里去了，如果可以的话还希望能把我这边接手过去我就可以稍微歇歇了。这里还是得感谢一下实习的\nleader\n还是帮我在投资人那里保住了一些利益，至少原先约定的现金工资还是能给出，这就还可以了，因为我确实没有作出那么多的贡献。\n讨论下来最终我应该就只要在一周内完成：\n\n“我的”页面以及订单详情页\n自定义导航栏\n询问学校和手机的 PageContainer\n\n这三个应该就可以暂且休整了，感觉整体安排还是很好的。\n晚上稍微花了点时间修正了一下主页相关的一些东西，目前来看问题不大。\n另外，最近不少人软工小作业前后端都做得七七八八了，目前也没什么大的\nbug report，还算是心里安稳了不少，希望 CI/CD 也不会出大锅。\n2023.02.25\n今天大概是实习那边简单开一个会，把团队所有的同学召集起来互相认识。不过说实话，我这个做开发的，确实不太了解运营那边，倒是\nyfgg 需要和运营那边对接后端管理，反倒是需要经常接触。\n中午出去吃牛肉面，结果那家店既不能在线下单，而且还需要自己取餐，还没有防丢包机制，属于是当下互联网应用普及背景下的漏网之鱼了。\n下午于是就正常工作把“我的”页面赶快写完，说是今晚就打算验收，那总之认真干干吧。\n然而微信小程序这种东西就是很折磨，写了一整天还是有些逻辑上的问题。另外，在写这玩意的时候还有一位上软工的同学一直在找我答疑，然而这位同学似乎对一些计算机的基础知识都不是特别熟练，确实也弄得我有点麻烦。\n晚上就直接摸鱼了，打了一晚上德州，然后早早睡了。\n2023.02.26\n一点没睡好，因为突然出现了一点点的感冒症状，喉咙发痒然后咳痰，我在怀疑是冬春之交的流感，或者是我复阳了，顺带着精神状况也不是特别好，有点头晕且没啥精神，口干舌燥的很难受。\n十一点左右就醒了，打了一把牌之后就去看 KOP maimai 决赛，yoshiki\n还是很稳健地拿下优胜，确实也没啥特别可以说得上是悬念的东西。然而最主要的是在国际服比赛之前三位主持人透露了似乎\nSBGA 终于要把国服 UI 更新到 festival 的信息：\n\nマイマイは日本でも人気なんですけれども、海外でも…\n中国で、あのマイマイみたいな…\nせっかくで、バージョンアップ、言ってもいい？\nバージョンアップしなかったですけど、近々、システムはフェスティバルにと…\n\n然而这完全不像是一次正式通告，虽然后面也提到了最近会发布正式公告，但这暧昧的态度和语气确实也很\nSBGA。只能说如果真的给更新的话，maimai 暂且是一款我的问题。\n下午实在是拿不出来任何做事的干劲，直接去上地出勤了，然而上地一直保持着至少八人的规模，所以说实话也没打到多少把。感冒的症状说实话出勤的时候在缓慢加重，毕竟只穿了短袖而且还在不断流汗，很有可能受凉。一直到了晚上，本来想吃一顿萨利亚就回去的，结果是萨利亚居然卖完了主食，啥都吃不了，只能去上地华联地下那些不咋样的饭店随便吃吃，就这样还吃了我六七十，啥都没吃着。\n晚上回到宿舍拿到了美团上买的感冒药，结果上楼梯的时候就已经开始感受到极端的疲惫感，到了宿舍坐下来，立刻感觉好了不少，于是赶紧吃了颗药。\n今天本来想做的事情那是一件都没有做，这一周刚开始的时候干劲满满，每天除了日常工作还能出勤，心情也一直很不错。但是到了今天，周日，因为这个感冒症状，真的弄得我非常难受，希望明天起来能够快快好起来，这样至少不会影响我下一周的时间安排。\n2023.02.27\n果然症状没有好多少，依然是喉咙有点疼然后头很昏，整天处于疲劳状态，可能还有一点点低热。早上强撑着还去上了韩语课，虽然迟到了。韩语课目前在讲发音，没有什么特别有意思的东西。\n中午按照平常的饭量点了一套粥和配粥的小菜，结果发现自己完全吃不下，虽然吃了七八成，但还有些是完全没吃的，比如三个豆沙包。下午按照道理要准备开始干活了，然而这个状况是真的一点都没法工作，于是爬上床睡觉了，除了途中上了趟厕所之外，一直到七点左右我一直在床上睡觉。比较麻烦的是，我醒过来发现四肢有点冰凉然后还有点热，这说明症状严重了。\n为了防止我是新冠复阳，我去 308\n里面拿了一份之前囤着的抗原，自测了一下是阴性，这就说明我得甲型流感的概率很高，前几天宿舍楼群里面也有人问有没有体温计之类的。\n就这样一直磨到了晚上八点，请舍友帮忙带了饭，结果发现还是没什么特别大的胃口。但这个时候我意识到很多事情再不做来不及了，比如第二天就要在课上讲的\nReact\n前端小作业讲稿，还有大作业文档之类的也得稍微调整一下。就在我极不情愿地坐到桌前准备工作，这种疲劳感和不集中又袭来，而且实习那边还在\npush 一些事情。\n怎么会变成这样的呢？我思考可能是先前太疲劳，毕竟连续早起了很多天，虽然只是十点起，但我平均得到四五点睡，这就很不好。于是想着该找机会调整作息和运动了，然而目前事情还得赶快推。\n2023.02.28\n二月的最后一天了，昨天晚上吃完药之后明显感到全身发烫，然后开始冒汗，最终到了凌晨五点左右退烧了。然而，喉咙疼和咳嗽确实是一点没有见好转，甚至还有恶化的感觉。\n强撑着去软工课堂上讲完了两节课，回来之后自然又是睡了整整一个下午，起来就已经是晚上了，点了个外卖，胃口依然没有恢复。\n晚上首先是我爸妈得知了消息，他们简单关照了几句，问了问药物的情况。然后我发了个朋友圈说已经甲流第三天，结果各种关心就都过来了，先是\nrls，然后是之前一直有联系的学弟，一起打牌的学长，湖中，甚至贾珈老师都来关心，一时间受宠若惊。\n不过总的来说吃了颗药然后洗了个澡之后现在精神状况恢复不少，至少现在四肢都是温暖的，然后也几乎没有疲劳感，喉咙虽然沙哑但至少也只是微微发涩，估摸着明天，应该也就能正式好转了吧。\n期间 rls\n提到了还有一个月薪两千的前端单子问我要不要接，我只能回一句“狗命要紧”，赶快回绝了。\n以及突然很想吃水果，尤其是苹果和梨，那种清甜的口感，不知道为啥现在特别想念。\n过了一遍 DRL 的 recitation，PyTorch\n的简单入门，讲得还可以，但之前就学过了，不好说对初学者而言友不友好。比较好玩的一点是，我听完\nrecitation 之后，突然感觉神清气爽，有种大病初愈的感觉，难道 DRL\n还有这个好处？\n不过看这样子，明天确实可以开始正常生活了，先是得把这几天没洗的衣服给洗了，然后给自己买点水果解个馋。工作上的话，软工助教一时半会是没啥大事了，实习估计这周也会结束，毕设已经请了一周假，这周组会应该也很好过去。\n三月了，希望能全新开始吧。\n2023.03.01\n今天起床之后发现好了不少，除了喉咙还是有点不舒服之外，其他应该基本都好差不多了，然后也第一次韩语课没有迟到。韩语课没啥值得记忆的，只是\nzz 居然被老师听出来他的韩语有日语口音。\n中午点了麻辣烫，虽然这次没要酱料，毕竟现在还不太能吃辛辣，于是就吃了清水煮肉片，但是比较好的事情就是发现自己饭量已经差不多恢复了。此外去猫超买了黄瓜、菠萝蜜和哈密瓜，其他的还好，就是菠萝蜜难吃出了一种境界。\n下午摆烂没去 DRL，但是老师发 slides 真的很慢，我还打算至少看看 slides\n来学点东西的。\n结果还是摆烂了一个下午，最终还是决定去洗个衣服，至少做点什么像样的事情吧。\n2023.03.02\n昨晚据我舍友说睡觉的时候连续咳嗽了一个多小时，说是真怕我睡着睡着人咳没了。\n中午爬起来去开组会，为了防止传染所以戴了个口罩去了实验室，实验室的学长们见到我这阵仗都纷纷戴上了口罩。老师看到这个状况，于是劝我还是等身体完全好了再来实验室，组会少一两次问题不大。于是我就从命地回去了，回去的路上顺手去吃了个午饭。\n吃完午饭才发现这几天的温度已经回升到了十几度了，天气最近也一直是晴天，这两天正好又是春季百团大战，于是就去逛了一下摊位。不过由于春季百团本来就不是重点战场，各个社团也没有拿出家底，所以摊位比较一般，没啥意思。但是，这次逛了摊位之后突然发现，只是走了百十米之后就开始喘气，我自己都没发现现在身子已经虚弱到了这个程度。\n回到宿舍坐了一会喝了口水之后瞬间就恢复了不少，甚至感觉和康复了毫无区别。果然只有出门才会意识到现在自己身体依然十分虚弱，即使没有很明显的症状。算了，先好好把\nDRL 笔记整理完吧。\n2023.03.03\n身体看起来已经是完全好了，下午先是出门去做软工小作业答疑，但是就在这过程中不断被催实习那边的事情。目前预定下来要做的事情应该还就是之前定下来的那几个页面，然后预计还要去做后台管理应用的一些后端开发。\n因为现在身体好了不少于是直接去上地出勤，虽然状态依然没有完全回来，但是基本上已经是能活动开了。不过打了一晚上一分没上，还是很难受的。\n本来是打算和舍友一起去海底捞的，但是考虑到我出了勤得去洗澡，然后当晚还有韩语作业，只能偷摸溜回来。然而回来发现的第一件事就是我自行车被偷了，我明明好好锁了车，却依然被偷了。本来是打算报警的，但以前也被偷过车的一位同学提醒我这事报警挺麻烦，毕竟你也没法拿出什么很重要的证据说明这车就一定是你的，而且很多行政流程可能还挺麻烦。\n回到宿舍本来打算稍微做点事情的，结果是相当困，写完韩语作业之后就直接摸鱼了。\n2023.03.04\n今天起来先是收到了 SECoder\n因为网段限制无法满足给所有同学开两个部署容器的麻烦消息，这代表我们对小作业框架要做大改。急急匆匆和高老板、mfy\n商议了解决方案之后，我把作业文档和课程公告写好了，就等高老板那边把 code\nbase 修改好，然后开好容器就可以准备谢罪了。\n此外不少同学的软工答疑我还暂且没解决，在此之外实习的事情理应今天解决我还没做。\n不过说实话，现在我对这份实习是越来越不想上心，因为自己毕设真的是没有进度，现在也已经是三月的开头过去三四天了，四月中期拿不出东西是真的要收拾东西走人的。\n有个题外话就是我考研的舍友似乎想来我们组，看上去还真有可能。如果是这样的话，至少几年内有个一起在组里的也不错。\n晚上稍微摸了鱼，打了一晚上德州扑克。这一把非常有意思的一局是，我起手\nAK\n方片，然后直接冲刺了，翻牌是三张方片，我直接中天顶同花，于是也不演了，打退几家。令我惊讶的是，即使是这样居然还有一家和我对着下注，我看后续牌没有对子，就说明没四条或者葫芦了，结果那一家还在和我对着下注一直到\nAll\nin，我这手牌自然是一击把他打飞了。后面我还拿到过天葫芦，天顶两对等好牌，只能说这一把太运势好了。\n其实晚上最主要的还是把软工小作业的问题解决了，更新了文档，发布了课程公告，也终于给大家开好了容器，这件事情也算是平稳过去了。\n2023.03.05\n周日，本来想好好做点实习的事情的，结果直接在宿舍开始摸鱼。现在气温开始回升了，慢慢有春天的感觉了，最近心情大好。\n不过下午却是摸鱼摸过去了，中途 c7w 给我转发了 ouuan 在自己 blog\n上对软工小作业的批评，怎么说呢，别人说的没错那就只能立正挨打。硬伤就是计时器资源和网络请求并没有设置在组件卸载的时候取消，这一点怎么说呢，因为曾经的项目没有使用过定时器，也没有过于管\nabort 网络请求的事情，所以就没这方面的经验，确乎是得学。然后就是 ESLint\n配置的事情，怎么说呢，一是 holder 确实 prefer\n一个并非大众喜爱的码风，然后 ESLint\n没好好配也差不多是为了同学写的时候别真的红一片，我当时第一次开始写代码就经常被\nlint 干到崩溃，明明会写的逻辑硬要跟着 lint\n后面走。嘛，不过也确实是在想要不从众用 2 space\n缩紧和单引号算了，但是说实话 holder 真的是单引号极端厌恶。\n整体要说的话，实际上问题也就是一个，就是“简陋”，不符合当下的一些约束或者说惯例，而且为了零基础也能上手，省掉了一堆东西还几乎没多少填空。\n算了，还是等 ouuan 来好好调教一番吧，我摆烂了，我只想毕业了。\n但是说实话，还是赶快做点事情从周一开始恢复到第一周的工作状态吧，否则实在是有点太摸了。\n\n总之今天整体还是太摸鱼了，实习那边的东西没有一发调出来也是真的没绷住，然后还时不时被\nouuan 拷打，包括各种可以优化的地方。看来 holder\n还需要再稍微锻炼一下抗压能力，这点抗压能力完全不能应付啊，包括之前被 cyr\n拷打毕设也是，完全做不到坦然面对面前的问题呢，遇到问题只想摆烂和找借口嘴硬，这实在是有点过分了。\n2023.03.06\n今天早上起来就发现已经十点了，已经过了韩语课的签到，于是也懒得去了，看到湖中在说想出勤，于是直接去了五道口。没有想到的是，即使是星期一的上午，五道口依然充满了人，完全打不了多少，只能随便糊糊作罢。\n下午精神终于回来了一点，昨天摆烂加上被拷打真的是完全绷不住，但还是得赶快调整。到了工位，整理了一下自己的东西，结果发现耳机的耳塞又掉了，没有办法只能赶快下单新耳机，不能再将就着用这个破耳机了。下午依然是随便跑了一下\nPuffer\n的实验，可喜的是这一次实验居然似乎有了点看起来能行的样子，因为现在至少能打过启发式了，至少不是智障了。在等实验的过程中帮\nabmfy\n修了一下日语作文，然后准备还是赶快把实习那边的事情给做完，少一件事终究是好事。\n今早在出勤的时候顺手把当前前端小作业存在的问题给罗列了一下，整体来讲虽然有点绷不住但还是感谢\nouuan 提供了这么多的改进意见。\n2023.03.07\n7\n号真实地没有任何可以记录的事情，因为早上起来之后随手在群里发了一个“礼问上几”，得到上地机厅只有一人的答复之后，立刻收拾东西去出勤了。然后原本是打算随便打打就下午回来的，结果因为手感好到离谱，直接上了四十几底分，于是就这样一直打下去了。最后快要闭店的时候，随手开了一把高桥名人，结果\n24 分纵连全打上了，鸟加 13.2 吃分。\n但是事情总是得做的，因为和实习那边说了已经写完了订单页面，所以这个坑得填上，最终还是来到了\n308 开夜班，一路做到早上六点，真实做到了三四个小时糊完整个页面。\n2023.03.08\n7 号晚上写完订单页面之后我意识到周三 8\n号的韩语课多半是起不来了，于是和老师说明了情况，打算韩语课退课自学了。\n8 号的话，起来之后先是去了\nDRL，下课后结果兴致来了就去吃了顿麦当劳然后五道口出勤，出到了晚上回来和舍友吃了顿饭，308\n睡了一觉之后就是软工的课咨委启动会，开完之后就十一点了，直到这个时候才准备开始做毕设。\n这两天属实没有什么特别有意思的事情，也没有什么有意思的新闻，只是很平淡地摸鱼了两天，只能赶快把毕设启动了，不然太摸鱼了。然后韩语的收音和今天\nDRL\n的课程内容还得整理一下，不过还是毕设为重，这些可以明天开完会之后慢慢摸索。\n2023.03.09\n昨天为了赶快干活，晚上做毕设做到三四点，但是实在是顶不住了赶快去睡觉了。但是这一觉也没睡多好，中间醒了几回。早上起来就看见导师要去参加另外一场会于是组会交给我们自行组织，绝佳摸鱼机会。\n于是下午的组会也只进行了半个小时就结束了，然后我们就在讨论导师参加的那一场会会开到什么时候，毕竟我们还得装作认真讨论的样子，至少不能让组会比导师的会提早结束。结果是没讨论出任何有价值的结果，就直接回实验室摸鱼聊天，没想到的是，导师已经回来坐到实验室了。\n今天机厅据说人并不多，但是说实话事情还是不少的，还是稍微做做吧，大不了周五出勤出一整天。\n2023.03.10\n周五似乎并没有什么安排，因为周四理论上已经大体解决了问题，我也成功在周五凌晨六点前把实习的代码交掉了，虽然我知道里面还有不少的错误，但这些错误也不是我写的，我真的很难去帮别人补天。\n然而下午毕竟是要验收的，验收这就发现这玩意几乎没有办法用，功能上欠缺了一堆东西，实习那边的学长能看得出来很着急，于是急忙安排我们前端开发的两拨人赶快开会对接。我迅速把一些比较严重的问题扔到了群里，但是他们的答复也比较暧昧不清，不太能对实际解决问题起到什么作用。\n晚上稍微开了个会，我直接对着他们的代码指指点点了一通，总之就是他们那边出了不少问题（虽然感觉我也可能出问题），导致现在功能上完全用不了。在这之前事实上我已经和\nyfgg 吐槽了很多他们代码上的错误之类的，总之就是血压超级高。\n开会的时候我直接说我周末不奉陪了，你们的问题你们慢慢解决，然后我就开始心安理得地摆烂，打了一晚上德州扑克之后就早早睡了。\n2023.03.11\n周六是约好先去麦当劳吃饭然后 V+ 群群 K\n的，我定好了十一点的闹钟，虽然被闹醒了但是小小眯了一会，没想到就直接迟到半小时。\n因为这次参加的群友相当之多，最终我们是分为中 V 和日 V\n两边举行，我一直在日 V 这边，确实也唱了相当多的 V\n曲，嗓子已经炸裂了。\n晚上本来是打算聚餐的，但是还是和湖中、秋枫老师临时起意去窝出了一小会勤，只是没想到窝现在十点钟就会关门，于是也没玩很长时间就只能回来了。\n回来洗了个澡，准备稍微干点活。在今天玩的时候实习那边还在说打算周日把\nbug\n修好，但总之我有点不想再陪他们玩下去了，我把我的工作做好，这周，我必须把那里的事情放下来做毕设了，后面软工助教会还得开，不能再这样拖泥带水了。\n\n今天还是主要配置了一下 DRL 的环境，因为手上的 Mac\n说实话已经很不好用了，很怕后面要做深度神经网络的时候撑不住，于是直接把代码拉到服务器上去了。但是这有一个重要的问题，DRL\n的作业是基于 Gymnasium 的，这是需要渲染图形界面的，那我就需要通过 X11\n转发图形界面到我的 Mac 上。但是刚配置完 X11，就报错了：\nZSHX Error of failed request:  BadValue (integer parameter out of range for operation)  Major opcode of failed request:  149 (GLX)  Minor opcode of failed request:  3 (X_GLXCreateContext)  Value in failed request:  0x0  Serial number of failed request:  143  Current serial number in output stream:  144\n我查了半天终于在 StackOverflow 上找到了解决方案，只需要在 MacOS\n的客户端这边运行下述命令启用 IGLX 即可：\nZSHdefaults write `quartz-wm --help | awk &#x27;/default:.*X11/ &#123; gsub(/\\)/, &quot;&quot;, $2); print $2; &#125;&#x27;` enable_iglx -bool true\n然后普通地 ssh -Y 连接到 Linux 服务器端就可以了。如果是\nVSCode 的话，需要在 SSH config 里面加上下面两行来保证 X11 启用：\nSSH configForwardX11 yesForwardX11Trusted yes\n2023.03.12\n今天是周日，按照道理是和实习那边对前端的任务的，不过下午我都用来搬迁毕设代码框架里面的一个第三方框架了。我毕设真的是，毫无进展，真的得速速做点东西出来了，尤其是下一次组会真的得说点什么东西出来了，不然这也太慢了。\n晚上临时起意去了胜博殿去吃炸猪排，不得不说，特别好吃，超出想象的好吃。猪排我点的千层锦，切面可以看到是一层层猪肉叠起来，最后炸出来居然不散开，居然还能保持猪排的形状，这也太惊艳了。小菜比如说包菜丝、茶水、金枪鱼拌饭、味增汤之类的就没有那么惊艳，但绝对也是平均向上的水平。\n今晚吃饭的地方旁边就有 maimai，于是就去打了几把，差点鸟掉 Big\nDaddy，但是尾杀崩盘了就没办法了。这个机厅最大的问题就是游戏币原价太贵了，两块钱一币，maimai\n1pc 要五币，原价的话十块钱 1pc，实在是离谱。\n晚上回来发现自己 B\n站六级了，于是做了一下硬核会员考试，擦边通过，关于鬼畜的一些东西真的已经是考的都是边边角角完全不知道了。做完这些迅速过了一下实习那边的代码，把订单列表页的按钮都写上了回调函数，我这边工作基本就相当于结束了。交了一些\nBug report，和学长说了自己可能得做毕设之后，就暂且告一段落吧。\n2023.03.13\n周一，因为已经退掉了韩语，所以没有早起，起来之后按照以往的规划去了五道口出一小会勤。本来是打算出一两个小时就回去去工位做毕设的，结果是一直打到了闭店。\n不过这一次出勤实在是太值当了，不仅杀掉了心心念念的捕物帐、纵连派对、跳舞狗三个\n13+，还 AP\n了海底谭和弱虫。最经典的事情则是，因为我已经连续出勤了七个小时已经累得不行，但是最后快闭店的时候我同学拉着我说再来一把。我秉持着已经这么累了，再累点也没事的态度开了一把\nDX\n奶，没想到的是我把这玩意杀了。而正好，同学帮我录下来了最后十秒钟，当了一次战地记者。\n回来之后就把这个视频上传到了 B 站，还是很有意思的。\n2023.03.14\n今天决定好好做毕设了，不过这次我打算换方向了，我不打算完整复现论文了，而是直接用\ncommunity code base，在这个基础上先跑起来 Pensieve 作为\nbaseline。感谢贾老师的建议。\n不过这次在跑起来这个 code base\n的过程中遇到了相当多的困难。我一开始打算在服务器上运行起来这套代码，首先遇到的问题是导入自己编写的模块会导致\nPython 找不到模块，这也算是个经典问题了，不过这次我找到了这样一套 Python\n引言代码，感觉可以后期长期使用这样一套引言来解决自己编写模块之间互引的问题：\nPythonimport osimport syscurrent_path = os.path.dirname(os.path.abspath(__file__))sys.path.append(os.path.join(current_path, &quot;..&quot;))\n之后遇到的问题是服务器上没有 OpenMPI，这个简单，直接\nsudo apt-get 就可以了。然后还有一点就是没有装 Mujoco\n131，这个也不难。\n然而后面的就是大问题了，因为这个代码框架还是涉及到图形界面，所以还是会涉及到\nSSH X11 转发图形界面，然而我本以为配置好了，结果这次运行的时候炸了\nNo specified protocol。我上网找了一下，基本都是说没有权限的问题，用\nxhost +\n命令就可以解决问题，然而我无论怎么尝试都不行。于是我放弃了，我决定先在我\nMac 本地跑起来这一套玩意。\n然而在 Mac 本地上就有另外的问题，OpenGL 找不到。我尝试了很多方法安装\nOpenGL，但都不行，最后还是找到了相当邪道的解决方式，即直接修改第三方\npyopengl 里面寻找 OpenGL 的代码。代码位于\nplatform/ctypesloader.py 中，里面函数\n_loadLibraryWindows 中有一段如下的代码：\nPythonfullName = Nonetry:    fullName = util.find_library(name)    if fullName is not None:        name = fullName    elif os.path.isfile(os.path.join(DLL_DIRECTORY, name + &#x27;.dll&#x27;)):        name = os.path.join(DLL_DIRECTORY, name + &#x27;.dll&#x27;)except Exception as err:    _log.info(&#x27;&#x27;&#x27;Failed on util.find_library(%r): %s&#x27;&#x27;&#x27;, name, err)    # Should the call fail, we just try to load the base filename...    pass\n这里直接把 fullName 变量硬设置为\n\"/System/Library/Frameworks/OpenGL.framework/OpenGL\"\n即可（在 MacOS 上），这样的话似乎就能通过检查了。\n之后也是 Mac 上装一下 OpenMPI，直接 brew install openmpi\n就行，然后就跑起来了。然而我 Mac\n究竟是老了，所以跑的时候风扇直接起飞，还是得放到服务器上。不过我发现一件事就是这玩意完全没有生成什么图形界面，意思就是说理论上根本碰不到\nX11 转发的问题，所以我就打算今天至少得把这玩意在服务器上跑起来才行。\n\n在服务器上二分了一下确认了是 mpi4py 这个包在 import\n的时候会爆炸，不过我也用不到这个东西所以直接注释掉就没有那么多事情了。\n这个框架另外还附赠了一个用 Flask\n编写的前端用来可视化训练数据，不过看起来这个前端目前也是炸得不轻，啥地方都是\n500 Internal Server Error，还得一步步修理。\n最终还是找到了前端的问题，是因为我以为代码里面的 viskit\n是个需要安装的第三方，所以直接用 pip install viskit\n装了一下，结果这个 viskit 事实上是自己写的一个\nviskit.py 模块。而碰巧的是用 pip\n装的时候装了个很老的依赖，现在更新到了 v3 而我装的是\nv1，恰巧这个依赖还真的在 viskit.py\n里面引用了，所以直接爆炸了。\n我比较怀疑这个框架里的 viskit.py 是一个 self modified\n的魔改版第三方，所以才不能从 pip 直接下载。\n最后他还有一个用来展示训练结果的 Python\n文件，里面读取了缓存的模型参数然后用了 Gymnasium\n渲染一个图像出来，不过这里又是涉及到图像 X11\n转发，于是又理所应当地炸掉了，但今晚我也懒得调试这个东西了，明天要帮黄老师找他博士毕业论文的错别字还得尽量把\nPensieve 写上去。\n2023.03.15\n今天真的没睡好，本来昨晚看完了《シノハユ》漫画之后已经五六点，结果还有点失眠了一下子没睡着，最后七点才昏昏沉沉睡过去。结果早上十点钟就有人来清洗空调，直接把我弄睡不着了，只睡了三个小时直接让我整个早上极端暴躁。\n结果先去偷摸出勤了，勤到了三点多，决定回工位帮黄老师看论文。然而今天在工位说实话黄老师论文也没看进去多少，反倒是软工因为周四要开第一次大例会所以拉群、加好友、发注意事项弄得热火朝天，最忙碌的时候我同时在和五位同学保持联系。\n晚上在实验室和学长们吹了一会 GPT-4\n的水，没想到一路吹到晚上十一点，于是赶快收拾东西回宿舍。路上遇到了\nlzj，于是和他两个人边聊天边走回宿舍。\n回来之后决定先把目前复现的 GrBAL\n挂到服务器上跑着，昨天虽然跑了一些，但是试验结果相当炸裂，reward\n都是负的，我完全不敢相信这是目前最常用的 community code\nbase。然后仔细想了想，终究还是得做点什么出来，于是决定用 MPC Controller\n作为 policy 跑一下 Pensieve\n看看结果，本想晚上就把代码迁移好的，结果还是电脑没电，终究只能作罢。\n明天需要同时开组会和软工大例会，晚上还有学生节技术支持的会，还是挺忙的。不过目前来看周五是空闲的，估计找个时间把\nPensieve 赶快挂上去，跑点结果出来做分析最好。\n2023.03.16\n今天开组会的路倒是比较波折，我现在已经习惯点午饭的外卖到 FIT，然后在\nFIT\n吃完正好去开组会。然而今天的午饭早到了，于是起床后收拾自己又得加速，出门后扫了一辆共享单车，但是因为现在共享单车有一部分没有物理锁只能用手机控制电磁上锁，而且现在共享单车有的时候似乎还不能随处停车，这次我骑到\nFIT\n楼之后居然一直没法上锁。没办法，我只能投诉然后强行关锁，就这样浪费了二十分钟，午饭时间就很短了。\n匆匆忙忙吃完午饭上楼开会，只能说勉强赶上。在组会上简单把 Pensieve\n的环境搬到了新框架里面，不得不说这个框架设计得很好，可拓展性很强，我搬过来\nPensieve 也没有什么卡住的地方。下面就是尝试研究一下用 MPC Controller 解\nPensieve\n可不可行了，如果这个结果打得比较好的话，至少就能当个事情说了。\n另外似乎还得做一下 baseline，把数据集按照网络情况切分一下，把\nPensieve 也顺手跑一下，这个下一周做完吧。\n\n组会之后去开软工的第一次大例会，本来以为是个小会议室的，没想到随堂助教给我租了个\nFIT\n楼的大会议室，还不让吃零食和喝有色饮料，我准备的小零食也完全用不上了。例会本身没啥好说的，就是强调一下例会规范、开发规范，然后提一下下一周大家准备做多少和大家对给分的心理预期。例会效果整体不算差，甚至可以说不错，总之和大家交流下来感觉都挺好的，应该后面也会顺利吧。\n回来之后和贾老师讨论了一下毕设下面的计划，他建议先认真检查一下论文中方法到底可不可行。检验方法有几种，一种是发邮件问作者要\ncode\nbase，一种是看看有没有引用这篇论文的工作是开源代码，还有就是我感觉应该可以再\ndebug 看看。\n后续就是我提到了我想做的一些，首先是做\nbaseline，这里就需要问黄老师要一点各种环境下的 trace\n去剪切生成环境切换的数据集。然后是继续在现在的 code base 上迁移\nPensieve，然后用 MPC 求解观察一下结果。\n总之后面还得是毕设为重，今天听说毕设中期有可能提前到三月底瞬间就很紧张，希望不要这样，最好推迟到四月中旬。今晚还同时有学生节技术支持的会和实习那边的\nbug report 会，算是很忙了。\n2023.03.17\n昨晚晚上回来之后迅速开完了几场会，学生节技术支持弄明白了，实习那边的\nbug\n基本修完了，小作业思考题评分细则也定下来了。晚上就借着劲改完了一大半思考题，期间有很多很模糊的答案，十分难给分，但是最终还是睁一只眼闭一只眼给过了。说实话我现在还算是有点担心会不会后面来给我要分的同学会很多。\n因为太晚了所以周四晚就睡 308\n了，起来之后和实习那边再对了一下目前的进展，他们打算再把一些弹窗精修一下，我还得等等设计稿。然后我把软工小作业思考题改完大半之后就基本上闲下来了，没有特别大的很急的事情。约了晚上游泳和打牌，摸鱼摸一个周末。\n晚上基本上实习那边的东西已经写完了，舍友喊我去游泳，最终是五个人一并去了游泳馆，八点钟游泳到九点半，然后出水去吃了个夜宵。夜宵吃到了心心念念的杨枝甘露麦旋风，说实话味道确实不错。吃完后赶忙回来打牌，雀魂规则不太想打，于是玩起了无一发无杠宝无里宝的\nA 规，但是没想到的是依然有人能在 A\n规下和出立直、混全、三色、宝牌二的跳满。\n打完牌已经是一点半了，赶忙赶到 308 和 yfgg\n看了一眼直播机和弹幕机，准备开始摸鱼了。\n2023.03.18\n今天一起床就去学生节现场了，当时网线等物资已经都运到了。学生节的任务基本分为搭建\nWiFi、搭建弹幕机、搭建直播机三个部分。WiFi\n则是最重要也是最麻烦的，不仅需要调通网络拓扑结构，更主要的是需要一堆人去拉线。\n这次拉 WiFi 最值得记录的就是有个 NUC 是 Windows 宿主机，Debian\n虚拟机，但是所有公网 IP\n全都被虚拟机持有，并且虚拟机上运行着软件路由器，而宿主机则是通过 AP\n的无线网络上网。这个神奇的虚拟化设计还让我们研究了一通，当时为了设置 IP\n地址我们直接扫了一遍网段，就是没扫到 Windows\n宿主机，指导向编导要了一个显示器硬登录进去看了一遍才知道原来是这么回事。另外，祖传的八个\nAP 也老了，交换机甚至还是百兆的，只能说这套设备还是得赶快换掉。\n之后是弹幕机，弹幕机更麻烦，似乎因为硬件已经老旧，其完全撑不住 60Hz\n的刷新率，直接会导致主投黑屏。在彩排过程中这个弹幕机没少出锅，但是在最后通过降频到\n30Hz\n勉强稳住了三十分钟，于是大家都觉得没啥事了就直接上线。结果没想到在教师视频部分，弹幕机直接挂了，导致正式现场黑屏，最后只能下线弹幕机。比较好玩的一点是，Harry\n实际上是知道这个机子是有问题的，他的意思是生产环境反正没出过事，这话只能说我很难绷，明知开发环境出过事情却一直没跟我们说过这件事，只能说运气差被我们撞到了。\n直播机没啥好说的，按照惯例设置了一通就行了。\n学生节结束之后，工作人员都打算去吃海底捞庆功宴，我因为约好了周日的丰泽园就没去，加上还得回去看一眼软工小作业的批改状况。\n2023.03.19\n早上还是睡过了，没赶得上和大部队一起去丰泽园。但不得不说，丰泽园是真的好吃，九转大肠和葱烧海参绝对的招牌菜，干炸丸子也绝对是一流水平。\n下午按照规划，四个人坐车去昌平泡温泉，不过那个温泉我感觉有点简陋，但整体还算舒服。娱乐设施也不算完备，只有简单的棋牌、台球、乒乓球，设备也有点老旧。最主要的是，下午黄老师催促我帮他审核论文，于是我整个下午实际上都在断断续续看论文，不过最终还算是把这事做掉了。\n回来之后和人约了周一早上去上地堵门，于是就决定早早睡觉吧。明天开始还是得做毕设，毕竟看起来三月底中期很像是真事。\n目前毕设的计划：\n\n验证原框架是否可用\n\n重新拉取原框架，完全不修改直接运行，确认其效果\n若原框架可用，则 debug，若不可用，换框架\n换框架可能流程\n\n通过邮件联系作者获取 code base\n找寻引用这篇论文的开源 code base\n\n需要研读 code base，形成完整的 paper report 和 code doc\n\nPensieve 迁移\n\n写完通过 MPC 求解 Pensieve 的代码并运行\n研究 Pensieve environment（在线直播环境）\n\n数据集生成\n\n获取黄老师的 network trace data repo\n准备数据剪切脚本\n训练 baseline Pensieve\n\n\n2023.03.20\n今天又是周一了，和群友约了上地堵门，于是真的就去了，而且一去就是一天。一整天鸟了\nSelector 和吹爆，吃了一点点分，然后把不少 13+ 推到了\nSS+，尤其是待宵夜虫和管弦乐，相当难受。\n今天出勤的意外就是左手食指被售货机夹到了，结果掀开了一层皮，还好不深，简单消毒之后用了一下创口贴，晚上基本就可以自由活动了。\n但是今天最烦的莫过于实习那边又发来了 bug\nreport，本来以为都是小问题，结果一看甚至还要写一个新的页面，还要和后端对接。最终还是晚上稍微花了点时间把这事干掉了，干完已经是凌晨四点。\n此外，我也是今天才知道今年从计算机系考研本系只有两人通过了，而恰好就是我两位考研的舍友。zd\n预计会去朱军组，指导老师是苏航，ky\n似乎和我导师联系过，但是具体也不知道。他们应该是明天周二早上面试，具体情况就在这之后再说了。\n2023.03.21\n今天起来先把实习那边的一些小 bug\n修了，衣服洗了，然后匆匆忙忙来实验室做毕设相关的，而且 DRL HW1\n就要截止了，还要花点时间写那边的东西。现在麻烦的一点就是实验室的机子硬盘可能已经不太够了，我可能还得做一些迁移工作。\n由于现在用的机子硬盘基本快耗尽了，所以上服务器列表找了一个稍微空一点的机子，搬迁了一下实验环境。这次好就好在我终于用上了\nAnaconda environment export\n来做依赖管理，所以这次把代码跑起来基本上没有耗费多长时间。之后就是先做了比较简单的一件事，就是把\nLearning to Adapt 的 code base 原封不动地跑了一下，结果发现 reward\n也是真的烂，这我就相当难绷了。\n不过还有发现一件事，就是似乎在我配置的环境下代码运行速度相当之慢，运行时间逼近原先\ncode base 的三倍，这让我十分困惑，因为我基本没做什么改动。\n鉴于原框架也不算多好用，于是就打算邮件问问作者有没有 code base\n了。\n整个下午其实也没做到什么事情，把实验挂上去之后做完了 DRL\n作业去吃两位舍友考研面试的饭，吃完之后简单把实习那里补了一点代码。\n不过最难受的莫过于似乎这个代码框架把服务器的内存跑炸了，500G\n内存我都没有一点头绪怎么能炸掉的。不过今晚已经很困了，不如先睡觉。\n2023.03.22\n今天是沙尘暴，没法出门了，只能在宿舍好好干活了。\n基本上还是在折腾原先 code\nbase，尝试了很多种方法，也调节过超参，但总之最后出来的结果并没有那么理想，尤其是\nGrBAL 方法，Avaerage return 一直稳定在零附近震荡，反倒是之前没有尝试过的\nReBAL 方法，似乎能够上升到 1000 左右的 Average\nreturn，虽说没有论文中说的那么厉害，但似乎已经能够打败一众 baseline\n了。\n下面就是努力生成一篇 code doc 或者 report，迁移好 Pensieve 以及做好\nbaseline 了。目前中期确认在下周三，只能说希望人能活着过中期。\n不过现在有一点疑惑的是，似乎现在并没有写好一个比较完整的线上环境切换来做实验，可能还得找个时间写完这一块东西。\n今晚最麻烦的事情就是我才了解到微信又禁用了一些接口，导致实习那边的代码几乎要重写很大一部分。晚上电脑实在没电，只能又去了\n308，迅速干完活，结果有已经是四五点了。真的，这份实习给我带来的开发体验是相当不好的，不仅是微信小程序这个东西本身就很麻烦和丑陋，而且给我找的帮手水平也是真的不行，代码各种乱写，码风一言难尽，不管\nTypeScript 报错，还经常在代码里面写死数据，导致后面各种排查，React\n框架也不熟悉，能写出各种惊为天人的异世界操作。另外，开发的时候产品那边给的需求也没有一下子说清楚，和产品那边的沟通还是有了点障碍，确实有点难绷了。\n2023.03.23\n今天组会，整体上汇报没什么问题，就是似乎进度还是不是很理想，老师们都建议考虑先至少把实验跑起来然后试着简化一下目标来混过中期。\n对着之前写的毕设目标记录一下最近的工作吧：\n\n验证原框架是否可用\n\n(Completed) 重新拉取原框架，完全不修改直接运行，确认其效果\n若原框架可用，则 debug，若不可用，换框架\n换框架可能流程\n\n(Completed) 通过邮件联系作者获取 code base\n(Aborted) 找寻引用这篇论文的开源 code base\n\n(In progress) 需要研读 code base，形成完整的 paper report 和 code\ndoc\n\nPensieve 迁移\n\n(In progress) 写完通过 MPC 求解 Pensieve 的代码并运行\n(Completed) 研究 Pensieve environment（在线直播环境）\n\n数据集生成\n\n(Completed) 获取黄老师的 network trace data repo\n(In progress) 准备数据剪切脚本\n(Planned) 训练 baseline Pensieve\n\n\n总之今天黄老师帮忙鉴定了一下我想参考的论文之后，得出了这个方法是基于\nMAML 的结论，并且断言这个方法至少一定能用，所以这个 code base\n应该依然是可以使用的，只是超参数设定等需要调整一下。而这个超参数设定的事情，我在\nHalfCheetah 和 Ant\n两个环境下使用了论文给出的超参数，但是都没有获取到相当理想的结果，但也不差，至少能优于传统的\nMAML。不过为了保险还是给作者发了邮件问了一下超参数的设定，好玩的是，这个\ncode base 的 repo 里面还有有关超参数设置的 open\nissue，作者似乎在里面回复了一个很快就来，但是已经两年多过去了还是没点动静。这个框架的\ncode report 自然还在路上。\nPensieve 迁移遇到的问题是如何建立一个较为合理的 Pensieve environment\n并合并到 code base 里面，而这个合并中最难的就是如何描述 Pensieve\n的状态和决策空间，一般而言 Pensieve\n的状态空间和决策空间都并不是传统意义上的高维空间，而更像是 hand craft\n出来的一堆 tensor 构成的离散集合。而我参考的这个 code base\n里面的环境基本都是描述成高维空间中的 Box\n的，这不难理解，因为这篇文章主要在做动作连续控制，所以状态、决策空间基本上都是\nBox 描述。而这里黄老师也给了我一份代码 repo，这份代码将 Pensieve\n的状态、决策空间做了转换，即也用 Box\n描述，恰好可以解决我目前遇到的问题。\n然后就是 baseline 构建的问题，现在我似乎并不打算构建很多复杂的\ntrace，先从简单的规律性切换开始吧，数据集造完之后就可以准备上手测试了。\n今晚约了麦当劳和游泳，明天打算去看电影，而且还有一个非常麻烦的毕设动员会，干活的时间确实不太多了。\n\n今天开了软工小例会，也没有什么好说的，手下的四个组进度都比较符合预期，看看大家下周\nSprint1 能交上来什么东西吧。\n2023.03.24\n周五，本来就约好了去西单出勤，于是就去了西西友谊机厅出勤，那里有一台最新最热。整体而言出勤不太理想，没有上分也没打爽，因为人实在是太多了，大概一直维持在八九个人的高位。\n由于和学弟约了七点半的电影，于是六点半赶忙从西单往海淀黄庄赶，然而我错误估计了周五晚的北京晚高峰，我真的完全堵在西二环上半个小时。最终电影自然是赶不上了，到达新中关的时候已经是电影开场半小时，想了想也没必要去看这个了，所以坐了地铁两站路去了万柳机厅出勤。万柳机厅最大的问题就是只有一台机子却整整有六七个人的规模，然后还没买水的自动售货机，所以又是不太舒服的出勤体验。\n晚上回到宿舍就是打打德州扑克摸摸鱼，然后自然就这样结束了摸鱼的一整天。\n2023.03.25\n来工位赶中期，没想到贾老师也在。似乎今天还正好是全高赛开赛，zsj\n开了直播间直播你清海选第一轮，于是就边看边做事了。比赛的走势整体没什么特别的，所以也没怎么重点观看，还是以做事为主。\n今天主要是写完了 Data loader，写完了 network trace\n切换的代码，然后生成了一份训练集和测试集用在训练 Pensieve baseline\n上。另外由于目前的数据集并不太充足，当时突然想到可以用两条位于同一环境的\ntrace 之间做切换来做数据集扩充，这样的话勉强够使用了。目前 baseline\n的设计是，三类训练集和四部分的测试集：\n\n训练集\n\n#1. 由无切换的 4G 行走、4G 驾驶 trace\n组成的训练集（使用数据扩充保证数据集规模一致）\n#2. 所有无切换 4G trace 与 3 次等间隔环境切换 trace 3:2 混合\n#3. 所有无切换 4G trace 与 3 次等间隔环境切换 trace 与随机环境切换\ntrace 3:1:1 混合\n\n测试集\n\n#1. 4G 行走 trace\n#2. 4G 驾驶 trace\n#3. 3 次等间隔环境切换 trace\n\n\n数据集弄好之后，从黄老师的 Pensieve 5G repo\n那里弄来一份超参数设置，然后就开始训练了。比较好玩的一点，不知道为什么，似乎使用\n#1 数据集训练的似乎在一开始（3k epoch\n以内）反倒在有切换的环境下表现很好，甚至在 #3\n测试集上达到了较为明显的正向 reward，而在 #1 和 #2 测试集上甚至还是负\nreward。\n现在这个实验跑一次七八个小时，三种训练集全都跑完估计得一两天，所以结果汇报还得再等等，我先放个占位表格在这里。这里均是训练\n100k epoch 之后的结果汇报。另外还把黄老师那边的 PPO 的 Penseive\n拉出来玩玩，自己手上的这个是基于 A3C 的，还写的不是很好：\n\n\n\n\n\n\n\n\n\n\n\n无切换训练集\n等间隔切换训练集\n随机切换训练集\nPPO 版本 Pensieve\n\n\n\n\n4G 行走测试\n12.99\n14.35\n19.28\n19.81\n\n\n4G 驾驶测试\n16.88\n17.66\n16.25\n14.82\n\n\n等间隔切换测试\n7.16\n7.42\n5.91\n5.39\n\n\n\n此外 26\n号获得的一个训练曲线就报告在这里吧，这是等间隔切换训练集的训练曲线：\n\n随机切换的训练曲线是：\n\n目前总之是能明显观察到仅仅通过扩充数据集是不能完全解决这个问题的，扩充数据集确实可以提升结果，但是极其有限，在有切换的测试集上的表现依然和无切换的存在段差。另外，更换\nRL 算法也不完全能够解决问题。\n另外，根据 AABR 论文的结果，即使 4G\n网络在驾驶和行走这两个环境间差距并没有如此之大：\n\n而这里使用的训练集中：\n\n\n\n\n4G 行走\n4G 驾驶\n\n\n\n\n均值\n32.13\n39.34\n\n\n方差\n860.32\n839.72\n\n\n\n可以发现事实上差距并没有想象中那么大，但其之间的切换依然会导致 Naive\nPensieve 完全无法适应。\n不过这里我有一个想法，既然差距并没有这么大，那么这两个网络的特征到底是什么的呢？到底是什么决定了这个\ntrace 更像是行走时测出来的还是驾驶时测出来的，这个我觉得应该要画几个\ntrace 出来研究一下。\n\n这里应该还需要辅以部分 log 分析，log\n分析的话就等第三个随机切换训练集弄完后基于那个 log\n做一些分析。这些分析应该就构成了下述论点的证明：\nNaive Pensieve 仅仅依靠于扩充训练集或者更换\nRL 算法是无法解决线上环境切换的问题的。\n\n这也就否定了简单的传统方法在这里的应用，从而构成了解决方案必要性的验证，下面毕设中期可能就缺一个比较好的方案可行性验证了。\n2023.03.26\n先前买的日语中高级语法教程到了，于是取了快递准备带去\nFIT，但是偶然发现今天天气极其舒服，于是把骑着的共享单车扔在清芬，边看书边走去\nFIT 了。到了 FIT 之后依然是一点点做事的心情也没有，Pensieve baseline\n还在训练，按理说现在就应该准备写 code doc\n然后做好迁移工作放上去训练，但是显然我摸鱼摸鱼到了现在。\n现在比较难受的一件事情就是我似乎不太清楚迁移到 Pensieve\n之后应该用什么数据集做训练，现在还有点难绷，我可能还真的得好好思考一下这个问题。这个问题的思路就是好好阅读一下代码框架，研究一下原先基于\nGymnasium 环境的训练算法策略，基于此将 Pensieve\n中的概念与框架代码做一下一一对应，之后就应该能摸明白最后的逻辑了。\n晚上是真的没心情继续做事了，于是偷摸去了五道口出勤，出到闭店之后回来继续干活。不过似乎实习那边的\nbug\n一直还要我修，基础技能培训我也得准备，现在总之就是事情还挺麻烦的。\n\n目前仔细阅读了一下 GrBAL\n代码框架，有一些笔记就写在这里了，这里都是备忘：\n\nconfig 里面的 meta_batch_size\n应该代表的是目前训练多少个 meta task，似乎就是论文里的 #Task/itr，或者说\nN\nconfig 里面的 adapt_batch_size\n应该基本对应采样的时候使用多少的 trajectory 节点通过元学习策略 uψ*\n来更新 dynamic model 的参数 θ，也就是论文中的 M\n似乎代码框架内没有设置 nS\n参数的地方，其 MB trainer 之中每一个 iteration 都会通过 Algorithm 2 收集\nrollouts\nMetaMLPDynamics 中的 self.learning_rate\n就是 Algorithm 1 中的参数 β，另外其中定义的\nself.train_op 就是以学习率 β 优化\nself.post_loss，而这就是 $1/N\n\\sum_{i = 1}^N \\mathcal{L}_j$\n\n这里我们就直接研究一下 Meta MLP Dynamics\n的结构究竟如何。首先他为每一个 meta task 都建立了一个 pre MLP 和一个\npost MLP，用来预测一个代码中名为 delta_pred\n的变量。而这个变量参与了下述 loss 的计算：\nPythonpre_delta_pred = pre_mlp.output_varpre_loss = tf.reduce_mean(tf.square(pre_delta_per_task[idx] - pre_delta_pred))# ...post_delta_pred = post_mlp.output_varpost_loss = tf.reduce_mean(tf.square(post_delta_per_task[idx] - post_delta_pred))\n这里就是简单的 MSE 均方误差，这里观察一下论文给出的 loss\nfunction，这是一个刻画当前 trajectory slice 和 dynamics\n所希望的（或者说所预测的）trajectory slice 的吻合程度的 loss，最小化这个\nloss 的效果就是让 dynamics 学习采样到的 trajectory，使得其模拟出来的\ntrajectory 贴合实际采样：\n$$\n\\mathcal{L}(\\tau_{\\mathcal{E}}(t, t + K), \\theta_{\\mathcal{E}}') :=\n-\\frac{1}{K} \\sum_{k = t}^{t + K} \\ln\n\\hat{p}_{\\theta_{\\mathcal{E}}'}(s_{k + 1} \\mid s_k, a_k)\n$$\n这里的 θℰ′\n表示已经在环境 ℰ 下 adapt 过的 dynamics\n参数。\n这里代码和论文矛盾的点有一，即论文中 loss function 是基于一个非确定的\ndynamics，即 p := p̂θℰ′(sk + 1∣sk,ak)。然而代码中接受\nself.obs_ph 以及 self.act_ph 并输出\nself.delta_pred 的 MLP 却显然更像确定性 dynamics，即 sk + 1 := p̂θℰ′(sk,ak)。\npost loss 的用处就是用来更新 dynamics 的参数 θ，学习率为 β。pre loss\n则似乎和元学习策略有关，但后续没在代码框架内寻找到这个变量的引用。\n\n决定换个思路了，在内部兜兜转转不如直接一点点剥开代码框架，把每个张量维度算清楚。论文中的算法有个相当明显的接口点，就是\nAlgorithm 1 和 Algorithm 2 之间通过 sampler 沟通，所以首先先去把握\nsampler 给出的样本的尺寸。\nsampler 给出的 observation sample 尺寸为\n(n_rollouts, n_timestep, obs_dim)，action sample 尺寸为\n(n_rollouts, n_timestep, act_dim)。总体是符合想象的，也就是给出了\nn_rollout 个轨迹，轨迹长度（总时间步）为\nn_timestep，然后第三个维度就是具体的每个时间步的观测状态和决策。\n进入 dynamics 的 fit\n函数，首先是把这个数据集划分成训练集和验证集，这个划分是在第一个维度上进行的，也就是把\nn_rollout 个轨迹按照比例拆分。拆分完了就堆叠到训练集\nself._dataset_train 和验证集\nself._dataset_test 上。\n下面就是看他的 batch 生成。对每一个 meta task，首先在\n[0, n_rollout) 里随机一个\ntrajectory，之后选择一个中间点，向前截取 M 个时间步，向后截取 M\n个时间步。这里就出现了问题，代码中明显假设了 M = K，也就是说在\ntrajectory\n上前向和后向截取了相同的长度，这一点显然和论文中是不一样的。\n然后还有一点更为疑惑：\nPythonnum_paths, len_path = self._dataset_train[&quot;obs&quot;].shape[:2]idx_path = np.random.randint(0, num_paths, size=self.meta_batch_size)idx_batch = np.random.randint(self.batch_size, len_path - self.batch_size, size=self.meta_batch_size)obs_batch = np.concatenate(    [        self._dataset_train[&quot;obs&quot;][ip, ib - self.batch_size : ib + self.batch_size, :]            for ip, ib in zip(idx_path, idx_batch)    ],    axis=0,)\n这里关注他如何访问\nself._dataset_train[\"obs\"]，第一个维度其直接写了一个标量\nip 上去，这样会导致第一个维度消失，虽说后面指定的是\naxis=0，实际上是在第二个维度上做合并的。由于\nidx_path 长度为 self.meta_batch_size，也就是\nN，而第二个维度每个 trajectory\n取用了 2M\n的长度，所以最后得到的 obs_batch 尺寸为\n(2MN, obs_dim)。\n这里明显做了很多的混同处理，比如根本体现不出来任务的差别，也体现不出来截取的作用。然而有个好处在于虽然融合了，但是这个\nbatch 第一个维度上的有序性至少保证我们之后可以再次把这个 batch 按照不同\nmeta task 拆分，虽然这也太丑陋了。\n另外补充一句，delta 的含义就是\nobs_next - obs，就是后续状态减去前置状态，即决策后的状态变化量。\n获取 batch 之后就是喂到网络里算 post loss、pre loss，然后用优化器反传\npost loss\n更新网络。这里的认识就和上面的对上了，没什么新的，就不再写一遍了。\n\n把这些看明白之后我终于看明白了原先构建网络的时候的下面这段代码：\nPythonnn_input_per_task = tf.split(self.nn_input, self.meta_batch_size, axis=0)delta_per_task = tf.split(self.delta_ph, self.meta_batch_size, axis=0)pre_input_per_task, post_input_per_task = zip(    *[tf.split(nn_input, 2, axis=0) for nn_input in nn_input_per_task])pre_delta_per_task, post_delta_per_task = zip(    *[tf.split(delta, 2, axis=0) for delta in delta_per_task])\n他真的是我想的那样，依靠着那若有若无的有序性，先在生成 batch\n的时候消失掉一个维度，然后再在这里凭空 split 出来。\n这里 self.delta_ph 尺寸是\n(2MN, obs_dim)，在第一个维度上按照 meta batch size，即\nN，等分，得到的张量尺寸为\n(N, 2M, obs_dim)，并且恰好恢复了各个 meta task\n的区别。然后遍历，列表产生式之中的 delta 尺寸为\n(2M, obs_dim)，再将其沿第一个维度两等份，前半自然是\npre，后者自然是 post，尺寸变为 (2, M, obs_dim)。之后用\nzip 函数重新组合一下，这里 zip 接受了 N 个尺寸为\n(2, M, obs_dim) 的张量作为参数，最后传出 2 个尺寸为 (N, M, obs_dim)\n的张量。\n取 obs_dim=1 以及 N = 3, M = 2\n演示一下这个过程。下述 self.delta_ph 中\n0, 1, 2, 3 属于 meta task #0，以此类推。并且\n0, 1 是 pre observation，2, 3 是 post\nobservation：\nTextself.delta_ph = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]-&gt;delta_per_task = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]-&gt;delta (example) = [4, 5, 6, 7]tf.split(delta, 2, axis=0) = [[4, 5], [6, 7]]*[tf.split(delta, 2, axis=0) for delta in delta_per_task] =    [[0, 1], [2, 3]], [[4, 5], [6, 7]], [[8, 9], [10, 11]]-&gt;pre_delta_per_task = [[0, 1], [4, 5], [8, 9]]post_delta_per_task = [[2, 3], [6, 7], [10, 11]]\n这样确实同时完成了按 meta task 分割以及按 pre/post\n分割两个任务，实在是高。\n\n把这些都看明白之后，就可以明白这里 loss function\n实际上和论文不一样。代码里写的事实上是一个 deterministic\ndynamics，建模是 δt := p̂θℰ′(st,at)，也就是用\nMLP 预测状态的变化量，再与实际的状态变化量作\nMSE（符号就随便用了，我看得懂就行）：\n$$\n\\mathcal{L}(\\tau_{\\mathcal{E}}(t, t + K), \\theta_{\\mathcal{E}}') :=\n\\frac{1}{K \\cdot \\dim\\mathcal{S}} \\sum_{k = t}^{t + K}\n\\bigoplus_{\\mathcal{S}} [\\hat{p}_{\\theta_{\\mathcal{E}}'}(s_k, a_k) -\n(s_{t + 1} - s_t)]^{\\otimes 2}\n$$\n这里上标  ⊗ 2 表示按元素平方，符号\n⨁𝒮 表示求所有元素的和。\n2023.03.27\n昨天太累了，今天就起得很晚，到 FIT\n的时候已经是四点多五点了，草草吃了晚饭就开始干活。\n昨天看了大半 GrBAL 之后，现在又有个未解之谜就是 ψ\n在哪里，这个元学习参数居然一下子没找到，而且我现在也暂且不太明白到底什么时候\nθ 通过元学习被优化到了 θℰ′。\n不过最终还是给我挖出来了，在构建网络的时候有这么一段代码：\nPythondef __init__(self, ...):    # ...    pre_delta_pred = pre_mlp.output_var    pre_loss = tf.reduce_mean(tf.square(pre_delta_per_task[idx] - pre_delta_pred))    adapted_params = self._adapt_sym(pre_loss, pre_mlp.get_params())    self._adapted_params.append(adapted_params)    # ...def _adapt_sym(self, loss, params_var):    update_param_keys = list(params_var.keys())    grads = tf.gradients(loss, [params_var[key] for key in update_param_keys])    gradients = dict(zip(update_param_keys, grads))    # Gradient descent    adapted_policy_params = [        params_var[key] - tf.multiply(self.inner_learning_rate, gradients[key])            for key in update_param_keys    ]    adapted_policy_params_dict = OrderedDict(zip(update_param_keys, adapted_policy_params))    return adapted_policy_params_dict\n这里就是非常简单的，把 pre MLP 参数和 pre loss 扔到\nself._adapt_sym 里面去，而这个函数里面构建的就是：\nθℰ′ ← uψ(τℰ(t−M,t−1),θ)\n的 adapt 过程。这个 adapt 过程在论文中具体定义为：\n$$\n\\theta_{\\mathcal{E}}' = \\theta_{\\mathcal{E}} +\n\\psi\\nabla_{\\theta}\\frac{1}{M}\\sum_{m = t - M}^{t -\n1}\\ln\\hat{p}_{\\theta_{\\mathcal{E}}}(s_{m + 1} \\mid s_m, a_m)\n$$\n这里显然还是和昨天提到的问题一样，论文和代码没有对的上，dynamics\n是确定性的，pre loss 也更像是\nMSE。不过这里根据代码实现看，self.inner_learning_rate\n就是元学习参数 ψ。下面一步就是找这个量究竟什么时候被实际计算，另外，何时其更新了元学习参数\nψ。可以注意到这些要被更新的参数全都压入了\nself._adapted_params，找寻这个变量的引用就可确定出 adapt\n实际执行的位置。\n简单找一下就能找到这个类里面的 self.adapt\n方法就是实际执行的地方，继续找这个成员函数调用的地方，就会发现其仅仅在\nsim_policy.py 中调用，那么就可以确定这个函数是用于线上\nadapt dynamics 的。\n说实话目前这个框架里面还有很多地方我没有研究明白，比如说到现在我都不知道其构建这么多\nMLP 的用处是什么，以及论文里的 θ, ψ\n是否就如我理解这样，包括 ψ\n的训练究竟在哪里之类的问题。但是由于数据集加载策略我已经弄明白了，所以说实话可以先去载入数据集跑一跑看看结果了。\n\n今晚偷摸去五道口出勤 2pc\n之后回来，说起来昨天因为有人扒防盗门晚勤，导致商场领导直接下令禁止晚勤，所以现在晚上真的只能打到十点，反倒是帮我自律了。\n回来之后去了 C 楼继续写毕设，Pensieve\n的迁移工作总之还是有点麻烦的，reward function 要自己补写一点，然后由于\nPensieve\n是离散决策空间，导致有些地方需要自己做一点适配。适配的过程中最大的修改就是把\nPensieveEnvPark 里的 self._action_space\n从离散的改成了连续的，也就是从 Discrete 修改为了\nBox。这样做的原因是整个代码框架都是基于连续决策空间的，所以为了最小化修改，我直接把决策空间改为连续，而在实际处理\nnetwork trace 或者 video chunk\n之前会把连续决策空间采样向下取整到离散空间内。\n不过这些都还好，主要有一个 bug 是 logger 炸了，简单而言 logger\n里面有这样的一段代码：\nPythonclass Logger:    CURRENT = None    def __init__(self, ...):        passdef configure(...):    # ...        Logger.CURRENT = Logger(...)\n这段代码的语义并不难理解，就是在 Logger\n类里面的静态成员中存储了当前要使用的 logger 的引用，这个引用的初始化是在\nconfigure\n函数中进行的，这个函数会在所有训练脚本的最开始就调用。然而这个在我跑实验的过程中却出现了问题，我把新加的脚本、环境等代码都放在了根目录下另外一个目录\nsrc 里面，以与位于根目录下 learning_to_adapt\n目录中的原先的实验脚本作区分，logger 的代码也位于\nlearning_to_adapt 目录下。结果，我在 src\n目录下的实验脚本调用 configure 初始化 logger，在\nlearning_to_adapt 目录下的代码文件中访问\nlogger.CURRENT 的时候却只能获得 None，即使我在\nsrc 目录下访问 logger 一切正常。我猜测是不同目录 import\n同样的东西的时候，事实上 Python\n创建了不同的引用。不过我现在也没有精力去找这种小问题的解答了，我直接合并了两个目录然后把实验挂了上去就准备睡觉了。\n\n最近很喜欢这句话：\n\n思ひつつ寝ればや人の見えつらむ、夢と知りせば覚めざらましを。\n\n这是出自小野小町的一句古日语和歌，翻译成现代日语和汉语的话：\n\n恋しい人のことを思いながら寝てしまったらあの人の夢を見たわ、夢とわかっていたなら覚めなかったろうに。\n（王向远译）思君方入梦，若知相逢在梦境，但愿长眠不复醒。\n\n这句和歌也算是我学古日语的时候很早就遇到的一句例文，是在讲解过去助动词「き」的未然形「せ」可以与表示反事实假想的助动词「まし」构成表示假想的句式「〜せば〜まし」这一知识点的时候提到的。当然要说语法点的话，这里还有很多可以讲的，包括少见的单音节下二段动词「@ 寝 ぬ」，表示完了的助动词「つ」、表示现在推测的助动词「らむ」、表示否定的助动词「ざる」等等。\n然而这句话确实也很有意境，如果知道我们只有可能在梦中相遇，那么即使不可能，我也愿意长眠不醒。现代日语中没有专门表达反事实假想的词语或句式，只能用通用的表达愿望的句式「〜だろう、〜たろう、〜でしょう、〜ましょう、〜ように」等等，这个与现实抗争的感觉就没出来。\n不过我现在确实很累，确实希望长眠不醒了。\n2023.03.28\n又是一天八点睡下午四点起，今天实在是忍不下去了，把攒了一周的胡子刮干净，头发太长就随他去吧，就这样收拾了一下自己，到工位开始工作的时候已经是晚上六点。不过要我说，最近的精神状态非常怪异，明明身心都很劳累，但是似乎却有种奇妙的满足感和：\n\nこの生活こそおれのほしいものって、いまこそおれは確実に生きていると感じている、疲れていても。\n\n这句话是前天大晚上熬夜的时候听到香椎老师的歌的时候突然想到然后写在草稿纸上的，草稿纸的另一半是潦草的神经网络设计图，倒也有种莫名的不调和感。\n昨天跑下来\nPensieve，至少训练没崩盘，是一个正常的训练曲线，今天就是得调试一下\nreward 函数让其与 baseline\n做一个公平竞争，这样就能构成方案的可行性验证。\n现在在尝试着把训练过程中的 reward 弄出来。总体来说，sampler 使用\nAlgorithm 2\n采样数据的时候，事实上就已经在做测试了，就已经在和训练集同样的环境下（Pensieve\n环境生成 trace 的逻辑一致）测试 MPC Controller\n的性能了，因为其基本就是基本在循环下述过程：\n\n收集采样数据，对 dynamics 做 adaptation\nadaptation 之后用 MPC Controller 做决策\n用这个决策 step environment，获取新的环境状态，作为新的采样\n\n而在 Meta MLP Dynamics 里面做的训练集和验证机切分是用来算 loss\n的，他有训练集 loss 和验证集 loss。\n也就是说，实际上用来做验证集 reward 的，应该就是采样时返回的那些\nreward 信号，现在我已经把这些信号接入到 logger 里面了。\n然而做好这些之后挂了一下实验，发现验证集上 reward 能打到 50\n上下，这显然太离谱了，因为即使 GrBAL 再怎么强，比 Pensieve 高出 400%\n左右多少是不太对的。回到宿舍后思考了一下，觉得是验证集不可信，因为验证集毕竟和训练集来自同样的数据池，很有可能过拟合。所以迅速写了一个在另外的数据池上测试的脚本，挂了上去，顺便增加了一个把所有决策和环境信息输出出来的\nlogger。\n最后看完 logger 的记录后，总算是明白了。MPC Controller\n似乎是相当激进的，其特别喜欢拉高码率，即使在低带宽环境下。这就导致在带宽还可以的环境下就能拉满\nQoE，然而由于数据集低带宽环境毕竟有限（得益于现在的网络基础设施优化），所以\nrebuffer 并没有预想中那么多，rebuffer penalty 也就没有把 reward\n拉到很低。然而如果从直观上来讲，虽然其 reward 达到了 50\n左右，其经常会在低带宽下出现十几秒的卡顿，这显然是不可接受的行为，所以这也就是\naverage QoE 的评价缺陷了。\n既然整体实验框架没啥问题我就打算一直跑着了，目前的话，reward\n大概也是十几，至少达到了一般水平吧。这么说中期至少是有内容可以汇报的了，现在就差做一个\nPPT\n出来了，最后还是决定明天再做了，正好看一眼训练结果。然后一定要记住还要做一下\nbaseline log 的详细分析。\n2023.03.29\n中午稍微起早了点赶到工位开始做中期\nPPT，在这之中还花了点时间查看了一下软工小组的工作进度，目前来看还都一切正常。\n在做 PPT 的过程中和黄老师交流了一下目前的毕设，大家似乎都比较震惊于\nPensieve 真的打不过 model based 方法。不过基本上看了一眼 log\n之后都反应过来 Pensieve 决策保守了，而 GrBAL 实在是太激进了。\n中期整体上没有什么大问题，黄老师过了一下我的 PPT\n后也觉得没有大问题，提了一下多加几张图的建议，然后给我推荐了 LUMOS 5G\ndataset 以及一位名为 Qian Feng 的\nscholar，大概也是做环境切换相关的，可以后半段尝试去学习一下这些材料。\n\n中期答辩基本上平稳地过去了，把实验结果汇报了之后，三位评审老师也没有什么很尖锐的问题，只有一位老师问了点简单的问题就放我走了。然而现在的问题就在于，我目前做出来的结果到底可不可信，因为确实感觉和大家长久以来的经验有不相符的地方，至少目前有几个值得验证的疑点：\n\nbaseline 过弱，训练错误等问题\n数据集设计有问题，应当多随机生成几次重复实验\nGrBAL 实验成果不一定稳定，dynamics model\n的预测效果也应当重复确认\n\n至少在进行中期答辩 PPT\n上所写的未来研究之前，我还是打算把这些问题给思考清楚。\n然后就是其他的一些杂事了，现在安排如下：\n\n周四组会、软工 Sprint1 组会，晚上出勤\n周五 LVS 会议，预计早起前往\n周六 LVS 会议，预计晚归\n周日基础技能培训线下授课\n有 DDL 的任务\n\n提出不再负责微信小程序开发，转 Rust 后台开发\n周六晚前完成基础技能培训课件供审核\n\n\n最近确实是没有什么很重要的任务了，确实可以计划摆烂了，毕竟最终答辩差不多得到六月，中间两个月可以自由摆烂。目前日语中高级教程还想自学，日语自学笔记也还有很多想写的，DRL\n的任务也想好好做，也想出勤、打雀、旅游，总之就是什么都想做，毕竟没有什么硬性要求了。\n2023.03.30\n周四，安排中有相当多的会议，首先是下午的组会，然后是软工 Sprint1\n的验收会，然后是实习那边要有个需求对接会。一起床我就在赶场子，三场会总算是赶完了。\n然后最后一场会开完之后，收到了坐标想要出勤的申请，于是立刻放下活计跑去上地先吃萨莉亚后出勤。然而周四晚上的上地也是一堆人，完全没打到几把就只能悻悻离场。\n晚上就简单摸鱼，然后就要早睡早起去 LVS\n了。周四真的是一点值得记录的事情都没有呢。\n2023.03.31\n早起去\nLVS，路上还遇到了前来访华的马来西亚总理的车队，警察暂时管制了一个路口的交通，让我小等了几分钟。\nLVS\n说实话感觉并没有想象中的有趣，上午的开场致辞很有意思，然而紧接着后面的，就是一个很像民科发言一般的\nChatGPT\n威胁论演讲，其中不乏人工智能已经逼近人类智能云云。而第三场是一位浙大教授的演讲，其提出了可以在传输视频的时候用语义编码代替字节编码，也就是不再逐帧逐字节编码视频内容，而是直接描述视频内容以编码，这个观点倒是第一次听，还挺有意思的。\n之后就没什么有趣的了，午饭期待值很高但是最终也只能说无功无过，和学长说了打算提前跑之后，就溜到了四道口的机厅去出勤了。四道口机厅有\nWiFi、有插座、有自动贩卖机而且人还不多，简直是出勤圣地，然而离学校确实是太远了。\n2023.04.01\n按照计划是要去 LVS\n的，但是显然是摆烂了，于是就打算在宿舍里好好把明天基础技能培训的课件给做了。\n结果是摆得真的很烂，一整天啥都没做出来，倒是由于找到了 Dynamix 的\nMalody 皮肤于是又拾起了\n4k，打了一整天。晚上实习那边还有要修的东西，理论上是要一并修好的，结果晚上是一个都没做完。于是不得不通宵接着做，到六点钟终于把课件做完了。\n2023.04.02\n基础技能培训看起来是真的组织上出现了一些问题，一共就来了四位同学，于是就变成了我的小班课，随便讲讲就过了。然而在此之后比较麻烦，因为实习那边一直在催，但我依然顶着压力先去了五道口。\n晚上简单开个会之后开始修东西，但没有想到工作时长超出了预料，工作效率也低到不敢想象，一直做到早上六点都没做完，于是只能睡觉了。\n2023.04.03\n周一，还是得赶快把实习那边的活清理掉，于是一下午把东西做完之后，立刻赶往上地出勤。\n其实本来是想和舍友去吃巴依老爷的，但是没想到我一直做到晚饭点都没做完，所以没办法只能不去了。\n今天出勤收获颇丰，不仅成功上了 7k4 底分，还杀掉了几个心心念念的 13 和\n13+。然而现在比较好玩的是，我整整有六七个 100.1% 以下鸟的\n13+，按照我的强迫症，事实上我很想把这些都再推进一下，但是实在是没有实力去往上打了。\n2023.04.04\n终于按照自己的想法摸鱼了一整天，首先是睡到自然醒，然后打理了一下自己，刮胡子、剪头，收拾了一下宿舍，然后去采购了一圈，吃了顿校内比较好的食堂就去了上地出勤。出勤完了回来游泳，之后再去吃了点小夜宵。整体就是讲究一个随心所欲。\n然而实习那边还在 bug report，我是真的完全不想搭理了。目前计划就是一切\nbug report 都留到周四完成，其余时间完全摆烂，或者愿意做的话就做做。\n明天是 V+ 群组 K，还是正常摸一天鱼，过一天正常的清明节假期。\n2023.04.05\n组 K\n比较混乱，原因大概是两个。一是这次没有中日分场，而群友确实很少有中日 V+\n双修的，导致两边都没有尽兴，二是由于清明节纯 K\n一点房间都没有，四点半结束之后无法和往常一样续时，所以只能草草结束。草草结束后，群友对各自的去向显然是完全没有安排的，原先的安排是续时到六点半到七点左右，然后部分群友直接去某个在东城区举办的\nlivehouse，剩余的则回校。然而由于无法续时，所以中间出现了两三个小时的空窗期。\n我当时在音游地图上找了一下，似乎国贸附近就有一家新机厅，于是我就直接前往了。剩余的群友则部分回校，部分在国贸附近另找游乐场所。\n新机厅的好处就在于机子是全新的，手感非常好。并且机厅周边就有饭店，有自动售货机，有充电宝租借桩，旁边就直接能进角门东地铁站，基础设施相当完善，整体来看，简直是理想的机厅。另外，由于是新机厅，所以几乎没有什么人，从晚上八点开始，就只有我一个人在打了。\n今天晚上解决了不少 13+，包括秘密信徒和 GRÄNDIR\n之类的，然后手痒试了一下齿轮，没想到打到了 SS，瞬间兴趣就上来了。\n2023.04.06\n周四例行三场会，组会、软工助教会和实习会。这次软工助教会整体有点奇妙，因为投屏我不太会用导致大家的\nPPT 都播放不出来。\n草草开完会之后就去了五道口，今天就没有推很多的分，只不过狂练了一波齿轮上了\n99.5，但是现在似乎还是有点欠缺体力所以还是暂且不打为好。\n每周四都是实在没什么可以记录的，都是开会，开会的内容也实在不是很想写。\n2023.04.07\n周五，因为完全没有安排所以直接就早起出勤了。早上到达上地的时候全都是我认识的熟人，基本上想单刷和他们说一声都可以。下午出现了一段明显的空窗期，整个机厅就我一个人，刷了大概三个小时左右，期间鸟加了捕物帐，还恰好录上了手元。\n然而靠近傍晚的七八点钟的时候人突然就多起来了，最后在八点达到了 13\n人的规模，这完全打不了了，所以赶快回宿舍。\n回来之后把数据库给写完，听闻舍友确实打算前往无锡，于是也就开始规划下一周南下的旅程。\n2023.04.08\n南下基本都确定好了，所以就基本上是在做准备，比如洗洗衣服之类的。另外，把票订了一下，酒店定好。目前计划是周日早起去无锡，在无锡呆一天半，周二早前往南京，在南京玩到周三晚回北京。在无锡干什么暂且没有想好，但是在南京已经约了一小波人打算把高中化学竞赛的时候走过的路再走走。\n现在想到那段时光还是有点神伤，一个人在外，虽然现在看来完全不算什么远门，但在当时高中生的视角，确乎有着比较重要的意义。\n然后这些事情忙完，也都是晚上了，赶快开始做实习那边的事情，尽快把麻烦事解决掉比较好。\n晚上开始熬夜做 DRL\n的作业，最后在凌晨五点差不多顺利做完，然而由于定的去无锡的火车是六点半发车，于是赶急赶忙收拾东西立刻出发。\n2023.04.09\n一整天都在赶路，先赶到北京南站抢在截止前两分钟成功上车，上车之后立刻开始爆睡，睡到无锡东站之后又开始漫长的地铁。中途发现实在是太饿了，于是在三阳广场下来吃了一顿松鹤楼垫肚子，继续赶路，下午一点半两点左右到了住处，一躺，又是一觉睡到下午五点多准备吃晚饭了。\n一整天睡了吃吃了睡，还累的要死，果然赶路还是难受。\n晚上去滨湖万达转了一圈，和舍友找了很长时间到底去吃什么，结果找来找去万达里面除了那种炸串、火锅这些量产式的店面之外也就没啥了，最后只能随便挑了个名义上说江浙菜的菜馆去吃了。然而实际上，这家店确实是不好吃，红烧肉很柴，大煮干丝汤底没味道，总之就是完全不值。\n吃完晚饭，舍友去超算中心开会去了，我就在万达机厅稍微出勤了一会，不得不说滨湖万达的机子真的是烂，手感极差，屏幕很粘而且吃星星，硬打了一个\nAP 病女之后就敢赶快回去睡觉了。\n2023.04.10\n早上舍友早早就出门去中心干活了，我一路睡到中午自然醒，去楼下找了个面馆吃了午饭之后就开始无锡闲逛。\n先是趁人少去出勤了一小会，中途由于实习那边实在是有点事情，加上人越来越多，于是就找了个万达里面的咖啡馆坐下来把事情清理了一下。其实我倒是挺感叹的，无锡滨湖区就这么一台机子，机子还这么烂，滨湖区的这些玩家就得挤着用这台破机子上分，是真的有点感慨的意味了。\n实习那边的事情清理掉之后，决定去太湖看看，于是骑上车去了鼋头渚的方向，不得不说由于空气很好、很透亮，太湖周边的景色是真的纯净。同时期，我的朋友圈里全都是在发北京沙尘暴来袭的事情，只能说，江南还就是这一点好得多。\n晚上和舍友以及 20\n去了米桃去吃无锡菜，这家本来是想前一天就去吃的，但是三阳广场那边的那一家在中午的时候排队太夸张了，只能作废。这家菜馆就是那种较为精致的淮扬菜和当地菜，松鼠桂鱼、响油鳝糊这种菜也能做出来，而且确实做得不错。吃完之后沿着蠡湖转了转，舍友和\n20 由于赶着回去开组会，于是也没多久就得走了。\n最后依然无所事事的我又去滨湖万达出勤了，不过这次没人，把之前买的套餐游戏币打光之后就回宾馆了。晚上和舍友打了一会牌，也就收拾东西准备第二天去南京了。\n2023.04.11\n早上赶路去南京，大概十二点左右到达宾馆，收拾好东西，就去遇游客他们一行人。中午吃了游客推荐的泰式大排档，确实可以，但是点的有点多，最后没吃完。\n下午就去南师大和南大了，主要是打算去找找 2017、2018\n年去过的那些地方。先是南师大，简单找了找就很快找到了 18\n年考完化学复赛后和同学蹲在路边骂出题人的马路牙子，找到了 18\n年考完国初后，杨锦辉教授把我领去的仙林宾馆。最后本来想去找找当时的考场的（学明楼\n501），但没有想到到这个房间已经改造成多媒体室了，确实有点遗憾。\n在此以外，游客带着我们转了一圈南师大，但确实没有留下很多特别印象深刻的东西。\n然后就是南大了，虽然过了五年，南大的基本结构我基本还是清楚的。首先就找到了省选的实验考场、考完实验后吃的食堂、入住省选宿舍后去的小卖部。从这些建筑往北，就找到了化学楼，穿过化学楼上坡就到了\n17 年培训时住的 23 栋宿舍。然而令人感慨的是，原先 23\n栋宿舍楼向东望，能看到一座山，山脚到山顶有一条登山道。这条登山道应该是承载了很多回忆的，包括当时凌晨刷完题在阳台上眺望、18\n年考物理实验的时候带着同学从上面溜车下来、省选结构化学因为动脉破裂失利后也来到这里散心。这条登山道现在已经拆除，就连那座山也被削平，建起了人工智能院。\n在向后，我决定重走 18\n年考物理实验的时候带着同学上山的那条路。首先是从宿舍楼后身绕上一条步道，走到顶就是气象台，然后溜车下来就可以找到去天文台的路。五年前，上天文台的路旁边都是工地和堆满的黄沙，现在也都建好铺上了绿化。上到山顶，天文台还是一如既往不让进，于是也就作罢，下山吃饭。\n吃完饭继续去新街口出勤，这次出勤倒是收获颇丰，鸟加了很多东西。最后到了半夜十二点，机厅关门，打车回宾馆睡大觉。\n2023.04.12\n早起去了朗玩，这里街机音游的品类很全、数量很多，光 maimai\n就有五台，据说先前有六台。刚到的时候只有三个人，于是我就随便打打，但是越到下午，人越来越多，最后目测到达了二十人左右的规模，加上也快到火车发车时间了，所以也就不打了，上车回北京。\n车上稍微做了点实习那边的事情，回到宿舍后也没干什么，就直接睡觉了。\n2023.04.13\n周四依然是相当忙碌的，首先是组会然后是软工的大例会。\n然而这次让我比较感到棘手的是，我这边的四个组 Sprint2 居然都没有调通\nWebSocket，作为即时通讯系统项目，快要中期的时候没有调通最基本的通信协议，这确实有点恐怖了。然而我作为助教也只能去提醒和催促，也不太能真上手帮他们做什么。\n晚上出门打算吃麦当劳的时候，路上偶遇夏老板一行人，于是就加入了他们的疯狂星期四团建，吃完后就去出勤了。\n实在是太没有意思的周四，实在是没有什么可以记录的。\n2023.04.14\n准备开始上手清理一些事情了，而且也已经定下了一周内不出勤的约定。最近首先是把实习那边最简单的\nbug 给弄掉，然后就是 DRL\n期中和毕设后期验证的一些事情，看起来不算特别多，但总之还是得做。\n结果今天依然是没做到什么事情，反倒是莫名其妙摸鱼摸了很长时间，和坐标去吃酱骨、水群、和实验室的学长们吃西瓜聊天。直到最后快要回宿舍的时候稍微清理了一下短信服务那边的事情，然后跑通了\nWireGuard 连上了远程主机，除此以外也没做到什么。\n晚上回去之后 Aster 说要教 Fuyuki 微积分，于是又去了\n308，本来想学习的，最后是闲聊了一晚上，又是什么也没干。\n2023.04.15\n昨天送审的短信模板完全没有过审，原因是没有提供可以访问的公司主页。这非常迷惑，为什么我要做短信发送服务一定需要一个公司主页。不过既然他这么说了，也只能照做，下午紧急静态部署了一个并没有什么用并且还很丑的\nHTML 网页，把小程序码挂在上面，假装这是公司主页送审了。\n然而今天依然状态并不是那么好，结果是稍微做了点无关紧要的事情之后就去五道口出勤了。周六晚似乎机厅店长也悄然违反了十点钟断电的规章，我一路打到了十点半左右，当时还有游客在旁边开了新的一局游戏，旁边的跳舞机甚至还有人在玩。\n晚上自然也没有什么精神了，随便干了点活就睡觉了，因为微博上传闻九点钟\nCP29 开票，这个显然是得快速起床抢票的。\n2023.04.16\n今天先起来抢票，结果九点钟开票是假消息，根本没有开票。然而这次我突然有了点研究\nCPP 这个抢票网站的兴致，首先是拿到\nCookie，然后在网络界面找到了获取当前票务信息的接口。然而有一点比较麻烦，就是从票务信息跳转到支付界面的时候似乎会生成一个和时间有关的\ntoken，这个 token 的生成逻辑我一直没找到，显然这个网站的 JS\n也是经过压缩和混淆的，完全没法阅读和复现。最后也因为当时只睡了不到四五个小时，赶快滚上床接着睡了。\n最后大概在下午两点起床，稍微收拾了一下自己出发去北大，稍微做了点事情然后和\nxjj\n他们吃了一顿勺园烤鱼。不得不说勺园烤鱼确实很香，虽然我觉得他那里的铁板鸡腿肉比烤鱼好吃。\n饭后考虑到事情还是得做，于是迅速赶回工位开始干活。\n结果这一干活没收住，一路做到了十二点半，想着回去也只能冷水澡了，于是就接着在工位上干下去了。中途实在有点饿，在实验室里找到了泡面和苏打饼干，不得不说这两样东西实在是太顶饱了。最后大约是做到了七点钟左右，实在是撑不下去了撤退回寝睡觉。\n2023.04.17\n周一，依然是接着来工位做实习的事情，然而没有做出任何有实质的进展，确实有点难绷。\n说实话我感觉这个实习最大的问题就是让我时间安排非常难受，我现在很难说能够抽出一整块时间做我自己的事情，往往时不时就有新的需求，然后还不得不周末加班或者在我本来就已经声明过无法工作的周一二三工作。其实我已经很多次很想骂人了，我向来是认为催人是最不合理的事情之一，点到为止就行，我不想被别人\npush，我也不喜欢 push\n别人。然而这个实习的学长，虽然我确实理解他的难处，确实订单量下滑对现金流是很大的威胁，但是一天到晚在群里催促，我受不住，我不是看不见，我只是很单纯的没时间做。我在进入这个团队的时候就说了我的主业依然是读博，而且我有助教的工作，这些是我的主要任务，然而现在呢，我不得不抽出甚至超过半数的时间来做他认为可能有用的功能，而且这种左一枪右一炮的，毫无规划或者远景的工作模式，我非常不好说。我至今不是特别明白他们想把管理后台做成什么样子，我甚至不能从一个整体上把握他们的需求，只能从他们不断加入的需求中自行猜测。然而这样只会导致我做出来的很有可能不符合他们想的，然后还要返工。\n我实在是难以接受目前这种工作模式，而且学期过半了，原先说好的二月底就能轻松点，也没有兑现。虽然确实给了物质上的补偿，然而我过得并不舒服。\n2023.04.18\n周二，做了一天实习的事情，还在生产环境上搞出来了锅，实在是不想记录这一天的内容了，毫无意义，毫无收获。\n2023.04.19\n实习那边简单告一段落了，所以直接去出勤了，打上了 7k5\n底分，考虑到下一个一百分目标离我可能还有一段距离，感觉可以近期以享受游戏为目标玩了，可以一段时间不用去当分奴天天只考虑上分了。\n晚上和 ayf\n聊了不少，大概订立了我一定要把实习和我的本职工作区分开的目标，目前计划把实习约束在周四周五之内解决，至少周一二三坚决不能再干涉这边的事情了，不然我根本形成不了整块的用来认真思考的时间。这种碎片化的工作最令人恼火的是会削弱一个人沉思的能力，很多想法或者比较体系化的工作坚决不是每天随便抽一个小时就能做出来的，都是一整段时间沉浸在其中慢慢思考出来的。所以如果再被经常性打扰，说实话我不是很能接受。\n2023.04.20\n导师又一次因为其他的事情咕咕咕了组会，组会又一次变成了学长主持，于是混过了组会。\n开完会之后和实习那边声明了自己的需求，从今天开始，坚决作出区分，不能再这样两边混杂下去了。我现在特别想去思考我的毕设，想去做\nDRL\n的课程项目，想要接着写我的日语文档，这些事情坚决不能被碎片化的工作干扰。\n组会之后就是软工 Sprint3 小例会，这次简单看了一下大部分组已经能跑通\nWebSocket 相关了，但是似乎有一组发现了 SECoder\n容器的一些奇怪表现。具体而言就是似乎一个空容器也能够建立起 WebSocket\n链接，这一点显然是超越想象的。\n这一切都折腾好了就是回来继续洗实习的小程序代码，不得不说外包写的代码实在是太令人震撼了，我甚至不能用简单的语句概括到底有些什么问题，最后基本等于帮他们重写了一遍。\n晚上简单交代了这周的开发任务之后就结束了，任务量不太小，但也还算可以。\n2023.04.21\n周五本来就预定好了好好摸鱼，首先是下午去了雀庄，这个时候我已经发现我很久没打雀导致手相当生，现在就是很担心明天的常规赛。\n之后六点钟雀庄结束之后，立刻打开 CPP 抢 CP29\n的门票，还好的就是手速网速都在线，迅速抢到了两天的门票。在回去的路上，我想了一下决定不直接回校，乘上地铁去了奥林匹克公园，找了个机厅简单打了一下今天更新的新歌。\n延误列车谱面只能说还可以，狗子写谱水平在线但是和我对这首歌的理解有所错位。之后就是人人都说简单的\n13+\n春岚，然而我打了两遍都没打明白，鸟都没有。其他的新歌就是一首遥控器一首拂晓抵达，谱面都比较一般，除了遥控器的错位星星打起来很爽之外其他没有什么印象。\n新奥的机厅本来只有六个人的，结果打了 3pc\n之后突然来了七八个人，于是我只能赶快撤退，找了个烧肉拌饭吃完饭，但是没想到一顿一百块还没吃饱。\n这期间我注意到我似乎严重超支了，即使我有 2600\n的助教工资和实习那边发下来的 4000 现金，这个月我依然超支近\n3000，这意味着我这个月支出近小一万。虽然这个支出包括了我去了一周无锡和南京，提前买了五一期间所有交通票和广州的酒店，但是这些加起来可能也就三四千，我依然在其他场合下消费掉了五六千。虽然这也和我在吃饭和打游戏上没省钱有关系。\n还是决定稍微省省钱，这也太奢侈了，虽然确实四月过得实在是有点享受了，自从毕设中期结束之后就在摸鱼。\n晚上决定稍微运转一下昌平线，于是从奥森直接北上到朱辛庄终点站，然后沿着昌平线南下到西二旗，再回来。等到我到达五道口的时候，大概是十点，于是我又无聊了，去了五道口机厅打了\n2pc。\n从机厅回来后去超市简单买了点生活用品后回来打德州扑克。结果就是整个一整天，啥事没干，倒是什么什么基本都玩了个遍。\n2023.04.22\n今天睡了个爽，一路睡到了三点半，然后点了个外卖到 FIT 楼开始工作。\n基本上就是做了一整天的实习，实在是没有什么值得记录的事情了。中途去打了雀魂的常规赛，吃了一把三一把一，不得不说这场比赛打得酣畅，很久没有这么投入地打一场牌，而且运气还相当照顾，既在摸绝张\ndora\n的时候感受到了气运，也同时在迂回防守的时候感受到了自己的冷静。赛后简单做了点复盘，整体没有什么大问题，但还是有两局面对立直的攻守判断出现了偏差。\n此外，今天洗完了实习那边外包的代码之后，和实习的学长提出了就此收手的请求，希望这次能够切换到我希望的那种，实验室为中心，爱好也能并行的理想中的生活模式。\n2023.04.23\n按照道理，应该今天要做数据库的\nLab3，然而实际上太想摸鱼了，于是接着去写日语自学手册去了。这次突然想改动的原因是我感觉意志形这个名词显得相当不合适，现代日语中所谓的意志形实际上是未然形和助词接续之后的音便。那么如果接受意志形的说法就会遇到问题，就是在自学手册里我把连用形接续特定助词发生的音便处理为了第一第二连用形，而未然形音便却被处理为了两种活用，这是有矛盾的。所以最终我接受了第一第二未然形的称谓。\n修完文档之后去参加第九次 V+ Next，这次 Ne\n老师贴心地把大家的小作文印成了明信片，确实很贴心。大家最后也并没有严格遵守猜歌的形式，最后也就变成了音乐茶话会的类型，听歌聊天然后在房间的白板上画一些梗图，我就画了个咖喱乌冬，意外成为了全场最佳。\n回来之后就是摸鱼打牌，反正数据库决定迟交了那就不管了。\n2023.04.24\n下午来实验室参加项目讨论会，前面讨论阿里的合作项目的时候，讲了一下如何优化直播传输，包括目前大多都在做的使用\nRL 做传输策略优化，包括还有少数人在做并且更困难的传输层协议优化和 CDN\n调度。\n之后还是转向到目前快手的合作项目开题，讨论了一下如何将大模型蹭上 ABR\n问题，其中重要一点就是如何将时序预测生成大模型应用到 ABR\n问题上。首先考虑到，因为目前的生成式模型如果用于做 ABR\n码率决策，很有可能打不过经典控制论，毕竟这不是他的强项。所以如果要蹭，基本上只能将生成式大模型用到\nABR 问题的一个序列预测子问题上——网络带宽预测。\n贾老师调研了 Transformer 应用在带宽预测问题的文章，得出结论是\nTransformer 并不足够强，甚至打不过线性层。然而现在用 Transformer\n做带宽预测基本上每一个带宽测速点对应一个\ntoken，这并不合理，因为单独的一个网络带宽点并不构成一个语义单元。所以\nAAAI 2023 的一篇工作将 64 个带宽点打包成 patch 作为一个 token\n传入，获得了一定程度的提升。这可能确实说明了打包后的带宽点构成了语义单元。\n之后大概开始讨论 prompt 了。大概就是在想如果能把网络建模成一个 prompt\n相关的问题，就可以用现在的大模型成果。然而后面的讨论我感觉过分天马行空了，所以暂且记录不下来什么问题。可以看出来导师似乎对大模型有些想法，然而我们的研究领域实在是一下子想不出什么可以切合的地方。\n\n晚上逛群的时候突然注意到有人低价出十周年的 Aime\n卡，于是立刻全款拿下去五道口提货，顺手打了 1pc\n之后赶快回工位做数据库。但是没想到数据库实在是有点麻烦，结果是做到十二点回宿舍都没做完，还错失了洗澡的机会。\n回来之后先打牌，打了两个半小时之后修完了数据库，顺手把 Lab4\n做掉之后就开始复习 DRL 了，希望能够复习完。\n2023.04.25\n今天差不多全是会，首先是中午的软工座谈会，大概就是老师们召集同学们一起讨论对课程和课程作业的看法。这次会大概是没有听到什么很有意思的见解的，主要还是解答同学们关于软工课程改革的一些疑问吧。\n下午被 hgr 拉过去谈了一下有关 AI\n协会的一些事情，大概这个协会接受了来自私募量化的支持，金主能够提供八张\nA100\n的算力支持。说实话，这个算力已经比一部分实验室都要充足了。但是另一方面，接受金主的支持就意味着有横向的硬性要求，可能打算协会实际运行的时候要可靠的成员去完成这些横向项目，保证整体的资金稳定。\n晚上则被达哥拉去聊了一下有关课程改革的一些事情，他打算为研究生开设一门讲解如何当助教的课程，目前正在规划。然而由于当时我已经很累了，所以也就没有怎么和他做交流，只是保持了一个积极的态度。\n晚上还是按照规划复习\nDRL，然而这点时间已经完全复习不完了，所以随便看看就睡觉了。\n2023.04.26\n首先先去考了 DRL\n的期中，期中题感觉一般，但是计算量很大，完全算不完，不过由于期中只占比\n10%，而且大四只要不挂科就行，大概就这样随便考考算了。有道题，我完全不想做了，于是在卷子上写了这句话：\n\nI will just give up on this as I am a senior student.\n\n希望老师不会介意。\n考完之后 fze 说想要体验一下 maimai，于是就去了五道口，教他打了 1pc\n之后他就走了，我则接着出勤。这次出勤也是收获颇丰，鸟了 Freedom dive\n和齿轮，这次明显感到自己的能力和体力都在上升。\n晚上回来就该准备收拾东西明天南下了，希望明天能够顺利混过组会赶上火车。\n不过说实话，最近已经在打算重启毕设了，这次在外，也会时不时地完成一些任务，这种在悠闲中做自己想做的事情的感觉，还是挺有意思的。\n2023.04.27\n今天就现在准备出发了，不过在此之前先过一下组会。\n今天组会上我觉得很有意思的是贾老师说的一句话：“大模型终究只是给出一个很像的答案，而不是一个很是的答案”。这句话是用来回应为什么目前的\nLLM\n无法应用到带宽预测任务上的。虽然这句话表达的意思已经快要形成共识了，但是感觉莫名其妙今天很赞同这句话。感觉导师确实很想搭上大模型这班车，但是确实，我们的研究领域实在是有点难蹭上这个热点。\n然后就是思考我毕业设计下一步的工作规划，现在简单列个表放在这里：\n\n数据集相关研究\n\n考虑连续低带宽、带宽平均变化值等各种统计特征区分环境\n讨论 LUMOS 5G 数据集等其他数据集\n\n当前结果验证\n\n重复生成数据集并验证结论（GrBAL 在切换数据集上优于\nPensieve，Pensieve 在切换数据集上不优于无切换数据集）\n使用其他数据集进一步验证 GrBAL 的性能\n\nGrBAL 相关的深入\n\n讨论 dynamics model 给出的预测是否符合实际带宽等\n缩小模型规模观察收敛速度\n\nPensieve baseline 相关的深入\n\n讨论 Pensieve 表现较差的原因（直接和贾老师、黄老师讨论）\n尽量调优 Pensieve 观察其性能极限\n\n一些文献调研\n\n考虑阅读一些环境切换相关的论文，比如 Feng Qian 的论文\n\n一个可能的新方向\n\n李老师今天组会上提到的动态 Oboe 方法，将中心 model buffer\n迁移到本地尝试\n\n\n现在我比较困惑的一点是，似乎 GrBAL 的前期决策似乎很激进，导致前期\nrebuffer\n就很大。另外今天李老师讲了一篇比较有意思的文章，大概的意思就是有一个中心化的\nmodel buffer，多个边缘计算节点保持和这个 buffer\n交互，在检测到环境变化的时候向 buffer 请求新的模型。这基本上就是 Oboe\n的思想，也就是有一个门控网络检测环境变化，然后调整主算法的参数。然而这篇文章的创新就是，Oboe\n可选的参数是有限、静态的，而这个工作将这个 buffer\n改成动态的，这样在一定程度上能形成提升，或者至少能够解决一些先前没有见过的环境切换。\n参考论文 - RECL: Responsive Resource-Efficient Continuous Learning\nfor Video Analytics。\n2023.04.28\n到达南京的第一天，首先是睡了个好觉，然后中午去仙林接我妹妹放五一假，在金鹰吃了顿烤肉之后下午就去新街口玩去了。新街口说实话从小玩到大，确实没有什么特别有意思的东西了，于是又是风云再起机厅出勤，没有想到的是在\n2pc 之内鸟加了待宵夜虫，爽吃 7 分。\n晚上的电影票一直是买好的，所以直接就去看了。电影大概是讲国产战斗机试飞员的一些故事，比如说故意飞行极端机况来收集边缘数据之类，不过说实话，确实拍的还算可以，虽然感觉有点怪怪的违和感，但整体还是比较能让人代入的。\n但说实话今天整体在做的事情是在肝星穹铁道，世界观比较合我胃口，可以放置的回合制游戏也比较休闲，而且整体节奏也很好，确实算是我喜欢的米家游戏。这几天几乎空闲下来就在玩，确实有意思，虽然我战斗配队非常拉，打怪非常吃力，但还是好玩。\n2023.04.29\n按照道理讲现在应该稍微做一下实习那边的事情了，实际情况是打了一整天的星穹铁道。\n晚上是薛之谦的演唱会，我不听华语歌，倒也听过三四成。演唱会气氛很好，周边设施（小卖部、公共交通、秩序维护人员等）都很完备，可以说是如果真的是粉丝的话就完美了。\n回来之后继续推星穹铁道主线，然后给米哈游稍微送了一点钱抽出了板鸭，不得不说这个游戏确实做得好，能让我掏钱的游戏并不多。\n2023.04.30\n没想到这就是四月的最后一天了，今天最好能够把实习那边的事情全都清理掉，然后就要收拾行李准备去上海了，主要还是得把衣服洗好晾干，这一点比较麻烦。\n结果是非常顺畅地啥都没做，全用来推星穹铁道了。晚上稍微辅导了一下我妹的\nPython，果然现在什么专业都得学个什么编程，然而对他们非师范来说似乎也并没有什么用。\n2023.05.01\n早上自然是按照规划去南京站，捉到 byq\n之后上车捉到了仁弟，三人就这样前往上海。车上简单推动了一下星穹铁道的仙舟第二章主线，然而由于手机电量实在有限所以也并没有什么大的进展。其余时间基本上都是三个人在闲聊到底到达上海之后怎么安排。\n到站之后，收到了 Numen\n发来的消息，他们似乎正在前往南京东路去逛二次元一条街，而我们到达上海站的时候差不多离得很近。原定计划是我们下午在酒店打牌，但是收到了这样的邀请自然就去和他们汇合了。五一第一天的上海到处都是人，火车站、地铁站完完全全堵满了。我们和\nNumen\n他们汇合之后前往外文书店。外文书店顾名思义是卖其他语言书籍的地方，然而我们显然是为了一些日文书籍而来。日文书籍全都位于四层，而显而易见的，四楼全都是人。\n逛完外文书店之后去吃了饭，之后就是打卡了雾雨咖啡店，然后去了迪美商城。迪美商城就有一些夸张了，由于设置有大量的摊位，所以里面几乎是水泄不通，挪动一步都很困难。然而迪美的好处就在于其有一家风云再起，我手痒了于是想去打，然而实际上没带耳机没带手套，于是只能娱乐性质地随便摸了摸。\n晚上去了已经预定好的纯\nK，唱歌没什么值得记录的。之后就是回去收拾一下睡觉了，准备为第二天的 CP29\nDay1 排队攒足精力。\n2023.05.02\nCP29\n的第一天，我们大概是八点钟左右到达国家会展中心的北门，比较凑巧的是，我们下车的地方就是当时的队尾，所以相比较于\nNumen 他们从南门下车还得先找队尾，我们已经领先一步了。\n当天的队伍实在是太抽象了，我们刚到的时候队伍只是绕场一周，等到快中午的时候，队伍已经是绕场三周近十公里。\n事实上，当天 CP29\n的主办方根本没有想到会有这么多人，他们仅仅在一楼一个场馆设置了一个缓冲区，然而可想而知的是，这么点缓冲区完全装不下近四五十万人，于是队伍缓冲区溢出到场馆外马路上。虽然大家素质在线基本都是列队前进，然而由于缺乏引导，队伍实际上根本不知道往哪里排，当天的安保人手也完全没有空余能力来处理溢出的人流。结果就是好多处出现了积流，也就是出现了千人左右因不知道何处入场而淤积在死角的状况。\n最终，过多的人流导致安保和检票设备瘫痪，这立即导致了抗议。不久后，政府方面命令不检票全员进场，这才稍微缓解了一些紧张情况。\n我们是近十二点才进入场馆的，进场之后先是去我们同学的摊位放下行李，之后立刻就开始扫荡一号馆的各个同好摊位。我基本上就追着术力口摊位一顿找，买了不少小东西之后便回去吃饭。由于场馆里面的饭店和小卖部可想而知地服务不了这么夸张的人群，我们早就自备好了军粮当饭。然而军粮实在是实用主义，可谓不是一般的难吃，但是饱腹感很强。\n晚上散场之后，晚饭又成了巨大的问题。经过实地探索，方圆两公里的所有超市和饭店大概都已经被占领。无奈，只能回宾馆等有饭吃了点外卖，而且还不能太晚，还得去\nDay2。\n2023.05.03\n估计是被市政府摁着头打了一顿，CP29\n主办方这次至少多派出了一倍的安保力量并且在二层多设置了一个缓冲区。这次我们没有花到半小时就成功进场。然而场馆内人数依然是十分夸张。\n今天由于起得早而且进场快，我很快就把昨天没买到的东西收全了。在此之后基本上就没有什么欲望了，简单把所有的场馆都浏览一遍之后就去打游戏了。\n晚上和 lcr\n他们汇合，三个人在酒店里面打了一下午星穹铁道，中途我终于意识到我圣遗物和武器配置有些不太对，花了点时间洗了一遍之后，我也拥有了一个看起来很不错的队伍。\n之后就是很早就睡了，这连着三天几乎没睡好觉然后第二天还要赶路去广州。\n2023.05.04\n早上醒来的时候 ttl\n已经收拾好东西返程回西安，于是我慢悠悠起床收好东西走到麦当劳吃了午饭，打辆车前往虹桥。实习那边似乎也开始催了，有点麻烦，决定火车上把这些事情慢慢解决掉，不然的话还是很烦的。\n今天就是整整坐了一天的车，到广州之后打车去宾馆，一到宾馆就睡大觉去了。\n2023.05.05\n早上十点就起来了，洛言志推荐了南园酒家，于是两个人中午就去了。南园酒家似乎也是广州传统的园林酒店之一了，不得不说茶点做得相当不错，一只虾饺五只虾仁实在是太震撼了。\n吃完之后有点百无聊赖，于是去找出勤的地方。中途想到既然要路过老城，不如去老城区转转。说实话，广州给我的感觉就是，相当有特征，或者说很刻板印象。相较于我的家乡长三角地区和大学所在的华北地区，广州的城市风格是完全不同的，甚至一定程度上给我带来了一些奇妙的异域风情感。广州老城更是和影视剧中的印象完全一致，随处可见的各种热带树木，红漆写的楷体店招牌，小吃店的铁栅栏门、神龛、各式招财标语、白瓷砖墙。透过老城天际线的缺口，远方就是广州新城的各式高楼。\n确实是听不少人说过，广州是一个城中村遍地的城市，不过实地观察了一下确实挺震撼。\n城中村大概都是那些所谓的老广，他们感觉自成体系高度自治。城中村里随处可见旧城改造的宣传，大概都会有地产公司的署名。而最为逆天的标语莫过于：\n疫情封控历历在目\n旧城改造刻不容缓\n\n这个标语确实比较猛，一般而言现在的政治风气是对 2022\n年的后半讳莫如深，然而这里堂而皇之写在这里，批判的态度一目了然。这确实印证了老城区高度自治的说法，毕竟广东整体还是天高皇帝远，其本地自然扎根的治理体系早就成型。相比较于华北地区中央政府的强大影响力，加上为了提高经济活力而适当松绑的政策，广州老城确实在这一方面具有一种令外人觊觎的自由感。联想到广州也是疫情最早放开的城市，想到广州市中心，越秀、天河两区的街道划分细碎不堪，这一切也似乎在相互呼应。然而宗法的约束或许更为可怕呢，或许房产公司的经济压力更为恐怖呢，这些也就不得而知了。\n之后更为震撼的是，一位外卖小哥从我身边飞过，大喊着“打倒土匪共产党”“共产党係土匪嘅”，虽然我粤语近乎不懂，和小店店主还得手语交流，但是“共产党”三个字听懂之后，粤语判定句式我还是能听明白的。\n又想到了二十大之前的北京四通桥抗议，要是这位外卖小哥出现在北京，或许现在早就莫须有吃点公家饭了。不过也是按照我的经验，北京整体民众对中央政府的支持程度较高，或许由于没有什么受众，可能公然宣传这类口号的人就不会出现吧。不过也是，印证了广州相对自由的刻板印象。\n下午就是出勤，先是在海珠富力，只有一台机子，但是下午确实没有什么人。之后等来了\nphilos，和他简单打了几把之后发现来了十几个人排队，于是赶快撤退到天河城。天河城的好处就在于四台机子，整体压力就少很多。\n晚上回宾馆已经累趴下了，洗洗就睡了。\n2023.05.06\n广州的人给我带来了很好的印象，然而天气却不是，闷热潮湿的气候实在是难以忍受，每天早上起来都得穿上微微湿哒哒的衣服，然后步入门外充满雾气的城市。\n今天稍微有些事情要清理掉，所以就找了一家自习室，先去干点活。\n结果今天一过我突然出现了很多的事情，当时不仅有外卖送达、宾馆续住、公交坐过站、腾讯云因为开服务器欠费等等这种小事，手上还被导师和学长问毕设的事情，家里人也打电话过来，实习那边学长也在催着做事，DRL\n作业做不出来。总之就是各种事情混杂到了一起。\n决定这两天把实习的事情干完，然后后面要迅速开始写论文了，不然实在是有点来不及。\n2023.05.07\n起来之后发现广州开始下大暴雨，于是今天还是暂且先不出门为好，在酒店里准备先清理掉一些杂事。\n最终还是决定丢掉 DRL HW3 的 10\n分，希望不要挂科。毕竟现在在广州确实没什么工作环境，真的是完全做不下去了，调试一个算法三四个小时，整体做完怕不是已经没分数了。\n下午去了广州塔，基本也是延续一个登高望远的想法，所以尽可能买了往高处去的票，中间什么游乐园自然是对我没什么吸引力的。然而比较可惜的是，由于大雾天气，最塔顶的\n480\n米室外观景台关闭了。实际上从地面往上看，那个观景台已经完全淹没在云雾中了，关闭也是理所当然的。所以最终也只能买到\n450\n米室外观景台。剩余的流程自然没什么悬念，高速电梯上塔，过安检过检票口就到了观景台。同样，由于大雾天气，能见度实在有限，不过反而是这种云雾缭绕的感觉颇有意境。岭南的雾气传统意义上的江南烟雨有所区别，相较于长江流域那种薄薄的轻纱一般的清新湿气，岭南的湿气就显得厚重和沉闷得多，人行走在其中并不能感受到自己的心灵被荡涤，只会感受到空气海洋底部的强大阻力。广州塔顶更是如此，上午的大暴雨后，云层几乎就已经贴到观景台了，甚至一阵风吹过，直接就被淹没在了一团云雾中。\n下塔之后，大概就在广州市中心逛了一下，体验了一下地下胶轮车 APM\n线，到达体育西路附近的时候已经差不多是晚饭点了，所以就找了一家看起来还不错的冰室吃晚饭。\n吃完晚饭之后突然有点想要去体验一下海珠有轨电车，于是又一次回到了广州塔，买了一张前往万胜围的票。不得不说晚上来走有轨电车真的是有点过于暴殄天物，原本这条有轨电车线是沿着滨江绿道建的，天气好的时候江边的风景非常好，虽然不能说夜景不好看，但是显然我还是喜好那种绿色城市的景观。\n坐到万胜围之后已经离宾馆十公里了，有轨电车也已经开出最后一班，于是只能打车回去了。\n2023.05.08\n今天就准备回北京了，收拾好行李退了房之后就开始乱晃，因为提着行李也实在去不了什么地方。于是先找了个地方吃饭，之后出勤，再吃过晚饭后就得来机场办手续了。\n今天实在是没什么可以记录的，赶路的日子确实没什么特别值得记忆的，我只知道到机场的时候我已经困得不行了。\n2023.05.09\n一样的，还在赶路。昨晚十一点的飞机，七点多点就到机场，然后凌晨一点多到达西安，人已经快困死了。然而西安机场找了一圈确实没有睡眠舱之类的东西，只有少许座位，还不是躺椅。于是只能把衣服袋子当枕头躺在长椅上尝试过夜，结果还被保安喊起来说不能躺。我寻思着这机场这么大基本都没人，平常不让躺是因为占了别人的位置，但我现在躺似乎也没有影响到别人啊。然而他既然这么说了，就说明我接着躺铁定睡不好觉，要被他一直喊，所以只能坐起来接着睡。\n一直熬到了五六点钟这样安检登机，到了飞机上我就开始睡，然而完全睡不踏实，坐着睡对我来说实在是太困难了。早上九点十点这样到达大兴机场，还得坐车两小时才能到学校，就这样，十二点多我终于爬到了学校。\n到学校后先收拾东西，这个时候人已经近乎麻痹，完全不想和外界交流。本来为了作息不崩溃计划下午不睡，晚上早点睡的，结果还是绷不住，下午直接睡了六七个小时，到了晚上十点钟才起床。\n晚上稍微打了一会星穹铁道，然后就得赶快睡，明天还要早起去淘宝的项目讨论会。\n2023.05.10\n淘宝这边的话，提到了现在互联网的一个趋势，就是各种视频内容平台开始做电商，比如直播带货，尝试将视频服务通过电商变现。另一边，淘宝作为传统电商平台，计划通过内容化的手段做防御，也就是在淘宝里面做一些视频服务。这些视频可能不完全和电商相关，有可能是泛娱乐化的内容。\n淘宝这边视频的应用场景除了最常见的商品介绍视频之类，还是希望做一些比较周边的，如带货视频等，虽然目前的业务规模和用户影响力还不及小红书。淘宝目前短视频落后于直播服务，相比较于目前抖音是短视频远超直播服务。\n淘宝目前音视频相关团队确实相对大，但是似乎在网络传输方面的人员都比较偏向于工程，在学术、算法上可能还确实需要和高校合作。由于团队\nleader 本职是做视频编码的，所以整体的团队都主要在做 encoder/decoder\n方面的事务，也确实需要传输方面的人力进入。\n目前淘宝网络传输底层还在使用 RTP，可能目前正在尝试转入\nQUIC，做这一部分工作的是另一个团队。毕竟在传输层协议上层运行什么应用实际上和传输协议解耦合。\n中午和他们一并在学校东南门口吃了一顿午饭，中途和导师 one on one\n交流了一下毕设相关，看起来他似乎确实是比较担心我的毕设问题。果然，我还是稍微老实点做点东西，开始写论文比较好。然而似乎导师也并没有那么急迫，其最终还是同意我前往苏州。\n下午就是在工位上无所事事，我也不知道我干了什么，但是就这样时间就过去了。\n2023.05.11\n早起赶车前往苏州，到达苏州的时候已经是下午四点，已经赶不上下午的一些论坛了，于是只能去签到领个物资之后就回酒店收拾东西。\n晚上有一个我导师的工程博士学长请我们吃饭，这位学长已经是科大讯飞的工程师了，在职读的博士生。饭桌上整体气氛还算不错，聊了很多有关最近人工智能发展和媒体相关的一些事情。然而最不能理解的就是，这是一顿人均五六百的饭，居然没什么大肉菜，最终我没吃饱。\n吃完饭回来开完软工的小例会之后就开始清理毕设的一些事情，感觉还是得赶快动手，否则有点急。把之前订好的列表重新搬到这边吧，先标记几个打算做的：\n\n数据集相关研究\n\n(Scheduled)\n考虑连续低带宽、带宽平均变化值等各种统计特征区分环境\n(Scheduled) 讨论 LUMOS 5G 数据集等其他数据集\n\n当前结果验证\n\n(Scheduled) 重复生成数据集并验证结论（GrBAL 在切换数据集上优于\nPensieve，Pensieve 在切换数据集上不优于无切换数据集）\n(Scheduled) 使用其他数据集进一步验证 GrBAL 的性能\n\nGrBAL 相关的深入\n\n讨论 dynamics model 给出的预测是否符合实际带宽等\n缩小模型规模观察收敛速度\n\nPensieve baseline 相关的深入\n\n讨论 Pensieve 表现较差的原因（直接和贾老师、黄老师讨论）\n尽量调优 Pensieve 观察其性能极限\n(Scheduled) 训练黄老师版本的 Pensieve 或者 SIGCOMM 版本的 Pensieve\n作为 baseline\n\n一些文献调研\n\n考虑阅读一些环境切换相关的论文，比如 Feng Qian 的论文\n\n一个可能的新方向\n\n李老师今天组会上提到的动态 Oboe 方法，将中心 model buffer\n迁移到本地尝试\n\n\n2023.05.12\n今天本来是要去会场的，结果由于昨晚饭局上约好了今天去科大讯飞转转，所以起床就去高新工业园区了。\n到那里了才知道，这位师兄实际上已经是研究院院长这个级别的高管了，想到这条人脉可能带来的价值，确实还是有点意思的。苏州科大讯飞这里主要是在做一些分支项目，主要包括轿车音响系统、车载语音识别系统，然后有个有意思的就是，由于这位师兄的个人兴趣爱好，苏州科大讯飞还在做围棋机器人。不得不说，整体转下来很有意思，确实比那些浮于表面的所谓企业参观有意思多了，毕竟这相当于实验室内部交流，总体上还是学习到了很多现在工业界的状况，感叹科大讯飞产品落地是真的快。\n然后就是去了苏州微软，这是给我冲击比较大的地方。整体上苏州微软还是符合我的刻板印象的，公司内部的建筑风格等等都很符合美式审美，开放式工位、随处可见的讨论区、优秀的\nwork life balance 日程安排。然后就是另一位现在在苏州微软做 team leader\n的师兄介绍了他们 team\n在完成的工作，主要还是视频特效相关。当时有一句我记忆深刻，就是“我们宁愿\ndelay\n一个新的功能上线，也不能让他破坏兼容性和用户体验”，然而这种话也只有微软这种体量的垄断公司才敢说，小厂连生存都是问题，只能不断卷新功能。\n不过说实话，还是挺认可微软的一些价值观的，当时也想着毕业后入职 MSRA\n或者之类的公司，但是由于微软完全不在意人才会不会来，所以开出来的工资确实在市场上没有很大的竞争力，清华计算机本科也不过\npackage\n30w。整体来说是个很适合养老的地方，或许我毕业后，如果想留在国内的话，就先在北上工作攒钱，然后回到苏州微软养老摆烂。当然如果想要出国的话又是另外一回事了。苏州真的是个好地方啊，这个时候还是会发出这种感叹。\n下午我们就各自散开了，贾老师去旅游去了，一鸣师兄去会场听持续学习论坛，我则找了个机厅出勤了。晚上出勤回来，开始做毕设。\n\n今天研究了一下 LUMOS 5G\n数据集，这是一个自带环境切换的数据集，整体而言更为真实，如果在这上面能够做出成果也显得更有说服力一些。目前计划将\nGrBAL 和黄老师的 Pensieve\n在这个上面训练起来看看能不能验证之前的结果。\n但我尝试过了一下 LUMOS 数据集，发现这带宽还挺猛的，基本上逼近\n100Mbps，这就很尴尬了，比较大的带宽显然是很没意思的，直接照着大的选就可以了，完全没有什么意义，我现在最后\nGrBAL 和 baseline 都收敛到疯狂选高码率，甚至 BBA\n都能获得很好的效果。我在原本的 LUMOS 上试了一下 BBA，其 QoE 飙升到\n123.39，这个数据几乎可以认为是不合理的了，说明原始 LUMOS\n的带宽太充裕了。\n所以我做了点手脚，我把带宽手动除以 8。之后将 LUMOS 数据集之中的前 24\n个 trace 作为测试集，GrBAL 方法中另将剩余的 trace 中 20%\n划分为验证集，Pensieve 则将剩余 trace 全部作为训练集。BBA 就直接在前 24\n个 trace 上测试了。\n有点很奇怪的是似乎 LUMOS 数据集内部的差距也很大，GrBAL\n方法在这个数据集上面，测试集上能有上百\nQoE，但是验证集上只有几十，这也让我感到不可思议。\n2023.05.13\n苏州的第二天，说实话没什么安排，中午一起吃过饭之后就决定各散了，我和一鸣师兄决定先找个地方做一下手上的事情，所以就先去了某一家星巴克。大概做了一些之后一鸣师兄去会场了，而我则开始苏州城区闲逛。\n说实话这一整天也没什么说得上是收获的东西，只是无聊了。\n2023.05.14\n赶路，早上起来就前往火车站，晚上才到达北京，偷偷去丰台出勤之后回宿舍。宿舍还要十二点断电导致空调用不了，晚上热到睡不着。\n稍微做了点毕设，但是验证工作还没做完。我现在计划再次运行一下\nbaseline，观察一下到底是谁的问题。\n2023.05.15 - ?\n在此之后就都是赶毕设了，实在是没有什么可以记录的了，到时候，等到毕业典礼，再去写长文吧。\n这个学期整体还是挺有意思的，有趣而充实。\n","categories":["【生活记录】日记"]},{"title":"JS 文件本地化","url":"/2022/08/20/blog-js-localize/","content":"自从 JSDelivr 半挂了之后就一直在为这些事情苦恼。\n\n简而言之，一个静态站需要拉取一堆 JS、CSS 文件。而正常而言的 JS\n文件完全可以从网络上当场获取，但是由于 JS CDN JSDelivr\n半墙，我只能速速转战其他的 CDN，结果近日发现速度非常不理想，甚至仅仅是拉\njQuery 都花了 15 秒，这完全不能接受。\n\n本来想尝试一下换其他的 CDN，但是怎么试都不算快。\n还是暴力解决方法比较好，我直接把 jQuery 等一系列常用的东西的 min JS\n打包放在了自己博客文件夹内，每次请求只不过是访问本地文件，太完美了。\n虽然问题暂且是解决了，但是我还是觉得，为啥这些 CDN\n会受限呢，真的和什么敏感领域有关吗。\n","categories":["【杂谈】开发"]},{"title":"安卓前端开发杂谈","url":"/2021/09/01/android-dev-exp-1/","content":"安卓的移动端开发，属实让我血压高了一小段时间。毕竟已经接触过类似于\nReact Native 那种基于 TypeScript\n语言的、优秀的跨平台移动端框架，再去尝试用繁琐的 Java\n语言写安卓前端自然是不适应且感到烦躁。\n但是毕竟是 Java\n程序设计训练课程，安卓前端开发作为其最大的特色，不得不消受。\n\n关于数据绑定\n如果要我说最大的不适应的地方，首先就是数据和图形界面的完全分离。在\nReact Native 框架之中，数据和图形界面的管理大概是这样的：\nTypeScriptconst App = (props: AppProps) =&gt; &#123;    // Set states &amp; initialize    const [bar, setBar] = useState&lt;number&gt;(0);    // Some functions to update or rewrite data    const update = () =&gt; setBar((o) =&gt; o + 1);    // Write UI with TSX, use data freely    return (        &lt;View&gt;            &lt;Text&gt; Hello world! &lt;/Text&gt;            &lt;Text&gt; &#123;`The val of bar is $&#123;bar&#125;`&#125; &lt;/Text&gt;            &lt;Text&gt; &#123;`Property foo is $&#123;props.foo&#125;`&#125; &lt;/Text&gt;            &lt;Button onClick=&#123;update&#125; /&gt;        &lt;/View&gt;    );&#125;\n但是在安卓之中，图形界面完全定义在 .xml\n文件之中，而且一定程度上其定义各个组件摆放方式的语法细节的繁杂程度不低于\nHTML。而如果需要将数据载入图形界面，则首先要根据组件的 ID\n获取组件，之后才能调用各种方法设定具体属性。\nJava((TextView) view.findViewById(R.id.entity_name)).setText(data.name);\n这里出现的 R\n类据说是相当厉害的。但是我第一次接触安卓的时候，这个符号给我带来的感觉就是不安，因为我再也不能像写\nReact Native 一样至少自认为自己掌握了程序之中的数据流。换一种说法，即使\nReact Native\n可能做了很多背后工作，但它至少做到了让开发者在很多时候能直观引导数据流。\n对于按钮等组件，React Native 框架下可以直接传入回调函数。而众所周知\nJava 是纯净的面向对象语言，怎么会有 lambda 这种异端呢（新版本的 Java\n已经离经叛道了！）。\n所以你需要写监听器对象，重写其中的方法等等。\n\n并不是说这样不好，我还记得之前大一小学期的时候写 Qt\n很多时候就是各种指针到处乱飞然后到处乱 set\n这个那个的，最后一个 draw\n函数里面上百行的，成块的各种格式设定、字体设定、内容设定、排列设定，然后这次写安卓让我回忆起了那一段黑暗时光。\n并不适应的适配器模式\n如果只是想给一个 TextView 载入文字，直接几个\nset\n函数就结束了。但是给一个格式复杂的列表载入数据，则相当繁琐。比如说现在主流的\nRecyclerView，其载入数据，就需要你自己编写一个数据适配器。\n我首先是上网找轮子，随后想了一下，干脆自己包装了个简单的\nRecyclerViewAdapter 先勉强用用。\n将数据塞到图形界面上，最重要的三个东西是上下文、使用什么\nlayout\n和数据本身，那么适配器的构造函数就需要接受这三项。然后就是平凡地重写\nRecyclerView.Adapter 所要求的三个函数。不过这里我在重写\nonBindViewHolder\n的时候留了空，因为这里就是定义适配器最重要部分——数据如何映射到 UI\n的函数。我将这一个函数设为虚函数，让子类继承重写就可以实现各种映射方式。最后的成果大致这样：\nJavapublic abstract class RecyclerViewAdapter&lt;T&gt; extends RecyclerView.Adapter&lt;RecyclerViewAdapter.ViewHolder&gt; &#123;    protected Context mContext;    protected int mLayoutId;    protected List&lt;T&gt; mData;    public RecyclerViewAdapter(Context context, int layoutId, List&lt;T&gt; data) &#123;        this.mContext = context;        this.mLayoutId = layoutId;        this.mData = data;    &#125;    @Override    public @NonNull ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;        return new ViewHolder(                LayoutInflater.from(mContext).inflate(mLayoutId, parent, false));    &#125;    @Override    public void onBindViewHolder(@NonNull ViewHolder holder, int position) &#123;        // TODO: What is this?        // holder.updatePosition(position);        this.convert(holder, mData.get(position));    &#125;    public abstract void convert(ViewHolder holder, T data);    @Override    public int getItemCount() &#123;        return mData.size();    &#125;    public static class ViewHolder extends RecyclerView.ViewHolder &#123;        final private View mConvertView;        public ViewHolder(View itemView) &#123;            super(itemView);            this.mConvertView = itemView;        &#125;        public &lt;K extends View&gt; K getViewById(int viewId) &#123;            return (K) mConvertView.findViewById(viewId);        &#125;    &#125;&#125;\n用起来也简单，传入三个要素，之后重写 convert\n方法定义一下数据到 UI 的映射就好了：\nJavabinding.entityList.setAdapter(new RecyclerViewAdapter&lt;Entity&gt;(    HomeFragment.this.getActivity(), R.layout.home_entity_item, baseEntities) &#123;    @Override    public void convert(RecyclerViewAdapter.ViewHolder holder, Entity data) &#123;        ((TextView) holder.getViewById(R.id.entity_name)).setText(data.getLabel());        ((TextView) holder.getViewById(R.id.entity_category)).setText(data.getCategory());    &#125;&#125;);\n你会发现，这比 React Native\n要写的东西多太多了。上面这么多需要折腾的，React Native\n只需要这样写：\nTypeScript&lt;View&gt;    &#123;        baseEntities.map((val, ind) =&gt; (            &lt;View key=&#123;ind&#125;&gt;                &lt;Text&gt; &#123;val.name&#125; &lt;/Text&gt;                &lt;Text&gt; &#123;val.category&#125; &lt;/Text&gt;            &lt;/View&gt;        ))    &#125;&lt;/View&gt;\n就可以实现一个列表了。\nJava 我写了一整个类，光数据转成 UI 也写了好几行长代码，这还没有算\n.xml 文件。\n","categories":["【杂谈】开发"]},{"title":"2023 CMO Day2 P5 几何试题解答","url":"/2023/11/30/cmo-geo/","content":"本来应该干活的，结果发现 CMO 题出来了，无聊就来做了一下。\n\nProblem\n已知锐角三角形 △ABC，在 BC 延长线上有点 K，过 K 分别作 AB, AC\n的平行线 KP, KQ 令\nBK = BP, CK = CQ。△KPQ 的外接圆与\nAK 相较于点 T。证明：\n\n∠BTC + ∠APB = ∠CQA\nAP ⋅ BT ⋅ CQ = AQ ⋅ CT ⋅ BP\n\nAnalysis &amp; Solution\n总之先画图：\n\n总之立刻从 P, Q\n是对应点发现，第一个要证明的角度关系应该改写为 ∠BTC = ∠CQA − ∠APB。之后，很显然就要去想如何去转化\n∠CQA。这里有个初中数学就知道的东西，等腰三角形\nCQK，然后还有\nCA ∥ QK，很快就有\nCA 平分 ∠BCQ。这个平分有个相当大的作用，就是我可以把\nQ 给对称下来了，同理 P 也可以：\n\n然后这里就得到了 ∠CQA − ∠APB = ∠CDA − ∠AEB = ∠DAE，我们要证明的关系就从三个角变成了两个角。再来考虑\nD, E\n的特点，不难根据刚刚的相等发现 B 是 KE 的中点，C 是 KD\n的中点，那么这么多中点其实就给了我们把 ∠DAE\n“拉到”图形里面的一个思路。找 KA 的中点 M，立刻就有 ∠DAE = ∠BMC。这个时候我们要证明的，其实就是\nB, C, T, M\n四点共圆：\n\n到这一步，找这个共圆就几乎不能走角度的路线了，因为好用的好描述的角基本都用完了，所以该去找线段关系了，显然我们要用圆幂定理，不难发现我们应该尝试去证明\nKM ⋅ KT = KB ⋅ KC，也就是\nKA ⋅ KT = 2KB ⋅ KC。比较麻烦的是\nKT，因为这条线段最难描述。然而思考\nT 的成因，不难发现 AK 是 △KPQ\n的外接圆的截线，其实可以先在 △KPQ\n的外接圆上搞一步圆幂去把 T\n消掉。\n要去思考 A 对 △KPQ\n的外接圆的幂，其实最直接的想法就是去找 △KPQ\n的外心，然而不难发现这个外心真的是位置太好了，这玩意就是 A 关于 △ABC\n外心的对称点。\n\n那么很快啊，我们就能写出来 AT ⋅ AK = AO2 − OK2。要证明\nKA ⋅ KT = 2KB ⋅ KC，我们只要证明两个式子加起来是成立的，就是只要证明\nAT ⋅ AK + KA ⋅ KT = AO2 − OK2 + 2KB ⋅ KC，即：\nAK2 = AO2 − OK2 + 2KB ⋅ KC\n进一步发现 KB ⋅ KC\n是 K 对 △ABC\n的外接圆的幂，就是 KR2 − RA2，所以我们只要证明：\nAK2 = AO2 − OK2 + 2(KR2−RA2)\n而上式在 △AOK\n中利用中线长公式显然成立，从而第一问证明完毕。\n\n第二问实际上在第一问基础上已经没东西了，我们直接考虑刚刚的四点共圆，这至少暗示了两对三角形相似，也就是\n△CKT ∼ △MKB\n以及 △MKC ∼ △BKT。这表明：\n$$\n\\frac{CT}{CK} = \\frac{BM}{MK}, \\frac{BT}{BK} = \\frac{CM}{MK}\n$$\n两个式子除一下：\n$$\n\\frac{CT}{BT}\\cdot\\frac{BP}{CQ} = \\frac{CT}{BT}\\cdot\\frac{BK}{CK} =\n\\frac{BM}{CM} = \\frac{AE}{AD} = \\frac{AP}{AQ}\n$$\n这就证明完毕了。\nComment\n感觉，不难，除了找 M\n这个中间点把 ∠EAD\n搞进去这一步想了一段时间之外就没怎么卡过。而且看到有两问的题目我直接先把第一问中间结论不证明，拿过来证明第二问，发现是平凡的之后这道题就索然无味了。\n没用到什么复数、三角、反演等 fancy 的东西，感觉不如，联赛二试。\n","categories":["【杂谈】数学"]},{"title":"时隔许久的碎碎念","url":"/2024/10/08/come-back/","content":"大概有一年左右没有认真打理过博客了，日记也已经好久不写，心血来潮重新看看。\n\n已经博士二年级了，在公司加班到一半突然好奇起来朋友们现在的情况，然后逐个打开了他们的个人网站。c7w\n的简历依然在逐渐充实，茨月猫猫的网站首页变成了半正式的简历，而原先的碎碎念收在了角落，诸如此类。而仔细想想，自己也许久没有收拾过自己的个人网站了，一方面是渐渐走出了当时精神崩溃的阴霾，或多或少开始步入了重复单调乏味但安稳的生活（我又重新开始维持亲密关系了！），因而无事可叙，另一方面工作上的笔记和杂谈也基本因为保密协议的原因只能留存在腾讯的内网文档上。\n不过即使要是说这一两年没有一点所思所想的话倒也不可能，不如就简单当作老友重逢简单念叨两句吧。\n学业、工作与科研\n虽然理论上是三个部分，但对我而言，这三者是同一件事情。\n简而言之，在读博入学后的某一天，我和孙老师认真交流了后面的规划，出人意料的是孙老师同意了我去实习并且以此作为主线，并将我推荐到了腾讯，接受实验室毕业学长的指导。说实话，目前我正在做的是视频流传输相关内容，确实需要进入大厂去获取信息和分析需求，这一方向实在是太贴近应用了，在实验室里闭门造车反倒是容易偏离实际。\n这种以实习为主线的读博生活，优点就是我完全经济独立了，我不仅能够接受学校方面的资助，我还可以领取实习的报酬。不过缺点也是很显著的。\n我很早就断言我并不十分喜欢计算机相关专业，然而即使只是想靠计算机吃饭，也不是说简单混日子就能做到的，这是当时的我始料未及的。简单来说就是周边大部分人并不了解我这个心态，或者说了解了但是并不支持甚至不理解，所以我得过且过的工作态度，加以社畜身份下天然的愤世嫉俗，导致我在实习中的工作态度往往是缺少一些科研需要的主动探索的精神，而我的学长也并不能、或者说并不想像培养下级那样手把手帮我解决所有问题。大概用他自己的话来说，就是他希望“我们还是像学校里面那样，是工作伙伴而非是职场上下级”，这种指导态度本身我是认可的，但是客观上让我在起步阶段经历了相当的精神压力，因为我最初缺乏大量的领域基础知识，也对腾讯的项目缺乏认识，就连工作目标都很难自我指定。\n目前手上的工作计划投到\nSIGCOMM25，目前来看进度相对能够把握。不过我倒是非常清醒地认识到，我其实远远没有到能够发出这类论文的水平，我学长或多或少其实帮我做了太多太多的事情，还是想要去找个机会感谢一下他。\n\n读博对我而言，仅仅是为了提升起始薪资并满足自我虚荣的选择，这种心态我并不知道是否是健康的，但我只能知道似乎我并不是少数，甚至可能是微弱的多数，这似乎是一个很恐怖的现实。\n然而我自己一直认为自己是幸运的，我的导师很开明，也在物质上不吝啬，虽然确实，作为学术导师其能提供的学术资源不尽如人意，但这切合我的目标。我的学长足够耐心，虽然我经常搞乱安排，但是其依然能够安慰我并给出指导。\n但是要是真的从自己的内心出发，虽然比本科的时候好了太多，但我其实并不总是清楚我到底在需求什么。我很多时候无法感知自己不想工作的原因是厌恶，还是厌倦，还是单纯的没睡好，这是一种很恐怖的心理现象，因为如果我无法理清楚我的负面情绪的来源，我几乎无法对此做任何针对的纠正。当我仅仅是因为劳累而放弃今晚回宿舍加班的时候，如果将这种情绪错误归类为对工作的厌恶，很有可能会在自我的内心负反馈中将这种并不存在的厌恶放大到自我确信我确实讨厌工作，从而不仅仅是影响一晚上的工作，甚至第二天都会因此困顿。\n不过随着工作的磨练，虽然并不一帆风顺，但总之我也逐渐形成了对工作的所谓的\nsense。更精确地说，我逐渐能够把握一项工作应该付出多少资源，应该怎么安排，虽然有时还是会失策但总之比小白好得太多。\n人际关系\n朋友之间的社交依然还是以舞萌为主线展开，不过随着坐标逐渐退坑，以他为中心的\nNumen、湖中等也逐渐淡了联系，hhh\n也因为各种各样的原因交流也冷落下来。相反地，因为经常遇到并且话题比较多（甚至还能聊之前化学竞赛的经历），所以逐渐和\nSodiuM、PCET 他们熟悉了起来。空调倒是一直保持着联系。\n除此以外交流比较深的就是 c7w 他们，也就是 Hotel9 那群，不过今年涵涵和\nHotel9\n切割了，我也不怎么出现在涵涵群里了，可能也代表着一些朋友圈的转变吧。\n\n当然，原来打牌认识的人、浮生群、V+ 群则淡得更加彻底了。\n\n朋友圈除此以外就是一些高中老朋友、以 yqq\n为核心的另外一群人。但总之也只能算是泛泛之交，最多保持个线上能聊得来的水平。\n\n倒是有另外一件事要说，就是又开始维持亲密关系了。说实话我名义上有过前两段所谓所谓的恋爱关系，但真的要说感受到有人关心或者说感受到亲密关系的话，确实只有这次了。\n对方是我高中的老同学，但因为奇奇怪怪的原因通过舞萌重新认识了。大概确实是有所谓类似缘分的东西，我和她在很多方面有类似的见解，爱好上也有相当程度的重合。我也大概是第一次有一种，想要安定下来或者说不仅仅是以恋爱的名义找一个稳定的玩伴而已的想法，所以也开始为此储蓄（因为实习其实已经存下来了相当的数量！），讨论租房、工作、婚姻、未来规划等话题。\n\n未来规划这种事情，其实怎么说来都是很空的，但是能让人短暂相信并且幻想的未来规划，和仅仅是说说，两秒钟就忘记的未来规划还是完全不一样的。\n不过我现在的问题是，我家里人似乎并没有那么认同我的未来规划，这也是目前我和他们比较大的分歧。我不想留在北京这个从气候到人文环境都不习惯的城市，然而苦恼的就是我的专业，对口的企业基本都在北京，如果去上海的话就要面临不对口的工作或者不够理想的薪资乃至更长的磨合期以及不友善的同僚。\n\n目前的想法是我出资一部分合租在上海，我 25 年 3\n月实习离职工作压力小一些之后可以时常去住一段时间。\n\n不过无论从什么角度，刚交往不到一年就开始同居确实也算是很快的了。\n\n游戏、业余消遣\n还在打舞萌，水平其实已经算是不低了，全国来看的话也是能算得上上层水准了。然而舞萌这个东西，不天天练习就会后退，而且我已经快要\n24\n岁了，在舞萌玩家里面已经是年龄偏大的了，说实话也已经做好了就此退坑养老休闲的准备了。\n麻将已经许久许久没有打过了，最近偶然重新开始乱打，水平滑坡很明显，但是现在雀魂玩家基数很大，反倒是大环境的水平后退得更明显，有点好笑。\n日语相关的东西也很久没有动过了，无论是语料输入还是整理自己的语法理解，大概还是因为工作太忙碌了。\n其他的消遣就是，开始旅游了，但说是旅游，说白了就是找个没去过的地方吃点饭、睡点觉、出点勤。目前规划着明年要多去几次日本，无论单纯去看点东西还是说去音乐现场。\n总结\n有点哑然，一年来其实值得叙述的东西不多。或者说我的心境逐渐变得大众化，可以用更有概括性的词汇一言以蔽之，比如工作、发论文、找对象、退坑游戏。另一方面，我内心的活动也逐渐平静，也逐渐和大众趋同，没那么难以理清楚。而且我也不抗拒，我一直觉得我的幸福最终就是平淡的生活，我虽然有着还不错的适应能力，但我显然更喜欢稳定、可预测的生活。\n最终的最终我还是走上了绝大部分人都会走上的路，那就是重复着工作、消遣的循环了此一生，甚至没有任何在事业上做出突破的动力。\n然而或许呢，或许某天我就突然对当下很不满很想打破，但至少不是 25\n年也不是 26 年，更不会是现在，我需要忙着投稿的现在。\n无所谓了，就这么平淡地走下去有何不可，生活中的任何事情目前来看都在可承受范围内，而且说实话经济条件、学业进度、感情状况甚至从表面上看都是平均以上的，那其实已经是圆满了。\n","categories":["【杂谈】碎碎念"]},{"title":"2022 年江苏高考数学（新高考全国 I）试卷","url":"/2022/06/07/enroll-jsgk-2022/","content":"听很多人说这份卷子十分难，于是打算简单做一下吧。\n\n单项选择题\n单项选择一共 8 条，一条 5 分，一共是 40\n分。错一条的代价实在是太大了，所以还是小心为好。\n我给出的答案为 (D)(D)(B)(C)(D)(A)(C)(C)。\nProblem 1\n如果集合 $M = \\{x: \\sqrt x &lt; 4\\}, N =\n\\{x: 3x \\geq 1\\}$，求集合 M ∩ N。\n\n{x : 0 ≤ x &lt; 2}\n$\\left\\{x: \\dfrac13 \\leq x &lt;\n2\\right\\}$\n{x : 3 ≤ x &lt; 16}\n$\\left\\{x: \\dfrac13 \\leq x &lt;\n16\\right\\}$\n\n\n显然 $M = (0, 16), N = \\left[\\dfrac13,\n+\\infty\\right)$，答案为 (D)。\nProblem 2\n如果 $\\mathop{\\rm i}(1 - z) = 1$，求\n$z + \\overline z$ 的值。\n\n − 2\n − 1\n1\n2\n\n\n假设 $z := a + b\\mathop{\\rm i}(a, b \\in\n\\mathbb R)$，那么：\n$$\n1 = \\mathop{\\rm i}(1 - z) = \\mathop{\\rm i}((1 - a) - b\\mathop{\\rm i}) =\nb + (1 - a)\\mathop{\\rm i}\n$$\n得到 $z = 1 + \\mathop{\\rm i}$，所以\n$z + \\overline z = 2\\Re(z) = 2$，答案为\n(D)。\nProblem 3\n在 △ABC\n中，点 D 在边 AB 上，BD = 2DA，记\n$\\vec{CA} = \\boldsymbol{m}, \\vec{CD} =\n\\boldsymbol{n}$，那么：\n\n$\\vec{CB} = 3\\boldsymbol{m} -\n2\\boldsymbol{n}$\n$\\vec{CB} = -2\\boldsymbol{m} +\n3\\boldsymbol{n}$\n$\\vec{CB} = 3\\boldsymbol{m} +\n2\\boldsymbol{n}$\n$\\vec{CB} = 2\\boldsymbol{m} +\n3\\boldsymbol{n}$\n\n\n显然有 $\\boldsymbol{n} = \\vec{CD} =\n\\vec{CB} + \\vec{BD}$，也就是说 $\\vec{BD} = \\boldsymbol{n} - \\vec{CB}$。\n同理我们还能得到 $\\vec{AD} = \\vec{CD} -\n\\vec{CA} = \\boldsymbol{n} - \\boldsymbol{m}$。\n根据 $2\\vec{AD} + \\vec{BD} =\n\\boldsymbol{0}$ 得到：\n$$\n\\boldsymbol{n} - \\vec{CB} + 2(\\boldsymbol{n} - \\boldsymbol{m}) =\n\\boldsymbol{0}\n$$\n也就是：\n$$\n\\vec{CB} = -2\\boldsymbol{m} + 3\\boldsymbol{n}\n$$\n答案为 (B)。\nProblem 4\n一道应用题。大意为，一个棱台水库，水位为海拔 148.5 米的时候，水面面积为 140.0 平方千米。水位为海拔 157.5 米的时候，水面面积为 180.0 平方千米。求解水库水位从 148.5 米上升到 157.5 米时增加的水量。\n\n1.0 × 109 立方米\n1.2 × 109 立方米\n1.4 × 109 立方米\n1.6 × 109 立方米\n\n\n简单的棱台体积计算题，注意单位换算：\n$$\n\\begin{aligned}\nV &amp;= \\frac13 h(S_1 + S_2 + \\sqrt{S_1S_2}) \\\\\n&amp;= \\frac13 \\times (157.5 - 148.5) \\times(140 + 180 + \\sqrt{140\n\\times 180}) \\times 10^6 \\\\\n&amp;= 6(3\\sqrt 7 + 16) \\times 10^7 \\\\\n&amp;\\approx 1.4 \\times 10^9 ({\\rm m}^3)\n\\end{aligned}\n$$\n答案为 (C)。\nProblem 5\n从 2 到 8 总共 7\n个整数中随机取两个不同的数，求两数互质的概率。\n\n1/6\n1/3\n1/2\n2/3\n\n\n互质的整数对包括：\n$$\n\\begin{aligned}\n&amp;(2, 3), (2, 5), (2, 7) \\\\\n&amp;(3, 4), (3, 5), (3, 7), (3, 8) \\\\\n&amp;(4, 5), (4, 7) \\\\\n&amp;(5, 6), (5, 7), (5, 8) \\\\\n&amp;(6, 7) \\\\\n&amp;(7, 8) \\\\\n\\end{aligned}\n$$\n所以概率为：\n$$\np = \\frac{14}{C_7^6} = \\frac23\n$$\n答案为 (D)。\nProblem 6\n函数 $f(x) = \\sin\\left(\\omega x + \\dfrac\\pi\n4\\right) + b(\\omega &gt; 0)$ 的最小正周期为 T，如果 $\\dfrac{2\\pi}{3} &lt; T &lt; \\pi$，而且曲线\ny = f(x)\n关于点 $\\left(\\dfrac{3\\pi}{2},\n2\\right)$ 对称，求 $f\\left(\\dfrac\\pi\n2\\right)$ 的值。\n\n1\n3/2\n5/2\n3\n\n\n根据曲线 y = f(x) 关于点\n$\\left(\\dfrac{3\\pi}{2}, 2\\right)$\n对称，能得到 $f\\left(\\dfrac{3\\pi}{2}\\right) =\n2$，以及 b = 0，也就是说：\n$$\n\\begin{aligned}\n&amp;\\sin\\left(\\omega \\dfrac{3\\pi}{2} + \\dfrac\\pi 4\\right) = 0 \\\\\n\\Rightarrow &amp;\\omega \\dfrac{3\\pi}{2} + \\dfrac\\pi 4 = k\\pi \\\\\n\\Rightarrow &amp;\\omega = \\frac23\\left(k - \\frac14\\right), k \\in \\mathbb\nZ\n\\end{aligned}\n$$\n根据最小正周期的范围，得到：\n$$\nT = \\frac{2\\pi}{\\omega} \\in \\left(\\dfrac{2\\pi}{3}, \\pi\\right)\n\\Rightarrow \\omega \\in (2, 3)\n$$\n进而得知 k = 4，也就是说\n$\\omega = \\dfrac52$，那么：\n$$\nf\\left(\\dfrac\\pi 2\\right) = \\sin\\left(\\dfrac52 \\cdot \\dfrac{\\pi}{2} +\n\\dfrac\\pi 4\\right) + 2 = 1\n$$\n答案为 (A)。\nProblem 7\n已知 $a = 0.1e^{0.1}, b = \\dfrac19, c =\n-\\ln 0.9$，则：\n\na &lt; b &lt; c\nc &lt; b &lt; a\nc &lt; a &lt; b\na &lt; c &lt; b\n\n\n考虑函数 f(x) = xex + ln (1−x), x ≥ 0，有：\n$$\nf'(x) = (x + 1)e^x - \\frac{1}{1 - x} &gt; (x + 1)^2 - \\frac{1}{1 - x} =\n-\\frac{x(x^2 + x - 1)}{1 - x}\n$$\n导函数保证了函数至少在区间 $\\left(0,\n\\dfrac{-1 + \\sqrt5}{2}\\right)$ 上递增，而 $\\dfrac1{10}$ 属于这个区间，所以：\n$$\nf(0.1) = 0.1e^{0.1} - \\ln\\frac{10}{9} &gt; f(0) = 0\n$$\n所以 a &gt; c。\n再考虑函数 $g(x) = \\ln(1 + x) - \\dfrac{x}{1\n+ x}, x \\geq 0$，有：\n$$\ng'(x) = \\frac{1}{1 + x} - \\frac{1}{(1 + x)^2} = \\frac{x}{(1 + x)^2} &gt;\n0\n$$\n从而：\n$$\ng\\left(\\frac19\\right) = \\ln\\frac{10}{9} - \\frac{1}{10} &gt; 0\n$$\n这说明：\n$$\n\\ln\\frac{10}{9} &gt; \\frac{1}{10} \\Rightarrow \\frac{10}{9} &gt; e^{0.1}\n\\Rightarrow \\frac{1}{9} &gt; 0.1e^{0.1}\n$$\n也就是 b &gt; a，从而答案为\n(C)。\nProblem 8\n已知正四棱锥的侧棱长为 l，其各顶点都在同一个球面上，若该球体积为\n36π，且 $3\\leq l\\leq 3\\sqrt\n3$，求该正四棱锥体积的取值范围。\n\n$\\left[18,\n\\dfrac{81}{4}\\right]$\n$\\left[\\dfrac{27}{4},\n\\dfrac{81}{4}\\right]$\n$\\left[\\dfrac{27}{4},\n\\dfrac{64}{3}\\right]$\n[18,27]\n\n\n假设球的半径为 R，显然有\n$V = \\dfrac43\\pi R^3 = 36\\pi$，得到\nR = 3。\n假设正四棱锥 O − ABCD\n底面中心为 P，其外接球球心为\nQ。显然我们得到一个直角三角形\nOPA，而球心\nQ 在直线 PO 上。令有向线段 QO 长度为 3，记有向线段 QP 长度为 x ∈ (−3,3)。显然：\n$$\n\\begin{aligned}\nl^2 &amp;= OA^2 = PO^2 + PA^2 \\\\\n&amp;= (QO - QP)^2 + (QA^2 - QP^2) \\\\\n&amp;= (3 - x)^2 + (9 - x^2) \\\\\n&amp;= 18 - 6x \\in [9, 27]\n\\end{aligned}\n$$\n也就得到了 $x \\in \\left[-\\dfrac32,\n\\dfrac32\\right]$。从而：\n$$\nV_{O-ABCD} = \\frac13 |PO| \\cdot 2PA^2 = \\frac23(3 - x)(9 - x^2)\n$$\n不难得到函数 $f(x) = \\dfrac23(3 - x)(9 -\nx^2)$ 在区间 $\\left[-\\dfrac32,\n-1\\right]$ 上递增，在区间 $\\left[-1,\n\\dfrac32\\right]$ 上递减，计算得到：\n$$\nf\\left(-\\dfrac32\\right) = \\frac{81}{4}, f\\left(\\dfrac32\\right) =\n\\frac{27}{4}, f(-1) = \\frac{64}{3}\n$$\n体积的取值范围应当为 $\\left[\\dfrac{27}{4},\n\\dfrac{64}{3}\\right]$，答案为 (C)。\n不定项选择题\n不定项选择一共 4 条，一条 5 分，一共是 20 分。\n我给出的答案为 (ABD)(AC)(BCD)(BC)。\nProblem 9\n对于正方体 ABCD − A1B1C1D1，下列说法中正确的有：\n\n直线 BC1 与 DA1\n所成的角为直角\n直线 BC1 与 CA1\n所成的角为直角\n直线 BC1 与平面 BB1D1D\n所成的角为 45∘\n直线 BC1 与平面 ABCD\n所成的角为 45∘\n\n\n根据直线 BC1 垂直于平面\nA1B1CD\n就能得到 (A)(B) 均正确。\n对于 (C)，显然有直线 A1C1\n垂直于平面 BB1D1D，而\n∠A1C1B = 60∘，该选项叙述错误。\n对于 (D)，显然有直线 CC1 垂直于平面\nABCD，而\n∠CC1B = 45∘，该选项叙述正确。\n所以答案为 (ABD)。\nProblem 10\n已知函数 f(x) = x3 − x + 1，下列说法中正确的有：\n\nf(x)\n有两个极值点\nf(x)\n有三个零点\n点 (0,1) 为曲线 y = f(x)\n的对称中心\n直线 y = 2x\n为曲线 y = f(x)\n的切线\n\n\n首先：\nf′(x) = 3x2 − 1\n得到 f(x) 在 $\\left(-\\infty, -\\dfrac{\\sqrt 3}{3}\\right)$\n上递增，在 $\\left(-\\dfrac{\\sqrt 3}{3},\n\\dfrac{\\sqrt 3}{3}\\right)$ 上递减，在 $\\left(\\dfrac{\\sqrt 3}{3}, +\\infty\\right)$\n上递增。\n并且计算出：\n$$\n\\begin{aligned}\nf\\left(-\\frac{\\sqrt3}{3}\\right) &amp;= \\frac{2\\sqrt 3}{9} + 1 &gt; 0 \\\\\nf\\left(\\frac{\\sqrt3}{3}\\right) &amp;= -\\frac{2\\sqrt 3}{9} + 1 &gt; 0 \\\\\n\\end{aligned}\n$$\n所以 f(x)\n有两个极值点，一个零点，选项 (A) 正确，选项 (B) 错误。\n进一步，我们我们有：\nf(x) + f(−x) = (x3−x+1) + (−x3+x+1) = 2, x ∈ ℝ\n这说明选项 (C) 正确。\n如果选项 (D) 正确，假设其为 x = x0\n处的切线，根据 f′(x0) = 3x02 − 1 = 2\n得到 x0 =  ± 1。\n此外，我们知道曲线 y = f(x) 在 x = x0\n处切线方程为：\ny = f′(x0)(x−x0) + f(x0) = f′(x0)x − x0f′(x0) + f(x0) = 2x\n那么我们得到：\n − x0f′(x0) + f(x0) = 0 ⇒ 2x0 = f(x0) = x03 − x0 + 1\n将 x0 =  ± 1\n代入验证，发现均不成立，所以选项 (D) 错误。\n答案为 (AC)。\nProblem 11\n已知 O 为坐标原点，点 A(1,1) 在抛物线 C : x2 = 2py(p&gt;0)\n上，过点 B(0,−1) 的直线交\nC 于 P, Q\n两点，则下列说法中正确的有：\n\nC 的准线方程为 y =  − 1\n直线 AB 与 C 相切\n|OP| ⋅ |OQ| &gt; |OA|2\n|BP| ⋅ |BQ| &gt; |BA|2\n\n\n首先显然得到 $p =\n\\dfrac12$，进而得到 C\n准线方程为 $y = -\\dfrac14$，选项 (A)\n错误。\n直线 AB 方程为\ny = 2x − 1，代入抛物线方程得到\nx2 = 2x − 1 ⇔ (x−1)2 = 0，此方程显然仅有\nx = 1 一个实数根，所以选项 (B)\n正确。\n不妨假设 P, Q\n坐标分别为 (x1,x12), (x2,x22)。\n如果假设 PQ 斜率为\nk，那么 PQ 方程为 y = kx − 1，代入抛物线方程得到下述二次方程：\nx2 = kx − 1 ⇔ x2 − kx + 1 = 0\nx1, x2\n为上述方程的两根，从而我们有 x1x2 = 1。\n那么：\n$$\n\\begin{aligned}\n|OP|^2 \\cdot |OQ|^2 &amp;= (x_1^2 + x_1^4)(x_2^2 + x_2^4) \\\\\n&amp;= (x_1^2 + x_1^4)\\left(\\frac{1}{x_1^2} + \\frac{1}{x_1^4}\\right) \\\\\n&amp;= 2 + x_1^2 + \\frac{1}{x_1^2} \\\\\n&amp;\\geq 4 = |OA|^4\n\\end{aligned}\n$$\n上述等号无法取到，因为 x1 ≠ x2，从而\nx1 ≠  ± 1。这说明了选项\n(C) 正确。\n现在继续计算 (D) 选项，我们有：\n$$\n\\begin{aligned}\n|BP|^2 \\cdot |BQ|^2 &amp;= (x_1^2 + (x_1^2 + 1)^2)(x_2^2 + (x_2^2 +\n1)^2) \\\\\n&amp;= (x_1^4 + 3x_1^2 + 1)\\left(\\frac{1}{x_1^4} + \\frac{3}{x_1^2} +\n1\\right) \\\\\n&amp;= 11 + \\left(x_1^4 + \\frac{1}{x_1^4}\\right) + 6\\left(x_1^2 +\n\\frac{1}{x_1^2}\\right) \\\\\n&amp;\\geq 25 = |BA|^4\n\\end{aligned}\n$$\n上述等号无法取到，因为 x1 ≠ x2，从而\nx1 ≠  ± 1。这说明了选项\n(D) 正确。\n所以答案为 (BCD)。\nProblem 12\n已知函数 f(x)\n以及其导函数 f′(x)\n的定义域均为 ℝ，记 g(x) := f′(x)。\n如果 $f\\left(\\dfrac32 - x\\right), g(2 +\nx)$ 均为偶函数，那么下列说法中正确的是：\n\nf(0) = 0\n$g\\left(-\\dfrac12\\right) = 0$\nf(−1) = f(4)\ng(−1) = g(2)\n\n\n首先需要熟知这样的结论，即导函数为偶函数，则原函数为关于某点中心对称，导函数为奇函数，则原函数为偶函数。\n由于 f(2+x)\n的导函数 g(2+x)\n为偶函数，那么 f(2+x)\n关于点 (2,f(2)) 中心对称。\n那么我们可以给出下述推理：\n$$\n\\begin{aligned}\nf(x) &amp;= f\\left(\\frac32 - \\left(\\frac32 - x\\right)\\right) =\nf\\left(\\frac32 + \\left(\\frac32 - x\\right)\\right) \\\\\n&amp;= f(3 - x) = f(2 + (1 - x)) = 2f(2) - f(2 - (1 - x)) \\\\\n&amp;= 2f(2) - f(1 + x)\n\\end{aligned}\n$$\n也就得到 f(x+2) = 2f(2) − f(x+1) = f(x)，f(x) 为周期为 2 的周期函数。\n对于选项 (A)，如果 f(2) ≠ 0，显然可知 f(0) ≠ 0。而这是存在的，取反例 f(x) = sin (πx) + 1\n即可。选项 (A) 错误。\n根据 f(x)\n周期显然可知 f(2n) = f(2), n ∈ ℤ。\n同时有 f(2n+1) = f(1) = 2f(2) − f(2) = f(2), n ∈ ℤ。也就是说对所有整数\nn，都有 f(n) = f(2)，所以选项\n(C) 正确。\n此外根据导函数定义（下面所有操作的基础均为导函数的存在性）：\n$$\ng\\left(\\frac32\\right) = \\lim_{\\delta\\to 0}\\frac{f\\left(\\dfrac32 +\n\\delta\\right) - f\\left(\\dfrac32\\right)}{\\delta}\n$$\n根据 $f\\left(\\dfrac32 - x\\right)$\n为偶函数，得到：\n$$\ng\\left(\\frac32\\right) = \\lim_{\\delta\\to 0}\\frac{f\\left(\\dfrac32 -\n\\delta\\right) - f\\left(\\dfrac32\\right)}{\\delta} = \\lim_{\\delta\\to\n0}\\frac{f\\left(\\dfrac32 + \\delta\\right) -\nf\\left(\\dfrac32\\right)}{-\\delta}\n$$\n上述第二个等号作换元 δ →  − δ。上述两个式子相加得到\n$g\\left(\\dfrac32\\right) = 0$，据 g(x) 的周期性即可得到 $g\\left(-\\dfrac12\\right) = 0$。选项 (B)\n正确。\n选项 (D) 存在反例 f(x) = sin (πx)，该函数满足所有题设约束，但是不满足\n(D) 要求。\n所以答案为 (BC)。\n填空题\nProblem 13\n求 $\\left(1 - \\dfrac yx\\right)(x +\ny)^8$ 的展开式中 x2y6\n的系数。\n\n最终展开式中 x2y6\n项可能的出现方式为 1 ⋅ x2y6\n以及 $-\\dfrac yx \\cdot\nx^3y^5$。那么最终系数为：\n$$\nC_8^2 - C_8^3 = \\frac{8 \\times 7}{2!} - \\frac{8 \\times 7 \\times 6}{3!} =\n-28\n$$\n故答案为  − 28。\nProblem 14\n写出与圆 x2 + y2 = 1\n和 (x−3)2 + (y−4)2 = 16\n都相切的一条直线的方程。\n\n假设直线方程为 ax + by + c = 0，显然根据直线和圆相切的要求：\n$$\n\\begin{cases}\n\\dfrac{|c|}{\\sqrt{a^2 + b^2}} = 1 \\\\\n\\dfrac{|3a + 4b + c|}{\\sqrt{a^2 + b^2}} = 4 \\\\\n\\end{cases}\n$$\n根据第一个方程显然有 c ≠ 0，那么记 $a' := \\dfrac ac, b' := \\dfrac\nbc$，上述方程组即：\n$$\n\\begin{cases}\n\\dfrac{1}{\\sqrt{a'^2 + b'^2}} = 1 \\\\\n\\dfrac{|3a' + 4b' + 1|}{\\sqrt{a'^2 + b'^2}} = 4 \\\\\n\\end{cases}\n\\Rightarrow\n\\begin{cases}\n\\sqrt{a'^2 + b'^2} = 1 \\\\\n|3a' + 4b' + 1| = 4 \\\\\n\\end{cases}\n$$\n分情况讨论，若 3a′ + 4b′ + 1 = 4 ⇔ 3a′ + 4b′ = 3，那么：\n$$\nb' = \\frac{3 - 3a'}{4} \\Rightarrow a'^2 + b'^2 = a'^2 + \\left(\\frac{3 -\n3a'}{4}\\right)^2 = 1\n$$\n即：\n$$\n25a'^2 - 18a' - 7 = 0 \\iff a' \\in \\left\\{1, -\\frac{7}{25}\\right\\}\n$$\n对应的 b′ 分别为 0 和 $\\dfrac{24}{25}$。\n若 3a′ + 4b′ + 1 =  − 4 ⇔ 3a′ + 4b′ =  − 5，那么：\n$$\nb' = \\frac{-5 - 3a'}{4} \\Rightarrow a'^2 + b'^2 = a'^2 + \\left(\\frac{-5\n- 3a'}{4}\\right)^2 = 1\n$$\n得到 $a' = -\\dfrac35$，对应的 $b' = -\\dfrac45$。\n从而得到答案为 x =  − 1 或\n − 7x + 24y + 25 = 0\n或  − 3x − 4y + 5 = 0。\nProblem 15\n若曲线 y = (x+a)ex\n有两条过坐标原点的切线，求 a\n的取值范围。\n\n首先：\ny′ = (x+a+1)ex\n那么曲线在 x = x0\n处切线方程为：\ny = (x0+a+1)ex0(x−x0) + (x0+a)ex0\n该切线过坐标原点等价于：\n − x0(x0+a+1)ex0 + (x0+a)ex0 = 0 ⇔ x0 + a = x0(x0+a+1)\n也就是说切线过坐标原点等价于 x0\n为下述二次方程的根：\nx02 + ax0 − a = 0\n根据题设，上述方程有两个互不相同的实根，即：\nΔ = a2 + 4a &gt; 0 ⇔ a ∈ (−∞,−4) ∪ (0,+∞)\n所以答案为 (−∞,−4) ∪ (0,+∞)。\nProblem 16\n已知椭圆 $C: \\dfrac{x^2}{a^2} +\n\\dfrac{y^2}{b^2} = 1(a &gt; b &gt; 0)$，C 的上顶点为 A，两个焦点为 F1, F2，离心率为\n$\\dfrac12$。过 F1 且垂直于 AF2 的直线交\nC 于 D, E 两点，|DE| = 6，求 △ADE 的周长。\n\n根据离心率，不妨假设 $a = 2t, b = \\sqrt3 t,\nc = t(t &gt; 0)$。那么 A 坐标为 $(0, \\sqrt3 t)$，F1, F2\n坐标为 (±t,0)。\n那么 AF2 斜率为 $-\\sqrt 3$，得知 DE 的斜率为 $\\dfrac{1}{\\sqrt 3}$，那么 DE 方程为 $x = \\sqrt3y - t$。代入椭圆方程得到：\n$$\n\\dfrac{(\\sqrt3y - t)^2}{4t^2} + \\dfrac{y^2}{3t^2} = 1 \\iff 13y^2 -\n6\\sqrt3 yt - 9t^2 = 0\n$$\n假设上述关于 y\n的方程的两个根为 y1, y2，那么\n$y_1 + y_2 = \\dfrac{6\\sqrt3 t}{13}, y_1y_2 =\n-\\dfrac{9}{13}t^2$。\n我们显然知道：\n$$\n\\begin{aligned}\n|DE|^2 &amp;= 4(y_1 - y_2)^2 = 4((y_1 + y_2)^2 - 4y_1y_2) \\\\\n&amp;= \\left(\\frac{48t}{13}\\right)^2 = 36\n\\end{aligned}\n$$\n得到 $t = \\dfrac{13}{8}$。\n另外，直接求解方程得到：\n$$\ny_{1, 2} = \\frac{3\\sqrt 3 \\pm 12}{13}t = \\frac{3\\sqrt 3}{8} \\pm \\frac32\n$$\n从而得到 D, E\n的坐标为：\n$$\n\\left(\\frac{3\\sqrt 3}{2} - \\frac12, \\frac{3\\sqrt 3}{8} + \\frac32\\right),\n\\left(-\\frac{3\\sqrt 3}{2} - \\frac12, \\frac{3\\sqrt 3}{8} - \\frac32\\right)\n$$\n考虑到 A 坐标为 $\\left(0, \\dfrac{13\\sqrt\n3}{8}\\right)$，得到：\n$$\n\\begin{aligned}\n|AD|^2 &amp;= \\left(\\frac{3\\sqrt 3}{2} - \\frac12\\right)^2 +\n\\left(\\frac{3\\sqrt 3}{8} + \\frac32 - \\dfrac{13\\sqrt 3}{8}\\right)^2 \\\\\n&amp;= \\frac{223 - 84\\sqrt 3}{16} \\\\\n|BD|^2 &amp;= \\left(-\\frac{3\\sqrt 3}{2} - \\frac12\\right)^2 +\n\\left(\\frac{3\\sqrt 3}{8} - \\frac32 - \\dfrac{13\\sqrt 3}{8}\\right)^2 \\\\\n&amp;= \\frac{223 + 84\\sqrt 3}{16} \\\\\n\\end{aligned}\n$$\n不难发现 $(14 \\pm 3\\sqrt 3)^2 = 223 \\pm\n84\\sqrt 3$，所以：\n$$\n|AD| + |BD| = \\frac{14 - 3\\sqrt 3}{4} + \\frac{14 + 3\\sqrt 3}{4} = 7\n$$\n从而需要求的三角形周长为 13。即最后的答案为 13。\n\n【另解】我自己也是算完之后才回想起来有这么一个简单的结论我忘了，离心率为\n$\\dfrac12$\n的椭圆，其上顶点和两个焦点构成等边三角形。\n这个事实意味着直线 DE 不仅垂直于 AF2，而且是垂直平分\nAF2。也就是说\n△ADE 全等于\n△DEF2。那么其周长：\nC△DEF2 = (|DF1|+|DF2|) + (|EF1|+|EF2|) = 4a = 13\n解答题\n这次解答题的顺序是数列、解三角形、立体几何、统计、解析几何、导数，中规中矩的顺序。\nProblem 17\n记 Sn\n为数列 {an} 的前 n 项和，已知 a1 = 1，且数列 $\\left\\{\\dfrac{S_n}{a_n}\\right\\}$ 是公差为\n$\\dfrac13$ 的等差数列。\n\n求 {an}\n的通项公式。\n求证：\n\n$$\n\\sum_{k = 1}^n \\frac{1}{a_k} &lt; 2, n \\in \\mathbb N\n$$\n\n【第一问】根据数列 $\\left\\{\\dfrac{S_n}{a_n}\\right\\}$ 是公差为\n$\\dfrac13$\n的等差数列，并且我们能得到其首项为：\n$$\n\\frac{S_1}{a_1} = 1\n$$\n那么我们得到其通项公式为：\n$$\n\\frac{S_n}{a_n} = \\frac13 n + \\frac23 \\iff 3S_n = (n + 2)a_n\n$$\n取 n + 1 代替 n，得到等式 3Sn + 1 = (n+3)an + 1，上述两式相减：\n3(Sn + 1−Sn) = (n+3)an + 1 − (n+2)an ⇔ (n+2)an = nan + 1\n也就是下述关系：\n$$\n\\frac{a_{n + 1}}{a_n} = \\frac{n + 2}{n}, n \\in \\mathbb N\n$$\n那么对于 n ≥ 2：\n$$\n\\begin{aligned}\na_n &amp;= \\frac{a_n}{a_{n - 1}} \\cdot \\frac{a_{n - 1}}{a_{n - 2}} \\cdot\n\\cdots \\cdot \\frac{a_2}{a_1} = \\frac{n + 1}{n - 1} \\cdot \\frac{n}{n - 2}\n\\cdot \\cdots \\cdot \\frac{3}{1} \\\\\n&amp;= \\frac{n(n + 1)}{2}\n\\end{aligned}\n$$\n经检验，n = 1\n时上述通项公式也成立，所以数列 {an}\n的通项公式为：\n$$\na_n = \\frac{n(n + 1)}{2}, n \\in \\mathbb N\n$$\n【第二问】可以计算得到：\n$$\n\\begin{aligned}\n\\sum_{k = 1}^n \\frac{1}{a_k} = \\sum_{k = 1}^n \\frac{2}{k(k + 1)} =\n2\\sum_{k = 1}^n \\left(\\frac{1}{k} - \\frac{1}{k + 1}\\right) = 2\\left(1 -\n\\frac{1}{n + 1}\\right) &lt; 2\n\\end{aligned}\n$$\nProblem 18\n记 △ABC\n的内角 A, B, C\n的对边分别为 a, b, c。已知下述关系：\n$$\n\\frac{\\cos A}{1 + \\sin A} = \\frac{\\sin 2B}{1 + \\cos 2B}\n$$\n\n若 $C = \\dfrac{2\\pi}{3}$，求\nB\n求 $\\dfrac{a^2 + b^2}{c^2}$\n的最小值\n\n\n【第一问】根据二倍角公式有：\n$$\n\\frac{\\sin 2B}{1 + \\cos 2B} = \\frac{2\\sin B\\cos B}{1 + (2\\cos^2 B - 1)}\n= \\frac{\\sin B}{\\cos B}\n$$\n代入已知等式：\n$$\n\\frac{\\cos A}{1 + \\sin A} = \\frac{\\sin B}{\\cos B}\n$$\n整理得到：\ncos Acos B = sin B + sin Asin B ⇒ sin B = cos Acos B − sin Asin B = cos (A+B)\n根据三角形内角和，有 A + B + C = π ⇒ A + B = π − C，即：\nsin B = cos (π−C) =  − cos C\n已知 $C =\n\\dfrac{2\\pi}{3}$，所以：\n$$\n\\sin B =  -\\cos\\frac{2\\pi}{3} = \\frac12\n$$\n由于 B 位于三角形内，所以\nB ∈ (0,π)。\n另外，考虑到 $C =\n\\dfrac{2\\pi}{3}$，若 $B &gt;\n\\dfrac\\pi2$，则 A = π − C − B &lt; 0，不符合要求，所以\n$B &lt; \\dfrac\\pi2$。\n从而 $B = \\dfrac\\pi6$。\n【第二问】根据上一问：\n$$\n\\cos(A + B) = \\sin B = \\cos\\left(\\frac\\pi2 - B\\right)\n$$\n由于 $A + B, \\dfrac\\pi2 - B \\in (0,\n\\pi)$，而余弦函数在这一个区间单调，所以：\n$$\nA + B = \\dfrac\\pi2 - B \\iff A + 2B = \\frac\\pi2\n$$\n根据正弦定理：\n$$\n\\frac{a^2 + b^2}{c^2} = \\frac{\\sin^2A + \\sin^2B}{\\sin^2C}\n$$\n使用  − cos C = sin B\n替换，并代入 $A + 2B =\n\\dfrac\\pi2$：\n$$\n\\begin{aligned}\n\\frac{a^2 + b^2}{c^2} &amp;= \\frac{\\sin^2A + \\sin^2B}{\\sin^2C} =\n\\frac{\\sin^2\\left(\\dfrac\\pi2 - 2B\\right) + \\sin^2B}{1 - \\cos^2C} \\\\\n&amp;= \\frac{\\cos^2 2B + \\sin^2B}{1 - \\sin^2B} = \\frac{(2\\cos^2 B - 1)^2\n+ (1 - \\cos^2B)}{\\cos^2B} \\\\\n&amp;= 4\\cos^2B + \\frac{2}{\\cos^2B} - 5 \\geq 4\\sqrt2 - 5\n\\end{aligned}\n$$\n等号成立当且仅当 $\\cos B =\n\\dfrac{1}{\\sqrt[4]{2}}$。\n即 $\\dfrac{a^2 + b^2}{c^2}$\n的最小值为 $4\\sqrt2 - 5$。\nProblem 19\n已知直三棱柱 ABC − A1B1C1\n的体积为 4，△A1BC\n的面积为 $2\\sqrt 2$。\n\n求 A 到平面 A1BC\n的距离\n设 D 为 A1C 的中点，已知\nAA1 = AB\n且平面 A1BC\n垂直于平面 ABB1A1，求二面角\nA − BD − C\n的正弦值。\n\n\n【第一问】考虑三棱锥 A1 − ABC，其和直三棱柱\nABC − A1B1C1\n有相同的底面 △ABC 且有相同的高\nAA1，所以其体积为直三棱柱\nABC − A1B1C1\n的三分之一，即：\n$$\nV_{A_1-ABC} = \\frac13 \\times 4 = \\frac43\n$$\n如果记 A 到平面 A1BC\n的距离为 h，△A1BC\n的面积为 S，那么 $V_{A_1-ABC} = \\dfrac13 Sh$。从而得到：\n$$\n\\dfrac13 Sh = \\frac43 \\Rightarrow Sh = 4\n$$\n由题设有 $S = 2\\sqrt 2$，所以 A 到平面 A1BC\n的距离为：\n$$\nh = \\frac{4}{2\\sqrt 2} = \\sqrt 2\n$$\n【第二问】\n在直三棱柱 ABC − A1B1C1\n中，我们有 BB1 垂直于平面\nABC，考虑到\nBC⊂ 平面 ABC，所以 BB1⊥BC。\n另一方面，直三棱柱 ABC − A1B1C1\n中侧面 ABB1A1\n为长方形，而 AA1 = AB，所以该侧面为正方形，进而\nAB1⊥A1B。\n由于平面 A1BC\n垂直于平面 ABB1A1\n且两平面交于 A1B，考虑到\nAB1⊂ 平面\nABB1A1，所以\nAB1\n垂直于平面 A1BC。而又由于\nBC⊂ 平面 ABC，所以 AB1⊥BC。\n因为 AB1, BB1\n都是平面 ABB1A1\n内的直线且两者相交于 B1，而直线 BC 与两者均垂直，所以 BC 垂直于平面 ABB1A1。考虑到\nAB⊂ 平面 ABB1A1，所以\nAB⊥BC。同理依然有\nA1B⊥BC。\n也就是说 △ABC 为以 AC\n为斜边的直角三角形，△A1BC\n为以 A1C\n为斜边的直角三角形。设 AA1 = AB = a, BC = b，那么\n$A_1B = \\sqrt2 a$，△ABC 面积为 $\\dfrac12 ab$，△A1BC\n面积为 $\\dfrac{\\sqrt 2}{2}ab = 2\\sqrt\n2$。\n那么直三棱柱 ABC − A1B1C1\n的体积为 $a\\cdot \\dfrac12 ab = \\dfrac12 a^2b =\n4$。\n从而得到 a = b = 2。\n上述论述中我们已经说明了 AB, B1B, BC\n两两垂直，所以以 B\n为坐标原点，BC, BA, BB1\n分别为 x, y, z\n轴建立空间直角坐标系。\n那么 A 坐标为 (0,2,0)，A1 坐标为 (0,2,2)，C 坐标为 (2,0,0)。\n由于 D 为 A1C\n中点，所以其坐标为 (1,1,1)。\n那么 $\\vec{BA} = (0, 2, 0), \\vec{BD} = (1,\n1, 1), \\vec{BC} = (2, 0, 0)$。\n假设平面 ABD 的法向量为\nn = (x1,y1,z1)，根据\n$\\boldsymbol{n} \\bot \\vec{BA},\n\\vec{BD}$ 得到：\n$$\n\\begin{cases}\nx_1 + y_1 + z_1 = 0 \\\\\n2y_1 = 0\n\\end{cases}\n$$\n不妨取 n = (1,0,−1)。同理可以取平面\nCBD 的法向量\nm = (0,1,−1)。\n记欲求二面角大小为 θ，可以得到二面角 A − BD − C\n的余弦值绝对值为：\n$$\n|\\cos\\langle\\boldsymbol{n}, \\boldsymbol{m}\\rangle| =\n\\left|\\frac{\\boldsymbol{n} \\cdot \\boldsymbol{m}}{|\\boldsymbol{n}| \\cdot\n|\\boldsymbol{m}|}\\right| = \\frac{1}{2}\n$$\n从而得到该二面角的正弦值为：\n$$\n\\sin\\theta = \\sqrt{1 - |\\cos\\theta|^2} = \\frac{\\sqrt 3}{2}\n$$\nProblem 20\n概率统计相关问题。医疗团队针对某一种疾病和个人卫生的关系做调查，抽样\n100 名该病患者构成病例组和 100\n名未患有该病的健康人构成对照组，调查他们的个人卫生，得到下述数据：\n\n\n\n\n个人卫生不够良好\n个人卫生良好\n\n\n\n\n病例组\n40\n60\n\n\n对照组\n10\n90\n\n\n\n\n能否有 99%\n的把握认为患该病的群体和未患该病的群体个人卫生情况有差异\n从该地区人群中任选一人，记 A\n表示事件“选到的人卫生习惯不够良好”，B\n表示事件“选到的人患有该疾病”。记指标 R 为：\n\n$$\nR = \\frac{P(B \\mid A)}{P(\\overline B \\mid A)} \\cdot \\frac{P(\\overline B\n| \\overline A)}{P(B \\mid \\overline A)}\n$$\n\n证明：\n\n$$\nR = \\frac{P(A \\mid B)}{P(\\overline A \\mid B)} \\cdot \\frac{P(\\overline A\n| \\overline B)}{P(A \\mid \\overline B)}\n$$\n\n利用调查数据估计 $P(A \\mid B), P(A \\mid\n\\overline B)$，并根据上述结论估计 R 值。\n\n\n【第一问】直接使用卡方检验：\n$$\nK^2 = \\frac{n(ad - bc)^2}{(a + b)(c + d)(a + c)(b + d)} = \\frac{200\n\\times (40 \\times 90 - 10 \\times 60)^2}{100 \\times 100 \\times 50 \\times\n150} = 24 &gt; 6.635\n$$\n可知我们有 99%\n的把握认为患该病的群体和未患该病的群体个人卫生情况有差异。\n【第二问】我们首先证明第一小问的等式：\n根据 R\n的定义和条件概率的定义：\n$$\n\\begin{aligned}\nR &amp;= \\frac{P(B \\mid A)}{P(\\overline B \\mid A)} \\cdot\n\\frac{P(\\overline B | \\overline A)}{P(B \\mid \\overline A)} =\n\\frac{\\dfrac{P(AB)}{P(A)} \\cdot \\dfrac{P(\\overline A\\overline\nB)}{P(\\overline A)}}{\\dfrac{P(A\\overline B)}{P(A)} \\cdot\n\\dfrac{P(\\overline AB)}{P(\\overline A)}} \\\\\n&amp;= \\frac{P(AB)P(\\overline A\\overline B)}{P(A\\overline B)P(\\overline\nAB)} \\\\\n&amp;= \\frac{\\dfrac{P(AB)}{P(B)} \\cdot \\dfrac{P(\\overline A\\overline\nB)}{P(\\overline B)}}{\\dfrac{P(A\\overline B)}{P(\\overline B)} \\cdot\n\\dfrac{P(\\overline AB)}{P(B)}} = \\frac{P(A \\mid B)}{P(\\overline A \\mid\nB)} \\cdot \\frac{P(\\overline A | \\overline B)}{P(A \\mid \\overline B)}\n\\end{aligned}\n$$\n容易根据调查数据估计出：\n$$\nP(A \\mid B) = 0.4, P(\\overline A \\mid B) = 0.6, P(\\overline A |\n\\overline B) = 0.9, P(A \\mid \\overline B) = 0.1\n$$\n此时 R = 6。\nProblem 21\n已知点 A(2,1) 在双曲线\n$C: \\dfrac{x^2}{a^2} - \\dfrac{y^2}{a^2 - 1} =\n1(a &gt; 1)$ 上，直线 l\n交 C 于 P, Q 两点，直线 AP, AQ\n的斜率之和为 0。\n\n求 l 的斜率\n若 $\\tan\\angle PAQ = 2\\sqrt\n2$，求 △PAQ\n的面积\n\n\n【第一问】由于 A(2,1)\n在双曲线 C 上，所以：\n$$\n\\dfrac{4}{a^2} - \\dfrac{1}{a^2 - 1} = 1 \\Rightarrow a^2 = 2\n$$\n不妨记 AP 的斜率为\nk，那么 AQ 的斜率为  − k。从而 AP 的方程为 y = k(x−2) + 1，将其代入双曲线方程得到：\n$$\n\\dfrac{x^2}{2} - (kx - 2k + 1)^2 = 1\n$$\n整理为：\n$$\n\\left(\\frac{1}{2} - k^2\\right)x^2 + 2(2k - 1)kx - (1 + (2k - 1)^2) = 0\n$$\n由于 A 为双曲线和 AP 的交点之一，所以 x = 2 为其一根，另一根为 P 的横坐标。\n上述方程的两根之积为：\n$$\n-\\frac{1 + (2k - 1)^2}{\\dfrac{1}{2} - k^2} = -\\frac{2 + 2(2k - 1)^2}{1 -\n2k^2}\n$$\n得知其横坐标即可计算其纵坐标，所以 P 的坐标为：\n$$\n\\left(-\\frac{1 + (2k - 1)^2}{1 - 2k^2}, \\frac{2k^2 - 4k + 1}{1 -\n2k^2}\\right)\n$$\n将 k 替换为  − k 得到 Q 的坐标：\n$$\n\\left(-\\frac{1 + (2k + 1)^2}{1 - 2k^2}, \\frac{2k^2 + 4k + 1}{1 -\n2k^2}\\right)\n$$\n也就是说 l 的斜率为：\n$$\nk_l = \\frac{-\\dfrac{1 + (2k + 1)^2}{1 - 2k^2} + \\dfrac{1 + (2k - 1)^2}{1\n- 2k^2}}{\\dfrac{2k^2 + 4k + 1}{1 - 2k^2} - \\dfrac{2k^2 - 4k + 1}{1 -\n2k^2}} = -1\n$$\n【第二问】由于 tan ∠PAQ &gt; 0，所以其为锐角。我们可以知道\n$\\tan\\dfrac12\\angle PAQ =\n\\dfrac1k$，这里 k 为\nAP, AQ\n斜率的绝对值。从而：\n$$\n\\tan\\angle PAQ = \\frac{2\\tan\\dfrac12\\angle PAQ}{1 - \\tan^2\\dfrac12\\angle\nPAQ} = \\frac{2 / k}{1 - 1 / k^2} = 2\\sqrt 2\n$$\n由 k &gt; 0 得到 $k = \\sqrt 2$。\n从而根据上一问的结果，我们得到：\n$$\nP\\left(\\frac{10 - 4\\sqrt 2}{3}, \\frac{4\\sqrt 2 - 5}{3}\\right),\nQ\\left(\\frac{10 + 4\\sqrt 2}{3}, \\frac{-4\\sqrt 2 - 5}{3}\\right)\n$$\n此时 PQ 方程为\n$y = -x + \\dfrac53$，A 到此的距离为：\n$$\nd = \\frac{|2 + 1 - 5 / 3|}{\\sqrt 2} = \\frac{2\\sqrt 2}{3}\n$$\n而：\n$$\n|PQ| = \\sqrt 2 \\left(\\frac{10 + 4\\sqrt 2}{3} - \\frac{10 - 4\\sqrt\n2}{3}\\right) = \\frac{16}{3}\n$$\n所以需要求的面积为：\n$$\nS = \\frac12 |PQ| \\cdot d = \\frac{16\\sqrt 2}{9}\n$$\nProblem 22\n已知函数 f(x) = ex − ax\n与函数 g(x) = ax − ln x\n有相同的最小值。\n\n求 a\n证明存在实数 b，令直线\ny = b 和曲线 y = f(x), y = g(x)\n共计有三个不同的交点，且这三个交点的横坐标从小到大排列构成等差数列。\n\n\n【第一问】显然：\n$$\nf'(x) = e^x - a, g'(x) = a - \\frac1x\n$$\n由于这两个函数有相同的最小值，所以：\n$$\nf(\\ln a) = a - a\\ln a = 1 + \\ln a = g\\left(\\frac1a\\right)\n$$\n也就是说：\n$$\n\\ln a - \\frac{a - 1}{a + 1} = 0\n$$\n另外，由最小值的存在性显然有 a &gt; 0。考虑函数：\n$$\n\\phi(x) := \\ln x - \\frac{x - 1}{x + 1}, x &gt; 0\n$$\n其有：\n$$\n\\phi'(x) = \\frac1x - \\frac{2}{(x + 1)^2} = \\frac{x^2 + 1}{x(x + 1)^2}\n&gt; 0\n$$\n由 ϕ(a) = ϕ(1) = 0\n得到 a = 1。\n【第二问】首先证明，f(x) − g(x) = 0\n在 (0,+∞) 上有唯一的解 x0。\n定义函数 h(x) := f(x) − g(x)。\n根据上一问，得知 f(x) 在 (0,+∞) 上递增，g(x) 在 (0,1) 上递减，这说明 h(x) 在 (0,1) 上递增。\n另外：\n$$\nh'(x) = e^x + \\frac1x - 2 &gt; e - 2 &gt; 0, x &gt; 1\n$$\n所以 h(x) 在 (1,+∞) 上递增，即 h(x) 在 (0,+∞) 上递增。\n此外：\nh(1) = e − 2 &gt; 0\n另外：\ng(e1 − e) = e1 − e − (1−e) &gt; e − 1 = f(1) &gt; f(e1 − e)\n故 h(e1 − e) &lt; 0。\n这说明了 x0\n唯一存在于区间 (e1 − e,1)\n上。\n下面证明 b = f(x0) = g(x0)\n满足条件。\n在此之前，我们需要知道由于 0 &lt; x0 &lt; 1，所以\n1 = f(0) &lt; b = f(x0) &lt; e − 1 = f(1)。\n首先证明 f(x) = b 有除\nx0 外，还具有一根\nx1 ∈ (−∞,0)。由于\nf(x) 在 (−∞,0) 上递减，并且 f(0) &lt; b，且 f(1−e) = e1 − e + (e−1) &gt; e − 1 &gt; b。\n这说明了 x1\n唯一存在于 (1−e,0) 上。\n再证明 g(x) = b 有除\nx0 外，还具有一根\nx2 ∈ (1,+∞)。由于\ng(x) 在 (1,+∞) 上递增，并且 g(1) = 1 &lt; b，且 g(e) = e − 1 &gt; b。\n这说明了 x2\n唯一存在于 (1,e) 上。\n也就是说直线 y = b\n和曲线 y = f(x), y = g(x)\n共计有三个不同的交点，其横坐标从小到大为 x1, x0, x2。\n现在观察下述：\n$$\n\\begin{cases}\nf(\\ln x_0) = e^{\\ln x_0} - \\ln x_0 = x_0 - \\ln x_0 = g(x_0) = b \\\\\ng(e^{x_0}) = e^{x_0} - \\ln e^{x_0} = e^{x_0} - x_0 = f(x_0) = b \\\\\n\\end{cases}\n$$\n这说明 ln x0, ex0\n也是直线 y = b 和曲线\ny = f(x), y = g(x)\n交点的横坐标，但我们已经证明了一共仅有三个交点，这只能说明 x1 = ln x0, x2 = ex0。\n由于 f(x0) = g(x0)，所以\nex0 + ln x0 = x1 + x2 = 2x0。\n所以这三个横坐标从小到大排列为等差数列，证明完毕。\n后记\n卷子做完了，Holder 也已经明白了我已经没有高中时候那种手算能力了。\n不少人说这份卷子很难，其实我看真正算得上是难题的几乎没有，几乎每道题都有很自然的思考角度和解决方式。\n但问题就是现在大部分的高考备考流于做模板题，练死思路，结果就是这次高考连稍微难点的解三角形、立体几何都做不出来。\n复习不够全面，可能连条件概率的定义、棱台的体积公式都会忘记。\n\n这份卷子只不过是把平时用来送分的解答题前几条，数列、解三角形、立体几何稍微出得有了点新意，稍微加了点门槛。卷子其他地方平心而论，概率与统计只要记得条件概率定义五分钟就能写完，解析几何是考烂了的二级结论，选择填空也乏善可陈。但就是这样，就能把平时的中档生直接卡住。\n而且这份卷子的特征就是，思路的高下直接影响分数。想到了妙手，就能一分钟内看出答案，想不到，那就和我做填空题最后一问一样算到起飞还得不到答案。一旦陷入了这种状况，如果不及时调整思路，可能影响的是后面的解题状态。\n说明死方法没用了，脑子要灵活。总而言之，是一份好卷子，但是被骂也是理所应当。\n","categories":["【杂谈】数学"]},{"title":"东京大学入学考试理科数学试卷合集","url":"/2025/04/14/enroll-tokyo/","content":"无聊的人什么都会做的，小镇做题家依然会用做题作为消遣。\n日本高考制度大概可以理解为考两次，第一次是全国统考（共通テスト），考题比较简单，然后第二次则是各个大学自主命题的入学考试，东京大学自然难度一直很高。也当作一种知己知彼，来看看东京大学到底会考什么样的题。\n\n东京大学的理科数学全部是解答题。\n令和 6 年（2024）\nProblem 1\n座標空間内の点 A(0,−1,1)\nをとる。xy 平面上の点\nP が次の条件 (i), (ii), (iii)\nをすべて満たすとする。\n\nP は原点 O と異なる。\n$\\angle AOP\\geq\\dfrac23\\pi$\n$\\angle OAP\\leq\\dfrac\\pi6$\n\nP がとりうる範囲を xy 平面上に図示せよ。\nTranslation\n坐标空间内有点 A(0,−1,1)。xy 平面上有点 P 满足下述 (i), (ii), (iii)\n的所有条件。\n\nP 与 O 不重合。\n$\\angle AOP\\geq\\dfrac23\\pi$\n$\\angle OAP\\leq\\dfrac\\pi6$\n\n画图表示 P 在 xy\n平面上可能所处的范围。\nSolution\n假设 P 坐标为 (x,y,0)，下面逐个描述 P 所满足的条件。\n条件 (i) 说明 x ≠ 0, y ≠ 0。\n描述角度则可以直接使用向量夹角的方式计算：\n$$\n\\angle AOP\\geq \\dfrac23\\pi \\iff \\cos\\angle AOP\\leq -\\dfrac12\n$$\n而这里：\n$$\n\\cos\\angle AOP = \\dfrac{\\vec{OA}\\cdot\\vec{OP}}{|\\vec{OA}||\\vec{OP}|} =\n\\dfrac{-y}{\\sqrt{2(x^2 + y^2)}}\n$$\n则条件 (ii) 等价于：\n$$\n\\dfrac{-y}{\\sqrt{2(x^2 + y^2)}} \\leq -\\dfrac12\n$$\n这种形式继续转化自然可以注意到需要两边平方，不过平方前注意正负号，上述式子已经暗示了\ny ≥ 0。在此基础上：\n$$\n\\begin{aligned}\n\\dfrac{-y}{\\sqrt{2(x^2 + y^2)}} \\leq -\\dfrac12 &amp;\\iff\n\\dfrac{y^2}{2(x^2 + y^2)} \\geq \\dfrac14, y \\geq 0 \\\\\n&amp;\\iff x^2 \\leq y^2, y \\geq 0\n\\end{aligned}\n$$\n同理：\n$$\n\\angle OAP\\leq\\dfrac\\pi6 \\iff \\cos\\angle OAP \\geq \\dfrac{\\sqrt3}{2}\n$$\n而这里：\n$$\n\\cos\\angle OAP = \\dfrac{\\vec{AO}\\cdot\\vec{AP}}{|\\vec{AO}||\\vec{AP}|} =\n\\dfrac{y + 2}{\\sqrt{2[x^2 + (y + 1)^2 + 1]}}\n$$\n同样有条件 (iii) 等价于：\n$$\n\\begin{aligned}\n\\dfrac{y + 2}{\\sqrt{2[x^2 + (y + 1)^2 + 1]}} \\geq \\dfrac{\\sqrt3}{2}\n&amp;\\iff \\dfrac{(y + 2)^2}{2[x^2 + (y + 1)^2 + 1]} \\geq \\dfrac34, y\n\\geq -2 \\\\\n&amp;\\iff x^2 + \\dfrac{(y - 1)^2}{3} \\leq 1, y \\geq -2\n\\end{aligned}\n$$\n可以看出后两个条件分别是双直线和椭圆表示的范围，作图较为简单，这里略去。\nComments\n其实很容易看出来这些条件很好转化为代数条件，然后代数条件必然是二次的，那显然就是两个二次曲线之间的关系，运算不难，正好当一个热身。\nProblem 2\n次の関数 f(x)\nを考える。\n$$\nf(x) = \\int_0^1 \\frac{|t - x|}{1 + t^2} {\\rm d}t, 0\\leq x\\leq 1\n$$\n\n$0&lt;\\alpha&lt;\\dfrac\\pi4$\nを満たす実数 α で、f′(tanα) = 0\nとなるものを求めよ。\n(1) で求めた α\nに対し、tan α\nの値を求めよ。\n関数 f(x) の区間\n0 ≤ x ≤ 1\nにおける最大値と最小値を求めよ。必要ならば、0.69 &lt; log 2 &lt; 0.7\nであることを用いてよい。\n\nTranslation\n考虑下述函数 f(x)。\n$$\nf(x) = \\int_0^1 \\frac{|t - x|}{1 + t^2} {\\rm d}t, 0\\leq x\\leq 1\n$$\n\n对满足 $0&lt;\\alpha&lt;\\dfrac\\pi4$\n的实数 α，求 α 使得 f′(tanα) = 0\n对 (1) 中的 α，求 tan α 的值。\n求函数 f(x)\n在区间 0 ≤ x ≤ 1\n上的最大值和最小值。若有必要，可直接使用结论 0.69 &lt; ln 2 &lt; 0.7\n\nSolution\n这个积分是很好积分的，直接可以得到以下计算：\n$$\n\\begin{aligned}\nf(x) &amp;= \\int_0^1 \\frac{|t - x|}{1 + t^2} {\\rm d}t \\\\\n&amp;= \\left(\\int_0^x + \\int_x^1\\right)\\frac{|t - x|}{1 + t^2} {\\rm d}t\n\\\\\n&amp;= \\int_0^x\\frac{x - t}{1 + t^2} {\\rm d}t + \\int_x^1\\frac{t - x}{1 +\nt^2} {\\rm d}t \\\\\n&amp;= x\\left(\\int_0^x - \\int_x^1\\right)\\dfrac{1}{1 + t^2}{\\rm d}t -\n\\left(\\int_0^x - \\int_x^1\\right)\\dfrac{t}{1 + t^2}{\\rm d}t \\\\\n&amp;= x\\left(\\int_0^x - \\int_x^1\\right)\\dfrac{1}{1 + t^2}{\\rm d}t -\n\\dfrac12\\left(\\int_0^x - \\int_x^1\\right)\\dfrac{1}{1 + t^2}{\\rm d}(1 +\nt^2) \\\\\n&amp;= x\\left(\\left.\\arctan t\\right|_0^x - \\left.\\arctan\nt\\right|_x^1\\right) - \\dfrac12\\left(\\left.\\ln(1 + t^2)\\right|_0^x -\n\\left.\\ln(1 + t^2)\\right|_x^1\\right) \\\\\n&amp;= x\\left(2\\arctan x - \\dfrac\\pi4\\right) - \\dfrac12\\left(2\\ln(1 +\nx^2) - \\ln2\\right)\n\\end{aligned}\n$$\n求导得到：\n$$\nf'(x) = 2\\arctan x - \\dfrac\\pi4\n$$\n第一问和第二问则据此简单结束：\n$$\n\\alpha = \\dfrac\\pi8, \\tan\\alpha = \\sqrt2 - 1\n$$\n在得到导函数情况的基础上，f(x) 在区间 [0,1] 上先减再增，则分别计算：\n$$\nf(0) = \\dfrac12\\ln2, f(1) = \\dfrac\\pi4 - \\dfrac12\\ln2\n$$\n根据题目中给的范围：\n$$\n\\dfrac\\pi4 &gt; \\dfrac34 &gt; 0.7 &gt; \\ln2\n$$\n所以最大值是 $f(1) = \\dfrac\\pi4 -\n\\dfrac12\\ln2$。\n最小值则是：\n$$\nf(\\sqrt2 - 1) = \\ln\\dfrac{\\sqrt2 + 1}{2}\n$$\nSolution\n这道题做完我还在疑惑为什么第一问和第二问会分开成两问，之后我找到了河合塾（日本的课外补习班称为塾）给的民间解答，发现日本高中把基础微积分纳入了教纲却没有把反三角函数纳入，这意味着\n$\\dfrac1{1 + x^2}$\n的原函数居然是没法直接堂堂正正写 arctan x + C\n的，这确实很无语了。\n回到题目本身，非常简单的积分和函数增减性考察，感觉整体也是用来热身。\nProblem 3\n座標平面上を次の規則 (i), (ii) に従って 1 秒ごとに動く点 P を考える。\n\n最初に、P は点 (2,1) にいる。\nある時刻で P が点 (a,b) にいるとき、その 1\n秒後には P は\n\n\n確率 $\\dfrac13$ で x 軸に関して (a,b) と対称な点\n確率 $\\dfrac13$ で y 軸に関して (a,b) と対称な点\n確率 $\\dfrac16$ で直線 y = x に関して (a,b) と対称な点\n確率 $\\dfrac16$ で直線 y =  − x に関して (a,b) と対称な点\n\nにいる。\n以下の問いに答えよ。ただし、(1)\nについては、結論のみを書けばよい。\n\nP\nがとりうる点の座標をすべて求めよ。\nn\nを正の整数とする。最初から n\n秒後に P が点 (2,1) にいる確率と、最初から n 秒後に P が点 (−2,−1) にいる確率は等しいことを示せ。\nn\nを正の整数とする。最初から n\n秒後に P が点 (2,1) にいる確率を求めよ。\n\nTranslation\n考虑坐标平面上，按照下述规则 (i), (ii) 每秒运动一次的点 P。\n\n最初点 P 位于 (2,1)\n某一时刻点 P 位于 (a,b)，一秒后 P\n\n\n以概率 $\\dfrac13$ 运动到点 (a,b) 关于 x 轴的对称点\n以概率 $\\dfrac13$ 运动到点 (a,b) 关于 y 轴的对称点\n以概率 $\\dfrac16$ 运动到点 (a,b) 关于直线 y = x 的对称点\n以概率 $\\dfrac16$ 运动到点 (a,b) 关于直线 y =  − x 轴的对称点\n\n回答以下问题，其中 (1) 只需要直接写出结论。\n\n求点 P\n所有可能的坐标。\n假设 n 是正整数。证明\nn 秒后点 P 位于 (2,1) 的概率与 n 秒后 P 位于 (−2,−1) 的概率相同。\n假设 n 是正整数。求 n 秒后点 P 位于 (2,1) 的概率。\n\nSolution\n第一问通过简单的 BFS 枚举即可：\n\n最初：(2,1)\n1 秒后：(2,−1), (−2,1), (1,2), (−1,−2)\n2 秒后：(−1,2), (−2,−1), (1,−2)\n\n至此已经形成闭包，所以一共是上述 8 个可能点。\n从 (2,1)，将上述 8\n个点按照顺时针标号 1, 2, 3, 4, 5, 6, 7, 8，并且规定标号 9 等价于标号 1，后续类推。记第 n 秒点 P 位于第 i 个点的概率为 pn(i)。\n我们有下述递推关系：\n$$\n\\begin{cases}\np_{n + 1}(1) = \\dfrac16p_n(2) + \\dfrac13p_n(4) + \\dfrac16p_n(6) +\n\\dfrac13p_n(8) \\\\\np_{n + 1}(2) = \\dfrac13p_n(3) + \\dfrac16p_n(5) + \\dfrac13p_n(7) +\n\\dfrac16p_n(1) \\\\\np_{n + 1}(3) = \\dfrac16p_n(4) + \\dfrac13p_n(6) + \\dfrac16p_n(8) +\n\\dfrac13p_n(2) \\\\\np_{n + 1}(4) = \\dfrac13p_n(5) + \\dfrac16p_n(7) + \\dfrac13p_n(1) +\n\\dfrac16p_n(3) \\\\\np_{n + 1}(5) = \\dfrac16p_n(6) + \\dfrac13p_n(8) + \\dfrac16p_n(2) +\n\\dfrac13p_n(4) \\\\\np_{n + 1}(6) = \\dfrac13p_n(7) + \\dfrac16p_n(1) + \\dfrac13p_n(3) +\n\\dfrac16p_n(5) \\\\\np_{n + 1}(7) = \\dfrac16p_n(8) + \\dfrac13p_n(2) + \\dfrac16p_n(4) +\n\\dfrac13p_n(6) \\\\\np_{n + 1}(8) = \\dfrac13p_n(1) + \\dfrac16p_n(3) + \\dfrac13p_n(5) +\n\\dfrac16p_n(7) \\\\\n\\end{cases}\n$$\n以及初始条件 p0(1) = 1 和 i ≠ 1 时 p0(i) = 0。\n观察第一个式子和第五个式子，显然发现两个式子右侧完全一致，这就证明了第二问的结论。\n事实上，我们总能够得到 pn(i) = pn(i+4), n ≥ 1，因此递推关系可以缩减为：\n$$\n\\begin{cases}\np_{n + 1}(1) = \\dfrac13p_n(2) + \\dfrac23p_n(4) \\\\\np_{n + 1}(2) = \\dfrac23p_n(3) + \\dfrac13p_n(1) \\\\\np_{n + 1}(3) = \\dfrac13p_n(4) + \\dfrac23p_n(2) \\\\\np_{n + 1}(4) = \\dfrac23p_n(1) + \\dfrac13p_n(3) \\\\\n\\end{cases}\n$$\n首先，我们注意到在 n = 0\n时，所有偶数 i 都有 p0(i) = 0。通过上述递推关系，我们注意到\nn = 1 时，所有奇数 i 都有 p1(i) = 0。\n事实上，通过归纳法容易说明如果 n, i 同奇偶性，则 pn(i) = 0。\n而这个暗示了，对于奇数 n ≥ 1，我们有：\n$$\n1 = \\sum_{i = 1}^8p_n(i) = 2\\sum_{i = 1}^4p_n(i) = 2(p_n(2) + p_n(4))\n\\Rightarrow p_n(2) + p_n(4) = \\dfrac12\n$$\n而同理，对偶数 n ≥ 1 有\n$p_n(1) + p_n(3) = \\dfrac12$。\n那么在 n ≥ 1\n的条件下：\n$$\np_{2n + 1}(2) = \\dfrac23p_{2n}(3) + \\dfrac13p_{2n}(1) =\n\\dfrac23\\left(\\dfrac12 - p_{2n}(1)\\right) + \\dfrac13p_{2n}(1) = \\dfrac13\n- \\dfrac13p_{2n}(1)\n$$\n同理也有：\n$$\np_{2n + 2}(1) = \\dfrac13p_{2n + 1}(2) + \\dfrac23p_{2n + 1}(4) =\n\\dfrac13p_{2n + 1}(2) + \\dfrac23\\left(\\dfrac12 - p_{2n + 1}(2)\\right) =\n\\dfrac13 - \\dfrac13p_{2n + 1}(2)\n$$\n上述两式又可得到：\n$$\np_{2n + 2}(1) = \\dfrac13 - \\dfrac13\\left(\\dfrac13 -\n\\dfrac13p_{2n}(1)\\right) = \\dfrac29 + \\dfrac19p_{2n}(1)\n$$\n也就是：\n$$\np_{2n + 2}(1) - \\dfrac14 = -\\dfrac1{36} + \\dfrac19p_{2n}(1) =\n\\dfrac19\\left(p_{2n}(1) - \\dfrac14\\right)\n$$\n再结合初始条件，首先计算出 $p_2(1) =\n\\dfrac{5}{18}$，则可以得到：\n$$\np_n(1) = \\begin{cases}\n0 &amp; 2\\nmid n \\\\\n\\dfrac14 + \\dfrac14\\left(\\dfrac13\\right)^n &amp; 2\\mid n\n\\end{cases}, n\\geq 1\n$$\nComment\n其实数列递推整体不难，难点在于一定要注意什么结论是对全体自然数成立的，什么结论是对\nn ≥ 1\n成立的，这个也算是数列问题中的核心注意点了。\nProblem 4\n$f(x) = -\\dfrac{\\sqrt2}{4}x^2 +\n4\\sqrt2$ とおく。0 &lt; t &lt; 4 を満たす実数 t に対し、座標平面上の点 (t,f(t))\nを通り、この点において放物線 y = f(x)\nと共通の接線を持ち、x\n軸上に中心を持つ円を Ct とする。\n\n円 Ct\nの中心の座標を (c(t),0)、半径を r(t) をおく。c(t) と {r(t)}2 を t の整式で表せ。\n実数 a は 0 &lt; a &lt; f(3)\nを満たすとする。円 Ct が点 (3,a) を通るような実数 t は 0 &lt; t &lt; 4\nの範囲にいくつあるか。\n\nTranslation\n给定函数 $f(x) = -\\dfrac{\\sqrt2}{4}x^2 +\n4\\sqrt2$。对于满足 0 &lt; t &lt; 4 的实数 t，将通过点 (t,f(t))，并且在该点与抛物线\ny = f(x)\n有共同切线并且圆心在 x\n轴上的圆记为 Ct。\n\n记圆 Ct 的圆心坐标为\n(c(t),0)，半径为\nr(t)。将 c(t) 与 r2(t) 用含 t 的整式表示。\n已知实数 a 满足 0 &lt; a &lt; f(3)。问在\n0 &lt; t &lt; 4 范围内，令圆\nCt 通过点\n(3,a) 的 t 有几个。\n\nSolution\n抛物线 y = f(x) 的过\n(t,f(t))\n的切线为：\n$$\ny = f'(t)(x - t) + f(t) = -\\dfrac{\\sqrt2}{2}tx + 4\\sqrt2 +\n\\dfrac{\\sqrt2}4t^2\n$$\n与该切线垂直的，过 (t,f(t))\n的直线为：\n$$\ny = \\dfrac{\\sqrt2}{t}(x - t) + f(t) = \\dfrac{\\sqrt2}{t}x + 3\\sqrt2 -\n\\dfrac{\\sqrt2}{4}t^2\n$$\n该直线与 x 轴的交点即为\nCt\n的圆心，从而：\n$$\nc(t) = \\dfrac{1}{4}t^3 - 3t\n$$\n另外一方面：\n$$\nr^2(t) = (c(t) - t)^2 + f^2(t) = \\dfrac1{16}(t^2 + 2)(t^2 - 16)^2\n$$\n\n圆 Ct\n圆心到 (3,a)\n的距离的平方为：\n$$\nd^2 := \\left(\\dfrac14t^3 - 3t - 3\\right)^2 + a^2\n$$\n而 t 的个数即为有关 t 的方程 d2 = r2(t)\n在 (0,4) 上解的个数。\n该方程即为：\n$$\n\\left(\\dfrac14t^3 - 3t - 3\\right)^2 + a^2 = \\dfrac1{16}(t^2 + 2)(t^2 -\n16)^2 \\iff 16a^2 = (t^2 + 2)(t^2 - 16)^2 - (t^3 - 12t - 12)^2\n$$\n令 g(x) := (x2+2)(x2−16)2 − (x3−12x−12)2，计算得到\ng′(x) =  − 24(x2−4)(x−3)。\n计算得到 g(0) = 368, g(2) = 80, g(3) = 98, g(4) &lt; 0，另外由于\n0 &lt; a &lt; f(3)，所以\n0 &lt; 16a2 &lt; 98。\n那么：\n\n80 &lt; 16a2 &lt; 98，即\n$\\sqrt5 &lt; a &lt; \\dfrac74\\sqrt2$\n时，存在 3 个 t\n16a2 = 80，即\n$a = \\sqrt 5$ 时，存在 2 个 t\n0 &lt; 16a2 &lt; 80，即\n$0 &lt; a &lt; \\sqrt5$ 时，存在 1 个 t\n\nComment\n非常单纯的计算题，没什么难度。\nProblem 5\n座標空間内に 3 点 A(1,0,0), B(0,1,0), C(0,0,1)\nをとり、D を線分 AC の中点とする。三角形\nABD\nの周および内部を x\n軸のまわりに 1 回転させて得られる立体の体積を求めよ。\nTranslation\n给定坐标空间内的 3 点 A(1,0,0), B(0,1,0), C(0,0,1)，给定\nD 为线段 AC 的中点。求将三角形 ABD 的边界与内部绕\nx\n轴旋转一圈得到的立体图形的体积。\nSolution\n设 0 ≤ t ≤ 1，令 S(t) 为平面 x = t\n截该旋转体截面面积，则该体积为 S(t) 在 [0,1] 上的积分。\n对 $t \\geq\\dfrac12$，平面 x = t 截三角形 ABD 得到线段 EF，E, F 分别位于边 AB, AC\n上。不难得到两者的坐标为 E(t,1−t,0), F(t,0,1−t)。此时，截面为一圆环，外径为\n1 − t，内径为 $\\dfrac{\\sqrt2}{2}(1 - t)$，从而：\n$$\nS(t) = \\dfrac\\pi2(1 - t)^2, \\dfrac12 \\leq t\\leq 1\n$$\n对 $t &lt; \\dfrac12$，平面 x = t 截三角形 ABD 得到线段 EF，E, F 分别位于边 AB, BD\n上。不难得到两者的坐标为 E(t,1−t,0), F(t,1−2t,t)。此时，截面为一圆环。\n在 $\\dfrac13 \\leq t &lt; \\dfrac12$\n的时候，该圆环外径为 1 − t，内径依然为 $\\dfrac{\\sqrt2}{2}(1 - t)$，从而：\n$$\nS(t) = \\dfrac\\pi2(1 - t)^2, \\dfrac13\\leq t &lt; \\dfrac12\n$$\n在 $0\\leq t &lt; \\dfrac13$\n的时候，该圆环外径为 1 − t，内径则变化为为 $\\sqrt{t^2 + (1 - 2t)^2}$，从而：\n$$\nS(t) = \\pi\\left((1 - t)^2 - t^2 - (1 - 2t)^2\\right) = (-4t^2 + 2t)\\pi,\n0\\leq t &lt; \\dfrac13\n$$\n从而：\n$$\nV = \\int_0^1 S(t) {\\rm d}t = \\int_0^{\\frac13}(-4t^2 + 2t)\\pi{\\rm d}t +\n\\int_{\\frac13}^1\\dfrac\\pi2(1 - t)^2{\\rm d}t = \\dfrac\\pi9\n$$\nComment\n很纯正的计算题，没有什么好评价的。\nProblem 6\n2 以上の整数で、1\nとそれ自身以外に正の約数を持たない数を素数という。以下の問いに答えよ。\n\nf(x) = x3 + 10x2 + 20x\nとする。f(n)\nが素数となるような整数 n\nをすべて求めよ。\na, b\nを整数の定数とし、g(x) = x3 + ax2 + bx\nとする。g(n)\nが素数となるような整数 n\nの個数は 3 個以下であることを示せ。\n\nTranslation\n若不小于 2 的整数，除了 1\n与自身外没有其他的正约数，则称之为素数。回答以下问题。\n\n令 f(x) = x3 + 10x2 + 20x。求所有使得\nf(n) 是素数的整数\nn\n给定整数 a, b\n以及 g(x) = x3 + ax2 + bx。证明使得\ng(n) 是素数的 n 不多于 3 个。\n\nSolution\n\n首先必然有 n ∣ f(n)，那么存在\nn 令 f(n)\n是素数等价于下述四个条件有一成立：\n\n\nf(1) 是素数，此时 n = 1\nf(−1) 是素数，此时 n =  − 1\n存在素数 p 令 p = f(p)，此时\nn = p\n存在素数 q 令 q = f(−q)，此时\nn =  − q\n\n逐个验证即可得到所有可能值 n = 1,  − 1,  − 3,  − 7，将其反代回\nf(n) 中验证发现除了\nn =  − 1 均可以令 f(n) 为素数。\n所以 n = 1,  − 3,  − 7。\n\n同上述论证，存在 n 令\ng(n)\n为素数等价于下述四个条件有一成立：\n\n\ng(1) 是素数，此时 n = 1\ng(−1) 是素数，此时 n =  − 1\n存在素数 p 令 p = g(p)，此时\nn = p\n存在素数 q 令 q = g(−q)，此时\nn =  − q\n\n第一个条件说明 a + b + 1 是素数。\n第二个条件说明 a − b − 1 是素数。\n第三个条件说明存在素数 p 令\np2 + ap + b = 1\n第四个条件说明存在素数 q 令\nq2 − aq + b =  − 1\n如果第三个条件和第四个条件同时成立，两式子相减说明：\n(p−q+a)(p+q) = 2\n显然这要求存在两个素数 p, q 令 p + q ∣ 2，这不可能。所以第三个条件和第四个条件不可能同时成立。\n若是前两个条件有一个不成立，那么前两个条件最多贡献 1 个可能的 n\n值，而后两个条件又最多成立一个，最多贡献 2 个可能的 n 值，也就说明至多 3 个可能的 n。\n所以我们仅需要考虑前两个条件均成立的情况，并且后两个的条件必然成立一个，否则\nn 的可能值最多为 2。在此基础上，我们只要证明后两个条件无论成立哪一个，均不可能提供多于\n1 个可能的 n 值即可。\n注意到后两个条件均为二次方程，若其提供多于 1 个可能的 n\n值，则意味着对应的二次方程两个根都是素数。\n对第三个条件而言，设根为素数 q1, q2，那么\na =  − q1 − q2 &lt; 0，然而\n2a = (a+b+1) + (a−b−1)\n是两个素数之和，必然为正整数，矛盾。\n对第四个条件而言，设根为素数 q1, q2，那么\na = q1 + q2, b = q1q2 − 1。此时：\na − b − 1 = q1 + q2 − q1q2 =  − (q1−1)(q2−1) + 1 ≤ 0\n不为素数，矛盾。\n因此我们证明完毕了所有情况。\n令和 5 年（2023）\nProblem 1\n\n正の整数 k に対し\n\n$$\nA_k = \\int_{\\sqrt{k\\pi}}^{\\sqrt{(k + 1)\\pi}} |\\sin(x^2)|{\\rm d}x\n$$\nとおく。次の不等式が成り立つことを示せ。\n$$\n\\dfrac{1}{\\sqrt{(k + 1)}\\pi} \\leq A_k \\leq \\dfrac{1}{\\sqrt{k\\pi}}\n$$\n\n正の整数 n に対し\n\n$$\nB_n = \\dfrac{1}{\\sqrt n}\\int_{\\sqrt{n\\pi}}^{\\sqrt{2n\\pi}} |\\sin(x^2)|\n{\\rm d}x\n$$\nとおく。極限 limn → ∞Bn\nを求めよ。\nTranslation\n\n对于正整数 k，令\n\n$$\nA_k = \\int_{\\sqrt{k\\pi}}^{\\sqrt{(k + 1)\\pi}} |\\sin(x^2)|{\\rm d}x\n$$\n证明下述不等式。\n$$\n\\dfrac{1}{\\sqrt{(k + 1)}\\pi} \\leq A_k \\leq \\dfrac{1}{\\sqrt{k\\pi}}\n$$\n\n对于正整数 n，令\n\n$$\nB_n = \\dfrac{1}{\\sqrt n}\\int_{\\sqrt{n\\pi}}^{\\sqrt{2n\\pi}} |\\sin(x^2)|\n{\\rm d}x\n$$\n求极限 limn → ∞Bn\nSolution\n\n作换元 t = x2，则：\n\n$$\n\\begin{aligned}\nA_k &amp;= \\int_{k\\pi}^{(k + 1)\\pi} |\\sin t| {\\rm d}\\sqrt t =\n\\int_{k\\pi}^{(k + 1)\\pi} \\frac{|\\sin t|}{2\\sqrt t} {\\rm d}t \\\\\n\\end{aligned}\n$$\n那么：\n$$\nA_k \\leq \\int_{k\\pi}^{(k + 1)\\pi} \\frac{|\\sin t|}{2\\sqrt{k\\pi}} {\\rm d}t\n= \\dfrac{1}{\\sqrt{k\\pi}}\n$$\n不等式另一边可以同理放缩得到。\n\n不难得到下述等式：\n\n$$\nB_n = \\dfrac{1}{\\sqrt n}\\sum_{k = n}^{2n - 1} A_k\n$$\n因此利用先前的结论：\n$$\nB_n \\leq \\dfrac{1}{\\sqrt n}\\sum_{k = n}^{2n - 1} \\dfrac{1}{\\sqrt{k\\pi}}\n&lt; \\dfrac{1}{\\sqrt n}\\sum_{k = n}^{2n - 1} \\dfrac{2}{\\sqrt{(k - 1)\\pi}\n+ \\sqrt{k\\pi}} = \\dfrac{2(\\sqrt{2n - 1} - \\sqrt{n - 1})}{\\sqrt{n\\pi}}\n$$\n同理：\n$$\nB_n \\geq \\dfrac{1}{\\sqrt n}\\sum_{k = n}^{2n - 1} \\dfrac{1}{\\sqrt{(k +\n1)\\pi}} &gt; \\dfrac{1}{\\sqrt n}\\sum_{k = n}^{2n - 1} \\dfrac{2}{\\sqrt{(k\n+ 1)\\pi} + \\sqrt{(k + 2)\\pi}} = \\dfrac{2(\\sqrt{2n + 1} - \\sqrt{n +\n1})}{\\sqrt{n\\pi}}\n$$\n根据夹逼法则得到：\n$$\n\\lim_{n\\to\\infty} B_n = \\dfrac{2}{\\sqrt\\pi}(\\sqrt2 - 1)\n$$\nComment\n挺好的练习题，除了放在第一题可能有点难了之外。\n","categories":["【杂谈】数学"]},{"title":"大二春季学期学期总结","url":"/2021/06/19/grade-2-spring-conclusion/","content":"魔幻的大二春季学期最终还是随着自动机考试的结束而落幕了，随意写一点东西来总结一下吧。\n\n虽然还没有出分，但我能够预料到这一学期如果按照绩点来评判，可以说过得十分坎坷。但是，这一学期还有更多的比绩点更值得重视的一些东西。\n课内学习\n课内总体而言过得很不平凡，即使这一学期只有 24\n学分的课程。与一年前那种 OOP\n作业一发下来就赶快刷榜完成，高代选讲还愿意在课外学习很多内容的热情相比，我这一学期对课内显然是淡薄了很多。标志性的事件可以罗列出来：\n\n人智导 PA2 是在黄浦江上遥控卫爷写的，PA3\n是在上海桌游店里打山屋惊魂的间隙交的\n在各种情况下写过数电实验报告，包括在人大门口醉酒的时候、在去上海的火车上、在轰趴的自动麻将机上（除了考试，我每一次实验的代码都是抄的）\n一个学期没有见过数电、自动机、人智导的老师，这三门课均让我在考试周通了宵（一个大二学生用\n24 小时创造一个奇迹）\n软件工程大作业不到最后一周都没有认真写 UI\n高性能一气之下决定退课，虽然从未后悔过这个决定\n英语课一个学期就做了一份作业，占比最大的 Task C（团队\npre）只花了三四天准备\n物理实验报告分数为 9, 8.5, 8.7, 8, 8.7，上学期则是 9, 9, 9, 9.3,\n9\n\n总之就是这学期浪了一些，或许是认清楚你清贵系的教学水平甚至还不如高中之后的一些合理举动。如果要我来评价大二下学期这些课程的话，我只能说除了《不朽的艺术》这一门课，其他的课程我丝毫没有觉得学习到了什么有用的东西。再加上期末四门专业课考试两门可以说出事故的情况，我更是愿意给这一学期以低评价。\n我大概算了一下，反正现在绩点的浮动不会多大，还不如抓紧时间，做一些我觉得有意义的事情。\nTHUInfo\n我也说过，这是我唯一拿得出来的作品。虽然之前有写过一些小型项目，它们虽然也是我探索的足迹，但总体没有\nTHUInfo 给我带来的成就感大。\n但比较愧疚的是这一学期没有给 THUInfo\n作出很大的贡献。寒假的时候翻新了“计划”功能，修了几个小 bug\n之后，学期中除了加了比如说“今日高亮”这种小功能之外，我也就没有作出什么贡献了。\n但是，暑假确实是想要做很大的事情的。一方面是和校内 iOS Club\n搭上了关系，对方也恰好想要找到一个重点支持的项目，双方互相需要，何乐而不为呢。通过它我们找到了美工，目前也有了一个较为简单的\nUI 效果图（不得不说，做设计的就是做设计的）。另外一方面是栋栋加入了团队，总之多一个技能熟练的人手是很不错的。\n敬请期待暑假过后的 THUInfo 3 系列版本。\n社工\n大一下学期一番折腾之后，一个学期没有加入任何学生组织。但是一个转变的契机就是\nxge 和我说他和栋栋准备开发日麻，随后将我纳入了 308（科协 &amp;\n算协活动室）常驻人员之中。在 308\n蹲守的过程中，我也认识了科协的许多同学（再次点名“表扬”大恶人安頔）。最后决定加入科协，大概是那天去出去散心醉酒，隔天回校的时候恰好赶上\nC\n楼门口的智能体嘉年华。本来是不打算去的，想着去看看也没啥问题，就突然发现科协办的东西还挺有意思。随后又去蹭了智能体决赛，还坑了\nOmega Fantasy 一顿饭。\n随后大约是某晚和安頔夜谈，经过一番交流，决定去混一个科协副主席。\n怎么说呢，或许真的是如同之前一些人的评价——“你大一下学期的那种情况实属罕见，哪有人开局社工就是王炸的”一般，社工并不是我想的那么不堪。现在大概是发现，有一群志同道合的人一起做事情是多么愉悦。\nSakana\n这一段没有什么特别想说的，总之揭开了一些过往，给一些问题作出了解答，这应该也是这个学期我应该可以说最为重视的一件事。虽然有很多的小细节，有很多的瞬间，但还是就留下我之前发在空间里的一段话吧：\n\n虽然我真的不会挑时间，不会好好规划安排行程，或许会因为冲动把事情做得很离谱。\n但真的感谢包容我的愚拙。\n\n\n一些总结与闲话\n这一学期的 Holder\n发生了相当大的改变，应该是真的去思考过我的大学应该如何度过这个问题了。之后就确立了“我要帮助后辈们尽可能少走弯路”这样的一个简单的目标，于是和改制的科协网络部不谋而合，于是和高中班主任谈好了回高中给学弟学妹讲数学竞赛。在确立好自己的真正想做的事情之后，便是卸下一些伪装。先前的我大概因为完全不能找到我自己的目标，而将自己浸没在无意义的内卷之中，也不敢面对自己的一些感情。这一切的一切，都在稍微通透之后被瓦解了。\n当然我感觉需要警惕的，就是我暂且需要约束一下自己无限膨胀的野心，不能给自己捞太多的锅，接太多的任务，应该让自己慢慢达到一种平衡。\n不如现在，来说说之后想要做的事情吧：\n\n接着跟进在刘知远实验室的任务，努力发篇文章，发完就撤退\n翻新 THUInfo 的 UI，开发一些新功能\n在科协把“技能引导文档”这件事做好，做到宣讲会上的“为了创建一个\nuser-friendly 的计算机系而奋斗”\n好好地生活，让自己的大学不仅仅是绩点和社工\n\n还有就是一些暑假要做的事情，比如说\nGRE，比如说科目二，比如说回高中讲竞赛，比如尝试一下图形学。\n写这篇潦草的总结的时候，我应该还因为昨晚通宵复习自动机而头晕目眩，但是我的神志却异常清醒，因为我的大学似乎是真的开始了。\n我有分享歌词的习惯，这里也来一句吧。但不同于之前我喜欢分享那种长长的，哲学家写散文式的歌词，这个歌词很朴素：\n\nケーキも大好き，君も大好き。\n——「とある一家の御茶会議」\n\n\n祝愿我余下的一半本科时光，能过得有意义。这里是\nHolder，我们一起接着走下去吧。\n","categories":["【生活记录】学期总结"]},{"title":"大三秋季学期学期总结","url":"/2022/01/05/grade-3-autumn-conclusion/","content":"今天考完了最后一门《编译原理》，随后参加了年级会。这样看来，我的大三上学期，这个被学长们称为渡劫的学期，就这样平平无奇结束了。\n\n对自己的质疑\n这学期之所以被称为渡劫，是因为按照教学计划计算机系的最核心的四大原理课是在这学期修读。这四大原理是《计算机组成原理》《计算机网络原理》《编译原理》《信号处理原理》。而我所说的对自己的质疑，就是我发现我完全对这四门课里的大部分提不起任何兴趣。\n在成为大三学生之前，我从未质疑过我为什么要来这个专业，甚至一定程度上庆幸虽然选择计算机是随大流，但自己却也莫名其妙混得不算差。大一和大二修读的课程，我大多都能学得比较明白，再不济也能做到考前\noverfit 一波混个考试分数。得益于此，我大三之前的 GPA\n可以说还挺不错的。\n但是进入大三之后，我明显感受到力不从心。比如说造计算机，其实我早就在《数字电路实验》这门大二下学期的入门课里面认识到了我似乎对硬件设计一窍不通，或者说完全没有一种愿意学习这类知识的冲动。另外比如说计算机网络相关，我对网络只是单纯知道一些简单的概念，深入了解却让我相当抗拒，我不是抗拒特定的课程，我是对整个计算机网络这个领域感到深刻的无力，甚至是生理性不适。\n所以我有意无意地拖延了造机，不到最后一周没有真正开工。我有意无意地只用一下午复习网原，有意无意地没有去任何一堂除了体育之外的课。\n因为我抗拒，我理解不了这些知识背后的逻辑，支撑着我学习新的领域的动力不能直接迁移到计组和网原这些课程上。\n与此对应的，我课余在尝试着学习一些数学，研究生方向也想尽量往数学相关方向贴近一下。在学习《信号组成原理》的时候，常常痛斥其数学基础不牢靠（毕竟是工科面向应用的学问，其宁愿牺牲严谨性也要保证易用性），也曾钻牛角尖一样地和别人争执过信号这门课里的数学体系是不是矛盾的。\n我发现我对知识有一点奇妙的偏执，我希望我学习的东西是体系的、有逻辑的，或者说我希望学习一个由人类发现的学科，而非由人类发明的学科。比如说网络协议往往充满了历史包袱、前人的失败经历、欠考虑的机制和随后而来的零碎补丁，它不是一个等待人类来发掘的逻辑体系，它本身就是人类在实践中堆叠的经验谈。与此类似的，还有我拒绝研究\nCSS 的那一堆难以理解的属性，不想深究 Web 混沌初开时的前端技术。\n所以我开始反思，我或许真的应该当时听从一些劝诫去学习数学什么的，但实际上我也知道这不过是虚无的懊悔，不过是这山望着那山高般的幻觉。但基于这样的自我认识，我尝试着去选择和数学关系较大的计算机领域作为研究生方向，比如说渲染。\n课内学习\n和之前说的一样，这学期六门课，四大原理加两门限选。网原和网安都是网络方向的课程，考试几乎全都是背诵就行，但悲哀的是我厌恶计算机网络，连课件都懒得打开看两眼。不过还好网安不难，但是网原我估计差不多就是\nB+ / B / B- 里面随机给分了，自我认为 3.3 绝对不亏，3.6 绝对血赚。\n计组确实硬核，而且我也不喜欢写硬件语言，因为它思维逻辑和我常用的软件语言相当不同，所以造机大实验着实让我一个星期没睡好觉。但是计组和网原最大的不同是，计组学不好我认为原因是客观上我能力不行，网络学不好我认为原因是主观上我厌恶。所以即使计组不简单，考试也不简单，但我依然很努力地去学了三四天，虽然感觉也没考多好。\n编原今年史诗级削弱，取消实验考试改为期末周后的附加实验，删减考纲，降低试题难度，提升平时作业占比。就说最明显的，今天在考场上看到\nSLR(1) 文法的题选的语言竟然是 {an : n ≥ 1}\n的时候，我已经真的深刻领悟到，什么是把分送到你手上。\n信号原理自己学得挺开心，毕竟自己也喜欢有事没事钻一钻所谓事物本质的东西。比如说当我期末复习的时候，把数字滤波器、传递函数、\nZ\n变换、收敛域与系统性质那一套在课间上混乱不堪的概念理清楚的时候，自己真的有一种豁然开朗而想继续深入学习的感觉。\n\n要说总体的话，就是这学期估计 GPA 还得继续往下掉，但我也只能说 Who\ncares。大一大二到大三，自己也经历了微积分不考 4.0 就是挂科，数据结构 3.6\n就是胜利到网原 3.3 也不算亏这一路的心态变化。\n但似乎 Holder 还是没有摆脱那一种奇妙的思维惯性，peer pressure\n还是在隐隐约约给我带来一些不愉悦。\n科协\n上学期奇妙地成为了副主席，那这学期就应该做点事情了。\n在还没有开始造机、造路由器之前，由于课业压力暂且还不大，我便抽了一点空余时间把技能引导文档搭建起来了，并且写了一些东西进去。\n技能引导文档大约是一种课程前置知识的补全，因为我确实见过不少同学都已经开始上课了，却连前置技术栈都不了解，最后只能网上随便找点资料混过去。秉持着能做点什么都是好的的想法，索性借着科协这个平台，搭建起了这样的一个文档共享的网站。\n但是随着造机、造路由器和期末周，文档维护也就暂且搁置。现在考试完了，寒假是一大波开工的好时机。\n\n说到科协就必须要提到安老板，就要提到我最终估计就会采纳安老板的提议，去媒体所混日子了。\n现在还在绝赞学习《GAMES101》，感觉自己摸鱼摸得太过了其实。\n摸鱼摸鱼摸\n这个学期虽然很辛苦，但依然可以忙里偷闲摸不少鱼。小学期莫名其妙搞到了一个日区\nApp store 账号，于是又可以开始玩 Project Sekai\n了。这种又有音游难度，又能抽抽卡养养妹子看看剧情的小游戏我确实喜欢，所以这个学期也基本一直都在玩，Phigros\n基本都荒废了。\n要说还有什么的话，就是打牌，无穷无尽的打牌。毕竟打牌确实没那么多限制，特别是打网络麻将，随时随地就开一把打着玩就行。所以\nHolder\n倒也经常在学累了的时候开一把，消遣消遣倒也不错。考试周其实打了不少牌，基本上一天打五六把还是有可能的。可能也是频率上来了，这学期也总算把四人麻将打上玉之间了。\n除了网络麻将就是宿舍里搓牌，本学期最大的进展就是大约通过次世代认识了一些八字班学长一起打牌，不过确实也算是见识到了我这类图乐子打牌和认真打牌人的水平差距。\n\n另外可能就是通过 V+ 吹水群认识了另外一些人，平常也是交流交流 Vocaloid\n相关，吹水聊天。可能偶尔会在周末的时候组织去国贸唱\nK，自己也去过两三回了，确实是放松的好机会。\n不过也因此渐渐喜欢上了学习的时候唱歌，虽然之前也偶尔会这样，但是真正感觉有意识地哼唱一些歌还是这个学期的事情。\n一些碎片\n小学期的精神问题\n暑假的时候我处于一种神经敏感的状态，整个人还在五月份那一次大崩溃的余震之中喜怒无常。而八月中旬的小学期，由于众所周知的屑课《Java\n语言程序设计》，以及当时一些早已遗忘的情感问题的引子，Holder\n又成功经历了一次情绪崩盘。\n大约，那某一个夜晚，在工物馆和美院停车场之间小路上，漫无目的地晃荡着和\nSakana 哭诉着的场景，是我小学期记忆最深刻的事情。\n无界美术馆\n上海的一个美术馆，在一个周末 Holder 偷偷跑去和 Sakana\n到那里参观去了。\nHolder\n向来是不太解风情的，对这个美术馆里展出的那些灯光艺术、雕塑、投影交互等等作品，我只能说“好闪”“好亮”“好鲜艳”这些明显语言贫瘠的评价。所以说\nHolder\n还只能读死书，或者有事没事和舍友抬抬杠，精神世界倒也是一片荒芜。\n造机的三星期\n其实我也说了，虽然造机确实给了三星期，但实际上我只在最后一个星期加紧做了不少事情。当时最喜欢的工作模式就是在\n308 一个人坐着，手机挑一部没有很烧脑剧情的日常番，边看番边等 Vivado\n编译或者看波形图。就这样半悠闲半紧张地工作着，倒也几天内写掉了不少东西。但平心而论，我依然没能从硬件设计中获取多少快乐，虽然最终看着自己写的\nCPU\n上能运行自己写的贪吃蛇游戏，但要让我回到那三星期，我说还不如打两三把牌。\n所以呢？\n所以说大三上学期也就这样结束了，课业成绩并不理想，人也过得疲惫不堪，其中一大半责任是网原。但是换一种角度，我认识了新的一起打牌的朋友，认识了能和我一起唱\nV 曲的同学，Project Sekai\n时不时能抽出好看的角色，打牌虽然会恶调但确实缓解了一些紧张情绪。自己也逐步和自己和解，不再纠结于一些得失，自己也在尝试着尽力做一些帮助他人的事。\n所以其实我也不知道我这个学期究竟是什么样的，这篇总结我也写得磕磕绊绊不知道什么是这学期的主线。传统意义上四大原理的主线在我这里断裂了，因为我精力分配中它们并不优先。\n但总归是看到了本科生活的尽头，自己也已经有了意向性的导师，也对自己究竟想学什么、想做些什么有了模糊的应答。虽然还是时不时感叹我真的不适合计算机系，感叹自己怎么过得这么惨，时不时在空间或者朋友圈发一些意味不明的文字，但总体上\nHolder 还是履行了上个学期的诺言，尽力地享受着自己的本科生活。\n寒假的话，可能要做不少事了。\n\n技能引导文档寒假宣传\nTHUInfo 翻新\n实验室科研的一些事务\n自学一些数学以及日语\n\n下学期也选了若干看起来还挺有意思的课程，希望下学期能过得更快乐一些。\n\n失うことに慣れてく中で失くさずにいた大事な思いを、\n抱きしめたら不意に涙が落ちたのは、\nこの街でまだ生きていたいと思うから。\n——「幽霊東京」\n\n\n","categories":["【生活记录】学期总结"]},{"title":"大三秋季学期前的一些碎话","url":"/2021/09/12/grade-3-autumn-preview/","content":"自己似乎就这样莫名其妙成为了一个大三学生，其实还隐隐约约记得一年前刚进实验室的时候刘知远的一句“没想到这么快八字班也要造机了啊”。现在想来，九字班这个词语从原先的代指新生，渐渐地变成了代指一群大三老油条，而自己的一字班学弟也正在憧憬着四年的本科时光，一时间竟觉得大学原来也快结束了。\n今夜突然接到 Sakana\n的一句“我还是好焦虑”，唐突地自己也开始陷入了一种窘迫的心理。自己，真的准备好去迎接之后的生活了么。\n\n学业和大三的渡劫\n清华大学的计算机系向来会把大三上学期称为渡劫，原因是计算机核心专业课四大原理一大工程（计算机组成原理、计算机网络原理、编译原理、信号处理原理、软件工程）将会在一个学期内学习完成。虽然自己已经提前把软件工程这门课草草了结，但是作为一个对硬件和计算机系统没有感觉的人，四大原理就足以让我恐惧。已经能够预见到，将来的\nHolder 或许会被造计算机、造路由器、造编译器、写 Matlab\n处理信号等各种困难的作业包围，然后还要抽出时间应付掉 VLSI\n和网安两门限选课的平时学习。\n其实也正如一些人对我的评价所说，我不是一个害怕困难或者折磨的人，但是我在受折磨的时候会习惯性一个人顶着。我只是默默地担心着自己的心理健康情况，自己这近几个月来时不时的情绪崩溃足以让我感到害怕。\n但实际上，我还是在安慰着自己没有问题，劝慰着自己造机造路由器会顺利，或许还会有点乐趣。也或许会安慰自己，信号处理原理全是微积分，自己微积分学得挺明白不用担心。然而即便如此，还是抵挡不住现在的焦虑和不安。\n科研的不顺和前途的迷茫\n我大一就跑到组里去了，是一个进组挺早的人，家里人一直比较关心我这么早进组会怎么样，当时还不以为意，但现在看来还是有点不大行。过早的进组让我缺少时间去打基础而过快地投入到实际工作之中，我对人工智能的理解本身就是几乎为零，和同组的那些曾经\nC++\n手搓神经网络的大神相比自然不可相提并论。想到自己每周二的组会都会想尽办法编造一个自己没认真做完事情的理由的时候，那种窘迫和尴尬又涌了上来。\n至今还记忆犹新的一个场景就是，中期汇报的时候刘知远老师在场，到我上去汇报的时候，应该是说出了大量幼稚或者说根本不合理的想法。那个时候刘知远说了这样一句：“现在\nHolder 这个样子，我们需要反思一下我们的指导方式”。\n这种看似自责的说法实则，看得出来他们的意见。\n或许从那以后，我投入了大量的精力弥补我的基础，我开始看人工智能相关网课，从全联接层开始看到\nCNN / RNN，再到 Encoder-decoder 或者 Transformer，然后开始使用\nHuggingFace 的 BERT 和 T5 轮子，钻研 API\n设计和源码。这一定程度上牵扯了我大量本应该用于课内的时间，但收获也是不错的，我\nfinetune 的 BERT 模型做出了被学长们称为“promising”的成果。\n但是后续是无休无止的挫败，我 T5\n相关的工作至今都处于停滞状态。在那段时间，我经历了第一次情绪崩溃，一时间万念俱灰，每天醒来只有想睡回去的想法。那段时间，身体也一直不是很好，时不时就会有心脏疼的感觉。这种情况下的我，选择了实质上的彻底放弃，虽然一直没有和带我的学长提出我要退出。\n现在我也不想继续学习人工智能了，每每看到那些曾经熟悉且能熟练运用的数学公式、轮子、模型，只会让我想起那段折磨至极的时光。但大三上学期的我，早就已经浪费了一年的时光，现在的\nHolder\n的后路究竟如何，完全还是未知的，我该如何面临毕业，也还是未知的。\n或许还是有些好消息的\n稍微能够宽慰我的，就是我现在过得还不错。至少我身边的一切，我的学业成绩、我的感情、我的朋友们、我的家人们都处于稳定的状态上，除了我自己的出路，其余暂且不需要我过多担心。\n这已经足够了，如果不去太担忧未来的不确定，活在当下自然是自由而快乐的。中厅的麻将还能用，新笔记本上还有若干没有玩的游戏，Sakana\n还在身边，我还是有一群能聊得来的朋友，这一切的一切，暂且能够让我不再过分担忧今后。\nHolder 的一些自述\n在别人眼中，特别是我高中的老师眼中，我是一个特别会规划的人。然而实际上，Holder\n永远是一个走到哪里算哪里的人，只不过总是喜欢回忆，总是喜欢和过去的自己斤斤计较，懊恼于一时的失误。\nHolder\n是一个喜欢沉浸在回忆中的人，我对过去的记忆可能过于清晰。我的一个习惯性动作是，无聊的时候将记忆中的场景构建出来，比如说尝试构建出：\n\n2018 年的 8 月份，在高中的三层小楼中，Holder\n和同学们正在为升入高三做准备。除去我们升高三的理科实验班同学，其他人早已放假。那座小楼已经老旧不堪，空调毫无用处，电风扇没有力气。外面是炽热的阳光和扭曲的蝉鸣。\nHolder 趁着下课偷偷跑出小楼，听着下课铃在早已空荡的学校中回响。\n\n\n我或许会把这个场景构建得和刚经历差不多，然后自己沉浸在这个场景里回忆当时自己的所思所想。这个习惯来源于初中睡午觉，当时为了让自己快速入睡，就会使用这种方法——在脑海中完全重建回忆的场景，这种方法消耗脑力很多，有的时候没有构建完成就慢慢睡着了。\n这个习惯一般会让我很难忘记一些事情，但是坏处就是：\n\n我忘不掉一些应该忘却的事情。\n\n\n所以至今我的思维包袱是很重的，回忆构建的数据库足够庞大，能够支撑我思维的快速切换跳转和联想。但是一旦联想到一些本应该忘却的场景，比如说曾经的尴尬场面、自己伤害别人的行为，那\nHolder 可能就会沉溺在这里，然后一遍一遍鞭尸自己。\n这还是挺折磨的，这让我很难聚焦于当下应该做的事。\n所以说？\n这些文字其实没有任何意义，可能明天起来就会觉得幼稚和不成熟，但是确实是现在困困的\nHolder 想要记录下来的。\nHolder 就要成为大三的学生了，在此之前，12\n号先要去北大吃一顿烤串，这足以让我暂且安静地睡去。\n晚安。\n","categories":["【生活记录】学期总结"]},{"title":"大三春季学期学期总结","url":"/2022/07/07/grade-3-spring-conclusion/","content":"这个学期说实话比较不太平凡。\n\n课内学习\n这学期最一开始的打算是修完培养计划，所以除了\nOS、系统结构、数学实验三大必修课之外，还选了整整六门限选课，远超于正常人的两三门。\n学期一开始实际上没有什么体会，毕竟什么课都还没有给压力，加上当时没有封校，所以甚至还能保持每周都有出校活动，比如打四口机、打八口机、V+\n群聚、浮生群聚等等。而且当时也是刚刚加入徐昆的实验室，刚刚给我分配了工位，还在布置工位的硬件，所以过得总体而言还算快乐。\n但是问题就在之后慢慢出现了，我们来梳理一下我选的所有课的任务列表：\n\nOS。六个 Lab，期中期末考试\n系统结构。每周书面作业，两个 Lab，期末考试\n数学实验。十个 Lab，期末考试\n现代密码学。三个 Lab，期末考试，考勤\n数据挖掘。六个 Lab，大作业，考勤\n搜索引擎技术基础。两个 Lab，大作业\n计算机图形学基础。四个 Lab，大作业，考勤\n数据库专题训练。五个 Lab\n存储技术基础。两个 Lab，论文笔记\n\n这些东西加起来快四十个\nLab，哪怕就是平均分配到学期十六周，每周都会有两到三个 Lab\n要去做。而且这些 Lab\n都不太算是一天能写完的量，少的可能一天一夜，大的比如说现代密码学的\nLab2、存储技术基础的\nLab2，都是占用了半个星期乃至一整个星期没日没夜地写的。而且数学实验的 Lab\n一个都几千字，写得人都发麻。\n再加上 OS 的 Lab 和数据库的 Lab\n的截止日期一般都是某个周日，这就更加恐怖了，我有的时候周日需要快速赶工两个\nLab，然后数据库这门课的 Lab 如果不做他的很难的拓展功能是拿不到 4.0\n的。\n在这些东西交杂之下，我不得已先是退掉了数据库，因为 OS\n当时已经期中考完了。然后做存储技术基础的 Lab2 写到人都快废了之后，为了\nkeep 绩点也最后退掉了。\n我已经对这一学期的后半学期没什么印象了，因为每天都在赶工，每天都在为课内的事情折腾。再加上当时北京疫情封校，导致几乎所有的娱乐活动坍缩成为了活动室打麻将，更让这学期后半段一点记忆点都没有。\n\n好在你清良心发现给了记两门课 PF 的机会，我立刻记了 OS\n和系统结构，这样的话我就可以摆烂到底，最后考试我也直接裸考，反正谁怕谁。\n不过即使如此，选课选多了的弊端还是会在期末周浮现，那就是大作业。这么多课里面，有三门课有大作业，而且在我期末逃难的时候，还有系统结构的\nLab2\n没写，这些东西构成了我六月底考试全部结束之后的噩梦，这些作业成功让我四天五天左右没有碰到床，都是在自家沙发上睡过去的。\n这中间的插曲就是数学实验的事情，因为取消了期末考试，所以评分只能依据十次\nLab，但是这十次 Lab\n大家几乎都是满分，一点区分度没有。所以当时老师就提到了需要把上课情况纳入考量，但问题就在于我是一个巨大习惯自学的人，真的是一次课没有去过。当时在政策说明的时候，老师甚至说出了考勤分可能占比到一半的政策。\n这就有可能导致挂科，而挂科真的会非常难弄。于是我只能去和助教说明我的情况，自证自己真的这门课学明白了。\n不过结局也是戏剧性的，助教最后透露了考勤分只占总评两分，但是我认识的带我一共四个一次考勤没去的同学，两个\n4.0 两个\n3.3，我们平时分都是几乎一样的。这就很奇怪，没有人知道老师最后怎么给分。\n\n就结果而言，这个学期可谓是成功的，因为我每一门都是\n4.0。但是就过程而言，这段过程可谓是艰难至极，我可再也不想经历一遍。\n不过已经最终了，绩点排名 26%，方案内也只剩下 4\n学分，体育没有挂科，专业主修也都完成，应该进推免推荐名单问题不大。加上名额也已经口头确定，我自己做实验室的事情也还不错，总之结果上而言，我的本科看起来已经快完成任务了。\n实验室\n这是这学期最大的破事。\n本来是在徐昆的图形学实验室的，也分配了工位，白嫖了一个台式机，自己还稍微布置了一下工位。\n基于此我觉得我应该就安定在徐昆这里了，不过也确实，除了猫猫之外这里没有其他九字班的同学，而猫猫打算出国，并不会和我抢名额，而且当时徐昆和他的对话也暗示着名额应该会有给我的倾向。\n就这么一系列的事情我就觉得问题不大了，应该就定在这里了。\n这里稍微给自己辩解两句，如果我真的想做好一件事，我可能会花很长时间去打基础然后去做，但这样的问题就是会有一个月乃至更长的时间没有什么明显的产出。然而实验室的组会并不会允许你一周没有什么产出。那么问题就显而易见了，我在组里的很长一段时间内，都在学\nGAMES101、学习什么是可微渲染、研究学长代码的架构，而毫无可以在组会上说的东西。\n大约是四月底的某一天，带我的学长给我介绍了项目的新成员，一位茶园过来的九字班同学，当时我就隐约觉得不大对劲，但是也没说什么。\n最后也就是大家都知道的，我的名额被挤掉了，五月份的时候，还要去找新老师。先是飘到\nProf. Ji 那里打算去做量子计算，但是考虑到前景和自己兴趣，最终还是 quit\n了。\n\n在这之后我有时间就会去看媒体所的导师介绍页面，我几乎给上面每个老师都发送了简历，但是大部分老师都因为没有名额回绝了我。然而在这些老师里面，贾珈老师虽然已经没有名额，但是她愿意把我推荐给其他老师，这样我就认识了孙立峰老师。\n之后便是简简单单的互相见面，我自我介绍，他分配学长和我交流。不过不得不说黄天驰学长真的好好交流，就没有什么交流障碍，很舒服的一位学长。\n这之后就是简简单单的流程，开组会些项目，最后在七月份我们口头确定了名额，这样这件事情才最终落定。\n虽然中间还有一些奇奇怪怪的经历，不过也没有什么特别值得介绍的，所以就算了。\n\n不过现在反思回来，徐昆那边我其实还是有点咕咕咕的，因为课内真的选太多课了。\n衷心建议，大三没必要选这么多课，还有大四可以选。这段时间就应该好好去和导师交流，做好他给的项目。否则真的很容易丢掉名额。\n科协 &amp; THUInfo\n有点心怀愧疚的两件事，因为确实没有给这两方面做出什么贡献。\n没什么好说的了，没什么好辩解的了。\nSakana\n本来在寒假的时候，Sakana\n在计划着周末来北京玩，结果是大家都知道的四月封上海五月封北京。于是一整个学期没有线下遇到\nSakana。\n然而甚至连视频都没有怎么弄过，因为我课内非常之忙，她也并不空闲。\n说实话异地是真的痛苦，没有感情基础的话很容易因为失去共同话题、失去热情等一系列的东西直接炸裂。\n\n不过好事就是我和她都提前回家了，忙完期末之后我们大约是见了很多次的，她也开始打日麻，我也尝试着再次入坑王者。\n比较好玩的是，我每每会以出来干活的名义约她去星巴克坐一下午，然后实际情况是，我和她贴贴摸鱼一下午。想起来\nSakana 就已经说过两人在一起是不太可能干得了活的，现在确实也是这样。\n最近也终于有一种关系走向正轨的感觉，当贴贴变得自然的时候。\n还有什么呢\n打牌，打全高赛。虽然进了所谓校队，但是你清直接在全高赛被暴打，遗憾倒数第一出局。事后也算是发生了一些奇妙的摩擦。\n但是确实借助这个机会认识了很多人，也和很多人加深了联系。\n唱歌，但是在封校之后也只是在操场上唱过几回。\n\n说实话，Holder 还是觉得自己好像很无趣，娱乐活动真的好稀少。\n还有一些别的什么呢\n其实这一学期应该说经历了开头斗志满满，中间疲劳过度，五月陷入困境，六月初见曙光，七月挣脱这样的一个流程。就小说的故事性而言，这样的情节走向比较符合一般的小说。\n根据上面的描述，大家也都发现了，课内真的占据了我这个学期几乎所有时间，哪怕就是理论上最忙碌的大三上学期我也写了很多打牌、V+\n群、科协相关的一些事情。\n我也不止一次被学长批评没有必要把大三下学期课内塞这么满，卷卷科研争取名额才是最优解。不过即使如此，我也没怎么听进去，还是我行我素继续和课内搏斗，最终自然还是吃到苦头。\n\n那么，现在已经是基本确定后路的状态了，大四也选了一些好玩、对胃口的课，那么，继续享受剩下来的一年吧。\n不过今年的毕业季确实看得我眼馋，我好想毕业。\n","categories":["【生活记录】学期总结"]},{"title":"2022 年寒假总结","url":"/2022/02/13/grade-3-winter-conclusion/","content":"寒假也快结束了吧。\n其实依然是什么事情都没有做的一段时间。\n\n打牌\n在放寒假之前雄心壮志地想好了很多想做的事情，从 THUInfo\n到技能引导文档，乃至实验室工作甚至是学抽象代数。但实际上我的寒假大约一大半时间在打牌。\n在寒假回家的前一天，我打了一个通宵的雀，从那以后就莫名其妙比以往更沉浸在打雀之中。一方面可能和当时刚刚打上玉间有关，更重要的可能是当时我恰好处于绝好调的状态。那段时间我几乎是一四流选手，顺风的时候不需要读牌，不需要防守，牌局前期一般就能通过奇妙的运气和出亲跳和若干亲满奠定靠近五万点的胜局，后续哪怕铳几个子家满贯也不过洒洒水。\n所以我从刚进玉间到冲上豪三并未花很长时间，大约两个星期而已。但是随后而来的是恶调，那段时间牌谱屋的数据表明我的起手平均向听数直接飙升。这个时候原先漏洞百出的打法显然完全不能适应，所以掉回了豪二。\n在寒假快要结束的时候，接到了你清打算组织参加全高赛的信息，即使当时已经有点觉得自己过于打雀而疏忽要做的事情，但是还是毅然决定参赛。目前的结果呢，即使自己技术拉跨，但还是靠着奇妙的狗运挂边入选了代表队。\n\n我之前在 QQ\n空间以及朋友圈都发过一个反省自己打雀水平的小短文，一定程度上也和这次选拔赛四位评委对我的评价类似。\n我对我自己的一个评价就是过于死板或者直线，不够灵活，这和自己面麻喜欢打快牌以及还有时在家和家里人搓牌有关。快牌的一个显著特点就是几乎没有什么读牌的时间，因为构建自己手牌的方向就足够耗时间，所以我应对快牌的方式就是不顾一切地进攻，烂牌也全牌效，抓到明显的危险张也往往手比脑子快拍出去放大炮。并且，另外一种应对就是尽早立直进入摸切，这样能获得一点休整时间。\n过于欠缺的防守和读牌技术使得我这一次在比赛中，即使有意识在防守，也常常会在半途发现自己没有安而侥幸着遵循“没有安就日”的信条重新回到进攻路线，然而心中的不安和紧张又会在摸到模棱两可但安全度还可以的牌的时候转为防守。我猜测这也就是评委认为我不稳定的原因之一。\n但其实我说没有安的时候真的没有安么？其实很多时候是可以通过读牌获取一些安度其实还可以的安的。我的防守理论只有筋牌和壁牌，我对手顺的认识是相当低的，比如说连切\n64m 时一般而言 58m 铳率低，这一点我很难注意到，我只会认为 58m\n是没有通过的筋而完全缩。\n还是想找找有无讲防守的一些书籍什么的。\n\n不够灵活的另外一个致命体现就是甚至可以看漏听牌，比如说名场面：\n\n这里吃 1s 后打什么呢？实战我打了 8s，连切 3m\n听牌都没有发现，这就是梦游切牌的技术。\n技能引导文档\n这是我在寒假前期一直在做的事情，后期想接着做但是有点懒而且有点缺乏动力。\n简单来说技能引导文档的初期还是取得了不错的成绩，推送有不错的浏览量，也有一定的用户反馈，编写者们也算是很有责任心。但“这个文档是不是一个造轮子的项目？”，这个问题还一直萦绕着我。目前来看文档确实是走入了一些困境，我们编写了一些编程语言的入门指导，编写了一些简单的算法入门文档，但是我们发现我们真正需要人手来编写的\nadvanced topics 却恰恰没有人来写。\n我一开始设想的核心竞争力，一方面是面对你清这些已经有一定编程基础的学生，没有必要讲解那些相当基础的内容，也就是说，我们简洁。另外一个，就是我们有一些更为\nadvanced\n的知识，比如图形学、人机交互、操作系统等一系列的入门指导，无论是简单的介绍还是课程、资料推荐，都是不错的。\n然而现在的困境就是没有人来编写这些 advanced\ntopics。现在也渐渐有点沉默下去，不太想打理这一份文档了。\nTHUInfo 以及其他\n目前绝赞咕咕咕 THUInfo\n的开发工作，我希望下学期开头不太忙碌的时候能做一些事情。\n当然，现在有点希望去做一些实习，这样的话能稍微了解一下业界和真实的软件开发环境。目前规划问问有没有去微软的实习机会吧。\n其他的一些\n整个寒假过得其实挺快乐，前期虽然和社区的沙雕书记起了不少摩擦，但隔离的时候也算是最认真的时候，发布了文档第一版本还确确实实提升了一些雀力。\n回家过年则很一般，过年也就是在各处亲戚串门，闲工夫出去看电影。初三往后去了姜堰见了同学，和\nSakana 玩了两三天，和我弟交流了不少高中相关的事务。最后回家，打牌。\n总而言之就是一种完全放松而不想做事情的态度。\n\n下学期，我打算把培养方案直接全部完成，虽然可能中途会退缩。然后 V+\n那边也会时常参加线下活动，雀的话应该也会经常约训练赛。THUInfo\n那边就只能慢慢磨，实验室只能说徐老师暂且还没找我麻烦而已，但后续肯定是不能再咕咕咕了（毕竟关系到自己的后路）。\n总之每一个学期或者假期结束的时候都会有一种下一学期（这个假期）好好干什么什么事这样的想法，但最后往往漂亮地事与愿违，这一切最后，还是归根于\nHolder 这个人的惰性和摸鱼，先给那些被我摸鱼耽误事情的人道个歉。\n但不管怎么说，生活还要继续过。下一步，应该是主要先应付实验室，不能真的一点事情不做了。然而在此之前，今天约了人出去吃饭，生活嘛，就是这样。\n","categories":["【生活记录】学期总结"]},{"title":"大四了，要干什么呢？","url":"/2022/08/19/grade-4-autumn-preview/","content":"就这样 Holder 也已经大四了，似乎自己其实还什么都没有想好。\n\n8.19 的晚上，我想着不如早一些回北京，于是和家里人商量好了买好了 8.22\n的火车票。但是等到现在冷静下来之后，反倒是有一点觉得，这样是不是有点太仓促了，我似乎好像还没有想好我大四应该干些什么。\n不过比较确定的是，我现在需要罗列一下我已经安排好的事情：\n\n\n\n\n8.20\n8.21\n8.22\n8.23\n\n\n\n\n早上\n-\n早起去做核酸\n-\n注册 &amp; 收拾宿舍等事务\n\n\n午饭\n在家\n万象城\n回老家\n食堂\n\n\n下午\n寄回 MBP &amp; 摸鱼\n和 Sakana 贴贴、出勤\n收拾行李 &amp; 出发\n-\n\n\n晚饭\n【已安排的应酬】\n【已安排的应酬】\n-\n-\n\n\n半夜\n学习 &amp; 四系联赛\n收拾行李 &amp; 入校申请\n多半打雀\n-\n\n\n\n回北京之后的第一件事果然还是赶快和导师和学长见面聊聊，稍微加深一些了解，准备正式接入实验室，并且实验室应当成为下学期的主线工作。\n课内的预习就简单看书做题就行了，可以在下午这种精力不太充足但是又有时间的时候做。\nTHUInfo 最近应该需要加紧做做，科协那边的 308\n权限系统和两个技能引导新文档也需要做，但这些都是短程任务，不需要花很多时间。把这些做完后，科协那边可以基本放手，THUInfo\n也只要做做日常维护就行了。\n主要还有一件事就是体育运动，我还是计划好好游泳的，可能初期还是每两天去一趟游泳馆，每天晚上去游上小几百米可能还是比较好的。\n然后就是下学期省钱的事情，说实话有点经济稍稍紧张了，说不定可以接一下商业单子之类的。\n其余的大事情其实说实话毫无想法，最多就是一些可能的娱乐活动，出勤、纯\nK、打打雀什么的。生日估计就是几个人出去玩一下午，然后 ZLR\n约着喝酒，国庆随便怎么过，学期中看 Sakana\n情况也可以去看看她或者她来玩。\n总之很具体的事情还暂且不需要太去规划，毕竟也不知道后面什么情况。\n但是大体而言，果然还是以实验室事务、推免流程为主线，课内随便混混的生活。\n","categories":["【生活记录】学期总结"]},{"title":"Hello world","url":"/2021/06/16/hello-world/","content":"刚刚建立好这个地方，暂且也没什么特别想说的，不如就来玩一下 hexo\n的各个语法吧。\n\n首先玩玩代码块，自然首先试试 CPP。\nC++#include &lt;iostream&gt;int main() &#123;    std::cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; std::endl;    return 0;&#125;\n再来试一下 Python。\nPythonif __name__ == &#x27;__main__&#x27;:    print(&#x27;Hello world!&#x27;)\n不如玩一下 JavaScript。\nJavaScriptconsole.log(&quot;Hello world!&quot;);\n然后玩一下数学公式。\n我们可以把机器学习抽象描述为以下过程，这里 X 表示输入集合，Y 表示输出集合，L 表示损失函数，w 表示模型参数，fw\n表示在某一系列参数之下的模型函数。\nw* = argminw ∈ Ω∑xi ∈ X, yi ∈ YL(fw(xi),yi)\n再来试一下它自带的一些引用块。\n你成功建好了自己的第一个 hexo 站点！\n\nhexo 文档里面还提到了一种奇怪的东西，来试一下。\n这个东西被称为 Pull Quote。\n\n似乎还有奇怪的东西。\n这个是提示成功的引用块。\n\n下面是一个居中引用。\n\n这里我们居中一定的文本。\n\n\n这里还似乎提供了用于查询浏览器支持方法的插件。\n\n暂且玩到这里吧，目前的话想要做的一些事情包括：\n\n写（搬运）点有点价值的东西\n有没有可能做一些类似于管理员才可访问的东西呢\n搞一下评论系统、浏览计数之类的\n\n当然我们知道明天下午就考数电了，所以 Holder 该滚去复习了。\n","categories":["【导航】"]},{"title":"有关助词「は・が」以及零助词的一些思考","url":"/2025/05/26/ha-and-ga/","content":"这大概是日语无论是教学还是科研领域都是最经久不衰的话题之一了，今天借着和群友讨论又学习了一些论文，这里简单总结一下我对这个话题的一些思考。\n\n首先我们要铺垫相当多的基础知识才能进入正题。\n本文的成文很大程度上借助了 这位知乎答主\n的文章，他的文章为我提供了相当多的启发和指引。\n从主述结构到题述结构\n主述结构\n日语语句的结构，最基本的就是主述结构。首先，它具有一个述部，述部根据其中心词汇的性质分为四类，述部的性质决定了这句话的性质：\n\n（判断句）学生です（以判断助动词「だ・です」辅助的名词成分为核心）\n（动词句）食べる（以动词为核心）\n（形容词句）赤い（以形容词为核心）\n（形容动词句）静かだ（以形容动词为核心）\n\n当然，述部可以通过连接上各种助动词、补助动词等扩展其含义，包括否定、可能、使役、被动、授受、尊敬等都是这样表示的。如果有多重语义要表示，那很有可能会诞生一个变形金刚一样长的述部，有很多日语笑话也是来源于此：\n食べる（吃）→  食べさせる（让吃）→ \n食べさせられる（被迫吃）→  食べさせられたい（想被迫吃）→ \n食べさせられたくない（不想被迫吃）→ \n食べさせられたくないようだ（好像不想被迫吃）→ \n食べさせられたくないようです（好像不想被迫吃【一般尊敬语气】）\n述部永远位于句子的末尾，除了述部外，句子的所有成分则均为文节。文节指的是名词性成分（包括从句等）受格助词引导构成的词组，日语中哪些助词是格助词众说纷纭，但一般而言类似「が・を・に・で・と」等是格助词是没有争议的。文节中的格助词是什么，这个文节就称为什么格。例句：\n\nわたしが（ガ格文节）学校で（デ格文节）太郎に（ニ格文节）本を（ヲ格文节）あげた（动词述部）。\n\n其中ガ格文节，或者模糊地称为主语文节，是一等公民。其余的文节则按照格助词优先顺序有相对固定的默认排序。\n另外需要注意，同一句中的格不能重复，例如说不能同时出现两个ガ格文节。此外每个文节中最多有一个格助词，也就是说格助词不可能连用。\n题述结构\n题述结构则是在主述结构上更高一层的结构，而这也是日语（甚至部分观点认为汉语也是）的一大特色。\n题述结构中中心是一个副助词「は」引导的成分，称为话题。根据话题的有无，日语句子又可以分为有题句和无题句。无题句的结构即为单纯的主述结构。有题句和无题句在修辞效果上有一定的区别。无题句一般而言是对某一种现象客观的表述，而有题句则一般体现说话人主观上对这个话题的判断和理解。\n我们现在关注有题句中，话题在句子中的形式。根据话题在这个句子中是否具有格成分，可以分为两类：\n\n（タイプ①）象は鼻が長い。\n（タイプ②）部屋には椅子がある。\n\n可以看到在第一类句子中的话题我们没有办法给他分配一个格助词来引导，所以它单单作为这句话的话题存在。这种句子一种解读方式是，「鼻が長い」这个主述结构整体作为了大句的谓语，因此得名主谓谓语句（虽然部分观点不认同该称呼）。这也是日语中相当有特色的一种语句结构。\n而第二类句子则较为简单，其可以视为一个普通的主述结构中选取一个文节提升为该句的话题。理论上，一句话中的所有文节以及部分副词性质的词都可以被提升为话题，例如：\n\nわたしが（ガ格文节）今日（副词性名词）学校で（デ格文节）太郎に（ニ格文节）本を（ヲ格文节）あげた（动词述部）\n\n我们可以逐个将其提升为话题，这里出于方便，话题全部放在最前：\nわたしがは今日学校で太郎に本をあげた。  →\nわたしは今日学校で太郎に本をあげた。（ガ格话题） \n今日はわたしが学校で太郎に本をあげた。（副词性话题）\n\n学校ではわたしが今日太郎に本をあげた。（デ格话题）\n\n太郎にはわたしが今日学校で本をあげた。（ニ格话题）\n 本をはわたしが今日学校で太郎にあげた。  →\n本はわたしが今日学校で太郎にあげた。（ヲ格话题）\n要注意，「がは・をは」这种连用会导致格助词脱落，最终仅留下「は」。\n格助词与话题的作用域\n有题句中，单个话题可以统领多个主述结构。举例而言，「鼻が長い」和「体が大きい」都是完整的主述结构，它们同时受「象は」这一话题统领，可以得到下述句子：\n\n象は鼻が長くて、体が大きい。\n象は鼻が長いし、体が大きい。\n\n可以看到多个主述结构之间可以选用不同的接续助词连接。\n然而，话题的统领作用，或者说其作用域并不仅仅局限于简单的多个主述结构，其可能统领其之前的内容：\n\n薬を飲んだ後、弟は少し元気になった。\n\n也可以跨句子统领：\n\n彼は多趣味だ。今日も習い事で忙しい。\n\n当然，多个话题之间的作用域一般而言不重叠：\n\n（○）リュウジがミドリに初めて出会ったとき、彼女はまだ若かった。\n（×）リュウジはミドリに初めて出会ったとき、彼女はまだ若かった。\n\n这里第二句由于话题作用域不重叠，前半句就不能视作讨论“她”的内容，所以最后直接给出“她还年轻”这个描述的时候就会显得唐突。\n\n而根据上述的讨论，格助词的作用域永远是极小的，仅仅只能影响其统领的名词成分以及其所处的这句话。\n结构与语义的关联\n话题和受格助词引导的成分是有根本上的语义区别的，这是结构所确定的。话题一般而言是一个相对宽泛且不特定的概念，而受格助词引导的成分则是一个特定、排他的概念。\n有趣的是，我们可以从复文（同一个成分反复）句中看出这种区别：\n\n奥さんは奥さんだから、よっぽどひどくなければ大目に見てあげてください\n奥さんが奥さんだから、離婚したのも不思議ではない\n\n第一句汉语几乎可以直译为“妻子就是妻子”，然而我们可以注意到，这种表述中“妻子”是一个宽泛的概念，说话人想要表述的是“妻子”这类人所具有的一个共通特点，例如“可能不会事事如你所料”，所以才会说出“要是不太过分你就放她过去”这种要求。\n第二句在汉语上则很难直接翻译，根本原因是这里的「奥さん」并不是泛指“妻子”这一类人，而是特定地指向了某个人的妻子，这句话其实是在强调这位妻子具有某一种独特的特点，例如“多次出轨屡教不改”，从而导致了“离婚也不奇怪”的结果。\n当然，第二句这种特征并不只是「が」这一个格助词特有的，严格来说所有格助词都具有这种特定含义：\n\n行くとこへ行けば、大モテなんですよね\n出すものを出せば、俺は構わないぜ\n\n这类复文中，我们可以看出，「行くとこ」或者「出すもの」根本就不是泛指“去的地方”或者“拿出的东西”，而是说话人意图中特定的“某一个要去的地方”或者“某一个要拿出的东西”，这种特定指代的特征正是格助词所带来的语义。\n【结论】格助词带来的是特定、排他的语义，暗指除此之外所有的事物均不符合语句的描述。\n即使不是复文句，一般的句子例如「沖縄へ出張する」暗指了“出差的地点就是冲绳而并非其他地方”，例如「わたしが本物です」也说明“只有我而不是任何其他人是真货”。\n\n回到话题这个概念，话题的本质就是将后续所有的叙述全部限定到一个范围内。虽然也是限定，但是相较于格助词的点状指向，话题更类似于面状限制。面状的限制天然带来了“与之相对的另一面”这一概念，而格助词点状的限制是很难找到完美的对应点的。这种“天然的另一面”就带来了助词「は」所包含的对比语义。\n从结构上深究，我们将构成对照的两个话题，使用同样的结构叙述出来，这种结构本身就已经暗含了对这两个话题之间对比，无论是比较这两者的相似之处还是相反之处。\n\n雨は降ってる。\n\n这句话之后完全可以再蕴含一句「雪は降ってない」构成对比。\n这种用于对比的「は」随着使用范围的扩大也逐渐不一定担任表示话题的任务了，此时便与一般的副助词一样，可以用于各种场合去形成对比语义：\n\n彼はたまたま学校をサボるけど、人を殴りはしない。\n\n这里第一个「は」依然是表示话题，而第二个「は」则是一种对比的含义，表示在讨论“他”这个人的时候，一方面“他偶尔逃学”，但是另外一个方面“他还是干不出打人这种事”。由于这里第二个「は」仅仅作为一个插入成分存在，其没有提示话题的作用，整句话的话题依然由「彼は」统领。\n【结论】话题带来的是模糊的圈定，进一步推导出了对比的含义。\n语义的外在体现\n现在我们终于可以涉及「は・が」的区别这件事了。其实从上述讨论我们已经得到了下面的本质性区别以及其语义的外在体现：\n\n格助词「が」：（结构上）只能统领小部分内容 →\n（语义上）点状的明确指定 → （语义上）排他\n话题副助词「は」：（结构上）统领相当广泛的内容 →\n（语义上）面状的模糊圈定 → （语义上）对比\n\n在这个基础上最常见的一个判定法是重要信息判定法，也就是说「が」之前是重要信息，「は」之后是重要信息。这是因为如果使用了「が」，就代表说话人在描述一个具体的事物，这个具体的事物自然成为了重要的信息。而「は」则代表这之后会出现说话人对这个话题的理解，这些信息才是说话人真正想去传达的。\n实际上，所谓的重要信息，也就是限定最多、意义最明确的信息。\n例如：\n\n陳さんは立派なお医者さんです。\nあの黄色い服を着た人が陳さんです。\n\n第一句话，“陈先生”是一个双方都了解的人，双方将此作为话题，而说话人仅仅描述“他是伟大的医生”这一方面，对其年龄、身高、婚姻情况并不关心，这是说话人想要传达给听话人有关陈先生的内容。第二句话，双方首先着目于一个特定的“穿着黄色衣服的人”，对于这个人，说话人对其下了“他是陈先生”的判断。\n如果替换为疑问词，也就能看出「は・が」的区别，因为疑问词往往是说话人最关系，最希望得到重要信息的地方，所以疑问词一般在「が」之前，「は」之后：\n\n陳さんはだれですか？\nだれが陳さんですか？\n\n第一句和之前一样，“陈先生”是双方都了解的，说话人则在关心“他的身份”这个方面，希望获得这个话题下听话人对此的描述，比如“你儿子的语文老师”或者说“我曾经的主治医师”。而第二句，说话人希望得到一个特定化的描述来帮助他以后确定陈先生，无论是“那个黄衣服的人”还是“昨天给你打电话的人”等。\n零助词现象\n所谓零助词现象，就是指口语或者不正式文本中应当出现格助词或「は」的地方助词缺失，一般而言格助词中仅有「が・を」以及「に」的部分语义允许缺失。\n根据先前所述，格助词起到点状、排他的限定作用，「は」起到圈定话题的作用，所以去掉助词事实上是一种解除限制，模糊焦点的行为：\n\nケーキがほしいですか？\nケーキはほしいですか？\nケーキ、ほしいですか？\n\n第一句使用了格助词，这就代表了现在说话人所提问的仅仅限于“蛋糕”这一件事物，甚至根据上下文可能局限于“我刚刚带来的蛋糕”等更为精确的内容。这就使得句子的焦点被放到“蛋糕”这个词上，而后续的“想要”则相对而言，就被固定下来（也就是说说话人不关注听话人对蛋糕的其他情感），成为被修饰的成分。\n虽然第二句稍显不自然，但我们依然可以认为「は」导致了“蛋糕”和“想要”之间信息量不均衡，说话人固定了“蛋糕”这个话题，而需要听话人对“是否想要”作出回答。\n相对而言第三句则显得随意且意图相对模糊，“蛋糕”和“想要”这两个部分相对而言获得了均等的关注，且“蛋糕”也不一定就是特指，也可以泛指，总之并没有任何语法标记指明这一件事。这种意图不明确的遣词造句在随意的对话场合下，显然是更令听话人容易接受的。\n一些其他的讨论\n「は・ば」同源论\n目前副助词「は」与接续助词「ば」同源已经得到学界广泛认可，这里讲解其中一个相当相似的点，即复文结构的意义相似之处。「は」的复文往往是「○は＋○だ・で」，而考虑到「なら・たら」本质就是「ならば・たらば」，「ば」的复文则一般是「○なら・たら・ば＋○たで」。而「ば」的复文，正是\nN1 中的一个难以理解的语法结构。\n\n金などというものは、無ければ困るが、あればあったでやっかいなものだ。\nよけるのは簡単だけど、よけたらよけたで、こいつムキになるだろう。\n\n格助词不重复原则的影响\n类似「象は鼻が長い」这种句子如果硬要写成无题句，一般也只能写为「象の鼻が長い」，然而严格来说这两句话意义并不一样。再者。类似「私はイチゴが好きだ」也很难写为无题句，为了尽力避免格助词重复可能也只能写为「私にイチゴが好きだ」或者需要大改用词为「イチゴが私の好物だ」。\n这种由于格助词不重复的限制，不得不将某些成分提升为话题或者作零助词的现象并不少见。\n事实上，格助词不重复这一限制还会导致主动句转为使役句等情况下发生大量的格助词相互顶替，当然这已经超出了本文的论述范畴。\n","categories":["【杂谈】日语"]},{"title":"摸索 NexT 注入实录与实现振假名渲染","url":"/2022/08/20/inject-ruby/","content":"由于日语文本中经常出现振假名（可以理解为国内小学课本上汉字上的拼音），但是\nMarkdown 并没有方便的振假名语法，所以只能摸索了。\n\n首先是我们注意到 HTML 是有振假名相关的标签的，但是实在是太长了：\nHTML&lt;ruby&gt; WRITTEN &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt; READ &lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;\n那么为了解决这个问题，有两种选择：\n\n定义一种新的 Markdown 语法，在将 Raw Markdown\n传入解释器之前先做一步正则替换，将自定义的语法替换为 HTML 标签\n在渲染后的 HTML 标签中找到所有打过标记的节点，将其替换为\n&lt;ruby&gt; 标签\n\n我一开始是摸索第一种解决方式的，然后遍历了一波 Hexo 的 Markdown\nParser 的文档，没有找到如何解决这个问题。\n我之所以想到这个解决方案，是因为之前有一个 VSCode 的 Markdown\n插件提供了一个 onWillParseMarkdown\n的函数，用户可以通过其参数获得 Raw\nMarkdown，然后自行处理后返回交给解释器。\n但是 Hexo 似乎并没有给我开这个后门。\n\n于是只能思考第二种解决方案，这个时候我想到了 NexT 注入。\n因为先前编写过 Twikoo Recent\nComments，就是现在我的网站侧边栏上展现的最近评论，其就是在\nsidebar.njk 内注入一个指定 class\n的容器，然后在 head.njk 内部利用 jQuery\n首先拉取最近评论然后再处理为列表项塞到指定容器中的。\n那么我们考虑到，Markdown 的代码块会被渲染为 &lt;code&gt;\n标签，我们完全可以利用此特性。而我们为这些需要替换的标签打的标记就是其以\n@\n开头并且用空格分为三块，我们识别到这个标记就进行替换。\n我们只需要注入这样一段代码：\nJavaScriptfunction replaceRuby() &#123;    $(&#x27;code&#x27;)        .filter((_, node) =&gt; &#123;            var list = $(node).text().split(&#x27; &#x27;);            return list.length === 3 &amp;&amp; list[0] === &quot;@&quot;;        &#125;)        .replaceWith((_, text) =&gt; &#123;            var list = text.split(&#x27; &#x27;);            var written = list[1];            var read = list[2];            return $(`&lt;ruby&gt;$&#123;written&#125;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;$&#123;read&#125;&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;`);        &#125;);&#125;\n这样我们就可以用类似：\nMarkdown`@ WRITTEN READ`\n的语法书写振假名。\n效果的话可以看下述歌词的渲染效果：\n@ 言葉 ことばより@ 単純 たんじゅんな@ 方法 ほうほうで、いますぐ@ 地獄 じごくに@ 落 おとしてくれよ。さよならはあんたも@ 知 しっている、@ 笑 わらってくれよ、@ 笑 わらってくれよ、いますぐに。\n\n总之，这样就可以很方便地写振假名了，之后应该会逐步在涉及到日语的地方把之前的旧写法更换成新写法。\n\n另外还有一个小细节，似乎部署后访问字体会出现 403，根据 相关\nIssue 的提示，应该是 Referrer 的问题。\n","categories":["【杂谈】开发"]},{"title":"简明日语自学手册 Chapter 9 句式与常用固定表达","url":"/2022/08/22/ja-tutorial-ch9/","content":"本文将在基本了解日语语句构成的条件下总结各类常见的日语语句表达方式，基于此，读者应当可以自行书写符合语法且自然的日语语句。\n\n状态变迁\n有关状态变迁的表达相当之多，先前也讲解过部分。虽然涉及状态变迁的句式很多，但基本上均分为自然变迁和强制变迁两种，分别对应「なる、する」两个动词。\n这里讲解的时候直接引用了先前章节的例句。\n如果描述状态的是形容词（类形容词助动词），则一般使用「～くなる、～くする」句式：\n\n彼女は化粧するとかわいくなる。（她化妆了就会很可爱）\n辛いものが苦手なので、料理はいつも甘くする。（因为吃不了辣所以总是把菜做甜）\n\n如果描述状态的是形容动词（类形容动词助动词）或者体言，则一般使用「～になる、～にする」句式：\n\n気づいたら彼が好きになっていた。（等发觉的时候已经喜欢上他了）\nやっと大人になった。（终于长大了）\n練習は不可能を可能にする。（练习能把不可能变为可能）\nプレゼンは誰でも分かりやすいように簡単な内容にした。（为了让所有人都容易理解我的讲解，我尽量选择了简单的内容）\n\n如果描述状态的是动词，则可以使用「～ことになる、～ことにする」，其中「～ことになる」强调事态自然而然发展到了某个情况，而「～ことにする」一般用于描述说话者作出了某种决定：\n\n会議の結果、部長の案を採用することになった。（会议的结果是采用了部长的提议）\n拾った子猫を飼うことにした。（决定收养捡到的小猫）\n\n同时，也可以使用「～ようになる、～ようにする」，其中「～ようになる」强调能力的变化，而「～ようにする」一般用于描述为了达到某一种目的而做的努力。特别地，「～ようにしている」用于描述为了达到某一种目的而养成的习惯：\n\nできるようになると楽しいだが、そこまでの道は長い。（能做得到的话自然很开心，但是为了学会要走过的路还是很长）\nきれいな服を買いたい、髪型とかもそれに似合うようにしたい。（想买好看的衣服，那么也要做个搭配的发型）\n毎日日本語の番組を見るようにしている。（我每天都会看日语节目）\n\n另外，形容动词、体言以及动词接续「こと」后还可以使用「～となる」句式，该句式相对于对应的使用助词「に」的句式语义整体并无变化但是语气较为生硬，适合正式行文：\n\n冷静となって考えてみよう。（冷静下来再想想看）\n年取って病気となった。（年纪大了开始生病了）\n明日は出勤することとなった。（明天得上班了）\n\n注意，该句式不能描述理所当然、物理规律使然的自然变化，比如时间的推移，只能使用「七時になる」而不能用「七時となる」。\n而动词还能使用「～こととする」句式，该句式相对于「～ことにする」语义整体并无变化但是语气较为生硬，适合正式行文：\n\n地球温暖化防止のため、化石燃料を使う代わりに自然エネルギーを利用することとした。（为了防止全球变暖，决定用清洁能源代替化石燃料）\n\n注意，该句式不能描述他人的决定。\n在涉及到动词的「～ことになる、～ことにする、～ようになる、～ようにする、～こととなる、～こととする」句式中表否定均是否定接续在这些句式前面的动词，即形成「～ないことになる、～ないことにする、～ないようになる、～ないようにする、～ないこととなる、～ないこととする」。\n另外注意，这类句式之中涉及到的时态全部都是现在时，如果采用过去时则这些句式的含义可能有所变化。\n反复构文\n参考文献：https://www.jstage.jst.go.jp/article/nihongonokenkyu/14/2/14_126/_pdf/-char/ja\n参考文献：https://www.lang.nagoya-u.ac.jp/nichigen/issue/pdf/10/10-04.pdf\n","categories":["【学习笔记】日语"]},{"title":"简明日语自学手册 Chapter 7 副助词使用规则","url":"/2022/08/22/ja-tutorial-ch7/","content":"本文将主要讲解各个副助词的基本使用法则，并举出若干例句进行分析。\n\n不定语义「か②」与并列语义「か③」\n「か②③」在先前的参考论文中并没有讨论，这里引用另外一篇讨论该助词用法的论文：\n\nhttps://jumonji-u.repo.nii.ac.jp/record/700/files/22-1.pdf\n\n这篇文章的观点为，这两种语义的副助词「か」都来源于最基本的表示疑问语气的终助词「か」。具体而言，如果将疑问句作为小句插入主句之中，小句的终助词「か」在主句中则会逐渐被内化为副助词。\n例如下述句子：\n\n校長はいつ帰ったか、姿が見えない。（校长究竟何时回来呢，现在还是见不到人）\n\n这里的下划线部分与其称之为某个格成分，不如称之为一个小句，只不过没有通过接续助词辅助。显而易见，这里的「か」就保留了终助词的语感，而很难看作副助词。\n随着这种用法的增多，以及部分固定用法的出现，「か」的终助词语感逐渐削弱：\n\n美乃は腹がくちいのか空いているのか判らない気持ちだった。（就美乃的心情，她也说不清自己算是吃饱了还是还饿着肚子）\n\n这里事实上是可以通过补足缺失成分来将「か」解释为普通的终助词的：\n\n美乃は腹がくちいのか空いているのか、（それが）判らない気持ちだった。\n\n然而无论如何解释，这里「か」在形式上已经获得了准体助词用法是显而易见的。\n由于疑问句往往携带不定的语气或者选择的要求，因而这些终助词内化之后就形成了表示不定语义的「か②」和并列语义的「か③」。此外，在此基础上，参考论文指出副助词「か②③」通常都以准体助词的形态引导一个带有疑问、选择性质的小句出现，举例如下：\n\n（与强格助词「が」连用）つまりぼくには、このぼくが「急患」であるかどうかが全くわからなかったわけだ。（也就是对我而言，我本就没有理由知道我究竟是不是重症患者）\n（与强格助词「を」连用）自分はどんな注文が兄の口から出るかを恐れた。（我一直担惊受怕着，完全不知道哥哥能从口中吐出什么样的要求）\n（与强格助词「に」连用）だが、喧嘩の勝敗は決して投げるか投げられるかにないことを彼は承知していた。（*然而，他也知道争吵的结果绝不取决于扔还是被扔）\n（与弱格助词「へ」连用）ともかくすぐ三越でしたか白木屋でしたかへ参りました。（不管怎么说，总之先去了三越，要么就是白木屋）\n（与弱格助词「まで」连用）またそれは一番から順に検番に張り出され、何番かまではお金が出る@ 由 よし云った。（而且，那些事务所还会从第一名按照顺序贴标签，听说无论排多少名也都有钱拿）\n（与弱格助词「で」连用）そのときわたしはどうもどこかで会ったことのある男に違いないという気がしてならなかった。（那一刻，我不禁觉得那男人一定是我何时何地见过的某一位）\n（与领格助词「の」连用）どうして異性を取り扱うべきかの修養を、こうして叔父からばかり学んだ彼女は、どこへ嫁に行ってもそれをそのまま夫に応用すれば成功するに違いないと信じていた。（她既然已经从叔叔那里学尽了应对异性的技能，我相信无论她嫁到哪里，只要用其所学应付未来的丈夫，她也就一定不会失败）\n（与弱格助词「と」连用）山嵐を誘いに来たものは誰かと思ったら赤シャツの弟だ。（还在想着是谁邀请山岚来着的，结果是我那穿红衬衫的弟弟）\n（与强副助词「は」连用）使い途があるかないかは、使ってみなければわからぬ。（到底有没有用途，不去用着试试看是不知道的）\n（与强副助词「も」连用）それからあとはどこでどうしたかも、どこで友達と別れたかもわからなかった。（这之后，无论是做了些什么还是说在哪里和朋友告别的，我一概都记不清了）\n（与弱副助词「くらい」连用）あの男がどんな性分かゆくさき望みがあるかないかくらいわかりそうなもんじゃないか。（那男人性格怎么样，对未来有没有希望，至少这样的一些东西还是能弄明白的吧）\n（与弱副助词「さえ」连用）それは事実であるかどうか、どこまで信じていいかさえ見当がつかなかった。（就连这是不是事实，这些话应该相信到哪里都是不明不白）\n（与判断助动词「だ」连用）全く御殿女中の生まれ変わりか何かだぜ。（她一定是宫女转生什么的）\n\n* 这里无法不通过上下文准确翻译该句，故仅作字面翻译。\n如果具体回到副助词「か②③」在现代日语中究竟以何种方式应用，参考论文给出了下述分类。\n小句判定（不定语义「か②」）\n所谓小句判定，指的是助词接续在小句后，并且表达出要求对方判定该小句的描述是否成立的用法：\n\nしかし母はひどくあなたに興味を持ったようでした。病院を訪れると、必ずあなたがもう来たかどうかを僕に尋ねました。（然而我母亲对你似乎有着很深的兴趣。她每次来医院看望我，一定都会问我你之前来没来过）\n\n事实上，这类用法几乎都会以固定句式「～かどうか」的形式出现。虽然副助词「か」也可以单独使用，但是在其后接续上「どうか」构成类似选择疑问句的格式相对而言是更为常见的。\n小句选择（并列语义「か③」）\n本质上和小句判定用法一致，都来源于选择疑问句。然而小句判定类似于一般疑问，回答只有是或者否，而小句选择则类似普通的选择疑问，可以从多个选项中选择：\n\nとにかく準平は相手の息の根をとめるか、どうか勘弁してくれと手をついてあやまらせるかのどちらかになるまで（済まない、）今迄（こう）やって来た男なんだ。（无论怎么说，准平这个男人要是遇上对手了，要么把他斩草除根，要么就一直斗争到让他跪地求饶。他就是这么一路走过来的）\n\n事实上，在类似「〜あるかないか、〜か否か」之类的句式中的「か」应当归类为小句判定还是小句选择事实上是较为模糊的，下述例句也如此：\n\n三四郎はこの三人の外に、まだ連がいるかいないかを確かめようとした。（三四郎尝试着去调查除了这三个人外还有没有同伙）\n\n这里只要选择其中一项，在逻辑上就会自动否定另外一项的选择在实际的语用中其实就和小句判定一致了。\n小句不定（不定语义「か②」）\n所谓小句不定，指的是助词接续在一个特殊疑问句之后，表示说话人无法明确给出这个特殊疑问句的答案，只能直接将该特殊疑问句通过「か」引入句子中：\n\nけれども彼があの女の室に入った時，二人の間に何んな談話が交換されたかに就いて，彼は遂に何事をも語らなかった。（但是就算到最后，他也没透露在他去那女人的房间的时候，他们两人之间交谈了些什么）\n\n可以注意到这里「か」引导的小句中必然存在一个特殊疑问词。\n事物举例（不定语义「か②」、并列语义「か③」）\n从小句切换到事物，此时的「か」并不是直接接续在一个疑问句之后，而是会接续在体言或者是判断句「～です、～だった、～でした」之后。而事物举例所表达的是，以所举例的事物为代表，将这一类事物并入讨论的不定或者并列语义：\n\n富岡は「罪と罰」だったかのなかの、～ドストエフスキーの言葉を思い出して、～。（富冈想起了《罪与罚》还是什么书中，陀思妥耶夫斯基的一句话）\n\n这里「か」引导的是一个判断句，指的是“与《罪与罚》类似的书”这样的一个群体。\n事物举例这一用法可能出现的形式包括「～か、～か～か、～か（何、誰、どれ）か」这三种：\n\nたしか十一歳のときかに欣之助が～。（（这么说的话，）欣之助确实在大约十一岁的时候…）\nいくつか@ 能 よく知らんが大方六つか七つかだろう。（虽说不清楚到底有几个，但大概就是六七个这样）\n水島か誰かがそれとなく奥村氏に注意したのか。（不知道是水岛还是谁在暗中提醒了奥村）\n\n事物选择（并列语义「か③」）\n事物选择指的是从若干并列的事物中选择其中之一的语义：\n\nそれは年に三回か四回かにわけて郵便局で受け取るので、～。（因为这是每年三四次在邮局领取的…）\n\n可以看出事物选择常见的用法也是「～か～か」，这一句式同样也可以表达事物举例。事物举例和事物选择的区别在于，前者是具有泛化性的，也就是说并不局限于其举出的事物，而是扩散到与之类似的事物，后者则相对具体，只是从若干事物中选择其中之一。\n事物不定（不定语义「か②」）\n若无法给出具体的事物作为代表或供选择，则可以直接使用疑问词来描述，这就是事物不定：\n\nただ、軍人で一生のうちの何分の一かを海の上で暮らしたおやじには、～。（但是，对于一生中有相当一部分时间在海上度过的军人来说…）\n\n上述语句中无法确定“作为军人在海上度过这一时间段占一生的比例”究竟是多少，也无法给出若干的例子，所以直接使用疑问词来代指。显然，事物不定的常见句式就是「（何、誰、どれ）か」。\n这类用法事实上是现代日语中极为常见的，甚至催生了类似「誰か、何か」等已经被视为一般体言成分的固定搭配。这种固定搭配一方面体现在「誰かさん」这种词汇中，一方面体现在断句方式中。例如「不良がかってる誰か」，虽然严格按照语法而言，应当断句为「（不良がかってる誰）か」，即「不良がかってる」作为连体成分修饰「誰」，然后这个整体由表事物不定语义的「か」引导。然而现在更常见的断句则为「不良がかってる（誰か）」，即「不良がかってる」修饰「誰か」这一个已经固化的搭配。\n一些惯用搭配\n「か」主导了很多惯用搭配，基本上都是上述用法的具体例子。这里列举一些常见的惯用搭配：\n\nあるかなきか\nするかしないか\n～かのようだ、～かのごとく、～かに見える\n～かもしれない（～かも）\n\n这里第四个搭配中的「知れない」已经完全固化，不可替换为其他表达（除了「知れません」），并且也几乎不写作汉字。\n限定语义「きり」\n该助词源于动词「@ 限 きる」的名词形式，表示“界限”。该助词也可能以「っきり、ぎり」等形式出现。\n该助词接续在表示数量的名词或者「これ」等指示范围的代词之后，表示“仅限于这个数量或者范围”：\n\n今度、二人きりで映画を見に行きましょう。（下次就我们两个人一起去看电影吧）\n一回きりの人生なので後悔のないようにしてください。（人生只有一次，所以不要留下遗憾）\n\n该助词也可以接续在动词的过去式之后，表示在这一动作之后再也没有下文，一般后续接续表示否定的语句：\n\nあの子は家を出たきり、再び帰ってこない。（那孩子离家出走之后，再也没有回来过）\n彼女はまたねと言ったきり、全然連絡をくれない。（她说了再见之后，就再也没有联系过我）\n\n这类用法可以认为是限定语义的延申，即这一动作仅限于这个时间点，在这个时间点之外就不再有。这种用法的一个固定搭配是「寝たきり」，其表示“睡下之后就再也没有其他动作”，即“卧床不起”：\n\n彼は病院で寝たきりだから連絡がない。（他在医院卧床不起才没有联系）\n\n此外，固定搭配「～きり～ない」与「～しか～ない」几乎同义，也用于表示限定：\n\n五分間きり時間がない。（只有五分钟的时间）\n京都へは一度きり行ったことがない。（只去过一次京都）\n\n限定语义「くらい・ぐらい」\n该助词来源于名词，所以接续要求为用言使用连体形接续，体言直接接续。\n该助词最基本的含义为“大约”，即举出一个比较的基准，表示一个与此基准相仿的数量：\n\n長さはこのくらいでいいです。（长度就这样就可以了）\n今から一時間くらいかかる。（从现在开始大约要一个小时）\n僕の部屋はこの教室くらいに広いです。（我的房间大约有这个教室那么大）\n\n需要注意的是，该助词指定的基准往往是较低的，甚至是极端低的基准。如果和类似「少なくとも」等表示极端的副词连用，往往会表达极端低的参考语义，甚至有时候会带有轻蔑等负面的语气：\n\n家全体がいいけど、少なくとも自分の部屋の片付けくらいは自分でしなさいよ。（就不谈让你打扫整间房子了，至少自己得把自己房间收拾好吧）\n足が痛いくらいはたいしたことない、すぐ回復できる。（脚疼这种小事情不算什么，很快就能恢复）\nあの人は少なくとも、自分のことは自分でやるくらいのやつだ。（那个人至少是个自己的事情自己做的家伙）\n今日はとても忙しくて、昼食はパンくらいしか食べられなかった。（今天很忙，中午只能吃点面包）\n一万円を払ってそんなに役に立たないものを買うのは君ぐらいのものだ。（花一万买这么没用的东西的估计也就你了）\n\n限定语义「こそ」\n该助词介于强副助词和弱副助词之间，一般情况下作为强副助词出现，接续在格助词后「（が、を）こそ、でこそ、にこそ」，但在类似「こそが、こそを」等有限的固定搭配中，以及一些准体助词用法中，也可以作为弱副助词出现。此外，该助词接续在接续助词后也是常见的，如「からこそ、ばこそ、てこそ」。在部分情况下也可以接续在副词成分之后。\n该助词的基本语义与汉语副词“正、才”相当，表示恰好的限定语义。其限定语义是相当强的，一般而言该助词所引导的体言成分或小句是整个句子的重心：\n\n（强副助词，格助词让位）来年こそ海外旅行のつもりです。（明年正打算去海外旅行）\n（强副助词，格助词让位）これこそ私の望んでいたものだ。（这正是我所期望的东西）\n（强副助词，格助词让位）こちらこそよろしくお願いします。（这边才是要拜托你的）\n（强副助词，格助词保留）困ったときにこそ互いに助け合うべきです。（困难的时候正应该互相帮助）\n（强副助词，与接续助词连用）そうしてこそ立派な学者になれるんだ。（这样才能成为优秀的学者）\n（强副助词，与接续助词连用）先生の教えを覚えばこそ、逆境にさらされても頑張ってるのです。（正是因为记住了老师的教诲，才能做到即使逆境也能坚持下来）\n（强副助词，与接续助词连用）親は子を愛するからこそ、厳しくしかることもある。（正是因为父母爱着子女，有时才会严厉批评）\n（弱副助词，与接续助词连用）あの子と仲良し同士になればこそです。（这正是因为和那孩子是好朋友）\n\n需要注意的是，与「こそ」连用的「ば」往往表示的是已然条件，而非假定条件。\n此外，该助词作为系助词，可以插入在用言的第一连用形和后接成分之间，此时一般表示“尽管、虽然”的含义。另外，这个语义有的时候也可以用在体言之后：\n\n本を読みこそしたんですが、内容がよくわかりませんでした。（虽说书是读了，内容倒是没怎么看懂）\n彼女は姿形が美しくこそあれ、内面の酷薄さは隠しようがない。（她虽然外表很漂亮，但是内心的冷酷是无法掩饰的）\n彼は真面目でこそあるが、優柔不断なところが欠点だ。（他虽说是很认真，但是也有优柔寡断的缺点）\n大学こそ入っていないが、大学に匹敵する知識を持っている。（虽然没有上过大学，但是有着和大学相当的知识）\n\n然而这种转折现在基本直接使用「が、けど」表达，几乎不再附加「こそ」。\n这里的「こそあれ」是古语系结法则的残余，「こそ」在系结法则中要求句末用言使用已然形，然而这一规则现在几乎不再生效。依然残存的用法还有：\n\nうちのちびは文句こそ言え、人の言うことを聞こうともしない。（我家的小孩净是说道，从来不听别人的话）\n\n上述句子中的「こそ」单纯表强调语义。\n古语残余还有接续在动词未然形后的「～ばこそ」，表示彻底否定：\n\n押しても引いても動かばこそ。（不管是推也好，拉也好，都不会动）\n\n强调语义「さえ」\n「さえ」也是系助词，所以常常接续在格助词后，如「（が、を）さえ、でさえ、にさえ」。相比较于「こそ」，「さえ」几乎不具有准体助词用法。此外，作为系助词，「さえ」也可以作为插入成分插入在用言的第一连用形后。此外，该助词接续在接续助词后也是常见的，如「てさえ」。在部分情况下也可以接续在副词成分之后。\n需要注意的是，虽然系助词理论上不能重叠使用，但「さえも」却是常见的例外搭配，其语气比「さえ」更强。\n该助词的基本语义与汉语副词“连”相当，即强调一个事物的极端状况：\n\n（强副助词，格助词让位）あいつは自分の名前さえ書けない。（那家伙连自己的名字都写不出来）\n（强副助词，格助词保留）今は科学が進歩して、月へさえも行き来できるようになったんだ。（现在科学发达，人类就连月球都能来往了）\n（强副助词，格助词保留）飲み会が嫌いなので、上司に誘われても行こうとさえしなかった。（不喜欢酒会，就算被上司邀请也不想去）\n（强副助词，与接续助词连用）実はね、彼はその試験を受けてさえいなかったんだよ。（其实呢，他连那场考试都没有参加）\n\n比较有趣的是，有些本身应当为主格成分的体言，理论上直接使用「さえ」引导即可（主格助词让位），有时却会使用「でさえ」。据说这种用法是受到了「でも」的影响，事实上这种「でさえ」直接替换为「でも」一般也不会有问题：\n\n日本人でさえ敬語の使い方を間違えるそうです。（据说就连日本人都会搞错敬语的用法）\n\n该助词有时会与「～なら、～たら、～ば」等假定用法连用，表“只要”的语义。该助词作为插入成分的时候，多使用这种句式：\n\nわたしは本さえあれば、ほかには何もいらない。（只要有书，其他什么都不需要了）\n彼が来さえすれば、すべてがわかる。（只要他来了，一切都会明白的）\n汚くさえなければ、どちらでもいい。（只要不脏，哪个都可以）\n体が丈夫でさえあればよい。（只要身体健康就好）\n\n当然，作插入成分的时候也可以不后接假定用法：\n\nそんなことをしたら、笑われるだけでなく、人に嫌われさえするよ。（要是做了那种事情，不仅会被人笑话，甚至还会被人讨厌）\n\n限定语义「しか」\n「しか」也是系助词，所以常常接续在格助词后，如「（が、を）しか、でしか、にしか」，并且几乎不具有准体助词用法。其作为系助词，也具有作为插入成分的用法。然而，其与接续助词的连用是不常见的。在部分情况下其也可以接续在副词成分之后。\n需要注意的是，该助词必须与否定助动词「ない、ん」联合使用（有时可以与「まい」连用），用于表示“仅有”的含义：\n\n（强副助词，格助词让位）いやまだまだですよ、もう精一杯でも六点しか取れなかった。（不，还差得远呢，我就算拼尽全力也只拿了六分）\n（强副助词，格助词保留）この味はこの店にしか作れません。（这种味道只有这家店才能做出来）\n（强副助词，格助词让位）今ならそうするしかあるまい。（现在只能这么做了）\n\n可以注意到上述句子中「しか」和「ない」之间有其他词语存在。而在部分情况下，可以直接将之间没有其他词语的「しか」和「ない」绑定为固定搭配「～しかない」，表达“仅有”：\n\n本月の休みが三日しかない。（这个月只有三天假）\nこれは任務ですから、しっかりやるしかありません。（这是任务，我们也只能认真做了）\n\n该助词作插入成分的用法几乎仅限于插入「である」构成「でしかない」，表达“只不过是”：\n\n彼は社長ですが、両親の目から見ると子どもでしかありません。（他虽然是社长，但是在父母眼里也只不过是个孩子而已）\n\n事实上，「～しか～ない」的用法中还有一条准则，即「しか」和「ない」不能同时接在动词之后：\n\n（○）日本にしか行ったことがない。（只去过日本）\n（○）俺は死神だから、俺の持つものは俺の意思でしか人間が触れない。（我是死神，我所持有的东西没有我的授意人类是无法触碰的）\n（○）単語は自分で努力して覚えるしか方法がない。（单词只能靠自己努力记住）\n（○）私達は設計されたようにしか生きる事が許されない。（我们只能按照设计好的方式生活）\n（×）もし梨の味を知りたければ、試食するしか分からない。（要想知道梨的味道，只能去尝它）\n\n\n强调语义「すら」\n「すら」和「さえ」几乎具有一样的用法和含义，除了以下的区别：\n\n「すら」更为书面语，「さえ」更为口语\n「すら」多表负面情绪，「さえ」则正面负面均可\n「すら」不能构成「すらも」，「さえ」可以构成「さえも」\n「すら」较少与假定连用\n\n观察例句：\n\n（强副助词，格助词让位）亀ですらあんたより速いんだよ。（就连乌龟都比你快）\n（强副助词，格助词让位）今まであいつの味方をする人はもう一人すらありません。（到现在支持他的连一个人都没有）\n（强副助词，与接续助词连用）セカイはまだ始まってすらいない。（世界甚至还没有开始转动）\n（强副助词，插入成分）電車の中で女性が酔っ払いに絡まれていても、乗客たちは止めに入りすらしなかった。（即使在电车上有女性被醉鬼纠缠，乘客们也没有一个人去阻止）\n\n限定语义「だけ」\n该助词为弱副助词，几乎仅有准体助词用法。其作为弱副助词，虽应当位于格助词之前，然而由于该助词的广泛使用程度，其使用在格助词之后依然是不少见的。\n\n（○）他人に話を聞かれないよう、彼だけには電話番号を教えてある。（为了不让别人听到我们聊了什么，我只告诉了他电话号码）\n（○）他人に話を聞かれないよう、彼にだけは電話番号を教えてある。（为了不让别人听到我们聊了什么，我只告诉了他电话号码）\n\n不过其出现在格助词之前依然是更多见的用法，且存在一些情况，该助词基本只能出现在格助词之前：\n\n（○）僕たちは二人だけになった。（我们仅剩两人了）\n（×）僕たちは二人にだけなった。（我们仅剩两人了）\n\n上述例子的解释之一为，「～になる」的连用已经近乎固定，其间难以容忍插入成分。\n该助词的最基本用法是表示“仅有”：\n\nこの試験は五人だけ合格した。（这次考试只有五个人通过了）\n見てるだけなんだから。（我就看看而已）\n\n这里第一个例子实际上是格助词缺位的，\n","categories":["【学习笔记】日语"]},{"title":"《铃芽户缔》的不恰当译名与日译中问题","url":"/2022/11/04/jc-translation/","content":"今天偶然刷到新海诚的动画电影新作《すずめの戸締り》的中文译名从《铃芽户缔》换为了《铃芽小姐来锁门》的新闻，于是产生了一些奇妙的感叹，慨叹翻译真的是一门艺术。这里也就随便写写，反正也就是\nHolder 自己的一些想法罢了，没有严谨性，不具有参考价值。\n\n为什么直接搬汉字是不对的\n中日双语互译有一个特点，就是这两门语言至今都在使用汉字，而汉字是具有超脱于语言的表意性的，这也就是甚嚣尘上的“日语不要学，汉字随便拼一拼就读懂了”这个观点的一个基本点。\n事实上这类观点不能直接断定地说不对，因为如果一个日语句子里音读词居多，日本本土的虚词居少的话，实际上只要在认读汉字的基础上了解日语是\nSOV 主宾谓语序就可以很方便地读出来句子：\n\n私は東京大学の大学生です。\n私は毎日七時に朝ご飯を食べます。\n\n虽然具体用词上和中文有些许差异，比如第一人称这里用的汉字是“私”，“早饭”在日语中的汉字是“朝饭”，但是大部分认识汉字的人都能基本准确地了解第一句表达“我是东京大学的大学生”，第二句表达“我每天七点吃早饭”。\n要是再知道点现代日语的高频虚词，比如否定往往以「ない、ません、ず」出现，存在往往以「ある、いる、あります、います」出现，过去往往以「た」出现，断定往往以「です、だ」出现，假定往往以「ば、なら、たら」出现，基本上就已经能够在甚至不会读五十音的条件下阅读很多的日语句子了。\n但是，这套方法的缺陷是相当明显的。\n首先，现代日语的汉字使用频率实际上是在下降的。除了由于同音异义词过多导致不得不使用汉字的音读词，事实上大部分不太常用的训读慢慢都在消退。比如说，现在很少有人将「かける」写成「駆ける、掛ける」之类的了，在诸如「夜にかける」这样结构的句子里，显然就直接导致动词无法认读，进而完全无法理解整体含义。甚至，类似「私、君、彼」等词语现今写为假名的频率可能已经高于或者逐步高于写为汉字。\n再者，日语汉字的含义与中文汉字的含义，可以有着很大的差别。相信大家早已在很多地方见过类似日语的“手纸”实际上是“信件”，日语的“爱人”实际上是“小三”之类的科普文章。事实上，还有很多类似「直す、戸惑う、見舞う、手配」等各种在中文中找不到对应表达的包含有汉字的日语词，即使可以尝试通过上下文断定，但是这类词语的认读依然是相当困难的。\n而这个原因也恰恰是我认为直接搬汉字的翻译方式是完全不正确的理由，日语中的汉字经过多年的发展，早已和当代中文中的汉字有了很大的偏差。纵使有相当部分的词语中的汉字和中文近似，我们也不能忽视掉另外一部分和中文并不贴切的汉字。这里「戸締り」就是一个重要的例子，「戸」是日语中表达“门”的汉字，「締まり」是动词「締まる」的名词形式，其动词形式表达“关闭”。而「戸締り」完完全全就是按照日语\nVO\n顺序构造出来的一个复合词，和中文使用汉字的思路完全不一致。直接的搬运明显造成了表意不明，因为“户缔”在中文中并不存在，对于完全不了解日语的人，这是一个不亚于“鲁棒性”一样的迷惑翻译。\n与《你的名字》等的比较\n或许有人反驳，《你的名字》的原名是《君の名は》，其称为《君名》是完全可以接受的。但我依然认为，《你的名字》这个翻译的使用频率高于《君名》这个翻译。而且《君名》能被接受的核心原因，我认为是这个名称的的构词语序对于中文日文都是统一的。这是一个偏正短语，在中文和日文中都是定语置于名词之前，再加上「の」这个假名作为格助词表示“的”的含义早就广为人知，这才让《君名》这个实际上很偷懒的译名活了下来。\n再说说新海诚别的作品，比如《言の葉の庭》《秒速 5\nセンチメートル》《天気の子》，这些作品的译名分别为《言叶之庭》《秒速五厘米》《天气之子》。这些标题的结构都较为简单，而且几乎没有使用到和中文意义不一致的汉字，所以翻译相当简单。或许这一次的《铃芽户缔》也就出于这种翻译惯性才成为了最初的官方译名。\n日式风格？\n上面提到了《言叶之庭》，其中有一个词语“言叶”，这个词语显然并不是中文的词汇。然而这个词语由于已引入中国很长时间，在这一类日系作品的受众人群中，其表达“话语”这一含义已经广为人知。这实际上和「の」表示“的”也广为人知有类似之处。而「の」作为“的”广为人知的程度更是相当恐怖，甚至在输入法内输入\nde，也有几率跳出「の」这个选项。另外，部分仿日式商品的销售词中会故意将“的”替换为「の」，完全忽视了「の」仅能够接在名词之后，导致部分动词词组修饰名词的时候也用「の」，让了解日语的人一眼看出来这是假日本货。\n然而这类严格意义上错误的用法依然得到了广泛承认，这又是为何。这类和中文并不一致但是又不至于和中文用法相差过远的日文事实上营造了一种日式的风格。包括日本人的姓名也有着类似的作用。\n与之前流行过的欧美翻译腔类似，事实上日文文本的翻译也为中文带来了日式表达。这类表达并不是源于中文本土环境，但是又能够让中文使用者理解，在这种微妙的违和感中携带的，就是所谓的语言风格。\n观察下述两句话（引用自知乎专栏 https://zhuanlan.zhihu.com/p/134031271）：\n\n我敢打赌，他做的菜就像地狱一样糟糕。\n突然被告白什么的，怎么做才好。\n\n前者明显携带一种欧美的语言风格，而后者则携带有一种日式的语言风格。\n营造这样的一种语言风格是有利于传播和营销的，现在大部分的人还是比较买日式这笔账的。然而，我也说过，营造这种氛围至少要让中文使用者理解，翻译的底线至少要做到让完全不懂对方语言的人能够看懂含义。回到《铃芽户缔》的问题上，如果你是完全不懂日语的中文使用者，你可能能够通过“铃芽”这个日式名字来感受这是一个日式的电影，然而如果我只给你看“户缔”，你又会如何理解呢？这种舍本逐末的行为显然是不可行的。\n再说现在新的译名《铃芽小姐来锁门》，这次做到了中文正确，但是是否过于僵硬了呢？这个译名过分强调了动作，“来”和“锁”的动作性过于强烈，让整个译名的重心偏向了动作。再加上莫名其妙加上了个现在比较微妙的“小姐”这个称谓，是否和铃芽作为少女的身份或多或少有点不匹配呢？“小姐”容易让人对主人公铃芽产生不正确的第一印象。\n我斗胆试译为《铃芽关上了门》，弱化一部分动作的属性，避免使用“小姐”这类可能引起误解的称谓，留下一些空白，可能稍微好一些。\n口语与书面\n其实在打算把这篇文章结束的时候，我突然想起《命に嫌われている》这首歌的歌名也经常简称为《命嫌》。\n不过这并不能构成对《铃芽户缔》这个译名的辩护，因为《命嫌》永远不是正式译名，仅仅是一个口语上的简称，其正式的译名依然是《被生命所嫌弃》。\n口语的随意性永远不能影响书面语的正式性，虽然我理解部分文艺作品的翻译为了贴合口语以方便受众，但是这类完全不能表达原意的翻译成为正式翻译是我不能接受的。\n一些其他的话\n事实上随着信息交换的速度加快，认真翻译一个外来概念已经越来越困难，这在网络热词上更为明显。比如说日文中的接尾词「がち」，用于表达“往往”的含义。这个词在日本\nVtuber 圈内火了一圈之后传入中国，在中文互联网上则直接写为\ngachi，直接音译，甚至连汉字都没用。当然这也有身份认可的作用在里面，理解\ngachi\n含义的人，显然比知道这个词应该翻译为“往往”的人更容易被这个团体接受。\n毕竟网络热词这种东西转瞬即逝，你认真为某个热词设计了很贴切的翻译，随后这个词早就没有人用了。\n或许这也是不愿意好好翻译电影名称的原因吧，虽然现在能引入国内院线的外国电影也是越来越少就是了。\n","categories":["【杂谈】日语"]},{"title":"JR 东日本首都圈内运营系统与线路简述","url":"/2025/08/09/jr-tokyo/","content":"也是去了好几次日本了，对东京的电车从一点不明白，到自以为明白，现在又开始觉得还是没搞清楚。究其原因，一方面是自己毕竟是外国人，另一方面也是\nJR\n东日本实际上在混淆使用多组概念。虽然，从乘客角度，这些混淆一定程度上减轻了理解压力，但是对于一个想要搞明白整个系统的人来讲，就要付出更多的时间去理解。\n总之，我花了两天简单梳理了一下 JR\n东日本首都圈的线路以及系统，又是逃避工作的一天。\n\n基础概念\n土建系统与运营系统\n在日本乘车最主要的是，区分土建系统和运营系统。其实从公交车的角度就可以理解这两个概念，例如（纯属虚构）某一路\n901\n路公交车，从起点历经了东湖路、海南公路、山北公路、淮南路到达终点，这里的东湖路这些路，就是土建系统内的各条土建线路，是工程上的概念，而\n901\n路就是一个运营系统，是方便乘客理解的概念。显然，一条土建线路上可以运行多个运营系统，一个运营系统也可以使用多个土建线路。\n本文绘制了首都圈范围内与 JR\n相关的土建系统，并且在列举运营系统时，会指明其各个区间利用了哪些具体土建线路。\n运营系统之间的联动\n多个系统之间的联动常见有下述几种：\n\n换乘指的是两个系统使用了同一个车站，因而乘客可以通过下车后再上车，连续使用两个系统\n\n如果两个系统中的两个站相距在步行距离内或者修建有合适的步行通道，也可以认为在此处可以换乘\n\n直通指的是列车可以在两个系统之间直接穿行，不需要乘客上下车\n共线指的是两个系统在某个区间内使用相同的轨道和车站\n\n只要两个系统内存在直通，即使并不是所有列车都会穿越分界站，导致乘客可能也需要在分界站上下车以切换运营系统，一般也不会将在分界站处两个系统的联动的方式称为换乘。也就是说，换乘一般指代因为硬性原因（不存在联络线等）导致列车无法跨行于两个系统间的情况。\nJR\n东日本首都圈的运营系统概况\nJR\n东日本在首都圈内在尽可能将可直通运营的系统整合成更大的系统，并且赋予统一的标志色和名称来简化乘客负担。简单来说，接下来介绍的\nJR\n东日本首都圈运营系统很少存在系统间直通，大部分都是系统内的各个子系统间存在的直通。\n以埼京线系统为例子，其本体是整合了多条土建线路的，自大宫到大崎的运营系统。但是实际上该线上的列车也会直通到川越线，甚至其他会社的相铁线和临海线。于是\nJR\n东日本直接将这些直通全部纳入埼京线系统内，赋予统一的标志色和名称，这样这些直通就成为了埼京线运营系统内子系统的直通，而非系统间直通。\n这些整合过的运营系统中，部分较为重要的系统除了具有“埼京线”“京滨东北线”等名称外，往往还被赋予了“JA”“JK”之类的系统缩写名。这些缩写名往往会被用来给车站编号，例如山手线系统缩写为“JY”，在其上的东京站作为名义的起点站则编号为“JY01”。\n这些拥有系统缩写名的系统内部，虽然标志色和名称得到了统一，但是系统的本体部分和与之直通的子系统之间会通过车站编号区别。一般而言，系统内部拥有编号的车站一般属于系统本体，而其余没有编号的则属于各个直通子系统。\n在 JR\n东日本自己公布的线路图上，标注的是整合过的运营系统，本文将基于此介绍。详见：\n\nhttps://www.jreast.co.jp/sc/info/map_a4ol.pdf\n\n列车等级\n在确定了运营系统后，其上开行的列车服务又会根据停站情况分为多个等级。一般而言有：\n\n普通（各站停车、缓行）：行驶方向上每一站均停车\n快速：行驶方向上部分车站不停\n特别快速：行驶方向上部分车站不停，停站数量比快速少\n特急：只停靠行驶方向上部分重要车站，一般需要额外支付特急票价\n\n本文行文格式\n本文介绍运营系统的时候，按照首先介绍系统本体，然后介绍其他子系统或者延长线、支线的顺序进行。\n位于 JR\n管内的部分，都会以表格形式列举车站名，可能会省略部分小站。列举车站名时，会在表格内标注各个区间实际上行驶的土建线路。对于每一个车站，会标注在该站与当前系统联动的\nJR\n管内（不含新干线）运营系统，包括换乘（乗り換え，表内不写出）、系统内直通（内部直通）、系统间直通（直通）、共线（同一路線）。如果所联动的是有系统缩写名的系统的本体部分，那么将直接标注所联动系统上该车站的编号。\n不属于 JR 管内的部分，则不使用表格形式，采用简述的模式介绍。\nJR\n与其他会社的直通与共线一般会被纳入子系统或者作为独立的运营系统介绍。而\nJR 与其他会社以及新干线的换乘，则在本文最后按照车站列举。\n简单运营系统\n⑲JA（埼京線）\n本線\n\n\n\n\n\n\n\n\n駅名\n正式線路\n接続系統\n\n\n\n\n大崎（JA08）\n山手線（貨物線）\n山手線（JY24）（内部直通）埼京線（りんかい線直通）埼京線（相鉄線直通）（同一路線）湘南新宿ライン（JS17）\n\n\n恵比寿（JA09）\n｜\n山手線（JY21）（同一路線）湘南新宿ライン（JS18）\n\n\n渋谷（JA10）\n｜\n山手線（JY20）（同一路線）湘南新宿ライン（JS19）\n\n\n新宿（JA11）\n｜\n中央・総武緩行線（JB10）中央快速線（JC05）山手線（JY17）（同一路線）湘南新宿ライン（JS20）\n\n\n池袋（JA12）\n山手線（貨物線）赤羽線\n湘南新宿ライン（JS21）山手線（JY13）\n\n\n板橋（JA13）\n｜\n―\n\n\n十条（JA14）\n｜\n―\n\n\n赤羽（JA15）\n赤羽線東北本線（支線）\n京浜東北線（JK38）上野東京ライン（JU04）湘南新宿ライン（JS22）\n\n\n｜\n｜\n―\n\n\n武蔵浦和（JA21）\n｜\n武蔵野線（JM26）\n\n\n｜\n｜\n―\n\n\n大宮（JA21）\n東北本線（支線）\n京浜東北線（JK47）上野東京ライン（JU07）湘南新宿ライン（JS24）（内部直通）埼京線（川越線直通）\n\n\n\n埼京線（川越線直通）\n\n\n\n\n\n\n\n\n駅名\n正式線路\n接続系統\n\n\n\n\n大宮\n川越線\n京浜東北線（JK47）上野東京ライン（JU07）湘南新宿ライン（JS24）（内部直通）埼京線（JA21）\n\n\n｜\n｜\n―\n\n\n川越\n川越線\n（直通）川越線\n\n\n\n埼京線（りんかい線直通）\n该直通进入的线路非 JR\n所属，不使用表格展示站点，直通区间范围为「大崎―新木場」。\n该直通区间使用临海线编号系统，即新木场站（R01）直到大崎站（R08），与埼京线\nJA 系统接续（大崎站编号为 JA08），因而 JA01-JA07 编号缺失。\n埼京線（相鉄線直通）\n由于埼京线主系统与相模铁路系统不直接连接，埼京线借用了湘南新宿线实现直通。埼京线系统与湘南新宿线系统自池袋开始均利用山手线（货物线）南下，其中埼京线主系统结束于大崎站，其相铁线直通部分则从大崎站开始借用湘南新宿线系统。到达武藏小杉站后，两个系统分离。埼京线系统借道湘南新宿线系统区间内，使用湘南新宿线编号系统。由于借用了其他\nJR 运营系统，所以有时也不会单独称为“埼京线（相铁线直通）”，而是“JR\n线（相铁线直通）”，并且虽然两个系统从池袋开始并行，但一般认为起点是新宿。\n\n\n\n\n\n\n\n\n駅名\n正式線路\n接続系統\n\n\n\n\n大崎\n山手線（貨物線大崎支線）\n山手線（JY24）（内部直通）埼京線（JA08）（同一路線）湘南新宿ライン（JS17）\n\n\n（蛇窪信号場）\n山手線（貨物線大崎支線）東海道本線（品鶴線支線）\n―\n\n\n西大井\n｜\n（同一路線）横須賀・総武快速線（JO16）湘南新宿ライン（JS16）\n\n\n武蔵小杉\n東海道本線（品鶴線支線）東海道本線（品鶴線支線貨物線）\n南武線（JN17）（同一路線）横須賀・総武快速線（JO15）湘南新宿ライン（JS15）\n\n\n（新鶴見信号場）\n｜\n―\n\n\n（鶴見）\n東海道本線（品鶴線支線貨物線）東海道本線（貨物線）\n―\n\n\n羽沢横浜国大\n東海道本線（貨物線）\n―\n\n\n\n从羽泽横滨国大站开始进入相模铁道运营系统，非 JR\n所属，不使用表格展示站点，直通区间范围为「羽沢横浜国大―海老名」。\n该直通区间使用相模铁道编号系统，这里不深入介绍。\n⑫JB（中央・総武緩行線）\n本線\n\n\n\n\n\n\n\n\n駅名\n正式線路\n接続系統\n\n\n\n\n三鷹（JB01）\n中央本線\n中央快速線（JC12）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n吉祥寺（JB02）\n｜\n中央快速線（JC11）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n西荻窪（JB03）\n｜\n中央快速線（JC10）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n荻窪（JB04）\n｜\n中央快速線（JC09）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n阿佐ヶ谷（JB05）\n｜\n中央快速線（JC08）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n高円寺（JB06）\n｜\n中央快速線（JC07）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n中野（JB07）\n｜\n中央快速線（JC06）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n｜\n｜\n―\n\n\n新宿（JB10）\n中央本線中央本線・山手線並走区間\n埼京線（JA11）中央快速線（JC05）湘南新宿ライン（JS20）山手線（JY17）\n\n\n代々木（JB11）\n中央本線・山手線並走区間中央本線\n山手線（JY18）\n\n\n｜\n｜\n―\n\n\n四ツ谷（JB14）\n｜\n中央快速線（JC04）\n\n\n｜\n｜\n―\n\n\n御茶ノ水（JB18）\n中央本線総武本線（支線）\n中央快速線（JC03）\n\n\n秋葉原（JB19）\n｜\n京浜東北線（JK28）山手線（JY03）\n\n\n｜\n｜\n―\n\n\n錦糸町（JB22）\n総武本線（支線）総武本線\n横須賀・総武快速線（JO22）\n\n\n｜\n｜\n―\n\n\n新小岩（JB25）\n｜\n横須賀・総武快速線（JO23）\n\n\n｜\n｜\n―\n\n\n市川（JB27）\n｜\n横須賀・総武快速線（JO24）\n\n\n｜\n｜\n―\n\n\n西船橋（JB30）\n｜\n武蔵野線（JM10）武蔵野線（京葉支線直通）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n船橋（JB31）\n｜\n横須賀・総武快速線（JO25）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n東船橋（JB32）\n｜\n（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n津田沼（JB33）\n｜\n横須賀・総武快速線（JO26）（同一路線）地下鉄東西線（中央・総武線直通）\n\n\n｜\n｜\n―\n\n\n稲毛（JB37）\n｜\n横須賀・総武快速線（JO27）\n\n\n｜\n｜\n―\n\n\n千葉（JB39）\n総武本線\n横須賀・総武快速線（JO28）内房線外房線成田線総武本線\n\n\n\n⑬地下鉄東西線（中央・総武線直通）\n本系统完全依附于 JB 中央总武缓行线系统，详见上文介绍。\n⑪JC（中央快速線）\n本線\n\n\n\n\n\n\n\n\n駅名\n正式線路\n接続系統\n\n\n\n\n東京（JC01）\n中央本線・東北本線並走区間\n京葉線（JE01）上野東京ライン（常磐快速線）延伸線京浜東北線（JK26）武蔵野線（京葉支線直通）横須賀・総武快速線（JO19）上野東京ライン（JT01・JU01）山手線（JY01）\n\n\n神田（JC02）\n中央本線・東北本線並走区間中央本線\n京浜東北線（JK27）山手線（JY02）\n\n\n御茶ノ水（JC03）\n｜\n中央・総武緩行線（JB18）\n\n\n四ツ谷（JC04）\n｜\n中央・総武緩行線（JB14）\n\n\n（代々木）\n中央本線中央本線・山手線並走区間\n―\n\n\n新宿（JC05）\n中央本線・山手線並走区間中央本線\n埼京線（JA11）中央・総武緩行線（JB10）湘南新宿ライン（JS20）山手線（JY17）\n\n\n中野（JC06）\n｜\n中央・総武緩行線（JB07）\n\n\n高円寺（JC07）\n｜\n中央・総武緩行線（JB06）\n\n\n阿佐ヶ谷（JC08）\n｜\n中央・総武緩行線（JB05）\n\n\n荻窪（JC09）\n｜\n中央・総武緩行線（JB04）\n\n\n西荻窪（JC10）\n｜\n中央・総武緩行線（JB03）\n\n\n吉祥寺（JC11）\n｜\n中央・総武緩行線（JB02）\n\n\n三鷹（JC12）\n｜\n中央・総武緩行線（JB01）\n\n\n｜\n｜\n―\n\n\n西国分寺（JC17）\n｜\n武蔵野線（JM33）\n\n\n｜\n｜\n―\n\n\n立川（JC19）\n｜\n―\n\n\n\nJR\n东日本主要站点新干线及会社间换乘\n优先列举山手线系统上各站，之后按照上文出现顺序列举。\n東京（JC01・JE01・JK26・JO19・JT01・JU01・JY01・上野東京ライン（常磐快速線）延伸線・武蔵野線（京葉支線直通））\n\n新幹線\n\n東北新幹線・山形新幹線・秋田新幹線・北海道新幹線・上越新幹線・北陸新幹線\n東海道新幹線\n\n東京地下鉄\n\n丸ノ内線（M17）\n\n\n神田（JC02・JK27・JY02）\n\n東京地下鉄\n\n銀座線（G13）\n\n\n秋葉原（JB19・JK28・JY03）\n\n東京地下鉄\n\n日比谷線（H16）\n\n首都圏新都市鉄道\n\nつくばエクスプレス（TX01）\n\n→ 岩本町\n\n都営地下鉄\n\n新宿線（S08）\n\n\n\n池袋（JA12・JS21・JY13）\n\n東武鉄道\n\n東上線（TJ01）\n\n西武鉄道\n\n池袋線（SI01）\n\n東京地下鉄\n\n丸ノ内線（M25）\n有楽町線（Y09）\n副都心線（F09）\n\n\n新宿（JA11・JB10・JC05・JS20・JY17）\n\n京王電鉄\n\n京王線・京王新線（KO01）\n\n小田急電鉄\n\n小田原線（OH01）\n\n東京地下鉄\n\n丸ノ内線（M08）\n\n都営地下鉄\n\n新宿線（S01）\n大江戸線（E27）\n\n→ 新宿西口駅\n\n都営地下鉄\n\n大江戸線（E01）\n\n\n→ 西武新宿駅\n\n西武鉄道\n\n新宿線（SS01）\n\n\n\n代々木（JB11・JY18）\n\n都営地下鉄\n\n大江戸線（E26）\n\n\n渋谷（JA10・JS19・JY20）\n\n京急電鉄\n\n東横線（TY01）\n田園都市線（DT01）\n\n京王電鉄\n\n井の頭線（IN01）\n\n東京地下鉄\n\n銀座線（G01）\n半蔵門線（Z01）\n副都心線（F16）\n\n\n恵比寿（JA09・JS18・JY21）\n\n東京地下鉄\n\n日比谷線（H02）\n\n\n大崎（JA08・JS17・JY24・埼京線（りんかい線直通）・埼京線（相鉄線直通））\n\n東京臨海高速鉄道\n\nりんかい線（R08）\n\n\n板橋（JA13）\n\n→ 新板橋駅\n\n都営地下鉄\n\n三田線（I17）\n\n\n\n大宮（JA21・JK47・JS24・JU07・埼京線（川越線直通））\n\n新幹線\n\n東北新幹線・山形新幹線・秋田新幹線・北海道新幹線・上越新幹線・北陸新幹線\n\n東武鉄道\n\n野田線（TD01）\n\n埼玉新都市交通\n\n伊奈線（NS01）\n\n\n川越（埼京線（川越線直通）・川越線）\n\n東武鉄道\n\n東上線（TJ21）\n\n→ 本川越駅\n\n西武鉄道\n\n新宿線（SS29）\n\n\n\n武蔵小杉（JN17・JO15・JS15）\n\n東急電鉄\n\n東横線（TY11）\n目黒線（MG11）\n\n\n羽沢横浜国大（埼京線（相鉄線直通））\n\n相模鉄道\n\n相鉄線新横浜線（SO51）\n\n\n吉祥寺（JB02・JC11）\n\n京王電鉄\n\n井の頭線（IN17）\n\n\n荻窪（JB04・JC09）\n\n東京地下鉄\n\n丸ノ内線（M01）\n\n\n中野（JB07・JC06）\n\n東京地下鉄\n\n東西線（T01）\n\n\n東中野（JB08）\n\n都営地下鉄\n\n大江戸線（E31）\n\n\n四ツ谷（JB14・JC04）\n\n東京地下鉄\n\n丸ノ内線（M12）\n南北線（N08）\n\n\n市ヶ谷（JB15）\n\n東京地下鉄\n\n有楽町線（Y14）\n南北線（N09）\n\n都営地下鉄\n\n新宿線（S04）\n\n\n飯田橋（JB16）\n\n東京地下鉄\n\n有楽町線（Y13）\n南北線（N10）\n東西線（T06）\n\n都営地下鉄\n\n大江戸線（E06）\n\n\n水道橋（JB17）\n\n都営地下鉄\n\n三田線（I11）\n\n\n御茶ノ水（JB18・JC03）\n\n東京地下鉄\n\n丸ノ内線（M20）\n\n→ 新御茶ノ水\n\n東京地下鉄\n\n千代田線（C12）\n\n\n\n浅草橋（JB20）\n\n都営地下鉄\n\n浅草線（A16）\n\n\n両国（JB21）\n\n都営地下鉄\n\n大江戸線（E12）\n\n\n錦糸町（JB22・JO22）\n\n東京地下鉄\n\n半蔵門線（Z13）\n\n\n亀戸（JB23）\n\n東武鉄道\n\n亀戸線（TS44）\n\n\n本八幡（JB28）\n\n都営地下鉄\n\n新宿線（S21）\n\n\n西船橋（JB30・JM10・武蔵野線（京葉支線直通））\n\n東京地下鉄\n\n東西線（T23）\n\n京葉高速鉄道\n\n京葉高速線（TR01）\n\n\n船橋（JB31・JO25）\n\n東武鉄道\n\n野田線（TD35）\n\n→ 京成船橋\n\n京成電鉄\n\n京成本線（KS22）\n\n\n\n津田沼（JB33・JO26）\n\n→ 新津田沼\n\n京成電鉄\n\n松戸線（KS66）\n\n\n\n幕張本郷（JB34）\n\n→ 京成幕張本郷\n\n京成電鉄\n\n千葉線（KS52）\n\n\n\n千葉（JB39・JO28・内房線・外房線・成田線・総武本線）\n\n千葉都市モノレール\n\n1号線（CM03）\n2号線（CM03）\n\n→ 京成千葉\n\n京成電鉄\n\n千葉線（KS59）\n\n\n\n武蔵境（JC13）\n\n西武鉄道\n\n多摩川線（SW01）\n\n\n国分寺（JC16）\n\n西武鉄道\n\n多摩湖線（ST01）\n国分寺線（SK01）\n\n\n","categories":["【杂谈】铁路"]},{"title":"一些散落的古日语语法——以ク语法为例","url":"/2022/12/05/ku-grammar/","content":"发现这个东西实际上是在一句歌词，即「願わくば、忘れてと」。这句歌词里面显然出现了一个相当奇怪的构词法，即「願わくば」。之后我又想起了一些和这个类似的常用词，如「恐らく、いわく」。\n随后查找了一下词典，发现是一种已经散失很久的古日语语法——ク语法。\n\n我们一般而言的古日语，也就是日本中学中教学的古日语，是中古日语。而在中古日语之前的上古日语则是一种更为古老的日语，ク语法是上古日语中的语法。\nク语法就形式上而言（下述使用中古日语名词和历史假名遣）：\n\n四段动词未然形接续「く」。如「いふ」变为「いはく」\n其余动词终止形接续「らく」。如「す」变为「すらく」\n形容词词尾「し」变为「けく」。如「やすし」变为「やすけく」\n助动词「ず」变为「なく」\n\n这个变形的逻辑解释为「ず」的原始形式为「にす」，这里「に」是助动词「ぬ」的连用形而「す」是サ变动词，从而ク语法自然是「ぬ」的未然形「な」接续「く」\n\n助动词「き」变为「しく」。如「申しき」变为「申ししく」\n\n其起源似乎是用言连用形接续名词性成分「あく」，但具体我也无法深究。\n这个语法几乎可以和现代语的连体形接续「こと」等同，但是ク语法生命力已经几乎完全丧失，仅留下部分习惯用法，而且基本是副词用法：\n\n曰く ＝ 言うこと\n恐らく ＝ 恐ること\n思惑 ＝ 思うこと\n願わくば ＝ 願うことは\n望むらくは ＝ 望むことは\n@ 須 すべからく ＝ すべきこと\n\n可以注意到上述ク语法的例子也并不是完全符合之前提到的规则，这是因为ク语法在中古日语时期就已经很少使用，造成很多人错误使用该语法。最典型的就是四段动词也开始直接使用终止形接续「らく」，这就说明现代日语中的副词「望むらくは」实际上应当是「望まくは」。\n此外，助词「は」的浊化也是一种错误用法，「願わくば」就是这个原理。\n再者，「思う」的ク语法「思わく」甚至具有了假借字「思惑」。\n有一种观点认为ク语法是部分词语的来源。比如说现代副词「暫く」就是动词「縛る」的ク语法，表示时间有限，而后衍生出表示“暂时”的用法。\n\nク语法的缘由可以认为是用言活用接续「@ 如 しく」后「し」脱落，而这种观点也给部分动词和形容词的对应带来了支持：\n\n痛む ＋ しく ＝ 痛ましく → 痛まし → 痛ましい\n潤ふ ＋ しく ＝ 潤はしく → @ 麗 うるはし →\n@ 麗 うるわしい\n\n而由于ク语法本身用于名词化，所以中古形容词「痛まし」的名词形式就是「痛ましく」，而这正是其连用形。这也给为何现代形容词「近い・遠い・多い」的名词化是其连用形「近く・遠く・多く」带来了解释，因为这些名词化的形式可以认为是ク语法的一种外拓。\n\n总之这已经完全就是一个早就没有任何生命，没有拓展能力的语法了，但这个语法遗留下来的各种约定俗成用法却还在困扰着我这种摸索日语的学习者。\n","categories":["【杂谈】日语"]},{"title":"又一年五月","url":"/2022/05/08/lab-quit/","content":"是不是每年的五月都会有些不太顺遂的事情发生。\n\n昨晚通宵写了一些密码学的作业，然后就睡昏过去，一路睡到了下午四点，醒来之后导师发了微信消息说想聊聊。\n虽然有一点不太妙的预感，但在做完核酸之后还是接了导师的电话，导师自然还是弯弯绕绕地回忆了一下我在实验室的几个月，然后也就直白地说出了“我觉得你还是不太适合我们实验室”。\n其实还是有所预料的，毕竟自己因为期中课内一堆事情咕咕咕了科协咕咕咕了实验室工作，而这个项目五月底是要投的，所以交给我的任务也是无限期拖延，即使只是一个\nToy\nexample。然后半路有一位茶园的同年级同学也加入了这个项目，虽然没和他直接交流，但是可以看出他一个星期内将项目推进了很多。\n所以导师不把名额给我其实也是很正常的一件事情。\n但毕竟现在是大三下学期，都快进入正常的推免流程了，这个时候作出这样的定论，毕竟还是杀了我一个措手不及。\n一看时间，又是五月初。去年五月初的狼狈已经不堪回首，前年五月的混沌早已淡出了记忆，今年的五月又是这样的变故。再这样下去，怕不是每年五月，即使我相当喜欢初夏，我也得下意识地恐惧这段时光。\n\n其实我一直是选择困难症的，选专业、选导师啥的。选图形学也是因为安老板推荐，加上\nGAMES101\n看着还不错，也就直接这么选了。但面临这样的境遇，也只能再去审视自己到底想去学什么。\n最后经过和若干位学长和同学交流了一番，我给季铮锋老师发出了邮件，想着去做量子计算之类的方向。\n\n其实打心底而言，我一直没有动现在实验室的项目也是有一定原因的。我想的是来实验室做一些渲染工作，然而我打开项目工程代码，我看到的是\nPytorch。虽然这也并不奇怪，毕竟有名言“Neural network rapes\neverything”。\n但我在想，导师把我安排来这个项目也是有原因的，毕竟我的简历上写着刘知远实验室的经历。但他可能并不了解的是，我从那里退出并不是因为我抢不到他的名额，而是我不想做人工智能。\n所以在面对项目代码的时候，我还是有点不大愿意动手。\n\n选量子，我也不是那么清楚为什么，可能是因为没人去做量子，所以名额比较充裕，也有可能是一种病急乱投医。\n时而会感叹自己，从人工智能到图形学再到量子，完全是从热门到冷门，从就业面宽到没有就业面。\n\n我到底想做什么，其实要我说，我也说不明白，我能明确说明的，只有我绝对不想做什么。我厌恶人工智能，厌恶计算机网络，高性能和计算机系统也不太想触碰（不是反感，而是自己太菜了）。\n如果需要给出一点模糊的答案，那可能是做开发，软件开发。我严重怀疑我自己的代码强迫症，看到什么都想重构，喜欢写那些别人看来是炫技的代码。\n但是软件开发又何必读博士呢。\n我也不太清楚我为何想继续读书，可能只是不想那么早就去接触职场。但毕竟这是逃避。\n\n谁知道呢，更何况我们的 Prof. Ji 也可以拒绝我，那我只能拿着 GPA\n到时候随机挑导师了。\n出国没考 GRE，就业没实习，推免还被导师因为摸鱼拒绝了。\n\n但其实我现在也说不上难过，说不上有什么负面情绪，我大概看了几篇量子方向的论文，重新拿起\nArtin，似乎又对可能的研究方向起了兴趣。\n然而我自己也是清楚的，我之前对图形学也有着这样的幻想，直到我打开了项目代码。\nHolder\n真没有什么持久的爱好，慨叹。于是又要担心这种三分钟的热度何时会被消磨殆尽。\n\n哎，为了学位读书好烦啊，我好想就顺着自己的爱好随便乱学东西，今天学日语明天看几何大后天说不定在敲\nHaskell。\n然而不为了学位读书没饭吃，没饭吃就没我这个人了。\n\n其实也算不上什么挫折，但是 Holder\n莫名其妙想了好多。有那种积沙成塔但是倾覆于一旦的感觉，就是这种一点点的失落感。\nWhatever，明天照样起床，去做核酸，写密码学作业，等 Prof. Ji\n的回信。\n其实现在内心还有一点点，说不定又可以名正言顺学 Artin 的兴奋。\n晚安哦。\n","categories":["【杂谈】碎碎念"]},{"title":"2022 年 11 月 17 日凌晨的一些","url":"/2022/11/17/look-back/","content":"先前因为一次偶然的通宵导致作息又紊乱了起来，周三不得不去射击课导致当晚没睡满五小时，只能下午补了五小时觉，结果就是今天的凌晨五六点，Holder\n还坐在 308 不知道干啥。\n\n本来来 308\n是打算边调之前炸炉子的丹，边写软工改进方案的，毕竟李山山老师都杀到跟前，这周日还不得不和他见一面，不能真的啥都写就去见他吧。\n然而也是偶然，闲的无聊在 QQ\n空间转发了一个“你最早注意到我是什么时候”这样的说说，底下一小部分都是 22\n届学弟学妹回的一些类似“高中榜样”之类的。然而这也正常，高中，三年一轮，19\n年目送我毕业的老师们，紧接着就会带 22 届的高一新生。如今 22\n届的小朋友们也已经高中毕业，开始在网络上活跃起来。\n但是想到我为何有这么多 22 届学弟学妹的好友，其实还得说 19\n年年底，大一刚过一学期的寒假回高中做的一次所谓宣讲。其实大家那个时候都明白，老师只不过是将行政楼五楼空出来，让我们这些才上大学的学长学姐随便讲点东西，给那些才上高中的学弟学妹们开开眼界、放放松而已。真要说“宣讲”了什么政策还是什么有价值的论点，大概是一点没有的。以那次宣讲为契机，和很多\n22 届学弟学妹成了 QQ\n好友，不过真要说有什么交流，我觉得是没有多少的。\n然而这种玩笑一般的宣讲，自从 20\n年新冠袭来后，也就变的索然无味，加上各个大学也给大一新生附加上了一些宣讲的要求，这种宣讲多半是变了些味道。\n所以我在愣神，我想不出来为什么我对高中有着这么奇妙的情感。我回想着我大学以来的屡次长假，寒暑假、五一、十一，除了过年、找\nSakana，多半可能还是和高中纠缠，甚至还回去带过一次胡闹的暑期学校。按照道理讲，高中那种非人类的作息安排，非人类的约束，似乎完全不可能构成所谓的美好回忆。\n之前我似乎也和别人提过，要让我重来一遍高中，我万分乐意，重来一遍本科，我大抵抗拒。\n我不可否认的是，我为我在我高中所取得的成绩万分自负，我依然可以大方地夸耀我在高中时期的成绩，在那些高中生的眼中，这大抵是近乎顶峰的存在。我不可否认，我回到高中，多半是带着夸耀自己，衣锦还乡的意味。\n然而为我披上锦衣的你清，那万众所向的所谓学府，为何我又不想再来一回。\n我记忆中我的大学，只有两年万分黑暗的时光和一年并不那么黑暗但也并不光明的时光。大一大二闷头卷绩点，我现在也难以想象我大一的下学期和大二的上学期是怎么做到在那么多课程中还能苟延残喘，甚至在大一下学期疫情在家的时候，还能给政治课记下详细的笔记，还能分出精力学那么多课外的东西。\n或许是疫情，我的大学似乎并没有给我留下任何一个闪光的回忆，我永远想不到一个能让我在深夜的时候把玩的一个瞬间。我的大学能让我感慨的，只不过是为了继续留在你清拼尽全力，平凡地完成一个个任务而已。我翻阅了我大学期间的\nQQ\n空间，除了时不时抱怨累了，发一些装逼说说，或者是一些打牌、唱歌、打游戏的东西外，似乎也没有什么很有意义的。我也翻阅了我的相册，除了\n2021\n年那个惊心动魄的夏季外，也只是绵延不断的打牌、唱歌、打游戏和涩图。\n然而似乎高中给我留下的还是很多的。我对高中最早的记忆，是 2016\n年参加实验班选拔，离我家最近的北门因为修路走不了，我顶着大太阳绕远路赶到班上，破旧的空调降不下教室的气温，室内一直都是干热炙烤出来的气味。那天天非常蓝，即使那时候的新闻天天在批判环保问题。\n还有什么，高一的每一个周末和一群人讨论数学竞赛然后再去北门口喝奶茶，寒假去苏州时用恶作剧戏弄同学，快要小高考时的大雪，2018\n年的传奇夏季，临近高考的时候经常一个人蜷缩的楼梯角落。\n其实，我时常想着，高中最主要的还是纯粹，舞台不过那么一亩三分地，每天的内容不过枯燥无味的反复，这其中的闪光似乎显得弥足珍贵。\n但说实话，最近还是经常感到一种剥离感的。我时常疑惑着这样的生活真的值得我用三年高中换来吗。我总是感觉现在的每一步行动，每一步决策似乎都有着目标，都伴随着责任，我举步维艰。我担心着是否应当做出这样的决定。\n最近几位朋友筹划着给我们的一位朋友庆生，然而就在筹办的时候，我又一次感受到了极度的不真实，我真心地为这位同学的生日感到快乐吗？还是包含着我怎么没有这样一群朋友为我这样庆祝生日的嫉妒？\n我又一次回忆起那天晚上在 C\n楼和众多计算机的零字班一字班朋友们闲聊，某人不经意飘了一句“这不是 Holder\n在前面探路么”。具体的语气、语境、上下文早就忘却了，但这个“探路者”的评价我倒是记住了。当时我一下子卡住，我总感觉这句话让我很不是滋味，倒不是说这位同学说错了什么，只是我又一次卡在了回忆里面。\n早在 2017 年，我的高中出了一位高分省状元录取姚班，2018\n年，出了一位省第二录取经管。18\n年那位学姐，与我的交集，或许仅仅是招生的时候聊过两句，以及在我军训的时候将一本\nC++ 入门书在紫荆门口交给了我便离去。我与 17\n年的那位学长呢？我甚至在本科就没和他见过面，虽然甚至我们就住在一栋楼。\n我在你清的探索，在你清计算机系的探索，现在这么想来，或许还真的是孤身一人。大一大二的时候一直在模仿着一位能力突出的同届同学的路径，大三之后决心不再模仿别人，结果是处处碰壁，今年的暑假还因此折磨不已。\n真的有谁给我引过路吗，我想很少，没有任何一位学长，告诫我应该干啥，除了安老板曾经叮嘱过一些。翻翻我的朋友圈，八字班的学长少之又少，零字班和一字班的学弟却是很多，我向这些学弟没少倒过我本科的苦水。\n然后我又看到了正在编写的软工课程改革草案，一瞬间感觉，这又是何苦呢，我大没有义务做这些。\n我不知道。\n我是否应该花更多的时间关注自己的能力提升，而不是在这里给别人做公益。\n我也不知道。\n但或许这也就是我对高中如此眷恋的缘故，高中的那些所谓的波澜，与大学相比，显得那么渺小，就连那个时候所谓的伤感、颓丧，反倒显得那么可爱。高中不过是高考的缓冲区，是一条不允许有任何路径偏移的单行道，在这种狭小的天地里，我完全不需要为未知迷茫，因为我的未来就是在高考中考出尽可能高的成绩。\n今天看到一篇分析克苏鲁神话恐惧感来源的文章，大体就是又强调了一遍恐惧来源于未知。\n高中的纯粹保护了这脆弱的平衡，在我们求知欲最旺盛的时段，构造了最精致的闭合结构，让我们误以为我们无所不知无所不晓，从而战无不胜。\n果然，我至今也不过是那些大人口中，未经风霜的温室花朵而已。今天凌晨的这些，也不过只是无用的叹息，为赋新词强说愁罢了。\n","categories":["【杂谈】碎碎念"]},{"title":"歌词记录集","url":"/2021/11/29/lyrics/","content":"之前大一的时候打算记录各种引起共鸣的歌词，于是就时不时在 QQ\n空间里面发一些。但是现在来看，一直都是零零散散的，并不方便，所以就做个总集，顺手就当回忆一些东西了。\n这里歌词全是日语的，然后翻译都是自己翻译的，可能会有错误。\n\n2019 年\n2019\n年刚刚走进大学，暂且还没有过多的忧虑，整天最大的抱怨只是微积分学不完。饱暖之后就擅长为赋新词强说愁，所以即使经常分享一些莫名其妙的歌词，实际上也只是近乎无病呻吟一般。\nいつの間にか雪は雨になりました。\n不知何时，飘雪已然幻化成雨。\n——「ハレハレヤ」 2019.10.10\n\n《朗朗晴天》这首歌是火出圈的 V\n曲，当时刚高考完纠结于志愿的时候，一个玩得比较好的同学推荐给我的。当时确实很纠结，很迷茫，这首歌还是带来了一些安慰的。\n其特征就是描写确实很漂亮，然后遣词造句也比较朴素干净，属于是很中意的类型。\n誰もみんな消えてく夢を見た，\n梦中大家悄然消逝，\n真夜中の部屋の広さと静寂が胸につっかえて，\n深夜空旷寂静的房间，胸口一阵微痛，\n上手に息ができなくなる。\n连呼吸也变得困难。\n——「炉心融解」 2019.10.16\n\n《炉心融解》是相当老的一首 V\n曲了，也是我喜欢上镜音双子的开端。铃的高音确实很惊艳，这首歌里面也体现得很彻底。\n所以，不要在 KTV 里尝试唱《炉心融解》，年轻人对自己嗓子好一点。\n春はうすもも，夏は群青，\n春日是浅桃花，夏日是茂密的树林，\n紅色に染まる秋，真っ白の冬，美しい山。\n鲜红渲染出的是秋日，纯白的是冬日美丽的群山。\n…\n山をこえて，どこどこへ。\n越过高山，又往何处去？\n——「遠く君へ」 2019.12.19\n\n《致远方的你》是略带悲情的一首歌，看这种词大致是能理解其内涵的相思之苦的。这首歌大约是高中随机到的，歌词几乎没有长句子，几乎都是各种意象的堆叠，偶尔会无端责怪两句对方为何远去。\n原唱是那种细细的女声，很能听出来愁苦的滋味。\n気づき始めた，生まれた理由を，きっと独りは寂しい。\n似乎察觉到了，你创造我的理由，一定是形单影只太寂寞了吧。\n宿るココロが溢れた。\n你赋予我的那颗“心”，已然满溢而出了啊。\n…\n一緒に過ごせた日々をアリガトウ。\n我们一起度过的时光，无比感谢。\n——「ココロ」 2019.12.25\n\n《心》大约是讲述的科学家与其所创造的一个机器人相恋的故事，但是毕竟人有寿限。这类有点类似探讨人生边界的奇妙歌曲，确实很能打动当时的我。\n不过现在也能打动我，因为镜音双子确实好听。\n2020 年\n大学第一学期浪过了，同时也通过各种渠道了解到大学依然还是看成绩的地方，所以渐渐开始沉闷下去了。另外就是，大一下学期面临着大量的琐事，班长也不想当了。年底的甲级团支部评比也让我心态近乎崩溃。\n随之变化的就是听歌的风格，这个时候的我，第一次接触到了 MARETU\n和熊，也开始听一些真正的意味不明的歌了。\n足りないものばっかりずっと増えてくの，\n不足之物，还在不断增加\n物々しく出しゃばる物思い。\n煞有介事，多管闲事的思虑。\n——「うみたがり」 2020.01.05\n\n《渴望诞生》是严格来说我听的第一首 MARETU\n的歌，歌词令人困惑不解，使用的词汇在日常交际中也少见。但是整体的偏低沉的曲风确实很吸引当时的我。\n三日月，水玉模様，\n初三的月亮，是水晶的模样，\n破れた障子，甘い飴の味。\n破碎的窗户纸，还有糖的甜味。\n——「抑圧錯乱ガール」 2020.02.01\n\n这首歌是《地狱型人间动物园》专辑里的一首，整首专辑的立意就是总是有很多人和当代社会无法贴合，最终无法融合的他们只能堕落。《抑压错乱女孩》大致就是讲述的在过大的精神压力下崩溃的女孩的故事，所以莫名其妙和她共鸣了。\n僕たちもかつてはいつか素晴らしい人に，\n我们也曾经和你一样，\n憧れていた，君の同じさ。\n憧憬着成为伟大的人。\nいつだって時間はそう，諦めを教えてくれる。\n但是时间一直是那样，教会我们放弃。\nNice people make the world boring.\n——「LOVE SONG」 2020.02.04\n\n《情歌》是比较冷门的一首歌，在各大平台上都没有很多播放，我也已经忘了什么时候听到的了。整首歌的\nMV\n也是偏意味不明和压抑的风格，但总之还是表现了正向积极的主题，确实也包含了一些我当时在尝试探求的答案吧。\n澄み渡る晴天を昇りゆく白い満月を濡らす。\n水汽浸润了那在澄澈的晴空中升起的一轮满月，\n空を映る池の水面に光る蛍みたいと過れば。\n映照在池面上的月光，如同萤火一般闪烁而过。\n…\nふと迸る胸は霧雨でこぼこが作った水溜り。\n忽然迸发而出的雾雨，在凹凸不平的地面上积攒起水洼。\nまるで夜の虹を見るようなふわりさんざめく夜光虫。\n仿佛就像黑夜中的彩虹一般灿烂着的萤火虫们啊。\n——「蛍」 2020.02.24\n\n《萤火虫》也不是热门的 V\n曲，这首歌是纯纯的写萤火虫的写景抒情曲子，也是当时我学习日语文学的重要歌曲。\n这类歌曲我并不擅长翻译，因为我一直感觉保留着原汁原味的歌词才显得有韵味，一旦我翻译了这些歌词，就难免融入我自己对景物、情感的想象。\nその言葉に挟まるカミシオリ。\n夹在那些话语中的纸笺。\n——「カゲロウ」 2020.03.12\n\n《蜉蝣》是东方曲的填词，这句词是整首歌的第一句的开头。这首歌是我大一下学期可以说最喜欢的一首歌，曲调很惊艳，演唱者也很有表现力。那种平静的氛围中，很适合让我暂且幻想一下远方和未来。\n不过现在确实不太听了，莫名感觉听多了之后有点厌倦了这种声线。或许只是当时听太多了吧。\n私って失敗作だってさって要らない子なんだって，\n我就是所谓的失败作吧，是不被人需要的孩子吧，\n何やったって頑張ったって駄目らしいや。\n无论做什么，无论多么努力，也不过虚幻一场吧。\n——「失敗作少女」 2020.04.07\n\n《失败作少女》是我听的第一首熊，这首歌其实我更喜欢 MARETU 的\nremix。为什么说喜欢这首歌呢，因为这首歌节奏把握得很好，有情绪爆发的副歌，也有沉寂的过渡段，尤其是那一段雨声，能让人想见在雨中漫无目的走着的，失魂落魄的少女。而在雨声过后，也有向神明祈求的最后一段情感爆发，歌曲最后的结局是开放的，也确实留下了很大的想象空间。\n这段词精妙之处就是大量的促音，有一种难以表达的跳跃感，总之就是唱起来特别带感。\n现在的熊，有点歌词莫名其妙，曲风固化，节奏也单调，确实没有一开始那么让人喜欢了。\n調子はどうですか？空は自由に飛べましたか？すごい魔法が出せましたか？\n近况如何？能自由地在天空中飞行了么？能使出厉害的魔法了么？\n全部夢の中限定品さ。\n这些不过是梦境中的限定品啊。\n…\nそれはあなたの望む世界じゃないから，\n这并非是你希望的世界啊，\nこんな続きを愛してほしい。\n但也不妨爱上这并不完美的梦的后续吧。\n——「ドリームレスドリームス」 2020.04.19\n\n《无梦之梦》，绝对称得上现在我最喜欢的 V\n曲。一样的，歌曲对抒情节奏有着绝对的把握，梦碎的那一瞬间的副歌段相当震撼，随后是\nmiku 声线无缝切入，安慰着主角的情绪，劝导主角接受梦想和现实的落差。\n可以看得出这段时间我的歌单几乎全都是梦想和现实的矛盾这样的主题，显得很颓丧和没有生机，也确实贴合那段时间的心情。\n神様もしも生まれ変わることができたら，\n神啊，如果我还能重生的话，\n愛される子になれますように。\n我也想成为被人怜爱的孩子啊。\n——「失敗作少女」 2020.04.25\n\n这就是之前说的，《失败作少女》最后的一段抒情段，那种对现有生活的悲观和失望，那种渴求他人善意的感觉。\n四月份，当时正准备结束一年的社工生涯，由于团支书当时几乎不做任何事情，整个班级的事务就全在我的肩上。再加上自己还在摸索如何过好大学生活，而且还没有正视自己的一些过往，确实是没有任何人可以倾诉，只能自己默默消化这种逆境。\n死に方教えてよ。\n教会我如何去死吧。\n——「ヒトサマアレルギー」 2020.05.09\n\n《旁人过敏症》也是熊曲，不是那么喜欢。这句词只是因为当时确实相当压抑。\n正しさだけで殴り合うならば，勝ち目はないんだよ。\n如果仅仅是因为追求正当就相互殴打，那几乎就没有胜利的可能。\n——「ネガティヴ進化論」 2020.06.03\n\n《消极进化论》似乎是基于一个现有的故事还是小说，所以是具有背景的，然而我至今都没有去了解，所以歌词的含义也是似懂非懂。我听这首歌，只是因为旋律确实好听。\n希望の花，繋いだ絆を。\n希望的花，连接起的羁绊。\n——「フレジア」 2020.07.26\n\n单纯的梗曲，不过抛开梗来看，这首歌也还不错。\n花で一つ，鳥で二つ，\n第一是花，第二是鸟，\n手打ち鳴らす，\n拍着手轻声唱，\n風で三つ，嗚呼，月出て四つ，\n第三是风，啊，第四是升起的月亮，\n鳴らす鳴らす。\n轻声唱着。\n——「回レ！雪月花！」 2020.08.28\n\n《雪月花》也是经典歌曲了，歌词的特色就是大量的四字成语。这一段是中间的过渡段，没有什么很深刻的含义，只是当时觉得很有意思就放上来了。\n誰もいなくなったら意味はないんですか？\n难道万物消逝之后一切都没有意义了吗？\n——「ドリームレスドリームス」 2020.11.03\n\n《无梦之梦》最喜欢的一句词，虽然目前都没有领悟之中的含义，不过这句歌词确实是引入副歌的歌词，也是将全曲拉上最高潮的一句词。这种声嘶力竭的反问，确实能让人感到相当震撼。\nまっさらなら，声上げて。\n一尘不染的话，引吭高歌吧。\n——「百鬼祭」 2020.11.03\n\nKanaria\n的初投稿，整首歌歌词不是很喜欢，因为完全不明白他想表达的含义。不过\nKanaria 的旋律做得很好，到现在我也一直在听。\n「まあまあ」なんて要らない，欲しがります死ぬまでは。\n得过且过绝对不需要，我要贪得无厌，至死方休。\n…\nわかるか，私の美学。\n你明白吗？我的美学。\nこの馬鹿正直な拳一つが切り札。\n这愚蠢正直的一发拳头，就是我最后的王牌。\n——「劣等上等」 2020.12.23\n\n《劣等上等》是 Giga\n的代表作，歌很吵，但是词比较有意思。当时的我，在大二上学期取得了很多可以说很好的成就，也在大学中找到了自己的节奏，所以听歌的风格也开始激昂起来了。\n有趣的是，我在大一下学期比较沉闷的时候就已经听过《劣等上等》，但当时觉得很不好听，半年后就觉得这首歌绝对好听。看来听歌口味和境遇确实有很大的关联。\n2021 年\nお願い死なないで，そんなこと言わないで，\n不要去寻死，这样的话语也不要再说，\n少し胸の奥が締め付けられる。\n心口稍稍有点疼痛。\n…\n今日からの君も昨日までの君も，\n无论是今天以后的你，还是昨天以前的你，\n大切に愛しくて嬉しくて好きで。\n我都珍重地喜欢着可爱又令我愉悦的你啊。\n…\n光の群れが羽ばたく景色が，\n那绽放着光芒的景色，\nどこまでも広がればいいと思えるの。\n或许可以充满整个世界。\n——「蝶々世界」 2021.04.05\n\n这也是一个较为冷门的 V\n曲，分享出来的契机是你清又有人轻生。刚刚步入大二下学期，当时暂且还是处于延续上一学期意气风发的状态。\n暗闇の自由より鎖に繋がれた光でいいんだ。\n与其接受自由的黑暗，我宁愿带着锁链沐浴在光芒之下。\n——「琥珀の身体」 2021.04.17\n\n《琥珀的身体》是个好歌，旋律很震撼，然后这一句词绝对是我很喜欢的，也是我第一遍听就确定一定要分享出来的歌词。\n太陽になれなかった腐った炎，\n没能成为太阳的腐烂的火焰，\n意味もなく酸素を費やす。\n只是毫无意义地耗费着氧气。\n——「映えない」 2021.04.18\n\n《不太上镜》是那段时间我几乎算是最喜欢的歌，这首歌就在探讨那些并没有实质的人，为何需要在人前假装出一副胸有成竹的样子。当时我渐渐发觉自己对学业力不从心，确乎有了一些自卑的心理，于是这首歌也确实让我感受到了一点点的震撼。\n美学とかプライドとか語る前に，\n在谈论美学和自尊之前，\nやれることをやっていけ。\n先去做好能做的事。\n——「限りなく灰色へ」 2021.05.04\n\n当时刚刚从上海见 Sakana\n回来，心态确实有所好转。在回来的火车上，默默下了一定要好好活下去的决心，于是把《向着无尽之灰》的这句歌词分享出来了。\n「自分らしく生きて」なんて言わないで，\n不要说那些“活出自我”，\nらしさなんて最初からないから。\n因为根本就没有什么自我。\n——「映えない」 2021.05.06\n\n已经忘记了为什么突然要分享这句词了，不过可以知道的是，这段时间往后的一个月，甚至两三个月，我都沉浸在自我否定之中。那段时间我尝试着揭开了很多往事，结果就是相当长时间内都没有缓过来，一直在尝试着建立起自己努力下去的理由。\nここ調子が悪いんだ，いや本気はまだまだ，\n现在状况有些不太好，不对，只是没拿出真本事而已。\nそう言ったのはこれは何度目の台詞だろう？\n这个借口已经用了多少次了？\n——「いや〜いや〜」 2021.05.09\n\n这首歌高中就听了，但是真正感到理解了一些还是在大二。那段时间开始注意到自己对感情问题的拖延和视而不见已经结出了恶果，也注意到过度的自我封闭让自己完全无法接受现况，于是只能用这段歌词聊以自慰。\n芝居し合い化かし合い，みんな灰色なんだ，\n一起表演，一起幻化，大家不过是一团灰色，\n地球は茶番さ，人類みな劇団さ，\n地球不过是笑谈，人类也不过是剧团，\n存在しない神や愛，芝居で表してきた。\n那些本来就不存在的神和爱情，都通过表演展现出来了啊。\n——「Hyper Reality Show」 2021.05.25\n\n当时莫名其妙想分享的一句歌词，其实目的只是想让 Sakana\n和自己聊聊而已，没有什么特别的含义。\n取り出し給え，刃！刃！\n取出来吧！你的利刃！\n——「ナミダ」 2021.06.03\n\n这句词是在第二次去上海的路上分享的，当时自己尝试着通过这种情感特别激烈的歌来调动自己的情绪，以尝试掩盖心中的不安。\nさよならを言わないのは，あなたに見抜かれてしまわないように。\n不和你道别，只是还不想被你看透啊。\n——「第三の心臓」 2021.06.15\n\n春卷饭现在的风格是越来越走向温柔向了。《第三心脏》讲述的是朋友之间偶然的矛盾和不快，确实也贴合当时和\nSakana\n之间的矛盾。歌曲的最后，两人最终和好，并肩前行，也算是寄托了一些自己的想法吧。\nケーキも大好き，君も大好き。\n喜欢蛋糕，也喜欢你。\n——「とある一家の御茶会議」 2021.06.19\n\n这首歌相当老，是滚苹果 P\n的隐退曲，这种欢快的曲调下掩藏的是无可奈何的悲伤。说不出来当时被触动到的心情了，但总之大约是感受到了自己逐渐走向正轨的一些安心，和这些安心之下依然被埋藏着的不安。\nくたびれた私が駄目だったんだね，\n颓废的我已然不堪大用。\nまだ役に立つつもりだったけれど。\n本还想着发挥最后的余热的。\n——「ハルノ寂寞」 2021.06.24\n\n《春日寂寞》是稻叶昙作品中我最喜欢的，无论是技术上调教相当完美，还是歌词旋律相当优秀。那种空灵的旋律，传达出一种无法和你继续下去的痛苦和无奈。\nゴミ溜めで埋もれたまま，星空を眺めてるよ。\n即使掩埋于垃圾堆之下，也要向上仰望星空。\n——「ぼくらみんな意味不明」 2021.07.02\n\n匹老板的代表作之一，旋律不算好听，但是这段歌词确实不错。虽然现在看也并没有讲什么大道理，但确实让我感受到了一点动力。\n凍てつく雪の中で，確かな熱を帯びた，\n冻结着的积雪之下，确实还留存着些许温热，\n呼吸をして，声を焼いて，燃えた燃えた禊の火。\n喘着气，声音灼热着，映照着燃烧着的业火。\n——「ハレハレヤ」 2021.07.20\n\n《朗朗晴天》的副歌段，音调极其之高，但也因此表达出了相当强烈的情感。当时分享的动机就是单纯的好听。\n全知全能の言葉をほら聞かせてよ。\n来，让我听听那些全知全能的话语吧。\n——「東京テディベア」 2021.08.25\n\n《东京泰迪熊》也是相当经典的歌曲，依然是镜音的绝妙演出。这一段没有什么特殊含义，只是因为好听。这句词每一个重音都会突然拉高音调，有那种直击人心的表现力。\n僕は大人にやってなったよママ。\n我终于长成大人了啊妈妈。\n——「ビターチョコデコレーション」 2021.09.22\n\n《苦巧克力装饰》是我听的第一个 syudou\n的歌，这种带一点压抑，带一点深度的歌词很让我着迷。这首歌主要探讨的是放弃童真成长为大人的故事，苦巧克力的含义大致和苦咖啡类似，是成长为社会人的标志，也是小孩子们常常用来假装自己已经长大的一个逞能的用具。\n总体而言，当时我坐在西大操场旁边的长椅上等待 Sakana\n的电话，偶然循环到了这一句。\n失うことに慣れてく中で，\n已经习惯失去的我，\n失くさずにいた大事な思いを抱き締めたら，不意に涙が落ちたのは，\n偶然将还未丢失的回忆拥入怀中之时，泪水在不意间悄然落下，\nこの街でまだ生きていたいと思うから。\n是因为我还想在这城市中生存下去啊。\n——「幽霊東京」 2021.10.09\n\n《幽灵东京》大约是在探讨着在大城市中生存的艰难，那种为了生活打拼之后，在一天的疲惫之后突然回想起曾经的美好的悲伤感。现在自己这个乡下出身的人，来到北京上大学，确实是需要一段时间接受的。那段时间和同一个高中的学弟交流也很多，所以也时不时会想起自己在高中的那些无忧无虑的时光。\n虽然不像歌词写的那么夸张，但还是有点共鸣。\nどうかどうか与えて，生活を与えて。\n无论如何给予她吧，把梦想中的生活给予她吧。\n…\nあなたがいたあの部屋，未来を繋ぐギャラリアだったはず，\n你所在的那个房间，本应该是连接未来的画廊啊，\nだったはず。\n本应该啊。\n——「ギャラリア」 2021.10.11\n\n比较喜欢的一个作品，讲述的是家暴类似话题。不过我倒不是因为歌词喜欢上这首歌的，纯属因为调教比较好，旋律也不错。\n僕にしかできないことはなんだか？\n只有我能做到的事是什么啊？\n——「群青」 2021.10.25\n\n《群青》是相当优秀的一个曲子，当时分享这句歌词，也是出于一些不安，觉得自己是可替代的一个人，并不是所谓的独一无二的人。不过其实到现在，我都没有说服自己自己是独一无二的。\nなるべく永く一緒にいたいんだよ。\n那就多让我在你身边吧。\n…\n少しだけ名残惜しそうにさようなら。\n那就依依不舍地道别吧。\n——「ハルノ寂寞」 2021.10.30\n\n《春日寂寞》中相互呼应的两句歌词，结合之前说的那种不得不离去的无奈感，确实很感人吧。\n他人の不幸は蜜の味。\n他人的不幸就像是蜜糖的味道。\n…\n助けを乞う姿を見せておくれ。\n让我看看你乞求我救助的可怜模样。\n——「シャーデンフロイデ」 2021.11.11\n\n这是《雨路女孩》的续作，大致讲述了一个趁人之危的人作恶的故事，似乎也是影射了一些社会事件，但我这个听歌的，就没有管多少了。这首歌论旋律论节奏都算是不错，不至于很惊艳，但也是相当不错的水平。\n僕の一等賞を奪いにきて。\n来夺取我的一等奖吧。\n——「ホワイトハッピー」 2021.11.12\n\n《白色幸福》也是 MARETU\n的作品，这句词常常用于影射性相关话题。那具体影射的是什么呢，其实都说是“一等奖”和“夺取”了，应该不难猜出来。\n簡単な感情ばっか数えいたら，\n如果只是清点着简单的感情，\nあなたがくれた体温まで忘れてしまった。\n就连你传递给我的体温都会忘却。\n——「DONUT HOLE」 2021.11.29\n\n《甜甜圈洞》是八爷相当著名的作品，用欢快的语调歌唱感情的绝望。即使 V\n家发展了这么多年，八爷这首歌论硬实力依然是相当上乘的，不愧是顶尖音乐人。\n2022 年\nなあ今年もさ，桜が散ってしまうんだ。\n今年，樱花也如同往常一样凋谢。\n夢みたいに踊る桃色に騙されてしまいそうだ。\n那如梦境一般漫天飞舞的粉红，几乎将我欺骗。\n——「地獄に落ちる」 2022.03.16\n\n《坠入地狱》大约是我目前可以称得上最喜欢的曲子之一，赶上北京短暂的春天，这首歌就显得尤为切合时宜。\n这首歌歌词充满力量，而且 KAFU\n调得确实相当扎实。副歌段的抒情很强烈，这段简单的写景又是柔和，只能说黑柿子确实把一个失魂落魄而又在漫天飞舞的樱花中重拾理想的人描写出来了。\n","categories":["【杂谈】碎碎念"]},{"title":"基础乐理学习笔记","url":"/2025/02/17/music/","content":"小时候学习钢琴的时候，老师和我说理论上是要给你们讲乐理以及练听音之类的，但是现在考级也不会很认真考这些，所以就无所谓吧。现在打音游之后，时不时会遇到一些乐理名词，于是求知欲莫名其妙被勾起来了，所以现在来学习一些。\n音乐理论似乎和自然语言语法一样，是一个混杂有大量经验规则的所谓“理论”，不遵从并不会带来什么问题，无非是大家是否接受。然而鉴于当下大部分音乐都基于音乐理论构建，那还是稍微学习一点至少能和大家使用同一套名词系统交流而不至于存在过高门槛。\n\n律式\n人耳可以感知的声音频谱是连续的，而实际上的音乐创作也不太可能基于连续的频谱，现实中我们往往会挑选出若干特定频率的声音供创作者选择，而这种选择的方式就称为律式。十二平均律则是当下最主流的律式。\n十二平均律从标准音开始，定义标准音的频率为 440\n赫兹。定义升高八度（Octave）为频率翻倍，降低八度为频率减半，这样整个频谱就以标准音为基准，划分为了若干个八度区间。在一个八度区间内，则将频谱进一步按照等比数列的方式划分为\n12\n个半音（Semitone/Half-step），每两个相邻半音的频率之比为\n$\\sqrt[12]{2}$。这些半音，就是十二平均律下选定的特定频率。\n为了后续讨论方便，这些半音都有各自的音名，音名与声音的频率有严格的对应关系。本文中，将十二平均律的标准音（440\n赫兹）记为\nA4，音名结尾的数字表示所属的八度区间编号，也就是说标准音升高八度（880\n赫兹）为 A5，降低八度（220 赫兹）为\nA3。以后如果不涉及到需要指明八度区间编号的，则可以省略音名结尾的数字。\n一个八度区间内各个半音的音名则遵守惯例，自 A 起，使用 BCDEFG\n共计七个字母自低到高标记十二个半音中所选定的七个特殊半音。这七个半音并非均匀排列，其中\nBC 与 EF\n相差一个半音，而其他则相差两个半音（也称为一个全音（Tone/Whole-step））：\n\n\n\n音名\n频率\n\n\n\n\nA\nf\n\n\nB\n$2^{\\frac{2}{12}}f$\n\n\nC\n$2^{\\frac{3}{12}}f$\n\n\nD\n$2^{\\frac{5}{12}}f$\n\n\nE\n$2^{\\frac{7}{12}}f$\n\n\nF\n$2^{\\frac{8}{12}}f$\n\n\nG\n$2^{\\frac{10}{12}}f$\n\n\n\n其他的半音，则通过这七个特殊半音通过升降记号给出。升号为\n#（Sharp），表示升高一个半音，降号为 b（Flat），表示降低一个半音。以 A3\n到 A4 的八度区间为例，其中的十二个半音分别记为：\n\nA3 - A3#/B3b - B3 - B3#/C3 - C3#/D3b - D3 - D3#/E3b - E3 - E3#/F3 -\nF3#/G3b - G3 - G3#/A4b - A4\n\n可以注意到某些半音可以用多种记号表示。\n在一般的 88 键钢琴上，最低音为 A0，最高音为\nC8，每一个琴键代表一个半音，所有的白键都（可以）不带升降号表出，所有的黑键则都需要用升降号表出。钢琴中的中央\nC（Middle C）一般指 C3，从而其频率为 $440 \\times 2^{-\\frac{9}{12}} = 261.626 {\\rm\nHz}$。\n从历史上说，十二平均律实际上出现得较晚，这是因为该律式中频率比例为无理数，古代无论是东方还是西方都难以据此准确加工管弦乐器（即确定管长或者弦长）。因此在十二平均律前，古代往往依赖已经成熟的等分管长或者弦长的技术构造律式，其中的代表就是五度相生律。五度相生律实际上是十二平均律的前驱，后者的很多惯例均来自于前者：\n\n\n\n音名\n频率\n\n\n\n\nC\nf\n\n\nD\n$\\dfrac{9}{8}f$\n\n\nE\n$\\dfrac{81}{64}f$\n\n\nF\n$\\dfrac{4}{3}f$\n\n\nG\n$\\dfrac{3}{2}f$\n\n\nA\n$\\dfrac{27}{16}f$\n\n\nB\n$\\dfrac{243}{128}f$\n\n\n\n在五度相生律中，BC 与 EF 之间的频率比值为 $\\dfrac{256}{243}$，而其他相邻音之间的频率比值为\n$\\dfrac{9}{8}$，由于 $\\dfrac{256}{243}\\approx\\sqrt[12]{2}$，并且\n$\\dfrac{9}{8}\\approx\\sqrt[6]{2}$，这就表明了五度相生律中的七个音实际上与十二平均律中的七个特殊半音能够大致对应，而这也是十二平均律中选取这七个半音的理由。并且，正是因为五度相生律在\nf ∼ 2f\n的频率区间内选定了七个音，所以这样的一个频谱区间才会被称为八度。\n此外我们大致有 $\\left(\\dfrac{256}{243}\\right)^2\\approx\\dfrac{9}{8}$，也就是说五度相生律上也已经定义出了全音和半音的概念，也就是\nBC 与 EF\n相差一个半音，其余相差一个全音，一个全音大致是两个半音。全音与半音的不完全精确对应就是五度相生律的缺陷之一，这导致如果需要在\nCD 之间再插入一个半音会出现两种选择，势必导致 C# 与 Db\n等升降音不同。\n除了五度相生律，由于人们也发现频率比值的分子分母如果能较小（如 $\\dfrac32,\n\\dfrac43$），那么这两个音同时演奏就相对和谐。这个发现推动了纯律的出现，其把五度相生律中分子分母较大的音改制为接近的小分子分母数：\n\n\n\n音名\n频率\n\n\n\n\nC\nf\n\n\nD\n$\\dfrac{9}{8}f$\n\n\nE\n$\\dfrac{5}{4}f$\n\n\nF\n$\\dfrac{4}{3}f$\n\n\nG\n$\\dfrac{3}{2}f$\n\n\nA\n$\\dfrac{5}{3}f$\n\n\nB\n$\\dfrac{15}{8}f$\n\n\n\n然而纯律虽然满足了和谐的优点，但是纯律下的全音就有了大小之分（CD 与\nDE 的频率比值不同），从而使得编曲更为困难，因此纯律也逐步被淘汰了。\n需要注意的是，大部分律式均认同八度区间内（f ∼ 2f 频率区间内）划分出\nCDEFGAB 七个半音，其中 BC 与 EF\n相差一个半音，其余相差两个半音（一个全音）。\n\n音程\n在给定了律式的基础上，我们需要建立一套用于讨论两个半音之间音高差距的名词，而这就是所谓的音程（Interval）。以简化讨论，我们现在仅考虑一个八度区间内的半音之间的音程。音程最基本的衡量单位为度，这个是基于音名字母之间差距的（或者理解钢琴白键的差距或者五线谱上的差距）：\n\nA-A/B-B/C-C/D-D/E-E/F-F/G-G：一度（Unison）\nA-B/B-C/C-D/D-E/E-F/F-G/G-A’：二度（Second）\nA-C/B-D/C-E/D-F/E-G/F-A’/G-B’：三度（Third）\nA-D/B-E/C-F/D-G/E-A’/F-B’/G-C’：四度（Forth）\nA-E/B-F/C-G/D-A’/E-B’/F-C’/G-D’：五度（Fifth）\nA-F/B-G/C-A’/D-B’/E-C’/F-D’/G-E’：六度（Sixth）\nA-G/B-A’/C-B’/D-C’/E-D’/F-E’/G-F’：七度（Seventh）\nA-A’/B-B’/C-C’/D-D’/E-E’/F-F’/G-G’：八度（Octave）\n\n这里音名上加撇号表示升高八度，本文后续也会使用该记号。\n然而我们需要注意的是，由于 BC 与 EF\n之间相距的是一个半音，所以即使度数相同，相距的半音数目也并不一样。为了在相同度数下区分不同的半音数，我们需要不同的前缀。一般而言常用的前缀包括大（Major）、小（Minor）、纯（Perfect）、增（Augmented/aug.）、减（Diminished/dim.）、倍增（Double\naug.）、倍减（Double dim.）。这些前缀的使用可以归结为下表：\n\n\n\n半音数\n一度\n二度\n三度\n四度\n五度\n六度\n七度\n八度\n\n\n\n\n0\n纯一度\n减二度\n\n\n\n\n\n\n\n\n1\n增一度\n小二度\n倍减三度\n\n\n\n\n\n\n\n2\n倍增一度\n大二度\n减三度\n\n\n\n\n\n\n\n3\n\n增二度\n小三度\n倍减四度\n\n\n\n\n\n\n4\n\n倍增二度\n大三度\n减四度\n\n\n\n\n\n\n5\n\n\n增三度\n纯四度\n倍减五度\n\n\n\n\n\n6\n\n\n倍增三度\n增四度\n减五度\n倍减六度\n\n\n\n\n7\n\n\n\n倍增四度\n纯五度\n减六度\n\n\n\n\n8\n\n\n\n\n增五度\n小六度\n倍减七度\n\n\n\n9\n\n\n\n\n倍增五度\n大六度\n减七度\n\n\n\n10\n\n\n\n\n\n增六度\n小七度\n倍减八度\n\n\n11\n\n\n\n\n\n倍增六度\n大七度\n减八度\n\n\n12\n\n\n\n\n\n\n增七度\n纯八度\n\n\n13\n\n\n\n\n\n\n倍增七度\n增八度\n\n\n14\n\n\n\n\n\n\n\n倍增八度\n\n\n\n对一、四、五、八度而言前缀的顺序是倍减-减-纯-增-倍增，而对二、三、六、七度而言前缀的顺序是倍减-减-小-大-增-倍增。而半音数目为\n6 的音程一般也称为三全音（Tritone）。\n一、四、五、八使用纯作为前缀而其他使用大小作为前缀本质也是来源于五度相生律。以四度为例，五度相生律中的四度除了\nF-B’ 均是包含五个半音的，它们的频率比值均为 $\\left(\\dfrac{9}{8}\\right)^2\\times\\dfrac{256}{243} =\n\\dfrac{4}{3}$，是一个小分子分母数，这说明了这种音程相对而言听感较为和谐，而\nF-B’ 代表的增四度的频率比值则为 $\\left(\\dfrac{9}{8}\\right)^3 =\n\\dfrac{729}{512}$，相对而言极其不和谐。另一方面，减四度的频率比值也是大分子分母数。五度也类似，纯五度的频率比值为\n$\\dfrac{3}{2}$。\n再考虑三度，大三度的频率比值为 $\\dfrac{81}{64}$，小三度的频率比值为 $\\dfrac{32}{27}$，减三度则分子分母相对大。\n据此可见，纯音程实际上是相当和谐的音程，无论如何增减半音都会导致不和谐。而大小音程相对而言听感相近，只有对小音程再减半音或者对大音程再增半音才会得到不和谐音程。因此，一、四、五、八度会对最为和谐的音程使用纯作为前缀，其余则将和谐感相近的两个音程分别命名为大小。\n在十二平均律下音程的和谐程度大概可以如下排列：\n\n（极和谐）纯一度、纯八度（零、十二）\n（完全和谐）纯四度、纯五度（五、七）\n（不完全和谐）大小三度、大小六度（三、四、八、九）\n（不和谐）大二度、小七度、三全音（二、六、十）\n（极不和谐）小二度、大七度（一、十一）\n\n\n初学者可能认为减二度和纯一度等音程组是一致的，这是因为十二平均律掩盖了半音的区分。具体而言，所有律式中\nBC 与 EF 之间所相差的半音称为自然半音（Diatonic\nsemitone），而通过进一步分割，得到的 CC#\n之间所相差的半音则称为变化半音（Chromatic\nsemitone）。十二平均律下自然半音与变化半音没有区别，统称半音。然而在纯律之类的其他律式下，自然半音与变化半音并不一致。\n所以 B-C 和 Cb-C\n分别是小二度和增一度，在十二平均律下是一致的，然而在其他律式下这个相差的半音一个是自然半音一个是变化半音，是有所区别的。\n\n音程转位\n将一个音程中低音升高一个八度或者高音降低一个八度称为转位（Inversion）。转位前后的音程度数之和为九，类型上发生大小互换、增减互换、倍增倍减互换、纯不变。例如：\n\n纯一度与纯八度\n大二度与小七度\n增四度与减五度（均为三全音）\n倍增三度与倍减六度\n\n音阶\n音阶（Scale）可以理解为一系列持续走高或者走低的半音。一般而言，音阶是每一个八度一次循环的。本文主要讨论西洋音乐中常见的七声音阶，古代中国所使用的五声音阶以及由其衍生的七声音阶则暂不讨论，后续如果不需要区分则直接使用音阶称呼西洋七声音阶。\n音阶的一个循环节的构成为，选定某一个起始音作为音阶的主音（Tonic），之后按照顺序循环遍历各个音名（例如由\nC 开始以 C-D-E-F-G-A-B\n的顺序遍历）。在这个基础上，可以通过对各个音作升降变音（同一个音阶中一般要么同时升某些音要么同时某些降某些音，不会同时使用升音和降音），调整音阶相邻两个音之间的音程。而这音阶循环节中七个音之间的音程则决定了音阶的调式：\n\n自然大调（Major）：全全半全全全半（例如：C-D-E-F-G-A-B）\n多利安调式（Dorian）：全半全全全半全（例如：D-E-F-G-A-B-C）\n弗利吉安调式（Phrygian）：半全全全半全全（例如：E-F-G-A-B-C-D）\n利地安调式（Lydian）：全全全半全全半（例如：F-G-A-B-C-D-E）\n混合利地安调式（Mixolydian）：全全半全全半全（例如：G-A-B-C-D-E-F）\n自然小调（Minor）：全半全全半全全（例如：A-B-C-D-E-F-G）\n洛克利安调式（Locrian）：半全全半全全全（例如：B-C-D-E-F-G-A）\n\n以 C 为主音的，遵循自然大调音阶格式的音阶即称为 C\n大调音阶。事实上，我们可以通过枚举主音来枚举所有的大小调音阶：\n\n\n\n\n\n\n\n\n\n大调主音\n小调主音\n大调循环节\n升降数目\n\n\n\n\nAb\nF\nAb-Bb-C-Db-Eb-F-G\n-4\n\n\nA\nF#\nA-B-C#-D-E-F#-G#\n+3\n\n\nBb\nG\nBb-C-D-Eb-F-G-A\n-2\n\n\nB  Cb\nG#  Ab\nB-C#-D#-E-F#-G#-A# \nCb(B)-Db-Eb-Fb(E)-Ab-Bb\n+5  -7\n\n\nC\nA\nC-D-E-F-G-A-B\n0\n\n\nC#  Db\nA#  Bb\nC#-D#-E#(F)-F#-G#-A#-B#(C) \nDb-Eb-F-Gb-Ab-Bb-C\n+7  -5\n\n\nD\nB\nD-E-F#-G-A-B-C#\n+2\n\n\nEb\nC\nEb-F-G-Ab-Bb-C-D\n-3\n\n\nE\nC#\nE-F#-G#-A-B-C#-D#\n+4\n\n\nF\nD\nF-G-A-Bb-C-D-E\n-1\n\n\nF#  Gb\nD#  Eb\nF#-G#-A#-B-C#-D#-E#(F) \nGb-Ab-Bb-Cb(B)-Db-Eb-F\n+6  -6\n\n\nG\nE\nG-A-B-C-D-E-F#\n+1\n\n\n\n我们无法构造升 A 大调而只能构造降 B 大调的原因是，在 A#\n作为主音时，我们无法仅仅通过升某些音的方式构造满足大调格式的音阶。而升 C\n大调和降 D 大调则可以同时构造。\n\n此外我们其实可以注意到，任何一个自然大调音阶总是可以找到一个使用同样半音序列但是主音不一样的自然小调音阶，反之亦然，如\nC 大调音阶与 a\n小调音阶。这种对应关系称为关系大（小）调，小调主音总在大调主音下方一个小三度。\n当然除此外还有其他的音阶形式，例如旋律大小调和和声大小调，这里暂且不介绍。\n和弦\n和弦（Chord）指的是多个音叠加形成的复合音。在传统定义中，一个和弦中相邻的音之间的音程均是三度（多为大小三度），然而现在以非三度形式堆叠的和弦也不少见。在以三度堆叠的和弦中，自最低音开始，各个音分别称为根音（Root）、三音（Third）、五音（Fifth）、七音（Seventh）等，而堆叠数目为三、四、五的和弦分别称为三和弦（Triads）、七和弦（Sevenths）、九和弦（Ninths）。\n如果一个和弦所堆叠的几个音能同时属于某一个音阶，则称这个和弦符合这个音阶代表的调性。\n和弦一般根据相邻音之间的三度的类别作更细的分类。例如三和弦可以分为（以\nC 大调三和弦为例）：\n\n大三和弦（Major triads）：大三度 + 小三度（CEG、FAC、GBD）\n小三和弦（Minor triads）：小三度 + 大三度（DFA、EGA、ACE）\n增三和弦（Augmented triads）：大三度 + 大三度（大调中无该例子）\n减三和弦（Diminished triads）：小三度 + 小三度（BDF）\n\n和弦的记号一般是首先注明根音，然后再用后缀注明和弦类别，后缀的写法不唯一，下述是常见的几种写法：\n\n大三和弦：maj，M\n小三和弦：min，m，-\n增三和弦：aug，+\n减三和弦：dim，o\n\n例如 C3 maj 就代表以中央 C 为根音的大三和弦。\n对三和弦而言，如果该和弦符合大调调性，则实际上我们只要注明根音在音阶中的位置即可确认其类别：\n\n根音为第一、四、五音：大三和弦（I maj、IV maj、V maj）\n根音为第二、三、六音：小三和弦（II min、III min、VI min）\n根音为第七音：减三和弦（VII dim）\n\n自七和弦开始，和弦种类会变得相对复杂，所以这里开始我们仅仅探讨会在大调中出现的和弦：\n\n大七和弦（Major sevenths）：大三度 + 小三度 + 大三度（大三和弦 +\n大三度）\n小七和弦（Minor sevenths）：小三度 + 大三度 + 小三度（小三和弦 +\n小三度）\n属七和弦（Dominant sevenths）：大三度 + 小三度 + 小三度（大三和弦 +\n小三度）\n半减七和弦（Half-diminished sevenths）：小三度 + 小三度 +\n大三度（减三和弦 + 大三度）\n\n这些和弦的后缀常见为：\n\n大七和弦：maj7，M7，MM7\n小七和弦：min7，m7，mm7，-7\n属七和弦：7，Mm7\n半减七和弦：-7(b5)，m7(b5)\n\n大调上的七和弦可以归类为：\n\n根音为第一、四音：大七和弦（I maj7、IV maj7）\n根音为第二、三、六音：小七和弦（II-7、III-7、VI-7）\n根音为第五音：属七和弦（V7）\n根音为第七音：半减七和弦（VII-7(b5)）\n\n","categories":["【学习笔记】乐理"]},{"title":"早安、可能是午安、或者是晚安","url":"/2021/09/17/navigation/","content":"关于我更多的信息，请见 关于页。\n这里主要是一些杂谈，正经内容主要是课程笔记、论文笔记和日语笔记。\n查看最近的文章可以直接向下滑动找到对应的文章，需要查看较远的文章可以通过网页上方栏目的分类页或者归档页寻找。\n考虑到分类页只展示分类却不展示分类内的文章列表，这里有一个简单的文章分类列表：\n\n学习笔记\n\n大二春季学期《人工智能导论》\n大二夏季学期《汇编语言程序设计》\n大三秋季学期《信号处理原理》《计算机网络原理》\n大四春季学期《深度强化学习》\n博一春季学期《应用近世代数》\n\n各月论文笔记合集（已经停更，目前使用 Zotero 管理笔记）\n简明日语自学手册（正在迁移至其他页面，目前持续更新）\n一些生活记录和总结\n\n大二春季学期、大三秋季学期、大三春季学期总结\n大三寒假总结\n大二暑假、大三暑假、大四春季学期、博一秋春季学期生活记录\n大三秋季学期、大四秋季学期前期感想\n\n杂七杂八\n\n2022 年新高考 I 卷（江苏）数学答案\n一些原创数学题\n乱七八糟的开发感想\n还有一些混乱感想、游戏笔记、歌词记录本\n\n\n总之，不如自己来翻翻这里有些什么，在评论区留下足迹，个人网站不就是这个用处么。\n","categories":["【导航】"]},{"title":"小学期深夜的废话","url":"/2021/08/17/nonsense-at-night/","content":"突然有点想随便写点东西说点感受而已，写完就该睡大觉了。\n\n现在是 2021 年 8 月 17 日的深夜 03:44，这个叫 Holder\n的大二学生还没有睡。\n小学期选了整整 8\n学分的课，从第二周开始每周周一到周五都是全天满课。汇编每周有作业，还有一个大作业和考试。Java\n每堂课有一个小作业，还有一个看起来不是很小的大作业。量子计算作为一门新课，上来就是全英文\nPPT，讲着虚张声势的线性代数，倒也真的把 Holder 愉悦送走了。\n但值得庆幸的是，只要不去听老师上课，自己在空调房里和 Sakana 连着麦看\nPPT / CSAPP / 各路文档自学，累了就开瓶快乐水刷两眼手机或者打一小会\nProject\nSekai，然后慢慢写自己学习的时候的笔记和一时的感悟，这种体验简直不要太好。就是那种感觉，那种感受到了学习愉悦之处的感觉。\n我也不知道什么时候我变成了厌恶上课的一个人，烦躁于古板沉闷的 PPT\nreader\n式的课堂。我宁愿自己一个人琢磨，不懂的时候就去各种翻资料或者问问同学，然后在个人网站上写下万字之多的笔记。特别是一时间想通一个很困难的问题的时候，我习惯把当时所有的思路都复盘下来写下来。\n这个小学期，我突然觉得自己找到了一种玄妙的乐趣，那种像想要抓住什么的一样的冲动。虽然每天都累得不成样子，到处抱怨，但是内心是充实的。\n虽然不知道学的东西会不会派上用场，但是就是享受到了学习这一过程之中的乐趣。\n\n也不知道这种斗志昂扬的状态会持续到什么时候，也不知道 Holder\n未来会不会又一次陷入像今年 5 月那样沉闷的时光，但无论如何，现在的 Holder\n是快乐的。\nHolder 或许得睡大觉了，虽然现在才睡，翘汇编是不可避免的了。\n","categories":["【杂谈】碎碎念"]},{"title":"《应用近世代数》学习笔记","url":"/2024/03/06/note-of-alg/","content":"自学笔记，那就是自学笔记，只记一些比较主干的定理和证明，或许时不时穿插点自己的感想。\n\n引言与预备知识\n集合与映射\n集合所采用的符号和先前并无太大差距，除了余集（补集）本书采用的符号为：\n$$\nA' = \\overline{A} := U\\backslash A\n$$\n对称差采用的符号为：\nA△B := (A∖B) ∪ (B∖A)\n集合的部分运算性质 trivial，略去。\nTheorem 1.1 (Inclusion &amp; Exclusion Principle)\n容斥原理表述为：\n$$\n\\begin{aligned}\n\\left|\\bigcup_{i = 1}^n A_i\\right| &amp;= \\sum_{k = 1}^n\n(-1)^{k-1}\\sum_{1\\leq i_1 &lt; i_2 &lt; \\cdots &lt; i_k\\leq\nn}\\left|\\bigcap_{j = 1}^k A_{i_j}\\right| \\\\\n&amp;= \\sum_{i = 1}^n |A_i| - \\sum_{1\\leq i &lt; j\\leq n}|A_i\\cap A_j| +\n\\sum_{1\\leq i &lt; j &lt; k\\leq n}|A_i\\cap A_j\\cap A_k| - \\cdots +\n(-1)^{n-1}\\left|\\bigcap_{i = 1}^n A_i\\right|\n\\end{aligned}\n$$\n\n证明据对 n\n的归纳法平凡，略去。\n映射相关的基本定义和概念与先前一致。\nDefinition 1.1 若集合 A, B 间存在一个双射，则称\nA, B\n等势。与自然数集 ℕ+\n等势的无限集称为可数集，否则称为不可数集。\n\nTheorem 1.2 已知映射 f : A → B，我们有：\n\nf 有左逆等价于 f 是单射\nf 有右逆等价于 f 是满射\nf 有逆等价于 f 是双射\n\n\n证明从略。\n二元关系\n集合 A, B\n上的一个二元关系 R 是笛卡尔积\nA × B 的子集，a ∈ A, b ∈ B\n具有关系 R 定义为 (a,b) ∈ R。\n等价关系、等价类、代表元的定义从略，不难有任何集合上的等价关系与集合的划分一一对应。\nDefinition 1.2 已知集合 A 上的等价关系 ∼，定义 A 对 ∼ 的商集为等价类构成的集合：\n$$\nA/\\sim := \\{\\overline{a} : a \\in A\\}\n$$\n\nDefinition 1.3 (Partially &amp; Totally Ordered Set)\n如果集合 S 上存在一个二元关系\n≤ 满足：\n\n对任意 x ∈ S 都有\nx ≤ x\n对任意 x, y ∈ S，只要\nx ≤ y 且 y ≤ x 就有 x = y\n对任意 x, y, z ∈ S，只要\nx ≤ y 且 y ≤ z 就有 x ≤ z\n\n则称 ≤ 是 S\n上的一个偏序，(S,≤)\n为偏序集。\n如果偏序集 (S,≤)\n还满足：\n\n对任意 x, y ∈ S 都有\nx ≤ y 或 y ≤ x\n\n则称 ≤ 是 S\n上的一个全序，(S,≤)\n为全序集。\n\n一个偏序集总是可以用 Hasse 图表示，Hasse 图是一个无向图，其顶点集为\nS，边集为 $\\{(x, y) : x &lt; y, (\\not\\exists u)x &lt; u &lt;\ny\\}$。\nDefinition 1.4 在偏序集 (S,≤) 上定义：\n\n若存在 a ∈ S\n满足任意 x ∈ S 都有\nx ≤ a，则 a 是 S\n的最大元，同理定义最小元\n若存在 a ∈ S\n满足只要 x ≥ a 就有\nx = a，则 a 是 S\n的极大元，同理定义极小元\n对 T ⊆ S，若存在\na ∈ S 满足任意 x ∈ T 都有 x ≤ a，则 a 是 T\n的上界，同理定义下界\n对 T ⊆ S，若存在\nT 的某个上界 a，令 T 的任意上界 a′ 都有 a ≤ a′，则 a 是 T\n的最小上界，同理定义最大下界\n\n\nDefinition 1.5 (Well Ordered Set) 如果全序集 (S,≤) 满足对任意 T ⊆ S, T ≠ ⌀ 都有\nT\n具有最小元，那么该全序集为良序集。\n\n整数集 ℤ\n在一般的整数序意义上不良序，例如取负整数集 ℤ− ⊆ ℤ，而负整数集不具有最小元。\n良序性保证了数学归纳法的有效性，或者说数学归纳法可以应用在任意良序集上：\nTheorem 1.3 已知 M ⊆ ℤ+，若有 1 ∈ M，并且只要有 n − 1 ∈ M 就有 n ∈ M，那么 M = ℤ+。\n\n【证明】利用反证法，据 ℤ+\n的良序性，取 N = ℤ+ ∖ M ≠ ⌀，N 具有最小元 a。由 1 ∈ M 得到 a ≠ 1，所以 a − 1 ∈ ℤ+。据 a − 1 &lt; a 和 a 在 N 中的最小性得到 a − 1 ∈ M，因而得到 a ∈ M，矛盾。◼\n整数与同余方程\n整数的带余除法、素因子分解这里不赘述。\nTheorem 1.4 (Bezout Theorem) 对不全为零的整数 a, b，其最大公因数为 d，那么存在 p, q ∈ ℤ 令 pa + qb = d。\n\n证明方式为证明 min {pa + qb ∈ ℤ+ : p, q ∈ ℤ} = d，这里略去。\n我感觉本质就在 aℤ + bℤ\n依然是整数的子群，而 d 是\naℤ + bℤ\n的最小正元素。\nDefinition 1.6 (Euler Function) 对正整数 n，定义 φ(n) 为小于 n 且与 n\n互素的正整数的个数。不难据容斥原理计算得到：\n$$\n\\varphi(n) = n\\prod_{p\\mid n}\\left(1 - \\frac{1}{p}\\right)\n$$\n\nTheorem 1.5 一次同余方程 $ax \\equiv b (\\mathop{\\rm mod} m), m \\nmid a$\n有解的充要条件为 (a,m) ∣ b。\n\n【证明】若方程有解 x，则存在 y ∈ ℤ 有 ax + ym = b，据\nBezout 定理得到 (a,m) ∣ b。\n若 (a,m) ∣ b，分别记\na = a1(a,m), m = m1(a,m), b = b1(a,m)，这里我们显然有\n(a1,m1) = 1，从而据\nBezout 定理得到存在 r, s ∈ ℤ 有 ra1 + sm1 = 1，从而\nra1b1 + sm1b1 = b1，即：\n$$\nra_1b_1 \\equiv b_1 (\\mathop{\\rm mod} m_1)\n$$\n考虑原方程，根据下述等价推理：\n$$\n\\begin{aligned}\n&amp;ax \\equiv b(\\mathop{\\rm mod} m) \\\\\n\\iff &amp;a_1(a, m)x - b_1(a, m) = km_1(a, m), k \\in \\mathbb{Z} \\\\\n\\iff &amp;a_1x - b_1 = km_1, k \\in \\mathbb{Z} \\\\\n\\iff &amp;a_1x \\equiv b_1(\\mathop{\\rm mod} m_1) \\\\\n\\end{aligned}\n$$\n从而我们已经得到了原方程的一个解 x = rb1，从而我们可以得到原方程的所有解\nx = rb1 + lm1，这里\nl ∈ ℤ。◼\nTheorem 1.6 (Chinese Remainder Theorem)\n同余方程组\n$$\n\\begin{cases}\nx\\equiv a_1(\\mathop{\\rm mod} m_1) \\\\\nx\\equiv a_2(\\mathop{\\rm mod} m_2) \\\\\n\\vdots \\\\\nx\\equiv a_n(\\mathop{\\rm mod} m_n)\n\\end{cases}\n$$\n满足 mi\n两两互素，那么其解的形式为：\n$$\nx \\equiv \\sum_{i = 1}^n a_ic_iM_i(\\mathop{\\rm mod} M)\n$$\n其中 M = m1m2⋯mn，并且\n$M_i = \\dfrac{M}{m_i}$，并且 ci 是同余方程\n$M_ix \\equiv 1(\\mathop{\\rm mod} m_i)$\n的一个解。\n\n【证明】首先对任意满足：\n$$\nx \\equiv \\sum_{i = 1}^n a_ic_iM_i(\\mathop{\\rm mod} M)\n$$\n的 x，我们逐一验证其满足原同余方程：\n$$\nx = kM + \\sum_{i = 1}^n a_ic_iM_i = m_p\\left(kM_p + \\sum_{i \\neq\np}a_ic_i\\frac{M_i}{m_p}\\right) + a_pc_pM_p \\equiv a_pc_pM_p(\\mathop{\\rm\nmod} m_p)\n$$\n据 $M_pc_p \\equiv 1(\\mathop{\\rm mod}\nm_p)$ 即验证完毕。\n之后证明同余方程组任意解都满足上述形式。取任意一个解 y，由于我们验证了所有满足上述形式的\nx\n都是方程组的解，我们任取其中一个 x，总有 $x\n\\equiv y (\\mathop{\\rm mod} m_p) \\iff x - y \\mid m_p$。据 mp\n之间互素，不难得到 x − y ∣ M，证明完毕。◼\n群\n基本概念\nDefinition 2.1 (Group) 在集合 G 上定义了一个二元运算  ⋅  : G2 → G，若满足：\n\n结合律：对任意 a, b, c ∈ G，有\n(ab)c = a(bc)\n\n那么称 (G,⋅)\n为一个半群。如果还满足：\n\n单位元：存在 e ∈ G 使得对任意 a ∈ G 都有 ea = ae = a\n\n那么称 (G,⋅)\n为一个幺半群。如果还满足：\n\n逆元：对任意 a ∈ G 都存在 a−1 ∈ G 使得\naa−1 = a−1a = e\n\n那么称 (G,⋅)\n为一个群。如果还满足：\n\n交换律：对任意 a, b ∈ G 都有\nab = ba\n\n那么称 (G,⋅)\n为一个交换群（Abel 群）。\n有限群、无限群、群的阶的概念这里不表述。\n\n关于半群，我们有下述性质：\nTheorem 2.1 在半群 (G,⋅) 内定义左右单位元 $e_{\\rm L}, e_{\\rm\nR}$。如果一个半群同时具有左右单位元，则 G 的左右单位元相等，均为 G 的单位元且单位元唯一。\n\n仅需考虑乘积 $e_{\\rm L}e_{\\rm R}$\n即可证明单位元相等。单位元唯一性则根据反证法，假定有两个单位元 e1, 2，考虑乘积 e1e2\n即可。◼\nTheorem 2.2 在幺半群 (G,⋅) 内对 a ∈ G 定义左右逆 $a_{\\rm L}^{-1}, a_{\\rm\nR}^{-1}$。如果一个幺半群的某元素同时具有左右逆，则其左右逆相等，均为其逆元且逆元唯一。\n\n左右逆相等根据下述计算保证：\n$$\na_{\\rm L}^{-1} = a_{\\rm L}^{-1}e = a_{\\rm L}^{-1}(aa_{\\rm R}^{-1}) =\n(a_{\\rm L}^{-1}a)a_{\\rm R}^{-1} = ea_{\\rm R}^{-1} = a_{\\rm R}^{-1}\n$$\n逆元的唯一性根据下述计算保证，假定 a 有两个逆元 a1, 2−1：\na1−1 = a1−1e = a1−1(aa2−1) = (a1−1a)a2−1 = ea2−1 = a2−1\n◼\n上述定理保证的事情大概可以描述为，一个非含幺的半群，单位元不能“左右开弓”，否则必可得到唯一单位元，一个非群的幺半群，逆元不能“左右开弓”，否则必可得到唯一逆元。当然和非含幺的半群一旦“左右开弓”就能升格为幺半群不一样，非群的幺半群内逆元“左右开弓”仅限于具体的元素，要升格为群还是需要所有的元素都具有逆。\n之后我们需要指出半群升格为群的一些条件：\nTheorem 2.3 半群 (G,⋅) 满足下述两个条件时即为群：\n\n左单位元：存在 $e_{\\rm L}\n\\in G$，对任意 a ∈ G 都有 $e_{\\rm L}a = a$\n对左单位元的左逆元：对任意 a ∈ G 都存在 $a_{\\rm LL}^{-1} \\in G$ 使得 $a_{\\rm LL}^{-1}a = e_{\\rm L}$\n\n\n首先证明对左单位元的左逆元也是对左单位元的右逆元。取 $a_{\\rm LL}^{-1}$ 的左逆 $(a_{\\rm LL}^{-1})_{\\rm LL}^{-1}$，那么：\n$$\naa_{\\rm LL}^{-1} = e_{\\rm L}aa_{\\rm LL}^{-1} = (a_{\\rm LL}^{-1})_{\\rm\nLL}^{-1}(a_{\\rm LL}^{-1}a)a_{\\rm LL}^{-1} = (a_{\\rm LL}^{-1})_{\\rm\nLL}^{-1}(e_{\\rm L}a_{\\rm LL}^{-1}) = e_{\\rm L}\n$$\n则现在将任意 a ∈ G\n对 $e_{\\rm L}$ 的逆记作 $a_{\\rm BL}^{-1}$。\n下面只需要说明左单位元也是右单位元，则不难得到该半群是群。考虑下述运算：\n$$\nae_{\\rm L} = a(a_{\\rm BL}^{-1}a) = (aa_{\\rm BL}^{-1})a = e_{\\rm L}a = a\n$$\n据此证明完毕。◼\n这个定理说明了半群升格为群并不需要单位元和逆左右同时满足，只需要满足一侧即可。\n在此基础上我们可以得到更通用的半群升格为群的条件：\nTheorem 2.4 半群 (G,⋅) 满足对 a, b ∈ G，方程\nax = b, xa = b\n都有解时为群。\n\n首先证明左单位元存在。任取一 g，取 xg = g 的解 $e_{\\rm L}$。之后任取 a，取 gx = a 的解 b，则：\n$$\ne_{\\rm L}a = e_{\\rm L}(gb) = (e_{\\rm L}g)b = gb = a\n$$\n左逆元根据 $xa = e_{\\rm L}$\n总有解保证。◼\nTheorem 2.4 有限半群 (G,⋅) 满足左右消去律时为群：\n$$\n\\begin{cases}\nxa = ya \\Rightarrow x = y \\\\\nax = ay \\Rightarrow x = y \\\\\n\\end{cases}\n$$\n\n取集合 aG = {ax : x ∈ G}，显然\naG ⊆ G。由于\nax = ay ⇔ x = y，说明\n|aG| = |G|，得到\naG = G。这说明\nax = b\n总有解。同理 xa = b\n总有解，证明完毕。◼\n记几个重要的群：\n\nGLn(F)\n是数域 F 上所有 n\n阶可逆线性变换对变换复合构成的群\nSA\n是所有可逆的 f : A → A\n对映射复合构成的群，称为 A\n上的对称群\n\n子群\n","categories":["【学习笔记】数学"]},{"title":"《组合数学》复习笔记","url":"/2024/01/09/note-of-cmath/","content":"写一些复习《组合数学》的时候的一些想法，大概也没什么用，但总之总比什么都不留下好那么一点点。\n\n加法乘法原理与简单计数\n这部分大概是考不到什么复杂的计数问题的，其实主要就考一个会不会构造模型化归到基础问题上的能力，这里大概记一些基本模型。\nTheorem 1 不定方程 x1 + x2 + ⋯ + xn = m\n的非负整数解的个数为 Cm + n − 1m。\n\nThought 1\n“不相邻”这个约束条件往往有两种解决方式。例如从 {1, 2, ⋯, n} 中不相邻地取 m 个数。\n\n记取出 a1 &lt; a2 &lt; ⋯ &lt; am，则\na1 &lt; a2 − 1 &lt; ⋯ &lt; am − m + 1\n是 {1, 2, ⋯, n − m + 1}\n的组合，从而方案数即为 Cn − m + 1m\n记取出 a1 &lt; a2 &lt; ⋯ &lt; am，用\nak + 1 − ak ≥ 2\n将之转化为不定方程解个数的问题（比较麻烦，不建议）\n\n\n鸽巢原理\nTheorem 2 给定正整数 a1, a2, ⋯, an，有\na1 + a2 + ⋯ + an − n + 1\n只鸽子进入 n\n个鸽巢中，那么必然存在一个 k\n使得第 k 个鸽巢中至少有 ak 只鸽子。\n令 a1 = a2 = ⋯ = an = 2，则得到基本的鸽巢原理版本。即，有\nn + 1 只鸽子进入 n\n个鸽巢中，那么必然存在一个鸽巢中至少有 2 只鸽子。\n\nThought 2\n前缀和构造大概是要好好记住的，遇到子序列和，前缀和几乎是唯一的构造方式。\n\n母函数\n考虑多重集合 A = {a1, a2, ⋯, an}，其中\nai\n的个数为 mi，则 A 的母函数为：\n$$\nf(x) = \\prod_{i = 1}^n (1 + x^{a_i} + x^{2a_i} + \\cdots + x^{m_ia_i})\n$$\n母函数的作用在于回答“从 A\n中取出若干数令其和为 N\n有多少种取法”这一问题，这一问题的答案为 f(x) 中 xN\n的系数。证明是显然的，这里略去。\nThought 3 好好算多项式长除法。\n\n除了上述定义，母函数还有一种定义是应用在数列 {an}\n上，其母函数定义为其幂级数：\n$$\nf(x) = \\sum_{n = 0}^\\infty a_nx^n\n$$\nThought 4\n你说多重集的母函数和数列的母函数到底是不是一个东西呢？我觉得不是，因为多重集的母函数充其量是一种把枚举法写得更数学一点的方式。\n\n数列的母函数的一大作用是给定数列递推关系的时候可以利用递推关系得到其母函数的方程，从而得到母函数的表达式，从而得到数列的通项公式。\nThought 5 数列求和、数乘就是母函数的加法和数乘：\n$$\n\\begin{aligned}\nf_{a_n + b_n}(x) &amp;= f_{a_n}(x) + f_{b_n}(x) \\\\\nf_{ka_n}(x) &amp;= kf_{a_n}(x)\n\\end{aligned}\n$$\n数列下标加减就是母函数的乘法（这里 an = 0, n &lt; 0）：\nfan − k(x) = xkfan(x)\n数列前缀和数列的母函数为：\n$$\nf_{S_n}(x) = \\frac{f_{a_n}(x)}{1 - x}\n$$\n母函数的导数和积分也会有其对应的序列：\n$$\n\\begin{aligned}\nf_{na_n}(x) &amp;= xf_{a_n}'(x) \\\\\nf_{\\frac{a_n}{1 + n}}(x) &amp;= \\frac{1}{x}\\int_0^x f_{a_n}(u){\\rm d}u\n\\end{aligned}\n$$\n母函数相乘等于序列卷积：\n$$\nf_{(a * b)_n}(x) = f_{a_n}(x)f_{b_n}(x), (a * b)_n := \\sum_{i = 0}^n\na_ib_{n - i}\n$$\n\n得到母函数之后返还到幂级数的方式比较有限（毕竟母函数方法也不是万能的），基本都是想办法分离为部分分式（部分分式指的是分子为常数，分母为线性式的分式）的和形式。这个拆分方式就是对分母因式分解后待定系数法。例如：\n$$\nf(x) = \\frac{x}{(1 - x)(1 - 2x)} = \\frac{A}{1 - x} + \\frac{B}{1 - 2x}\n$$\n然后部分分式返还到等比数列无穷求和的形式，就可以得到幂级数形式了。\nThought 5 Fibonacci 数列 {Fn}\n的平方和是可以简单表述的：\n$$\n\\sum_{i = 1}^n F_i^2 = F_nF_{n + 1}\n$$\n\n用母函数很容易得到线性常系数递推关系存在一套通用解法，我相信大家高中都练习过也都知道这是什么东西，这里就不赘述了。只需要记住母函数和特征多项式存在下述关系就行：\nTheorem 3 数列 {an}\n是线性常系数递推的，其特征多项式为 C(x)，次数为 n，则该数列的母函数化简后，分母为\n$x^nC\\left(\\dfrac1x\\right)$，分子则取决于数列的初始项。\n\n除了上述基本的线性形式的母函数，还有指数形式母函数。定义就是将 xn 换成 $\\dfrac{x^n}{n!}$，之后使用系数的时候需要乘以\nn!。做这种形式的母函数的化简就需要用到\nex 的\nTaylor 展开，而非线性形式的等比数列求和。\nThought 6 错排数 Dn\n的递推公式为：\nDn = (n−1)(Dn − 1+Dn − 2)\n通项公式为：\n$$\nD_n = n!\\sum_{i = 0}^n \\frac{(-1)^i}{i!}\n$$\n\n有关指数形式母函数和 Stirling 数的一些东西后面再来补充。\n容斥原理\nTheorem 4 设 A1, A2, ⋯, An\n是有限集合，$S = \\bigcup_{i = 1}^n\nA_i$，则：\n$$\n\\left|\\bigcup_{i = 1}^n A_i\\right| = \\sum_{i = 1}^n |A_i| - \\sum_{1 \\leq\ni &lt; j \\leq n} |A_i \\cap A_j| + \\cdots + (-1)^{n - 1}|A_1 \\cap A_2\n\\cap \\cdots \\cap A_n|\n$$\n\nThought 7 Euler 函数 φ(n) 表示小于等于 n 且与 n 互质的正整数的个数。那么有：\n$$\n\\varphi(n) = n\\prod_{p | n}\\left(1 - \\frac{1}{p}\\right)\n$$\n\n群论与 Polya 定理\nTheorem 5 Burnside 引理指的是，设 G 是一个有限群，X 是一个有限集合，G 作用在 X 上，对于 g ∈ G，记 Xg 为 X 中在 g 作用下不变的元素的集合，则：\n$$\n|X / G| = \\frac{1}{|G|}\\sum_{g \\in G}|X^g|\n$$\n\nTheorem 6 Polya 定理指的是，设 G 是 X 上的置换群，对于 g ∈ G，c(g) 为 g 的循环节个数，则若使用 m 种颜色对 X 的元素染色，染色方案数为：\n$$\nN = \\frac{1}{|G|}\\sum_{g \\in G}m^{c(g)}\n$$\n\n","categories":["【学习笔记】数学"]},{"title":"《汇编语言程序设计》学习笔记","url":"/2021/08/09/note-of-asm/","content":"这门课是 2021\n年暑期学期开设的计算机系专业课，应该也算是为下学期的《计算机组成原理》课程做预备，所以还打算好好学一下。\n\n课程基本介绍\n汇编语言介绍\n汇编语言可以认为是机器指令的一种表记方式，其表述了计算机硬件系统对外开放的主要接口和规格，是计算机系统之中的软硬件的分界。所以说要了解汇编语言，就首先需要了解机器指令。\n机器指令系统一般分为两类：\n\nCLSC，即复杂指令系统。一般而言具有多种指令，寻址方式复杂，单条指令的功能较为复杂。较为经典的代表是\nX86。\nRISC，即精简指令系统。考虑到实际使用的指令大多都是简要指令，故该系统只具有常用的精简指令。在这样的条件下，该指令系统依赖于编译器产生高效的代码（依赖编译器优化）。较为经典的代表为\nMIPS。\n\n目前，CLSC 和 RISC\n之间的差别渐渐缩小。但是还是具有明显的区分方式的，即：\nIt loads / stores [with / without] other operations.\n\n借助于连接软硬件的机器指令集，计算机系统实现了软硬件解耦合。这样软硬件可以独立编写，从而促进了计算机的发展。\n注解：软硬件的分离的一个重要基石是图灵完备性。也就是说软件使用的高级语言是图灵完备的，硬件的指令序列也是图灵完备的，这两者完全等价。这样才保证了分离的可行性。\nX86 指令集介绍\nX86 指令集具有以下的基本特征：\n\n向下兼容、变长指令、多种寻址方式\n通用寄存器个数有限（X86-32 具有 8 个通用寄存器，X86-64 具有 16\n个通用寄存器）\n至多允许一个操作数在内存中，另外一个操作数需要在寄存器中或者是立即数\n\n这里提到了寄存器。X86 之中的寄存器命名为：\n\n\n\n\n\n\n\n\n\n寄存器名称【 X86-64 名称】\nX86-32 名称\n寄存器名称【 X86-64 名称】\nX86-32 名称\n\n\n\n\n%rax\n%eax\n%r8\n%r8d\n\n\n%rdx\n%edx\n%r9\n%r9d\n\n\n%rcx\n%ecx\n%r10\n%r10d\n\n\n%rbx\n%ebx\n%r11\n%r11d\n\n\n%rsi\n%esi\n%r12\n%r12d\n\n\n%rdi\n%edi\n%r13\n%r13d\n\n\n%rsp\n%esp\n%r14\n%r14d\n\n\n%rbp\n%ebp\n%r15\n%r15d\n\n\n\n\n由于 X86\n重视向下兼容，所以其指令集越来越趋向于庞杂，所以其一个缺点就是资源利用率低。\nMIPS 指令集介绍\nMIPS\n的设计思想是充分利用处理器的流水线结构，目标是让流水线各段负载均匀，这样可以让处理器频率得到提高。其特征包括：\n\n以寄存器为中心，只有 Load 以及 Store 命令可以访问内存\n所有计算操作均是从寄存器堆之中读取数据并将结果保存到寄存器堆，一共具有\n32 个通用寄存器\n指令格式规整、定长，且操作码位置固定，指令类型少（MIPS32\n的指令只有 register / immediate / jump 三类）\n寻址方式简单，每一条指令的操作过程简单\n\n当然，MIPS 也具有一些被扩展过的扩展指令集，如 MIPS16e 等等。\n此外，RISC-V 也是一种常用指令集。但其几乎和 MIPS\n同源，故这里不作详细介绍。\n整数的表示与计算\n首先我们介绍一些简要表记，即 K / M / G / T / P / E。符号 K 表示 210，之后有 ${\\rm M} = 2^{10} \\cdot {\\rm K}$ 以及 ${\\rm G} = 2^{10} \\cdot {\\rm\nM}$，依此类推。\n同时我们将一个二进制位称为比特（bit），将八个比特称为字节（byte）。在\nX86 架构下，两个字节称为一个字（word），而在 MIPS\n架构下则是四个字节。\n对于数的进制、二进制数的逻辑运算，这里不进行介绍。\n机器字和字节序\n首先引入机器字的概念，机器字指的是计算机进行一次整数运算所能处理的二进制数据组，也可以是一个数据地址。相应的，机器字长指的就是一个机器字的位数。对于\n32 位字长的计算机，其地址能够表示的空间大小为 4GB\n左右。机器字长越大的计算机，其地址的表示空间就越大。\n机器字的定位为这个机器字第一个字节的地址，所以说相邻机器字的地址之差在\n32 位系统之中为 4，而在 64 位系统之中为 8。\n字节序指的就是一个机器字所包含的字节在机器字之中的排列的顺序，分为大端序（Big\nendian）以及小端序（Little\nendian）。大端序指的是低位字节占据高地址，小端序则相反。\n比如说十六进制数据 0x01234567，如果这个机器字地址为\n0x100。那么在大端序之下，0x100, 0x101, 0x102, 0x103\n的字节内容分别为 01, 23, 45, 67。而在小端序下则是\n67, 45, 23, 01。\n整数的二进制编码\n我们首先复习一下 C\n语言之中各个数据类型的大小，这里以字节作为单位：\n\n\n\n数据类型\n经典 32 位系统\nX86-32\nX86-64\n\n\n\n\nchar\n1\n1\n1\n\n\nshort\n2\n2\n2\n\n\nint\n4\n4\n4\n\n\nlong\n4\n4\n8\n\n\nlong long\n8\n8\n8\n\n\nfloat\n4\n4\n4\n\n\ndouble\n8\n8\n8\n\n\nlong double\n8\n10 / 12\n10 / 16\n\n\n指针\n4\n4\n8\n\n\n\n这里我们为了简便，使用 16\n位系统来演示整数的编码方式，也就是说机器字长为 16 位，一个整数使用 2\n个字节表示。\n有符号数的编码\n对于非负的整数，显然可以直接使用其二进制表示作为其编码。比如说十进制数\n12345，其二进制表示为\n00110000 00111001，那么其编码就是\n00110000 00111001。\n对于负数，一种解决方式是使用最高位表记符号，最高位为 1\n的数为负数，为 0\n的数为非负数。然而这样会导致加法器在运算的时候需要首先验证符号位，计算出结果后还需要计算符号为，比较繁杂。所以说这里引入了补码（two’s\ncomplement），用补码表示的整数可以简化有符号整数的计算。\n非负数的补码就是其二进制表示，负数的补码是其绝对值的二进制表示按位取反之后加一。\n比如说十进制数 -12345，由于 12345\n的二进制表示为 00110000 00111001，首先按位取反得到\n11001111 11000110，最后加一得到其补码为\n11001111 11000111。\n这个时候符号位依然存在，也就是说补码表示下负数最高位为\n1，非负数最高位为 0。\n补码的优越性在于简化了有符号整数的加法计算。如果我们使用 ${\\rm TC}_w(x)$ 表示字长为 w 的系统下整数 x 的补码（比如 -12345\n的补码为 11001111 11000111，后者直接转换为十进制表示的是\n53191，那么定义 ${\\rm\nTC}_w(-12345) = 53191$）。实际上可以发现对于非负数 ${\\rm TC}_w(x)=x$，而对于负数：\n$$\n{\\rm TC}_w(x) = 1 + \\mathop{\\sim}(-x)\n$$\n而对于字长为 w\n的系统，x + (∼x) = 2w − 1，所以说对于负数\nx 有：\n$$\n{\\rm TC}_w(x) = 1 + 2^w - 1 - (-x) = 2^w + x\n$$\n所以无论如何我们都可以断定：\n$$\n{\\rm TC}_w(x) \\equiv x\\ ({\\rm mod}\\ 2^w)\n$$\n在这样的条件下做加法是简单的，因为一个整数和其补码在模 2w\n意义下等价。后面讨论补码条件下的加法的时候，即使出现截断，由于所截断的\n1 必然位于不低于 2w\n的位上，所以截断还是不会影响模的结果。\n\n对于字长为 w\n的系统，按照补码表示的有符号数系统之中，最大的数为 2w − 1 − 1，而最小的数为\n − 2w − 1。\n无符号数的编码\n无符号数的编码是简单的，因为其只需要考虑非负数，所以直接使用二进制表示作为编码就可以了。\n这种系统之下，最大的数为 2w − 1，而最小的数为\n0。\n有符号数和无符号数的关系和转换\n现在我们已经给出了有符号和无符号整数的表示方式了。现在考虑将一个有符号整数强制类型转换为无符号整数，比如说在机器字长为\n4 的时候，-4 的补码为\n1010，而强转为无符号整数的时候，1010 则表示\n12。其实不难证明对于字长为 w 的系统，有这样的关系：\n$$\n(\\text{unsigned})x = \\begin{cases}\nx &amp; x \\geq 0 \\\\\nx + 2^w &amp; x &lt; 0\n\\end{cases}\n$$\n这里提一下，在 C\n语言的比较运算之中如果同时出现有符号数和无符号数，则会将有符号数强制转换为无符号数。当然，如果两边都是有符号数，则按照有符号数的比较规则进行。\n事实上，由于这样的隐式转换，如果我们给声明为无符号整数的变量赋予一个负数值，就有可能被强制转换为一个大整数，从而导致违反直觉的结果，甚至导致错误。所以说我们应当谨慎使用无符号整数，一般而言，只有涉及到模运算或者单纯使用位运算的时候无符号整数比较适合。\n整数的计算\n无符号整数的加法\n对于字长为 w\n的系统，两个整数的加法可能会需要 w + 1\n位才能表示，这个时候就会发生溢出。计算机的一般处理方式是舍去最高位，强制仅用\nw 位表达计算结果，其实相当于对\n2w\n取了模。也就是说，字长为 w\n的、带有截断的无符号整数加法为（这里，符号 $+^{\\text u}_w$ 表示的是字长为 w 的系统下无符号整数的加法）：\n$$\nx +^{\\text{u}}_w y =\\begin{cases}\nx + y &amp; x + y &lt; 2^w \\\\\nx + y - 2^w &amp; x + y \\geq 2^w\n\\end{cases}\n$$\n有符号整数的加法\n在字长为 w\n的、使用补码的系统下，对于有符号整数 x, y，其加法是有可能溢出的。\n一种是两个大正数相加，超越了补码能表示的最大整数。此时补码的符号位承接了较低位溢出的\n1，也就是说补码之和实际上代表一个负数。由于负数 u 的补码 ${\\rm TC}_w(u) = u + 2^w$，这个负数实际上就是\nx + y − 2w。这种情况被称为正溢出。\n另外一种是两个绝对值很大的负数相加，超越了补码能表示的最小整数。此时补码符号位两个\n1 相加得到 10，溢出为 w + 1 位数，但是最高位的\n1 被截断。另外，较低的 w − 1\n位不会向上进位（绝对值很大的负数的补码较低位所表示的数实际上会很小）。此时结果的补码符号位为\n0，代表一个正数。由于负数 u 的补码 ${\\rm TC}_w(u) = u + 2^w$，考虑到截断了一个\n1，所以该正数为：\n(x+2w) + (y+2w) − 2w = x + y + 2w\n这种情况被称为负溢出。\n对于求和结果在表示范围内的，补码的和（截断为 w 位后）就是和的补码。这是因为 x, y\n的补码相加后截断，所代表的数与 x + y 模 2w 同余，而 x + y\n位于补码能表示的范围内，所以 x, y\n的补码相加后截断得到的就是 x + y 的补码。\n总而言之，字长为 w\n的、带有截断的有符号整数加法为（这里，符号 $+^{\\text t}_w$ 表示的是字长为 w 的系统下无符号整数的加法）：\n$$\nx +^{\\text{t}}_w y = \\begin{cases}\nx + y - 2^w &amp; x + y \\geq 2^{w - 1} \\\\\nx + y &amp; -2^{w - 1} \\leq x + y &lt; 2^{w - 1} \\\\\nx + y + 2^w &amp; x + y &lt; -2^{w - 1}\n\\end{cases}\n$$\n无符号整数除以 2 的幂\n一般而言在计算机中，除法计算消耗的时间是相当长的。但是对于除数是 2\n的幂的情况，我们可以使用移位的方式简化计算。\n左移是很好理解的，溢出的部分会被截断，低位会用 0\n补齐。但是右移的时候，低位截断是自然的，但是高位如何补齐则有两种方式。如果高位用\n0\n补齐，这种移位称为逻辑右移。如果用原数的最高位补齐（这里的最高位可以是\n0，比如 16 位系统之中的 00000000 00000001\n的最高位为 0），这种移位称为算术右移。\n在字长为 w\n的系统下，我们将无符号的逻辑右移标记为 &gt;wul，无符号的算术右移则标记为\n&gt;wum。\n注解：有符号的右移则将上标的 u 替换为 t。\n其实对于无符号整数 x\n不难得到：\n$$\nx &gt;^{\\text{ul}}_w k = \\left\\lfloor \\frac{x}{2^k} \\right\\rfloor\n$$\n有符号整数除以 2 的幂\n首先说明，我们希望除法的结果向 0 舍入，也就是说\n23.6 舍为 23，-24.6 舍为\n-24。\n这里我们依然使用右移来简化除法计算。但是我们注意到负数除以 2\n的幂之后必然还是负数，所以不能使用逻辑右移，只能使用算数右移。这个时候，对于有符号整数\nx 我们可以简单地使用 x&gt;wtmk\n来计算 x/2k。\n对于正数，这样的计算显然是正确的。但是对于负数，比如说\n-15213，其补码为\n11000100 10010011。我们计算其除以 256\n的商，按照上面的计算方式即将其补码算术右移 8 位，得到\n11111111 11000100，结果为\n-60。然而我们知道实际的结果应当为\n-59.43，按照舍入应当保留为 -59。\n事实上我们可以说明：\n$$\nx &gt;^{\\text{tm}}_w k = \\left\\lfloor \\frac{x}{2^k} \\right\\rfloor\n$$\n也就是说使用算术右移计算有符号整数的时候永远得到向下舍入的结果。我们只要说明负数的情况即可，对于负数\nx 的补码 xw − 1xw − 2⋯x0，我们设二进制数\nxw − 1xw − 2⋯xk\n表示数 x′，二进制数 xk − 1xk − 2⋯x0\n表示数 x″ &lt; 2k。显然：\n$$\n2^k x' + x'' = {\\rm TC}_w(x) = 2^w + x\n$$\n而 x&gt;wtmk\n得到的是 xw − 1xw − 1⋯xw − 1xw − 2⋯xk，其表示数：\n$$\nx' + \\sum_{i = w - k}^{w - 1} 2^i = x' + 2^{w - k}(2^k - 1)\n$$\n按照补码去解读这个二进制串的话，其结果为 x′ + 2w − k(2k−1) − 2w = x′ − 2w − k。也就能够计算得到：\n$$\n\\left\\lfloor \\frac{x}{2^k} \\right\\rfloor = \\left\\lfloor \\frac{2^k x' +\nx'' - 2^w}{2^k} \\right\\rfloor = \\left\\lfloor x' - 2^{w - k} +\n\\frac{x''}{2^k} \\right\\rfloor = x' - 2^{w - k} = x &gt;^{\\text{tm}}_w k\n$$\n\n为了修正这个舍入问题，我们可以尝试使用这样的一个性质：\n$$\n\\left\\lceil \\frac{x}{y} \\right\\rceil = \\left\\lfloor \\frac{x + y - 1}{y}\n\\right\\rfloor\\ (y &gt; 0)\n$$\n也就是说我们只要在计算负数 x 的时候改变为：\n$$\n\\left\\lfloor \\frac{x + 2^k - 1}{2^k} \\right\\rfloor = [x +^{\\text{t}}_w\n(2^k - 1)] &gt;^{\\text{tm}}_w k\n$$\n即可。\n小数的表示\nIEEE 浮点数标准\n对于一个有小数部分的数 B，我们总是能找到唯一的 s ∈ {0, 1} 以及实数 M ∈ [1, 2) 和整数 E 满足：\nB = (−1)sM ⋅ 2E\n这里 s, E, M\n分别称为符号、阶码和尾数。\n基于这样的性质，我们可以给出小数的表示方式。将一片数据区域的最高位用于放置符号位\ns，然后后面分割为两部分，即\nexp 域和 frac 域，分别放置 E 以及 M。exp 域和 frac\n域的具体大小有两种常见的制式（即单精度浮点和双精度浮点）。当然还有一些不太常用的分区方式，具体见表：\n\n\n\n标准\nexp 域长度\nfrac 域长度\n浮点总长\n备注\n\n\n\n\n单精度浮点\n8 bits\n23 bits\n4 字节\n\n\n\n双精度浮点\n11 bits\n52 bits\n8 字节\n\n\n\n扩展精度浮点\n15 bits\n63 bits\n10 字节\n空置 1 bit\n\n\n半精度浮点\n5 bits\n10 bits\n2 字节\n\n\n\n\n在具体存储的时候，尾数由于整数部分必然为\n1，所以只需要将小数部分按顺序存储即可，而阶码使用无符号整数方法存储。\n这里注意，阶码理应是有可能为负数的，但一般存储的时候会将阶码加上一个固定的偏置变成正数之后存储。如果阶码长度为\ne，那么这个偏置就是 b = 2e − 1 − 1。\n比如说按照单精度浮点的方式存储数 15213.0，其二进制表示为\n1.1101101101101 × 213。所以符号位为\n0，尾数取小数部分前 23 位，即\n1101101 10110100 00000000。阶码为 13，加上偏置\n27 − 1 = 127 得到\n140，即 10001100。所以最后的存储方式为：\nBits01000110 01101101 10110100 00000000\n浮点数的非规格化\n事实上，浮点数标准保留一部分阶码用于表示特殊的数字。一般而言，阶码全\n1 和全 0 是被保留的。具体而言，阶码全\n1 和全 0\n的、表述特殊数字的浮点数被称为非规格化浮点数（denormalized float\npoint），其余的被称为规格化浮点数（normalized float\npoint）。\n全 0\n的阶码如果按照上述的标准解读的话，表示的是相当接近于零的小数。但是由于默认了尾数的整数部分为\n1，所以说还按照原有解读方式的话，浮点数无法表示\n0。这个时候作出规定，就是阶码全 0\n的时候，尾数的整数部分变为\n0。相应的，为了配合尾数解读方式的调整，阶码的偏置减去一。\n假设某浮点数标准之中阶码长为 e，尾数长为 m。那么规格化的条件下最小的正浮点数应当是阶码为\n00...01，尾数全 0。此时表示的数为 21 − (2e − 1−1) = 22 − 2e − 1。在非规格化条件下，如果将尾数按照无符号整数解析得到的非负整数标记为\nn，那么该浮点数应该为 22 − 2e − 1 ⋅ 2−mn。这里非负整数\nn 取值范围为 0 到 2m − 1。\n所以说非规格化的浮点数所能表述的非负数序列为：\n0, 22 − 2e − 1 ⋅ 2−m ⋅ 1, ⋯, 22 − 2e − 1 ⋅ 2−m(2m−1)\n这是一个公差为 22 − 2e − 1 ⋅ 2−m\n的等差数列，而且最后正好可以和规格化浮点数所表述的最小正数 22 − 2e − 1\n“无缝衔接”。所以说非规格化浮点数是一个合理的拓展。\n但是，注意非规格化浮点数之中有 +0 和 -0\n的区别。\n全 1 的阶码用于表示很大的浮点数。一般而言尾数全\n0 的时候该浮点数被保留用于表示无穷。而尾数有非\n0 位的时候，该浮点数被保留用于表示 NaN。\n\n现在补全了非规格化浮点数之后，可以发现浮点数的大小比较实际上几乎可以按照无符号整数从高位直接比较到低位的逻辑进行。因为阶码大的数一定大，阶码一样的时候尾数大的数一定大，包括无穷大也可以纳入进来。但是要考虑这样的例外：\n\n考虑符号位\n考虑 +0 和 -0 的特例\n考虑 NaN 的问题\n\n浮点数的舍入问题\n由于部分数不能表述为有限的二进制小数，所以在转化为浮点数表示的时候需要舍入。一般而言向上舍入、向下舍入、向零舍入都会带来统计误差，而计算机之中常常使用向偶数舍入。其舍入的规则是向最接近的数舍入。如果向两边舍入的距离一致，那么优先舍入到偶数。比如说下列数之中，向百分位的舍入为：\n$$\n\\begin{aligned}\n&amp; 12.324999 \\Rightarrow 12.32 \\\\\n&amp; 12.325001 \\Rightarrow 12.33 \\\\\n&amp; 12.325000 \\Rightarrow 12.32 \\\\\n&amp; 12.335000 \\Rightarrow 12.34 \\\\\n\\end{aligned}\n$$\n回到二进制上的话，由于十进制的 0.5 相当于二进制的\n0.1。也就是说如果二进制小数之中后面需要舍去的部分大于\n100... 则向上舍入，小于 100...\n则向下舍入，恰好是 100... 则向偶数舍入（舍入完毕后尾数为\n0）。\n这里要注意一点，舍入是有可能导致溢出。\n\n至此，小数的计算机编码方式基本就介绍完毕了。其具体过程为：\n\n根据使用的浮点数标准，判定使用规格化的浮点数还是非规格化的浮点数\n据此判定符号位、阶码和尾数\n对尾数进行舍入后转化为二进制表示\n\nC 语言的浮点数\nC 语言之中，int 类型以及 float 类型是 4\n字节的，double 则是 8\n字节。它们之间的互相转换满足这样的规则：\n\nint 可以精确转换为 double 类型\nint 转换为 float\n类型不会溢出，但有可能被舍入\nfloat 以及 double 转换为\nint 时尾数截断，如果发生溢出则产生 UB\n\n汇编语言基本知识\n在这一部分，我们使用指令集架构（Instruction Set Architecture,\nISA）来定义机器级程序的行为。在这个架构之中，CPU\n内有一个记录下一条指令在主存储器之中位置的指令寄存器（Program\nCounter, PC），这个寄存器在 X86 体系中被命名为\n%rip。CPU\n之中同时还具有若干个寄存器，以及一个用于存储最近执行指令的结果状态信息的条件码寄存器。除去\nCPU\n外，这个架构之中还有主存储器，其可以认为是以字节为单元的一片连续的地址空间。\n汇编语言的数据类型\n和 C\n语言不同，汇编语言不区分具体的数据类别，其不关心某一组二进制数据具体代表什么类型的数据。其不区分有符号和无符号的整数，甚至不区分指针和整数。其一般只区分数据的长度为字节、字、双字、四字。在处理这四种长度的数据的时候，指令的后缀分别为\nb, w, l, q。比如说传送数据的命令为\nmov，在传送字节的时候该命令写为\nmovb，在传送单字的时候该命令写为 movw\n等等。\n汇编语言的数据操作\n汇编语言的基本操作只包括对寄存器或主存数据进行运算、在寄存器和主存内部或者之间传递数据、转移程序执行位置这三种。\n在 X86-64\n系统之下，寄存器是四字长的、通过名称访问的一片空间。但实际上有的时候指令可以不用访问整个四字长的寄存器空间，其可以通过\n32 位操作访问四个字之中较低位的两个字，通过 16\n位操作访问四个字中最低位的字，也可以通过字节操作访问最低位的字节。相应的，指代这一片寄存器空间的名称有所改变：\n\n\n\n\n\n\n\n\n\n\n\n\n\n64 位操作\n32 位操作\n16 位操作\n字节操作\n64 位操作\n32 位操作\n16 位操作\n字节操作\n\n\n\n\n%rax\n%eax\n%ax\n%al\n%r8\n%r8d\n%r8w\n%r8b\n\n\n%rdx\n%edx\n%dx\n%dl\n%r9\n%r9d\n%r9w\n%r9b\n\n\n%rcx\n%ecx\n%cx\n%cl\n%r10\n%r10d\n%r10w\n%r10b\n\n\n%rbx\n%ebx\n%bx\n%bl\n%r11\n%r11d\n%r11w\n%r11b\n\n\n%rsi\n%esi\n%si\n%sil\n%r12\n%r12d\n%r12w\n%r12b\n\n\n%rdi\n%edi\n%di\n%dil\n%r13\n%r13d\n%r13w\n%r13b\n\n\n%rsp\n%esp\n%sp\n%spl\n%r14\n%r14d\n%r14w\n%r14b\n\n\n%rbp\n%ebp\n%bp\n%bpl\n%r15\n%r15d\n%r15w\n%r15b\n\n\n\n实际上，有的时候我们还可以用字节操作访问\n%rax, %rbx, %rcx, %rdx\n这四个寄存器的倒数第二低位的字节，指代这一部分空间的名称则为\n%ah, %bh, %ch, %dh。\n\n在具体进行操作的时候，一个机器指令往往需要跟随若干的操作数具体规定操作方法（如传送数据的时候，需要通过操作数指定传送的起始位置和终止位置）。操作数有三种表述方式：\n\n立即数。其是一个整型的常数，写法为\n$ 后接上一个 C 风格的数字表示这个立即数的值。比如说\n$-521 以及 $0x4FD。\n寄存器数值。直接使用寄存器的名称访问，如\n%rbp 就代表这个寄存器之中的数据。但是注意，寄存器\n%rsp 一般而言是被保留的。\n主存数值。使用地址访问，其地址由某一个寄存器之中的数据指定，写法为寄存器名称加括号。比如说要访问某一个主存数值，其地址存储在寄存器\n%rax 之中，那么其写法为 (%rax)。\n\n汇编语言的寻址方式\nX86 系统的变址寻址方式\n但实际上，在 X86\n系统中访问主存数值的方式（这也被称为寻址方式）并不是单一的。除去直接使用寄存器之中的数据作为地址去访问，X86\n系统提供了包含变址、立即数偏移的寻址模式，其表记一般为\nIMM(a, b, s)。这里 IMM\n为一个立即数，称为立即数偏移，a, b\n为两个寄存器名，分别称为定址寄存器和变址寄存器，s\n为 1, 2, 4, 8\n之中的一个数，称为比例因子。这个记号所代表的地址为：\n$$\n{\\rm IMM} + {\\rm R}(a) + {\\rm R}(b) \\cdot s\n$$\n这里符号 ${\\rm R}(a)$ 表示寄存器\na 之中的数据。\n这个表记存在一系列简写：\n\n当不存在定址和变址寄存器的时候，简写为\nIMM。这个时候相当于不经过寄存器直接指定主存中的某一个地址，称为绝对寻址。\n当 IMM 为\n0，不存在变址寄存器的时候，简写为\n(a)。这也就是最简单的寻址方式，即直接将寄存器数值作为地址解读，称为间接寻址。\n当存在变址寄存器但 s 为 1\n的时候，简写为 IMM(a, b)。\n\n\n现在我们就可以尝试解读一些汇编代码了，比如：\nX86-64 Assemblymovq $-147, (%rax)\n这个指令的意思是按照四字数据转移的方式，将立即数 -147\n写入主存，写入地址为寄存器 %rax 的数值。\n利用寻址进行整数计算\n地址实际上也可以被解读为整数，而机器进行寻址的时候实际上就在完成整数计算。根据上面给出的变址寻址方式，我们可以利用寻址命令来计算类似\nx + ky\n的整数算式。\n首先需要知道指令：\nX86-64 Assemblyleaq [SRC], [DEST]\n这里 [SRC] 是一个寻址表达式，其计算出来的结果将赋给\n[DEST]。比如 leaq (%rdi, %rdi, 2), %rax\n会将前面寻址计算出来的地址赋予寄存器 %rax。\n实际上在编译器优化之中，部分整数运算都会被优化为地址计算。比如说\nx * 12 这个代码有可能会被转化为如下的汇编代码：\nX86-64 Assemblyleaq (%rdi, %rdi, 2), %raxsalq $2, %rax\n第一步使用地址计算实际上计算了 x + x * 2，即三倍的\nx。第二步命令为左移，左移两位即再次乘以 4\n得到最后结果。\n汇编语言常用的整数计算命令\n汇编语言计算整数运算的时候，会有如下表所列出的常用命令。\n\n\n\n命令格式\n等价的 C 代码\n备注\n\n\n\n\naddq [SRC], [DEST]\nDEST = DEST + SRC\n\n\n\nsubq [SRC], [DEST]\nDEST = DEST - SRC\n\n\n\nimulq [SRC], [DEST]\nDEST = DEST * SRC\n结果取较低的 64 位截断\n\n\nsalq [SRC], [DEST]\nDEST = DEST &lt;&lt; SRC\n与逻辑左移 shll 等价\n\n\nsarq [SRC], [DEST]\nDEST = DEST &gt;&gt; SRC\n算术右移\n\n\nshrq [SRC], [DEST]\nDEST = DEST &gt;&gt; SRC\n逻辑右移\n\n\nxorq [SRC], [DEST]\nDEST = DEST ^ SRC\n\n\n\nandq [SRC], [DEST]\nDEST = DEST &amp; SRC\n\n\n\norq [SRC], [DEST]\nDEST = DEST | SRC\n\n\n\nincq [DEST]\nDEST = DEST + 1\n\n\n\ndecq [DEST]\nDEST = DEST - 1\n\n\n\nnegq [DEST]\nDEST = -DEST\n\n\n\nnotq [DEST]\nDEST = ~DEST\n\n\n\n\n条件码与其应用\n当程序运行的时候，部分和当前程序运行状态相关的数据将会被 CPU\n保存。我们已经介绍过指向下一条指令的程序计数器\n%rip，存储临时数据的寄存器堆。另外我们要提到的是被保留的寄存器\n%rsp\n其用于存储栈顶地址。另外提一下条件码，条件码一般分为四个：\n\n\n\n条件码标记\n名称\n备注\n\n\n\n\nCF\nCarry Flag\n进位标记\n\n\nZF\nZero Flag\n运算数为零标记\n\n\nSF\nSign Flag\n运算数符号标记\n\n\nOF\nOverflow Flag\n补码运算溢出标记\n\n\n\n条件码一般是由算术指令运算过程中隐含地设定的，具体如何设定条件码需要查看具体的命令运行方式。这里额外指出，leaq\n指令计算的时候不设置条件码。\n推知操作数关系\n若干以 set\n为前缀的命令可以读取条件码的内容并存入某寄存器的最低位字节（使用字节操作）。比如说\nsetle 命令实际上会读取 SF, OF, ZF\n三个条件码，将 (SF ^ OF) | ZF 的计算结果存入指定字节。\n这个计算结果其实就代表了两个操作数之间的一个关系。比如说\ncmpq [SRC], [DEST] 指令在 SRC == DEST\n的时候会将 ZF 置真，在 DEST - SRC &lt; 0\n的时候将 SF 置真，在运算溢出的时候将 OF\n置真。那么 setle 所计算的结果为真实际上就代表\nDEST &lt;= SRC。\n这里给出具体示例，比如以下 C 语言代码：\nC++int gt(int x, int y) &#123; return x &gt; y; &#125;\n会被汇编为：\nX86-64 Assemblycmpq   %rsi, %rdisetg   %almovzbl %al, %eaxret\n其含义为首先使用 cmpq 命令更新条件码，然后使用\nsetg 命令读取条件码，最后使用 movzbl\n将计算结果移动到表示函数返回值的寄存器。\n实现程序跳转\n对于 C 语言之中的 if, goto\n等涉及到程序跳转的语句，汇编之中也应当有相应的可以跳转执行的命令，而条件码及其相关运算结果会控制程序是否跳转。与\nset 系列命令一致，汇编之中还有 j 系列命令，如\nje。其会读取条件码并计算，结果为真则会触发程序跳转。\n比如这样的 C 代码：\nC++long absdiff(long x, long y) &#123;    long result;    if (x &gt; y) result = x - y;    else result = y - x;    return result;&#125; \n会被汇编为：\nX86-64 Assemblyabsdiff:    cmpq %rsi, %rdi    jle  .L4    movq %rdi, %rax    subq %rsi, %rax    ret.L4:    movq %rsi, %rax    subq %rdi, %rax    ret\n这里第三行就会读取 cmpq\n命令设置的条件码，如果满足了跳转条件，就会跳转到 .L4\n标记处继续执行，否则向下继续执行。\n实际上，汇编代码的跳转基本和 C 语言之中的 goto\n类似，所以我们可以将 if 转为等价的 goto\n表达式，这样的话就可以得到和汇编代码形式类似的 C 代码。对于以下的 C\n代码：\nC++if (CASE) &#123; /* IF BLOCK */ &#125;else &#123; /* ELSE BLOCK */ &#125;\n实际上等价于以下 C 代码：\nC++if (!CASE) goto Else;    /* IF BLOCK */    goto Done;Else:    /* ELSE BLOCK*/Done:\n使用条件码实现程序跳转的方式称为条件跳转。但实际上，条件跳转一般会拖慢整个系统的速度。这是因为现代的流水线式处理器一般要求系统能够基本精确得知接下来应当运行的指令是什么，这样才能保证并发执行，获得高效率。\n为了解决这个问题，一种方法是提高处理器对下面具体运行哪一个分支的预测准确率，一种方法是使用条件转移。\n条件转移指的是将两个分支的结果都计算出来，最后再根据条件码决定取用哪一个。比如说上面的\nabsdiff 函数，现代编译器一般会把 x - y 和\ny - x\n都计算出来，最后根据条件码取其中一个放到返回值寄存器上。\n但是条件转移的使用是有局限性的，比如说下面两种情况就并不适合：\n\n某一个分支有副作用，比如说修改了某些其他数据\n某一个分支的计算量过于庞大\n\n\n除去 if，C 语言中还可以使用 switch\n语句实现程序跳转。switch 语句可以翻译为若干的\nif-else\n组，但是更常见的解读方式是构建跳转表。\nTODO\n实现程序循环\nC 语言之中使用关键字 do, while, for\n可以实现程序循环，同样我们可以使用条件码和 j\n系列命令完成等价汇编代码编写，实际上我们只需要改写为等价的\ngoto 表达的 C 代码就可以。\n对于 do ... while 循环，等价改写为：\nC++/* do ... while */do &#123; /* CONTENT */ &#125; while (CASE)/* goto */Loop:    /* CONTENT */if (CASE) goto Loop;\n对于 while 循环，等价改写为：\nC++/* while */while (CASE) &#123; /* CONTENT */ &#125;/* goto v1 */goto Test;Loop:    /* CONTENT */Test:    if (CASE) goto Loop;/* goto v2 */if (!CASE) goto Done;Loop:    /* CONTENT */if (CASE) goto Loop;Done:\n而 for 循环一般是改写为等价的 while\n循环后再改写为 goto 版本：\nC++/* for */for (/* INIT */; CASE; /* UPDATE */) &#123; /* CONTENT */ &#125;/* while *//* INIT */while (CASE) &#123;    /* CONTENT */    /* UPDATE */&#125;\n函数调用与程序栈\n程序栈和相关指令\nX86\n系统中，将一片内存区域按照栈的方式管理，其中高地址为栈底，这片内存区域就被称为程序栈，其栈顶地址由寄存器\n%rsp 管理。\n对程序栈有两种最为基本的操作，即压栈和出栈。压栈操作命令为\npushq [SRC]，含义是将 [SRC] 写入程序栈，寄存器\n%rsp 减小一个字节（即减去 8）。而出栈命令为\npopq [DEST]，含义是将程序栈栈顶字节写入\n[DEST]，寄存器 %rsp 增加一个字节（即加上\n8）。\n函数调用\n有关函数调用的两个命令为 call 和\nret，两者分别代指调用某一个函数和某一个函数返回。\n注解：似乎在汇编之中，更习惯把函数调用说成过程调用，我们之后也使用这样的名称。\ncall 的命令格式为\ncallq 40050 &lt;mul&gt;。两个参数分别为需要调用的过程的机器码在主存里的位置，系统根据这个参数令程序指针\n%rip 跳转。第二个参数则是调用的过程的名称。\ncall\n命令一共会完成两个任务。第一个任务是将返回地址（返回地址指的是\ncall\n指令下一条指令的地址）压入程序栈，这一步是为了在调用的过程终结返回的时候能够返回到正确的位置继续执行。第二个任务是将\n%rip\n设置为要跳转的过程在主存之中的地址，实现真正的跳转。\n而 ret 命令所完成的就是将程序栈的栈顶写入\n%rip，让系统回到原先位置继续执行。其不需要接受参数，一般只需要命令本身即可。\n\n有的时候调用过程需要传递参数。在 X86 架构之下，如果传递参数不多于 6\n个，则使用 %rdi, %rsi, %rdx, %rcx, %r8, %r9 一共 6\n个寄存器进行传递。如果参数多余 6\n个，则使用程序栈传递，序号越大的参数越在栈底。而函数返回值默认存放在\n%rax 之中。\n栈帧\n类似 C\n之类的语言，会支持函数的递归调用，这就说明了这些语言的代码支持重入（Reentrant），即允许多个实例同时运行同一块代码。基于这样的要求，我们不仅需要在程序栈之中记录返回地址，我们还需要记录是哪一个实例调用了过程。而每一次过程调用就会在程序栈之中生成一片用于记录这次调用的数据（包括这一次调用的临时变量、返回地址、寄存器副本等），这就是一个栈帧（Stack\nframe）。\n栈帧的管理也是简单的，在过程被调用的时候分配空间、创建栈帧，在过程返回之后，该栈帧被释放。由于栈帧一般多于一个字节，所以除去栈顶指针\n%rsp 外，还设定了栈帧指针 %rbp\n标记栈帧的起始地址，所以 %rbp 和 %rsp\n之间的程序栈指代栈顶的栈帧。\n\n另外我们也需要指出，有的时候系统会做出一些“明明没有分配栈帧（%rsp\n没有动）但相当于创建了临时栈帧”的行为。一种可能是使用栈空间进行数据传递，这个时候栈就类似于寄存器。比如说系统可以在不动\n%rsp 的条件下将数据通过比 %rsp\n低一个字节的位置传递一定的数据。但栈空间的也是有限制的，比\n%rsp 低多于 128\n字节的栈空间一般是被保留的，不能直接使用。\n寄存器使用惯例\n在一个过程调用另外一个过程的时候，往往会出现寄存器冲突，比如说两者都需要使用\n%rdi\n存放参数。这个时候一般需要将寄存器数据复制到栈帧之中暂且保存，将寄存器空出给另外一方使用。\n而到底由调用者还是被调用者的栈帧暂存寄存器，则一般遵循一些惯例。在\nX86 架构下寄存器 %rbx, %rbp, %r12, %r13, %r14, %r15\n称为被调用者保存（Callee\nsaved）寄存器，即被调用者的栈帧保存这些寄存器的数据，在过程返回之前将栈帧数据复原。寄存器\n%r10, %r11\n和所有的传递参数的寄存器称为调用者保存（Caller\nsaved）寄存器，即调用者的栈帧保存寄存器的数据，在调用结束后将栈帧数据复原。\n数组及结构的存储表示\n数组的存储\n数组 T a[N]\n在主存之中存储的基本原则为连续存储，也就是将连续\nN * sizeof(T) 字节的空间用于存储这个数组。\n而对于二维数组，我们还是会使用连续的存储空间进行存储，而且一般遵循行优先原则。对于\nint a[3][5]，其在主存之中的存储顺序为\na[0][0], a[0][1], ..., a[0][4], a[1][0], ..., a[2][4]。这种存储方式称为嵌套数组（Nested\narray）。\n除了嵌套数组，还有一种存储方式是多级指针数组（Multi-level\npointer\narray）。其基本想法为在根数组上存若干指针，这些指针指向下一级数组的起始地址。这样的存储方式方便进行多级扩展，但相应的由于内存空间不连续，而且读取指针并定位需要多次寻址，一定程度上降低了效率。\n结构的存储\n一个结构体的数据是将其成员按照声明顺序，在一片连续的空间内存储的。比如说：\nC++struct node &#123;    int[4] val;    size_t i;    node* next;&#125;;\n其将会在连续的 32 个字节中存储这个结构体，其中低地址的 16 字节存放\nval，中间的 8 字节存放 i，高地址的 8 字节存放\nnext。\n而在实际存储的时候是需要考虑对齐问题的：\nC++struct align &#123;    char val;    align* next;&#125;;\n如果按照正常思维推测，一个字符和一个指针应该只需要 9 字节，但在\nX86-64 架构下，实际上会占用 16 字节，其中低地址的 8\n字节仅有最低一个字节存储了 val，而剩余的为占位符。\n原因是简单的，现代的 CPU\n在从主存之中读取数据的时候是同时读取多个，比如说一次性读取 8\n个字节。实际上这种读取方式就将每 8\n个字节的存储空间划分为了一个机器字（机器字的定义见 绪论），如果数据在同一个机器字之中，那么一次读取就可以将所有数据读出来。但如果数据跨越了两个机器字，那么就需要两次读取。\n所以说编译器会故意在存储结构的空间内部塞入若干的空白空间让每一个成员的数据不跨越机器字以保证读取效率。\n另外我们也注意到，变量的声明顺序实际上会影响具体的空间分配。比如说：\nC++struct S1 &#123;    char a;    S1* next;    char b;&#125;;struct S2 &#123;    char a;    char b;    S2* next;&#125;;\n这里，结构 S1 占用 24 字节，而结构 S2 占用\n16 字节。这是因为 S1 在存放 a 后不得不空出 7\n字节，否则 next 就会跨机器字。而 S2 中可以先把\na, b 都放置好之后，只需要空出 6 字节就可以让\nnext 不跨机器字。\n联合数据的存储\n联合数据类型可以定义多个成员，但是一个联合数据类型的变量在任何时候只能指代某一个成员。这些成员享有同一片存储空间，而联合所占据的空间即其中最大成员占据的空间。比如说：\nC++union U1 &#123;    int[2] i;    char c;    double v;&#125; *p;\n这里联合的三个成员分别应该占用 1 字节、 8 字节、 8\n字节，所以最后联合占据 8 字节。\n程序的链接\n链接的基本概念\n多个源代码文件编译成为可执行文件的时候需要经过一个重要过程，即链接（Linking），含义就是将各个独立的文件链接为单一的最终文件。这样做的好处是，某一个文件发生修改，只需要对这个文件编译并重新链接即可，不需要再次编译其他文件。同时，一些常用函数可以事先编译为一个库，需要使用的时候再将其链接进入最后的可执行文件即可。\n链接之前，编译器首先会将每一个源代码文件之中每一个符号存储起来，存储的内容包括符号名称、其占据的内存大小和其在主存之中的地址，这就构成了符号表（Symbol\ntable）。随后链接器将所有源代码文件综合为单个文件后，会将符号表之中的地址更新为绝对地址。\nELF 格式和符号分析\n可以被链接的文件一般有可重定向对象文件和共享对象文件，前者扩展名通常为\n.o，后者则多为\n.dll / .so。后者是特殊类型的重定向对象文件，可以被装载入内存后进行动态链接，其链接可以在装载时或者运行时完成。上述两种文件以及可执行文件，这三种二进制文件都必须要符合\nELF（Executable &amp; Linkable Format）格式。\nELF 格式的文件依次具有以下的部分：\n\nELF header\n部分。这一部分会存储与这个文件相关的基本信息。\nSegment header\ntable。这一部分只有可执行文件具有，会存储一些和可执行相关的内容。\n.text 部分。这一部分存储代码。\n.rodata\n部分。这一部分存储只读数据，比如说跳转表。\n.data\n部分。这一部分存储初始化过的全局变量。\n.bss 部分。这一部分存储未初始化的全局变量。\n.symtab 部分。这一部分存储符号表。\n.rel.text 部分。这一部分是 .text\n部分的重定向信息。\n.rel.data 部分。这一部分是 .data\n部分的重定向信息。\n\n后续还有一些部分，这里暂且不用讨论。\n这里可以提一下 .bss 区设立的原因。.bss\n区域的数据不会存储数据类型，并且会默认将这一部分数据的每一个字节全部置\n0x00，作为系统默认的初始化。这样做显然要比既要存储数据类型，又要存储数据初始值的\n.data\n区高效。而能够这样粗暴解决问题的原因是系统约定了非静态全局变量的默认初始化方式为全\n0，以及汇编并不区分各种不同的数据类型。\n\n在叙述链接过程之前，我们首先要叙述符号的概念。一个程序之中的符号分为三类，即全局符号、局部符号和外部符号。注意，这里全局符号和局部符号的区别不是全局变量和局部变量的区别。局部符号指的是在该模块定义且只可以让该模块引用的符号，包括静态和非静态的局部变量、静态函数和静态全局变量。而全局符号则是可以供给其他模块使用的符号，包括非静态的全局变量和函数。\n首先说外部符号，其含义很简单，就是引用的其他模块的符号。包括其他模块开放的非静态全局变量和函数。可以用\nextern\n关键字声明外部符号，即声明该符号将会在链接的时候再具体给出定义，本文件只是做一个引用。\n程序中定义的非静态局部变量，链接器并不会分析。非静态局部变量将会在运行的时候被存储在程序栈之中，使用完立刻释放。\n而静态局部变量会被存放在可重定向文件之中的 .data 或者\n.bss\n部分。对于命名冲突的静态局部变量，编译的时候会给他们赋予后缀以示区分。\n对于静态的全局变量和函数，其实际上是局部符号（static\n关键字限制了这些变量和函数只能在本模块之中使用），所以其存放在可重定向文件之中的\n.data, .bss, .text 部分。其中函数存放在 .data\n部分。而如果多个文件中声明了同名的静态全局变量和函数，并不会冲突。\n非静态的全局变量和函数一般也是存放在 .data, .bss, .text\n部分。这个时候也有可能出现命名冲突，但此时必须作出区分。此时需要引入强符号（Strong\nsymbol）和弱符号（Weak\nsymbol）的定义。这个定义只对非静态的全局变量和函数成立，其中未被初始化的非静态全局变量被称为弱符号，否则是强符号。\n链接器的原则是：\n\n不允许出现强符号命名冲突，否则链接失败。\n有强符号和弱符号的命名冲突则将弱符号的指代指向强符号（强制覆盖弱符号）。\n弱符号之间的命名冲突，则任取其中之一作为代表，其余弱符号指向被选中的弱符号。\n\n由于存在强制覆盖，我们应当减少全局变量的使用，或者使用静态的全局变量。如果需要使用，尽量将其初始化变为强符号。并且在使用其他模块的全局变量的时候，尽量先使用\nextern 关键字声明这个变量。\n代码和数据重定向\n在处理完毕符号后，就可以开始链接了。现在有若干的可重定向对象文件，其中\n.text 部分存储着代码，.data\n部分存储着变量数据。这些文件的代码之中可能包含着函数调用，而我们知道函数调用需要知道函数在内存之中的位置。编译器在编译生成可重定向对象文件的时候有两个重要信息是不了解的：\n\n这个模块之中的函数最终会被存放在内存的什么地方。\n这个模块所引用的其他模块的函数的地址是什么。\n\n针对第一个问题，编译器会存放相对地址，也就是这个模块之中的所有函数的地址都是相对于这个模块而言的，而不能表示最后的绝对地址。针对第二个问题，编译器可能会选择将地址留空，比如使用\n0x00 留空，之后会在 .rel.data 或者\n.rel.text 部分留下信息告诉链接器要补全这里的地址。\n到这里，编译器的任务就完成了，接下来链接器会修正相对地址并填充留空地址。\n首先链接器会将所有可重定向对象文件的 .data\n部分拼接为可执行文件的 .data 部分，.text\n部分也如此。拼接完成后，所有函数和全局变量的绝对地址就确定了，链接器会将所有需要调整的相对地址调整为目前的绝对地址，并填充留空地址。\n库链接\n我们提到过，一些常用函数会被事先编译为可重定向对象文件，在使用的时候再链接进入程序。但是一般而言这样的函数库是很大的，如果完全链接进入，则相当消耗时间空间。所以有另外一个解决方案，就是将每一个函数都打包为可重定向对象文件，然后把这些可重定向对象文件打包为静态库文件，也称归档文件（Archive\nfile）。归档文件的扩展名常常为 .a。\n归档文件之中每一个可重定向对象文件是具有索引的，基于此，我们让链接器能够在用户编写的代码之中解析外部符号，并且能够在静态库之中寻找出相应的可重定向对象文件进行链接。\n现代的静态库一般允许增量更新。\n静态库的缺点在于可执行文件以及运行时内存之中会重复包含库文件函数和数据，同时如果库文件发生变动，则所有的相关文件都需要重新链接。目前已有的解决方式是使用共享库文件，其特征在\nELF 格式和符号分析 部分已经说明。\n内存布局与缓冲区\n在 X86-64 架构下，主存的最高地址部分是程序栈，其栈顶由\n%rsp 管理，且栈空间向低地址增长。程序栈一般具有 8MB\n的空间限制。程序栈用于存放局部变量等数据。\n之后就是分配给每一个任务的存储空间，每一个任务都会在主存之中占用一片空间，这片空间从高地址到低地址的分配为：\n\n堆。堆空间可以根据程序需要动态分配，如 C 语言的\nmalloc 函数。堆空间向高地址增长。\n静态数据。这一部分数据会在将可执行文件加载到主存的时候写入内容，写入的内容就是可执行文件的\n.data 部分，称为数据段。\n机器代码。这一部分就是可执行文件的 .text\n部分，称为代码段。\n\n而程序栈的构成，先前已经叙述过。即分为若干的栈帧，其中栈帧高地址的 8\n字节存放这个栈帧的返回地址，剩余的部分存放临时变量等数据。\n\n这个时候就可以引入缓冲区溢出攻击了。这个攻击利用的是类似\ngets()\n等不限制读入长度的函数，可能会越过预留空间对程序栈进行非法写入的漏洞。\n比如说函数 foo() 之中调用了 gets()：\nC++void foo() &#123;    char buf[4];    gets(buf);&#125;\n而函数 foo() 执行的时候是会分配一个栈帧给这个函数存放\nbuf 这个临时变量的。但是由于 gets()\n不限制读入长度，所以我们可以输入相当长的字符串，这样的话就会一直向栈帧的高地址写入，从而会覆写掉返回地址，甚至是上一个函数的栈帧。这样，在\nfoo()\n结束进行返回的时候，就可以控制其跳转到指定的位置执行我们注入的程序。\n防御这种攻击的方法也很多。一种是使用可以限制读入长度的函数，如\nfgets()。一种是给栈内部加入随机长度的无意义数据，让攻击方无法准确预测\nPC\n应当跳转到何处。还有比如说可以限制执行权限，让这一片区域的内存不能作为机器指令执行。此外还可以让函数在返回之前检查栈帧是否被修改等等。\nX86 汇编编程基础\nTODO\n异常\n基本原理\n异常（Exception）指的是会阻止程序正常执行，并且会引起状态切换（比如从用户态切换到内核态）的事件。异常分为同步异常和异步异常。\n同步异常一般有三种，即 Trap、Fault\n以及 Abort。其中，Trap\n一般是由程序主动触发的，比如说产生了系统调用\nsyscall，或者是触发了断点或者是使用了 Trap\n命令，其恢复之后会跳转到原命令的下一条继续执行。Fault\n往往是由程序出现的一些问题触发的，一般这种问题都是可以恢复的，恢复之后会重新执行原命令。Abort\n则是由不可恢复的问题触发的异常，会引起程序退出。\n异步异常则一般由外部事件触发，比如说 IO\n设备中断，发生系统重置等等。一般而言，在 MIPS\n架构下，如果发生的时候命令已经执行完毕 MEM\n阶段，系统会保证这条命令的流水线执行完毕。否则这条流水线会被废弃。这里有关\nMIPS 流水线的叙述可以查看下面的 MIPS32 基础。\n虚拟内存\n基本原理\n我们先前提到过，每一个进程都会分配到一片内存空间，用于存放数据段、代码段并且分配堆空间。但是我们也会注意到，有的进程用不到如此大的内存空间，很容易出现分配了空间但几乎不可能使用的现象。这个问题的一个解决方案是虚拟内存（Virtual\nmemory），其相当类似于懒分配，即真正使用到某一块内存的时候再进行分配。\n虚拟内存的工作原理大致为，对于每一个新进程，会分配连续的虚拟内存空间。进程使用到某一个存储地址的时候，处理器会去虚存地址和物理内存地址对照表（这个表一般称为页表（Page\ntable），并且每个进程都会有自己的页表）之中寻找这个虚拟内存地址所对应的真实地址，如果发现还没有给这个虚存地址分配物理内存空间，则会分配并建立两者之间的映射。\n虚拟内存地址通常简称为虚址（Virtual\naddress）。上述过程中负责将虚址转换为物理地址的单元称为内存管理单元（MMU）。\n页和页缺失\n一般而言，我们会将一片固定大小的连续虚存集合起来成为一个页（Page），而每一个虚存的页映射到物理地址空间也是一片连续的空间，这被称为页帧（Page\nframe）。相对应的页和页帧具有相同的大小。MMU\n进行地址映射的时候都是以页为单位的。\n基于页的结构，处理器实际上传输给 MMU\n进行转换的虚地址可以分为两个部分。前半部分为虚页码（Virtual page\nnumber / VPN），后半部分是页内偏置（Page\noffset）。虚页码指明了虚存之中我需要映射的字节位于具体哪一页，而页内偏置则表明了我需要映射的字节在页内是第几个字节。\nMMU\n所进行的页码映射就是将虚页码根据页表映射为物理页码（Physical\npage number / PPN），之后根据页内偏置获取最后实际的数据。\n如果某次映射之中，某个页没有找到对应的页帧，就会触发页缺失（Page\nfault）。页缺失产生后，系统会转入内核态，调用异常处理代码将所需要的数据从外部存储读入内存以解决异常。\n页表项的附加标记\n采用虚存机制还有一种好处，就是可以通过页表实现权限管理。页表之中的每一项除去记录页和页帧的映射之外，还可以记录这个进程对物理内存的访问权限，权限控制的具体实现则由硬件完成。\n另外，页表项还可以记录目前这个映射是否成立，这一位也常常被称为 valid\n位。其为 1\n则说明对应的页帧已经被加载到物理内存之中，否则代表对应的页帧还需要从外部存储之中获取。页缺失就会在\nvalid 位为 0 的时候发生。\n快表机制\n记住这一句话就可以了：\n快表（TLB）和页表的关系，就是缓存（Cache）和内存的关系。\n\nTLB\n相当于页表的一个高速缓存，其出现的原因是处理器所请求的内存地址往往是聚集的，也就是说某一小部分地址占据了处理器的大部分请求。所以这个时候我们可以将常用地址缓存到\nTLB 之中，请求内存的时候首先查询 TLB\n有无相关映射，命中则直接使用。否则再去页表之中查找，命中则直接使用，同时将这个映射缓存到\nTLB 之中。TLB 满了之后会触发淘汰机制，删去使用较少的映射项。\n之所以提到缓存，因为内存之中的常使用部分会被加载到 cache\n之中。而系统从 MMU 获取物理地址之后也会先去 cache\n之中查找，找不到才会去内存之中查找。这个过程和 TLB 机制几乎一致。\n内存映射\nTODO: We may learn it later from OS class.\nMIPS32 基础\nMIPS 架构的特征可以查看本文最开头的部分，有较为详细的介绍。\n这里补充一些其他的 MIPS 基础知识。这些知识并不是重点，但是会影响对\nMIPS\n架构细节的理解，故不单独开一个二级标题但还是需要分点一条条列出：\n\nMIPS 架构之中，一个字等于四个字节\nMIPS 架构下返回地址不保存在栈上，而是保存在 31\n号寄存器之中\nMIPS 架构下 0 号寄存器永远存储常数 0\nMIPS 架构不具有条件码，条件的表示全部使用寄存器\nMIPS32 架构除去 32 个通用寄存器，还有高位寄存器 %hi\n以及低位寄存器 %lo。这两者都是 32\n位寄存器，其出现的原因是需要处理整数的乘除法。另外需要注意，MIPS32\n架构的立即数通常只允许 16 位，而寄存器是 32\n位的，所以通常会使用这两个寄存器将 32\n位数拆开表示。记号上，%hi($1) 这种写法代表 1 号寄存器的 16\n位高位\nMIPS 架构下有四个传参寄存器，即 4 到 7\n号寄存器。多余的参数使用栈传递\nMIPS 架构的命令后缀 i 表示立即数，u\n表示不启用溢出检测。比如说 addiu\n命令表示将某一个寄存器加上一个立即数，溢出的话取模放入结果寄存器\n\n流水线结构与延迟槽\n在 MIPS\n架构之中，任何指令的执行都会分为五个步骤，这五个步骤由不同的硬件完成。这些步骤分别是：\n\n读取指令（IF）\n读取寄存器（RD）\n代数或逻辑运算（ALU）\n访问内存（MEM）\n回写（WB）\n\n一个指令的五个执行步骤构成一条流水线，而不同指令的流水线是可以并发执行的，只要保证它们不会同时调用某一个硬件资源（比如说两条指令不可以同时在\nIF 过程中）。\n而这种并行的流水线架构的优越之处就是可以最大程度利用硬件资源。比如说考虑这样的\nMIPS 汇编代码：\nMIPS32 Assemblyjal  printfmove $4, $6op\n这里 jal 类似于 X86 的 call\n命令，用于调用过程。但是，与这条指令间隔一条的 op 指令才是\nprintf 返回后调用的指令（返回地址）。\n原因是 jal 指令流水线执行到 ALU\n阶段的时候才会发生实质跳转，从 jal 的 IF\n阶段结束到实质跳转这段时间 IF\n硬件是空闲的，这段时间就被称为延迟槽（Delay\nslot）。但是我们可以让 IF 硬件立刻执行 move $4, $6\n的 IF 阶段，这样在实质跳转发生前的这段延迟槽就被利用了。\n能这样做的原因是 move 指令在 RD\n阶段结束后就执行完毕了，后续的阶段可以忽略或者说当成不存在。如果说\njal 命令之后跟随了一些需要实质 ALU 的命令，则可能会因为和\njal\n或者所调用的过程发生硬件冲突而导致异常。所以有的时候我们可以填入\nnop 回避掉可能的问题。\n多线程操作\n在多线程编程之中，我们往往会涉及到多个线程对共享资源的读写操作。在\nMIPS 架构中，针对这个场景，有 ll 和 sc\n两个命令。\nll 全称为链接加载（Load\nlinked），在使用这个命令从内存之中加载数据之后，处理器会记住这一次操作，这一次操作访问的地址也会被暂时保存。\nsc 全称为条件存储（Store\nconditional），使用这个命令将寄存器 v\n之中的数据存储到内存的时候，处理器会首先检查上一次 ll\n命令操作的内存区域有没有被改动。如果没有被改动过，则存储成功，v\n之中的值也会被写为 1\n表示操作成功。反之，写入失败，内存不会被修改，v\n之中的值也会被写为 0 表示操作失败。\n协处理器与异常处理\n协处理器是用于协助处理器处理类似内存管理、内存映射、异常等工作的硬件，其在可以被认为是一系列拓展寄存器。这里我们主要关注\nMIPS 架构下协处理器之中的 Cause 和 Status 寄存器。\nMIPS\n系统的一个优点就是支持精确异常处理，也就是说保证发生异常的命令之前的所有命令都可以被执行完毕，之后的命令不进行处理。而为了实现这一点，就需要精确记录异常位置，并且处理好延迟槽机制带来的问题。\n借助协处理器，MIPS 系统处理异常的步骤大致为：\n\n保存异常现场信息。协处理器利用异常程序计数器（Exception\nprogram counter / EPC）记录异常命令的位置，Cause\n寄存器会记录异常原因，且其 BD 位会记录延迟槽信息，Status\n寄存器的异常标志位（EXL）被置\n1。另外，一些相关寄存器的值也会被保存，另外 26 和 27\n号寄存器会被留给异常处理。\n根据具体类型判定处理异常的方式。这里会使用 Cause\n寄存器获取异常类型。\n开辟异常处理内存空间。系统会开辟出空间并且保留一部分通用寄存器用于异常处理。\n处理完毕后返回。此时协处理器清空相关寄存器，跳转到原有命令继续执行。\n\n这里要注意一点，一般异常处理会在内核态下运行，而正常的程序会在用户态下运行。为了防止异常处理机制被不正当利用于在内核态下执行攻击代码，系统要求状态转换和程序跳转回原有命令必须同时。\nMIPS 内存管理\nMIPS 使用虚存机制，其虚址一般按照下述方式分配：\n\n高于 0xC0000000 的虚址为 kseg2\n空间，其仅可以由核心态使用，使用的时候需要经过 MMU\n转换，也就是说这一部分是 Mapped memory。\n介于 0xA0000000 和 0xC0000000\n之间的虚址是 kseg1 空间，其不可以在用户态下使用，使用的时候不需要经过\nMMU\n转换（其虚址最高三位清零就是物理地址）。另外，这一部分不会被缓存，也就是说这一部分是\nUnmapped uncached memory。\n介于 0x80000000 和 0xA0000000\n之间的虚址是 kseg0 空间，其不可以在用户态下使用，使用的时候不需要经过\nMMU\n转换（其虚址最高一位清零就是物理地址）。另外，这一部分可以被缓存，也就是说这一部分是\nUnmapped cached memory。\n低于 0x80000000 的虚址为 kuseg\n空间，是用户态空间，使用的时候需要经过 MMU 转换，也就是说这一部分是\nMapped memory。\n\n这样划分的意图就是区分内核态和用户态对内存的访问。另外，上述划分之中有\nunmapped 的内存空间，这一部分设置的缘由是系统刚启动的时候 TLB\n并未初始化，不可以进行正常的地址转换，故使用 unmapped\n的空间进行操作。\n另外，为了区分某虚拟地址属于哪一个进程，MIPS 会给虚拟地址附上 ASID\n进程标识符。\n\nMIPS 架构支持一种特殊的快表，即\nJTLB。其内部记录的是虚页码除以 2\n之后的结果和两个物理页码之间的关系，两个映射项都标注了是否\nvalid 以及是否允许写入（一般称为是否 dirty，如果一个页面不是 dirty\n的，则会禁止写入）。\n这个时候的转换需要将虚页码先去掉末位进行查表，最后如果命中，则需要根据虚页码末位选取最终的映射项。\n","categories":["【学习笔记】计算机"]},{"title":"《人工智能导论》学习笔记","url":"/2021/06/16/note-of-iai/","content":"这个文档就是一时兴起想要好好学学人工智能背后的玩意创建的。主要还是记录《人工智能导论》课程的笔记。\n\n大概随着这个文档越来越饱满，我应该就能看懂 paper.md\n这个诡异的超纲文档了。\n搜索问题\n盲目搜索（BFS / DFS）\nDFS 优先扩展深度深的节点，BFS 优先扩展深度浅的节点。由于 DFS\n往往存在深度限制，所以 DFS 是有可能找不到最优解的，并且最坏情况下 DFS\n等价于枚举。而 BFS\n在单位耗散值的有解问题上一定能找到最优解。\n但有的时候搜索树上的相邻节点之间距离并非一致，所以出现了 Dijkstra\n算法。这个算法是最短路算法之中较为重要的一个。在 Dijkstra\n算法之中，原则是优先扩展距离起点最近的节点。\nDijkstra\n算法考虑了当前节点与起点的距离，但是实则没有对距离终点的距离进行评估。所以之后可以引入启发式搜索。\n启发式搜索（A / A*）\n所谓启发式，就是引入启发知识，也就是对当前节点与目标之间的距离的评估。\n在 A 算法之中，我们引入对节点 n 的评估函数 f(n)：\nf(n) = g(n) + h(n)\n这里 h(n)\n就是对当前节点与目标之间距离的评估，也被称为启发函数。\n上述函数均为估计值。我们把相应的实际值（也就是最短路所对应的）分别标记为\nf*(n), g*(n), h*(n)。\nA 算法的核心为，优先扩展 f(n) 最小的节点。\n在算法的具体实现过程之中，定义了OPEN表以及CLOSE表，分别代表当前考虑扩展的节点以及当前暂时不考虑扩展的节点。一份伪代码实现为：\nPythonOPEN = [&#x27;s&#x27;] # &#x27;s&#x27; is the starting nodeCLOSE = []while not OPEN.empty():    # Select the node with minimum f value    n = OPEN.node_with_min_f()        # n is the expected node    if expected(n):        return n        OPEN.remove(n)    CLOSE.add(n)        # Traverse the neighbors    for m in n.neighbor():        path_len = g(n) + distance(n, m)        # Expand the list        if (not m in OPEN) and (not m in CLOSE):            OPEN.add(m)            n.next = m        # m has been explored before, but it needs update        elif (m in OPEN) and (path_len &lt; g(m)):            g(m) = path_len            n.next = m        # m has been discarded, but it can be reused now        elif (m in CLOSE) and (path_len &lt; g(m)):            CLOSE.remove(m)            OPEN.add(m)            n.next = m# Failreturn FAIL\n在 A 算法之中，如果满足：\nh(n) ≤ h*(n)\n那么 A 算法就称为 A* 算法。A*\n算法的特点就在于只要初始节点到目标节点有路径，那么算法永远能找到最优解，而\nA 算法并不保证有最优解。\n另外给出一个定理：\n\n对于两个 A* 算法 A1, A2，如果对于非目标节点均满足：\nh2(n) &gt; h1(n)\n那么 A1\n所扩展的节点数不小于 A2 所扩展的节点数。\n\n改进 A* 算法\nA*\n算法面临的一个问题在于可能会多次扩展同一个节点，这就导致了算法的低效，而实际上多次扩展某一个节点的原因在于扩展该节点所使用的路径并非是最短的。\n我们可以认为可以使用单调的启发函数来解决这一问题，启发函数的单调性指的是三角形法则：\n$$\n\\begin{cases}\n    h(n_i) - h(n_j) \\leq {\\rm distance}(n_i, n_j) \\\\\n    h(t) = 0\n\\end{cases}\n$$\n这里 nj\n为 ni\n的子节点。\n我们可以证明如果 h\n是单调的，那么使用这个启发函数的 A* 算法一旦扩展到了某一个节点 n，就已经找到了从起点到这个节点的最短路，也就是说\ng(n) = g*(n)。\n实际上还有一个结论，就是满足单调性的 h 必然满足 A* 条件。\n基于此改进 A* 算法如下（伪代码表示）：\nPythonOPEN = [&#x27;s&#x27;] # &#x27;s&#x27; is the starting nodeCLOSE = []f_max = 0 # The maximum f value that has been found till nowwhile not OPEN.empty():    # Find the nodes in OPEN with f value less than f_max    NEST = OPEN.with_f_less_than(f_max)        # Select the node    # When the f value has been small enough to be selected into NEST    # We just need to select the minimum g value now    n = None    if NEST.empty():        n = OPEN.node_with_min_f()        f_max = f(n)    else:        n = NEST.node_with_min_g()        # n is the expected node    if expected(n):        return n        OPEN.remove(n)    CLOSE.add(n)        # Traverse the neighbors    for m in n.neighbor():        path_len = g(n) + distance(n, m)        # Expand the list        if (not m in OPEN) and (not m in CLOSE):            OPEN.add(m)            n.next = m        # m has been explored before, but it needs update        elif (m in OPEN) and (path_len &lt; g(m)):            g(m) = path_len            n.next = m        # m has been discarded, but it can be reused now        elif (m in CLOSE) and (path_len &lt; g(m)):            CLOSE.remove(m)            OPEN.add(m)            n.next = m# Failreturn FAIL\n博弈问题（对抗搜索）\nα − β 剪枝\n我们在面临双方博弈，需要我方决策的时候，我们可以先搜索一遍所有可能的双方情况并使用专家知识对局面进行评估。由于对方有利就是我方不利，所以在搜索到最底部回溯得到估值的时候，要注意并不是始终取孩子节点的最大值，而是按层数交替取最大值和最小值。\n一般而言，根节点要取最大的儿子节点（一般用方形节点代表极大过程），下一层要取最小的儿子节点（一般用圆形节点代表极小过程），以此类推。\n所谓剪枝，就是目前遍历到此，发现继续遍历子节点都不会更新这个节点的估值了，此时就可以剪枝。注意，判定是否剪枝的时候是要和当前节点的所有祖先都进行比较的，不能只比较父节点。\n不过要注意，在最后给出根节点估值后确定最后决策的时候，只能沿着决策树走一步。这是因为你做出决策后决策树可能会改变形态，不能保证后面的决策的估值情况还保证如此。\n蒙特卡罗方法\nα − β\n剪枝依赖于大量的专家知识，所以在实际应用上也有所局限。其基本的思路是在给定的时限之内不断通过模拟对弈的方式扩展搜索树，最后再给定走步方式。\n基本的循环包括以下几个部分：\n\n根据前期评估结果选取最有希望的叶子节点\n在该叶子节点处随机进行一步，扩展出新叶子节点\n从新叶子节点开始随机模拟对弈直到判定出胜负\n根据模拟的结果反向更新决策树上各个节点的评估值\n\n一般而言，节点的评估值包含两个方面：\n\n当前信息下节点是有希望的\n深度较浅的节点具有更大的探索可能\n\n一般而言可以选择这样的评估方式：\n$$\nI_j = \\overline{X_j} + c\\sqrt{\\frac{2\\ln n}{T_j(n)}}\n$$\n这里 $\\overline{X_j}$\n表示经过当前节点的决策路径的胜率，这是一个守成的选项。\nn 表示当前搜索总次数，Tj(n)\n表示当前节点访问次数。\n高级搜索\n局部搜索\n局部搜索的意思就是一直往更好的地方走，具体过程为：\n\n选择初始点 x0，以及其相邻可考察点集\nP\n只要不满足退出条件，进行下面循环：\n\n选择 P′ ⊂ P，取\nP′ 之中最优解 xb\n如果 xb\n更优，则切换为考察 xb，P 修改为 xb\n的相邻考察点集\n否则 P = P − P′\n\n输出结果\n\n模拟退火算法\n模拟退火实际上是对局部搜索的一个优化。其基本原理来自于液态金属凝固的时候如果降温过快则有可能由于分子没有充分时间排列为结晶态而导致凝固不工整（没有达到最低能状态），而实际工艺会让温度缓慢下降，并且有回升温度的可能，保证大概率凝固为结晶态。\n迁移到局部搜索上，为了防止落入局部最小值，我们可以让“温度回升”是一个有概率发生的事情。对于评估函数\nE(i)，以及两个状态\np, q，给出从 p 迁移到 q 的概率：\n$$\nP(p \\rightarrow q) = \\begin{cases}\n1 &amp; E(q) \\leq E(p) \\\\\n\\exp\\left(\\dfrac{E(p) - E(q)}{kT}\\right) &amp; E(q) &gt; E(p) \\\\\n\\end{cases}\n$$\n这里 k 是一个常量，T\n是“温度”，指的是优化问题之中的控制参数。\n根据物理定律（Boltzmann 分布）实际上我们可以给出定律：\n\n同一温度下，物体处于低能量状态的概率高于高能量状态\n温度无限高的时候，物体等概率处于任何状态\n温度无限低的时候，物体等概率处于任何最低能状态\n温度下降的时候，物体进入低能量状态概率上升，进入高能量状态概率下降\n\n所以我们使用模拟退火方法的时候需要尽可能保证：\n\n初始能量足够高\n每个温度下状态交换足够充分\n温度的下降足够缓慢\n\n所以算法的基本思路就是：\n\n选定初始状态\n随机选定初始状态的某一个相邻状态，考察它和初始状态的评估函数差：\n\n如果新状态更优，直接迁移\n如果原状态更优，则按照概率迁移\n\n迁移完毕后降温，重复上述迁移步骤直到寻找到满意的状态\n\n这里有些细节的问题需要考量。\n首先是什么是满意的状态，一般而言最简单的就是设定温度阈值或者降温次数阈值，另外一个是如果多次降温都没有能够让评估函数的变化超过阈值就可以认为稳定了。\n其次是什么时机降温，上述算法框架之中每次迁移完毕就会降温，但实际上有的时候会进行若干次迁移后才会降温。一般而言我们可以设定迁移次数阈值。\n之后是怎么降温。等比例降温是最简单的，另外还有一个较为常用的：\n$$\nt_{k + 1} = \\frac{t_k}{1 + \\frac{t_k\\ln(1 + \\delta)}{3\\sigma_{t_k}}}\n$$\n最后是初始温度如何设定。一般而言较高就可以了。\n遗传算法\n遗传算法的本质就是模拟生物进化的过程，通过引入交叉、变异等干扰因素尝试在若干代迭代后获得满意的结果。不过我们首先关注最为重要的选优过程的模拟。\n考虑一个包含 N\n个个体的群体，其中第 i\n个个体的适应值为 F(xi)，那么在进化过程中其被选中的概率为：\n$$\np(x_i) = \\frac{F(x_i)}{\\sum_{j = 1}^N F(x_j)}\n$$\n之后就可以模拟选优，过程为：\n\n从 x1 开始，以\np(x1)\n的概率选择 x1。若选中，结束模拟，否则继续\n转到 x2，以\np(x1) + p(x2)\n的概率选择 x2。若选中，结束模拟，否则继续\n……\n结束模拟\n\n这是选出一个染色体的方式，下面介绍如何选出一个群体：\n对于每一个个体 xi，我们用上述方法在\nN 个个体之中选取 ⌊p(xi)N⌋\n次。之后按照 p(xi)N − ⌊p(xi)N⌋\n从大到小排序群体，再取若干个让选出的群体恰好有 N 个个体。\n这种方法就是模拟了群体的一次进化，高适应的个体就有高可能得到繁殖（被多次取到）。\n另外，交叉和变异则是对表示状态的二进制（或者十进制）数字串进行一定处理。\n从而就有了遗传算法的基本框架：\n\n给定群体规模 N，交叉概率\npc\n以及变异概率 pm\n随机生成 N\n个染色体作为初始群体，并计算适应值\n下面不断重复循环直到找到合适的解：\n\n选优出 N\n个染色体成为扩展群体\n按照 pc, pm\n进行交叉和变异，未变化的染色体保留，形成新群体\n\n选取整个进化过程中最适应的染色体作为最后输出\n\n不过我们注意，我们一定要选取合适的编码方式，否则可能会因为问题的状态难以描述而导致编码串有过多无用位，从而导致无效变异。\n二进制的交叉和变异是简单的，十进制的交叉可以如此：\n\n子代 1 的交叉位之后的基因从父代 2 的所有基因之中按顺序取出尚未在子代\n1 之中基因\n指定若干的欠缺位，让父代 2\n这些位置留空，之后按照父代1的顺序把原来的数字填回去形成子代 2\n指定一个一一对应的映射，以生成子代\n\n变异则可以：\n\n指定两个位置，将后面的数字移到前面的指定位置之前\n指定两个位置，交换两个位置上的基因\n随意打乱某一区间。\n\n统计机器学习\n基本概念\n现实中的预测问题都可以归纳为在函数空间 H = {f ∣ f : X → Y}\n之中寻找最优的预测函数。这里 X\n是输入集，其中的元素一般表示预测的基础（已知信息）。而 Y\n是输出集，其中的元素一般表示需要预测的结果。\n我们假设 f ∈ H\n为最优函数，也就是我们要寻找的。一般这个函数不会已知，但我们可以知道若干对输入输出组\n(xi,yi)\n满足 $f(x_i) = y_i \\pm {\\rm\nnoise}$（${\\rm noise}$\n指的是可能出现的数据扰动）。这些输入输出组构成训练集。\n统计机器学习的目标就是根据训练集，按照某种算法尝试找一个 g ∈ H，让 g 尽可能表现类似 f。\n统计机器学习可以按照监督的介入分为：\n\n监督学习\n无监督学习\n半 / 弱监督学习\n\n监督学习事实上更贴近我们上述的统计机器学习定义，其又可以被分为回归（如线性回归、二次回归）以及分类。而无监督学习实际上常常被称为聚类。\n有无监督的差别可以理解为训练集之中的输入输出对 (xi,yi)\n的 yi\n是否明确。如果 yi\n明确，那么这个学习就有监督，否则无监督。\n下面解释为何无监督又被称为聚类。由于 yi\n是不给定的，所以我们不能很明确给出一个已知局面具体属于何种类别，但我们对于给定的两个已知局面，我们可以判断其相似性（断定两者是否大概率属于同一类别），进而将类似的输入输出对聚合在一类里面，不类似的尽可能分开，这就是聚类（clustering）。所以尽管学习目标都是寻找\ng\n让模型的预测尽可能准确，但是两者的学习方式是不同的。\n之后我们给出两个概念，就是过拟合以及泛化能力。\n过拟合是机器学习要处理的一个重要问题，其描述的就是算法给出了一个相当复杂的函数\ng，其在训练集上能够相当准确率地和\nf\n类似，但是在其余输入上却不够好。泛化能力描述的是这个模型在面对未知输入的时候是否能够做出合理输出的能力。\n朴素 Bayes 法\n这个方法应用在多分类问题上。我们可以认为输入空间为若干 n 维向量的集合 X ⊂ ℝn，输出空间则是若干类别（标签）的集合\nY = {c1, c2, ⋯, ck}。所以说输入\nX 是 X 上的随机变量，输出 Y 是 Y 上的随机变量。考虑 X, Y 的联合分布 f(x,y)。\n我们得出：\n$$\nP(Y = c_k \\mid X = x) = \\frac{\n    P(X = x \\mid Y = c_k)P(Y = c_k)\n} {\n    \\sum_k P(X = x \\mid Y = c_k)P(Y = c_k)\n}\n$$\n这个概率实际上是在给定输入 X = x 的时候，输出 Y = ck\n的后验概率。所有的先验概率来源于训练集，也就是用频率近似概率。\n我们确定最后的输出的方式是寻找令后验概率最大的 ck。由于上述分母保持常数，所以输出：\ny = arg maxckP(X=x∣Y=ck)P(Y=ck)\n但是我们这里要注意到先验概率之中的 P(X=x∣Y=ck)\n项，其复杂度随着 n\n的上升而指数上升。但是我们可以假设 X\n的各个维度是独立的，所以我们可以得到：\n$$\n\\begin{aligned}\nP(X = x \\mid Y = c_k) &amp;= P\\left(X^{(1)} = x^{(1)}, X^{(2)} =\nx^{(2)}, \\cdots, X^{(n)} = x^{(n)} \\ \\middle| \\  Y = c_k\\right) \\\\\n&amp;= \\prod_{j = 1}^n P\\left(X^{(j)} = x^{(j)} \\ \\middle| \\ Y =\nc_k\\right)\n\\end{aligned}\n$$\n最终给出的 Bayes 分类器为： $$\ny = \\arg\\max_{c_k} P(Y = c_k)\\prod_{j = 1}^n P\\left(X^{(j)} = x^{(j)} \\\n\\middle| \\ Y = c_k\\right)\n$$\n这里给出平滑的概念。也就是如果训练集中如果没有出现过某一个\ncase，这个时候 case 的频率为 0，但是显然我们不能把概率估计为 0，这个时候会引入平滑。这里给出一个例子：\n$$\nP_\\lambda\\left(X^{(j)} = a_{jl} \\ \\middle| \\ Y = c_k\\right) = \\frac{\n    \\sum_{i = 1}^N {\\rm idx}\\left(x_i^{(j)} = a_{jl}, y_i = c_k\\right) +\n\\lambda\n} {\n    \\sum_{i = 1}^N {\\rm idx}(y_i = c_k) + S_j\\lambda\n}\n$$\n${\\rm idx}$\n函数为示性函数，其参数为布尔表达式，为真的时候函数返回\n1，否则返回 0。\n这里 Sj\n为 x(j)（输入第\nj 维）的取值集合 {aj1, aj2, ⋯, ajSj}\n的大小。\n这里 λ 是平滑系数，一般取\nλ = 1，此时平滑成为\nLaplace 平滑。\n支持向量机（SVM）\nSVM 是一个适用于二分类问题的计算模型。\n给定线性可分训练集 T = {(x1,y1), (x2,y2), ⋯, (xN,yN)}，这里\nxi ∈ X = ℝn\n以及 yi ∈ Y = {1,  − 1}。这里我们称\n1 为正类， − 1 为负类。\n我们希望寻找一个超平面 w*Tx + b* = 0，给定决策函数：\n$$\nf(\\boldsymbol x) = {\\rm sgn}(\\boldsymbol w^{*T}\\boldsymbol x + b^*)\n$$\n这就是线性可分支持向量机。\n为了评估一个超平面 wTx + b = 0，我们给定\nT 之中的一个样本点 (xi,yi)，定义函数间隔：\nγ̂i = yi(wTxi+b)\n定义几何间隔：\n$$\n\\gamma_i = y_i\\left(\\frac{\\boldsymbol w^T}{\\|\\boldsymbol w\\|}\\boldsymbol\nx_i + \\frac{b}{\\|\\boldsymbol w\\|}\\right)\n$$\n上述定义是针对单个样本点的，所以对于整个训练集 T，定义：\n$$\n\\begin{cases}\n    \\hat\\gamma = \\min_i \\hat\\gamma_i \\\\\n    \\gamma = \\min_i \\gamma_i \\\\\n\\end{cases}\n$$\n这也就是训练集和超平面的函数间隔以及几何间隔。这两种间隔之间相差\n∥w∥ 倍。\n我们选择超平面的标准就是最大化超平面和训练集的间隔，也就是求取\nmaxw, bγ。由于\nw, b\n可以成比例缩放，所以说我们完全可以假设 γ̂ = 1，从而最优化问题转化为最大化\n1/∥w∥，等价于最小化\n1/2∥w∥2。所以说问题就是求解\nminw, b1/2∥w∥2。\n这里由于 γ̂ = 1，所以说总是存在 (xi,yi)\n满足 yi(wTxi+b) = γ̂ = 1，这个向量就是支持向量。\nSVM 的学习过程，可以先定义 Lagrange 函数：\n$$\nL(\\boldsymbol w, b, \\boldsymbol\\alpha) = \\frac{1}{2}\\|\\boldsymbol w\\|^2\n+ \\sum_{i = 1}^N \\alpha_i[1 - y_i(\\boldsymbol w^T\\boldsymbol x_i + b)]\n$$\n这里 αi ≥ 0，并且\nα = (α1,α2,⋯,αN)T\n为 Lagrange 乘子向量。\n我们知道：\n$$\n\\max_\\boldsymbol\\alpha L(\\boldsymbol w, b, \\boldsymbol\\alpha) =\n\\begin{cases}\n    \\dfrac{1}{2}\\|\\boldsymbol w\\|^2 &amp; {\\rm when\\ some\\ requirements\\\nare\\ satisfied} \\\\\n    \\infty &amp; {\\rm otherwise}\n\\end{cases}\n$$\n所以说 minw, bmaxαL(w,b,α)\n与原问题等价。\n另外，我们断定：\nminw, bL(w,b,α) ≤ L(w,b,α) ≤ maxαL(w,b,α)\n所以我们有：\nmaxαminw, bL(w,b,α) ≤ minw, bmaxαL(w,b,α)\n这个等号成立的条件为 KKT\n条件。所以我们将问题转化为求 maxαminw, bL(w,b,α)。\n我们令 L(w,b,α)\n对 w, b\n偏导为 0 并代入就将问题转化为：\n$$\n\\max_\\boldsymbol\\alpha\\left[-\\frac{1}{2}\\sum_{i = 1}^N \\sum_{j = 1}^N\n\\alpha_i\\alpha_jy_iy_j(\\boldsymbol x_i^T\\boldsymbol x_j) + \\sum_{i =\n1}^N \\alpha_i\\right]\n$$\n这里的约束条件为：\n$$\n\\sum_{i = 1}^N \\alpha_iy_i = 0\\ (\\alpha_i \\geq 0)\n$$\n我们据此获得 α*，从而我们可以计算：\n$$\n\\begin{cases}\n    \\boldsymbol w^* = \\sum_{i = 1}^N \\alpha_i^*y_i\\boldsymbol x_i \\\\\n    b^* = y_j - \\sum_{i = 1}^N \\alpha_i^*y_i(\\boldsymbol\nx_i^T\\boldsymbol x_j)\\ (\\alpha_j^* \\neq 0)\n\\end{cases}\n$$\n但是有的时候这些点并不能被线性超平面完全分隔，所以说 yi(wTxi+b) ≥ 1\n并不能处处满足，所以需要引入松弛变量：\nyi(wTxi+b) ≥ 1 − ξi\n为了尽量减小 ξi\n的影响，所以我们可以把优化目标改为：\n$$\n\\min_{\\boldsymbol w, b, \\xi}\\left(\\frac{1}{2}\\|\\boldsymbol w\\|^2 +\nC\\sum_{i = 1}^N \\xi_i\\right)\n$$\n这种处理方式称为软间隔最大化，这里 C &gt; 0 为惩罚参数，C 越大惩罚力度越大。\n按照线性可分 SVM 的方法，问题转化为：\n$$\n\\max_\\alpha\\left[-\\frac{1}{2}\\sum_{i = 1}^N \\sum_{j = 1}^N\n\\alpha_i\\alpha_jy_iy_j(\\boldsymbol x_i^T\\boldsymbol x_j) + \\sum_{i =\n1}^N \\alpha_i\\right]\n$$\n这里的约束条件为：\n$$\n\\sum_{i = 1}^N \\alpha_iy_i = 0\\ (0 \\leq \\alpha_i \\leq C)\n$$\n我们据此获得 α*，从而我们可以计算：\n$$\n\\begin{cases}\n    \\boldsymbol w^* = \\sum_{i = 1}^N \\alpha_i^*y_i\\boldsymbol x_i \\\\\n    b^* = y_j - \\sum_{i = 1}^N \\alpha_i^*y_i(\\boldsymbol\nx_i^T\\boldsymbol x_j)\\ (0 &lt; \\alpha_j^* &lt; C)\n\\end{cases}\n$$\nαi* &gt; 0\n对应的 xi\n是支持向量。\n\n若 αi* = 0，则不是支持向量（对应曲线外侧的点）\n若 0 &lt; αi* &lt; C，则\nξi = 0，那么\nxi\n在间隔边界上，是支持向量（对应两条虚线上的点）\n若 αi* = C，那么\nxi\n也是支持向量\n\n若 0 &lt; ξi &lt; 1，则分类正确（对应在己方虚线和实线之间的点）\n若 ξi = 1，则在超平面上（对应在实线上的点）\n若 ξi &gt; 1，则被误分（对应在实线和对方虚线之间的点）\n\n\n这里给出一个结论，也就是样本点到软间隔边界（虚线边界）的距离为 ξi/∥w∥。\n另外一方面，我们考虑使用非线性的方式分割数据点。事实上就是尝试建立一个非线性映射将原空间的数据点映射到新空间上，这些数据点在新空间上线性可分。\n考虑使用映射 ϕ : X → H 将输入\nx ∈ X\n映射到新空间 H 上，这里把\nK(x,y) := ϕ(x)Tϕ(y)\n称为核函数。这个时候所有的与内积相关的运算均应该使用核函数进行。\n按照线性可分 SVM 的方法，问题转化为：\n$$\n\\max_\\alpha\\left[-\\frac{1}{2}\\sum_{i = 1}^N \\sum_{j = 1}^N\n\\alpha_i\\alpha_jy_iy_jK(\\boldsymbol x_i, \\boldsymbol x_j) + \\sum_{i =\n1}^N \\alpha_i\\right]\n$$\n这里的约束条件为：\n$$\n\\sum_{i = 1}^N \\alpha_iy_i = 0\\ (0 \\leq \\alpha_i \\leq C)\n$$\n我们据此获得 α*，从而我们可以计算：\n$$\nb^* = y_j - \\sum_{i = 1}^N \\alpha_i^*y_iK(\\boldsymbol x_i, \\boldsymbol\nx_j)\\ (0 &lt; \\alpha_j^* &lt; C)\n$$\n原有的决策函数之中含有内积，所以也需要将其修改为：\n$$\nf(\\boldsymbol x) = {\\rm sgn}\\left(\\sum_{i = 1}^N\n\\alpha_i^*y_iK(\\boldsymbol x_i, \\boldsymbol x) + b^*\\right)\n$$\n常用的核函数包括多项式核函数：\nK(x,y) = (xTy+1)p\n以及高斯核函数：\n$$\nK(\\boldsymbol x, \\boldsymbol y) = \\exp\\left(-\\frac{\\|\\boldsymbol x -\n\\boldsymbol y\\|^2}{2\\sigma^2}\\right)\n$$\n决策树\n我们定义随机变量 X\n的熵为：\n$$\nH(X) = -\\sum_{i = 1}^n p_i\\log p_i\n$$\n当概率由训练集 D\n给出，该熵可以标记为 H(D)。\n之后给出条件熵：\n$$\nH(Y \\mid X) = \\sum_{i = 1}^n P(X = x_i)H(Y \\mid X = x_i)\n$$\n这表示的是已经知道 X 的时候\nY 的不确定性。\n之后定义特征 A 对数据集\nD\n的信息增益为：\ng(D,A) = H(D) − H(D∣A)\n这实际上表示的是给定特征 A\n的时候数据集 D\n不确定性减少的程度。\n假设有训练集 D，有 K 个类 Ck，特征 A 有 n 个取值 ai，特征 A 的不同取值将 D 划分为 n 个子集 Di，记 Di 中属于 Ck\n类的样本集合为 Dik，那么：\n$$\n\\begin{aligned}\n    g(D, A) &amp;= H(D) - H(D \\mid A) \\\\\n    &amp;= -\\sum_{k = 1}^K \\frac{|C_k|}{|D|}\\log\\frac{|C_k|}{|D|} +\n\\sum_{i = 1}^n \\frac{|D_i|}{|D|}\\left(\\sum_{k = 1}^K\n\\frac{|D_{ik}|}{|D_i|}\\log\\frac{|D_{ik}|}{|D_i|}\\right)\n\\end{aligned}\n$$\n下面介绍 ID3 算法，这个算法可以用于生成决策树：\n\n如果 D\n之中所有例子属于同一类或者没有用于判断的特征，则返回单节点树，类标记为实例数最多的类\n选择信息增益最大的特征 Ag，其信息增益为\nδA\n如果 δA 小于阈值\nε，那么置单节点决策树，类标记为实例数最多的类\n否则按照特征取值分割训练集，如果某个分割后的块为空，那么构建单节点子树，类标记为\nD\n实例数最多的类。若非空则构建子树，递归上述过程\n\n这样的算法倾向于选择分支比较多的属性。\n所以定义信息增益比：\n$$\ng_R(D, A) = \\frac{g(D, A)}{H_A(D)}\n$$\n将 ID3 算法之中的信息增益换成信息增益比则得到 C4.5 算法。\n这种方法生成的决策树可能产生过拟合，所以需要一定程度上的剪枝。剪枝的基本流程在于找到一个父节点，剪取其下一代后将其作为新的叶子节点，其类型标记为其原来对应的子树中量最大的类。\n在数据量足够大的时候，可以使用验证集进行剪枝，也就是不断使用验证集剪枝直到性能下降。如果数据量不够，则使用训练集，从下往上缩节点，直到损失函数回升。损失函数定义：\n$$\nC_a(T) = \\sum_{t = 1}^{|T|}N_tH_t(T) + a|T|\n$$\n这里经验熵定义为：\n$$\nH_t(T) = -\\sum_k \\frac{N_{tk}}{N_t}\\log\\frac{N_{tk}}{N_t}\n$$\n这里某一个节点 t 的样本数为\nNt，其中\nk 类的样本数为 Ntk。\n神经网络与深度学习\n基本神经元结构\n一个神经网络中的神经元一般接受多个输出并产生一个输出，一般而言其数学表达为：\n$$\ny = g\\left(\\sum_{i = 1}^n w_ix_i + b\\right)\n$$\n这里函数 g\n一般是非线性的，称为激活函数。激活函数常见的有 sigmoid\n等。\n反向传播算法（BP）\n训练一个多层神经网络可以分为两步，首先是正向从输入计算出输出，和标准输出对比，算出损失函数（衡量实际输出和标准输出的差别），这是正向传播。之后就是根据差别的大小，计算出网络中各个权重对最终输出的偏导数，从而更新权重值，这是反向传播。\n一般而言我们常常使用均方误差评价输出，也就是说对于某一层神经元以及某一个样本\nd，标记其中第 j 个神经元的实际输出为 oj，理想输出为\ntj，那么损失函数为：\n$$\nE_d(\\boldsymbol w) = \\frac{1}{2}\\sum_j (t_j - o_j)^2\n$$\n根据损失函数，权重 wji（第\nj 个神经元对第 i 个输入的权重）的更新量为：\n$$\n\\Delta w_{ji} = -\\eta\\frac{\\partial E_d}{\\partial w_{ji}}\n$$\n这里 0 &lt; η &lt; 1\n称为学习率。\n我们设置一个中间量：\nnj := ∑iwjixji + bj\n也就是未激活的神经元输出。那么我们知道：\n$$\n\\frac{\\partial E_d}{\\partial w_{ji}} = \\frac{\\partial E_d}{\\partial\nn_j}\\frac{\\partial n_j}{\\partial w_{ji}} = \\frac{\\partial E_d}{\\partial\nn_j}x_{ji}\n$$\n下面我们对输出层和隐含层分别计算损失函数对未激活输出的偏导数。\n如果该层为输出层，那么我们进一步展开：\n$$\n\\frac{\\partial E_d}{\\partial n_j} = \\frac{\\partial E_d}{\\partial\no_j}\\frac{\\partial o_j}{\\partial n_j} = \\frac{\\partial}{\\partial\no_j}\\left(\\frac{1}{2}\\sum_k(t_k - o_k)^2\\right)\\frac{\\partial\n\\sigma(n_j)}{\\partial n_j} = -(t_j - o_j)o_j(1-o_j)\n$$\n这里默认激活函数为 sigmoid 函数。\n如果该层为隐藏层，我们记其下游层的神经元构成集合 D。作如下展开：\n$$\n\\begin{aligned}\n\\frac{\\partial E_d}{\\partial n_j} &amp;= \\sum_{k \\in D}\\frac{\\partial\nE_d}{\\partial n_k}\\frac{\\partial n_k}{\\partial o_j}\\frac{\\partial\no_j}{\\partial n_j} \\\\\n&amp;= \\sum_{k \\in D}\\frac{\\partial E_d}{\\partial\nn_k}\\frac{\\partial}{\\partial o_j}\\left(\\sum_l w_{kj}o_j +\nb\\right)\\frac{\\partial\\sigma(n_j)}{\\partial n_j} \\\\\n&amp;= \\sum_{k \\in D}\\frac{\\partial E_d}{\\partial n_k}w_{kj}o_j(1 - o_j)\n\\\\\n&amp;= o_j(1 - o_j)\\sum_{k \\in D}\\frac{\\partial E_d}{\\partial n_k}w_{kj}\n\\end{aligned}\n$$\n这里还有一项偏导数实则可以继续按照上述的方式递推计算，直到计算到输出层。\n这里额外提一下，均方误差只是一个选择，在分类问题中，更常用的是交叉熵误差：\nHt(o) =  − ∑itilog (oi)\n过拟合问题与正则化\n过拟合问题在之前有过说明，在深度学习之中减少过拟合的一个方法就是在损失函数之中加入正则项：\n$$\nE_d(\\boldsymbol w) = \\frac{1}{2}\\sum_k(t_k - o_k)^2 + \\|\\boldsymbol w\\|\n$$\n另外还有引入 Dropout 以及引入验证集的方式，这里均不展开。\n卷积神经网络（CNN）\nTODO\n循环神经网络（RNN）\nTODO\n","categories":["【学习笔记】计算机"]},{"title":"《信号处理原理》学习笔记","url":"/2021/09/14/note-of-dsp/","content":"一门纯数学课，没有什么特别有意思的地方。但也正因为它是数学课，所以我感觉我学起来会稍微轻松一些，希望是我四大原理之中最舒服的一门课。\n\n\n信号处理基本知识\n信号是一种载有信息的物理量，所以可以说信号是信息的表现形式，信息是信号蕴含的内容。我们探测信号的工具称为传感器（Sensor），传感器是将一种物理变化转化为另一种物理变化的装置。比如说为了探测声波，我们可以使用传感器将声波转化为电信号。\n通过传感器我们可以将某些难以处理的信号转化为我们易于处理的信号。对信号的处理大致可以分为三类，即降噪、特征抽取以及编码解码。\n信号常常使用函数或者序列进行描述，而函数具有图像，所以有的时候信号也会使用具体的图像进行描述。\n\n信号可以按照对于给定的自变量能不能得到确定的因变量分类为确定信号和随机信号。另外，信号\nf(t)\n也可以按照是否存在 T &gt; 0\n满足 ∀t ∈ ℝ, f(t) = f(t+T)\n分为周期信号和非周期信号。\n常见信号形式\n正余弦信号是最常见的信号形式之一，其数学表达式为：\n$$\n\\begin{aligned}\n&amp; f(t) = K \\sin(\\omega t + \\theta) \\\\\n&amp; f(t) = K \\cos(\\omega t + \\theta) \\\\\n\\end{aligned}\n$$\n这里 K\n表示振幅，ω\n表示角频率，θ\n表示初相位。\n\n除去正弦余弦信号，Sa\n信号也是常见的一种信号形式，其数学表达式为：\n$$\n{\\rm Sa}(t) = \\frac{\\sin t}{t}\n$$\n这个信号是一个偶函数，其零点构成的集合为 {kπ ∣ k ∈ ℤ, k ≠ 0}。这个信号的积分性质为：\n$$\n\\int_{-\\infty}^{+\\infty} {\\rm Sa}(t) \\d t = \\pi\n$$\n这个积分一般被称为 Dirichlet\n积分，其一种计算方式可以看下列推导。\n考虑函数：\n$$\nF(t) = \\int_{0}^{+\\infty} \\frac{\\sin x}{x} e^{-tx} \\d x\n$$\n这个函数的导数可以描述为：\n$$\n\\frac{\\d F}{\\d t} = \\frac\\d{\\d t} \\int_{0}^{+\\infty} \\frac{\\sin x}{x}\ne^{-tx} \\d x = \\int_{0}^{+\\infty} \\frac{\\partial e^{-tx}}{\\partial t}\n\\frac{\\sin x}{x} \\d x = -\\int_{0}^{+\\infty} e^{-tx}\\sin x \\d x\n$$\n进一步：\n$$\n\\begin{aligned}\n\\frac{\\d F}{\\d t} &amp;= \\int_{0}^{+\\infty} e^{-tx} \\d \\cos x = \\left.\ne^{-tx}\\cos x \\right|_{0}^{+\\infty} + t \\int_{0}^{+\\infty} e^{-tx}\\cos x\n\\d x \\\\\n&amp;= -1 + t \\int_{0}^{+\\infty} e^{-tx} \\d \\sin x = -1 + t \\left(\n\\left. e^{-tx}\\sin x \\right|_{0}^{+\\infty} + t \\int_{0}^{+\\infty}\ne^{-tx}\\sin x \\d x \\right) \\\\\n&amp;= -1 + t^2 \\int_{0}^{+\\infty} e^{-tx}\\sin x \\d x = -1 - t^2\n\\frac{\\d F}{\\d t}\n\\end{aligned}\n$$\n也就是说：\n$$\n\\frac{\\d F}{\\d t} = -\\frac{1}{1 + t^2} \\Rightarrow F(t) = -\\arctan t + C\n$$\n不难得知 F(+∞) = 0，这就说明 C = π/2，从而 Dirichlet\n积分的结果为：\n$$\n\\int_{-\\infty}^{+\\infty} {\\rm Sa}(t) \\d t = 2F(0) = \\pi\n$$\n\n此外，指数信号也较为常见，其数学表达式为：\nf(t) = Keαt\n指数信号的特征就是，其积分或微分后依然是指数信号。\n复信号分析\n在分析一般的信号的时候，我们可以常常将其看作某一个复信号的实部或者虚部。比如说考虑复指数信号\nf(t) = Kest，这里\ns ∈ ℂ。显然有：\n$$\nf(t) = K e^{[\\Re(s) + \\j\\Im(s)]t} = K e^{(\\Re s)t} (\\cos(t\\Im(s)) +\n\\j\\sin(t\\Im(s)))\n$$\n这里可以发现，复指数信号的实部和虚部都是正余弦信号。\n函数空间与函数分解\n我们继续沿用线性空间的基向量、正交向量组、正交基和标准正交基的概念。现在我们考虑这样的一个线性空间，即定义在\n[t1,t2]\n上的可积复函数空间，定义其内积为：\n$$\n\\langle\\varphi_1, \\varphi_2\\rangle = \\int_{t_1}^{t_2}\n\\varphi_1(t)\\varphi^*_2(t) \\d t\n$$\n两函数如果内积为零，则称两函数正交。\n如果函数 φ1, φ2, ⋯, φn\n满足：\n$$\n\\langle\\varphi_i, \\varphi_j\\rangle = \\int_{t_1}^{t_2}\n\\varphi_i(t)\\varphi^*_j(t) \\d t = \\begin{cases}\n0 &amp; i \\neq j \\\\\nk_i &amp; i = j\n\\end{cases}\n$$\n这里 ki\n为非零常数。那么这些函数构成正交函数集。\n称一个正交函数集是完备的，如果不存在一个这个函数集之外的函数 ψ 满足 0 &lt; ψ ⋅ ψ &lt;  + ∞ 且\nψ\n和该函数集之中所有函数正交。实际上完备的正交函数集就说明了这个函数集不能容纳更多的成员。\n信号的运算\n常规运算\n对于信号 f1, f2，我们可以仿照函数四则运算的规定来规定其四则运算方式：\n$$\n\\begin{aligned}\n&amp; (f_1 + f_2)(t) = f_1(t) + f_2(t) \\\\\n&amp; (f_1 - f_2)(t) = f_1(t) - f_2(t) \\\\\n&amp; (f_1 \\cdot f_2)(t) = f_1(t) \\cdot f_2(t) \\\\\n&amp; \\left(\\frac{f_1}{f_2}\\right)(t) = \\frac{f_1(t)}{f_2(t)}\n\\end{aligned}\n$$\n另外，我们还可以对信号进行波形变换。常见的变换包括平移变换、反褶变换、压扩变换。\n考虑平移变换：\n$$\n\\begin{aligned}\nf &amp;\\mapsto f' \\\\\nf(t) &amp;\\to f(t - b)\\\\\n\\end{aligned}\n$$\n这个变换可以将信号的波形沿着横轴（时间轴）正向平移 b 个单位。\n反褶变换指的是下述的变换：\n$$\n\\begin{aligned}\nf &amp;\\mapsto f' \\\\\nf(t) &amp;\\to f(-t)\\\\\n\\end{aligned}\n$$\n这个变换会将信号沿着纵轴翻折。\n而压扩变换指的是：\n$$\n\\begin{aligned}\nf &amp;\\mapsto f' \\\\\nf(t) &amp;\\to f(at)\\\\\n\\end{aligned}\n$$\n参数 a\n控制了压扩的形式。如果 a &gt; 0，则压扩的时候不需要反褶。如果\na &lt; 0，则压扩的时候需要反褶。如果\n|a| &gt; 1，则变换是压缩。如果\n|a| &lt; 1，则变换是扩张。\n积分微分运算与能量\n对于符合一定条件的信号，我们可以进行微分积分运算，记号为：\n$$\n\\begin{aligned}\n&amp; \\left(\\frac{\\d}{\\d t} f\\right)(t_0) = \\left.\\frac{\\d f}{\\d\nt}\\right|_{t = t_0} \\\\\n&amp; \\left(\\int_{-\\infty} f \\d t\\right)(t_0) = \\int_{-\\infty}^{t_0}\nf(t) \\d t\n\\end{aligned}\n$$\n基于积分微分运算，我们可以给定信号能量和信号功率的定义。对于连续空间（即定义在全实数上）的信号\nf(t)，能量定义为：\n$$\nE(f) = \\int_{-\\infty}^{+\\infty} \\|f(t)\\|^2 \\d t\n$$\n功率则是能量除以时间，但是考虑到时间范围是无穷大的，所以需要从极限进行定义：\n$$\nP(f) = \\lim_{T\\to+\\infty}\\frac{1}{T}\\int_{-T / 2}^{T / 2} \\|f(t)\\|^2 \\d\nt\n$$\n对于离散空间定义的信号 f，表达类似：\n$$\n\\begin{aligned}\n&amp; E(f) = \\sum_{n = -\\infty}^{+\\infty} \\|f(n)\\|^2 \\\\\n&amp; P(f) = \\lim_{N\\to\\infty}\\frac{1}{2N + 1} \\sum_{n = -N}^{N}\n\\|f(n)\\|^2\n\\end{aligned}\n$$\n能量有限的信号称为能量有限信号，或在不引起混淆的时候简称能量信号。功率有限的信号称为功率有限信号，或在不引起混淆的时候简称功率信号。\n卷积运算\n对于两个连续时间信号 f, g，定义两者的卷积为：\n$$\n(f * g)(t) = \\int_{-\\infty}^{+\\infty} f(t - \\tau)g(\\tau) \\d\\tau\n$$\n卷积的存在性取决于上述积分是否存在，并且要求积分结果是有限的。\n而对于离散的时间信号 f, g，卷积定义为：\n$$\n(f * g)(n) = \\sum_{m = -\\infty}^{+\\infty} f(n - m)g(m)\n$$\n从几何意义上讲，卷积指的是一个信号的反褶信号在时间轴上滑动的过程中，它与另外一个信号重合部分相乘得到的新信号的面积。\n卷积显然符合下述运算律：\n$$\n\\begin{cases}\nf_1 * f_2 = f_2 * f_1 \\\\\nf_1 * (f_2 + f_3) = f_1 * f_2 + f_1 * f_3 \\\\\n(f_1 * f_2) * f_3 = f_1 * (f_2 * f_3)\n\\end{cases}\n$$\n卷积和微分积分运算的关系则为：\n$$\n\\frac{\\d}{\\d t}(f_1 * f_2) = f_1 * \\left(\\frac{\\d}{\\d t} f_2\\right) =\n\\left(\\frac{\\d}{\\d t} f_1\\right) * f_2\n$$\n以及：\n$$\n\\int_{-\\infty} (f_1 * f_2) \\d t = f_1 * \\left(\\int_{-\\infty} f_2 \\d\nt\\right) = \\left(\\int_{-\\infty} f_1 \\d t\\right) * f_2\n$$\n对于高阶微分积分，存在下述关系：\n(f1*f2)(n) = f1(m) * f2(n−m)\n上标括号中若为正整数，则表示高阶微分。若为负整数，则表示高阶积分。可以发现上述卷积的积分微分运算规律均为该公式的特殊情况。\n相关运算\n定义两个信号的相关为：\n$$\nR(f_1, f_2)(t) = \\int_{-\\infty}^{+\\infty} f_1(\\tau)f_2^*(\\tau - t)\\d\\tau\n= \\int_{-\\infty}^{+\\infty} f_1(\\tau + t)f_2^*(\\tau)\\d\\tau\n$$\n显然可以注意到：\n$$\n\\begin{cases}\nR(f_1, f_2) = \\mathcal{R}[R^*(f_2, f_1)] \\\\\nR(f_1, f_2) = f_1 * \\mathcal{R}^*[f_2]\n\\end{cases}\n$$\n这里 ℛ 表示反褶变换，即 ℛ[f](t) = f(−t)。\n第一条定律说明了相关运算并不是交换的。\n常用奇异信号\n我们已经介绍过正弦余弦信号、指数信号等常用信号，另外还有一些形式较为特殊的信号称为奇异信号。这些信号的价值一般在于具有一些较为优越的运算特性。\n首先介绍单位斜变信号，数学形式为：\n$$\nR(t) := \\begin{cases}\n0 &amp; t &lt; 0 \\\\\nt &amp; t \\geq 0\n\\end{cases}\n$$\n另外常用的还有截顶单位斜变信号：\n$$\nR_\\tau(t) := \\begin{cases}\n0 &amp; t &lt; 0 \\\\\nt &amp; 0 \\leq t &lt; \\tau \\\\\n\\tau &amp; t \\geq \\tau\n\\end{cases}\n$$\n从单位斜变信号衍生得到单位阶跃信号：\n$$\nu(t_0) = \\frac{\\d R}{\\d t}(t_0) := \\begin{cases}\n0 &amp; t_0 &lt; 0 \\\\\n1 &amp; t_0 \\geq 0\n\\end{cases}\n$$\n进而可以衍生出单位矩形脉冲信号：\n$$\nG_\\tau(t) := \\begin{cases}\n1 &amp; |t| \\leq \\tau / 2 \\\\\n0 &amp; |t| &gt; \\tau / 2\n\\end{cases}\n$$\n矩形脉冲信号和阶跃信号具有下述的关系：\n$$\nG_\\tau(t) = u\\left(t + \\frac{\\tau}{2}\\right) - u\\left(t -\n\\frac{\\tau}{2}\\right)\n$$\n单位矩形脉冲信号的一个重要作用是作窗函数以截取某信号的某一段信息。对于信号\nf，将其与单位矩形脉冲信号作乘法得到\nGτf。该信号仅有\n[−τ/2,τ/2]\n上的信息被保留，其余均为零。也就是说单位矩形脉冲信号进行了信息截取。\n\n单位阶跃信号另外一种衍生是符号函数信号：\n$$\n{\\rm sgn}(t) := \\begin{cases}\n1 &amp; t \\geq 0 \\\\\n-1 &amp; t &lt; 0\n\\end{cases}\n$$\n该信号和单位阶跃信号的关系是：\n$$\n{\\rm sgn}(t) = 2u(t) - 1\n$$\n\n对单位阶跃信号求导即可得到单位冲激信号 δ，其定义为：\n$$\n\\begin{aligned}\n&amp; \\int_{-\\infty}^{+\\infty} \\delta(t) \\d t = 1 \\\\\n&amp; \\delta(t) = 0 (t \\neq 0)\n\\end{aligned}\n$$\n更一般的冲激信号可以用单位冲激信号定义，对于在 t0 处冲激，强度为 E 的冲激信号，其表达式为：\nδE, t0(t) = Eδ(t−t0)\n另外一种定义方式是利用单位矩形脉冲信号取极限，也就是保证全实数集上积分为\n1\n的条件下令取非零值的区间尽可能小：\n$$\n\\delta = \\lim_{\\tau\\to 0}\\frac{G_\\tau}{\\tau}\n$$\n冲激信号具有下述压扩性质：\n$$\n\\delta(at) = \\frac{1}{|a|}\\delta(t) (a \\neq 0)\n$$\n冲激信号的一个特征就是搬移特性：\nf * δ1, t0 = 𝒮t0[f]\n这里 𝒮t0\n表示平移变换，即 𝒮t0[f](t) = f(t−t0)。\n上述的平移会将 f\n原先的原点平移到冲激信号的冲激点处。\n证明则可以直接根据卷积的定义：\n$$\n(f * \\delta_{1, t_0})(t) = \\int_{-\\infty}^{+\\infty}f(t - \\tau)\\delta_{1,\nt_0}(\\tau)\\d\\tau = f(t - t_0) = \\mathcal{S}_{t_0}[f](t)\n$$\n与搬移特性原理类似的是筛选特性，也就是冲激信号和信号乘积的积分会得到该信号在冲激点处的值：\n$$\n\\int_{-\\infty}^{+\\infty}f(t)\\delta(t - t_0)\\d t = f(t_0)\n$$\n一般模拟信号分解\n基本分解\n对于信号 f，我们可以将其分解为直流分量和交流分量，我们规定交流分量的积分为零，即：\n$$\n\\begin{aligned}\n&amp; f_{\\rm DC}(t) = \\lim_{T\\to+\\infty}\\frac{1}{T}\\int_{-T / 2}^{T /\n2}f(t)\\d t \\\\\n&amp; f_{\\rm AC}(t) = f(t) - f_{\\rm DC}(t) \\\\\n\\end{aligned}\n$$\n此外，还有奇偶分解：\n$$\n\\begin{aligned}\nf_e(t) = \\frac{f(t) + f(-t)}{2} \\\\\nf_o(t) = \\frac{f(t) - f(-t)}{2} \\\\\n\\end{aligned}\n$$\n以及实虚分解：\n$$\n\\begin{aligned}\nf_r(t) = \\frac{f(t) + f^*(t)}{2} \\\\\nf_i(t) = \\frac{f(t) - f^*(t)}{2\\j} \\\\\n\\end{aligned}\n$$\n上述分解都是严格的，但下述的脉冲分解则是一种近似分解。脉冲分解的思想是把信号分解为若干个矩形脉冲的和，在\n[t0,t0+Δt]\n区间上，信号 f\n可以近似表示为：\nf(t) ≈ f(t0)[u(t−t0)−u(t−t0−Δt)]\n将这些脉冲求和，则得到了信号 f 的一个近似表达。\n正交分解概述\n下述讨论均基于函数平方可积的性质。如果函数 f 满足：\n$$\n\\int_{-\\infty}^{+\\infty} f^2(t) \\d t &lt; +\\infty\n$$\n那么函数 f\n平方可积。所有的平方可积函数构成函数空间 ℒ2(ℝ)。\n此外，依然沿用先前的函数内积、正交、完备正交函数集等定义。\n\n我们考虑 [t1,t2]\n上的完备正交函数集 {φi} 以及函数\nf，其正交分解为：\n$$\nf = \\sum_{k = 1}^{+\\infty} c_k\\varphi_k\n$$\n显然我们可以得到（这一步求解系数的变换称为 Karhunen-Loeve\n变换）：\n$$\nc_k = \\frac{\\langle f, \\varphi_k \\rangle}{\\langle \\varphi_k, \\varphi_k\n\\rangle}\n$$\n据此，可以证明 Parseval 恒等式：\n$$\nE(f) = \\int_{t_1}^{t_2} \\|f(t)\\|^2 \\d t = \\sum_{k = 1}^{+\\infty} \\langle\n\\varphi_k, \\varphi_k \\rangle\\|c_k\\|^2 = \\sum_{k = 1}^{+\\infty}\nE(c_k\\varphi_k)\n$$\n这个定理表明，在正交分解下，信号的能量等于各个分量能量的和。其证明只需要进行展开就可得到：\n$$\n\\begin{aligned}\n\\int_{t_1}^{t_2} \\|f\\|^2 \\d t &amp;= \\int_{t_1}^{t_2} \\left\\|\\sum_{k =\n1}^{+\\infty} c_k\\varphi_k(t)\\right\\|^2 \\d t = \\int_{t_1}^{t_2}\n\\left(\\sum_{k = 1}^{+\\infty} c_k\\varphi_k(t)\\right)\\left(\\sum_{k =\n1}^{+\\infty} c_k\\varphi_k(t)\\right)^* \\d t \\\\\n&amp;= \\int_{t_1}^{t_2} \\left(\\sum_{k = 1}^{+\\infty}\nc_k\\varphi_k(t)\\right)\\left(\\sum_{k = 1}^{+\\infty}\nc_k^*\\varphi_k^*(t)\\right) \\d t \\\\\n&amp;= \\int_{t_1}^{t_2} \\left(\\sum_{k = 1}^{+\\infty}\nc_kc_k^*\\varphi_k(t)\\varphi_k^*(t) + \\sum_{i\\neq j}\nc_ic_j^*\\varphi_i(t)\\varphi_j^*(t)\\right) \\d t \\\\\n&amp;= \\sum_{k = 1}^{+\\infty} \\|c_k\\|^2 \\int_{t_1}^{t_2}\n\\varphi_k(t)\\varphi_k^*(t) \\d t = \\sum_{k = 1}^{+\\infty} \\langle\n\\varphi_k, \\varphi_k \\rangle\\|c_k\\|^2\n\\end{aligned}\n$$\n你说我展开没考虑连续、可导、收敛啥的？我们工科生不懂这些。\n\n将信号展开为完全正交函数集的线性组合的过程即函数正交分解，求解线性组合系数的过程为信号变换。\n周期信号的正交分解\n现在考虑满足 Dirichlet 条件的周期信号 f。Dirichlet 条件指的是：\n\n在一个周期内间断点有限\n在一个周期内极值点有限\n在一个周期内绝对值积分有限\n\n我们考虑下述两个常见的完备正交函数集，这里 ω = 2π/T，T 是 f 的周期，下述函数集在任意的长度为\nT 的闭区间上正交完备：\n\n三角函数集 {1, cos (nωt), sin (nωt) : n ∈ ℕ+}\n指数函数集 $\\{e^{\\j n\\omega t}: n \\in\n\\mathbb{Z}\\}$\n\n在这两个基底下展开得到的线性组合式可以理解为一个无穷级数，这个无穷级数就是傅里叶级数（Fourier\nseries）。两个函数集得到的傅里叶级数分别称为三角形式的傅里叶级数和指数形式的傅里叶级数。\n三角形式的傅里叶级数表示为：\n$$\nf(t) = a_0 + \\sum_{k = 1}^{+\\infty} (a_n\\cos(n\\omega t) +\nb_n\\sin(n\\omega t))\n$$\n不难根据先前的论证得到系数的计算公式，这里 t0 为任意实数：\n$$\n\\begin{aligned}\na_0 &amp;= \\frac{\\omega}{2\\pi} \\int_{t_0}^{t_0 + 2\\pi / \\omega} f(t) \\d\nt \\\\\na_n &amp;= \\frac{\\omega}{\\pi} \\int_{t_0}^{t_0 + 2\\pi / \\omega}\nf(t)\\cos(n\\omega t) \\d t \\\\\nb_n &amp;= \\frac{\\omega}{\\pi} \\int_{t_0}^{t_0 + 2\\pi / \\omega}\nf(t)\\sin(n\\omega t) \\d t \\\\\n\\end{aligned}\n$$\n指数形式的傅里叶级数表示为：\n$$\nf(t) = \\sum_{k = -\\infty}^{+\\infty} F_ke^{\\j k\\omega t}\n$$\n其中有：\n$$\nF_k = \\frac{\\omega}{2\\pi} \\int_{t_0}^{t_0 + 2\\pi / \\omega} f(t)e^{-\\j\nk\\omega t} \\d t\n$$\n两个形式的傅里叶级数的适用范围均是全实数，但实际上这只是因为 f 是周期的。\n严格意义上说，由于我们给定的正交函数集只是在某个长度为 T\n的闭区间上正交，所以展开的傅里叶级数也只应当在这个闭区间上可用。但是由于周期性，我们可以简单地说明闭区间外这个级数表达依然成立。\n这个区分是有必要的，因为严格意义上，在计算 f\n的能量、功率等数值的时候，积分区间均应该是长度为 T 的闭区间。\n\n三角形式和指数形式的傅里叶级数之间的关系可以考虑下述变形：\n$$\n\\begin{aligned}\nf(t) &amp;= a_0 + \\sum_{k = 1}^{+\\infty} (a_n\\cos(n\\omega t) +\nb_n\\sin(n\\omega t)) \\\\\n&amp;= a_0 + \\sum_{k = 1}^{+\\infty} \\left(a_n\\frac{e^{\\j n\\omega t} -\ne^{-\\j n\\omega t}}{2\\j} + b_n\\frac{e^{\\j n\\omega t} + e^{-\\j n\\omega\nt}}{2}\\right) \\\\\n&amp;= a_0 + \\sum_{k = 1}^{+\\infty} \\left(-\\j a_n\\frac{e^{\\j n\\omega t}\n- e^{-\\j n\\omega t}}{2} + b_n\\frac{e^{\\j n\\omega t} + e^{-\\j n\\omega\nt}}{2}\\right) \\\\\n&amp;= a_0 + \\sum_{k = 1}^{+\\infty} \\left(\\frac{b_n - \\j a_n}{2} e^{\\j\nn\\omega t} + \\frac{b_n + \\j a_n}{2} e^{-\\j n\\omega t}\\right) \\\\\n\\end{aligned}\n$$\n也就是说这两者之间是等价的，并且可以据此发现上述系数计算公式之间的关系。\n据此，我们也可以得到，如果周期信号 f 是偶函数，那么其指数形式 FS\n系数为实数序列。如果为奇函数，则为纯虚数序列。\n\n考虑 Parseval 定律在 FS 上的应用，显然有（注意积分区间是长度为 T 的闭区间）：\n$$\nP(f) = \\sum_{k = -\\infty}^{+\\infty} \\|F_k\\|^2 = \\|a_0\\|^2 + \\frac12\n\\sum_{k = 1}^{+\\infty}(\\|a_k\\|^2 + \\|b_k\\|^2)\n$$\n频谱\n频谱的定义\n现在默认 FS 使用指数形式的。考虑系数序列 {Fn ∈ ℂ}−∞ &lt; n &lt;  + ∞。以频率为横轴，将频率所对应的\nFS 系数的模为该处的频谱值，即可做出信号的幅度频谱。如果以 FS\n系数的辐角作为该处的频谱值，则得到相位频谱。两个频谱合并就可以表现出该信号所有的\nFS 系数的信息。\n我们思考 FS 系数的意义，事实上 FS\n系数作为线性组合的系数，代表了被分解信号中某一个频率的成分的多少。从而这就意味着，频谱表现的是信号在频率意义上的构成。\n不过注意，由于指数形式的 FS 之中包含 $e^{-\\j n\\omega t}(n\\in \\mathbb{N}^+)$\n项，其频率为负数  − nω，所以信号的频谱图上会出现负频率。\n我们可以断定频谱的一些性质：\n\n频谱是离散的，且只会在 nω(n∈ℤ)\n点处存在值，这些具有值的频率称为谐波频率（Harmonic\nfrequency）。\n幅度频谱图是关于纵轴对称的，而相位频谱是关于原点对称的，这是由于\nFk 与\nF−k\n共轭。\n\n现在我们考虑一个重要周期信号的频谱，即周期矩形脉冲。\n假设某一周期矩形脉冲信号 f\n周期为 T0 = 2π/ω0，在区间\n[−T0/2,T0/2]\n上定义为：\n$$\nf(t) = \\begin{cases}\nE &amp; |t| \\leq \\tau_0 / 2 \\\\\n0 &amp; |t| &gt; \\tau_0 / 2\n\\end{cases}\n$$\n这里 E &gt; 0 且 τ0 &lt; T0。\n其 FS 系数是显然的：\n$$\nF_k = \\frac{\\omega_0}{2\\pi} \\int_{-\\pi / \\omega_0}^{\\pi / \\omega_0}\nf(t)e^{-\\j k\\omega_0 t} \\d t = \\frac{E\\omega_0}{2\\pi} \\int_{-\\tau_0 /\n2}^{\\tau_0 / 2} e^{-\\j k\\omega_0 t} \\d t =\n\\frac{E\\omega_0\\tau_0}{2\\pi}\\frac{\\sin(\\omega_0 k\\tau_0 / 2)}{\\omega_0\nk\\tau_0 / 2}\n$$\n也就是：\n$$\nF_k = \\frac{E\\omega_0\\tau_0}{2\\pi}{\\rm Sa}\\left(\\frac{\\omega_0\nk\\tau_0}{2}\\right)\n$$\n这个结果说明了，周期矩形脉冲信号的频谱具有包络线：\n$$\nF(\\omega) = \\frac{E\\omega_0\\tau_0}{2\\pi}{\\rm\nSa}\\left(\\frac{\\omega\\tau_0}{2}\\right)\n$$\n带宽\n事实上我们注意到，大多的信号幅度频谱在高频区域取值很小，这也就说明大多信号在高频区域几乎不具有能量。\n实际应用中，在失真可忽略的条件下，信号传递可以只传递低频分量（一般而言取频谱包络线最小绝对值的零点以内的分量），这一段区间的长度称为频带宽度，简称带宽。\n非周期信号的正交分解和频谱\nFT 表达式的推理\n任何非周期信号 f\n实际上都可以看成周期无穷大的周期信号。我们考虑周期为 T 的周期信号 fT，其在周期\n[ − T/2, T/2)\n上定义为 fT(t) = f(t), t ∈ [ − T/2, T/2)。实际上可以得到：\nlimT →  + ∞fT = f\n我们没有定义过一个函数列如何收敛为一个函数，故这样的表述并非严谨。\n后续很多证明也仅仅是形式化的，其作用仅仅是形成对定律的直观理解，请不要将这些推导用于严谨的证明之中。\n\n考虑 fT\n的傅里叶级数，如果令 ω = 2π/T，显然有：\n$$\n\\begin{aligned}\nf_T(t) &amp;= \\sum_{k = -\\infty}^{+\\infty} F_k e^{\\j k\\omega t} =\n\\sum_{k = -\\infty}^{+\\infty} \\left(\\frac{1}{T}\\int_{-T / 2}^{T / 2}\nf_T(\\tau)e^{-\\j k\\omega\\tau} \\d\\tau\\right)e^{\\j k\\omega t}\n\\end{aligned}\n$$\n考虑离散频谱中相邻谱线之间的间隔，即 $\\Delta\\omega = \\omega = \\dfrac{2\\pi}{T}$，在\nT →  + ∞ 的时候谱线间隔 Δω → 0，那么我们有：\n$$\n\\begin{aligned}\nf(t) &amp;= \\lim_{T \\to +\\infty} f_T(t) = \\lim_{T \\to +\\infty} \\sum_{k =\n-\\infty}^{+\\infty} \\left(\\frac{1}{T}\\int_{-T / 2}^{T / 2}\nf_T(\\tau)e^{-\\j k\\omega\\tau} \\d\\tau\\right)e^{\\j k\\omega t} \\\\\n&amp;= \\frac{1}{2\\pi} \\lim_{\\Delta\\omega \\to 0} \\sum_{k =\n-\\infty}^{+\\infty} \\left(\\int_{-T / 2}^{T / 2} f_T(\\tau)e^{-\\j\nk\\omega\\tau} \\d\\tau\\right)e^{\\j k\\omega t} \\Delta\\omega\n\\end{aligned}\n$$\n现在我们定义：\n$$\n\\begin{aligned}\nF_T(x) &amp;= \\int_{-T / 2}^{T / 2} f_T(\\tau)e^{-\\j x\\tau} \\d\\tau \\\\\nF(x) &amp;= \\int_{-\\infty}^{+\\infty} f(\\tau)e^{-\\j x\\tau} \\d\\tau\n\\end{aligned}\n$$\n显然有：\nlimΔω → 0FT = F\n该定义下，可以有：\n$$\nf(t) = \\frac{1}{2\\pi} \\lim_{\\Delta\\omega \\to 0} \\sum_{k =\n-\\infty}^{+\\infty} F_T(k\\omega) e^{\\j k\\omega t} \\Delta\\omega\n$$\n下一步则是将该极限转写为积分。但我们注意这样的一点，即 Δω 在变动的时候，被积函数\nFT\n本身也在变动。按照严格的数学理论，这里我们应当严格说明收敛性。但我们只需要直观理解，具体的证明则省略：\n$$\nf(t) = \\frac{1}{2\\pi} \\lim_{\\Delta\\omega \\to 0} \\sum_{k =\n-\\infty}^{+\\infty} F_T(k\\omega) e^{\\j k\\omega t} \\Delta\\omega =\n\\frac{1}{2\\pi} \\int_{-\\infty}^{+\\infty} F(\\omega) e^{\\j\\omega t}\n\\d\\omega\n$$\n\n上述推导中，我们实际上已经给出了一个函数 F(ω) 和信号 f(t) 之间的关系：\n$$\n\\begin{aligned}\nf(t) &amp;= \\frac{1}{2\\pi} \\int_{-\\infty}^{+\\infty} F(\\omega)\ne^{\\j\\omega t} \\d\\omega \\\\\nF(\\omega) &amp;= \\int_{-\\infty}^{+\\infty} f(t)e^{-\\j\\omega t} \\d t\n\\end{aligned}\n$$\n这里我们可以给出函数 F(ω) 的一个理解，我们将其和\nFS 比较：\n$$\n\\begin{aligned}\nf(t) &amp;= \\sum_{k = -\\infty}^{+\\infty} F_ke^{\\j k\\omega t} \\\\\nf(t) &amp;= \\frac{1}{2\\pi} \\int_{-\\infty}^{+\\infty} F(\\omega)\ne^{\\j\\omega t} \\d\\omega \\\\\n\\end{aligned}\n$$\n可以发现上述用 F(ω) 推出 f(t) 的公式实际上类似于将\nf\n表达为正交函数的线性组合，只不过这里的正交函数集是无穷集。这里 F(ω) 实际上相当于信号 f(t)\n的频谱，即其频域表现。\n由 f 推出 F\n的过程就称为傅立叶变换（Fourier transformation），简称\nFT。反过来由 F 推出 f\n则称为傅立叶逆变换，简称 IFT。标记为：\nF = ℱ[f], f = ℱ−1[F]\nFT 的运算性质\nFT 显然是线性变换：\n$$\n\\mathcal{F}\\left[\\sum_{k = 1}^n \\lambda_kf_k\\right] = \\sum_{k = 1}^n\n\\lambda_k\\mathcal{F}[f_k]\n$$\n下述论述中，记 F := ℱ[f]。\n其与反褶变换 ℛ 具有以下性质：\n$$\n\\begin{cases}\n\\mathcal{F}\\mathcal{R}[f] = \\mathcal{R}[F] \\\\\n\\mathcal{F}[f^*] = \\mathcal{R}^*[F] \\\\\n\\mathcal{F}\\mathcal{R}^*[f] = F^* \\\\\n\\end{cases}\n$$\n即时域上反褶等价于频域反褶，时域上共轭等价于频域反褶共轭，时域上反褶共轭等价于频域共轭。\n而对于压扩变换 ℰa，这里 ℰa[f](t) = f(at)，我们有：\n$$\n\\mathcal{F}\\mathcal{E}_a[f] = \\frac{1}{|a|}\\mathcal{E}_{\\frac{1}{a}}[F]\n$$\n对于平移变换 𝒮t0，我们有（这里符号\nℱ\n的两个下标分别代表时域和频域使用的自变量符号）：\n$$\n\\mathcal{F}_{t, \\omega}[f(t - t_0)] = F(\\omega)e^{-\\j\\omega t_0}\n$$\n综合压扩变换和平移变换：\n$$\n\\mathcal{F}_{t, \\omega}[f(at - t_0)] =\n\\frac{1}{|a|}F\\left(\\frac{\\omega}{a}\\right)e^{-\\j\\omega t_0 / a}\n$$\n综合上述可以看出，时域的压扩会导致频域相反的压扩，并且会伴随幅度的变化。而时域的平移不影响幅度频谱，但是相位频谱会发生改变。\n这里使用 ℱt, ω\n实在是折中之举。我自己一向是想要明确函数和函数值的区别的，比如说对函数的变换应该使用花写字体，使用中括号。按照这样的思路，ℱ[f(at−t0)]\n是错误表达，因为方括号内实际上是函数值而非一个函数。\n但是由于通用数学符号很多时候并没有区分两者，所以为了避免使用更多自定义符号导致难以阅读，还是暂且使用\nℱt, ω\n这样的折中符号。\n\n实际上我们注意到 FT 和 IFT\n具有相同的数学结构，那么如果在时域上乘以复指数，频域则会发生平移：\n$$\n\\mathcal{F}_{t, \\omega}[f(t)e^{\\j\\omega_0 t}] = F(\\omega - \\omega_0)\n$$\n结合压扩变换得到：\n$$\n\\mathcal{F}_{t,\n\\omega}\\left[\\frac{1}{|a|}f\\left(\\frac{t}{a}\\right)e^{\\j\\omega_0 t /\na}\\right] = F(a\\omega - \\omega_0)\n$$\n\nFT 和微分积分运算关系大致如下。\n考虑时域上的微分：\n$$\n\\mathcal{F}_{t, \\omega}\\left[f^{(1)}(t)\\right] = \\j\\omega F(\\omega)\n$$\n考虑频域上的微分：\n$$\n\\mathcal{F}^{-1}_{t, \\omega}\\left[F^{(1)}(\\omega)\\right] = -\\j tf(t)\n$$\n考虑时域上的积分：\n$$\n\\mathcal{F}_{t, \\omega}\\left[f^{(-1)}(t)\\right] =\n\\frac{1}{\\j\\omega}F(\\omega) + \\pi F(0)\\delta(\\omega)\n$$\n考虑频域上的积分：\n$$\n\\mathcal{F}^{-1}_{t, \\omega}\\left[F^{(-1)}(\\omega)\\right] = -\\frac{1}{\\j\nt}f(t) + \\pi f(0)\\delta(t)\n$$\n\n而 FT\n和卷积的关系就很明朗，时域与频域相对，其中一个域上的乘积直接对应另一个域上的卷积。不过需要注意可能出现的常系数：\n$$\n\\begin{aligned}\n&amp; \\mathcal{F}[f_1 * f_2] = \\mathcal{F}[f_1] \\cdot \\mathcal{F}[f_2]\n\\\\\n&amp; \\mathcal{F}[f_1 \\cdot f_2] = \\frac{1}{2\\pi} \\mathcal{F}[f_1] *\n\\mathcal{F}[f_2] \\\\\n\\end{aligned}\n$$\nFT 和相关运算的关系为：\n$$\n\\begin{aligned}\n&amp; \\mathcal{F}[R(f_1, f_2)] = F_1F_2^* \\\\\n&amp; \\mathcal{F}[R(f, f)] = \\|F\\|^2\n\\end{aligned}\n$$\n使用这个数学关系就可以得到矩形窗截取可能导致频域畸形的理论解释。我们提到过矩形脉冲乘以某一个信号可以用于截取信号指定区间的信息。但是截取后的信号在频域上的表现则会畸形，考虑下述关系：\n$$\n\\mathcal{F}[G_\\tau f] = \\frac{1}{2\\pi} \\mathcal{F}[G_\\tau] *\n\\mathcal{F}[f]\n$$\n而 ℱ[Gτ] 是 ${\\rm Sa}$\n函数的衍生函数，其和原信号频谱的卷积可能导致频域畸变。\n\nFS 和 FT 的关系\n我们可以这样研究 FS 和 FT 的关系，考虑非周期信号 f，其在区间 [−T/2,T/2]\n外取值均为零。定义周期为 T\n的周期信号 f̃，其在周期 [−T/2,T/2] 上有 f̃ = f。\n考虑 f̃ 的 FS 系数（这里\nω := 2π/T）：\n$$\nF_k = \\frac{1}{T} \\int_{-T / 2}^{T / 2} \\tilde{f}(t)e^{-\\j k\\omega t} \\d\nt = \\frac{1}{T} \\int_{-\\infty}^{+\\infty} f(t)e^{-\\j k\\omega t} \\d t =\n\\frac{1}{T} F(k\\omega)\n$$\n也就是说如果将一个脉冲式的信号（即除了某一个有限区间外取值均为零）扩展为一个周期信号，那么周期信号的离散频谱的包络线和脉冲信号的连续频谱仅仅相差一个常数倍数。\n比如说上述求解过的周期矩形脉冲信号，如果我们仅仅关注一个周期内的矩形脉冲，其连续频谱的表达式为（和之前的论证使用相同的变量符号）：\n$$\nF(\\omega) = E\\tau_0{\\rm Sa}\\left(\\frac{\\omega\\tau_0}{2}\\right)\n$$\n准周期信号\n有一些非周期信号可能会具有类似周期信号的时域重复结构，即可以将时域均匀划分为准周期，每一个准周期内信号的结构相互类似，这类信号就是准周期信号，如果其准周期的长度为\nT，一般会将 f0 = 1/T\n称为准周期信号的基频（Pitch）。\n准周期信号的频谱特征也介于周期信号频谱和非周期信号频谱之间，即其频谱依然连续，但是在谐波频率处具有明显的尖峰。谐波频率处的尖峰就是准周期信号的一大特征。\n周期信号的 FT\n鉴于 FS 和 FT\n具有相同的本质，而周期信号的频谱表现是离散的，我们可以预料到对周期信号求解\nFT 会得到若干离散的冲激函数之和。\n比如说根据：\n$$\n\\frac{1}{2\\pi} \\int_{-\\infty}^{+\\infty} (2\\pi\\delta(\\omega - \\omega_0))\ne^{\\j\\omega t} \\d\\omega = e^{\\j\\omega_0 t}\n$$\n就可以得到复指数信号的 FT 为：\n$$\n\\mathcal{F}_{t, \\omega}[e^{\\j\\omega_0 t}] = 2\\pi\\delta(\\omega -\n\\omega_0)\n$$\n进一步可以推出：\n$$\n\\begin{aligned}\n&amp; \\mathcal{F}_{t, \\omega}[\\cos\\omega_0 t] = \\pi(\\delta(\\omega +\n\\omega_0) + \\delta(\\omega - \\omega_0)) \\\\\n&amp; \\mathcal{F}_{t, \\omega}[\\sin\\omega_0 t] = \\j\\pi(\\delta(\\omega +\n\\omega_0) - \\delta(\\omega - \\omega_0)) \\\\\n\\end{aligned}\n$$\n其他常用函数的 FT\n考虑冲激函数的 FT：\n$$\n\\mathcal{F}[\\delta_{E, 0}](\\omega) = \\int_{-\\infty}^{+\\infty}\nE\\delta(t)e^{-\\j\\omega t} \\d t = E\n$$\n也就是说冲激函数的傅立叶变换为常函数。这意味着冲激信号的频谱是处处均匀的，这种频谱一般称为白色谱或者均匀谱。\n对冲激函数做 IFT 得到：\n$$\n\\mathcal{F}^{-1}[\\delta_{E, 0}](t) = \\frac{1}{2\\pi}\n\\int_{-\\infty}^{+\\infty} E\\delta(\\omega) e^{\\j\\omega t} \\d\\omega =\n\\frac{E}{2\\pi}\n$$\n也就是说常函数的傅立叶变换是在原点的冲激函数，这是好理解的，因为常函数就是频率为零的三角函数。\n上述推理说明了：\n$$\n\\begin{aligned}\n&amp; \\mathcal{F}[\\delta] = 1 \\\\\n&amp; \\mathcal{F}[1] = 2\\pi\\delta \\\\\n\\end{aligned}\n$$\n信号采样\n采样的概念\n我们使用计算机存储时域上连续的信号的时候，只能存储部分点处的信号幅度，这就要求我们决定存储哪些点的信号值。这类每隔一定的时间间隔，从连续信号上取出该点信号幅度的行为就是采样。每次采样之间的时间间隔称为采样周期，一般标记为\nTs。其倒数\nfs = 1/Ts\n即称为采样频率，ωs = 2π/Ts\n则是采样（角）频率。\n理想情况下，我们一般使用冲激串采样，即使用函数：\n$$\np(t) = \\sum_{k = -\\infty}^{+\\infty} \\delta(t - kT_s)\n$$\n使用 p(t)\n乘以需要采样的信号 f(t)\n即可得到采样的结果。\n采样定理\n现在考虑理想冲激串采样，我们考虑采样后信号的频谱表现。记：\n$$\nf_p(t) := f(t)p(t) = \\sum_{k = -\\infty}^{+\\infty} f(t)\\delta(t - kT_s)\n$$\n那么根据 FT 和卷积的关系（这里规定 F := ℱ[f]）：\n$$\n\\begin{aligned}\n\\mathcal{F}[f_p] &amp;= \\frac{1}{2\\pi}F * \\mathcal{F}[p]\n\\end{aligned}\n$$\n这里我们需要求解 ℱ[p]，即冲激串的傅立叶变换。由于冲激串函数实际上是周期函数，所以可以得知其频谱表现也是冲激串。我们可以求解其\nFS 系数（这里 ωs := 2π/Ts）：\n$$\nF_k = \\frac{1}{T_s} \\int_{-T_s / 2}^{T_s / 2} p(t)e^{-\\j k\\omega_s t} \\d\nt = \\frac{1}{T_s}\n$$\n将 p(t) 写成 FS\n得到：\n$$\np(t) = \\sum_{k = -\\infty}^{+\\infty} \\frac{1}{T_s}e^{\\j k\\omega_s t}\n$$\n所以说可以有：\n$$\n\\mathcal{F}[p](\\omega) = \\mathcal{F}_{t, \\omega}\\left[\\sum_{k =\n-\\infty}^{+\\infty} \\frac{1}{T_s}e^{\\j k\\omega_s t}\\right] =\n\\frac{1}{T_s} \\sum_{k = -\\infty}^{+\\infty} \\mathcal{F}_{t, \\omega}[e^{\\j\nk\\omega_s t}] = \\frac{2\\pi}{T_s} \\sum_{k = -\\infty}^{+\\infty}\n\\delta(\\omega - k\\omega_s)\n$$\n也就是说时域的冲激串在频域上也是冲激串。\n如果你尝试这样求解 ℱ[p]：\n$$\n\\mathcal{F}[p] = \\mathcal{F}\\left[\\sum_{k = -\\infty}^{+\\infty}\n\\delta_{1, kT_s}\\right] = \\sum_{k = -\\infty}^{+\\infty}\n\\mathcal{F}[\\delta_{1, kT_s}]\n$$\n显然这会得到错误的结果。错误的原因是这里的级数和傅立叶变换这里不能交换（而上面先写成\nFS 再 FT\n的时候，级数和傅立叶变换又是可以交换的），而更深层次的原因则是冲激串严格上不具有\nFT（不满足 Dirichlet 条件）。\n实际上如果从更深层的意义上说，我们根本没有严格定义冲激函数，毕竟我们能看出来冲激函数根本不可能使用\nRiemann 积分计算，所以还有更深层的数学原理被忽视了。\n但一定程度上，这就是工科。想要钻研这些理论内部严格数学原理的读者可以阅读拓扑、泛函、实分析相关内容。\n\n那么就可以计算取样后信号的频谱了：\n$$\n\\mathcal{F}[f_p] = \\frac{1}{2\\pi}F * \\mathcal{F}[p] = \\frac{1}{T_s}F *\n\\left(\\sum_{k = -\\infty}^{+\\infty} \\delta_{1, k\\omega_s}\\right) =\n\\frac{1}{T_s}\\sum_{k = -\\infty}^{+\\infty} \\mathcal{S}_{k\\omega_s}[F]\n$$\n也就是说抽样后的信号的频谱是将原先的频谱以 ωs\n为周期平移后叠加后得到的。\n\n现在我们考虑现实中常见的信号。常见信号往往具有一个高频截止频率\nωM，其含义为信号的频谱\nF 在区间 [−ωM,ωM]\n外均取零。此外，之前也有提到过带宽相关知识，即大多数信号的能量聚集在低频区段，所以往往会截断高频的部分，而这个截断频率，也可以称为高频截止频率。这类信号频谱中位于区间\n[−ωM,ωM]\n内的频谱峰称为主峰。\n对一个高频截止频率为 ωM\n的信号按照频率 ωs\n采样，采样后的频谱记为 Fp，其是周期为\nωs\n的周期函数，每一个周期都是由原先信号的频谱主峰平移而来。我们现在固定高频截止频率，降低采样频率，考察\nFp\n的变化。在 ωs\n降低的时候，Fp\n周期减小，峰与峰之间的距离减小，从而存在一个临界取样频率，让相邻的两个频谱峰恰好相交。如果取样频率低于这个临界频率，就意味着\nFp\n的各个相邻的频谱峰会相互重叠，即发生频谱混叠。\n如果没有发生频谱混叠，我们可以在采样之后使用低通滤波器将 Fp\n的主峰过滤出来，从而完美还原原先的信号。但是如果发生混叠，这种完美复原则是不可能的。而这个临界频率是显而易见的，即\nωs = 2ωM。\n这就是 Nyquist 取样定理，即使用不低于两倍高频截止频率 ωM 的采样频率\nωs\n采样得到的数据点可以完美还原原信号。\n综合上述，只有信号满足频带受限（即严格具有高频截止频率）并且取样频率足够高的时候，取样才能无损表示原有信号。\n信号复原（内插）\n思考从采样序列恢复原先连续信号的方法，这其实就是插值法的应用，只不过在信号处理原理中我们将之称为内插法。\n现在我们有信号 x(t) 以抽样周期 T 抽样得到的抽样序列 {x(nT)}n ∈ ℤ。进行内插之前，我们需要确定内插函数\nh(t)，而内插函数一般就是我们使用的滤波器的单位冲激响应函数。随后用下述方法计算出内插后的连续信号\nx̃(t)：\n$$\n\\tilde x(t) := \\sum_{n = -\\infty}^{+\\infty} x(nT)h(t - nT) \\approx x(t)\n$$\n使用不同的滤波器对应的内插函数 h(t)，我们能获取到不同效果的复原信号\nx(t)。\n这里需要尝试解释一下滤波器、单位冲激响应、内插这些概念。\n首先简单理解一下系统（System）的概念。系统可以简单理解为对给定输入（称之为激励）给出给定输出（称之为响应）的，具有特定功能的整体。\n滤波器本质上就是一个对信号函数的变换，也是一种系统。只不过这个变换很多时候是用于过滤信号频谱之中的低频（或高频）成分的，所以才会有低通滤波器（或高通滤波器）之类的名称。其激励就是要过滤的信号，响应就是过滤后的信号。根据我们对滤波器性质的要求，我们至少需要滤波器是线性系统，满足激励叠加等于响应叠加以及激励倍增等于响应倍增。\n而单位冲激响应就是一种特殊的响应。如果某一个滤波器的激励为单位冲激信号，其在这个条件下的响应就是单位冲激响应。\n现在考虑一个滤波器，其对应的函数变换为 𝒫，其单位冲激响应为 h，即 𝒫[δ] = h。滤波器的线性保证了下述的性质：\n$$\n\\begin{cases}\n\\mathcal{P}[f + g] = \\mathcal{P}[f] + \\mathcal{P}[g] \\\\\n\\mathcal{P}[\\lambda f] = \\lambda\\mathcal{P}[f]\n\\end{cases}\n$$\n接下来我们证明任何激励和单位冲激响应的卷积就是该激励下滤波器的响应。这个结论说明了单位冲激响应携带了一个线性系统所有的信息，即只需要知晓一个线性系统的单位冲激响应就可以计算任何激励下的系统响应。本证明完全不理会系统函数变换和极限、级数是否可交换，工科生不管这些：\n$$\n\\begin{aligned}\n\\mathcal{P}[x] &amp;= \\mathcal{P}[x * \\delta] =\n\\mathcal{P}\\left[\\int_{-\\infty}^{+\\infty} x(\\tau)\\delta(\\cdot - \\tau)\n\\d\\tau\\right] = \\mathcal{P}\\left[\\lim_{\\Delta \\to 0} \\sum_{k =\n-\\infty}^{+\\infty} x(k\\Delta)\\delta(\\cdot - k\\Delta) \\Delta\\right] \\\\\n&amp;= \\lim_{\\Delta \\to 0} \\sum_{k = -\\infty}^{+\\infty} x(k\\Delta)\n\\mathcal{P}[\\delta_{1, k\\Delta}]\\Delta = \\lim_{\\Delta \\to 0} \\sum_{k =\n-\\infty}^{+\\infty} x(k\\Delta) h(\\cdot - k\\Delta)\\Delta \\\\\n&amp;= \\int_{-\\infty}^{+\\infty} x(\\tau)h(\\cdot - \\tau) \\d\\tau = x * h\n\\end{aligned}\n$$\n这里第一行到第二行直接默认系统函数变换和极限可交换且无穷求和下系统线性依然可以保证。\n现在我们讨论上述说明的这些和信号复原（内插）是什么关系。我们已经说明了在符合取样定理的条件下，时域取样等价于频域周期延拓，所以我们要复原信号，只需要在频域上过滤出主峰即可。这个时候就需要使用到低通滤波器，我们假设使用的低通滤波器具有单位冲激响应\nh(t)。而这个滤波器的输入信号就是取样周期为\nT 的理想冲激串对原信号 x(t)\n取样得到的取样信号：\n$$\nx_p(t) = \\sum_{k = -\\infty}^{+\\infty} x(kT)\\delta(t - kT)\n$$\n我们考虑 xp(t)\n通过滤波器处理后的输出，根据上述结论，该输出就是 xp 与 h\n的卷积，这里证明依然默认级数和无穷积分可交换：\n$$\n\\begin{aligned}\n(x_p * h)(t) &amp;= \\int_{-\\infty}^{+\\infty} x_p(\\tau)h(t - \\tau) \\d\\tau\n= \\int_{-\\infty}^{+\\infty} \\left(\\sum_{k = -\\infty}^{+\\infty}\nx(kT)\\delta(\\tau - kT)\\right) h(t - \\tau) \\d\\tau \\\\\n&amp;= \\sum_{k = -\\infty}^{+\\infty} x(kT) \\int_{-\\infty}^{+\\infty} h(t -\n\\tau)\\delta(\\tau - kT) \\d\\tau = \\sum_{k = -\\infty}^{+\\infty} x(kT)h(t -\nkT)\n\\end{aligned}\n$$\n这个结果和我们介绍的使用内插函数 h 对 x 的取样序列进行内插法得到 x̃ 的公式一致。\n其实内插法和使用滤波器滤波本质上在叙说同样的概念，只不过内插法是从时域的角度观察，即这样操作之后时域上缺失的数值点就会被插入回来，从而复原信号。而滤波是从频域的角度观察，即这样的操作本质上是在频域上过滤出低频峰。内插和滤波其实就是信号复原这个操作两个角度下观察的结果。\n\n在此基础上我们继续介绍。为了复原初始连续信号，最理想的情况是使用理想低通滤波器，其频域表现为矩形窗，时域表现为\nSa 函数。其只需要在时域上将取样后的信号卷积上一个 Sa\n函数即可获取原先的连续信号。\n但是这里我们介绍两个不完全恢复的内插函数，即零阶保持内插和一阶保持内插（线性内插）。零阶保持内插的内插函数为：\n$$\nh(t) = \\begin{cases}\n1 &amp; 0 \\leq t \\leq T \\\\\n0 &amp; {\\rm otherwise}\n\\end{cases}\n$$\n这里 T\n是取样周期。可以发现，内插函数是时域上的矩形窗，将其代入 x̃\n的公式会发现其复原出的信号大致为：\n\n这里灰色线是原先的信号 x，红色线则是内插后得到的 x̃。这样的内插在每一个抽样周期内保持了抽样值本身，最终复原得到了类似阶跃的信号。\n而一阶保持内插则是使用线性的方式插值，其内插函数为三角窗：\n$$\nh(t) = \\begin{cases}\n\\dfrac{t}{T} + 1 &amp; -T \\leq t &lt; 0 \\\\\n-\\dfrac{t}{T} + 1 &amp; 0 \\leq t \\leq T \\\\\n0 &amp; {\\rm otherwise}\n\\end{cases}\n$$\n其内插复原的信号则为：\n\n可见其效果为直接使用线段连接各取样值以近似原信号。\n\n上述讨论完全基于采样满足采样定理，现在讨论采样频率过低导致频谱混叠的欠采样情况。此时即使采用理想低通滤波也无法获取原信号，但是我们可以说明，无论如何内插，采样点处的值保持。即无论采用何种内插函数\nh，得到的 x̃ 都保证 x̃(kT) = x(kT)(k∈ℤ)。\n事实上这个性质要求内插函数 h 满足这样的条件：\n$$\n\\begin{cases}\nh(0) = 1 \\\\\nh(kT) = 0, k \\in \\mathbb Z \\backslash \\{0\\}\n\\end{cases}\n$$\n事实上我们上面的叙述也只能为大家建立内插和滤波之间的一个直观感受，但是严格而言内插和滤波并非是一对完全严格对应的概念。内插法，或者说插值，天然要求插值后采样点处的函数值不改变，但是滤波并不严格保证这一点，比如说令滤波器的单位脉冲响应为\nh(t) ≡ 1，就不能保证采样点处函数值不变了。\n\n离散信号处理\n上述的讨论均是理论的，理论的模拟信号时域连续、时域无限长、数值取值范围无限、精度无限。但是实际使用计算机处理的时候，这三点均无法满足，即计算机能处理的信号时域离散、时域有限长、数值取值范围有限、精度有限。\n所以我们需要将上述的理论进行一定的修正才能应用到真实的信号处理场景中。\n从抽样序列还原原信号时域\n这一问题已经在采样部分叙述过，频带有限信号的采样频率足够高的时候，就可以根据抽样序列无损还原原信号。\n从抽样序列还原原信号频谱\n连续时域信号通过抽样可以得到离散时域信号。考虑具有高频截止频率 ωM\n的频带有限信号 f，其抽样信号\nfp\n定义为下式，这里 Ts\n是抽样周期：\n$$\nf_p(t) = \\sum_{n = -\\infty}^{+\\infty} f(nT_s)\\delta(t - nT_s)\n$$\n我们先前计算过抽样信号的 FT，这里 ωs\n是抽样频率，F 是 f 的频谱：\n$$\nF_p(\\omega) = \\frac{1}{T_s} \\sum_{m = -\\infty}^{+\\infty} F(\\omega -\nm\\omega_s)\n$$\n在不发生频谱混叠的时候，抽样信号的频谱的主峰严格和原信号的频谱仅相差常数系数。也就是说在满足抽样定理的时候：\n$$\nF_p(\\omega) = \\frac{1}{T_s} F(\\omega), \\omega \\in\n\\left[-\\frac{\\omega_s}{2}, \\frac{\\omega_s}{2}\\right]\n$$\n我们形式上根据 FT\n的计算公式可以推理得到下述关系，这里形式上将级数和无穷积分认为是可以交换的，所以严格而言是不严谨的推理：\n$$\n\\begin{aligned}\nF_p(\\omega) &amp;= \\int_{-\\infty}^{+\\infty} f_p(t)e^{-\\j\\omega t} \\d t =\n\\int_{-\\infty}^{+\\infty} \\left(\\sum_{n = -\\infty}^{+\\infty}\nf(nT_s)\\delta(t - nT_s)\\right)e^{-\\j\\omega t} \\d t \\\\\n&amp;= \\sum_{n = -\\infty}^{+\\infty} f(nT_s)\n\\left(\\int_{-\\infty}^{+\\infty} \\delta(t - nT_s)e^{-\\j\\omega t} \\d\nt\\right) = \\sum_{n = -\\infty}^{+\\infty} f(nT_s) e^{-\\j\\omega nT_s} \\d t\n\\end{aligned}\n$$\n那么：\n$$\nF(\\omega) = T_sF_p(\\omega) = T_s\\sum_{n = -\\infty}^{+\\infty} f(nT_s)\ne^{-\\j\\omega nT_s}, \\omega \\in \\left[-\\frac{\\omega_s}{2},\n\\frac{\\omega_s}{2}\\right]\n$$\n从而我们就有从抽样信号序列复原原信号频谱的方式，这种变换相当于从离散信号作傅立叶变换，称为离散时间傅立叶变换（Discrete\nTime Fourier Transformation / DTFT）。\n考虑其逆变换，即从原信号的频谱获取抽样信号。事实上 DTFT\n的式子可以认为是一个 FS，{f(nTs)}n ∈ ℤ\n可以认为是频域上的 FS 系数数列，原信号周期为 ωs，不过注意这里指数上是\n$-\\j\\omega nT_s$，是有负号的。那么根据\nFS 系数的公式：\n$$\nf(nT_s) = \\frac{1}{\\omega_s} \\int_{-\\omega_s / 2}^{\\omega_s / 2}\nF_p(\\omega)e^{\\j n\\omega T_s} \\d\\omega\n$$\n现在我们尝试进行归一化。由于 Ts\n实质上只是作为系数出现，所以可以将其归一化为 1。而原先的采样序列记作数列 {x(n)}n ∈ ℤ，这种归一化后的采样序列一般称为数字信号（Digital\nsignal）。在这样的表示之下考虑 DTFT 和 IDTFT，我们将 DTFT\n的结果记作 X(ω)，这也称为数字信号的频谱：\n$$\n\\begin{aligned}\n&amp; X(\\omega) = {\\rm DTFT}[x](\\omega) = \\sum_{n = -\\infty}^{+\\infty}\nx(n) e^{-\\j\\omega n} \\\\\n&amp; x(n) = \\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} X(\\omega)e^{\\j n\\omega}\n\\d\\omega\n\\end{aligned}\n$$\n根据上述推理，很容易知晓数字信号的频谱一定是周期的（根据 FT 和 IFT\n的对偶，实际上根据周期信号的频谱离散就不难理解），并且由于进行了归一化处理，所以这个周期一定是\n2π：\nX(ω+2π) = X(ω)\nDTFT 的运算法则和 FT 有很大类似之处。首先有 DTFT 是线性的：\n$$\n{\\rm DTFT}\\left[\\sum_{k = 1}^n \\lambda_kx_k\\right] = \\sum_{k = 1}^n\n\\lambda_k{\\rm DTFT}[x_k]\n$$\n时域和频域的平移均会导致另外一个域的相位平移：\n$$\n\\begin{aligned}\n&amp; {\\rm DTFT}_{n, \\omega}[x(n - n_0)] = X(\\omega)e^{-\\j\\omega n_0} \\\\\n&amp; {\\rm DTFT}_{n, \\omega}[x(t)e^{\\j\\omega_0 n}] = X(\\omega -\n\\omega_0)\n\\end{aligned}\n$$\n其和反褶、共轭的关系也和 FT 类似：\n$$\n\\begin{cases}\n{\\rm DTFT}[\\mathcal{R}x] = \\mathcal{R}[X] \\\\\n{\\rm DTFT}[x^*] = \\mathcal{R}^*[X] \\\\\n{\\rm DTFT}[\\mathcal{R}^*x] = X^* \\\\\n\\end{cases}\n$$\n压扩变换不能直接应用到数字信号上，所以我们给出时域扩展的定义：\n$$\n\\mathcal{E}_a[x](n) = \\begin{cases}\nx(k) &amp; n = ka, k \\in \\mathbb Z \\\\\n0 &amp; {\\rm otherwise}\n\\end{cases} \\ (a \\in \\mathbb{Z} \\backslash \\{0\\})\n$$\n和 FT 类似，时域扩展的 DTFT 满足：\n$$\n{\\rm DTFT}_{n, \\omega}[\\mathcal{E}_a[x](n)] = X(a\\omega)\n$$\nDTFT 我们只探讨频域微分，和 FT\n类似，频域微分等价于时域上的加权求和：\n$$\n{\\rm DTFT}_{n, \\omega}[nx(n)] = \\j X^{(1)}(\\omega)\n$$\n讨论卷积的时候，就不得不考虑到 DTFT\n得到的频谱是周期的，普通的卷积可能不收敛。所以这里定义圆卷积，直观上而言就是指考虑一个周期内的卷积。比如说周期为\nT 的两个周期信号 x, y 的圆卷积定义为：\n$$\n(x\\otimes y)(t) := \\int_T x(\\tau)y(t - \\tau) \\d\\tau\n$$\n那么：\n$$\n\\begin{aligned}\n&amp; {\\rm DTFT}[x_1 * x_2] = {\\rm DTFT}[x_1] \\cdot {\\rm DTFT}[x_2] \\\\\n&amp; {\\rm DTFT}[x_1 \\cdot x_2] = \\frac{1}{2\\pi} {\\rm DTFT}[x_1] \\otimes\n{\\rm DTFT}[x_2] \\\\\n\\end{aligned}\n$$\nParseval 定律依然类似成立：\n$$\n\\sum_{n = -\\infty}^{+\\infty} \\|x(n)\\|^2 = \\frac{1}{2\\pi}\n\\int_{-\\pi}^{\\pi} \\|X(\\omega)\\|^2 \\d\\omega\n$$\n从有限抽样序列还原信号频谱\n现在我们基本上解决了时域离散的问题，但是我们要考虑到计算机处理信号的时候时域不可能无限。\n我们考虑对数字信号加上一个窗函数：\n$$\nw(n) := \\begin{cases}\n1 &amp; 0 \\leq n \\leq L - 1 \\\\\n0 &amp; {\\rm otherwise}\n\\end{cases}\n$$\n那么 L\n长的有限长度数字信号就可以表示为：\nxL = x ⋅ w\n那么显然根据 DTFT 的性质得到 xL 的 DTFT\n为：\n$$\nX_L(\\omega) = \\frac{1}{2\\pi} ({\\rm DTFT}[x] \\otimes {\\rm\nDTFT}[w])(\\omega)\n$$\n显然：\n$$\n\\begin{aligned}\n{\\rm DTFT}[w](\\omega) &amp;= \\sum_{n = -\\infty}^{+\\infty}\nw(n)e^{-\\j\\omega n} = \\sum_{n = 0}^{L - 1} e^{-\\j\\omega n} \\\\\n&amp;= \\frac{1 - e^{-\\j L\\omega}}{1 - e^{-\\j\\omega}}\n\\end{aligned}\n$$\n这个窗函数的频谱在周期 [−π,π]\n内表现为低频有一个主峰，其余部分有若干指数衰减的副峰。主峰的宽度是绝对值最小两个零点的距离：\n$$\n\\Delta\\omega_L = \\frac{2\\pi}{L}\n$$\n窗宽的限制\n现在我们考虑下述数字信号：\n$$\nx(n) = A_1e^{\\j\\omega_1 n} + A_2e^{\\j\\omega_2 n} (0 &lt; \\omega_1,\n\\omega_2 &lt; \\pi)\n$$\n显然其 DTFT 为：\nX(ω) = 2π(A1δ(ω−ω1)+A2δ(ω−ω2))\n现在我们将其乘上窗函数得到有限长的数字信号：\nxL(n) = x(n)w(n)\n其 DTFT 为：\n$$\nX_L(\\omega) = \\frac{1}{2\\pi}(X \\otimes W)(\\omega) = A_1W(\\omega -\n\\omega_1) + A_2W(\\omega - \\omega_2)\n$$\n这里我们只考虑 W\n的主峰，显然使用窗函数截取之后，频谱上原先是两个冲激的位置变为了两个窗函数频谱主峰。为了保证这两个主峰可以区分，我们要求这两个主峰不重叠。显然这需要\n|ω1−ω2|\n足够大。根据已知的主峰宽度，我们有：\n$$\n|\\omega_1 - \\omega_2| &gt; \\frac{2\\pi}{L}\n$$\n也就是说如果数字信号的最小频率间隔为 Δω，那么为了保证截取后频谱上各个频率峰可分辨，必须要求窗函数宽度\nL 不小于 2π/Δω。\nDFT 的引入和矩阵形式\n现在我们回到求解有限长数字信号傅立叶变换的问题上。我们继续延续上述\nDTFT 的思路。不过我们现在只考虑在 ωk = 2kπ/N\n处频谱的取值，即频域 [0,2π]\n区间内的 N 个特征点：\n$$\n\\begin{aligned}\nX_L(\\omega_k) &amp;= \\frac{1}{2\\pi} ({\\rm DTFT}[x] \\otimes {\\rm\nDTFT}[w])(\\omega) \\\\\n&amp;= \\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} \\left(\\sum_{m =\n-\\infty}^{+\\infty} x(m)e^{-\\j\\left(\\frac{2k\\pi}{N} - \\mu\\right)\nm}\\right)\\left(\\sum_{n = 0}^{L - 1} e^{-\\j\\mu n}\\right) \\d\\mu \\\\\n&amp;= \\frac{1}{2\\pi} \\int_{-\\pi}^{\\pi} \\sum_{n = 0}^{L - 1}\\sum_{m =\n-\\infty}^{+\\infty} x(m)e^{-\\j\\frac{2km\\pi}{N}}e^{-\\j\\mu (n - m)} \\d\\mu\n\\\\\n&amp;= \\frac{1}{2\\pi} \\sum_{n = 0}^{L - 1}\\sum_{m = -\\infty}^{+\\infty}\nx(m)e^{-\\j\\frac{2km\\pi}{N}} \\int_{-\\pi}^{\\pi} e^{-\\j\\mu (n - m)} \\d\\mu\n\\\\\n&amp;= \\sum_{n = 0}^{L - 1} x(n)e^{-\\j\\frac{2kn\\pi}{N}}\n\\end{aligned}\n$$\n这里最后一个等号是利用指数函数在周期上的积分除非系数为零，否则积分结果均为零，所以最后只有\nm = n\n的项被保留。\n便于表示，我们把 XL(ωk)\n简记为 X(k)。\n从而我们就可以做到从有限长的数字信号还原出原信号频谱，这个变换就是离散傅立叶变换（Discrete\nFourier Transformation / DFT）。\n我们注意到这样的一点，就是这里有两个参数是可以独立确定的，即窗函数长度\nL 和频域特征点数 N。但实际应用中一般都有 L = N，这主要是因为这样计算方便且\nL ≠ N\n的情况均可以还原成 L = N 的情况。\n\n为了论证这一点，我们可以从另外一个角度推导 DFT\n公式。也就是回归傅里叶分析的本质，而傅里叶分析的本质就是将函数分解成若干个指数函数的线性组合。之前论述过的\nFT 用于分解时域无限的连续信号，而 DFT\n则会用于分析时域有限的离散信号。\n考虑信号 f，我们在区间\n[0,1] 上均匀取 N 个样，组成代表这个信号的向量：\n$$\n\\b{x} = \\lv\nf(0) &amp; f\\left(\\frac{1}{N}\\right) &amp; \\cdots &amp; f\\left(\\frac{N -\n1}{N}\\right)\n\\rv\n$$\n同样的，我们需要对作为基的函数 $e^{2\\pi\\j\nkt}$ 也在这些点取样，函数 $e^{2\\pi\\j\nkt}$ 取到的样为：\n$$\n\\b{e}_k = \\lv\n\\varepsilon_N^0 &amp; \\varepsilon_N^k &amp; \\cdots &amp;\n\\varepsilon_N^{(N - 1)k}\n\\rv\n$$\n这里 εN\n表示 N 次单位根。\n根据周期性，显然得到：\n$$\n\\b{e}_k = \\b{e}_{k + N}\n$$\n所以将 $\\b{x}$ 拆分为 $\\b{e}_k$\n的线性组合的时候只需要考虑一个周期内的 $\\b{e}_k$\n即可，也就是说我们假设存在这样的一系列系数 $\\b{X} = \\lv X(0) &amp; X(1) &amp; \\cdots &amp; X(N\n- 1)\\rv$ 满足（这里的系数 1/N 是为了简化后续的讨论）：\n$$\n\\b{x} = \\frac{1}{N}\\sum_{k = 0}^{N - 1} X(k)\\b{e}_k\n$$\n如果我们定义这样的一个矩阵：\n$$\nF_N = \\lv \\b{e}_0 &amp; \\b{e}_1 &amp; \\cdots &amp; \\b{e}_{N - 1}\\rv\n$$\n上述等式实际上就是 $N\\b{x} =\nF_N\\b{x}$。所以要求解系数向量，其实就等价于求解 FN\n的逆矩阵。\n考虑这样的数学关系（这里 ⋅H 表示 Hermit\n转置，即共轭转置）：\n$$\n\\b{e}_i^H\\b{e}_j = \\sum_{k = 0}^{N - 1}\n(\\varepsilon_N^{ik})^*\\varepsilon_N^{jk} = \\sum_{k = 0}^{N - 1}\n\\varepsilon_N^{(j - i)k} = \\begin{cases}\nN &amp; i = j \\\\\n\\dfrac{1 - \\varepsilon_N^{N(j - i)}}{1 - \\varepsilon_N^{j - i}} = 0\n&amp; i \\neq j\n\\end{cases}\n$$\n这说明 $\\dfrac{F_N}{\\sqrt{N}}$\n是酉矩阵。即有：\n$$\nF_N^{-1} = \\frac{1}{\\sqrt{N}}\\left(\\frac{F_N}{\\sqrt{N}}\\right)^{-1} =\n\\frac{1}{\\sqrt{N}}\\left(\\frac{F_N}{\\sqrt{N}}\\right)^H = \\frac{1}{N}\n(F_N^T)^* = \\frac{1}{N} F_N^*\n$$\n所以系数向量就可以表示为：\n$$\n\\b{X} = F_N^* \\b{x}\n$$\n对比会发现这个和我们之前推导出来的 DFT\n公式是一致的。也就是说我们得到了 L = N 时的 DFT\n向量表示。\n\n回到先前的问题，我们思考为何 L ≠ N 的情况都可以化归为\nL = N。\n如果 L &lt; N，也就是说窗宽（序列长度）不足，我们可以在序列\nx(n) 末尾补零至 N 位得到 xD(n)，以此计算\nDFT：\n$$\nX_D(k) = \\sum_{n = 0}^{N - 1} x_D(n)e^{-\\j\\frac{2\\pi nk}{N}} = \\sum_{n =\n0}^{L - 1} x_D(n)e^{-\\j\\frac{2\\pi nk}{N}} = \\sum_{n = 0}^{L - 1}\nx(n)e^{-\\j\\frac{2\\pi nk}{N}} = X(k)\n$$\n可见通过补零，补零序列的 DFT 就是原序列的 DFT。所以完全可以认为 L &lt; N 时应化归为 L = N。\n而在 L &gt; N\n的时候，我们需要使用回绕。即定义这样的新序列：\n$$\n\\tilde{x}(n) = \\sum_{k \\mathop{\\equiv} n \\mathop{\\rm mod} N} x(k)\n$$\n直观而言，就是将原先的过长序列拆为若干长度为 N\n的短序列后对齐相加。为了解释此时依然可以化归，我们使用先前得到矩阵形式的\nDFT 即可说明。首先我们取 FN，这里 N 即 DFT 点数，FN\n定义与之前相同。取新矩阵：\n$$\nF_{N\\times L} = \\lv F_N &amp; F_N &amp; \\cdots \\rv\n$$\n即使用 FN\n的列按顺序拼接出一个 N 行\nL 列的新矩阵，那么：\n$$\n{\\rm DFT}[x](k) = F_{N\\times L}\\b{x} = (F_N\\lv I_N &amp; I_N &amp;\n\\cdots \\rv)\\b{x} = F_N\\tilde{\\b{x}} = {\\rm DFT}[\\tilde{x}](k)\n$$\n所以回绕序列和原序列具有相同的 DFT。\n基于上述讨论，考虑到 L\n一般而言是原信号的长度，是一个不能修改的量。而 DFT 的点数 N\n则是计算过程中自由选取的参数，是可以随意更改的。为了方便，一般而言直接选定\nN = L\n以方便计算。\nDFT 的性质\n实际上我们可以发现 DFT 就是对 DTFT\n频域一个周期内的取样，即时域从无限变为有限的时候，频域就会变成原先频域一个周期内的取样。这一点对连续信号也是成立的，时域从无限（周期无限）变为有限（有限周期信号）的时候，频域也会变为原先频域一个周期内的取样（周期信号的频域是离散的）。\n现在考虑实序列的 DFT，实际上我们考虑 DTFT 即可。令实序列 x(n) 的 DTFT 为 X(ω)。根据 DTFT 定义：\n$$\nX(\\omega) = \\sum_{n = -\\infty}^{+\\infty} x(n)e^{-\\j\\omega n}\n$$\n显然：\nX(−ω) = X*(ω)\n另外一个相当重要的性质是：\nX(ω) = X*(2π−ω)\n这说明了在周期 [0,2π]\n上，实序列的 DTFT 和自身共轭对称。这个性质的证明也是简单的：\n$$\n\\begin{aligned}\nX(2\\pi - \\omega) = \\sum_{n = -\\infty}^{+\\infty} x(n)e^{-\\j(2\\pi -\n\\omega) n} = \\sum_{n = -\\infty}^{+\\infty} x(n)e^{\\j\\omega n} =\nX^*(\\omega)\n\\end{aligned}\n$$\n这个性质反映在 DFT 上就是，实序列的偶数点 DFT\n序列自身和自身共轭对称。即长度为 2N 的实序列 x 的 DFT 序列 X 满足：\nX(N+k) = X*(N−k)\n\nDFT 的其他性质和 FT 类似。比如 DFT 是线性的，和共轭及反褶的关系也和\nFT 一致，其余类似时域平移、频域平移等性质则自行推导。\nTODO\nFFT 算法\n直接计算 N 点 DFT\n的时间复杂度为 O(n2)，但是考虑到\nFN\n矩阵的优良性质，应该具有更快速的算法。有一种思路是使用分治，考虑下述数学事实，这里\nX 为 x 的 N 点 DFT 序列，x 长度为 N，不妨 N 是偶数：\n$$\n\\begin{aligned}\n{\\rm DFT}_{n, k}[x(n)](k) &amp;= \\sum_{n = 0}^{N - 1}\nx(n)e^{-\\j\\frac{2\\pi nk}{N}} \\\\\n&amp;= \\sum_{r = 0}^{N / 2 - 1} x(2r)e^{-\\j\\frac{2\\pi rk}{N / 2}} +\n\\sum_{r = 0}^{N / 2 - 1} x(2r + 1)e^{-\\j\\frac{2\\pi(r + 1 / 2)k}{N / 2}}\n\\\\\n&amp;= \\sum_{r = 0}^{N / 2 - 1} x(2r)e^{-\\j\\frac{2\\pi rk}{N / 2}} +\ne^{-\\j\\frac{2\\pi k}{N}}\\sum_{r = 0}^{N / 2 - 1} x(2r +\n1)e^{-\\j\\frac{2\\pi rk}{N / 2}} \\\\\n&amp;= {\\rm DFT}_{n, k}[x(2n)](k) + e^{-\\j\\frac{2\\pi k}{N}}{\\rm DFT}_{n,\nk}[x(2n + 1)](k)\n\\end{aligned}\n$$\n也就是说，将原序列按照奇偶拆为两个序列，分别作 DFT\n后再合并即得到原序列的 DFT。按此分治算法即可得到 O(nlogn) 的 FFT\n算法。\nLaplace 变换与 Z 变换\n首先给出两个感性认识，Laplace 变换是拓展的 Fourier 变换，Z\n变换是拓展的离散时间 Fourier 变换。\nFourier\n变换显然要求连续信号平方可积，但是对于平方积分发散的信号，其进行 FT\n后是不收敛的。最简单的让信号 f\n平方积分收敛的方式是乘以一个指数衰减 e−σt(σ∈ℝ)。感性理解就是，大部分信号总是可以用指数信号迫敛的。\n此时我们对迫敛后的信号进行 Fourier 变换：\n$$\n\\mathcal{F}_{t, \\omega}[f(t)e^{-\\sigma t}] = \\int_{-\\infty}^{+\\infty}\nf(t)e^{-\\sigma t}e^{-\\j\\omega t} \\d t = \\int_{-\\infty}^{+\\infty}\nf(t)e^{-(\\sigma + \\j\\omega) t} \\d t\n$$\n此时考虑到 σ 的不确定性和\nω 的任意性，我们取 $s := \\sigma + \\j\\omega \\in \\mathbb\nC$，定义新的变换：\n$$\n\\mathcal{L}[f](s) := \\int_{-\\infty}^{+\\infty} f(t)e^{-st} \\d t\n$$\n这就是 Laplace 变换，其为拓展后的 Fourier 变换。Laplace 变换中 s 可以取全复数集，而如果沿用 ω 是角频率的物理意义，Laplace\n变换本质上引入了复频率空间。而如果一个信号 Laplace\n变换后的复频率空间的虚轴上全收敛，就说明其 Fourier\n变换收敛，此时其频域就是负频率空间虚轴截面。\n\n而同样的，DTFT 要求序列之模求和收敛。如果不收敛，我们同样模仿 Laplace\n变换的引入，将序列乘以一个指数衰减 a−n(a&gt;0)，对此时的序列进行\nDTFT：\n$$\n{\\rm DTFT}_{n, \\omega}[x(n)a^{-n}] = \\sum_{n = -\\infty}^{+\\infty}\nx(n)a^{-n}e^{-\\j\\omega n} = \\sum_{n = -\\infty}^{+\\infty}\nx(n)(ae^{\\j\\omega})^{-n}\n$$\n同样发现 $z = ae^{\\j\\omega}$\n取遍全复平面，则不妨定义新变换：\n$$\n\\mathcal{Z}[x](z) := \\sum_{n = -\\infty}^{+\\infty} x(n)z^{-n}\n$$\n此时类似的，Z 变换将变换结果拓展到了整个复平面上。但是和 Laplace\n变换后原先 FT 的残余是虚轴不同，Z 变换下 DTFT 的残余是单位圆（即 a = 1）。也就是说，如果 Z\n变换下，单位圆上处处收敛，就说明原先信号 DTFT 收敛，此时信号的 DTFT\n后频域的一个周期就是单位圆截面。\n\n上述讲解的 ZT 是双边 ZT，事实上在应用的时候可能会使用单边\nZT。比如左边 ZT 的表达为：\n$$\n\\mathcal{Z}_L[x](z) := \\sum_{n = -\\infty}^{0} x(n)z^{-n}\n$$\n右边 ZT 的表达为：\n$$\n\\mathcal{Z}_R[x](z) := \\sum_{n = 0}^{+\\infty} x(n)z^{-n}\n$$\n一般而言，单边 ZT 中使用最多的是右边\nZT，所以在不引起混淆的时候，可以用单边 ZT 代表右边 ZT。\nZ 变换的收敛域\nZ 变换实际上是一个复平面上的幂级数，所以其具有收敛域（ROC）。\n思考两个单边 ZT 的 ROC，这里考虑两个特殊点，即复平面零点 0 与复平面无穷点 ∞。显然左边 ZT 中 z = 0 的时候幂级数收敛至 0，而右边 ZT 中 z = ∞ 的时候幂级数收敛至 0。所以左边 ZT 的 ROC 永远包含零点，而右边 ZT\n的 ROC 永远包含无穷远点。\n此外，考虑这样显然的结论（Abel 定理）。如果幂级数 $\\sum_{n = 0}^{+\\infty} x(n)z^n$ 在 z0\n处绝对收敛，那么该级数在 |z| &lt; z0\n处均收敛。如果在 z0\n处发散，那么该级数在 |z| &gt; z0\n处发散。那么左边 ZT 的 ROC 的表现为一个圆的内部，右边 ZT 的 ROC\n的表现为一个圆的外部。\n考虑双边 ZT，其显然可以认为是一个左边 ZT 和右边 ZT 的和，所以其 ROC\n只能为两个单边 ZT 的交。考虑到左边 ZT 的 ROC 为圆的内部，右边 ZT 的 ROC\n为圆的外部，所以双边 ZT 的 ROC 可以为空集，也可以为某一个圆环。\n\n我们需要指出的是，对于同一个 ZT 的结果，只有在指定 ROC\n之后才能唯一确定 IZT 的结果。也就是说，必须要指定 ZT 结果和相应的 ROC\n才能确定变换前的序列。\n考虑某一个 ZT 的结果，假设其极点构成有限集 {z1, z2, ⋯, zn}(|zi|≤|zi + 1|)。数学上可以证明，所有可能的\nROC 仅可以是 {z : |zi| ≤ |z| ≤ |zi + 1|}(0≤i≤n)，这里\nz0 = 0, zn + 1 = ∞。\nZ 变换的性质简介\n首先简单介绍一些特殊信号的 Z 变换。先考虑单位阶跃信号：\n$$\n\\delta(n) := \\begin{cases}\n1 &amp; n = 0 \\\\\n0 &amp; n \\neq 0\n\\end{cases}\n\\Rightarrow \\mathcal{Z}[\\delta] = 1, {\\rm ROC} = \\{z: 0 \\leq |z| \\leq\n+\\infty\\}\n$$\n随后是单位阶跃信号：\n$$\nu(n) := \\begin{cases}\n1 &amp; n \\geq 0 \\\\\n0 &amp; n &lt; 0\n\\end{cases}\n\\Rightarrow \\mathcal{Z}[u](z) = \\frac{1}{1 - z^{-1}}, {\\rm ROC} = \\{z:\n|z| &gt; 1\\}\n$$\n然后是矩形窗信号：\n$$\nG_N(n) := \\begin{cases}\n1 &amp; 0 \\leq n &lt; N \\\\\n0 &amp; {\\rm otherwise}\n\\end{cases}\n\\Rightarrow \\mathcal{Z}[G_N](z) = \\frac{1 - z^{-N}}{1 - z^{-1}}, {\\rm\nROC} = \\{z: 0 &lt; |z| \\leq +\\infty\\}\n$$\n然后是指数序列的右侧：\n$$\n\\mathcal{Z}_{n, z}[a^nu(n)](z) = \\frac{1}{1 - az^{-1}}, {\\rm ROC} = \\{z:\n|z| &gt; |a|\\}\n$$\n最后是指数序列的左侧：\n$$\n\\mathcal{Z}_{n, z}[-a^nu(-n - 1)](z) = \\begin{cases}\n\\dfrac{1}{1 - az^{-1}} &amp; 0 &lt; |z| &lt; |a| \\\\\n0 &amp; z = 0\n\\end{cases}, {\\rm ROC} = \\{z: |z| &lt; |a|\\}\n$$\n\n接下来的讨论默认 X := 𝒵[x]。\nZT 显然是线性的。其时域平移对复频域影响为：\n𝒵n, z[x(n+m)] = zmX(z)\n数字滤波器\n滤波器我们已经讲解过很多次，但是在理解了离散信号处理的基础上，我们需要说明一下数字滤波器和模拟滤波器的差别。不过我们首先建立这样的认同，即滤波器可以使用其单位冲激响应唯一代表。\n我们在采样部分一直采用的是模拟滤波器的概念，其工作在连续的时域上，具有连续的单位冲激响应，其接受的激励也是连续的模拟信号。从频域上观察其单位冲激响应，显然其单位冲激响应的频域并非周期（这个和非周期信号的频域连续类似，根据时域频域的对偶，时域上连续的单位冲激响应在频域上就不周期）。比如说理想（模拟）低通滤波器在频域上就是一个低频区域的矩形窗，其余部分频域均为零。\n接下来我们需要引入新的概念，即数字滤波器。在具体讲解之前，我们先根据我们对模拟滤波器的了解给出一些感性理解。\n\n数字滤波器是工作在离散时域上的，接受离散激励，具有离散的单位冲激响应\n频域上，其单位冲激响应是周期的，且周期是该滤波器单位冲激响应的采样频率\n\n数字滤波器的差分方程\n约定这样的记号，x(n)\n表示数字滤波器接收到的激励，y(n)\n表示数字滤波器作出的响应。\n首先我们说明，我们要求滤波器是线性时不变因果系统。线性系统定义先前已经阐述，时不变的含义是无论何时系统接收到相同的激励，其永远给出相同的响应。因果系统则要求系统响应仅依赖于现在及先前的激励，而不依赖于未来未知的激励。所有实际系统都是因果系统。\n有时我们要求系统稳定性，即对于任何有界激励都给出有界响应。\n基于此，我们考虑数字滤波器。根据其线性时不变及因果性，我们给出数字滤波器需要满足的一般规律，这一般称为滤波器的差分方程：\n$$\n\\sum_{k = 0}^N b_ky(n - k) = \\sum_{r = 0}^M a_rx(n - r)\n$$\n这里 N\n表示滤波器需要的过去输出的个数，一般也称为滤波器的阶数。\n我们考虑该滤波器的单位冲激响应。如果 N = 1，我们可以注意到在足够大的\nn 下，x(n−r) = δ(n−r)\n总是会全部变为零，此时响应为零。也就是说在有限长时间内，滤波器响应总会衰变为零，此时的滤波器称为有限脉冲响应滤波器，简称\nFIR 滤波器。\n对应的，如果 N &gt; 1，由于每一个响应都依赖于先前的非零响应，其响应始终不消失，该滤波器则为无限脉冲响应滤波器，简称\nIIR 滤波器。\n数字滤波器的流图\n流图是系统的一种表示方式，没有很深刻的理论需要讲解，这里不赘述。该课程基本仅要求掌握根据差分方程绘制滤波器的\nI 型直接实现和 II 型直接实现，根据 PPT 即可很快掌握。\n数字滤波器的频率响应\n假设数字滤波器具有单位冲激响应 h(n)，我们先前证明过：\n$$\ny(n) = (x * h)(n) = \\sum_{k = -\\infty}^{+\\infty} h(k)x(n - k)\n$$\n考虑对两边同时 DTFT，如果将 x, y, h 的 DTFT\n分别记作 X, Y, H，则显然有\nY = XH。定义：\n$$\nH(\\omega) = \\frac{Y(\\omega)}{X(\\omega)}\n$$\n为数字滤波器的频率响应，频率响应是单位冲激响应的\nDTFT。根据 DTFT\n可逆，我们实际上也可以说明频率响应唯一代表了一个数字滤波器。然而差分方程的系数理论上也唯一代表了一个数字滤波器。实际上，我们可以使用差分方程系数推导频率响应，即这两者实际等价。\n对差分方程两边 DTFT：\n$$\n\\begin{aligned}\n&amp; \\sum_{k = 0}^N b_ky(n - k) = \\sum_{r = 0}^M a_rx(n - r) \\\\\n\\iff&amp; {\\rm DTFT}_{n, \\omega}\\left[\\sum_{k = 0}^N b_ky(n - k)\\right]\n= {\\rm DTFT}_{n, \\omega}\\left[\\sum_{r = 0}^M a_rx(n - r)\\right] \\\\\n\\iff&amp; \\sum_{k = 0}^N b_k{\\rm DTFT}_{n, \\omega}[y(n - k)] = \\sum_{r =\n0}^M a_r{\\rm DTFT}_{n, \\omega}[x(n - r)] \\\\\n\\iff&amp; Y(\\omega)\\sum_{k = 0}^N b_ke^{-\\j k\\omega} = X(\\omega)\\sum_{r\n= 0}^M a_re^{-\\j r\\omega} \\\\\n\\iff&amp; H(\\omega) = \\frac{Y(\\omega)}{X(\\omega)} = \\frac{\\sum_{r = 0}^M\na_re^{-\\j r\\omega}}{\\sum_{k = 0}^N b_ke^{-\\j k\\omega}}\n\\end{aligned}\n$$\n频率响应可以用来断定滤波器的通阻性质。比如说具有下述差分方程的数字滤波器：\ny(n) = ay(n−1) + x(n)\n计算其频率响应：\n$$\nH(\\omega) = \\frac{\\sum_{r = 0}^M a_re^{-\\j r\\omega}}{\\sum_{k = 0}^N\nb_ke^{-\\j k\\omega}} = \\frac{e^{\\j\\omega}}{e^{\\j\\omega} - a} = \\frac{1}{1\n- a\\cos\\omega + \\j a\\sin\\omega}\n$$\n那么：\n$$\n|H(\\omega)| = \\frac{1}{\\sqrt{1 + a^2 - 2a\\cos\\omega}}\n$$\n其在区间 [−π,π]\n上的图像为：\n\n其对低频段给出高响应，所以该数字滤波器为低通滤波器。\n显然可以看出频率响应作为单位冲激响应的 DTFT，其是以 2π\n为周期的函数。所以我们只需要关注一个周期内的函数表现即可，一般选用 [−π,π]。\n\n数字滤波器的传递函数与零极点图\n我们现在研究系统的稳定性，我们给出下述定理。线性时不变系统稳定的充分必要条件为其单位冲激响应\nh(n) 满足：\n$$\n\\sum_{k = -\\infty}^{+\\infty} |h(k)| &lt; +\\infty\n$$\n如果单位冲激响应的模之和收敛，假设其收敛为 A &lt;  + ∞，考虑一个有界输入 x(n)，其满足 |x(n)| &lt; B &lt;  + ∞。那么系统的响应为：\n$$\n|y(n)| = \\left|\\sum_{k = -\\infty}^{+\\infty} h(k)x(n - k)\\right| \\leq\n\\sum_{k = -\\infty}^{+\\infty} |h(k)|\\cdot|x(n - k)| &lt; B\\sum_{k =\n-\\infty}^{+\\infty} h(k) = AB\n$$\n得到了系统稳定的结论。\n如果单位冲激响应的模之和发散，考虑这样的激励：\n$$\nx(n) = {\\rm sgn}(h(-n))\n$$\n那么：\n$$\n|y(0)| = \\left|\\sum_{k = -\\infty}^{+\\infty} h(k)x(-k)\\right| =\n\\left|\\sum_{k = -\\infty}^{+\\infty} h(k){\\rm sgn}(h(k))\\right| =\n\\left|\\sum_{k = -\\infty}^{+\\infty} |h(k)|\\right| = +\\infty\n$$\n得到了系统不稳定的结论。\n\n这样思考，如果系统的单位冲激响应之模的和不收敛，就意味着我们不能对其进行\nDTFT。而我们先前已经介绍过作为 DTFT 拓展的 Z 变换，不妨对用 ZT 代替\nDTFT，我们对差分方程两边取 ZT。如果假设 x, y, h 的 ZT\n分别为 X, Y, H，仿照之前推导频率响应的方法，不难说明：\n$$\nH(z) = \\frac{Y(z)}{X(z)} = \\frac{\\sum_{r = 0}^M a_rz^{-r}}{\\sum_{k =\n0}^N b_kz^{-k}}\n$$\n此时的 H\n称为传递函数，其为单位冲激响应的\nZT。如果滤波器的传递函数的 ROC\n包含了单位圆，意味着其单位冲激响应可以进行\nDTFT，也意味着单位冲激响应模之和收敛，这就意味着系统稳定。\n从这个角度观察，一个数字滤波器的稳定性等价于其传递函数的 ROC\n包含单位圆。\n现在我们考虑因果性。显然一个因果数字滤波器的单位冲激响应必然在负数上取零，所以其\nZT 最终退化为右边 ZT，这意味着其 ROC\n必然是一个圆的外部。换言之，非因果数字滤波器的单位冲激响应会在负数上取非零，非退化的双边\nZT 的 ROC 不包含无穷远点。从这个角度观察，数字滤波器的因果性等价于 ROC\n为某一圆的外部，包含无穷远点。\n\n现在考虑 H(z)\n的形式，显然其是一个有理分式，其分子为 z−1 的 M 次多项式，分母则是 N 次。那么根据代数基本定理，H(z) 具有 M 个零点和 N 个极点。另外，0, ∞\n也可能是零点或者极点。将这些零点和极点绘制在复平面上，则得到了传递函数的零极点图。\n由传递函数推算单位冲激响应\n通过传递函数可以推算数字滤波器的差分方程，之后我们可以通过令输入为单位冲激信号的方式求解单位冲激响应。但实际上，我们考虑到传递函数是单位冲激响应的\nZT，而我们已经知道，在给定 ZT 结果和 ROC 之后可以唯一确定 IZT 的结果，而\nROC 可以通过极点来确定。\n数模转换\n之前讲解的采样与信号复原实际上就已经简单引入了数模转换这个话题。但是当时我们并没有讲解如何处理数字信号（时域离散信号），所以完全采用了模拟信号的视角。现在我们希望能够在理解了数字信号处理的基础上对数模转换进行更深刻的理解。\n这里需要提一下，模拟滤波器一般而言成本高，截止频率低的模拟低通滤波器成本则相当高。这一因素决定了实际信号处理往往会使用高质量的数字信号处理来弥补低成本的模拟抗混叠滤波器。\n抗混叠滤波器\n我们先前提到过，如果取样频率达不到信号的高频截止频率的两倍则会发生频谱混叠导致无法通过理想低通滤波还原信号。然而现实中的信号的高频截止频率可以很高也可以很低，无法通过统一的采样频率进行采样。面对这种情况，有一种解决方式是引入抗混叠滤波器，其作用是滤去信号中过高频率的部分，这样就可以保证后续取样一定不会发生混叠。\n抗混叠滤波器是低通滤波器，但是不一定是理想的矩形窗低通滤波器，其频谱表现一般为从低频到高频逐步下降，而非理想矩形窗滤波器的突变。这样做的原因是尽可能保留原信号的所有信息：\n\n上述图中灰色实线是某信号的频谱，红色虚线是抗混叠滤波器的频谱。\n抗混叠滤波器需要和后续的采样器配合使用以保证频谱不混叠。如果后续使用的采样频率过低，则要求抗混叠滤波器的频谱在较低的频段就需要降低到零，这对滤波器设计提出了较高要求，实现成本高。所以即使有抗混叠滤波器，采样频率也不能很低。\n过采样与二次采样\n过采样与二次采样就是一种使用高质量数字信号处理弥补低成本模拟抗混叠滤波器的方法。我们考虑这样的实际场景，即需要对某模拟信号以\n2ω\n频率进行采样，该信号的重要信息分布于频谱的 [0, ω) 频段。\n按照先抗混叠再直接 2ω\n采样的思路，模拟抗混叠滤波器的截止频率必须至多为 ω，否则会发生频谱混叠，但是这会导致成本过高。\n有一种这样的思路，也就是使用很高的采样频率，降低对模拟抗混叠滤波器的截止频率要求，最后再二次取样，将实际的采样频率降回需求值。\n比如说我们可以实际使用 8ω\n的采样频率，此时模拟抗混叠滤波器的最高截止频率就放松到了 4ω。经过模拟抗混叠滤波器和 8ω 采样后，信号的频谱的 [ω+8kω,7ω+8kω](k∈ℤ)\n频段实际上混杂着不需要的高频信息，需要过滤。但是注意，此时信号已经是数字信号，所以可以使用数字滤波器处理。\n此时使用截止频率为 ω\n的数字滤波器过滤出原信号在低频段的重要信息，再使用 2ω\n频率取样。这样，我们就既做到了抗混叠，也做到了过滤不必要的高频信息。\n这里使用远高于二倍高频截止频率的采样频率进行采样的方式称为过采样，而二次滤波之后进行的第二次采样就是二次采样。这样的方法可以放松对模拟滤波器的要求以降低成本。\n","categories":["【学习笔记】计算机"]},{"title":"云游戏相关知识杂谈笔记","url":"/2023/09/20/note-of-media/","content":"在正式加入云游戏相关项目之前，学长还是扔了一些学习材料过来让我补一下基础，这里就正常开一个笔记来记录一下学习过程了。大概先从显示器的一些工作原理和\nWebRTC 相关知识开始吧。\n\n垂直同步与 G-sync\nhttps://www.youtube.com/watch?v=dnsPyyaNCWc&amp;list=PL7mmImi_1wpMVhVpBWr3Bob7kdchdDEoX&amp;index=23\n主要分析了游戏之中画面撕裂的问题成因和相关的解决方案，这里也就主要关注显卡和显示器的配合问题。\n首先需要明确的是，在游戏过程中，每一帧都是显卡负责绘制的，而显卡每秒绘制出的帧的数目就是帧率，简称\nFPS。而显示器在接收到显卡所提供的帧的时候，需要在屏幕上绘制帧。当前所有的显示器采用的绘制方法都是逐行扫描，即光标从屏幕左上角开始向右向下逐个扫过像素点绘制帧，在扫描到右下角的时候，一帧绘制完成。绘制完一帧之后，显示器将光标从右下角重置到左上角的过程称为\nVBlank。此外，显示器一秒内能够在屏幕上逐行扫描出的帧的数量称为刷新率。\n这里有两个比较重要的概念，就是帧率和刷新率。需要注意的是，帧率描述显卡绘制帧的性能，刷新率描述显示器扫描帧的性能。\n在真实的游戏场景中，由于游戏场景的复杂性不同，显卡所承受的渲染负载不同，显卡的帧率常常会波动。然而相对应地，显示器的刷新率一般是不波动的。这意味着，我们需要某种机制平衡波动的帧率和固定的刷新率。一般而言，常见的系统会采用帧缓冲机制来完成这一任务。\n帧缓冲机制中一般会设置一个前缓冲区和一个后缓冲区，显示器仅仅会读取前缓冲区之中存放的帧，显卡只会修改后缓冲区中的帧。在这个机制之下，将后缓冲区中的帧传递到前缓冲区的操作称为帧传递。显然，何时进行帧传递就构成了这个系统的核心机制。\n如果刷新率和帧率一致，那么我们只需要在显卡绘制完毕之后进行帧传递即可，此时显示器也应当恰好刷新完毕进入\nVBlank，恰好准备绘制新帧。然而如果秉持着显卡绘制完毕即帧传递的策略，在帧率比刷新率更高的时候，后缓冲区中已经形成新的帧的时候显示器还没有进入\nVBlank，此时将新帧传递入前缓冲区，显示器上则会出现上半为旧帧而下半为新帧的情况，即所谓的画面撕裂。另外，帧率低于刷新率的时候，显示器已经进入\nVBlank\n的时候后缓冲区依然没有触发帧传递，所以显示器只能重新绘制先前帧，此时新帧由显卡绘制完毕，帧传递后会出现显示器上上半为旧帧而下半为新帧的情况，同样也是画面撕裂。\n总之，在这一策略之下，只要刷新率不等于帧率就会出现画面撕裂问题：\n\n这里显示的是显示器角度的时间轴，A 到 F\n各个色块则显示各个帧在前缓冲区中存续的时间。可以看到，无论是帧率高于刷新率还是低于刷新率，显示器所显示的画面都会有撕裂现象。\n垂直同步\n所谓的垂直同步策略，是在帧率高于刷新率的时候，强制令显卡空转等待\nVBlank 到来后才触发帧交换。简而言之，就是强制令显卡等待显示器：\n\n这里 G 区域就是强制令显卡等待的时间块。\n而在帧率低于刷新率的时候，则强制令显示器再显示一次旧帧，若显示完显卡依然没有绘制完毕则一直显示，直到某一次显示的时候显卡绘制完了。此时显卡空转等待\nVBlank\n触发帧交换。简而言之，就是等效降低显示器刷新率，将问题化归为帧率高于刷新率的问题，再强制令显卡等待显示器：\n\n这里 G 区域就是强制令显卡等待的时间块。\n然而垂直同步的弊端也是显而易见的，即实际帧率一定会被锁定在显示器刷新率以下，事实上是一种卡死显卡性能换画面完整的交易。\n在这个基础上，Nvidia\n推出了自适应垂直同步方案，事实上就是在垂直同步系统之前加一个是否开启垂直同步的判断器。当显卡帧率高于刷新率的时候，该系统打开垂直同步令显卡空转等待显示器，而显卡帧率低于刷新率的时候，则关闭垂直同步，立即触发帧传递而不让显示器重复绘制先前帧。\n但是无论如何改进，依然无法改变垂直同步具有延迟的缺陷，即 MTP latency\n过高。简而言之，当场景变化较大的时候，即使显卡已经快速绘制出来还是有可能因为垂直同步被迫稍晚传递给显示器，导致用户操作和屏幕反应之间存在较大延迟。这对实时性高的游戏（如\nFPS、Moba）是致命的。\n三重缓冲\n为了解决垂直同步的延迟问题，有一种方式是将一般的前缓冲区和后缓冲区设计中加入新的中缓冲区构成三重缓冲。简单而言就是再设置一个缓冲区来存放显卡提前绘制好的帧，可以一定程度缓解显卡帧率突涨的问题。然而这是治标不治本的，也就是说当显卡性能保持在高位过长时间后，后缓冲区和中缓冲区都已经满了，此时显卡依然不得不空转等待显示器。\nNvidia\n为了解决三重缓冲这种治标不治本的问题，提出了快速垂直同步（无阻塞垂直同步）方案，即允许中缓冲区和后缓冲区交换，当中后缓冲区全满的时候再次交换中后缓冲区，显卡用新的帧覆盖掉本应该交给显示器绘制的帧。此时中缓冲区始终有一个可以交给前缓冲区，即显示器绘制的帧，而显卡也始终没有等待显示器。\n无阻塞垂直同步虽然做到了显示器和显卡都处于满负荷状态，但是两者之间不同步的差距则代偿给了帧丢失，也就是先前说的，如果中后缓冲区都满了，就会用新帧覆盖掉原本交给显示器的帧，从而导致实际的丢帧。\nG-sync 与 Freesync\n实际上上述所有方案都有治标不治本的问题。为了从根源上解决画面撕裂又不产生过分的延迟，Nvidia\n直接从显示器一侧尝试解决问题，即 G-sync\n方案（该方案核心为自适应显示器刷新率，即\nVRR，所以有时也称为 VRR 方案）。该方案的核心是令显示器可以调节 VBlank\n时长，从而在显卡帧率较低的时候通过长 VBlank 时间来让“显示器等显卡”。\n也就是说，垂直同步核心是显卡空转等显示器，而 G-sync\n则是显示器空转等显卡。\n然而在实际情况下，即使通过 VRR\n也不可能让刷新率超越额定刷新率，所以当显卡帧率高于刷新率的时候依然会出现画面撕裂（也就是所说的\nVRR 只能解决显卡帧率低于刷新率的情况）。所以厂家会推荐打开 G-sync\n的时候同时打开垂直同步。\n另外一个角度，过长时间的 VBlank\n有时也不现实，因为显示器主板也有最低刷新率要求。这意味着如果帧率显著低于刷新率，打开\nG-sync\n甚至可能因刷新率锚定帧率导致更严重的后果。这个时候只能打开低帧补偿（Low\nFrame Compensation /\nLFC），即通过多次扫描显示一帧，等效倍增显示器刷新率。然而 LFC\n需要预测显卡的性能，因为毕竟需要提前决定到底下一帧需要几次扫描，一旦预测失误，依然会遇到问题。\n所以 VRR\n技术即使可以做到在一定范围内让刷新率锚定帧率，但是这依然需要帧率相对稳定。这时候就有个有趣的矛盾，既然能做到帧率相对稳定，那么即使画面撕裂也都会出现在屏幕上下方贴近边框的地方，那我为什么不能直接接受垂直同步之类的方案呢？\n所以现今的解决方案中就是不能在低延迟、无撕裂上面做到兼顾，G-sync\n也只是众多权衡中的一种。\n最后，说明一下 Freesync。事实上 G-sync 是 Nvidia\n授权部分显示器型号内置 Nvidia 芯片来达成的技术，是一种需要 Nvidia\n官方认证才能采用的技术。而 Freesync\n是开源的技术标准，所有显示器均可以使用，目前由 AMD\n主要采用。而两者的技术框架几乎一致，仅仅在细节上有一定差别。\nWebRTC Kalman\nfilter render time estimation\n参考文章：https://www.jianshu.com/p/0bc6a4998b32\n由于这篇文章已经是 2020 年的文章了，感觉 WebRTC\n源码也已经做了很大的更新，所以还是以 2023.09\n的最新源码为准，文章终究是参考。\n形成帧的过程中播放延迟的传递\n这篇文章主要介绍的是 WebRTC playout delay 的计算原理。WebRTC 源码之中\nplayout delay 表示为两个 double\n浮点数构成的元组，分别表示最小播放延迟和最大播放延迟。一般而言，playout\ndelay 会携带在 RTC 扩展头之中，如果没有携带，则使用默认初始化。\n源码上的体现是：\nC++// video_timing.hclass RTC_EXPORT VideoPlayoutDelay &#123;public:    // Maximum supported value for the delay limit.    static constexpr TimeDelta kMax = TimeDelta::Millis(10) * 0xFFF;    // ...private:    TimeDelta min_ = TimeDelta::Zero();    TimeDelta max_ = kMax;&#125;;// rtp_video_header.hstruct RTPVideoHeader &#123;private:    absl::optional&lt;VideoPlayoutDelay&gt; playout_delay;    // ...&#125;;// encoded_image.hclass RTC_EXPORT EncodedImage &#123;private:    absl::optional&lt;VideoPlayoutDelay&gt; playout_delay_;    // ...&#125;;RtpFrameObject::RtpFrameObject(/* ... */)    : first_seq_num_(first_seq_num),      last_seq_num_(last_seq_num),      last_packet_receive_time_(last_packet_receive_time),      times_nacked_(times_nacked) &#123;    // ...    SetPlayoutDelay(rtp_video_header_.playout_delay);    // ...&#125;\n这里主要观察最后一个构造函数的逻辑，在 PacketBuffer\n模块将数据包排列组合出一帧的最后会创建一个 RtpFrameObject\n实例来管理这一帧，此时会使用 SetPlayoutDelay\n函数设定播放延迟。同时可以注意到，RTPVideoHeader\n结构体中如果没有设定播放延迟，则默认为\n&#123;0, +Infinity&#125;，也就是说创建帧对象的时候如果没有设定播放延迟则默认设定为\n&#123;0, +Infinity&#125;。\n在帧构建完成之后会调用\nVideoReceiveStream2::OnCompleteFrame\n函数将新帧插入帧队列：\nC++void VideoReceiveStream2::OnCompleteFrame(    std::unique_ptr&lt;video_encoding::EncodedFrame&gt; frame,) &#123;    // ...    if (absl::optional&lt;VideoPlayoutDelay&gt; playout_delay =        frame-&gt;EncodedImage().PlayoutDelay()) &#123;        frame_minimum_playout_delay_ = playout_delay-&gt;min();        frame_maximum_playout_delay_ = playout_delay-&gt;max();        UpdatePlayoutDelays();    &#125;    // ...&#125;\n这里涉及到了 absl::optional\n的隐式类型转换，观察一下库函数就有：\nC++// optional::operator bool()//// Returns false if and only if the `optional` is empty.////   if (opt) &#123;//      // do something with *opt or opt-&gt;;//   &#125; else &#123;//      // opt is empty.//   &#125;//constexpr explicit operator bool() const noexcept &#123; return this-&gt;engaged_; &#125;\n也就是说只有这个 absl::optional\n容器内部没有存放任何值的时候才会返回\nfalse，这也就对应着播放延迟没有在 RTC 扩展头之中携带。\n这里可以注意当 playout_delay_\n是非默认值的时候会做两件事：\n\n更新 VideoReceiveStream2 之中的\nframe_minimum_playout_delay_ms_ 等成员变量\n调用 UpdatePlayoutDelays 函数更新\nVCMTiming 类中的数据\n\n具体的源码为：\nC++void VideoReceiveStream2::UpdatePlayoutDelays() const &#123;    RTC_DCHECK_RUN_ON(&amp;worker_sequence_checker_);    const std::initializer_list&lt;absl::optional&lt;TimeDelta&gt;&gt; min_delays = &#123;        frame_minimum_playout_delay_,        base_minimum_playout_delay_,        syncable_minimum_playout_delay_&#125;;    // Since nullopt &lt; anything, this will return the largest of the minumum    // delays, or nullopt if all are nullopt.    absl::optional&lt;TimeDelta&gt; minimum_delay = std::max(min_delays);    if (minimum_delay) &#123;        auto num_playout_delays_set =            absl::c_count_if(min_delays, [](auto opt) &#123; return opt.has_value(); &#125;);        if (num_playout_delays_set &gt; 1 &amp;&amp;            timing_-&gt;min_playout_delay() != minimum_delay) &#123;            RTC_LOG(LS_WARNING)                &lt;&lt; &quot;Multiple playout delays set. Actual delay value set to &quot;                &lt;&lt; *minimum_delay &lt;&lt; &quot; frame min delay=&quot;                &lt;&lt; OptionalDelayToLogString(frame_minimum_playout_delay_)                &lt;&lt; &quot; base min delay=&quot;                &lt;&lt; OptionalDelayToLogString(base_minimum_playout_delay_)                &lt;&lt; &quot; sync min delay=&quot;                &lt;&lt; OptionalDelayToLogString(syncable_minimum_playout_delay_);        &#125;        timing_-&gt;set_min_playout_delay(*minimum_delay);        if (frame_minimum_playout_delay_ == TimeDelta::Zero() &amp;&amp;            frame_maximum_playout_delay_ &gt; TimeDelta::Zero()) &#123;            // TODO(kron): Estimate frame rate from video stream.            constexpr Frequency kFrameRate = Frequency::Hertz(60);            // Convert playout delay in ms to number of frames.            int max_composition_delay_in_frames =                std::lrint(*frame_maximum_playout_delay_ * kFrameRate);            // Subtract frames in buffer.            max_composition_delay_in_frames =                std::max(max_composition_delay_in_frames - buffer_-&gt;Size(), 0);            timing_-&gt;SetMaxCompositionDelayInFrames(max_composition_delay_in_frames);        &#125;    &#125;    if (frame_maximum_playout_delay_) &#123;        timing_-&gt;set_max_playout_delay(*frame_maximum_playout_delay_);    &#125;&#125;\n这一段看起来有一个前提，就是 min_delays\n列表之中最多有一个有效值，而这个有效值将会被处理为真实的播放延迟。可以看到，在第\n25 行，这里调用了 timimg_-&gt;set_min_playout_delay\n函数，而这个函数的作用就是将播放延迟设定到 VCMTiming\n类之中。这里 timing_ 的类型为\nstd::unique_ptr&lt;VCMTiming&gt;。\n再具体展开：\nC++void VCMTiming::set_min_playout_delay(TimeDelta min_playout_delay) &#123;    MutexLock lock(&amp;mutex_);    if (min_playout_delay_ != min_playout_delay) &#123;        CheckDelaysValid(min_playout_delay, max_playout_delay_);        min_playout_delay_ = min_playout_delay;    &#125;&#125;void VCMTiming::set_max_playout_delay(TimeDelta max_playout_delay) &#123;    MutexLock lock(&amp;mutex_);    if (max_playout_delay_ != max_playout_delay) &#123;        CheckDelaysValid(min_playout_delay_, max_playout_delay);        max_playout_delay_ = max_playout_delay;    &#125;&#125;\n至少这里看起来是相当普通的一个 setter\n代码。按这里的代码的话，VCMTiming\n的作用在于维护帧级别的播放延迟，并作为最终存放点用于后续的延迟估计工作。\n帧插入过程中延迟的估计\n在形成新的一帧之后，需要通过帧插入操作将新的帧加入到帧缓冲区之中供后续解码。承接上述说明，在\nVideoReceiveStream2::OnCompleteFrame 函数之后，会通过\nVideoStreamBufferController::InsertFrame\n函数将新帧压入缓冲区，而这个函数则进一步调用了\nFrameBuffer::InsertFrame 函数：\nC++absl::optional&lt;int64_t&gt; VideoStreamBufferController::InsertFrame(std::unique_ptr&lt;EncodedFrame&gt; frame) &#123;    RTC_DCHECK_RUN_ON(&amp;worker_sequence_checker_);    FrameMetadata metadata(*frame);    int complete_units = buffer_-&gt;GetTotalNumberOfContinuousTemporalUnits();    if (buffer_-&gt;InsertFrame(std::move(frame))) &#123;        RTC_DCHECK(metadata.receive_time) &lt;&lt; &quot;Frame receive time must be set!&quot;;        if (!metadata.delayed_by_retransmission &amp;&amp; metadata.receive_time &amp;&amp;            (field_trials_.IsDisabled(&quot;WebRTC-IncomingTimestampOnMarkerBitOnly&quot;) ||            metadata.is_last_spatial_layer)) &#123;            timing_-&gt;IncomingTimestamp(metadata.rtp_timestamp, *metadata.receive_time);        &#125;        if (complete_units &lt; buffer_-&gt;GetTotalNumberOfContinuousTemporalUnits()) &#123;            stats_proxy_-&gt;OnCompleteFrame(metadata.is_keyframe, metadata.size, metadata.contentType);            MaybeScheduleFrameForRelease();        &#125;    &#125;    return buffer_-&gt;LastContinuousFrameId();&#125;\n这里 FrameBuffer::InsertFrame\n函数具体细节不再阐述，基本上就是管理缓冲区的一些操作，我们主要看后续有关延迟的计算方式。首先，第\n7\n行的判定表示，如果该帧不是重传帧则进入分支内部。在此基础上，该函数会调用\nVCMTiming::IncomingTimestamp 并立刻跳转到\nTimestampExtrapolator::Update。在这个函数内部，框架将会根据当前帧的\nRTP 时间戳估计当前帧的期望接收时间，并对 Kalman gain 进行校准（内心\nOS：这一句话真的是没看懂啊，不过参考文献说后面会具体说明这个函数的目的，这里就先不深究了吧）。\n\n首先说明一帧从完整构成到显示到屏幕上所需要经历的阶段。在帧组装完毕之后，首先会送往解码器解码，解码完毕之后则送给渲染器渲染。\n这里我们关注一个函数，即\nVCMTiming::MaxWaitingTime。这个函数的作用是给出帧组装所能容忍的最大时长，也就是说如果在给定的阈值内没有能够从网络上获取足够的数据包将这一帧组装完毕，则这一帧大概率来不及走完解码、渲染的流程并显示在屏幕上。事实上这个函数是一个预测性质的函数，用来预测当前条件下我们能等待网络延迟多长时间：\nC++TimeDelta VCMTiming::MaxWaitingTime(    Timestamp render_time,    Timestamp now,    bool too_many_frames_queued) const &#123;    MutexLock lock(&amp;mutex_);    if (        render_time.IsZero() &amp;&amp;        zero_playout_delay_min_pacing_-&gt;us() &gt; 0 &amp;&amp;        min_playout_delay_.IsZero() &amp;&amp;        max_playout_delay_ &gt; TimeDelta::Zero()    ) &#123;        // `render_time` == 0 indicates that the frame should be decoded and        // rendered as soon as possible. However, the decoder can be choked if too        // many frames are sent at once. Therefore, limit the interframe delay to        // |zero_playout_delay_min_pacing_| unless too many frames are queued in        // which case the frames are sent to the decoder at once.        if (too_many_frames_queued) &#123;            return TimeDelta::Zero();        &#125;        Timestamp earliest_next_decode_start_time =            last_decode_scheduled_ + zero_playout_delay_min_pacing_;        TimeDelta max_wait_time =            now &gt;= earliest_next_decode_start_time                ? TimeDelta::Zero()                : earliest_next_decode_start_time - now;        return max_wait_time;    &#125;    return render_time - now - EstimatedMaxDecodeTime() - render_delay_;&#125;\n这个函数中 render_time == 0\n表示这一帧需要尽快显示，这里忽略这一分支。该函数接受的参数分别为：\n\n要求渲染完成的时间戳 render_time，即我们的目标是在\nrender_time 之前渲染完毕这一帧\n当前的时间戳 now\n\n而返回值可以看到，首先我们用 render_timer - now\n得到我们总共的容忍时长，之后减去预估的解码延迟\nEstimatedMaxDecodeTime()，再减去预估的渲染延迟\nrender_delay_，即得到了剩余可以用来等待网络的时长。\n\n这里我们看另外一个函数，即\nVCMTiming::RenderTimeInternal：\nC++Timestamp VCMTiming::RenderTimeInternal(uint32_t frame_timestamp, Timestamp now) const &#123;    if (UseLowLatencyRendering()) &#123;        // Render as soon as possible or with low-latency renderer algorithm.        return Timestamp::Zero();    &#125;    // Note that TimestampExtrapolator::ExtrapolateLocalTime is not a const    // method; it mutates the object&#x27;s wraparound state.    Timestamp estimated_complete_time =        ts_extrapolator_-&gt;ExtrapolateLocalTime(frame_timestamp).value_or(now);    // Make sure the actual delay stays in the range of `min_playout_delay_`    // and `max_playout_delay_`.    TimeDelta actual_delay =        current_delay_.Clamped(min_playout_delay_, max_playout_delay_);    return estimated_complete_time + actual_delay;&#125;\n这里主要在预测某一帧何时应该被渲染完毕，事实上返回的就是上一个函数中的\nrender_time\n时间戳参数。首先，判断是否是低延迟渲染模式，如果采用了低延迟模式，则直接返回零表示要求立刻渲染。\n在此之后，首先会通过\nTimestampExtrapolator::ExtrapolateLocalTime 函数，利用\nKalman filter 估计应当何时将这一帧送入渲染器队列。之后将\ncurrent_delay_ 通过上下界\n[min_playout_delay_, max_playout_delay_]\n截断生成渲染过程耗时的估计，而这里的上下界则是上一阶段之中所获得的。current_delay_\n本身的计算方式则在后面给出说明。\n\n由于最新代码框架已经和参考文章中的框架大为不同，这里重新叙述一下一个帧构建完毕后的函数调用链：\n\n构建帧的时候将播放延迟设置到 VCMTiming 类之中\n帧构建完成后触发 VideoReceiveStream2::OnCompleteFrame\n回调函数\n上述回调函数之中触发\nVideoStreamBufferController::InsertFrame\n函数将帧插入帧缓冲区\n帧插入操作通过 controller 最终交给\nFrameBuffer::InsertFrame 实际完成\n正常插入完毕后，非重传帧通过\nVCMTiming::IncomingTimestamp 函数进入 Kalman filter\n流程\n正常插入完毕后，帧缓冲通过\nVideoStreamBufferController::MaybeScheduleFrameForRelease\n函数对后续帧作预测和规划\n预测未来帧的时候调用\nFrameDecodeTiming::OnFrameBufferUpdated 回调\n该回调中通过 VCMTiming::RenderTime\n预测渲染完毕时间戳，在此之后通过 VCMTiming::MaxWaitingTime\n获取最大容忍等待时间\n\nKalman filter\n首先，WebRTC 之中的 RTP 时间戳并非是 Unix 时间戳，而是按照 90kHz\n的采样率计算采样次数。在 90kHz 之下每秒采样 90000 次，所以如果帧率为\n60FPS，则每一帧之间相距 1/60 秒，即 1500 个采样点，也就是说 60FPS\n之下相邻两帧之间的 RTP 时间戳相差值为 1500。\nKalman filter 的目标是，在已知起始帧到达时间 t0 的基础上预测第 k 帧的到达时间 tk。如果将第\nk 帧的 RTP 时间戳记为 Tk，从起始帧到第\nk 帧间因网络发生的 RTP\n时间戳抖动记为 Δk，第 k 帧的采样率记为 sk，那么：\n$$\nt_k = t_0 + \\frac{(T_k - T_0) - \\Delta_k}{s_k}\n$$\n","categories":["【学习笔记】计算机"]},{"title":"《计算机网络原理》学习笔记","url":"/2021/09/13/note-of-net/","content":"网原总之是一个没打算认真学的专业课，因为真的对网络没有很大的兴趣。再加上上学期曾经看着迅哥哥他们被网原折磨，自己也没什么信心能学好这门专业课。\n这个笔记完全基于上一届流传下来的《网原干饭背诵》，在此基础上对重点做一些标记做一些讲解，反正是个背书课，那么就只能一点一点背了。根据前人经验，这个笔记会把比较重要的东西用星号标注出来。\n\n计算机网络的历史和新进展\n【背诵 1 】网络基础\n\n网络所提供的最基本服务为信息传递，不同的网络依据其提供的服务进行区分。而区分服务的依据则包括功能、延迟、带宽等各种外部特性。\n网络依据空间距离可以分为局域网（LAN）、城域网（MAN）、广域网（WAN）和个域网（PAN）。依据信息类型可以分为数据网络、电话网络。依据应用类型可以分为专用网络、通用网络。依据使用权可以分为私有网络、公用网络。同时，网络也可以按照使用的协议进行分类，如\nIP 协议等。\n\n【背诵 2 】计算机网络发展历史\n计算机网络的历史可以大致描述为：\n\n1940 年代，第一个计算机 ENIAC 诞生\n1950 年代，大型机和多终端系统诞生\n1960 - 1964 年，分组交换网络诞生（Paul Baran）\n1960 年代，计算机网络研究开始\n* 1969 年，ARPANET 研究启动\n1970 年代，计算机网络发展\n\n各国电信部门建设运行 X.25 分组交换网\nSNA 以及 DNA 等专用网络体系结构出现\nInternet 的前身 ARPANET 进行实验运行，带宽小且仅有不到 100\n台计算机接入\n* 以太网和 Telnet 出现\n* 1979 年，TCP/IP 协议成熟\n\n1980 年代，计算机网络逐步成型\n\n标准化的计算机网络体系结构 ISO/OSI 出现\n局域网 LAN 技术发展\nFTP、NFS、E-mail、USENET 等技术出现\n1980 - 1983 年，ARPANET 和 MILNET 分离，前者采用 TCP/IP 协议\n1983 年，BSD UNIX 内置 TCP/IP 协议\n1985 - 1986 年，NSFNET 建成，用于连接 6 个超级计算中心\n1987 - 1990 年，NSFNET 开始连接地区网络\nInternet 初具规模，1987 年，中国第一个电子邮件发送到 Internet\n中国开始依赖电话线建立低速广域网\n\n1990 年代，计算机网络进一步发展\n\nInternet 商业化，在中国也得到了广泛应用\nWeb 技术在 Internet 上得到广泛应用\n中国出现局域网，如 Novell 等\n1990 - 1992 年，NSFNET 带宽提高，连接了 16 个地区网络\n1994 年，NSFNET 骨干网解体，出现了若干其他的商用骨干网\n1995 年，中国教育和科研网 CERNET 出现\n\n2000 年代，计算机网络广泛应用\n\n网络应用发展迅速，搜索引擎和社交网络出现\n移动互联网产业快速发展\n2006 年，与 IPv6 相关的 CNGI-CERNET2 出现\n\n最近，数据中心网络、天地一体化网络、 IPv6 技术等快速发展\n\n2011 年开始设立 World IPv6 Day\n2011 年 2 月 3 日，全球互联网名称与数字地址分配机构 ICANN 宣布 IPv4\n地址耗尽\n\n\n【背诵 3 】 Internet 技术\n\nInternet 是全球范围的、通用的、异构的公用计算机网络\nInternet\n是其他类型的计算机网络技术的基础，如企业内部网（Intranet）\nInternet 开放的标准由 IETF 负责制定、维护和协调。其他类似\nIRTF、IAB、IESG 等机构也参与了标准的维护\n\nIETF 全称 Internet Engineering Task\nForce，其分为若干个工作组（WG），其提交的 Internet 标准被称为 RFC，即\nRequest For Comments\nIRTF 全称 Internet Researching Task\nForce，由各类专注某一个领域的研究小组组成\nIAB 全称 Internet Architecture Board，负责定义 Internet\n的大体框架，为 IETF 提供方向上的指导\nIESG 全称 Internet Engineering Steering Group，负责在技术方面上管理\nIETF 的活动\n\nInternet 是历史上发展最快的一种技术，其发展速度甚至超越摩尔定律\n\n【背诵 4 】网络时代三大定律\n\n【摩尔定律】 CPU 性能每 18 个月会翻番，每 10 年翻 100 倍\n【光纤定律】也称超摩尔定律，骨干网带宽每 9 个月会翻番。每 10 年翻\n10000 倍\n【麦特卡菲定律】也称联网定律，网络价值和用户数量的平方成正比\n\n【理解 1 】分组交换技术\nPaul Baran\n在设计能承受核攻击的通信系统的时候，确立了三个设计准则。\n\n自适应系统的热土豆路由策略（能够学习并适应各种新的环境）\n\n如果不知道正确的路由，就将分组转发给所有邻居\n通过观察路过的分组来更新路由表，旧的路由表项会被删除\n尽可能快地转发分组，分组途径的路径并不一定是最短路径\n\n分组发送策略（端节点能够容忍错误并恢复）\n\n每个节点根据自我的路由表决定如何转发分组\n每个分组的转发完全独立于其他的分组\n交换节点不保存端节点信息，这一点让网络的可拓展性大大增强\n\n分布式策略\n\n所有交换节点平等，避免单一节点失效问题\n通过物理硬件冗余和自适应路由实现系统稳健性\n\n\n而 Internet 就是这一类网络。Internet\n连接了各种异构的子网，提供两个最基本的功能，即全球唯一地址和分组通过动态路由传输。\n分组交换技术具有相当多的优点，包括：\n\n简单性\n\n每个分组自身携带信息\n一个路由表可以为所有的流量服务\n可以适应快速增长的网络规模\n\n灵活性\n\n可以在各种物理底层上运行\n可以支持各种网络应用\n\n可扩展性\n\n可以应对端系统的增加\n可以应对流量的增加\n可以应对网络规模增大带来的路由表增大和路由频繁变化\n\n健壮性\n\n默认了网络结构变化是正常现象\n牺牲一定的效率换取网络的稳定\n\n\n【背诵 5 】今日互联网\n\n今日的互联网具有更大的规模和更多的用户，而且支持更多的功能，具有更高的价值，但是其健壮性、适应性和互联程度都下降了\n当今互联网面临的一个问题就是 IPv4\n地址耗尽，而目前缓解这个问题地方案是网络地址转换协议（Network\nAddress Translation / NAT）\n\nNAT 缓解了地址耗尽的问题，增强了安全性和控制性\n但是另外一方面却打破了 Internet 中地址唯一的假设\n端到端的分组传输路径变成多个 NAT 域的级联，相当于虚电路\n为了恢复 Internet 的原有结构，目前正在推进 IPv6 技术\n\n\n【杂项 1 】未分类知识点\n\n二十世纪后期人类两项最伟大的战略工程为星球大战计划和互联网计划。目前互联网已经发展为继海、陆、空、天之后的第五空间。\n\n计算机网络体系结构\n【背诵 6\n】计算机网络的定义和组成\n\n计算机网络定义为若干独立自治的计算机系统的互联集合体\n\n计算机网络和分布式系统不同，分布式系统虽然也是由若干个计算机系统组成，但其具有内聚性和透明性，故分布式系统呈现给用户的更像是一台计算机。计算机网络则明显分立，在用户的视角依然是若干不同的计算机\n目前分布式系统和计算机网络有合流的趋势，两者正在走向统一\n\n计算机网络有两级组成，即资源子网和通信子网。资源子网常常是服务器或者用户计算机，而通信子网常常是通信线路等信道和路由器、交换机等网络互联设备\n计算机网络之中的通信通常有两种，即交换式通信和广播式通信\n\n交换式通信又称点对点通信\n\n需要经过交换设备，将消息转发给一个或一组结点\n交换设备根据需要选择输出\n网络典型的拓扑结构包括 star / ring(loop) / tree / complete /\nintersecting rings / irregular\n关键技术是路由选择\n\n广播式通信\n\n多台计算机共享通信线路\n任一台计算机发出的信息可以直接被其它计算机接收\n网络典型的拓扑结构包括 bus / ring(loop)\n关键技术是通道分配\n\n静态分配，即分时间片。特点是控制简单，但通道利用率低\n动态分配，即各站点动态使用通道。特点是控制复杂，但通道利用率高。通道分配方法有两种。集中式指的是只有一个仲裁机构，分布式指的是各站点均有仲裁机构\n\n\n传统的 LAN 一般使用广播式通信，而 MAN 和 WAN\n一般使用交换式通信。现代的 LAN 中交换式通信的应用正在增多\n\n\n【理解 2 】计算机网络体系结构\n\n计算机网络体系结构指的是对计算机网络及其部件所完成功能的比较精确的定义，即从功能的角度描述计算机网络的结构，是层次和层间关系的集合。但体系结构只会从功能上定义网络，并不会定义协议的细节和接口关系\n\n现代计算机网络体系架构指出，计算机网络的基本功能是为地理位置不同的计算机用户之间提供访问通路，并且应当提供若干功能（具体功能列表见\nPPT），这些功能中最重要的是通信功能\n这些功能的特征是分层，也就是说计算机网络中提供的功能是分成层次的\n位于不同计算机上进行对话的同一层通信各方可分别看成是一种进程，称为对等（同等）进程\n\n计算机网络分层的体系结构有三个重要的概念，即协议、服务和接口\n\n计算机网络体系结构定义了计算机网络的功能是分层次的，而协议（Protocol）就是计算机网络同等层次中，通信双方进行信息交换时必须遵守的规则\n\n协议由三部分组成\n\n语法（Syntax）部分。即以二进制形式表示的命令和相应的结构\n语义（Semantics）部分。即发出的命令请求，完成的动作和回送的响应组成的集合\n定时关系（Timing）部分。即有关事件顺序的说明\n\n网络体系结构的分层决定了协议的分层，协议的分层构成了洋葱结构\n\n目的主机某一层收到的报文与源主机同一层发出的报文相同\n协议分层要保证整个通信系统功能完备高效\n\n\n协议定义了不同计算机同层次之间的关系，而服务（Service）定义同一个计算机的上下层之间的交换信息时必须遵守的规则\n\n服务有两种，即面向连接的服务和无连接服务。\n\n在使用面向连接的服务进行传输的时候，首先需要建立连接，然后使用这个连接传递数据，使用完毕需要关闭连接。这类服务的顺序性较好\n在使用无连接服务的时候，不建立连接，直接通过服务发送数据每个包都需要独立确定路由。这类服务的顺序性较差\n需要注意，连接并不意味着可靠，可靠性依然需要通过确认、重传等机制进行保证\n\n服务在形式上需要通过一组服务原语（Primitive）规定。原语可以分为四类，即请求、指示、响应、确认\n\n在同一个计算机之中相邻层之间都有一个接口（Interface），它定义了下层向上层提供的原语操作和服务\n\n基于三大基本概念，计算机网络体系结构的具体实现大致为\n\n服务访问点（Service Access Point / SAP）\n\n任何的层间服务都是在接口的 SAP 上完成的\n每一个 SAP 都有唯一的识别地址\n每一个层间接口可以具有多个 SAP\n\n接口数据单元（Interface Data Unit / IDU）\n\nIDU 是通过 SAP 传递的层间信息单元（上下传输）\nIDU 的构成是上一层的服务数据单元（Service Data Unit /\nSDU）和接口控制信息（Interface Control Information / ICI）的拼接\n\n协议数据单元（Protocol Data Unit / PDU）\n\nPDU 是在同层实体之间通过网络传输的信息单元（水平传输）\nPDU 的构成是上一层的 SDU 或其分段和协议控制信息（Protocol Control\nInformation / PCI）的拼接\n\n基于上述定义，计算机网络的工作类似于下述\n\n当本层需要水平传输的时候，首先获得上层通过 SAP 传递的，由 SDU 和 ICI\n拼接得到的 IDU。然后本层删除 ICI，将剩余的 SDU 拼接上 PCI 获得 PDU\n并通过本层网络协议传输\n当本层需要继续向下层传输的时候，首先获得上层的\nIDU，这个从上层获得到本层的 IDU 在下层看来就是一个新的\nSDU。本层随后直接拼接上新的 ICI 获得新的 IDU\n向下传输。所以说，最上层产生的数据包向下传播的时候，会逐层添加各层控制信息。而底层接收的数据包向上传播的时候，会逐层把这些控制信息删去，获取最后的数据\n\n\n分层的优点包括模块化、功能抽象、可复用。缺点是数据隐藏会导致可能的低效\n计算机网络体系结构的设计中还有两个原则，分别称为端到端原则和\nRule of thumb\n\n端到端原则的思想是底层需要尽可能简单，但是上层应用可以较为复杂（完成验证、纠错等工作），只有当这样的功能明显能提升功能的时候才会放在底层\nRule of thumb\n的思想是，底层的新功能不能影响其他不使用这个新功能的部分\n\n\n【理解 3 】 OSI 和\nTCP/IP 模型及其他网络模型\n\n模型建立的历史事件见 PPT\nOSI 模型在 1983 年提出，模型分为七层，从下至上为\n\n物理层，这一层包含基础网络硬件，在物理通信线路上传输二进制位（Bit）\n数据链路层，这一层目标是在有差错的物理线路上传输无差错的数据帧（Frame）\n网络层，这一层控制通信子网提供数据包（Packet）传输功能\n传输层，这一层为用户提供端到端的数据传输功能\n会话层，这一层为用户提供类似安全认证等会话控制服务\n表示层，这一层为用户提供数据表示和数据转换功能\n应用层\n\nTCP/IP 模型的提出早于 OSI 模型，且仅有四层：\n\nHost-to-Internet 层，相当于 OSI 的物理层和数据链路层\nInternet 层（网络层），控制通信子网提供源点到目的点的 IP\n包传送，实现异构网络互联\n传输层，提供端到端的数据传送服务，如 TCP 和 UDP\n应用层，内部包含了 OSI 的会话层和表示层\n\nX.25 分组交换网在 70 年代提出，早于 OSI\n模型，为公用包交换网与用户之间提供接口\n\n该模型面向连接，支持交换虚电路和永久虚电路\n物理层使用协议 X.21 以及 X.3 / X.28 / X.29\n数据链路层使用协议 LAP 和 LAPB\n网络层使用协议 PLP\n该模型提出了以下名词 -（用户侧）数据终端设备（Digital Terminal\nEquipment / DTE）\n\n数字线路设备（Digital Circuit Terminating Equipment / DCE）\n打包解包设备（Packet Assembler and Disassembler / PAD）\n\n\nNovell Netware 在 1983 年提出，在 2005 年终止开发\n\n模型基于 client-server\n结构，设计的基本思想是文件共享（同时期其它系统还基于磁盘共享，所以模型有一定先进性）\n基于 XNS（Xeror Network System），网络层协议是不可靠无连接协议\nIPX（Internet Packet Exchange），传输层协议是面向连接的 NCP（Netware\nCore Protocol）和 SPX（Sequenced Package Exchange）\n\nB-ISDN 即宽带综合业务数字网，其技术基础为 ATM\n异步传输模式（Asynchronous Transfer Mode）\n\nATM 也是分组交换技术\n\n异步传输，即不具有主时钟\n传输单元为短而定长的信元（cell）\n采用虚电路，面向连接\n常见速率包括 155M 和 622M\n\n\n\n【杂项 2 】未分类知识点\n\n美国的标准化组织包括 ANSI 和 NIST，中国的标准化组织包括\nCCSA，行业标准则是 IEEE\n计算机网络标准化，电信标准为 ITU 而国际标准则是 ISO\nInternet\n的标准是自发的，并非政府干预，每个标准诞生前都需要提出请求意见稿，即\nRFC\n\n数据通信基本原理\n【理解 4 】信号的傅里叶分析\n\n注意网原里傅里叶级数的定义为：\n\n$$\ng(t) = \\frac12 c + \\sum_{n = 1}^{+\\infty} a_n\\sin(2\\pi f nt) + \\sum_{n =\n1}^{+\\infty} b_n\\cos(2\\pi f nt)\n$$\n所以：\n$$\n\\begin{aligned}\nc &amp;= \\frac2T \\int_0^T g(t) {\\rm d}t \\\\\na_n &amp;= \\frac2T \\int_0^T g(t)\\sin(2\\pi f nt) {\\rm d}t \\\\\nb_n &amp;= \\frac2T \\int_0^T g(t)\\cos(2\\pi f nt) {\\rm d}t \\\\\n\\end{aligned}\n$$\n\n一个信号所包含的信号频率范围为频谱（Spectrum），其宽度称为信号的绝对带宽（Definite\nbandwidth）。大部分信号有无穷的绝对带宽，但是其能量可能仅集中于某一个频段，这个频带的宽度称为有效带宽（Effective\nbandwidth），简称带宽\n带宽越宽，信号的信息承载能力越强\n信号在给定截止频率 fc\n的信道传输的过程中，高于截止频率的频率分量的振幅衰减明显大于低于截止频率的\n通过信道的谐波次数越多，信号越逼真\n\n【计算 1 】信号传输基础计算\n\n波特率指的是信号每秒钟变化的次数，也称调制速率\n比特率指的是信号每秒钟传输的二进制位个数\n波特率和比特率的关系取决于信号值与比特位的关系，如果每个信号值能表示\nN\n个二进制位，那么比特率为波特率的 N 倍\n对于比特率为 $B({\\rm bps})$\n的信道，如果 M\n个二进制位为一个周期，则波特率为 $B/M({\\rm\nbaud})$，一次谐波的频率为 $f_1 =\nB/M({\\rm\nHz})$（一次谐波指的是信号傅里叶级数中周期等于原信号周期的分量），能通过信道的最高次谐波次数为\nN = fc/f1，这里\nfc\n为信道的截止频率\n信道的有限带宽限制了信号的传输速率，无噪声带宽为\nH 的信道传输有 V\n种电平状态的信号时，最高传输速率为：\n\n$$\nv = 2H\\log_2 V({\\rm bps})\n$$\n\n对于有噪声信道，其噪声功率为 N，信号功率为 S，其信噪比为：\n\n$$\nx = 10\\log_{10}\\frac{S}{N}({\\rm dB})\n$$\n一般电话系统的典型信噪比为 $30({\\rm\ndB})$。\n带宽为 $H({\\rm Hz})$，信噪比为 S/N\n的任何信道的最大传输速率为：\n$$\nv = H\\log_2\\left(1 + \\frac{S}{N}\\right)({\\rm bps})\n$$\n该传输速率为理论上限，实际很难达到。该传输速率与电平级数和采样速度无关\n【背诵 7 】传输方式分类\n\n数字传输、模拟传输\n\n数字传输的优点是成本低，对噪声不敏感，缺点是易受衰减（频率越高越严重）\n\n并行传输、串行传输\n点到点传输、点到多点传输\n\n为适应不同的需要，通信线路采用不同的连接方式\n\n单工、半双工和全双工传输\n\n单工传输：信息只能单向传输，监视信号可回送\n半双工传输：信息可以双向传输，但在某一时刻只能单向传输\n全双工传输：信息可以同时双向传输\n\n同步传输、异步传输\n\n同步传输\n\n传输以报文为基本单位\n传输开始的时候需要传输同步字符让双方同步\n可以不间断传输，传输效率较高但是需要透明传输处理，即传输的信息中不存在同步字符\n接收方必须知道每一位信号的开始及其持续时间，以便正确的采样接收\n基于二进制位的传输一般使用同步传输，信息以二进制位流为单位传送，传输过程中以位为单位同步，传输的开始和结束以特定的八位二进制位同步\n\n异步传输\n\n需要辅助位，如起始位、奇偶校验位、终止位\n传输效率低，主要用于字符终端与计算机之间的通信\n传输字符时，信息传送以字符为单位\n\n\n\n【背诵 8 】信号发送方式\n\n数据表示分为两种，即模拟数据和数字数据\n数据传输方式中以信号为载体，分为模拟信号（模拟信道）和数字信号（数字信道）两种（见【背诵\n7 】）\n两种数据表示和两种数据传输方式对应形成四种信号发送方式：\n\n\n\n\n\n模拟数据\n数字数据\n\n\n\n\n模拟信道\n电话系统\n频带传输、调制解调器（Modem）\n\n\n数字信道\n编码解码器（Codec）\n基带传输、数字编码解码器\n\n\n\n\n数字数据的数字传输\n\n基带传输\n\n基带指的是传输变换前所占用的频带，是原始信号所固有的频带\n基带传输指的是在传输时直接使用基带信号，是一种基本的传输方式，适用于高速低速各种情况\n其限制为因基带信号所带的频率成分很宽，所以对传输线有一定的要求\n\n编码方式\n\n不归零制码（NRZ）\n\n用高电平表示 1，用低电平表示 0\n难以分辨某一位的开始或结束，所以发送和接受方都需要时钟同步\n如果信号中 0 或者 1 连续出现，直流电平会叠加\n容易产生传播错误\n\n曼彻斯特码（相位编码）\n\n每个周期中间有一个跳变，由低到高为 0，由高到低为 1\n克服了 NRZ\n的不足，并且每个周期中间的跳变既是信息又是时钟，可以自同步\n\n差分曼彻斯特码\n\n每个周期中间有一个跳变作为时钟\n每个周期开始有跳变表示 0，没有跳变表示 1\n时钟、数据相分离，便于提取\n差分曼彻斯特注意分类讨论初始时是高电平还是低电平\n\n逢 0 变化 NRZ\n\n每个周期开始有跳变表示 0，没有跳变表示 1\n每个周期中间没有跳变\n注意讨论初始时的电平\n\n逢 1 变化 NRZ\n\n每个周期开始有跳变表示 1，没有跳变表示 0\n每个周期中间没有跳变\n注意讨论初始时的电平\n\n\n\n数字数据的模拟传输\n\n频带传输\n\n在一定频率范围内的线路上，进行载波传输\n用基带信号对载波进行调制，使其变为适合于线路传送的信号\n调制指的是用基带脉冲控制载波参数，使得这些参数反应基带脉冲信息\n使用调制解调器\n\n调制技术\n\n幅移键控法（调幅 / ASK），即根据基带脉冲调整载波振幅\n频移键控法（调频 / FSK），即根据基带脉冲调整载波频率\n相移键控法（调相 / PSK），即根据基带脉冲调整载波相位\n\n\n模拟数据的数字传输\n\n脉冲代码调制 PCM 技术\n\n根据 Nyquist 原理进行采样\n将模拟信号的振幅分为 2n 级，每一个采样点用\nn 位二进制位表示\n贝尔系统的 T1 载波每个采样点用 7 位二进制表示\n\n差分脉冲代码调制\n\n与 PCM\n数字化振幅不同，差分脉冲代码调制数字化的是相邻采样点的振幅差值\n可以使用较少的二进制位表示\n\nδ 调制\n\n根据每个采样值与前一个值之间的差来决定输出 1 还是 0\n编码速度可能无法跟上变化较快的模拟信号\n\n\n\n【背诵 9 】多路复用技术\n\n使得多路信号同时使用一条物理线路的技术,允许用户使用一个共享信道进行通信，避免相互干扰，降低成本，提高利用率\n多路复用技术分类\n\n时分复用（TDM）\n\nT1 载波电话系统分为 24 个信道，每个 $64({\\rm Kbps})$，一共 $1.544({\\rm Mbps})$，控制信息带内传输\n\n频分复用（FDM）\n\n频率分割为频段，多用于手机通信\n\n波分复用（WDM）\n\n光传输使用，对波长分段，是特殊的频分复用\n\n\n\n【背诵 10 】交换技术\n\n计算机网络通信分为交换式和广播式\n交换是在多结点通信网络中，为有效利用通信设备和线路，动态接通、断开、切换通信线路\n交换技术分类\n\n电路交换\n\n直接利用可以切换的物理电路动态调整通信线路\n分为建立电路、传输数据、拆除电路三个阶段\n在发送数据前，必须建立起点到点的物理通路。建立物理通路时间较长，数据传送延迟较短\n电话网和 ISDN 采用电路交换\n电路交换一般采用时分复用\n\n时间被分为帧（Frame），帧被分为时槽（Slot）\n时槽在帧内的相对位置决定这个槽所传输数据所属的会话\n发送方和接收方间需要同步\n非永久会话需要动态绑定时槽到一个会话\n\n\n报文交换（存储转发方式）\n\n信息以报文（逻辑上完整的信息段）为单位进行存储转发\n线路利用率高、要求中间结点（网络通信设备）缓冲大、延迟时间长\n\n分组交换（包交换）\n\n分组是一种报文还小的信息段，可定长也可变长。分组交换中信息以分组为单位进行存储转发。源结点把报文分为分组，在中间结点存储转发，目的结点把分组合成报文。用附加的分组头来区分数据\n特点\n\n每个分组头包括源地址和目的地址，独立进行路由选择\n\n所以不保证到达顺序\n\n网络结点设备中不预先分配资源，使用统计复用，线路利用率高\n\n相比于电路交换最明显的优势\n\n易于重传，可靠性高\n易于开始新的传输，让紧急信息优先通过\n开销增加\n需要处理拥塞问题\n\n需要复杂的路由器，难以保证端到端的服务质量\n\n\n分组交换分为虚电路分组交换和数据报分组交换\n\n数据报分组交换（如 IP Networks）\n\n每个分组均带有网络地址（源、目的），可走不同的路径\n\n虚电路分组交换（如 ATM Networks）\n\n其是电路交换和分组交换的结合\n\n数据以分组形式传输，来自同一流的分组通过一个预先建立的路径（虚电路）传输\n确保分组的顺序，但是来自不同虚电路的分组可能会交错在一起\n\n分三个阶段\n\n建立：发带有全称网络地址的呼叫分组，建立虚电路\n传输：沿建立好的虚电路传输数据\n拆除：拆除虚电路\n\n分组头不需要包含完整的地址信息，路由器需要维护虚电路的状态信息\n\n\n\n\n电路交换、报文交换、分组交换的时序图如下。其中电路交换要逐层申请预留占用资源，这段申请时间用于寻找出境中继线，申请完毕后节点会占用这段传输线\n\n\n\n三类交换技术的特点\n\n电路交换适用于实时信息和模拟信号传送，在线路带宽比较低的情况下使用比较经济\n报文交换适用于线路带宽比较高的情况，可靠灵活，但延迟大\n分组交换缩短了延迟，也能满足一般的实时信息传送。在高带宽的通信中更为经济、合理、可靠。是目前公认较好的一种交换技术\n电路交换和分组交换可以结合，如 IP over SONET 以及 IP over Frame\nRelay\n\n\n【背诵 11 】交换结构\n\nCrossbar 交换结构：无阻塞内部交换\n空分交换：多个 Crossbar 互联，有无阻塞均可\n时分交换：高效处理\n\n【杂项 3 】未分类知识点\n\n数据通信技术由编码技术、多路复用和交换技术构成\n\n物理层接口及其协议\n【背诵 12 】物理层的定义与功能\n\n物理层提供机械的、电气的、功能的和规程的特性，目的是启动、维护和关闭数据链路实体之间进行比特传输的物理连接。这种连接可能通过中继系统，在中继系统内的传输也是在物理层\n物理层的功能是在两个网络设备之间提供透明的比特流传输\n物理层的传输方式\n\n连接方式（点到点，点到多点）\n通信方式（单工，半双工，全双工）\n位传输方式（串行，并行）\n\n物理层的重要特性\n\n机械特性（Mechanical characteristics）\n\n定义物理连接的边界点，即接插装置\n规定物理连接时所采用的规格、引脚的数量和排列情况\n\n电气特性（Electrical characteristics）\n\n规定传输二进制位时，线路上信号的电压高低、阻抗匹配、传输速率和距离限制\n\n功能特性（Functional characteristics）\n\n主要定义各条物理线路的功能，比如数据、控制、定时、地线\n\n规程特性（Procedural characteristics）\n\n主要定义各条物理线路的工作规程和时序关系\n\n\n\n【背诵 13 】物理层传输介质\n\n双绞线。既可以用于模拟传输，也可以用于数字传输，带宽依赖于线的类型和传输距离\n同轴电缆\n\n基带同轴电缆，用于数字传输（数字数据数字传输用基带传输）\n宽带同轴电缆，用于模拟传输（模拟数据数字传输用频带传输）\n\n光纤\n\n分为单模光纤和多模光纤，两者都支持波分复用，使用的波长越长衰减越小，但成本也越高\n\n单模光纤只有一个入射角度，半径小，适合长距离传输\n多模光纤有多个入射角度，半径大，适合短距离传输\n\n光纤组网\n\n点到点，使用四根线，两根用于保护倒换\n环，使用两根线，一根用于保护倒换\n\n光纤中继器。分为光电光式和全光式\n\n全光网具有光因特网论坛 OIF\n\n\n\n【背诵 14 】 SONET / SDH\n网络传输技术\n\n80\n年代提出，应用时分复用技术，同步传输，有主时钟控制\nSONET 路径为：路径（Path）、线路（Line）、段（Section）\n基于字节的复用。但是 OC-3c 中的 c\n表示级联而非复用\n\n【背诵 15\n】移动电话网络传输技术\n\n单方向的寻呼系统\n\n寻呼过程\n\n打电话给寻呼公司，输入寻呼机号码\n寻呼公司的计算机收到请求，通过线路传到高处的天线\n天线直接广播信号（本地寻呼），或传递给卫星（异地寻呼），卫星再广播\n\n单向系统\n需要很小的带宽\n\n蜂窝电话\n\n1G：模拟蜂窝电话，只能传送话音\n2G：数字蜂窝电话，主要传送话音，相关概念有 GSM 和 CDMA\n3G / 4G：可以传送话音和数据\n\n模拟蜂窝电话\n\nPush-to-talk system。早期用于军事通信，单信道，半双工系统\nIMTS。双频，全双工系统\nAMPS。使用小蜂窝，蜂窝中心有基站，不相邻且相近的蜂窝中重用频率\n\n\n网原实在是看不会了，这个笔记也就到此为止吧。\n\n","categories":["【学习笔记】计算机"]},{"title":"Next.js 框架摸索实录","url":"/2022/11/24/note-of-next/","content":"在出软工小作业的时候遇到了 React Router\n配置和跨域问题，虽然这两个都不是什么大问题，我也不是不会解决，但是要是出到作业里面，势必会导致我要写好多文档还要写很多讲解。这个时候\nyfgg 告诉我 Next.js\n框架好之又好，昨天稍微试了一下感觉确实不错，所以就吃了安利迁移到了\nNext.js\n框架。但是今天接着写的时候，还是发现不少细节是需要注意的，这里就当备忘了。\n\n初始配置\n由于 Next.js\n自己带了不少初始配置，所以加东西的时候不一定每个都需要自己从头再来，完全可以用官方模板。\n我出的小作业采用 Next.js + TypeScript + ESLint +\nJest，这一整套模板也正在编写，到时候可以开放给同学们直接下载。\nCSR 还是 SSR\nNext.js 框架的一大优势就在 SSR。然而说实话我自己也没有特别明白 SSR\n之类的概念，所以昨晚花了点时间学了一下。\n最早期的前后端耦合应用实际上就采用 SSR，即 Server\nSide\nRender，服务端渲染。当时严格而言就没有前端这个概念，服务器直接将渲染好的\nHTML 扔给浏览器就结束了。\n而随着前后端分离开发概念的出现，Vue、React 等框架逐渐采用 CSR，即\nClient Side\nRender，客户端渲染。CSR\n中，数据交互大致可以描述为：\n\n浏览器向前端服务器请求模板 HTML（或者说空缺关键数据的 HTML），这些\nHTML 中携带获取关键数据的脚本\n浏览器渲染模板\nHTML，执行获取数据的脚本，向后端服务器请求关键数据\n浏览器获得关键数据后，调整 DOM 展示最终页面\n\nCSR 比较大的问题有两点：\n\n如果后端服务器响应慢或者数据量大，模板 HTML\n在页面上留存时间长，表现为 Loading 界面或者白屏，严重削弱用户体验\n爬虫难以处理这类网页，对搜索引擎的优化（Search\nEngine Opimization，简称\nSEO）困难，导致网页宣传效果不佳\n\n但就开发环节而言，开发需要不断处理白屏问题，不断在组件中设置\nrefreshing 状态实际上比较浪费开发时间。\n而现代优化过的 SSR 则相应做出了部分解决，其基本思路为：\n\n浏览器向前端服务器请求页面\n前端服务器向后端服务器请求关键数据，获取数据后根据自己已有的模板\nHTML 渲染出完整 HTML 发回浏览器\n浏览器直接渲染出完整页面\n\n首先，浏览器不会收到缺失数据的\nHTML，这样就从根源上解决白屏问题。进一步，由于服务端的算力和内网传输速度一般高于客户端算力和外网传输速度，所以渲染出最终\nHTML 的时间相应缩短。另外，由于客户端能够直接得到完整 HTML，所以 SEO\n也是简单的。\n然而 SSR 显然也是有问题的：\n\n服务器端压力极大，对于多并发情况处理无力\n针对每个用户都需要重新渲染完整 HTML，重复计算问题严重\n\n其中第二个问题实际上比较重要，如果某个网页和客户端具体信息无关，也就是说任何客户端都收到相同内容，那么这种\nSSR 实际上不如 CSR。CSR 可以通过 CDN 缓存模板 HTML，而 SSR\n此时对每个用户的请求，每次都需要完整渲染 HTML。\n所以这也是 SSG，Server Side\nGeneration，服务端生成提出的契机。针对与客户端无关的、更新速度慢的页面，SSG\n会在构建时直接生成页面并缓存在前端服务器，浏览器发出请求后会直接返回缓存页面，从而解决上述问题。\n显然，CSR、SSR、SSG\n各有利弊。就目前你清的教学、科协各个成员的掌握情况看，CSR\n系列的开发明显占优势。另外考虑到软工课程不少类似于后台管理页面等更重视数据时效性、用户交互体验的应用，CSR\n更应当重点讲解。\n然而 SSR\n不能因此完全废弃不讲，因为其针对用户无关页面的白屏加载问题绝对是重要的一种解决方案。SSR\n依然是企业官网、个人博客等网页的首选。\n所以目前依然是将传统的 CSR 布置为作业，然后让他们强制将 API\n睡眠，体验白屏问题后让他们叙述 SSR 的好处，用此作为思考题。\nuseEffect 重复调用问题\n这是一个老问题，说实话也和 Next.js 没有多少关系。如果在 React\n中写下述代码：\nTypeScriptconst App = () =&gt; &#123;    useEffect(() =&gt; &#123;        console.log(&quot;useEffect called!&quot;);    &#125;, []);    return &lt;p&gt; Test page. &lt;/p&gt;;&#125;;\n会发现控制台里出现了两次 useEffect called! 的输出。\n虽然严格而言不会出现很大的问题，然而由于这种 useEffect\n常常用于获取页面的初始数据（CSR\n常用手法），这个问题可能导致重复请求后端数据，对于用户鉴权等需求甚至可能是危险的，后端如果不去做相应处理甚至可能打穿后端（我软工还真的差点出锅，然而当时也没在意）。\n然后我搜索引擎大作业里面采用了非常丑陋的写法解决了：\n\n今天才知道这个是 React 的严格模式的锅。严格模式下，在 dev 条件下\nReact 会有意重复调用这些钩子来提示可能的危险。\n也就是说打穿后端实际上就是 React\n告诉你，你这有可能出锅，你自己不处理好不怪我。\n当然，release 之后 React 就不会有意重复调用了。\n所以解决方式就两种：\n\n好好写能够处理并发的代码，React 都告诉你会出事了\n关掉严格模式，让 React 闭嘴\n\n我选择了后者。\n参考：https://juejin.cn/post/7105652180501135367。\nuseRoute 与注水\n使用动态路由的时候，我按照 React 的开发习惯写了下述代码：\nTypeScriptconst route = useRouter();useEffect(() =&gt; &#123;    console.log(route.query.id);    // Use route.query.id to fetch data&#125;, []);\n令人惊讶的是，这里输出了 undefined。\n事实上这是 Next.js 预渲染的锅，原文是这样的：\nPages that are statically optimized by Automatic Static\nOptimization will be hydrated without their route parameters\nprovided, i.e query will be an empty object\n({}).\nAfter hydration, Next.js will trigger an update to your application\nto provide the route parameters in the query object.\n\n简而言之，ASO\n是一种预渲染优化，在不获取路由信息的条件下先弄出来一个页面给浏览器，然后再注水（即向\nquery\n注入路由信息）并触发组件更新，也就是说页面获取到路由信息并不是一开始，从而\nuseEffect(*, []) 是拿不到路由信息的。\n了解这一点后，代码就应该写为：\nTypeScriptconst route = useRouter();const query = route.query;useEffect(() =&gt; &#123;    if (!route.isReady) &#123;        return;    &#125;    console.log(route.query.id);    // Use route.query.id to fetch data&#125;, [route, query]);\n应该让 useEffect 检测 route 和\nquery 的变动，在注水完成后才能触发数据获取。\n","categories":["【杂谈】开发"]},{"title":"强化学习入门笔记","url":"/2023/02/22/note-of-rl/","content":"这学期选了一门深度强化学习，也正好趁此机会系统性质地把强化学习理论基础过一下，如果可以的话可能还打算过一下深度学习基础扩展一下视野之类的。\n\n\n强化学习的基本概念与基本优化理论\n环境与策略\n强化学习的基本框架为一个智能体和环境交互，环境对智能体的决策给出反馈，即收益信号并转移到下一状态，智能体需要学会在不同的状态下应该做出何种决策以收获最高总收益。\n这里环境常常建模为 Markov 决策过程，即 MDP $(\\S, \\A, \\Pe, r, \\gamma)$。所谓 Markov\n过程，指的是状态转移和历史状态无关，仅仅和当前状态有关，可以简单描述为\n$\\P(s_{t + 1} \\mid s_t) = \\P(s_{t + 1} \\mid\ns_t, s_{t - 1}, \\cdots, s_1)$。MDP 中各项指的是：\n\n状态空间 $\\S$。即环境可以表现出的所有状态构成的集合。\n决策空间 $\\A$。即环境允许智能体做出的所有决策构成的集合。\n状态转移概率函数 $\\Pe$。$\\Pe(s' \\mid s, a)$ 表示环境在状态 $s \\in \\S$ 且智能体做出决策 $a \\in \\A$ 的时候环境下一步转移到状态 $s' \\in \\S$ 的概率。这里下标 ℰ 表示该概率仅与环境 ℰ 本身有关。其一般称为 model 或者\ndynamics。\n收益函数 r。收益函数为从\n$\\S \\times \\A \\times \\S$ 到 $\\R$ 的映射。r(s,a,s′)\n表示环境在状态 $s \\in \\S$\n且智能体做出决策 $a \\in \\A$\n并转移到新状态 $s' \\in \\S$\n的时候环境给予智能体的收益。\n收益衰减系数 γ。这里 γ ∈ [0,1]。该参数代表收益随着时间步衰减的系数，具体含义将会在后续定义累计收益的时候展开。\n\n另外需要说明的是，状态 $s \\in \\S$\n可能并不是完全可以观测的，如果 s 不能完全观测，我们会将 s 中能观测的部分记作 o，称为观测，即\nobservation。所有观测构成的集合记作 𝒪。这种部分可以观测的 MDP 称为\nPartially Observable MDP，缩写\nPOMDP。\n而智能体内部所使用的策略一般表现为 π(a∣s)，其表示了智能体在该策略条件下，在状态\ns 时做出决策 a 的概率。\n上述的策略往往称为非确定性策略，因为其对于某个状态给出的是做出某一种决策的概率，是不确定的。而另外一类策略，即确定性策略，会对于某个状态给出具体的某一种决策。确定性策略的记号，为了和非确定性策略的\nπ 区别，往往使用 μ。而 a := μ(s)\n就表示了智能体在该策略条件下，在状态 s 时会做出决策 a。\n一条轨迹（Trajectory），指的是智能体和环境不断交互的过程的记录。具体而言，环境首先位于状态\ns0，智能体做出决策\na0，环境返回收益\nr1 后转入新状态\ns1。以此类推形成\ns0, a0, r1; s1, a1, r2; ⋯。轨迹常常使用记号\nτ 表示。\n显然根据 Markov 的特性，我们可以得到在策略 π 的条件下某一条轨迹 τ = (s0,a0,r1;s1,a1,r2;⋯)\n出现的概率为：\n$$\n\\P_\\pi(\\tau) = \\Pe(s_0)\\prod_{t = 0}^{+\\infty} \\pi(a_t \\mid s_t)\\Pe(s_{t\n+ 1} \\mid s_t, a_t)\n$$\n这里 $\\Pe(s_0)$ 表示环境初始状态为\ns0 的概率。\n我们表示轨迹 τ\n服从上述概率分布的时候，可以写成多种符号，包括 $\\tau \\sim \\P_\\pi(\\tau)$ 或者 τ ∼ π\n等等，本文会使用第二种表达。\n累计收益与价值函数\n对一条轨迹，累计收益（Utility）的定义为：\n$$\nG_t(\\tau) := \\sum_{k = 0}^{+\\infty} \\gamma^k r_{t + k + 1}\n$$\n其中 t = 0 时，G0 可以简写为 G。\n这里注意到我们累加收益的时候需要不断使用衰减因子进行衰减，这一操作主要是为了拟合现实中距离现在越远的行为对当前决策的影响越小的特征，这一操作同时也保证了收敛性。\n之后，我们进一步定义价值函数。首先需要定义状态行为价值函数：\n$$\nQ^\\pi(s, a) := \\Eop_{\\tau \\sim \\pi}[G(\\tau) \\mid s_0 = s, a_0 = a]\n$$\n进一步即可有状态价值函数：\n$$\nV^\\pi(s) := \\Eop_{\\tau \\sim \\pi}[G(\\tau) \\mid s_0 = s]\n$$\n我们可以发现状态行为价值函数描述了在状态 s 下做出决策 a\n后期望的累计收益，也就是说该价值函数评价了给定状态下的某个决策的期望收益，所以我们常常使用状态行为价值函数辅助决策。而状态价值函数则和具体的决策无关，是衡量从某一个状态出发，能够获得的期望收益。\n显然这两个价值函数之间存在相互推出关系，而这种关系描述如下：\nTheorem 1.01 对于任何 MDP 与其上的策略 π，该策略的状态价值函数与状态行为价值函数满足：\n$$\n\\begin{aligned}\n{\\color{red} V^\\pi(s)} &amp;= \\sum_{a \\in \\A} \\pi(a \\mid s){\\color{red}\nQ^\\pi(s, a)} \\\\\n{\\color{red} Q^\\pi(s, a)} &amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a)[r(s,\na, s') + \\gamma {\\color{red} V^\\pi(s')}] \\\\\n\\end{aligned}\n$$\n\n第一个等式是由 Qπ 推出 Vπ\n的路径，证明也是简单的：\n$$\n\\begin{aligned}\nV^\\pi(s) &amp;= \\Eop_{\\tau \\sim \\pi}[G(\\tau) \\mid s_0 = s] \\\\\n&amp;= \\sum_{\\tau} \\P_\\pi(\\tau \\mid s_0 = s)G(\\tau) \\\\\n&amp;= \\sum_{\\tau} \\left(\\sum_{a \\in \\A} \\P_\\pi(\\tau, a_0 = a \\mid s_0 =\ns)\\right)G(\\tau) \\\\\n&amp;= \\sum_{\\tau} \\left(\\sum_{a \\in \\A} \\P_\\pi(\\tau \\mid s_0 = s, a_0 =\na)\\P_\\pi(a_0 = a \\mid s_0 = s)\\right)G(\\tau) \\\\\n&amp;= \\sum_{a \\in \\A} \\P_\\pi(a_0 = a \\mid s_0 = s) \\left(\\sum_{\\tau}\n\\P_\\pi(\\tau \\mid s_0 = s, a_0 = a) G(\\tau)\\right) \\\\\n&amp;= \\sum_{a \\in \\A} \\pi(a \\mid s)\\Eop_{\\tau \\sim \\pi}[G(\\tau) \\mid\ns_0 = s, a_0 = a] \\\\\n&amp;= \\sum_{a \\in \\A} \\pi(a \\mid s)Q^\\pi(s, a) \\\\\n\\end{aligned}\n$$\n第二个等式是由 Vπ 推出 Qπ\n的路径，其涉及到了后续状态，从而实际上描述出了价值函数之间的递推关系。\n我们考虑其证明，首先我们显然有这个等式：\n$$\nr(s, a, s') = \\Eop_{\\tau \\sim \\pi}[r_1 \\mid s_0 = s, a_0 = a, s_1 = s']\n$$\n之后考虑对状态行为价值函数的单步展开：\n$$\n\\begin{aligned}\nQ^\\pi(s) &amp;= \\Eop_{\\tau \\sim \\pi}[G(\\tau) \\mid s_0 = s, a_0 = a] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi}\\left[\\sum_{k = 0}^{+\\infty} \\gamma^k r_{k +\n1} \\middle| s_0 = s, a_0 = a\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi}\\left[r_1 + \\sum_{k = 1}^{+\\infty} \\gamma^k\nr_{k + 1} \\middle| s_0 = s, a_0 = a\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi}\\left[r_1 + \\gamma\\sum_{k = 0}^{+\\infty}\n\\gamma^k r_{k + 2} \\middle| s_0 = s, a_0 = a\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi}[r_1 \\mid s_0 = s, a_0 = a] + \\Eop_{\\tau \\sim\n\\pi}\\left[\\gamma\\sum_{k = 0}^{+\\infty} \\gamma^k r_{k + 2} \\middle| s_0 =\ns, a_0 = a\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi}[r_1 \\mid s_0 = s, a_0 = a] +\n\\gamma\\Eop_{\\tau \\sim \\pi}[G_1(\\tau) \\mid s_0 = s, a_0 = a] \\\\\n\\end{aligned}\n$$\n之后我们使用全期望公式处理条件期望中的条件：\n$$\n\\begin{aligned}\n\\Eop_{\\tau \\sim \\pi}[r_1 \\mid s_0 = s, a_0 = a] &amp;= \\sum_{s' \\in \\S}\n\\Pe(s' \\mid s, a) \\Eop_{\\tau \\sim \\pi}[r_1 \\mid s_0 = s, a_0 = a, s_1 =\ns'] \\\\\n&amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a)r(s, a, s') \\\\\n\\Eop_{\\tau \\sim \\pi}[G_1(\\tau) \\mid s_0 = s, a_0 = a] &amp;= \\sum_{s'\n\\in \\S} \\Pe(s' \\mid s, a) \\Eop_{\\tau \\sim \\pi}[G_1(\\tau) \\mid s_0 = s,\na_0 = a, s_1 = s'] \\\\\n&amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a) \\Eop_{\\tau \\sim \\pi}[G_1(\\tau)\n\\mid s_1 = s'] \\\\\n&amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a)V^\\pi(s') \\\\\n\\end{aligned}\n$$\n这里注意到处理第二个条件期望的时候，直接删去了 s0 = s 和 a0 = a\n两个条件，这是因为 G1(τ) 与 s0, a0\n无关，可以直接删去而不影响最后的期望。\n将此代入原有展开式即可证明完毕。\n事实上，基于这两个价值函数的互相推出，我们可以得到 Qπ 推出 Qπ 的公式：\n$$\n{\\color{red} Q^\\pi(s, a)} = \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a)\n\\left[r(s, a, s') + \\gamma\\sum_{a' \\in \\A} \\pi(a' \\mid s'){\\color{red}\nQ^\\pi(s', a')}\\right]\n$$\n以及 Vπ\n推出 Vπ\n的公式：\n$$\n{\\color{red} V^\\pi(s)} = \\sum_{a \\in \\A} \\pi(a \\mid s) \\sum_{s' \\in \\S}\n\\Pe(s' \\mid s, a)[r(s, a, s') + \\gamma {\\color{red} V^\\pi(s')}]\n$$\n这两个公式直接表现出了价值函数自身具有的迭代结构，也就是当前强化学习中最为重要的方程之一，目前大部分强化学习方法的核心就是拟合该方程。该方程即\nBellman 方程（Bellman Equation）。\n基本优化理论\n现在我们讨论如何获取一个最有价值的策略。\n首先，我们定义最优状态行为价值函数和最优状态价值函数：\n$$\n\\begin{aligned}\nQ^\\star(s, a) &amp;:= \\max_\\pi Q^\\pi(s, a) \\\\\nV^\\star(s) &amp;:= \\max_\\pi V^\\pi(s) \\\\\n\\end{aligned}\n$$\n基于最优性，我们可以定义策略之间的序。我们称策略 π 优于 π′，记作 π ≥ π′，当且仅当对于所有\n$s \\in \\S$ 都满足 π 的状态函数优于 π′，即 Vπ(s) ≥ Vπ′(s)。\n我们有下述基本优化理论：\nTheorem 1.02 对于任何 MDP，都存在一个最优策略 π⋆ 满足对于任何 π 都有 π⋆ ≥ π。并且该最优策略\nπ⋆\n在在任何状态与任何决策下均实现了最优价值，即对于任何 $s \\in \\S, a \\in \\A$ 都有 Vπ⋆(s) = V⋆(s), Qπ⋆(s,a) = Q⋆(s,a)。\n\n本文不加证明地认为该理论成立。另外，这里给出最优策略的构造。可见最优策略是确定性策略：\n$$\n\\pi^\\star(a \\mid s) := \\begin{cases}\n1 &amp; a = \\argmax_{a \\in \\A} Q^\\star(s, a) \\\\\n0 &amp; \\text{otherwise}\n\\end{cases}\n$$\n基于该定理我们能够得到两个最优价值函数之间存在的关系：\nTheorem 1.03 对于任何\nMDP，其最优状态价值函数与最优状态行为价值函数满足：\n$$\n\\begin{aligned}\n{\\color{red} V^\\star(s)} &amp;= \\max_{a \\in \\A} {\\color{red} Q^\\star(s,\na)} \\\\\n{\\color{red} Q^\\star(s, a)} &amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s,\na)[r(s, a, s') + \\gamma {\\color{red} V^\\star(s')}] \\\\\n\\end{aligned}\n$$\n\n第一个等式是简单的：\n$$\nV^\\star(s) = V^{\\pi^\\star}(s) = \\sum_{a \\in \\A} \\pi^\\star(a \\mid\ns)Q^{\\pi^\\star}(s, a) = \\max_{a \\in \\A} Q^{\\pi^\\star}(s, a) = \\max_{a\n\\in \\A} Q^\\star(s, a)\n$$\n第二个等式直接对 π⋆ 应用一般的 Bellman\n方程即可得到。\n从而还有下述最优 Bellman 方程（Bellman Optimality\nEquation）：\n$$\n{\\color{red} Q^\\star(s, a)} = \\sum_{s' \\in \\S} \\Pe(s' \\mid s, a)\n\\left[r(s, a, s') + \\gamma\\max_{a' \\in \\A} {\\color{red} Q^\\star(s',\na')}\\right]\n$$\n以及：\n$$\n{\\color{red} V^\\star(s)} = \\max_{a \\in \\A} \\left[\\sum_{s' \\in \\S} \\Pe(s'\n\\mid s, a)[r(s, a, s') + \\gamma {\\color{red} V^\\star(s')}]\\right]\n$$\n理论上我们可以求解最优 Bellman 方程得到 V⋆，从而就能够反推出\nπ⋆。然而求解最优\nBellman 方程是计算困难的，现行的强化学习方法就是在尝试近似求解最优\nBellman 方程。\n基于完全环境知识的 RL 方法\n如果我们能够完全掌握环境，即完全掌握转移概率 $\\Pe$ 和收益函数 r，那么我们可以使用动态规划（Dynamic\nProgramming, DP）来求解最优策略。DP\n方法有两种类别，分别是策略迭代（Policy Iteration,\nPI）和值迭代（Value Iteration, VI）。\nPolicy Iteration (PI)\n如果我们已经对环境有了完整的建模，我们完全可以使用迭代的方式求解最优\nBellman 方程。\n具体的迭代过程分为两步，分别为策略评估（Policy\nEvaluation）和策略提升（Policy\nImprovement），这两步会交替进行。具体而言，策略评估是在已知\nπ 的条件下计算其状态价值函数\nVπ。而策略提升为在得知状态价值函数的基础上优化策略\nπ。\n首先阐述策略评估的过程，这里举出一个迭代计算的方式。\n我们记 Vk 是第 k\n轮迭代的时候的状态价值函数，那么我们在初始化 V0\n之后不断进行下述迭代直到状态价值函数收敛：\n$$\nV_{k + 1}(s) \\leftarrow \\sum_{a \\in \\A} \\pi(a \\mid s) \\sum_{s' \\in \\S}\n\\Pe(s' \\mid s, a)[r(s, a, s') + \\gamma V_k(s')]\n$$\n收敛后，应当有 V+∞ = Vπ，此时我们就得到了策略\nπ 所对应的价值函数。\n策略评估除了使用迭代的方式计算，也可以使用求解线性方程组等方式计算，这些方法我们不具体展开。\n之后阐述策略提升的方法。\n我们在得知了策略 π\n的状态价值函数 Vπ\n之后，我们可以贪心地构造一个确定性策略 π′，保证策略更优。保证这一点能够成立的是下述定理：\nTheorem 2.01 (Policy Improvement Theorem)\n对于已知的策略 π，定义确定性策略 π′：\n$$\n\\pi'(a \\mid s) := \\begin{cases}\n1 &amp; a = \\argmax_{a \\in \\A} Q^\\pi(s, a) \\\\\n0 &amp; \\text{otherwise}\n\\end{cases}\n$$\n那么 π′ ≥ π，并且等号成立当且仅当\nπ = π′ = π⋆。\n\n证明是简单的，首先我们可以注意到：\n$$\nQ^\\pi(s, \\pi'(s)) = \\max_{a \\in \\A} Q^\\pi(s, a) \\geq \\sum_{a \\in \\A}\n\\pi(a \\mid s)Q^\\pi(s, a) = V^\\pi(s)\n$$\n我们从而能得到下述不等式。这里事实上进行了单步展开，进一步就可以尝试利用迭代结构构造不等式链，具体细节则在后续证明中说明：\n$$\n\\begin{aligned}\nV^\\pi(s) &amp;\\leq Q^\\pi(s, \\pi'(s)) \\\\\n&amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))[r(s, \\pi'(s), s') +\n\\gamma V^\\pi(s')] \\\\\n&amp;= \\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))r(s, \\pi'(s), s') +\n\\gamma\\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s)) V^\\pi(s') \\\\\n\\end{aligned}\n$$\n另外，我们可以证明：\n$$\n\\begin{aligned}\n&amp;\\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))r(s, \\pi'(s), s') \\\\\n=&amp; \\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))\\Eop_{\\tau \\sim \\pi'}[r_1\n\\mid s_0 = s, a_0 = \\pi'(s), s_1 = s'] \\\\\n=&amp; \\sum_{a \\in \\A} \\pi'(a \\mid s)\\sum_{s' \\in \\S} \\Pe(s' \\mid s,\na)\\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s, a_0 = a, s_1 = s'] \\\\\n=&amp; \\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s]\n\\end{aligned}\n$$\n即得到：\n$$\nV^\\pi(s) \\leq \\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s] + \\gamma\\sum_{s'\n\\in \\S} \\Pe(s' \\mid s, \\pi'(s)) V^\\pi(s')\n$$\n对这个不等式迭代展开：\n$$\n\\begin{aligned}\nV^\\pi(s) &amp;\\leq \\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s] +\n\\gamma\\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s)) V^\\pi(s') \\\\\n&amp;\\leq \\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s] + \\gamma\\sum_{s' \\in\n\\S} \\Pe(s' \\mid s, \\pi'(s)) \\left[\\Eop_{\\tau \\sim \\pi'}[r_2 \\mid s_1 =\ns'] + \\gamma\\sum_{s'' \\in \\S} \\Pe(s'' \\mid s', \\pi'(s'))\nV^\\pi(s'')\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi'}[r_1 \\mid s_0 = s] + \\gamma{\\color{red}\n\\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))\\Eop_{\\tau \\sim \\pi'}[r_2 \\mid\ns_1 = s']} + \\gamma^2\\sum_{s' \\in \\S}\\sum_{s'' \\in \\S}\\Pe(s'' \\mid s',\n\\pi'(s')) V^\\pi(s'') \\\\\n\\end{aligned}\n$$\n对于红色部分，我们容易发现 s0 = s 对于\nr2\n的期望是无效条件，所以：\n$$\n\\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))\\Eop_{\\tau \\sim \\pi'}[r_2 \\mid\ns_1 = s'] = \\sum_{s' \\in \\S} \\Pe(s' \\mid s, \\pi'(s))\\Eop_{\\tau \\sim\n\\pi'}[r_2 \\mid s_0 = s, s_1 = s'] = \\Eop_{\\tau \\sim \\pi'}[r_2 \\mid s_0 =\ns]\n$$\n所以：\n$$\nV^\\pi(s) \\leq \\Eop_{\\tau \\sim \\pi'}[{\\color{red} r_1 + \\gamma r_2} \\mid\ns_0 = s] + {\\color{green} \\gamma^2\\sum_{s' \\in \\S}\\sum_{s'' \\in\n\\S}\\Pe(s'' \\mid s', \\pi'(s')) V^\\pi(s'')}\n$$\n我们接下来展开绿色部分的时候，可以注意到我们需要为 r3 的条件期望补上 s0 = s 和 s1 = s′\n两个无效条件，然后两个求和号通过全期望公式消去 s1 = s′ 以及\ns2 = s″\n两个条件，故剩余的条件仅有 s0 = s，从而可以进一步合并到红色部分。以此类推，我们就能够说明该不等式的迭代展开是可行的，从而得到：\n$$\nV^\\pi(s) \\leq \\Eop_{\\tau \\sim \\pi'}[{\\color{red} r_1 + \\gamma r_2 +\n\\gamma^2r_3 + \\cdots} \\mid s_0 = s] = V^{\\pi'}(s)\n$$\n从而欲证明的不等式成立。\n而根据证明过程，该不等式取等当且仅当满足 $V^\\pi(s) = Q^\\pi(s, \\pi'(s)) = \\max_{a \\in\n\\A}Q^\\pi(s, a)$，而这正是最优 Bellman 方程。也就是说我们使得\nVπ = V⋆。此外，π\n目前也必须是一个确定性策略，从而也就保证了 π = π⋆。\n综合策略评估和策略提升，交替进行两者我们就可以保证能够获取到最优策略。然而这个方法并不现实，因为理论上我们需要对环境有完全把握，至少我们需要得到整个环境状态转移矩阵才能进行。\nValue Iteration (VI)\n同样，在已经完全得知环境的条件下，除了策略迭代，我们还可以用值迭代求解最优策略。相较于策略迭代是迭代策略本身，值迭代则是在迭代求解状态价值函数。\n考虑最优 Bellman 方程：\n$$\n{\\color{red} V^\\star(s)} = \\max_{a \\in \\A} \\left[\\sum_{s' \\in \\S} \\Pe(s'\n\\mid s, a)[r(s, a, s') + \\gamma {\\color{red} V^\\star(s')}]\\right]\n$$\n也就是说我们完全可以直接先随意初始化一个 V0 ≡ 0，然后不断使用上述方程做迭代直到收敛，此时\nV+∞ = V⋆。迭代的流程描述为：\n$$\n{\\color{red} V_{k + 1}(s)} \\leftarrow \\max_{a \\in \\A} \\left[\\sum_{s' \\in\n\\S} \\Pe(s' \\mid s, a)[r(s, a, s') + \\gamma {\\color{red} V_k(s')}]\\right]\n$$\n重复该迭代直到收敛，即可获得最优状态价值函数。基于最优状态价值函数，可以推知最优策略，从而算法求解完毕。\n这里需要说明的一点是，使用值迭代求解的时候，策略是比价值函数先收敛的。这一点是显然的，因为通过价值函数获取对应的策略是贪心的。从而，在价值函数还未实际完全收敛的时候，各个状态的价值大小关系很有可能已经确定且不变化，从而从这一时间点开始，推知的策略都不会发生变化，理论上都是最优策略。\n值迭代的时间复杂度为 $O(|\\S|^2|\\A|)$。\n有关 PI 和 VI 的一些对比\n事实上基于 Bellman 方程而言，VI\n方法是最直观也是最容易想到的，因为通过迭代法求解有递归结构的方程确实是一种很常见的方法。然而\nVI\n的两个特点也是限制其运用的缺陷，即策略早于价值函数收敛和复杂度较高。\n前者事实上是 VI\n的一个致命缺陷，因为从根本上而言我们需要获取的是最优策略，具体的价值函数可能并不关注，或者至少不是最主要目标。另外，高复杂度也让\nVI 的实际运算难度较高，而这也一定程度上催生了 PI 方法。\nVI 在运算过程中有一步涉及到了 $\\max_{a \\in\n\\A}$，这需要遍历行为空间却没有有效利用遍历的信息（仅取了最大值）。那么一个显然的性能换时间的操作就是我们取一个并非最优但足够优的策略\n$\\pi: \\S \\to \\A$，直接用 a := π(s) 代替掉\n$a := \\argmax_{a \\in\n\\A}$，这样复杂度直接就降低到 $O(|\\S|^2)$。\n为了保证 π\n能够足够优，那我们可以两路并进，一路优化 π，一路更新 Vπ，从而我们就得到了\nPI 方法。PI 方法在部分条件下会比 VI 方法收敛快很多，并且我们依然可以证明\nPI 理论可以得到最优策略。\n有关 Bellman 算子的拓展\n如果仔细观察 Bellman 方程，其事实上就是一个线性方程：\n$$\n{\\color{red} V^\\pi(s)} = \\sum_{a \\in \\A} \\pi(a \\mid s) \\sum_{s' \\in \\S}\n\\Pe(s' \\mid s, a)[r(s, a, s') + \\gamma {\\color{red} V^\\pi(s')}]\n$$\n首先作一些记号简化：\n$$\n\\begin{aligned}\n\\P^\\pi(s' \\mid s) &amp;:= \\sum_{a \\in \\A} \\pi(a \\mid s)\\Pe(s' \\mid s, a)\n\\\\\nr^\\pi(s) &amp;:= \\sum_{a \\in \\A} \\pi(a \\mid s) \\sum_{s' \\in \\S} \\Pe(s'\n\\mid s, a)r(s, a, s') \\\\\n\\end{aligned}\n$$\n得到：\n$$\n{\\color{red} V^\\pi(s)} = r^\\pi(s) + \\gamma\\sum_{s' \\in \\S} \\P^\\pi(s'\n\\mid s){\\color{red} V^\\pi(s')}\n$$\n如果记 $\\S = \\{s_1, s_2, \\cdots, s_n\\}, n =\n|\\S|$，并定义矩阵：\n$$\n\\begin{aligned}\n\\b{V}^\\pi &amp;:= (v^\\pi_i)^T_{n} \\in \\R^n &amp;&amp; v^\\pi_i :=\nV^\\pi(s_i) \\\\\n\\b{R}^\\pi &amp;:= (r^\\pi_i)^T_{n} \\in \\R^n &amp;&amp; r^\\pi_i :=\nr^\\pi(s_i) \\\\\n\\b{P}^\\pi &amp;:= (p^\\pi_{ij})_{n \\times n} \\in \\R^{n \\times n}\n&amp;&amp; p^\\pi_{ij} := \\P^\\pi(s_j \\mid s_i) \\\\\n\\end{aligned}\n$$\n那么 Bellman 方程等价于：\n$$\n\\b{V}^\\pi = \\b{R}^\\pi + \\gamma\\b{P}^\\pi\\b{V}^\\pi \\Rightarrow (I -\n\\gamma\\b{P}^\\pi)\\b{V}^\\pi = \\b{R}^\\pi\n$$\n这里就可以引入 Bellman 算子：\n$$\n\\mathcal{T}^\\pi(\\b{x}) := \\b{R}^\\pi + \\gamma\\b{P}^\\pi\\b{x}\n$$\n如果状态空间足够小，那么在 PI\n的策略评估阶段，事实上完全可以通过求解上述线性方程组解的方式得到策略的价值函数。\n除了 Bellman 算子，还可以从最优 Bellman 方程引入最优 Bellman\n算子。首先依然是定义矩阵：\n$$\n\\begin{aligned}\n\\b{V}^\\star &amp;:= (v^\\star_i)^T_{n} \\in \\R^n &amp;&amp; v^\\star_i :=\nV^\\star(s_i) \\\\\n\\b{R}(a) &amp;:= (r_i(a))^T_{n} \\in \\R^n &amp;&amp; r_i(a) := \\sum_{s_j\n\\in \\S} \\Pe(s_j \\mid s_i, a)r(s_i, a, s_j) \\\\\n\\b{P}(a) &amp;:= (p_{ij}(a))_{n \\times n} \\in \\R^{n \\times n} &amp;&amp;\np_{ij}(a) := \\Pe(s_j \\mid s_i, a) \\\\\n\\end{aligned}\n$$\n那么最优 Bellman 算子就定义为：\n$$\n\\mathcal{T}^\\star(\\b{x}) := \\max_{a \\in \\A}(\\b{R}(a) +\n\\gamma\\b{P}(a)\\b{x})\n$$\n现在我们需要证明一个我们并没有严格说明的引理，即使用迭代法求解价值函数的合法性，无论是\nPI 中策略评估还是 VI\n求最优价值函数本身。事实上，这两者本质相同，其都在求解 Bellman\n算子的不动点，只不过一个是一般 Bellman 算子，一个是最优 Bellman\n算子。这里以最优 Bellman 算子为例进行证明。\n证明的主要思想就是 Banach 空间不动点定理。\nTheorem 2.02 (Banach Fixed-point Theorem)\n给定完备度量空间 X 以及其范数\nd，假设 f : X → X\n是一个压缩映射，即存在 γ ∈ [0, 1) 令 ∀x1, x2 ∈ X\n都有：\nd(f(x1),f(x2)) ≤ γd(x1,x2)\n那么 f 在 X 上存在唯一不动点 x*。\n该不动点满足，任取 x0 ∈ X，定义序列\n{xn}n ≥ 0，其中\nxn + 1 = f(xn), n ≥ 0，那么该序列必然收敛到\nx*。\n\n证明是简单的。首先我们任取 x0 ∈ X，考虑对\nm &gt; n：\n$$\n\\begin{aligned}\nd(f^{(m)}(x_0), f^{(n)}(x_0)) &amp;\\leq d(f^{(m)}(x_0), f^{(m -\n1)}(x_0)) + d(f^{(m - 1)}(x_0), f^{(m - 2)}(x_0)) + \\cdots + d(f^{(n +\n1)}(x_0), f^{(n)}(x_0)) \\\\\n&amp;\\leq \\gamma^{m - 1}d(f(x_0), x_0) + \\gamma^{m - 2}d(f(x_0), x_0) +\n\\cdots + \\gamma^nd(f(x_0), x_0) \\\\\n&amp;\\leq \\dfrac{\\gamma^n}{1 - \\gamma}d(f(x_0), x_0) \\\\\n\\end{aligned}\n$$\n也就是无论给多紧的界，我总能令 n 充分大满足上界约束，从而该序列是\nCauchy 序列，在完备度量空间上其自然是收敛的。\n假定这个序列收敛到 x*，我们需要说明 x* 是 f\n的不动点以及其唯一性。其是不动点是容易的，考虑：\n0 ≤ d(xn + 1,f(x*)) = d(f(xn),f(x*)) ≤ γd(xn,x*)\n由于 n → ∞ 时 d(xn,x*) → 0，这说明\nd(xn + 1,f(x*)) → 0，也就说明\nf(x*)\n也是序列 {xn}n ≥ 0\n的极限，据极限的唯一性，不动点得证。\n唯一性则据反证。若存在第二个不动点 f(y) = y，那么：\nd(x*,y) = d(f(x*),f(y)) ≤ γd(x*,y) ⇒ (1−γ)d(x*,y) ≤ 0\n上述约束仅有 y = x*\n时成立，唯一性得证。\n\n基于该引理，我们只需要说明最优 Bellman\n算子也满足引理所述条件即可。在空间 $\\S$\n上取其 L∞\n范数（即各分量最大值）。我们证明最优 Bellman 算子是压缩的：\n$$\n\\begin{aligned}\n\\|\\mathcal{T}^\\star(\\b{V}_1) - \\mathcal{T}^\\star(\\b{V}_2)\\|_\\infty\n&amp;= \\left\\|\\max_{a \\in \\A}(\\b{R}(a) + \\gamma\\b{P}(a)\\b{V}_1) -\n\\max_{a \\in \\A}(\\b{R}(a) + \\gamma\\b{P}(a)\\b{V}_2)\\right\\|_\\infty \\\\\n&amp;\\leq \\left\\|\\max_{a \\in \\A}(\\b{R}(a) + \\gamma\\b{P}(a)\\b{V}_1 -\n\\b{R}(a) - \\gamma\\b{P}(a)\\b{V}_2)\\right\\|_\\infty \\\\\n&amp;= \\gamma\\left\\|\\max_{a \\in \\A}(\\b{P}(a)(\\b{V}_1 -\n\\b{V}_2))\\right\\|_\\infty \\\\\n&amp;\\leq \\gamma\\|\\b{V}_1 - \\b{V}_2\\|_\\infty\n\\end{aligned}\n$$\n最后一个不等号源于 $\\b{P}(a)$\n矩阵中，每一行的元素之和必然为 1。如果假设 $\\b{V}_1 - \\b{V}_2$ 各元素中最大为 p（亦其 L∞ 范数），那么 $\\b{P}(a)(\\b{V}_1 - \\b{V}_2)$\n每一个元素都不会大于 p。\n从而得证。\n事实上我们有下述定理，描述了迭代法求解的正确性。对于任意初始化的\n$\\b{V}_0$：\n$$\n\\lim_{n \\to \\infty} \\mathcal{T}^{\\pi(n)}\\b{V}_0 = \\b{V}^\\pi, \\lim_{n \\to\n\\infty} \\mathcal{T}^{\\star(n)}\\b{V}_0 = \\b{V}^\\star\n$$\n基于环境交互的 RL 方法\n如果我们无法掌握环境的信息，我们就需要令智能体与环境交互以收集信息。而这也是当前绝大多数\nRL 问题需要采用的方法，因为我们完全能掌握的环境几乎不存在。\n这里简单提一下无模型（Model-free）与基于模型（Model-based）的概念。在智能体和环境交互的过程中，事实上我们有两种选择，其一是让智能体去和真实的环境作交互，这就是无模型方法。其二是我们事先使用另外一个模型去拟合环境，让智能体和这个模型交互，这就是基于模型方法。基于模型方法的优势在于，如果智能体和真实的环境交互成本高昂或者环境响应较慢，则可以用于大幅降低实验成本。但相应地，基于模型方法也需要一个相当优越的和环境契合的模型才能让智能体真正学习到最优策略。\n基于环境交互的 RL\n方法的流程事实上近似于策略迭代，也被称为广义策略迭代（General\nPolicy Iteration, GPI）。GPI\n的流程是首先初始化一个价值函数和策略 V, π，并不断重复下述两个操作：\n\n（策略评估）更新价值函数使得其符合当前的策略，即 V = Vπ\n（策略改进）根据当前价值函数贪心地更新策略，即 $\\pi = {\\rm greedy}(V)$\n\n当然，这里是以状态价值函数 V 作为比方，事实上状态行为价值函数\nQ 也可以应用到上述流程中。\n具体讲解之前，首先引入同轨（On-policy）和异轨（Off-policy）的概念。这类\nRL\n方法中智能体所执行的策略一般有两种用途，其一是用于与环境交互收集转移轨迹，这个策略称为采样策略（Sample\nPolicy）或者行为策略（Behavioral\nPolicy），其二是用于在环境中获取收益，这个策略称为目标策略（Target\nPolicy）。如果一个智能体的行为策略和目标策略是不一致的，那这个方法就是异轨的，相对应地，行为策略和目标策略一致的时候这个方法是同轨的。\n如果采用同轨方法，那么策略评估、策略改进的流程就是简单的，也就是按照描述迭代即可。然而如果采用异轨方法，通用的方法是：\n\n策略评估时应当估算目标策略的价值函数\n策略改进时应当贪心地生成行为策略\n\n策略评估\nMonte-Carlo (MC)\nMC\n方法计算目标策略的价值函数的方法非常简单，即使用行为策略直接采样一整条轨迹，利用这一条轨迹上的信息更新价值函数。更新方式也相对简单，直接使用算术平均值或者利用学习率更新即可。设定固定的学习率\nα，若行为策略采样得到的轨迹为\nτ，对该轨迹上任何一个状态\nst，MC\n方法的更新公式为：\nV(st) ← V(st) + α(Gt(τ)−V(st))\n理论而言，MC 方法相当简易且不涉及到 bootstrap。这里 bootstrap\n指的是一类“利用估计值本身更新估计值”的更新策略，在后续 TD\n方法中展开说明。另一方面，MC 方法也因为低效和并没有充分利用 Bellman\n方程而具有缺陷。\nGPI 中使用 MC 方法做策略评估的算法一般称为\n蒙特卡洛控制算法。\n\nTemporal-Difference (TD)\nTD 方法与 MC\n方法目标是一致的，也是尽力取得价值函数的准确估计。但是两者的核心差别在于，TD\n方法是一个更新力度更小的 bootstrap 方法，TD\n方法会在每一次决策后进行更新。这种逐步更新的问题在于我们无法精确获取某一个状态的累计收益，所以我们需要虚化一个更新目标，这也就是所谓的\nTD target。\n假设我们在时刻 t 时位于状态\nst，我们通过决策行为\nat\n迁移到了状态 st + 1，并且获取收益\nrt + 1。另外，我们保存有一个所有状态的价值函数估计值表\n$V(s), s \\in \\S$。那么 TD target\n指的是：\n$$\n{\\rm TD\\ target} := r_{t + 1} + \\gamma V(s_{t + 1})\n$$\n可以注意到，TD target 本身是利用类似 Bellman\n方程中的步进展开方法，通过 V(st + 1)\n对 V(st)\n作出估计，并以此作为 V(st)\n更新的目标。这和 MC\n使用真实采样获取到真实的累计收益作为更新目标完全不同，这也就是 bootstrap\n的含义。\n在获取 TD target 后，就可以计算目标和当前估计值的差，即 TD\nerror：\n$$\n{\\rm TD\\ error} = \\delta_t := r_{t + 1} + \\gamma V(s_{t + 1}) - V(s_t)\n$$\n之后，设定一个适当的学习率 α，即可得到 TD\n方法的核心更新策略，下述这种简单的更新策略也被称为 TD(0) 方法：\nV(st) ← V(st) + αδt = V(st) + α(rt + 1+γV(st + 1)−V(st))\n从理论上比较 TD 方法与 MC 方法。MC 方法使用的累计收益 Gt(τ)\n是对价值函数 Vπ(s)\n的无偏估计，而 TD 方法使用的 TD target\n则相应是有偏估计。然而就估计方差而言，TD\n方法由于仅仅涉及到一步决策，其方差显然较 MC 方法小。就初始值方面而言，MC\n方法对估计的初始值设置并不敏感，然而 TD 由于基于\nbootstrap，故对初始值设置极为敏感。\n如果简单总结上述方法，可以使用下述图：\n\n简而言之，MC 方法较 TD 方法而言有着更深的探索。而 DP 方法（尤其是\nVI）则是遍历所有可能的后继状态进行更新，从而具有更广泛的视角，也就拥有广度。与这三者均不同的则是搜索，其需要完整探索整个决策树，但这自然是相当浪费资源的。\nGPI 中使用 TD 方法做策略评估的算法一般称为 TD\n控制算法或者时序差分控制算法。\n\n多步 TD target 与 TD(λ)\nTD target 事实上可以设置为多步的。传统的 TD target\n是单步的，即仅仅考虑轨迹上的一步转移。考虑多步 TD\ntarget，不妨考虑三步，假定轨迹上有三步转移片段 st, at, rt + 1; st + 1, at + 1, rt + 2; st + 2, at + 2, rt + 3; st + 3，那么\nTD target 可以定义为：\n$$\n{\\rm TD\\ target} := r_{t + 1} + \\gamma r_{t + 2} + \\gamma^2 r_{t + 3} +\n\\gamma^3 V(s_{t + 3})\n$$\n这也可以称为三步 TD\ntarget。事实上，如果令考虑的步数趋向于无限，无穷步 TD target\n也就成为了事实的累计收益，TD 方法转化为 MC 方法。\n我们先前提到过，TD\n方法对估计值初始化敏感，但是其效率较高。另一方面，MC\n方法对初始值不敏感，但是效率较低。我们事实上可以使用一种方法将其两者结合，即基于介于\nTD 与 MC 方法之间的多步 TD target，利用一定的权重将其组合，作为新的 TD\ntarget，这就是 TD(λ)\n方法。\n将 n 步 TD target 记为\nGt(n)，那么\nTD(λ) 中的 TD target\n定义为：\n$$\nG^\\lambda_t := (1 - \\lambda)\\sum_{n = 1}^{+\\infty}\\lambda^{n -\n1}G_t^{(n)}\n$$\n传统的 TD 方法即 λ = 0 的\nTD(λ) 方法。\nBackward-view\nTD(λ) &amp; Eligibility\nTraces\n然而使用 λ ≠ 0 的 TD(λ)\n方法的时候显然存在一个问题，那就是由于 Gtλ\n的求和上限是  + ∞，这就代表我们需要让智能体在环境中一直采样到轨迹终止。这样的话事实上就违背了使用\nTD(λ)\n方法的初衷，我们希望在保持 TD\n方法的效率的基础上引入多步实际采样来做到更精准的估计，所以要求采样到轨迹终止是不能容忍的。\n一种简单的解决方式，那就是用 Backward-view TD(λ) 取代上面的 Forward-view TD(λ)。Forward-view 的含义是通过未来的\nst + 1, st + 2, ⋯\n来更新 V(st)\n的估计。而 Backward-view\n与之相反，其通过之前经历的状态和轨迹确定价值函数估计。\n一种直观的解释是，Backward-view\n就是反思先前的哪一个决策是导致到达当前状态的核心原因。\n我们定义效用函数（Eligibility）为 $E_t(s), s \\in \\S$，这里下标 t\n表示不同的时间的效用函数都是不同的。我们引入效用函数的目的是将其作为权重引入价值函数更新流程中，表示\nTD error 以多大程度影响价值函数估计：\nV(st) ← V(st) + αδtEt(st) = V(st) + αEt(st)(rt + 1+γV(st + 1)−V(st))\n然后，定义效用函数的初始化和更新原则：\n$$\n\\begin{aligned}\n&amp;E_0(s) = 0, \\forall s \\in \\S \\\\\n&amp;E_t(s) = \\gamma\\lambda E_{t - 1}(s) + \\b{1}(s_t = s), \\forall t \\in\n\\mathbb{N}^+, s \\in \\S \\\\\n\\end{aligned}\n$$\n现在简单从数学角度说明使用效用函数的 Backward-view TD(λ) 与 Forward-view TD(λ)\n方法等价。为了简化，这里假设轨迹中经历过的状态后续不在经过。假设我们在\nk 时刻到达了状态 sk，那么：\n$$\nE_t(s_k) = \\begin{cases}\n0 &amp; t &lt; k \\\\\n(\\gamma\\lambda)^{t - k} &amp; t \\geq k \\\\\n\\end{cases}\n$$\n那么使用效用函数时，我们在迭代终止时得到的状态 sk\n的价值函数估计为（价值函数上标 ${\\rm\nB}$ 表示后向视角）：\n$$\nV_{+\\infty}^{\\rm B}(s_k) = V_0(s_k) + \\sum_{t = 1}^{+\\infty}\n\\alpha\\delta_tE_t(s_k) = V_0(s_k) + \\alpha\\sum_{t = k}^{+\\infty}\n(\\gamma\\lambda)^{t - k}\\delta_t = V_0(s_k) + \\alpha\\sum_{t =\n0}^{+\\infty} (\\gamma\\lambda)^t\\delta_{t + k}\n$$\n考虑下述计算：\n$$\n\\begin{aligned}\nG_t^\\lambda - V_t(s_t) &amp;= -V_t(s_t) + (1 - \\lambda)\\sum_{n =\n1}^{+\\infty}\\lambda^{n - 1}G_t^{(n)} \\\\\n&amp;= -V_t(s_t) + (1 - \\lambda)\\sum_{n = 1}^{+\\infty}\\lambda^{n -\n1}\\left(\\gamma^nV_t(s_{t + n}) + \\sum_{i = 1}^n \\gamma^{i - 1}r_{t +\ni}\\right) \\\\\n&amp;= -V_t(s_t) + \\sum_{n = 1}^{+\\infty}\\lambda^{n -\n1}\\left(\\gamma^nV_t(s_{t + n}) + \\sum_{i = 1}^n \\gamma^{i - 1}r_{t +\ni}\\right) -  \\sum_{n = 1}^{+\\infty}\\lambda^n\\left(\\gamma^nV_t(s_{t + n})\n+ \\sum_{i = 1}^n \\gamma^{i - 1}r_{t + i}\\right) \\\\\n&amp;= -V_t(s_t) + \\sum_{n = 0}^{+\\infty}\\lambda^n\\left(\\gamma^{n +\n1}V_t(s_{t + n + 1}) + \\sum_{i = 1}^{n + 1} \\gamma^{i - 1}r_{t +\ni}\\right) -  \\sum_{n = 1}^{+\\infty}\\lambda^n\\left(\\gamma^nV_t(s_{t + n})\n+ \\sum_{i = 1}^n \\gamma^{i - 1}r_{t + i}\\right) \\\\\n&amp;= -V_t(s_t) + \\gamma V_t(s_{t + 1}) + r_{t + 1} + \\sum_{n =\n1}^{+\\infty} \\lambda^n\\left(\\gamma^{n + 1}V_t(s_{t + n + 1}) -\n\\gamma^nV_t(s_{t + n}) + \\gamma^nr_{t + n + 1}\\right) \\\\\n&amp;= \\sum_{n = 0}^{+\\infty} \\lambda^n\\left(\\gamma^{n + 1}V_t(s_{t + n\n+ 1}) - \\gamma^nV_t(s_{t + n}) + \\gamma^nr_{t + n + 1}\\right) \\\\\n&amp;= \\sum_{n = 0}^{+\\infty} \\gamma^n\\lambda^n\\left(\\gamma V_t(s_{t + n\n+ 1}) - V_t(s_{t + n}) + r_{t + n + 1}\\right) \\\\\n&amp;\\approx \\sum_{n = 0}^{+\\infty} \\gamma^n\\lambda^n\\left(\\gamma V_{t +\nn}(s_{t + n + 1}) - V_{t + n}(s_{t + n}) + r_{t + n + 1}\\right) \\\\\n&amp;= \\sum_{n = 0}^{+\\infty} (\\gamma\\lambda)^n\\delta_{t + n}\n\\end{aligned}\n$$\n这就说明通过效用函数，我们最终得到的状态 sk\n的价值函数估计为：\n$$\nV_{+\\infty}^{\\rm B}(s_k) = V_0(s_k) + \\alpha(G_k^\\lambda - V_k(s_k))\n$$\n而如果通过 Forward-view TD(λ)，由于后续不在经历 sk，那么 sk\n的价值函数只会在时刻 k\n发生一步更新，其余时刻并不更新。而在时刻 k，TD target 为 Gkλ，即可得到最终的价值函数估计（价值函数上标\n${\\rm F}$ 表示前向视角）：\n$$\nV_{+\\infty}^{\\rm F}(s_k) = V_0(s_k) + \\alpha(G_k^\\lambda - V_k(s_k))\n$$\n从而证明完毕。事实上，如果去掉状态不重复的假设，也只是把每次经过该状态时的状态函数值变化拆开，每一部分都可以通过上面的过程证明两个视角的等价性，从而求和后依然是等价的。\n这里简单说明 RL\n中在线（Online）和离线（Offline）的区别。在线指的是智能体通过策略收集环境信息和通过这些信息更新策略是同时的，而离线则指的是通过某个固定策略在环境中收集信息，然后离线通过这些数据更新策略。\n在线算法的特征在于价值函数估计在每个时间步都会发生更新。而离线算法由于已经事先采集若干条轨迹，所以更新的粒度是整条轨迹，即完整考虑一条轨迹，每次完整读取完一条轨迹后做一次价值函数估计更新。\n上述推理中使用了约等于，这仅限于在线场景，而对于离线场景，价值函数\nVt 中下标\nt\n即失效（不再每个时间步更新），此时约等于变为严格等于。这也就说明两个视角在离线条件下是严格等价，在在线条件下是大致等价。\n\n策略改进\n策略改进的方式实际上不拘一格，这和策略评估相对手段有限形成对比的原因是，策略评估严格要求价值函数收敛到当前策略（采用异轨方法时是当前目标策略）的真实价值函数，而策略改进仅仅是要求贪心地生成，并没有严格要求生成方式。\n常见的策略改进之一就是完全贪心策略（Greedy\nPolicy），最优 Bellman 方程 $V^\\star(s) = \\max_{a \\in \\A} Q^\\star(s, a)$\n保证了完全贪心策略依然可以收敛到最优策略：\n$$\n\\pi(a \\mid s) := \\begin{cases}\n1 &amp; a = \\argmax_{a' \\in \\A} Q(s, a') \\\\\n0 &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n然而这种方法并不一定在实际上优越，这是因为一个策略往往需要同时考虑下面两种相对立的优化目标：\n\n（Exploration）能够充分探索未知的状态和行为，增加对环境的认识\n（Exploitation）能够充分利用已经掌握的环境信息，获取尽可能高的累计收益\n\nExploration 会要求行为策略更加激进而 Exploitation\n会要求目标策略更加保守，如何平衡这两者以获取高收益也就是这一类 RL\n方法的核心。\n一种简单的方式是 ε\n贪心策略（ε Greedy\nPolicy），其表现为：\n$$\n\\pi(a \\mid s) := \\begin{cases}\n\\varepsilon / |\\A| + 1 - \\varepsilon &amp; a = \\argmax_{a' \\in \\A} Q(s,\na') \\\\\n\\varepsilon / |\\A| &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n当然，还会有类似 Boltzman\n探索之类的并不常见的策略改进：\n$$\n\\pi(a \\mid s) := \\frac{\\exp(Q(s, a) / T)}{\\sum_{a' \\in \\A} \\exp(Q(s, a')\n/ T)}\n$$\nDefinition 3.01 (GLIE) 假设第 k 时刻策略改进得到策略 πk，状态行为价值函数\nQk，记经过\nk 时长后策略在状态 s 处做出决策 a 的次数为 N(s,a)。我们称该策略改进是\nGreedy in the Limit with Infinite Exploration\n(GLIE)，如果：\n\n充分长时间后所有状态决策对均探索无穷次\n\n$$\n\\lim_{k \\to +\\infty} N_k(s, a) = +\\infty, \\forall s \\in \\S, a \\in \\A\n$$\n\n策略最终收敛到贪心策略\n\n$$\n\\lim_{k \\to +\\infty} \\pi_k(a \\mid s) = \\b{1}\\left(a = \\argmax_{a' \\in\n\\A} Q_k(s, a')\\right), \\forall s \\in \\S, a \\in \\A\n$$\n\nBoltzman 探索是 GLIE，而 ε\n贪心策略则可能不是 GLIE。\n时序差分控制\n时序差分控制的一般流程如下所示：\n\n初始化目标策略 π\n以及价值函数 Qπ\n循环执行下述步骤直到收敛\n\n【策略改进】利用 Qπ\n生成行为策略并执行一次，采样得到一步状态转移\n【策略评估】根据行为策略得到的一步状态转移更新目标策略\nπ 的价值函数 Qπ\n\n\n同轨时序差分控制（SARSA）\n在同轨时序差分控制之中使用 ε 贪心策略即可得到 SARSA\n算法。若令时刻 t\n智能体位于状态 st，做出决策\nat\n转移到状态 st + 1\n并获得收益 rt + 1，如果其下一时刻做出决策\nat + 1，可以得到其策略评估阶段所采用的更新为：\nQ(st,at) ← Q(st,at) + α[rt + 1+γQ(st + 1,at + 1)−Q(st,at)]\n异轨时序差分控制（Q learning）\n在异轨时序差分控制中，令目标策略为完全贪心策略，行为策略为 ε 贪心策略即可得到 Q learning\n算法。若令时刻 t\n智能体位于状态 st，做出决策\nat\n转移到状态 st + 1\n并获得收益 rt + 1，可以得到其策略评估阶段所采用的更新为：\n$$\nQ(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha\\left[r_{t + 1} +\n\\gamma\\max_{a \\in \\A} Q(s_{t + 1}, a) - Q(s_t, a_t)\\right]\n$$\n蒙特卡洛控制\n蒙特卡洛控制的一般流程如下所示：\n\n初始化目标策略 π\n以及价值函数 Qπ\n循环执行下述步骤直到收敛\n\n【策略改进】利用 Qπ\n生成行为策略并执行至终止，采样得到一条完整轨迹\n【策略评估】根据行为策略得到的轨迹更新目标策略\nπ 的价值函数 Qπ\n\n\n同轨蒙特卡洛控制\n若在采样得到的轨迹 τ\n中，时刻 t 智能体位于状态\nst，做出决策\nat\n转移到状态 st + 1\n并获得收益 rt + 1，可以得到其策略评估阶段所采用的更新为：\nQ(st,at) ← Q(st,at) + α[Gt(τ)−Q(st,at)]\n异轨蒙特卡洛控制\n现在我们需要考虑异轨带来的一个重要问题，我们通过行为策略采样得到的数据直接更新目标策略的价值函数估计是否合理。在时序差分控制中我们并没有思考这一问题，仅仅是由于时序差分控制中，行为策略和目标策略的更新每步都在进行，两者可以认为相对接近，从而可以忽略这一问题，并不是说明时序差分控制中不存在这一问题。例如，Q\nlearning 的更新公式中：\n$$\nQ(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha\\left[r_{t + 1} +\n\\gamma{\\color{red} \\max_{a \\in \\A} Q(s_{t + 1}, a)} - Q(s_t, a_t)\\right]\n$$\n这里 st + 1\n是通过行为策略确定的，然而在更新的时候则直接使用其计算目标策略（完全贪心策略）价值函数的\nTD target。\n然而在蒙特卡洛控制中这一问题则较为明显，因为行为策略会直接采样得到一整条轨迹，其会导致目标策略价值函数的大批量更新。\n该问题可以形式化定义为，已知行为策略 b 与目标策略 π，以及使用行为策略 b 采样得到的轨迹 τ，我们应当如何拟合计算目标策略的价值函数\nQπ。\n此时一般会使用重要性采样方法。我们考虑随机变量 X 以及其概率密度函数 $f_X(x) := \\P(X = x)$，随机变量 X 的期望显然定义为：\n$$\n\\Eop_{x \\sim X}[x] := \\int_{\\mathbb R} xf_X(x) \\d x\n$$\n并且对于任何实数集上的函数 φ 都有：\n$$\n\\Eop_{x \\sim X}[\\varphi(x)] := \\int_{\\mathbb R} \\varphi(x)f_X(x) \\d x\n$$\n为了估算 $\\E[\\varphi(X)]$，我们可以使用采样并利用样本均值作为数学期望的估计值。例如我们采样获取了\nX 的 N 个值 x1, x2, ⋯, xN，那么：\n$$\n\\Eop_{x \\sim X}[\\varphi(x)] \\approx \\frac{1}{N}\\sum_{k = 1}^N\n\\varphi(x_k)\n$$\n然而如果分布 fX\n并不容易采样，那么这一条路线就有可能出现问题。此时，如果我们有一个容易采样的分布\nfY，则我们考虑：\n$$\n\\Eop_{x \\sim X}[\\varphi(x)] := \\int_{\\mathbb R} \\varphi(x)f_X(x) \\d x =\n\\int_{\\mathbb R} \\varphi(x)\\frac{f_X(x)}{f_Y(x)} f_Y(x) \\d x = \\Eop_{y\n\\sim Y}\\left[\\frac{f_X(y)}{f_Y(y)}\\varphi(y)\\right]\n$$\n这样，我们不需要直接采样 fX，仅需要得知\nfX\n的表达，即可通过采样 fY 得到样本\ny1, y2, ⋯, yM\n即可作出下述估算：\n$$\n\\Eop_{x \\sim X}[\\varphi(x)] = \\Eop_{y \\sim\nY}\\left[\\frac{f_X(y)}{f_Y(y)}\\varphi(y)\\right] \\approx\n\\frac{1}{M}\\sum_{k = 1}^M \\frac{f_X(y_k)}{f_Y(y_k)}\\varphi(y_k)\n$$\n回到原先的问题，我们首先得到：\n$$\n\\frac{\\P_\\pi(\\tau)}{\\P_b(\\tau)} = \\frac{\\prod_{(s, a, s') \\in \\tau}\n\\pi(a \\mid s)\\Pe(s' \\mid s, a)}{\\prod_{(s, a, s') \\in \\tau} b(a \\mid\ns)\\Pe(s' \\mid s, a)} = \\prod_{(s, a) \\in \\tau} \\frac{\\pi(a \\mid s)}{b(a\n\\mid s)}\n$$\n那么对于任意的 $s_{\\rm param} \\in\n\\mathcal{S}, a_{\\rm param} \\in \\mathcal{A}$，我们作下述计算：\n$$\n\\begin{aligned}\nQ^\\pi(s_{\\rm param}, a_{\\rm param}) &amp;= \\Eop_{\\tau \\sim \\pi}[G(\\tau)\n\\mid s_0 = s_{\\rm param}, a_0 = a_{\\rm param}] \\\\\n&amp;= \\Eop_{\\tau \\sim b}\\left[\\frac{\\P_\\pi(\\tau)}{\\P_b(\\tau)}G(\\tau)\n\\middle| s_0 = s_{\\rm param}, a_0 = a_{\\rm param}\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim b}\\left[G(\\tau)\\prod_{(s, a) \\in \\tau}\n\\frac{\\pi(a \\mid s)}{b(a \\mid s)} \\middle| s_0 = s_{\\rm param}, a_0 =\na_{\\rm param}\\right] \\\\\n\\end{aligned}\n$$\n那么，若在利用行为策略 b\n采样得到的轨迹 τ 中，时刻\nt 智能体位于状态 st，做出决策\nat\n转移到状态 st + 1\n并获得收益 rt + 1，可以得到其策略评估阶段所采用的更新为：\n$$\nQ(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha\\left[G_t(\\tau)\\prod_{k =\nt}^{+\\infty} \\frac{\\pi(a_k \\mid s_k)}{b(a_k \\mid s_k)} - Q(s_t,\na_t)\\right]\n$$\n我们也很容易发现若 π = b，则异轨蒙特卡洛控制退化为同轨蒙特卡洛控制。\n函数估计与深度学习\n我们可以注意到上述介绍的所有算法，如果直接运用的话可能面临一些困难，这是因为现实问题的状态空间和决策空间都是巨大的，我们很难如实记录每一次迭代时价值函数在每个状态、每个行为上的值，这会需要大量的存储空间。\n解决这一问题的最常用方案就是构造函数估计。例如，我们需要拟合一个难以直接计算的函数\nf，我们可以使用一系列较小的参数\n$\\b w$ 构造一个相对容易计算的函数 $f_{\\b w}$，尝试通过某种方式调整参数 $\\b w$ 以令 $f_{\\b\nw} \\approx f$。这样就可以使用 $f_{\\b\nw}$ 来代替 f 使用。\n函数估计的方式是多样的，可行的方式包括线性拟合、决策树、最近邻等。当然，目前最为普遍的方式是使用神经网络，而调整参数的方式一般是梯度下降算法。\n假设我们现在需要使用神经网络学习策略 π 的状态价值函数 Vπ，我们使用参数\n$\\b w$ 构建一个函数 $V_{\\b w}$。我们可以利用 MSE\n来构建一个简单的衡量拟合效果的损失函数：\n$$\n\\mathcal{J}(\\b w) := \\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|} \\sum_{s\n\\in \\tau} (V^\\pi(s) - V_{\\b w}(s))^2\\right]\n$$\n之后我们计算其梯度：\n$$\n\\begin{aligned}\n\\nabla_{\\b w}\\mathcal{J}(\\b w) &amp;= \\nabla_{\\b w}\\Eop_{\\tau \\sim \\pi}\n\\left[\\frac{1}{|\\tau|} \\sum_{s \\in \\tau} (V^\\pi(s) - V_{\\b\nw}(s))^2\\right] \\\\\n&amp;= \\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|} \\sum_{s \\in \\tau}\n\\nabla_{\\b w}(V^\\pi(s) - V_{\\b w}(s))^2\\right] \\\\\n&amp;= -2\\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|} \\sum_{s \\in \\tau}\n(V^\\pi(s) - V_{\\b w}(s))\\nabla_{\\b w}V_{\\b w}(s)\\right]\n\\end{aligned}\n$$\n设定学习率为  − 1/2 ⋅ α，即可得到参数 $\\b w$ 的更新方式：\n$$\n\\b w \\leftarrow \\b w - \\frac{1}{2}\\alpha\\nabla_{\\b w}\\mathcal{J}(\\b w) =\n\\b w + \\alpha\\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|} \\sum_{s \\in\n\\tau} ({\\color{red} V^\\pi(s)} - V_{\\b w}(s))\\nabla_{\\b w}V_{\\b\nw}(s)\\right]\n$$\n这里注意上述策略中标红项，显然这里我们需要得到真实值，或者可靠的真实值估计才能更新参数。而由于强化学习非监督学习，这里不存在标签，所以只能通过采样或者估计的方式处理这一项。\n如果采用 MC 方法，这一项就可以使用轨迹累计收益：\n$$\n\\b w \\leftarrow \\b w + \\alpha\\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|}\n\\sum_{s \\in \\tau} ({\\color{red} G_t(\\tau)} - V_{\\b w}(s))\\nabla_{\\b\nw}V_{\\b w}(s)\\right]\n$$\n如果采用 TD 方法，这一项就可以使用 bootstrap 的 TD target：\n$$\n\\b w \\leftarrow \\b w + \\alpha\\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|}\n\\sum_{(s, r, s') \\in \\tau} ({\\color{red} r + \\gamma V_{\\b w}(s')} -\nV_{\\b w}(s))\\nabla_{\\b w}V_{\\b w}(s)\\right]\n$$\n当然如果使用 TD(λ)，这一项就是相应的 TD target。\n目前基于通过神经网络实现的函数估计，我们可以将 Q learning\n转换为深度学习算法 DQN。\nDeep Q Network (DQN)\n使用神经网络后，Q learning\n的基本算法框架不变，依然与上一节中所示一致，仅需要将价值函数 Qπ\n替换为一个神经网络 $f_{\\b w}: \\mathcal{S} \\to\n\\mathbb{R}^{|\\mathcal{A}|}$。该神经网络结构的语义为，其接受当前的状态\ns ∈ 𝒮，输出这个状态下所有可能的行为带来的价值函数估计，即\n$f_{\\b w}(s) = [Q_{\\b w}(s, a_1), Q_{\\b w}(s,\na_2), \\cdots, Q_{\\b w}(s, a_{|\\mathcal{A}|})]$。\n此外，基于上述神经网络设计，策略改进过程中利用价值函数生成行为策略的方式在代码上是显然的，只需要将神经网络输出的数组求最大值后直接应用\nε\n贪心方式即可，所以不需要另开辟内存存储策略本身。\n而策略评估过程则为上一部分所介绍的梯度下降算法：\n$$\n\\b w \\leftarrow \\b w + \\alpha\\Eop_{\\tau \\sim \\pi} \\left[\\frac{1}{|\\tau|}\n\\sum_{(s, a) \\in \\tau} ({\\color{red} Q^\\pi(s, a)} - Q_{\\b w}(s,\na))\\nabla_{\\b w}Q_{\\b w}(s, a)\\right]\n$$\n故基本的 DQN 算法流程为：\n\n初始化估计价值函数的神经网络 $f_{\\b\nw}$\n循环执行下述步骤直到收敛\n\n【策略改进】求取 $a_{\\rm max} = \\argmax\nf_{\\b w}(s)$ 并利用 ε\n贪心方式生成行为策略决策执行\n【策略评估】利用梯度更新神经网络参数\n\n\n至于如何求解梯度，我们\n","categories":["【学习笔记】计算机"]},{"title":"2022 年 2 月论文笔记","url":"/2022/01/18/paper-2022-02/","content":"2022 年 2 月，主要工作为可微渲染相关方向。\n\nSoft\nRasterizer - A Differentiable Renderer for Image-based 3D Reasoning\n工作概述\n主要思想还是想把逆向渲染管线（通过二维图像推理三维模型的参数）和神经网络结合，但是最大的问题是管线中的光栅化是离散化操作，可能导致不可微。一些其他的工作在尝试近似估算梯度，但是这个工作提出了一种真正可微的框架，能做到：\n\n直接用可微函数渲染染色的网格\n能从轮廓、阴影等各种二维图像信息有效反向传递为网格顶点参数\n\n这个工作的重点是把渲染过程的部分看作聚合函数（Aggregation\nfunction），该函数联系了三维模型的网格三角形的概率分布以及其渲染出来的像素。\n看起来标题中的 Soft\n的含义就是使用概率分布的方式来把离散的光栅化变成可微的，最初始的光栅化一般会涉及到离散采样（即确定每一个离散的像素是否要显示网格上的某一个三角形），这也是不可微性的来源。\n\n本论文主要讲述了如何通过 Soft rasterization\n框架实现可微的光栅化以保证渲染管线的可微性，基于此，该渲染框架即可方便地接入神经网络以将二维图像信息反向传播到三维模型。同时，本论文也会指出近期的近似估算梯度的方式（使用\nhand-crafted\n的函数近似表示梯度）并不具有泛用性，且可能会降低三维模型信息更新的效率。\nSoftRas 与传统光栅化\nSoftRas\n在将模型投影到平面上的时候，会将模型转换为投影平面上的概率分布。而传统光栅化则是转化为具体某个像素是否染色。\n另外，似乎 SoftRas 对遮挡的处理也和传统渲染管线的 z-buffer\n不一样。传统光栅化会使用 onehot\n的方式处理遮挡（应该指的是处理为完全遮挡），而 SoftRas\n也会基于概率分布做出不同处理。\n相关工作\n可微渲染\n主要关注如何描述二维图像变化和三维模型操作的关系，主要解决如何从二维图像重建三维场景。考虑给定的二维图片\nA，首先粗略初始化一个三维场景\nB′，然后通过渲染管线渲染得到二维图片\nB。计算 A 和 B 的\nloss，将其梯度反向传播给三维场景 B′\n的参数，更新之。这里反向传播就是可微渲染最重要的步骤，即如何计算梯度，因为三维场景参数更新量取决于\nloss 对参数的偏导数。\n先前提到，这里获取梯度有困难。有些工作使用估计梯度的方式进行，有些工作可以精确计算梯度但是不具有泛用性。\n基于图像的三维推理\n依然考虑从二维图像重建三维场景。传统方法往往要求获得从多个角度观察得到的二维图像，而由于数据集的扩大，基于学习的重建方法可以使用一张或少量二维图像来重建场景。部分工作会将重建三维场景拆分为首先重建\n2.5 维的表示（深度表等）。\n另外，姿态估计也是三位推理的一个重要的子任务。通过深度学习的方法，预测刚体姿态是较为简单的，而预测人体这类非刚体的姿态则较为困难。\nSoftRas 基本原理\n大约是这样的一个流程：\n\n这里外部因素包含相机参数 P 和环境光照 L，内部因素包括网格信息\nM\n以及各个顶点的信息（如颜色、材质）A。\n这里第一步要做的是获取三个中间信息，即网格法向量 N、视图空间（投影后的空间）各点坐标\nU 以及 View dependent\ndepths Z。这三个量只需要使用相机参数和网格信息即可得到。\n之后可以使用例如 Phong 模型等着色模型计算出颜色 C。\n进行到这一步，上述这些操作都是可微的。但是如果按照传统的渲染管线，下一步应该分别确定每一个网格三角形与每一个像素的对应（即光栅化），之后还要用\nz-buffer 处理遮挡，这两步都因为离散采样从而是不可微的。\nSoftRas 软化光栅化和 z-buffer 的方式是引入 probability maps {𝒟j} 和聚合函数 𝒜(⋅) 分别代替光栅化和 z-buffer。这里 𝒟j\n表示的是每一个像素在网格三角形 fj\n内部的概率在平面上的分布。而聚合函数 𝒜(⋅) 联系起了 probability maps\n以及深度信息，作为整个后续渲染流程的代表。\nprobability maps 计算\n考虑网格三角形在屏幕上的投影 fj\n和屏幕上的像素 pi，记在屏幕上\npi 到\nfj\n的边最近距离为 d(i,j)。显然，这个距离越小的像素点，出现在内部的概率越大。由于其可以反映三角形对屏幕的影响，并且其可微，所以可以用此作为\nprobability maps 的代表。随后通过添加控制常数、符号标记并归一化到 (0,1) 内之后，我们得到了 probability maps\n的公式：\n$$\n\\mathcal{D}_{i, j} = \\mathrm{sigmoid}\\left(\\delta_{i,\nj}\\cdot\\frac{d^2(i, j)}{\\sigma}\\right)\n$$\n这里 σ\n是一个正常数，一般默认为 1 × 10−4。而 δi, j\n标记了 pi\n是否在 fj\n之中。若在，则 δi, j = 1，否则\nδi, j =  − 1。\n下图展示了 d(i,j) 的定义以及\nσ 常数对概率分布的影响：\n\n显然看出 σ\n越大，概率分布就越模糊。\n另外一个显然的点是 σ → 0\n的时候概率分布中三角形外的点概率密度为 0，而三角形内的点为 1。此时 SoftRas 退化为一般的光栅化。\n聚合函数\n我们考虑最后一个阶段，这里我们需要根据深度信息、 probability maps\n以及颜色信息计算出最后的渲染结果。\n最后渲染结果中，像素 pi\n的渲染结果用聚合函数表示，定义为：\nIi = 𝒜S({Cj}) := ∑jwi, jCi, j + wi, bCb\n这里渲染结果定义为一系列颜色信息的加权求和，颜色构成的集合为 {Cj}，符号 Ci, j\n表示三角形 fj 在像素 pi 处的颜色。而\nCb\n表示背景颜色。\n权重 wi, j\n至少满足归一化条件：\nwi, b + ∑jwi, j = 1\n而权重的具体值取决于先前得到的 probability maps\n以及深度信息。我们将三角形 fj 中投影到\npi\n像素的点的逆深度记为 zi, j。概率分布沿用先前的符号。定义：\n$$\nw_{i, j} := \\frac{\\mathcal{D}_{i, j}\\exp(z_{i, j} / \\gamma)}{\\sum_k\n\\mathcal{D}_{i, k}\\exp(z_{i, k} / \\gamma) + \\exp(\\varepsilon / \\gamma)}\n$$\n依据归一化条件就有：\n$$\nw_{i, b} := \\frac{\\exp(\\varepsilon / \\gamma)}{\\sum_k \\mathcal{D}_{i,\nk}\\exp(z_{i, k} / \\gamma) + \\exp(\\varepsilon / \\gamma)}\n$$\n可以看出权重的计算公式其实是类似 Softmax 函数：\n$$\n{\\rm softmax}(z_1, z_2, \\cdots, z_n)_j = \\frac{e^{z_j}}{\\sum_i e^{z_i}}\n$$\n\n这里可以看出 ε\n是一个小正常数，其作用是将背景颜色纳入计算。γ 是一个调节清晰度的正常数，与计算\nprobability maps 的 σ\n类似，默认值一般是 1 × 10−4。\n可以看出，具有更大概率密度的，且离投影平面更近的（即具有更大逆深度的）三角形会获得更大的权重，这符合直觉。\n\n现在考虑退化。针对像素 pi，假设 zi, 1 &lt; zi, 2 &lt; ⋯ &lt; zi, N，考虑\nγ → 0。首先考察 j = N：\n$$\n\\begin{aligned}\nw_{i, N} &amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, N}\\exp(z_{i, N}\n/ \\gamma)}{\\sum_k \\mathcal{D}_{i, k}\\exp(z_{i, k} / \\gamma) +\n\\exp(\\varepsilon / \\gamma)} \\\\\n&amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, N}}{\\sum_k\n\\mathcal{D}_{i, k}\\exp((z_{i, k} - z_{i, N}) / \\gamma) +\n\\exp((\\varepsilon - z_{i, N}) / \\gamma)} \\\\\n&amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, N}}{\\sum_{k = 1}^{N - 1}\n\\mathcal{D}_{i, k}\\exp((z_{i, k} - z_{i, N}) / \\gamma) + \\mathcal{D}_{i,\nN} + \\exp((\\varepsilon - z_{i, N}) / \\gamma)} \\\\\n&amp;= 1\n\\end{aligned}\n$$\n最后一步注意到 zi, N\n大于任何 zi, k(k&lt;N)，故有这样的结果。而对于\nj &lt; N：\n$$\n\\begin{aligned}\nw_{i, j} &amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, j}\\exp(z_{i, j}\n/ \\gamma)}{\\sum_k \\mathcal{D}_{i, k}\\exp(z_{i, k} / \\gamma) +\n\\exp(\\varepsilon / \\gamma)} \\\\\n&amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, N}}{\\sum_k\n\\mathcal{D}_{i, k}\\exp((z_{i, k} - z_{i, j}) / \\gamma) +\n\\exp((\\varepsilon - z_{i, j}) / \\gamma)} \\\\\n&amp;= \\lim_{\\gamma\\to 0}\\frac{\\mathcal{D}_{i, N}}{\\left(\\sum_{k = 1}^{j\n- 1} + \\sum_{k = j + 1}^{N}\\right) \\mathcal{D}_{i, k}\\exp((z_{i, k} -\nz_{i, N}) / \\gamma) + \\mathcal{D}_{i, N} + \\exp((\\varepsilon - z_{i, N})\n/ \\gamma)} \\\\\n&amp;= 0\n\\end{aligned}\n$$\n这里要注意到分母上 $\\sum_{k = j +\n1}^{N}$ 的部分最终会趋向于正无穷，整体极限为 0。最后根据归一化条件也有 wi, b = 0。\n结合这样的推理，可以看出：\nIi = 𝒜S({Cj}) = Ci, N\n也就是说最后渲染的结果只考虑了最近的网格三角形，这也就是 z-buffer\n方法。\n\n似乎还有一个和轮廓相关的聚合函数：\nIi, S = 𝒜O({𝒟j}) := 1 − ∏j(1−𝒟i, j)\n这里没有出现颜色项，这是因为轮廓的颜色一般设定为常数。这里聚合函数形式上实际上就是计算出了像素\npi\n被至少一个三角形覆盖的概率。\n实验内容\nSingle-View Mesh\nReconstruction\n使用这样的结构：\n\n这里固定了渲染管线中的外部变量，即固定了相机位置和环境光照。每一个输入图片都会进入\ncolor generator 和 shape generator 生成三维模型参数 C 和 M。随后后续接入\nSoftRas，渲染得到带颜色的图像 IC 和轮廓 IS，最后和原先图像比较计算\nloss。\n最后定义的 loss\n分为三部分。在叙述定义之前，我们将原始图像的颜色和轮廓定义为 ÎC 以及 ÎS：\n\ncolor loss。定义为颜色之差的 1- 范数：\n\nℒC := ∥IC − ÎC∥1\n\nsilhouette loss。定义为，这里使用 ⊗\n表示逐元素求积，⊕ 表示逐元素求和：\n\n$$\n\\mathcal{L}_S := 1 - \\frac{\\|I_S \\otimes \\hat I_S\\|_1}{\\|I_S \\oplus \\hat\nI_S - I_S \\otimes \\hat I_S\\|_1}\n$$\n\ngeometry loss。作用是对 loss 进行 L1 正则化。\n\n最后定义的 loss 是这三部分的加权求和：\nℒ := ℒS + λℒC + μℒG\n这里论文主要提了一下 color generator 的结构：\n\n似乎是提出了一种新结构，让颜色重建变为一个多分类问题，进而降低了时间复杂度。但是论文的描述中有若干的暂且不太清楚的名词，暂且把原文贴在这里以后再来看：\nInstead of directly regressing the color value, our color generator\nformulates color reconstruction as a classification problem that learns\nto reuse the pixel colors in the input image for each sampling point.\nLet Nc\ndenote the number of sampling points on M and H, W be the height and\nwidth of the input image respectively. However, the computational cost\nof a naive color selection approach is prohibitive, i.e. O(HWNc).\nTo address this challenge, we propose a novel approach to colorize mesh\nusing a color palette, as shown in Figure 7. Specifically, after passing\ninput image to a neural network, the extracted features are fed into (1)\na sampling network that samples the representative colors for building\nthe palette; and (2) a selection network that combines colors from the\npalette for texturing the sampling points. The color prediction is\nobtained by multiplying the color selections with the learned color\npalette. Our approach reduces the computation complexity to O(Nd(HW+Nc)),\nwhere Np\nis the size of color palette. With a proper setting of Np, one can\nsignificantly reduce the computational cost while achieving sharp and\naccurate color recovery.\n\nImage-based Shape Fitting\n似乎依然是从图像重建模型，但是这个重建任务似乎和姿态预测有较为紧密的联系。\n传统方法面临的问题依然是梯度不精确的问题，这样就导致反向传播较为困难。另外，传统方法也面临这样的问题：\n\n遮挡问题。传统方法中，被遮挡的三角形无法调整参数，而 SoftRas\n允许被遮挡的三角形参与到运算中，所以这个问题可以解决。\n局部最小值问题。我们希望误差反向传播可以传播到较大范围，即希望一次三维模型参数调整不局限于较小的局部，否则可能会导致模型收敛到局部最小值而非更优的结果。而\nSoftRas\n使用的概率分布算法允许全局的像素参与到运算中，所以理论上误差可以传播到较大范围，这个问题可以解决。\n\n所以最后就直接使用这样的方式训练就行了：\n{ρ, θ, t} = argminρ, θ, t∥R(M(ρ,θ,t)) − It∥2\n这里 ρ, θ, t\n是三维模型的参数，分别是非刚体形变参数、姿态角度、转换参数（或许就是视图转换的参数），M(⋅) 将这些参数转换为网格，R(⋅) 是渲染函数，It\n则是目标图像。这个训练方式也就是机器学习的通式。\n实验结果\nSingle-View Mesh\nReconstruction\n实验结果看确实挺好的，下面展示的是不带颜色的网格重建：\n\n颜色似乎也重建得挺好：\n\n使用的评价方法是 3D IoU，即 3D Intersection over\nUnion。这是一种物体检测领域的评价函数。二维情况下的 IoU\n定义如下图所示。这里的矩形均指代物体的包围盒，分别为实际的包围盒和模型预测的包围盒：\n\nSoftRas 的平均 3D IoU 超出了 state-of-art 的 NMR 的 3D IoU 约 4.5\n点，从而说明在网格重建任务上 SoftRas 的表现超出了传统方法。\n另外似乎还有一项称为 Ablation Study 的后续实验，这里省略。\nImage-based Shape Fitting\n首先实验刚体结构预测，这里采用六面着不同色的正方体。给定渲染后图像，要求给出正方体应当旋转的角度。SoftRas\n和 NMR 的实验结果如下：\n\n可以发现 SoftRas 成功获得了最后的结果，而 NMR\n则收敛到了一个局部最小值无法得到正确结果。\n论文认为 NMR 失败的原因正是因为六个面的相互遮挡，这导致了 NMR\n无法越过局部最小值。\n另外其也做了大量实验，表明 SoftRas 预测的旋转角度误差严格优于\nNMR，在不优化的情况下，SoftRas 的角度误差平均比 NMR 低 10.60∘。\n这里似乎涉及到 ${\\rm SO}(3)$\n旋转群的一些东西，后面再来研究吧。\n\n非刚体结构预测则选用了人体结构预测，这里初始化时人的右手位于背后，而目标图像中右手已经移动到前面，实验目标是将手移出来。显然\nNMR 依然因为无法处理遮挡，最后没有能够完成任务。而 SoftRas 完成了：\n\n附录：梯度计算\n我们现在研究一下 SoftRas 渲染出来的图像 I 对网格参数 M\n的梯度，这个梯度也就是在反向传播的时候要计算的值。首先显然有：\n$$\n\\frac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{M}} =\n\\frac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{U}}\\frac{\\partial\\boldsymbol{U}}{\\partial\\boldsymbol{M}}\n+\n\\frac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{Z}}\\frac{\\partial\\boldsymbol{Z}}{\\partial\\boldsymbol{M}}\n+\n\\frac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{N}}\\frac{\\partial\\boldsymbol{N}}{\\partial\\boldsymbol{M}}\n$$\n这里显然可以看出 $\\dfrac{\\partial\\boldsymbol{U}}{\\partial\\boldsymbol{M}},\n\\dfrac{\\partial\\boldsymbol{Z}}{\\partial\\boldsymbol{M}},\n\\dfrac{\\partial\\boldsymbol{N}}{\\partial\\boldsymbol{M}}$\n是可以简单计算的，因为 U, Z, N\n都可以由 M\n通过简单的视图变换得到，由变换矩阵即可推算偏导数。\n而根据着色模型，$\\dfrac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{N}}$\n也是可以计算的。\n剩余的两个梯度中，$\\dfrac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{Z}}$\n直接和聚合函数相关，而 $\\dfrac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{U}}$\n经过了两层，分别是概率分布计算和聚合函数，所以我们需要拆解：\n$$\n\\dfrac{\\partial\\boldsymbol{I}}{\\partial\\boldsymbol{U}} =\n\\dfrac{\\partial\\boldsymbol{I}}{\\partial\\mathcal{D}}\\dfrac{\\partial\\mathcal{D}}{\\partial\\boldsymbol{U}}\n$$\n","categories":["【论文笔记】计算机"]},{"title":"原创数学题集","url":"/2022/07/12/orginal-problems/","content":"一些奇妙的数学想法而已，可能是初中、高中、大学题，反正是弄着玩的。\n\n\nProblem 1\n已知函数 f(x) = [x](x−[x]), x ≥ 0，这里\n[x] 表示不大于 x 的最大整数。\n另外定义函数迭代符号 f(n) 如下：\n$$\n\\begin{cases}\nf^{(1)}(x) = f(x) \\\\\nf^{(k + 1)}(x) = f(f^{(k)}(x)), k \\in \\mathbb{N}^*\n\\end{cases}\n$$\n证明：对于任何 x ≥ 0，都有：\nlimn → ∞f(n)(x) = 0\nSolution\n首先证明，x ≥ 1 时 f(x) ≤ x − 1。\n我们不妨记 {x} := x − [x]，显然有\n0 ≤ {x} &lt; 1。进一步，根据\nx ≥ 1 得知 [x] ≥ 1，那么显然：\n([x]−1)({x}−1) ≤ 0\n展开得到：\nf(x) = [x]{x} ≤ [x] + {x} − 1 = x − 1\n引理证明完毕，回到原题。\n此外，我们需要了解，若 x ∈ [0, 1)，则有 [x] = 0，即 f(x) = 0。\n那么我们考虑下述数列，我们即需要证明下述数列极限为零：\nx, f(x), f(2)(x), ⋯, f(n)(x), ⋯\n若 x ∈ [0, 1)，显然 f(x) = 0，且根据 f(0) = 0 得到 ∀n ∈ ℕ* 有 f(n)(x) = 0，上述数列极限显然为零。\n若 x ≥ 1，我们只需要证明必然存在 k ∈ ℕ* 使得 f(k)(x) &lt; 1\n即可，因为只要该结论成立，就说明 f(k+1)(x) = 0，从而之后的所有项均为零，结论成立。\n使用反证法，如果结论不成立，即 ∀k ∈ ℕ* 有 f(k)(x) ≥ 1。那么根据引理：\nf(k+1)(x) ≤ f(k)(x) − 1, k ∈ ℕ*\n所以：\nf([x])(x) ≤ f([x]−1)(x) − 1 ≤ ⋯ ≤ f(0)(x) − [x] = x − [x] ∈ [0, 1)\n和假设矛盾，故原结论成立。\n至此，结论证明完毕。\nProblem 2\n已知凸多边形 𝒜, ℬ 没有公共点，且\n𝒜 的任何一边不平行于 ℬ 的任何一边。\n已知点 A ∈ 𝒜, B ∈ ℬ。给出已知向量\nt，且已知 $\\vec{AB} \\parallel \\boldsymbol{t}$。\n证明：当 $\\vec{AB}$\n的长度最小的时候，点 A, B\n中必有一个为其所在凸多边形的顶点。\nSolution\n使用反证法。假设当 $\\|\\vec{AB}\\|_2$\n取到最小值的时候 A, B\n中至少有一点位于其所在多边形的内部（即不位于其所在多边形的边界），不妨令\nA 位于 𝒜 的内部。由于 𝒜 ∩ ℬ = ⌀ 与 B ∈ ℬ，可以得知 B 位于多边形 𝒜 的外部。那么线段 AB 显然与 𝒜 的边界 ∂𝒜\n有交点，不妨记为 A′。那么我们显然得到 $\\|\\vec{A'B}\\|_2 &lt;\n\\|\\vec{AB}\\|_2$，这与最小性假设矛盾，假设不成立。故当 $\\|\\vec{AB}\\|_2$ 取到最小值的时候 A, B\n均应当位于其所在多边形的边界上。\n继续使用反证法。假设当 $\\|\\vec{AB}\\|_2$ 取到最小值的时候 A, B\n均不位于其所在多边形的顶点。此时不妨假设 A 所在的 𝒜 的边为线段 a，B 所在的 ℬ 的边为线段 b。由 𝒜 的任何一条边不平行于 ℬ 的任何一条边知 a 不平行于 b，且据假设知 A 不位于 a 的顶点，B 不位于 b 的顶点。\n由于 a 不平行于 b，记 a 所在直线和 b 所在直线的交点为 C，令点 A′ 为线段 AC 上一点，过 A′ 作 A′B′ ∥ AB\n与 b 所在直线相交于 B′。显然无论 A′ 如何取，均能够满足 $\\|\\vec{A'B'}\\|_2 &lt; \\|\\vec{AB}\\|_2$。\n由于 A, B\n均不是其所在线段的顶点，那么存在一个 δA &gt; 0 满足\n$\\|\\vec{AA'}\\|_2 &lt; \\delta_A$ 时即有\nA′ ∈ a，即 A′ ∈ 𝒜。同理也存在类似的 δB &gt; 0 满足\n$\\|\\vec{BB'}\\|_2 &lt; \\delta_B$ 时即有\nB′ ∈ ℬ。\n考虑到 △CAB ∽ △CA′B′，我们有下述关系：\n$$\n\\frac{\\|\\vec{AA'}\\|_2}{\\|\\vec{BB'}\\|_2} =\n\\frac{\\|\\vec{CA}\\|_2}{\\|\\vec{CB}\\|_2} \\iff\\|\\vec{AA'}\\|_2 =\n\\frac{\\|\\vec{CA}\\|_2 \\cdot \\|\\vec{BB'}\\|_2}{\\|\\vec{CB}\\|_2}\n$$\n故我们只需要令：\n$$\n0 &lt; \\|\\vec{AA'}\\|_2 &lt; \\min\\left\\{\\delta_A, \\frac{\\|\\vec{CA}\\|_2\n\\cdot \\delta_B}{\\|\\vec{CB}\\|_2}\\right\\}\n$$\n即可保证 $\\|\\vec{AA'}\\|_2 &lt;\n\\delta_A$ 且 $\\|\\vec{BB'}\\|_2 &lt;\n\\delta_B$，这就保证了 A′ ∈ 𝒜, B′ ∈ ℬ，并且有\n$\\|\\vec{A'B'}\\|_2 &lt;\n\\|\\vec{AB}\\|_2$。这样就与最小性假设矛盾，假设不成立。故当 $\\|\\vec{AB}\\|_2$ 取到最小值的时候 A, B\n中至少有一个点为其所在多边形的顶点。\nProblem 3\n(Credit to PKU 零之审判)\n边长为 2 的正方形 ABCD\n内有四条长度为 1 的线段 l1, 2, 3, 4，这四条线段满足：\n\nli 与\nli + 1\n相交但其内部不相交（即交点为 li 或 li + 1\n的端点）\nl1, l3\n没有公共点且 l2, l4\n没有公共点\nli\n垂直于 li + 1\n\n上述陈述中 i ∈ {1, 2, 3, 4}，并且定义 l5 := l1。\n记 S = l1 ∪ l2 ∪ l3 ∪ l4，V 为正方形 ABCD\n四边中点构成的集合，定义：\nd := maxv ∈ V, s ∈ S|v−s|\n求 d 的最小值。\nSolution\n考虑如下图所示的 l1, 2, 3, 4：\n\n这里 l1, 2, 3, 4\n构成边长为 1 的正方形，该正方形与正方形\nABCD\n有共同中心且 l1 ∥ AD。不难看出若令\nM 为 CD 中点，N 为 l1, l2\n交点，则 $d = MN =\n\\dfrac{\\sqrt{10}}{2}$。\n下面我们证明 $d \\geq\n\\dfrac{\\sqrt{10}}{2}$。为了证明该结论，我们考虑下述圆 P：\n\n圆 P 以正方形 ABCD\n的中心 O 为圆心，半径为 $\\dfrac{\\sqrt{2}}{2}$。\n我们首先证明下述引理，即如果 l1, 2, 3, 4 上有点 X 在圆 P 外或者在圆 P 边界上，那么 $d \\geq \\dfrac{\\sqrt{10}}{2}$。\n我们考虑下述图形：\n\n这里的四个虚线圆为以正方形 ABCD\n各边中点为圆心，以 $\\dfrac{\\sqrt{10}}{2}$\n为半径所作的。注意到由于这四个圆的内部（不包含边界）的交集完全位于圆\nP 的内部，这说明 X\n必然在这四个虚线圆中的某个之外或者这四个虚线圆中的某个的边界上。也就是说必然存在某个\nM ∈ V 使得 $MX \\geq \\dfrac{\\sqrt{10}}{2}$，从而：\n$$\nd \\geq MX \\geq \\dfrac{\\sqrt{10}}{2}\n$$\n引理证明完毕，回到原题。\n根据引理我们得知，如果 l1, 2, 3, 4 上有点在圆\nP\n外，则欲证命题成立，所以现在只需要考虑 S ⊆ P。\n根据题设对四条线段的约束，我们可以得知这四条线段仅有下述两种可能：\n\n上述两种情况的旋转、镜面对称等视为同种情况。\n首先考虑左边的情况，这里记 A′D′ = B′C′ =  : a, A′B′ = C′D′ =  : b，我们有\n0 &lt; a, b ≤ 1。根据\nS ⊆ P\n此时必然有下述两条虚线段长度不大于 $\\sqrt{2}$：\n\n从而有下述约束：\n$$\n\\begin{cases}\na^2 + (2 - b)^2 \\leq 2 \\Rightarrow a^2 + b^2 - 4b + 2 \\leq 0 \\\\\nb^2 + (2 - a)^2 \\leq 2 \\Rightarrow a^2 + b^2 - 4a + 2 \\leq 0 \\\\\n\\end{cases}\n$$\n两式相加并整理得到：\n(a−1)2 + (b−1)2 ≤ 0\n可知 a = b = 1，此时 A′, B′, C′, D′\n构成边长为 1 的正方形。考虑到边长为\n1 的正方形的外接圆半径为 $\\dfrac{\\sqrt{2}}{2}$，所以为了 S ⊆ P，只能有该正方形内接于圆\nP。\n之后考虑右边的情况，根据 S ⊆ P\n此时必然有下述两条虚线段长度不大于 $\\sqrt{2}$。\n这里记 A′B′ = C′D′ =  : a, A′A″ =  : b, D′D″ =  : c，我们有\n0 &lt; a ≤ 1 以及 0 ≤ b, c ≤ 1 − a：\n\n从而有下述约束：\n$$\n\\begin{cases}\nD''C' + B'B'' \\leq 1 \\Rightarrow b - c + 1 \\leq 1 \\\\\nA''B' + C'C'' \\leq 1 \\Rightarrow c - b + 1 \\leq 1 \\\\\n\\end{cases}\n$$\n可知 b = c，此时\nA″, B″, C″, D″\n构成边长为 1 的正方形。考虑到边长为\n1 的正方形的外接圆半径为 $\\dfrac{\\sqrt{2}}{2}$，所以为了 S ⊆ P，只能有该正方形内接于圆\nP。\n综上所述，此时无论如何均存在四个 S 内的点构成内接于圆 P 的正方形，至少说明 S 中存在某一个点 X 在圆 P\n边界上。根据引理，原命题证明完毕。\n综上所述，d 的最小值为\n$\\dfrac{\\sqrt{10}}{2}$。\nProblem 4\n记 $\\theta_{n, k} := \\dfrac{(2k +\n1)\\pi}{2^n}$，证明：\n$$\n\\sum_{k = 0}^{2^n - 1} \\frac{1}{1 - \\cos\\theta_{n, k}} = 2^{2n - 1}\n$$\nSolution\n我们注意到下述恒等式：\n$$\n\\frac{4}{1 - \\cos 2\\theta} = \\frac{1}{1 - \\cos\\theta} + \\frac{1}{1 +\n\\cos\\theta}\n$$\n证明如下：\n$$\n\\frac{1}{1 - \\cos\\theta} + \\frac{1}{1 + \\cos\\theta} = \\frac{2}{1 -\n\\cos^2\\theta} = \\frac{4}{1 - (2\\cos^2\\theta - 1)} = \\frac{4}{1 - \\cos\n2\\theta}\n$$\n基于上述恒等式，我们令：\n$$\nS_n := \\sum_{k = 0}^{2^n - 1} \\frac{1}{1 - \\cos\\theta_{n, k}}\n$$\n我们即可得到：\n$$\nS_{n + 1} = \\sum_{k = 0}^{2^{n + 1} - 1} \\frac{1}{1 - \\cos\\theta_{n + 1,\nk}} = \\sum_{k = 0}^{2^n - 1} \\left(\\frac{1}{1 - \\cos\\theta_{n + 1, k}} +\n\\frac{1}{1 - \\cos\\theta_{n + 1, 2^n + k}}\\right) \\\\\n$$\n这里注意到：\n$$\n\\cos\\theta_{n + 1, 2^n + k} = \\cos\\dfrac{[2(2^n + k) + 1]\\pi}{2^{n + 1}}\n= \\cos\\left(1 + \\frac{2k + 1}{2^{n + 1}}\\right)\\pi = -\\cos\\theta_{n + 1,\nk}\n$$\n另外注意到：\n$$\n\\theta_{n, k} = \\dfrac{(2k + 1)\\pi}{2^n} = 2\\theta_{n + 1, k}\n$$\n那么：\n$$\n\\begin{aligned}\nS_{n + 1} &amp;= \\sum_{k = 0}^{2^n - 1} \\left(\\frac{1}{1 - \\cos\\theta_{n\n+ 1, k}} + \\frac{1}{1 - \\cos\\theta_{n + 1, 2^n + k}}\\right) \\\\\n&amp;= \\sum_{k = 0}^{2^n - 1} \\left(\\frac{1}{1 - \\cos\\theta_{n + 1, k}}\n+ \\frac{1}{1 + \\cos\\theta_{n + 1, k}}\\right) \\\\\n&amp;= \\sum_{k = 0}^{2^n - 1} \\frac{4}{1 - \\cos2\\theta_{n + 1, k}} \\\\\n&amp;= 4\\sum_{k = 0}^{2^n - 1} \\frac{1}{1 - \\cos\\theta_{n, k}} \\\\\n&amp;= 4S_n\n\\end{aligned}\n$$\n而显然有 S1 = 2，从而命题证明完毕。\nProblem 5\n已知正整数 n 与实数 x，证明：\n$$\n\\sum_{k = 0}^n C_n^k\\sin kx = 2^n\\cos^n\\frac{x}{2}\\sin\\frac{nx}{2}\n$$\nSolution\n考虑 $(\\cos x + \\i\\sin x + 1)^n \\in\n\\mathbb{C}$ 的虚部。\n一方面：\n$$\n\\begin{aligned}\n(\\cos x + \\i\\sin x + 1)^n &amp;= \\left[\\left(2\\cos^2\\frac{x}{2} -\n1\\right) + 2\\i\\sin\\frac{x}{2}\\cos\\frac{x}{2} + 1\\right]^n \\\\\n&amp;= 2^n\\cos^n\\frac{x}{2}\\left(\\cos\\frac{x}{2} +\n\\i\\sin\\frac{x}{2}\\right)^n \\\\\n&amp;= 2^n\\cos^n\\frac{x}{2}\\cos\\frac{nx}{2} +\n\\i2^n\\cos^n\\frac{x}{2}\\sin\\frac{nx}{2}\n\\end{aligned}\n$$\n可知该复数的虚部即为欲证等式的右侧。\n另一方面：\n$$\n\\begin{aligned}\n(\\cos x + \\i\\sin x + 1)^n &amp;= \\sum_{k = 0}^n C_n^k(\\cos x + \\i\\sin\nx)^k \\\\\n&amp;= \\sum_{k = 0}^n C_n^k(\\cos kx + \\i\\sin kx) \\\\\n&amp;= \\sum_{k = 0}^n C_n^k\\cos kx + \\i\\sum_{k = 0}^n C_n^k\\sin kx\n\\end{aligned}\n$$\n可知该复数的虚部即为欲证等式的左侧。\n综上所述，证明完毕。\nProblem 6\n已知数列 {an}n ≥ 0\n满足 a0 = 1, a1 = 0\n且 an + 2 = (n+1)(an + 1+an)。证明：\n$$\n\\sum_{k = 0}^n C_n^ka_k = n!\n$$\nSolution\n定义命题 An\n表示下述等式成立：\n$$\n\\sum_{k = 0}^{n + 1} C_{n + 1}^ka_k = (n + 1)\\sum_{k = 0}^n C_n^ka_k\n$$\n命题 Bn\n表示下述等式成立：\n$$\n\\sum_{k = 0}^n C_n^ka_{k + 1} = n\\sum_{k = 0}^n C_n^ka_k\n$$\n首先我们证明由 Bn 能推出 An。现在在 Bn\n成立的基础上，考虑下述计算：\n$$\n\\begin{aligned}\n&amp;(n + 1)\\sum_{k = 0}^n C_n^ka_k = n\\sum_{k = 0}^n C_n^ka_k + \\sum_{k\n= 0}^n C_n^ka_k = \\sum_{k = 0}^n C_n^ka_{k + 1} + \\sum_{k = 0}^n\nC_n^ka_k \\\\\n=&amp; C_n^na_{n + 1} + \\left(\\sum_{k = 1}^n C_n^{k - 1}a_k + \\sum_{k =\n1}^n C_n^ka_k\\right) + C_n^0a_0 = C_n^na_{n + 1} + \\sum_{k = 1}^n\n(C_n^{k - 1} + C_n^k)a_k + C_n^0a_0 \\\\\n=&amp; C_{n + 1}^{n + 1}a_{n + 1} + \\sum_{k = 1}^n C_{n + 1}^ka_k + C_{n\n+ 1}^0a_0 = \\sum_{k = 0}^{n + 1} C_{n + 1}^ka_k\n\\end{aligned}\n$$\n这就说明了在 Bn 成立的基础上\nAn\n成立，其中第二个等号的依据为 Bn 成立。\n之后我们证明 An, Bn\n能推出 Bn + 1。现在在\nAn, Bn\n均成立的基础上，考虑下述计算：\n$$\n\\begin{aligned}\n&amp;\\sum_{k = 0}^{n + 1} C_{n + 1}^ka_{k + 1} = C_{n + 1}^0a_1 +\n\\sum_{k = 1}^{n + 1} C_{n + 1}^ka_{k + 1} = \\sum_{k = 1}^{n + 1} \\frac{n\n+ 1}{k}C_{n}^{k - 1}a_{k + 1} \\\\\n=&amp; (n + 1)\\sum_{k = 0}^{n} \\frac{1}{k + 1}C_{n}^{k} \\cdot (k +\n1)(a_{k + 1} + a_k) = (n + 1)\\left(\\sum_{k = 0}^{n} C_{n}^{k}a_{k + 1} +\n\\sum_{k = 0}^{n} C_{n}^{k}a_k\\right) \\\\\n=&amp; (n + 1)\\left(n\\sum_{k = 0}^{n} C_{n}^{k}a_k + \\sum_{k = 0}^{n}\nC_{n}^{k}a_k\\right) = (n + 1)\\left[(n + 1)\\sum_{k = 0}^{n}\nC_{n}^{k}a_k\\right] = (n + 1)\\sum_{k = 0}^{n + 1} C_{n + 1}^ka_k\\\\\n\\end{aligned}\n$$\n这就说明了在 An, Bn\n成立的基础上 Bn + 1\n成立，其中倒数第二个等号的依据为 Bn\n成立，倒数第一个等号的依据为 An 成立。\n而我们显然可以计算出 a2 = 1，从而得知命题\nB1\n成立，进而据归纳法得到对任何的正整数 n，都有命题 An 成立。据命题\nAn\n成立即可得到本问题欲证命题成立。\nProblem 7\n已知正数数列 {xk}0 ≤ k ≤ n\n满足：\n$$\nx_0 = \\sum_{k = 1}^n x_k\n$$\n定义数列 {yk}1 ≤ k ≤ n\n为：\n$$\ny_k := \\sqrt{\\sum_{i = 0}^{k - 1} x_i} \\sqrt{\\sum_{i = k}^n x_i}\n$$\n证明：\n$$\n1 &lt; \\sum_{k = 1}^n \\frac{x_k}{y_k} &lt; \\frac{\\pi}{2}\n$$\nSolution\n根据均值不等式显然有：\n$$\ny_k = \\sqrt{\\sum_{i = 0}^{k - 1} x_i} \\sqrt{\\sum_{i = k}^n x_i} \\leq\n\\frac{1}{2}\\left(\\sum_{i = 0}^{k - 1} x_i + \\sum_{i = k}^n x_i\\right) =\n\\frac{1}{2}\\left(x_0 + \\sum_{i = 1}^n x_i\\right) = x_0\n$$\n并且由于：\n$$\n\\sum_{i = 0}^{k - 1} x_i &gt; x_0 = \\sum_{i = 1}^n x_i &gt; \\sum_{i =\nk}^n x_i\n$$\n得知上述等号无法取到，那么：\n$$\n\\sum_{k = 1}^n \\frac{x_k}{y_k} &gt; \\sum_{k = 1}^n \\frac{x_k}{x_0} = 1\n$$\n从而不等式左侧得证。\n为了证明不等式右侧，我们考虑下述数列 {Sk}0 ≤ k ≤ n，其在\nk = 0 的时候定义为 S0 := 0，在 k &gt; 0 的时候定义为：\n$$\nS_k := \\sum_{i = 1}^k \\frac{x_k}{x_0}\n$$\n考虑到 {xk}0 ≤ k ≤ n\n是正数数列，可以得知 {Sk}0 ≤ k ≤ n\n是递增数列。另一方面，我们可以得知 Sn = 1。综合上述条件我们可以得知\n{Sk}0 ≤ k ≤ n\n各项均落在区间 [0,1] 上。\n那么即存在所有项均落在区间 $\\left[0,\n\\dfrac{\\pi}{2}\\right]$ 上的数列 {θk}0 ≤ k ≤ n\n使得 sin θk = Sk\n对所有 0 ≤ k ≤ n\n成立。此时 θ0 = 0\n并且 $\\theta_n =\n\\dfrac{\\pi}{2}$。另一方面，据 {Sk}0 ≤ k ≤ n\n是递增数列得知 {θk}0 ≤ k ≤ n\n是递增数列。\n从而我们得知：\n$$\n\\begin{aligned}\ny_k &amp;= \\sqrt{\\sum_{i = 0}^{k - 1} x_i} \\sqrt{\\sum_{i = k}^n x_i} =\nx_0 \\sqrt{\\sum_{i = 0}^{k - 1} \\frac{x_i}{x_0}} \\sqrt{\\sum_{i = k}^n\n\\frac{x_i}{x_0}} = x_0 \\sqrt{1 + S_{k - 1}} \\sqrt{S_n - S_{k - 1}} \\\\\n&amp;= x_0 \\sqrt{1 - S^2_{k - 1}} = x_0 \\sqrt{1 - \\sin^2\\theta_{k - 1}}\n= x_0\\cos\\theta_{k - 1}\n\\end{aligned}\n$$\n从而：\n$$\n\\begin{aligned}\n\\sum_{k = 1}^n \\frac{x_k}{y_k} &amp;= \\sum_{k = 1}^n\n\\frac{x_k}{x_0\\cos\\theta_{k - 1}} = \\sum_{k = 1}^n \\frac{S_k - S_{k -\n1}}{\\cos\\theta_{k - 1}} = \\sum_{k = 1}^n \\frac{\\sin\\theta_k -\n\\sin\\theta_{k - 1}}{\\cos\\theta_{k - 1}} \\\\\n&amp;= \\sum_{k = 1}^n \\frac{2\\cos\\dfrac{\\theta_k + \\theta_{k -\n1}}{2}\\sin\\dfrac{\\theta_k - \\theta_{k - 1}}{2}}{\\cos\\theta_{k - 1}} &lt;\n2\\sum_{k = 1}^n\\sin\\dfrac{\\theta_k - \\theta_{k - 1}}{2}\n\\end{aligned}\n$$\n这里的不等号考虑到 {θk}0 ≤ k ≤ n\n是递增数列，从而 θk &gt; θk − 1。\n应用不等式 sin x &lt; x, x &gt; 0\n得到：\n$$\n\\sum_{k = 1}^n \\frac{x_k}{y_k} &lt; 2\\sum_{k = 1}^n\\sin\\dfrac{\\theta_k -\n\\theta_{k - 1}}{2} &lt; \\sum_{k = 1}^n \\theta_k - \\theta_{k - 1} =\n\\theta_n - \\theta_0 = \\frac{\\pi}{2}\n$$\n综上所述，证明完毕。\nProblem 8\n已知函数：\n$$\nf(x) = \\frac{1}{[x] - \\{x\\} + 1}\n$$\n定义数列 a1 = 1\n以及 an + 1 = f(an), n ≥ 1。证明：所有正有理数在数列\n{an}n ≥ 1\n中均出现且仅出现一次。\nSolution\n若 x ∈ ℕ+，显然：\n$$\nf(x) = \\frac{1}{x + 1} \\in \\mathbb{Q}^+\n$$\n若 x ∈ ℚ+ ∖ ℕ+，记\n$n := [x], \\dfrac{p}{q} := \\{x\\}$，这里\n$p, q \\in \\mathbb{N}^+, p &lt; q, \\mathop{\\rm\ngcd}(p, q) = 1$，那么：\n$$\nf(x) = \\frac{q}{nq - p + q} \\in \\mathbb{Q}\n$$\n注意到 nq − p + q = (n+1)q − p ≥ q − p &gt; 0，所以\nf(x) ∈ ℚ+。\n所以若 x ∈ ℚ+ 则\nf(x) ∈ ℚ+，据归纳法得知\n{an}n ≥ 1\n中项均是正有理数。\n下面说明数列 {an}n ≥ 1\n中没有重复项，即不存在 m ≠ n, m, n ∈ ℕ+\n使得 am = an。\n首先说明 f 是单射，即不存在\nx ≠ y 使得 f(x) = f(y)。使用反证法，如果存在\nx ≠ y 使得 f(x) = f(y)，那么：\n$$\n\\frac{1}{[x] - \\{x\\} + 1} = \\frac{1}{[y] - \\{y\\} + 1} \\iff [x] - [y] =\n\\{x\\} - \\{y\\}\n$$\n那么：\nℤ ∋ |[x]−[y]| = |{x}−{y}| &lt; 1\n从而 [x] = [y]，进一步 {x} = {y}，也就是说 x = y，矛盾。故 f 是单射。\n回到原先证明，使用反证法。如果存在 m ≠ n, m, n ∈ ℕ+\n使得 am = an，考虑到\nf(0) = 1，记函数迭代符号为\nf(n)，可以得到\nf(m)(0) = f(n)(0)。考虑到\nf 是单射，所以 f(|m−n|)(0) = 0，即\na|m−n| = 0。这与先前证明的该数列均为正有理数矛盾。故数列\n{an}n ≥ 1\n中没有重复项。\n现在我们仅需要说明任何正有理数均出现在该数列中即可。\n我们令 $g(x) := x + 1, h(x) := \\dfrac{x}{x\n+ 1}$。我们证明 g(an) = a2n + 1, h(an) = a2n。\n使用归纳法，n = 1\n时上述命题的成立是显然的，假设 n = k 时上述命题成立，考虑\nn = k + 1。此时：\n$$\na_{2k + 2} = f(a_{2k + 1}) = f(g(a_k)) = f(a_k + 1) = \\frac{1}{[a_k + 1]\n- \\{a_k + 1\\} + 1} = \\frac{1}{[a_k] - \\{a_k\\} + 2}\n$$\n而：\n$$\nh(a_{k + 1}) = \\frac{a_{k + 1}}{a_{k + 1} + 1} = \\frac{1}{1 + a_{k +\n1}^{-1}} = \\frac{1}{1 + (f(a_k))^{-1}} = \\frac{1}{1 + ([a_k] - \\{a_k\\} +\n1)} = \\frac{1}{[a_k] - \\{a_k\\} + 2}\n$$\n故 h(ak + 1) = a2k + 2，此时：\n$$\na_{2k + 3} = f(a_{2k + 2}) = f(h(a_{k + 1})) = \\frac{1}{[h(a_{k + 1})] -\n\\{h(a_{k + 1})\\} + 1}\n$$\n由于 x &gt; 0 时 0 &lt; h(x) &lt; 1，所以：\n$$\na_{2k + 3} = \\frac{1}{1 - h(a_{k + 1})} = \\frac{1}{1 - \\dfrac{a_{k +\n1}}{a_{k + 1} + 1}} = a_{k + 1} + 1 = g(a_{k + 1})\n$$\n故 g(ak + 1) = a2k + 3。据归纳法，证明完毕。\n定义函数：\n$$\n\\varphi(x) := \\begin{cases}\ng^{-1}(x) &amp; x \\geq 1 \\\\\nh^{-1}(x) &amp; x &lt; 1 \\\\\n\\end{cases} = \\begin{cases}\nx - 1 &amp; x \\geq 1 \\\\\n\\dfrac{x}{1 - x} &amp; x &lt; 1 \\\\\n\\end{cases}\n$$\n对于既约分数 $\\dfrac{p}{q} \\in\n\\mathbb{Q}^+$，显然有：\n$$\n\\varphi\\left(\\dfrac{p}{q}\\right) = \\begin{cases}\n\\dfrac{p - q}{q} &amp; p \\geq q \\\\\n\\dfrac{p}{q - p} &amp; p &lt; q \\\\\n\\end{cases}\n$$\n显然任何正既约分数经过 φ\n映射后依然既约且分子和分母的和严格减少（特别规定 0 的分子分母和为 0），而 φ(0) = 0，分子和分母的和保持不变。\n对任何正既约分数 $\\dfrac{p}{q}$，考虑序列 $\\dfrac{p}{q}, \\varphi\\left(\\dfrac{p}{q}\\right),\n\\varphi^{(2)}\\left(\\dfrac{p}{q}\\right), \\cdots,\n\\varphi^{(n)}\\left(\\dfrac{p}{q}\\right),\n\\cdots$，序列中分子和分母的和显然始终非负且不增，这意味着从某一项开始分子分母和始终不变，而此时序列的项仅有可能全零。考虑到\nφ(x) = 0 的解仅有\nx = 0 或者 x = 1，这意味着序列中必然有 1。\n这说明对任何正既约分数 $\\dfrac{p}{q}$ 存在某一个 g−1, h−1\n组成的有限序列使得，这里 ∘\n是映射复合符号：\n$$\ng^{-1} \\circ h^{-1} \\circ h^{-1} \\circ \\cdots \\circ\ng^{-1}\\left(\\dfrac{p}{q}\\right) = 1\n$$\n也就是存在某一个 g, h\n组成的有限序列使得：\n$$\ng \\circ \\cdots \\circ h \\circ h \\circ g(1) = \\dfrac{p}{q}\n$$\n据之前的证明，g ∘ ⋯ ∘ h ∘ h ∘ g(1)\n显然在数列 {an}n ≥ 1\n内，证明完毕。\nProblem 9\n(Credit to 2023 某四省联考数学试卷)\n椭圆曲线可以用于区块链等技术中的加密环节。\n定义椭圆曲线 C：\nC := {(x,y) : y2 = x3 + ax + b, 4a3 + 27b2 ≠ 0}\n定义两个运算：\n\n运算 $\\tilde{\\cdot}: C \\to C$。令\nP̃ ∈ C 是 P ∈ C 关于 x 轴的对称点\n运算  ⊕  : C2 → C。对\nP, Q ∈ C：\n\n若直线 PQ 与\nC 有第三个交点 R ∈ C，令 P ⊕ Q = R̃\n若直线 PQ 与\nC 相切且切点为 P，定义 P ⊕ Q = P̃\n定义 P ⊕ P̃ = 0* 以及\nP ⊕ 0* = 0* ⊕ P = 0*\n\n\n\n已知 ⊕\n满足交换律、结合律，对于与曲线 C 相切于 P 的直线 PQ，其中 P, Q ∈ C，证明\nP ⊕ P = Q̃\n已知 P(x1,y1), Q(x2,y2) ∈ C，且\nPQ 与 C 有第三个交点，求 P ⊕ Q 坐标\n\nSolution\nSubproblem 1.\n我们考虑式子 P ⊕ P ⊕ Q ⊕ Q̃，据结合律：\n$$\n\\begin{aligned}\nP \\oplus P \\oplus Q \\oplus \\tilde{Q} &amp;= (P \\oplus P) \\oplus (Q\n\\oplus \\tilde{Q}) = (P \\oplus P) \\oplus 0^* = P \\oplus P\n\\end{aligned}\n$$\n另据结合律：\n$$\n\\begin{aligned}\nP \\oplus P \\oplus Q \\oplus \\tilde{Q} &amp;= P \\oplus (P \\oplus Q) \\oplus\n\\tilde{Q}\n\\end{aligned}\n$$\n又 PQ 与 C 相切于 P，故 P ⊕ Q = P̃，所以：\n$$\n\\begin{aligned}\nP \\oplus P \\oplus Q \\oplus \\tilde{Q} &amp;= P \\oplus \\tilde{P} \\oplus\n\\tilde{Q} = 0^* \\oplus \\tilde{Q} = \\tilde{Q}\n\\end{aligned}\n$$\nSubproblem 2.\n设 PQ 与曲线 C 的第三个交点 R 坐标为 (x3,y3)，那么\nP ⊕ Q 的坐标为 (x3,−y3)。\n从而 yi2 = xi3 + axi + b, i ∈ {1, 2, 3}。作差：\n$$\n\\begin{cases}\ny_3^2 - y_2^2 = (x_3^3 - x_2^3) + a(x_3 - x_2) \\\\\ny_3^2 - y_1^2 = (x_3^3 - x_1^3) + a(x_3 - x_1) \\\\\n\\end{cases}\n$$\n若令 PQ 的斜率为\nk（斜率必然存在，否则 R 不存在），则有：\n$$\n\\begin{cases}\nk(y_3 + y_2) = x_3^2 + x_2x_3 + x_2^2 + a \\\\\nk(y_3 + y_1) = x_3^2 + x_1x_3 + x_1^2 + a \\\\\n\\end{cases}\n$$\n再作差：\nk(y2−y1) = x3(x2−x1) + (x22−x12) ⇒ k2 = x1 + x2 + x3\n从而就可以得到 x3，基于此得到 y3 的计算则很简单了。\nComment\n这题我还是有些话想说的，我感觉这道题出得很新，但我并不觉得很好。因为很多学生会对这个运算是否是良定义产生疑问，进而在解题的时候对一些地方畏手畏脚，尤其是优等生会产生这种现象。\n而且基于一个很新的背景出运算题，说实话，没什么意思。\nProblem 10\n定义一个非负整数 n\n的二进制表示 (akak − 1⋯a0)2，其需要满足：\n\n对于所有 0 ≤ i ≤ k，都有 ai ∈ {0, 1}\n等式 $\\sum_{i = 0}^k 2^ia_i = n$\n成立\n0 的二进制表示为 (0)2，并且 n ≠ 0 时有 ak = 1\n\n例如，9 的二进制表示为 (1001)2，二进制表示 (101)2 所代表的非负整数为 5。\n\n证明对于任意 n ∈ ℕ，其二进制表示存在且唯一\n对非负整数定义满足交换律与结合律的运算 ⊕ 如下：\n\n\n若 x, y ∈ {0, 1}，若 x = y，那么 x ⊕ y = 0，否则 x ⊕ y = 1\n若 x, y\n中有一个不属于 {0, 1}，记 x 的二进制表示为 (xpxp − 1⋯x0)2，y 的二进制表示为 (yqyq − 1⋯y0)2。不妨\np ≥ q，并额外约定\ni &gt; q 时 yi = 0，定义：\n\n$$\nx \\oplus y = \\sum_{i = 0}^p 2^i(x_i \\oplus y_i)\n$$\n计算 0 ⊕ 1 ⊕ ⋯ ⊕ n(n∈ℕ) 的值\nSolution\nSubproblem 1.\n首先说明存在性，我们使用归纳法说明所有非负整数都存在二进制表示。首先容易看出\n0 的二进制表示唯一为 (0)2，1 的二进制表示唯一为 (1)2。\n假设任意 n ≤ 2k − 1, k ∈ ℕ\n的 n\n都具有二进制表示，下面证明所有 n ≤ 2k + 1 − 1\n的 n 都具有二进制表示。\n显然得知 n = 2k\n有二进制表示 (100⋯0)2。取\n2k &lt; n ≤ 2k + 1 − 1，显然有\nn − 2k ≤ 2k − 1，所以根据归纳假设\nn − 2k\n具有二进制表示 (apap − 1⋯a0)2，根据定义有\nap = 1。显然\np &lt; k，否则：\n$$\nn - 2^k = \\sum_{i = 0}^p 2^ia_i \\geq 2^p \\geq 2^k\n$$\n矛盾，故 p &lt; k。\n作二进制表示 (bkbk − 1⋯b0)2，其中\nbk = 1，并且\ni ≤ p 时 bi = ai，p &lt; i &lt; k 时\nbi = 0。显然其满足二进制表示的第一和第三个条件，第二个条件验证如下：\n$$\n\\sum_{i = 0}^k 2^ib_i = 2^k + \\sum_{i = 0}^p 2^ia_i = 2^k + (n - 2^k) =\nn\n$$\n成立。据归纳法得知所有非负整数都有二进制表示。\n之后说明唯一性，我们使用归纳法说明所有非负整数二进制表示唯一。首先容易看出\n0 的二进制表示唯一为 (0)2，1 的二进制表示唯一为 (1)2。\n假设任意 n ≤ 2k − 1, k ∈ ℕ\n的 n\n二进制表示唯一，下面证明所有 n ≤ 2k + 1 − 1\n的 n 二进制表示唯一。\n对于 2k ≤ n ≤ 2k + 1 − 1，假设其具有两个不同的二进制表示\n(apap − 1⋯a0)2, (bqbq − 1⋯b0)2，根据定义\nap = bq = 1。这里不妨令\np ≥ q。\n如果 p ≠ q，那么我们有：\n$$\nn = \\sum_{i = 0}^q 2^ib_i \\leq \\sum_{i = 0}^q 2^i = 2^{q + 1} - 1 &lt;\n2^p \\leq \\sum_{i = 0}^p 2^ia_i = n\n$$\n矛盾，故 p = q。\n另外，如果 p &gt; k，则有：\n$$\nn = \\sum_{i = 0}^p 2^ia_i \\geq 2^p \\geq 2^{k + 1}\n$$\n如果 p &lt; k，则有：\n$$\nn = \\sum_{i = 0}^p 2^ia_i \\leq \\sum_{i = 0}^p 2^i = 2^{p + 1} - 1 \\leq\n2^k - 1\n$$\n均矛盾，所以 p = q = k。\n那么 (ak − 1ak − 2⋯a0)2, (bk − 1bk − 2⋯b0)2\n应当构成了 n − 2k\n的两个不同的二进制表示，然而 n − 2k ≤ 2k − 1，这与归纳假设矛盾。\n据归纳法得知所有非负整数二进制表示唯一。\nSubproblem 2.\n我们归纳地证明：\n$$\n0 \\oplus 1 \\oplus \\cdots \\oplus n = \\begin{cases}\nn &amp; n = 4k \\\\\n1 &amp; n = 4k + 1 \\\\\nn + 1 &amp; n = 4k + 2 \\\\\n0 &amp; n = 4k + 3 \\\\\n\\end{cases} \\ (k \\in \\mathbb{N})\n$$\n在此之前，我们需要指出该运算具有以下性质：\n0 ⊕ n = n, n ⊕ n = 0, 2n ⊕ 1 = 2n + 1, n ∈ ℕ+\n不妨记 n 的二进制表示为\n(akak − 1⋯a0)2，那么：\n$$\n\\begin{aligned}\n0 \\oplus n &amp;= \\sum_{i = 0}^k 2^k(0 \\oplus a_i) = \\sum_{i = 0}^k\n2^ka_i = n \\\\\nn \\oplus n &amp;= \\sum_{i = 0}^k 2^k(a_i \\oplus a_i) = 0 \\\\\n\\end{aligned}\n$$\n另外考虑二进制表示 (akak − 1⋯a00)2，其所代表的正整数为：\n$$\n\\sum_{i = 1}^{k + 1} 2^ia_{i - 1} = 2\\sum_{i = 0}^k 2^ia_i = 2n\n$$\n所以：\n$$\n2n \\oplus 1 = (0 \\oplus 1) + \\sum_{i = 1}^{k + 1} 2^i(a_{i - 1} \\oplus\n0) = 1 + 2\\sum_{i = 0}^k 2^ia_i = 2n + 1\n$$\n回到原题，我们首先计算出：\n$$\n\\begin{aligned}\n0 &amp;= 0 \\\\\n0 \\oplus 1 &amp;= 1 \\\\\n0 \\oplus 1 \\oplus 2 &amp;= 1 \\oplus 2 = (1)_2 \\oplus (10)_2 = (11)_2 = 3\n\\\\\n0 \\oplus 1 \\oplus 2 \\oplus 3 &amp;= 3 \\oplus 3 = (11)_2 \\oplus (11)_2 =\n0 \\\\\n\\end{aligned}\n$$\n为简化记号，定义 f(n) := 0 ⊕ 1 ⊕ ⋯ ⊕ n。\n假设 n = 4(k−1), 4(k−1) + 1, 4(k−1) + 2, 4(k−1) + 3(k∈ℕ+)\n时结论成立。\n下证明 n = 4k, 4k + 1, 4k + 2, 4k + 3\n时结论成立。\n不难根据先前得到的运算性质运算出：\n$$\n\\begin{aligned}\nf(4k) &amp;= 0 \\oplus 4k = 4k \\\\\nf(4k + 1) &amp;= 4k \\oplus (4k + 1) = 4k \\oplus (4k \\oplus 1) = (4k\n\\oplus 4k) \\oplus 1 = 0 \\oplus 1 = 1 \\\\\nf(4k + 2) &amp;= 1 \\oplus (4k + 2) = 4k + 3 \\\\\nf(4k + 3) &amp;= (4k + 3) \\oplus (4k + 3) = 0 \\\\\n\\end{aligned}\n$$\n据此，证明完毕。\n","categories":["【杂谈】数学"]},{"title":"2022 年 8 月论文笔记","url":"/2022/06/10/paper-2022-08/","content":"这个月主要是刚刚进入流媒体相关的方向，需要阅读一些论文来了解目前的发展。\n\nStick\n- A Harmonious Fusion of Buffer-based and Learning-based Approach for\nAdaptive Streaming\nIntroduction\n首先考虑到现实应用背景，视频流传输已经占据了大部分的网络传输带宽。但视频传输的问题在于视频内容的多样性和可能的网络波动。一种可能的解决方案是使用\nAdaptive bitrate (ABR) 算法，这些算法已经被证实可以提供高 QoE\n的传输服务。\n传统的 ABR 算法往往是 buffer-based 的（例如 BBA 和\nBOLA），这些算法通过固定的 buffer\n和参数来选定下一个视频块的码率，这可能难以在波动网络环境下保证 QoE。\n另一方面，基于深度强化学习（DRL）的 ABR 算法 Pensieve 却给出了\nstate-of-the-art\n的表现。在实践上，这类算法也常常部署在服务器侧以避免客户端的高计算开销。但是考虑到\nABR\n算法往往需要部署在前端以避免连接后端的网络延迟，这使得这类算法理论可用但是并不实际。\n那么我们可以将这两种方法结合起来，使用 DRL 来强化 buffer-based\n的方法，同时使用固定的缓冲区限制来限制计算开销。从而该论文提出了 Stick\n框架，该框架将 QoE\n参数、网络状态、视频特征作为输入参数，而缓冲区限制（连续的标量）作为其输出。\n考虑到连续的动作空间，我们计划使用 Deep deterministic policy gradient\n(DDPG) 来从头开始训练模型。此外，Stick 在无假设条件下通过和 ABR\n环境交互来学习策略。\n为了保证计算效率，我们进一步提出了 Trigger。Trigger\n会观测当前和先前的缓冲区限制，只在必要的时候激活 Stick\n来更新缓冲区限制。Trigger 使用 imitation learing\n方法来学习专家行为。同时，为了克服数据的无偏分布【Question\n#1】，我们使用了 prioritized experience replay\n来存储专家策略。同时，该论文还提出了一种可以让其他 ABR 算法框架接入\nTrigger 的方法。\n这篇论文的重点在于：\n\n首次提出结合 buffer-based 方法和 learning-based 方法\n通过 Stick，可以使用更小的模型实现比已有方法更好的效果\n通过 Trigger，证明轻量级模型可以有效降低计算开销\n\nBuffer-based &amp;\nlearning-based ABR algorithm\nBBA\n只根据当前缓冲区限制来选定下一个视频块的码率。具体而言，其将对吞吐量的估计固定为启动态额吞吐量以克服吞吐量的波动，之后在稳定态时，使用缓冲区限制\n$\\{B_{\\rm min}, B_{\\rm max}\\}$\n来获取块映射，块映射的作用是将缓冲区占用情况映射为码率。\n而这个映射也是简单的分块线性映射，缓冲区占用低于 $B_{\\rm min}$ 时下一个视频块码率为低码率\n$R_{\\rm min}$，缓冲区占用高于 $B_{\\rm max}$ 时下一个视频块码率为高码率\n$R_{\\rm\nmax}$，位于这两者之间的时候使用线性函数决定。\n这个方法大部分情况下简单且有效，但是也在许多条件下效果不理想。原因是\nBBA 使用的固定参数应当根据应用环境做出相应的调整。\n而 learning-based ABR，例如 Pensieve\n则给出了较好的理论结果，但是该方案并不容易应用到现实中。此外，Pensieve\n也在部分应用环境下效果不理想。\nKey ideas\n总结起来是这样的几点：\n\n使用 DRL 的方法调整 ABR\n的参数，避免使用查表或者预训练模型造成的过大存储和计算成本\n模型的状态空间需要考虑全面，不仅包括当前缓冲区限制，还要包括网络状况和视频特征\n\n此外，实验发现 Stick 可以仅使用一个参数控制缓冲区，而非两个参数\n\nQoE 要求会被作为 goal 输入模型，该参数会随机初始化，这会让模型意识到\nQoE 参数和 feedback reward 之间的关系\n使用轻量级的 Trigger 来决定是否需要通过 Stick\n更新缓冲区限制，以降低计算成本\n\nSystem overview\n整体的框架可以表现为：\n\nStick mechanism\nStick 的结构图可以表示为：\n\nDesign\n首先叙述状态空间的构造：\n\nT 为由客户端测量的前 k 个序列的吞吐量\nd 为前 k 个序列的下载时间\nq\n为上一个视频块选定的码率\nr 为视频剩余播放时间\nb\n为当前缓冲区占有情况\nS\n为表示下一个视频块大小的向量\ng 为 QoE goal 参数，由\nμ, τ 构成\n\n动作空间则是一个连续标量 $B \\in [0, {\\rm\nbuffer}_{\\rm max}]$，用于控制缓冲区限制。\n奖励函数则根据不同的 g，使用经典的线性 QoE\n指标来构造。\nTraining methodology &amp;\nImplementation\n【这一部分在阅读完 DPG 相关论文之后再具体展开】\nTrigger\nTrigger 的一个核心思想在于，如果 Stick\n在连续两个视频块上给出相同的结果，那么其第二次计算是无用的。而实验证明，无用操作可能占比达到\n30%，所以我们的目标就是用 Trigger 去判别哪些操作是无用的。\n现在考量 Trigger 的状态空间。根据 Related\nwork，网络吞吐量是我们需要考虑的重要参数。但是我们也发现了，先前的缓冲区占用情况也是一个重要特征，其可以揭示网络环境状态和视频块大小之间的隐藏关系。\n所以我们最终令 Trigger\n的输入是先前的网络吞吐量、缓冲区大小和现在的缓冲区限制。而输出是一个二维向量，表示\nStick 保持或者改变当前缓冲区限制的概率。\n\n使用 imitation learning 来训练 Trigger，这种方法能够根据 expert\ndemonstration 给出预期的结果。训练的算法可以表示为：\n\n\n另外，我们需要关注训练数据集分布的问题。论文使用的数据集中有 83%\n的操作是无用操作，这种分布不均匀的数据集和理想的 50%-50%\n数据集差距过大，可能导致特征训练不均衡。所以这里使用了 Prioritized\nexperience replay 方法来重新平衡数据集。\n关于这个方法的介绍可以参考 这篇文章。\n之后讨论如何将 Trigger 应用到其他的 ABR 算法上。\n【这一部分在阅读完 DPG 相关论文之后再具体展开】\nEvaluation\n介绍了使用的实验环境、数据集、训练方式、Baseline 的选取、QoE\n指标的计算公式等等。\n首先在一个数据集上，实验证明了 Stick\n输出单参数的表现并不比双参数差很多，甚至在一些条件下能得到更好的 QoE\n指标。\n之后通过实验说明了 Stick 在各种数据集上都表现出了比 buffer-based\n方法更为优秀的性能。\n有关比较性能，论文里面有这样一句被强调的话：\nNote that Stick only utilize onequarter number of neurons that of\nPensieve.\n感觉是一种简单的强大。\n\n之后还探讨了不同 QoE 指标下 Stick 的表现，探讨了 Trigger\n的网络结构（全连接、LSTM 还是 CNN），做了一些进一步的\nEvaluation，这里就不具体展开了。\nNeural Adaptive\nVideo Streaming with Pensieve\nIntroduction\n现行的 ABR\n算法在选择下一个视频块的码率的时候往往面临下述四个问题：\n\n网络吞吐量的不稳定\n部分 QoE 指标内存在相互矛盾的要求（如高质量和尽可能减少缓冲）\n当前码率选择可能对未来的选择产生影响\nABR 的决策可能是粗粒度的\n\n现行的大部分 ABR\n方法都依赖于对网络吞吐的估计或者对缓冲区大小的估计，所以其难以应对网络吞吐的不稳定。比如说\nSOTA 方法 MPC 依赖于对网络吞吐量的预估，原文：\nHowever, MPC’s performance relies on an accurate model of the system\ndynamics - particularly, a forecast of future network throughput.\n\n这样的限制使得 MPC 对预测结果的偏差十分敏感。\n从而本文提出了 Pensieve，该方法会自动学习 ABR\n算法，而不需要任何的预训练的控制规则或者对运行环境的假设条件。Pensieve\n是基于强化学习的，其完全通过其与环境交互的经验学习。Pensieve\n的核心为一个神经网络，该神经网络代表了 Pensieve\n所采取的针对网络环境的策略。该网络接受的输入为各种对网络环境的原始观测数据（吞吐量采样、回放缓冲区占用率、视频块尺寸等），而其输出则为下一个视频块应当采取的码率。该网络的训练方式为\nA3C。\nPensieve\n的训练方式的核心则是一个模拟器，用于将大规模的网络跟踪信息数据库回放给\nPensieve，其划分粒度可以是块级别的，也可以是包级别的或者其他。Pensieve\n的评测方式为将算法部署在一个 ABR\n服务器上，令算法不断给出下一个视频块应当采取的码率，这样做可以避免在客户端上进行繁重的神经网络计算。\n最后 Pensieve 在几乎所有的网络环境和 QoE 指标上持平或超过现有最佳的\nABR 算法。\nBackground\n当前占主导地位的视频分发策略为 HTTP-based adaptive\nstreaming，而其标准化技术为 DASH，即 Dynamic Adaptive Streaming over\nHTTP。而 DASH 的流程可以大致描述为下图：\n\n\n首先播放器向服务器获得认证\n服务器应答一个保存有实际视频数据的 CDN\n地址，并且列出所有可选码率\n播放器使用 ABR\n算法逐个请求视频块，视频块下载完成后渲染到屏幕上播放\n\n这里 ABR 算法几乎决定了整体的视频传输性能，其面临的若干挑战已经在\nIntroduction 部分给出了基本的介绍，这里稍加详细叙述。\n\nABR\n算法并不能仅考虑网络情况，因为在类似蜂窝移动网络等不稳定网络条件下，我们难以预测未来的网络吞吐，最后往往仅能够获取到保守估计导致性能浪费，或者过高估计导致传输延迟。从而\nABR 也应当考虑缓冲区占有率等更为稳定的参数。\nQoE\n指标可能是相互冲突的。在带宽有限的网络环境中持续以最高码率请求视频可以保证视频质量，但是会升高缓冲率。相反，在不稳定的网络环境中，在任何时候选取当前网络环境能提供的最高码率会导致视频播放不平滑。\n当前视频块的选择会对后续视频块的码率选择产生影响。其一，高码率视频块常常会导致后续视频块难以维持该高码率，因为可能导致缓冲。其二，为了保证视频播放平滑，ABR\n算法不倾向于突然改变码率，所以后续视频块的码率并不会在当前码率基础上改变很大。\n由于 ABR 算法能选择的码率范围被服务器给出的 Manifest file\n限制，所以其选择往往是粗粒度的。有时网络环境会恰好落在某一个低码率过于浪费资源而稍高的码率就会导致缓冲的临界区域。\n\nLearning ABR Algorithms\n其首先将 Pensieve 和 Robust MPC 进行了对比，指出了 Robust MPC\n的部分缺陷（基本还是先前部分提到的缺陷，只是使用了实验数据做了支持）。\n这一部分似乎并没有写出很多新东西，还是先前部分的重复。\nDesign\nTraining Methodology\n训练策略的核心是一个模拟视频下载流程的模拟器。其对于每一个视频块，模拟器会根据该视频块的码率以及网络状况生成下载耗时。在这一段时间，模拟器会缓慢消耗缓冲区内已经存在的视频块以模拟视频播放，之后再将该视频块压入缓冲区。模拟器会跟踪所有可能导致重新缓冲的事件，比如缓冲区剩余视频块长度小于正在下载的视频块需要的时间（这会导致已经缓冲的视频播放完成后新的视频块还未下载完毕）。另外一方面，如果当前缓冲区无法容纳新的视频块，那么模拟器会暂停下载\n500 毫秒，之后重新开始请求。\n在完成下载之后，模拟器会给出若干参数，比如当前缓冲区占有率、重新缓冲时间、视频块下载时间、（在所有可选码率下）下一个视频块的大小、该视频剩余的视频块数量等。这些参数的具体使用方式见后。\n基于该模拟器，Pensieve\n可以在很短的时间内学习一个本应占用长时间的视频下载流程。\n虽然上述基于应用层行为的建模简单直接，但是实际上由于传输层复杂的行为，上述建模有可能并不精确。例如，播放器在缓冲区已满的条件下可能并不会在视频块下载完成后立刻请求下一个视频块，这可能导致传输层\nTCP 回退到慢启动状态，这样可能并不能充分利用带宽。该问题实际上让 ABR\n算法需要考虑的方面增多了，因为通常意义上快速填满缓冲区的策略会导致 TCP\n慢启动从而造成事实上的低效率。\n为了了解 TCP 慢启动造成的影响，设计的实验为在带宽 6 Mbps\n的条件下不断以某一个恒定的码率请求视频块。得出的结论为，在启用 TCP\n慢启动的条件下请求的码率越低带宽利用率越低，而不启用 TCP\n慢启动的条件下所有码率均充分利用了带宽。\n所以为了让模拟贴合现实，我们可以关闭服务器的 TCP\n慢启动。虽然这可能导致流量的突变，但目前可以有其他的解决方案解决这一问题而不需要\nPensieve 来处理。\n事实上上述模拟依然是不精确的，但是我们发现 Pensieve\n依然可以通过上述不完整的模拟学习到高质量的 ABR 算法，这可能是由于\nPensieve 强大的泛用能力。\n","categories":["【论文笔记】计算机"]},{"title":"2022 年 9 月论文笔记","url":"/2022/09/20/paper-2022-09/","content":"这个月正式参与进入了实验室和快手的一个合作项目，依然还是需要从论文先开始。\n\nCausalSim\n- Unbiased Trace-Driven Network Simulation\nAbstract &amp; Introduction\n在测评网络协议在线上的实际性能的时候，虽然 RCT\n方法是最为标准的，但是由于其极其昂贵，对周边基础设施的要求也很高，所以只有若干大型网络运营方才能支持这种测评方法。基于此，一般的研究所会选择网络模拟器或者\ntrace-based\nsimulation。但是网络模拟器往往难以模拟出真实网络环境中的复杂情况，并且这类模拟器需要对网络环境的极其详细的掌握。而\ntrace-based simulation\n又常常因为数据质量不高或者有偏导致测评不精确。\n【RCT 方法之后看论文】\n应用反事实模拟以利用离线历史数据的主要思路为，首先获取在某一个给定网络条件下使用某一个网络协议时的\ntrajectory，而我们需要训练一个模型来预测在这个网络条件下使用其他网络协议的时候的\ntrajectory。基于这个模型，我们只需要已知一个协议的性能，就能够得知新协议的性能表现而不需要实际部署该协议。\n使用反事实模拟的好处包括：\n\n节省部署协议和使用 RCT 方法评测的成本\n能够在完全一致的网络条件下比较不同协议的差异\n使用模型进行反事实模拟得到的数据可在社区内交流，帮助无法访问大型网络以测试其协议设计的开发者\n\n当然，反事实模拟的方法是困难的，原因之一是用于采集观测数据的策略可能破坏无偏性，这一点我们后续阐述。\n那么本文的核心成果就是：\nWe present CausalSim, a framework for learning unbiased\ntrace-driven counterfactual simulation models for network\nprotocols.\n\nMotivation\n总体而言，该文章尝试解决的问题依然是，考虑到直接线上测试算法性能较为耗时且代价较大，能否：\n\n使用历史数据预测算法的性能\n服务运营商能否使用历史数据构建一个模拟器使得开发者可以在不接触实际网络环境的条件下评测算法\n\nThe problem of\ntrace-driven network simulation\n这一部分假设了一个新算法 FabABR，然后在 Puffer 数据集上收集了类似\nBOLA-BASIC、BBA、Fugu 等已知的算法在给定的网络条件下的 buffer\noccupancy，令 BOLA-BASIC v1 充当新算法\nFabABR，之后构建了两个模型来通过其他已知算法的 buffer occupancy 预测\nFabABR 的 buffer occupancy，并和 ground truth 比较。\n当然，在实际环境中，我们是没有 ground truth\n的，因为我们没有新算法通过 RCT 方法评测得到的 buffer occupancy 作为\nground truth。\n第一个模型是\nExpertSim。其原理为，在某个网络条件下，如果某个算法在时刻 t 达成的吞吐率为 ĉt，那么我们假设在该网络条件下，新算法达成的吞吐率也是\nĉt。这也是该模型的首要假设，即不同算法对码率的决策不影响观测到的网络吞吐率，而这个假设广泛应用于各种模型。\n在这个假设下，记时刻 t 时的\nbuffer size 为 bt，而时刻 t + 1 时的 buffer size 为 bt + 1，时刻\nt 的视频块时间为 T，根据 FabABR\n选择的码率该视频块的大小为 st，那么：\n$$\nb_{t + 1} = \\max\\left(0, b_t - \\frac{s_t}{\\hat c_t}\\right) + T\n$$\n第二个模型为 SLSim。其模型为两层全链接层，每层 128 个 ReLU\n激活的神经元。该网络的输入为 bt, ĉt, st，输出为\nbt + 1，符号的意义同上。由于我们具有\nground truth，我们就将其作为 supervisor 进行训练，loss 设定为 L2\nloss。最后的实验结果为：\n\n这里可以看见两种模型都不及 CausalSim\n做出的预测。而这一差距的本质就是这两个模型都默认了不同算法对码率的决策不影响观测到的网络吞吐率，但实际上由于类似于\nTCP\n慢启动、和其他流量竞争等因素，不同的码率选择实际上会影响实际的吞吐率。而\nPuffer 数据集实际上就能证明该假设错误：\n\n可见不同算法影响了吞吐率的分布。这种错误的假设导致了数据的有偏。\nCausal inference to the\nrescue\n如果我们能够获取更深层次的网络情况而非仅仅是表层的吞吐率，我们完全就能修正原先的错误假设，这是因为我们可以将这些底层的网络情况视作独立于\nABR 算法的因素。\n但是这些底层网络情况并不出现在数据集中，我们需要通过表层数据推测这些底层情况，而这也就是反事实推理介入的地方。\n具体的设计见下述部分。\nModel\nCausal dynamics\n我们给出这样的建模，令 ot⋆\n表示时刻 t\n的时候系统观测到的表层数据，ut 表示时刻\nt 的时候系统的底层数据，at 表示时刻\nt\n时我们对系统做出的决策，那么系统行为可以建模为：\n$$\no_{t + 1}^\\star = \\mathcal{F}_{\\rm evolution}(o_t^\\star, u_t, a_t)\n$$\n在 ABR 问题中，ot⋆\n包括的因素有 buffer size、实际吞吐率、Min RTT、可选视频块大小，而 ut\n包括的因素有瓶颈连接时间、竞争流量的数量、竞争流量的 congestion\ncontrol。\n此外，我们可以将 ot⋆\n拆分为 ot\n和 mt，这里 mt\n是观测数据中受到底层数据所影响的部分，从而我们可以拆分出纯外部数据 ot，而后续我们所称呼的“观测数据”即指代\not。这一步拆分后，建模可以变为：\n$$\n\\begin{aligned}\nm_t &amp;= \\mathcal{F}_{\\rm mediation}(a_t, u_t) \\\\\no_{t + 1} &amp;= \\mathcal{F}_{\\rm system}(o_t, m_t, a_t) \\\\\no_t^\\star &amp;= [o_t, m_t]\n\\end{aligned}\n$$\n这里，我们需要说明的是 mt\n是可观测的，而 ut\n是潜在而不可观测的。另外，mt\n受到决策的影响，而 ut\n不受到决策的影响。\n在 ABR 问题中，mt\n就是我们实现的吞吐率，其不仅受到潜在网络环境影响，还受到 ABR\n码率决策的影响，而这也就是先前两个策略失败的核心原因。此外，根据该建模，在得知吞吐率\nmt\n的信息之后，我们完全不需要了解其他信息即可推断出其他可观测的信息 ot。\nTrace-driven\nsimulation is counterfactual estimation\n首先统一符号，我们假设数据集一共采用了 K 种不同算法，一共生成了 N 条 trajectory，我们记第 i 个 trajectory 的长度为 Hi。\n那么我们的训练策略可以描述为，首先对于任何 i，我们给出决策序列 {ãti}t = 1Hi，给定初始观测\no1i，并且我们确定所有\ntrajectory 均基于同一个潜在状态序列 {uti}t = 1Hi，我们的目的是预测出观测序列\n{õti}t = 1Hi。\n此外，我们注意到学习 $\\mathcal{F}_{\\rm\nsystem}$\n是完全监督的，因为所有需要的数据均可以观测。所以最终的困难点在于估计\n{uti}t = 1Hi, {mti}t = 1Hi\n以及学习 $\\mathcal{F}_{\\rm\nmediation}$。\nCausalSim - Key insights\nCounterfactual\nestimation as matrix completion\n这一步的核心在于将反事实推理等效为矩阵填充问题。我们假设动作空间大小为\nA，即 ati ∈ {1, 2, ⋯, A}，另外记：\n$$\nU := \\sum_{i = 1}^NH_i\n$$\n那么我们考虑一个 A × U\n的矩阵，其中每一行代表一种决策，每一列代表潜在状态。这里我们将第 i 个 trajectory 的第 t 时刻中所有的 (i,t) 按 i 为主序数排列为长度为 U 的序列，从而每一个 (i,t) 都能对应到 M 中的某一列。\n在第 i 个 trajectory 的第\nt 时刻，我们观测到 $m_t^i = \\mathcal{F}_{\\rm mediation}(a_t^i,\nu_t^i)$，而 mti\n就是矩阵 M 中 ati\n所对应的行和 (i,t)\n所对应的列处的已知元素，该列其余元素均为未知元素。也就是说我们在初始条件下，每一列都会有一个已知元素。\n而现有的矩阵填充算法并不能直接应用到本问题上，因为本问题中的 M 元素缺失的 pattern\n并不随机并且缺失元素数量过多。但是另外一方面，矩阵 M\n显然具有更为优越的结构，因为元素缺失的 pattern 和已知的 ABR\n算法决策流程相关，并且 N 个\ntrajectory 的网络潜在条件是一致的。\nExploiting\nthe policy invarience of latent factors\n我们这里考虑一个简单情况，即 A = 2, U = 2n，并且矩阵\nM 秩为 1。这说明存在 a ∈ ℝ2, u ∈ ℝ2n\n满足 M = auT。之后我们令\nK = 2。\n考虑到：\n$$\n\\frac{M_{1, j}}{M_{2, j}} = \\frac{a_1u_j}{a_2u_j} = \\frac{a_1}{a_2}\n$$\n并且每一列必然有一个已知元素，所以我们只需要估计 a1/a2。\n另外，基于两个 trajectory 均基于一致的网络潜在条件，所以对于较大的\nn，每一列的期望应当类似，所以有以下估计（这个估计我感觉比较奇怪，说理也比较不充分）：\n$$\n\\frac{1}{n}\\sum_{j = 1}^n u_j \\approx \\frac{1}{n}\\sum_{j = n + 1}^{2n}\nu_j\n$$\n之后我们就可以得到下述估计：\n$$\n\\frac{\\sum_{j = 1}^n M_{1, j}}{\\sum_{j = n + 1}^{2n} M_{2, j}} =\n\\frac{\\sum_{j = 1}^n a_1u_j}{\\sum_{j = n + 1}^{2n} a_2u_j} \\approx\n\\frac{a_1}{a_2}\n$$\n从而我们得到了我们需要的估计，从而我们就能补充完整整个矩阵。\nCausalSim - Details\n最后采用了这样的一个网络结构：\n\n该网络的目标是为了获取不变的潜在条件 {uti}t = 1Hi，而完成这项任务的网络是\nPolicy Discriminator，其接受 {uti}t = 1Hi\n作为输入，输出为其认为该行为决策是由哪一个算法做出的。由于其为一个简单的多分类任务，所以其\nloss 就采用简单的交叉熵表示为：\n$$\n\\mathcal{L}_{\\rm disc} := \\mathbb{E}_D[-\\ln \\mathbb{P}(\\pi \\mid \\hat u)]\n$$\n而我们的目标是让 Policy Discriminator 的 loss\n尽可能大，从而通过分类器无法区分各类算法保证抽取的潜在不变条件确实和具体的算法无关。\n整个网络采用的 loss 为：\n$$\n\\mathcal{L}_{\\rm total} := \\mathbb{E}_D[\\delta(m_t^i - \\hat m_t^i)^2 +\n(o_t^i - \\hat o_t^i)^2] - \\kappa\\mathcal{L}_{\\rm disc}\n$$\nEvaluation\nA real-world ABR experiment\n实验过程比较简单，问题出现在如何评测。因为 Puffer 数据集里每一个\ntrajectory\n仅使用了一种算法跑过，所以实际上是无法对多个新算法进行评测的。所以其采用了评价变量分布的方式进行评测。即，不同的算法在不同的\ntrajectory\n上运行，只要潜在网络因素不变，各类变量的分布应该是类似的。那么基于此，我们只要再做一次模拟，之后指定一个变量，评价两次模拟中该变量分布之间的差距。这里评价分布的差距使用\nEMD：\n$$\n{\\rm EMD}(\\mathcal{P}, \\mathcal{Q}) := \\int_{-\\infty}^{+\\infty}\n|\\mathcal{P}(x) - \\mathcal{Q}(x)| {\\rm d}x\n$$\n这里 𝒫, 𝒬 都是累积分布函数。\n评测结果自然是 CausalSim 很厉害：\n\nLearning ABR policies with\nCausalSim\n既然现在已经具有了工作良好的模拟器，我们就可以利用该模拟器训练\nABR，具体的过程不阐述，结果如下：\n\n总体而言，CausalSim\n显然和真实环境下训练的结果贴近，而其他的模拟器均有很大偏差。并且对于高\nRTT 的\nAgent，这个差距更大。这个差距的根本原因依然是其他模拟器都是有偏的，在例如慢启动等条件下，容易选择保守的码率。\nServer load balancing\n【PASS】\nFinal analysis\n读这一篇论文目的是为了研究怎么离线评测算法，也就是训练一个合理的环境模拟器出来。但感觉本文的一个核心思想为将网络吞吐率等因素视作和\nABR\n决策有关的变量，将其纳入考虑。严格而言就是更新了对环境内部逻辑的建模，使之更为贴近真实环境。而如果不把网络吞吐率纳入考虑，则前一时刻无论做出什么选择，下一时刻环境都会要求算法实现同样的吞吐率，从而导致算法趋近于保守，在高\nRTT Agent 上表现出仅选择较低码率。\n方法上的话，感觉 Policy Discriminator\n没有太见过，是一个训练无关性的好方法。\nDeployment-Efficient\nReinforcement Learning via Model-Based Offline Optimization\nAbstract &amp; Introduction\n离线 RL\n的问题在于在线和环境交互可能导致较大开销，为了解决这一问题，主要的策略分为：\n\n限制 agent 的行为，防止其做出错误举动。这里 BCQ\n就采用了这样的做法（但是 BCQ 论文实在是需要慢慢看）\n强化 agent 的 exploitation 能力，令其最大化利用有限的数据\n\n本文的成果是提出了衡量 RL 算法的一个指标，即 deployment\nefficiency，其基于了 RL\n学习过程中数据采集策略发生变化的次数（因为策略发生变化意味着需要一次新的部署）。完全离线的\nRL 算法如 BCQ、BRAC 具有很高的 deployment efficiency，而完全在线的 RL\n算法如 DDPG、SAC 则较低。\n论文特别指出，deployment efficiency 和已有的 data efficiency\n并不完全类似，这里后者衡量了 RL 学习过程中采集数据的次数。这意味着，即使\ndata efficiency 很低（数据采样次数极大），只要收集数据的策略没变，那么\ndeployment efficiency 依然较高。\n目前大部分的离线 RL 算法都在大数据集上进行训练和评测，以保证\ndeployment efficiency 和 data efficiency 都很高。但实际上我们注意到由于\nextrapolation\nerror，这种简单直接的算法其实并不优越。而对于在线算法，虽然可以克服数据集数据分布不符合真实数据分布的问题，但实际上会限制\npolicy 的表达能力【Question #1：这里没有特别明白】。\n此外，本文还提出了 BREMEN，即 Behavior Regularized Model\nENsemble。\nWe propose Behavior-Regularized Model-ENsemble (BREMEN), which learns\nan ensemble of dynamics models in conjunction with a policy using\nimaginary rollouts while implicitly regularizing the learned policy via\nappropriate parameter initialization and conservative trust-region\nlearning updates.\n\n自然，BREMEN 在高维连续决策空间上也表现很好。\nPreliminaries\n首先定义 MDP (𝒮,𝒜,p,r,γ)，而\npolicy π 定义了 agent\n的行为，π\n接受一个状态，输出一个状态空间 𝒜\n上的概率分布，表示 agent 做出给定行为的概率。我们的目标是获取下述最优\npolicy：\n$$\n\\pi^* = \\mathop{\\rm argmax}_\\pi \\eta[\\pi] = \\mathop{\\rm argmax}_\\pi\n\\mathbb{E}_\\pi\\left[\\sum_{t = 0}^{+\\infty} \\gamma^tr(s_t)\\right]\n$$\n而所谓 model-based 的 RL 方法，就需要对 MDP 中的 p(s′∣s,a)\n建模估计。\nRL 的学习过程中包含两种行为，分别为获取 MDP 转移对（即\ndeployment）与更新 policy 参数（即\nlearning）。如果学习过程中每次更新参数后均将收集到的数据舍弃，那么该学习就是\non-policy 的。反之，如果不断积累数据形成 replay dataset 𝒟，那么该学习就是 off-policy 的，因为用于更新\npolicy 的数据并不一定通过当前 policy 收集。\n但是上述的学习过程都是 online 的，因为其 deployment 和 learning\n是混合进行的，而纯 offline 算法中 agent\n不会直接与环境进行任何的交互，agent\n只能从固定的数据集之中学习。当然，介于 online 和 offline 之间有\nsemi-batch RL，其实现了较高的 deployment\nefficiency，当然这种方法并没有完全研究过。\nDeployment efficiency\n这里主要阐述这样的观点，即对于 online RL，无论其是 on-policy 还是\noff-policy，在一次迭代之后，必然会部署新的 policy 并获取数据，这显然是\ndeployment unefficient 的。相反，纯 offline RL\n只会学习一次部署得到的数据。而一个理想的平衡算法应当位于这两个极端之间。\n论文认为现在的 RL 算法忽视了 deployment efficiency，并且现行的部分\nSOTA 算法甚至需要百万量级的部署次数（如\nSAC）。本文提出了只需要五次到十次部署即可有效学习的算法。\nBehavior regularized model\nensemble\nImaginary rollout from\nmodel ensemble\n为了解决 model bias 的问题，BREMEN 使用了包含 K 个 deterministic dynamic model 的\nf̂ϕ := {f̂ϕ1,⋯,f̂ϕK}，其中\nϕi\n表示模型参数。这些模型的训练方式都是最小化下述均方误差，即 model\n预测的后续状态和数据集 𝒟\n指示的后续状态：\n$$\n\\min_{\\phi_i} \\frac{1}{|\\mathcal{D}|} \\sum_{(s_t, a_t; s_{t + 1}) \\in\n\\mathcal{D}} \\frac{1}{2} \\left\\|s_{t + 1} - \\hat f_{\\phi_i}(s_t,\na_t)\\right\\|_2^2\n$$\n在实际训练 policy πθ\n的时候，会从这 K 个 model\n中随机选择一个来提供下一状态：\nat ∼ πθ(⋅∣ŝt), ŝt + 1 = f̂ϕt(ŝt,at), i ∼ {1, 2, ⋯, K}\nPolicy update with\nbehavior regularization\n这里训练具体的 policy 的时候，需要使用置信区间约束来解决 distribution\nshift 的问题，即在每一次部署之后都使用 behavior clone 得到的 policy\nπ̂β 对\nπθ\n重新初始化。具体而言，在每一次部署之后我们都能得到一个更新过的数据集\n𝒟，从而我们使用 BC 对真实的 policy\nπb\n进行估计。具体的训练方式为下述，这里论文作了 fixed variance 假设：\n$$\n\\min_\\beta \\frac{1}{|\\mathcal{D}|} \\sum_{(s_t, a_t) \\in \\mathcal{D}}\n\\frac{1}{2} \\left\\|a_t - \\hat\\pi_\\beta(s_t)\\right\\|_2^2\n$$\n好像 behavior clone 和 distribution shift\n都是模仿学习的东西，这里还真的不太会，后面补。\n一个可能有用的 slide。\n\n似乎学明白了一点东西，模仿学习是一种改进的 RL，其面对的是无法合理得到\nreward signal 的 RL\n环境，但是其可以获得部分专家数据，那么我们就可以模仿专家数据进行学习，这就是\nbehavior clone。\nbehavior clone 的基本思想借鉴了监督学习。例如我们获得了专家数据集\n𝒟，那么我们的训练方式就是：\n$$\n\\theta^* := \\mathop{\\rm argmin}_\\theta \\mathbb{E}_{(s, a) \\sim\n\\mathcal{D}} \\mathcal{L}(\\pi_\\theta(s), a)\n$$\n这里 ℒ 是 loss，可以设定为负 reward\n等。\n但这个方法有很多问题，包括在数据集较小的时候学习效率极低、无法分辨真正导致\nreward 上升的行为等，但是更为致命的问题是 distribution shift。\n这个问题指的是专家数据和实际数据分布不一致，尤其指训练集和测试集分布之间有偏差。由于我们参考了监督学习的思想，behavior\nclone\n实际上也继承了监督学习的一个假设，即数据集分布和真实数据分布一致。但是，即使这个假设并不严格成立，监督学习也是可以忽略的，因为监督学习的各个数据之间独立，可以忽略。然而\nRL\n是逐步决策的，某一步的偏差可能导致后续误差的累积导致后续决策的极大偏移。\n有一种解决方式是数据聚合，这里就和论文无关了，故不做讨论。\n\n而通过 π̂β 重新初始化\nπθ\n的方式为正态分布初始化，均值设定为 π̂β 而标准差置\n1。论文认为在这里将 BC\n和普通的梯度下降相结合可以使得 πθ\n趋向于新数据集 𝒟 代表的\npolicy，可以认为是一种 distribution shift 问题的补救措施。\n为了进一步补救，其进一步使用 KL-based trust region\noptimization。总体上 BREMEN 的 policy 更新策略就是：\n$$\n\\theta_{k + 1} = \\mathop{\\rm argmax}_\\theta \\mathbb{E}_{(s, a) \\sim\n(\\pi_{\\theta_k}, \\hat f_{\\phi_i})} \\left[\\frac{\\pi_\\theta(a \\mid\ns)}{\\pi_{\\theta_k}(a \\mid s)} A^{\\pi_{\\theta_k}}(s, a)\\right]\n$$\n这里要求：\n$$\n\\mathbb{E}_{s \\sim (\\pi_{\\theta_k}, \\hat f_{\\phi_i})} D_{\\rm\nKL}(\\pi_\\theta(\\cdot \\mid s) \\parallel \\pi_{\\theta_k}(\\cdot \\mid s))\n\\leq \\delta\n$$\n此外定义初始值：\nπθ0 := 𝒩(π̂β,1)\n得到的 BREMEN 算法流程为：\n\n总体来看，简化了部署的过程，然后使用类似 TRPO 中信任域的方式约束了\nagent 的行为。\nExperiments\n既然 BREMEN\n的优势在于少量部署条件下能高效学习，其第一个实验就是和其余 RL\n在约束部署次数的条件下比较 reward，效果是明显的：\n\n这里每一条竖直虚线都代表一次部署，部署次数约束在五次到十次之间，每次\nbatch size 约束在 200k 到 100k。可见 BREMEN\n明显优于大部分算法，而几乎仅劣于完全在线的 SAC，但是 SAC\n可能需要近百万量级的部署次数。\n此外，为了测试 data efficiency，论文采用的方法是训练一个 SAC 后用该\npolicy 采集一个 dataset 并用该 dataset\n训练各种离线算法，根据下述结果可以看出 BREMEN 能在很小的数据集下就能超越\nBC 的 baseline，而其余类似 BCQ 等的方法甚至无法超越 baseline，这说明了\nBREMEN 不仅 deployment efficient 而且是 data efficient 的：\n\nFinal analysis\n说实话由于 RL\n基础还是有点欠缺，自己不是很了解信任域相关方法的数学基础，所以对其数学论证也没看很细致，尤其是涉及到\nimplicit KL regularization 的部分。\n但总体而言这篇文章提出的核心思想是需要考虑部署带来的开销，并且提出了利用\nBC 等方法来强化模型的 exploitation 能力并且尝试使用信任域的想法约束\nagent 的行为，总体上依然符合离线 RL 的两大思路。\n数学证明之类的可能真的要等到补补 TRPO 之类 RL\n方法之后写，目前打算基于 Sutton 把博客里面这些有关 RL\n的一些东西串起来。\n","categories":["【论文笔记】计算机"]},{"title":"2022 年 12 月论文笔记","url":"/2022/12/06/paper-2022-12/","content":"12\n月开始就得准备做毕设了，先要充分阅读文献，确定自己要做的方向有什么要解决的问题，以及目前已经有的探索和目前还存在的困难。\n\n\nLearning\nTailored Adaptive Bitrate Algorithms to Heterogeneous Network Conditions\n- A Domain-Specific Priors and Meta-Reinforcement Learning Approach\n黄老师的文章，作为起手还是需要好好看看的。\n这篇文章的基本概念是，基于学习的 ABR 已经能够实现一个平均而言优秀的\nABR\n算法，但是对于部分特殊的网络环境其依然表现不佳，而这也就是所谓的个性化。然后这篇文章使用了\nmeta RL 的方式实现了 AABR（其实应当是 A2BR，但是我真的不想打公式了，AABR\n表示 Adaptation of ABR）。\nAABR\n首先离线学习一个元算法，之后再在在线的个性化环境下学习一个针对当前网络环境的个性化算法。另外，还需要不断优化离线学习来保证元算法的优势。\nIntroduction\n首先对 ABR\n算法做了总结，启发式算法根据当前网络情况和一部分状态变量给出决策，但是只有在选定较好的算法参数的时候这种算法才能表现较好。基于学习的算法则根据网络情况学习这些参数。然而总而言之，这些算法都不会自动调节自己的算法参数，尤其在面对变化较多的网络环境下时，这些算法表现较差。\n之后是通过实验说明了现在的网络状况不仅是多样性（diverse）的，更多的是独一无二（unique）的。基于这一点，这篇文章认为做用户个性化是一个重要的提升。\n所以基于 Input-driven Markov Decision Process (IMDP)，本文提出了\nAABR。分为离线和在线两步，具体的训练方式见后续。\n总结一下这篇文章的工作就是确认了当今网络环境的独特性，并通过 meta RL\n解决了 ABR 的个性化问题。\nBackground &amp; Motivation\n关于 ABR\n之类的介绍这里忽略，主要看这篇文章如何论证当今网络的多样性。\n多样性分为三个方向去论证，即不同用户间差异、不同场景间差异以及已有的部分\nABR 算法在这些网络环境下的表现。\n用户间差异和场景间差异可以关注下图：\n\n可以首先注意到网络吞吐率和 RTT\n的变动是相当大的，而如果观察具体的用户，也可以发现用户之间的网络状况差异也很大，部分用户网络稳定（整体带宽\nCDF\n陡峭）而部分用户的网络波动较大，而且各个用户的网络指标平均值也差异较大。\n对于场景，也可以注意到步行、地铁、公交、汽车的网络情况也各有不同，并不能一概而论。\n如果从 ABR 的角度出发，这篇文章在两个不同环境下测试了若干个 ABR\n算法的性能，得到的结果是：\n\n显然可以注意到已有的算法都很难兼顾两种情况，常常顾此失彼。这就意味着不稳定的网络情况很容易导致这些算法失效，从而也难以实现用户个性化。\nMethods\nInput-driven Markov\nDecision Process\n基本而言是在正常的 MDP 中引入了 input process 𝒵，这个时候环境的转移概率定义为：\n𝕋[s′∣s,a,z] := ℙ[st + 1=s′∣st=s,at=a,zt=z]\n此外，决策依然仅仅和 st ∈ 𝒮\n有关，也就是说具体行为 at ∈ 𝒜 与 zt ∈ 𝒵\n是独立的。\n进一步的价值函数定义为：\nQ(s,a,z) := ∑s′ ∈ 𝒮𝕋[s′∣s,a,z](r(s,a,z)+γV(s′,z′))\n在 IMDP 下，最优策略也就定义为：\n$$\n\\pi^*(s, z) := \\mathop{\\rm argmax}_{a \\in \\mathcal{A}} \\sum_{s' \\in\n\\mathcal{S}} \\mathbb{T}[s', z' \\mid s, a, z]\\left[r(s, a, z) + \\gamma\n\\max_{a' \\in \\mathcal{A}} Q(s', a', z')\\right]\n$$\n可以注意到，如果两个 agent 运行相同的 policy π，其不同之处仅仅是 input process\n𝒵1, 2 不同。可以注意到这两个\nagent 将会始终保持相同的决策，所以其价值函数相同当且仅当 𝒵1 = 𝒵2。\n如果在完全得知 input process 𝒵\n的条件下，求解最优策略相当于一般的强化学习问题，可以通过大量的强化学习方法完成。但是我们现在需要假定\ninput process\n是完全不可感知的，在这种条件下，一般强化学习方法学习到的最优策略 π̂* 的价值函数实际上是与\ninput process 无关的，其价值函数用 Q(s′,a′)\n表示，其满足：\nmaxa′ ∈ 𝒜Q(s′,a′) = 𝔼z′maxa′ ∈ 𝒜Q(s′,a′,z′)\n所以现在解决 input process\n未知条件下的最优策略求解问题就是最重要的。\nMeta RL with Domain\nKnowledge\n总之就是又阐述了一边 AABR\n分为离线和在线两个训练过程，离线训练一个元算法之后在线训练一个个性化 ABR\n算法。那么两个问题就是：\n\nHow to obtain a good parameter initialization for\nfast-learning?\nHow to efficiently learn tailor-made ABR algorithms\nonline?\n\n\nModel Agnostic Meta-Learning\n总之就是选定了 MAML 作为 AABR 的核心算法，MAML\n的论文后面慢慢推着看。\n不过这一部分也阐释了为何 MAML 适合用于这个场景，原文是：\nWe find that model agnostic meta learning (MAML) is quite suitable in\npersonalized ABR scenarios where the network traces on each user are\nquite limited.\nSpecifically, MAML consists of an inner loop and an outer loop.\n\n也就是说从数据集的角度和训练流程的角度上说，MAML\n和这个实验场景的契合度比较高。\nLeveraging Domain Knowledge\n总体的含义是设计了一个模拟器用于生成数据以及相关的启发式算法，一方面补充了现实世界中数据量不足的问题，另外一方面其代表的启发式算法可以在\npolicy 无法处理某些状态的时候作为 backup 使用。\n注：这一部分可能需要结合下面的 overview\n仔细学一下，然后对这里做一些扩充，因为这里模拟器的细节应该是做数据扩充的重要部分。\nAABR Overview\n系统的大致结构为：\n\nBasic Training Algorithm\n在设计网络的输入的时候首先需要考虑的是什么才是真正需要考虑的状态，这篇文章采用的方式是首先将所有可以使用的状态都作为输入以训练一个\nteacher\nnetwork，之后采用类似模仿学习的方式，采用类似决策树等较为轻量级的模型去模仿神经网络的策略，之后再使用决策树剪枝的方式去获取真正有意义的非平凡状态。\n这个方法似乎是比较好玩的一个方法，用于筛选真正有用的输入状态。\n\n这里剪枝的目的也是为了压缩最后的成本。\n最后筛选出来的状态包括：\n\n上一次选定的视频块质量 qt\n目前的缓冲区占用率 bt\n前 k\n个视频块传输时网络吞吐率 Ct\n前 k 个视频块的下载时间\nDt\n前 k 个视频块的应答时间\nPt\n\n这里为了控制成本，实验中选取 k = 5。\n另外，为了保证模型的泛化性，这里需要将参数正则化，这样至少能保证模型面对完全没有经历过的网络环境不至于将其认为非法输入。\n模型的输出和正常的 AC 网络没有很大的差别，都是 Actor 网络输出一个\nsoftmax 后的概率张量表示各个行为的决策概率，而 Critic\n网络输出一个标量表示对当前状态的价值评估。\nMaximum Entropy PPO (ME-PPO)\n这里的训练策略是 ME-PPO，其与 PPO\n的差别在于最优行为的定义里纳入了熵：\n$$\na_t^* := \\mathop{\\rm argmax}_a \\hat{\\mathbb{E}}_t\\left[\\sum_t\n\\gamma^t(r_t + \\lambda H^{\\pi_\\theta}(s_t))\\right]\n$$\n这里定义熵为：\nHπθ(st) =  − ∑a ∈ 𝒜πθ(a∣st)ln πθ(a∣st)\n元学习要求在离线环境下更重视 exploration 而在线环境下更重视\nexploitation。这里将熵纳入考虑，如果策略 πθ 对动作空间\n𝒜\n中的所有动作给出的概率约趋向于平均，则熵越高，从而越会支持这样的选择。\nME-PPO 的具体策略是基于 Dual-PPO 的 double clip 策略，具体如下：\n$$\n\\begin{aligned}\n\\mathcal{L}^{\\rm PPO} &amp;:= \\min\\left(\\frac{\\pi_\\theta(a_t \\mid\ns_t)}{\\pi_{\\theta_{\\rm old}}(a_t \\mid s_t)}(\\theta) \\hat A_t, {\\rm\nclip}\\left(\\frac{\\pi_\\theta(a_t \\mid s_t)}{\\pi_{\\theta_{\\rm old}}(a_t\n\\mid s_t)}(\\theta), 1 - \\varepsilon, 1 + \\varepsilon\\right)\\hat\nA_t\\right) \\\\\n\\mathcal{L}^{\\rm Actor} &amp;:= \\begin{cases}\n\\hat{\\mathbb{E}}_t[\\max(\\mathcal{L}^{\\rm PPO}, c\\hat A_t)] &amp; \\hat\nA_t &lt; 0 \\\\\n\\hat{\\mathbb{E}}_t[\\mathcal{L}^{\\rm PPO}] &amp; \\hat A_t \\geq 0 \\\\\n\\end{cases}\n\\end{aligned}\n$$\n这里 Ât\n是优势函数，定义为：\nÂt := rt + γ(Vπθ(st + 1)+λHπθ(st + 1)) − Vπθ(st)\n这里 c, ε\n是用来控制梯度的超参数。\nAABR 中的 Critic 网络的训练策略就是最小化优势函数的均方误差：\n$$\n\\mathcal{L}^{\\rm Critic} := \\frac12 \\hat{\\mathbb{E}}_t[A_t]^2\n$$\n从而整体的 loss 可以总结为：\n$$\n\\nabla\\mathcal{L}^{\\rm MEPPO} := -\\nabla_\\theta \\mathcal{L}^{\\rm\nActor}(\\pi_\\theta, \\hat A_t) + \\nabla_{\\theta_v} \\mathcal{L}^{\\rm\nCritic}\n$$\n\n此外，由于算法对 λ\n较为敏感，我们需要在训练过程中不断调节 λ，调节方式较为简单：\n$$\n\\lambda \\leftarrow \\lambda + \\alpha[H^{\\pi_\\theta}(s_t) - H^{\\rm\nTarget}]\n$$\n这个目标在于熵逐步接近目标的时候衰减 λ 以减缓接近速度。\nMeta-Learned Policies\nfor Offline Stage\n注：具体的训练方式后续补充。\nModel-Agnostic\nMeta-Learning for Fast Adaptation of Deep Networks\n这是 MAML 训练方法的原始论文，看情况有没有时间做一个复现。\n文章的主要贡献就是一个元学习方式，并且似乎泛用性很广：\nIn this work, we propose a meta-learning algorithm that is general\nand model-agnostic, in the sense that it can be directly applied to any\nlearning problem and model that is trained with a gradient descent\nprocedure.\n\n元学习的核心在于训练好的模型能够迅速通过少量数据学习到新的任务，并且其能够应用到大量的下游任务中。这篇文章将训练模型理解为在模型内部建立起适用于某种任务的特征表示，如果这种表示能够适合于多种任务，那么我们只需要进行合适的微调就可以迅速适应新的任务。如果从动力系统的角度理解，我们需要提高需要完成的任务的\nloss 对参数的敏感度，这个敏感度越高，参数的变化对 loss\n的提升的影响越大。\nModel-Agnostic\nMeta-Learning\nMeta-Learning Problem Set-Up\n这里严格定义了元学习需要解决的问题。\n首先我们需要形式化定义什么是任务，这篇文章定义为：\n$$\n\\mathcal{T} := \\{\\mathcal{L}(\\b x_1, \\b a_1, \\cdots, \\b x_H, \\b a_H),\nq(\\b x_1), q(\\b x_{t + 1} \\mid \\b x_t, \\b a_t), H\\}\n$$\n这里 ℒ 表示 loss，$q(\\b x_1)$ 是初始状态的分布，$q(\\b x_{t + 1} \\mid \\b x_t, \\b a_t)$\n是状态转移的概率分布，H 是\nepisode\n的长度。这个定义同时涵盖了普通的强化学习和监督学习，其中监督学习中 H = 1。\n模型本身描述为一个函数 f，其接受当前状态 $\\b x$ 并给出输出 $\\b a$，即 $\\b a =\nf(\\b x)$。模型不断在该任务中给定 $\\b\na_1, \\b a_2, \\cdots, \\b a_H$，而 loss ℒ\n则给出了实际的反馈，这种反馈可以是分类问题中的失配损失或者 Markov\n决策过程中的负收益。\n在元学习中我们需要考虑一系列的任务的分布，这里记作 p(𝒯)。如果我们要求 K shot learning，对于每一个从 p(𝒯) 抽取的具体任务 𝒯i，我们需要再通过 qi 抽取 K 个样本，并且考虑 ℒ𝒯i\n的反馈。\n之后直接搬一个论文原句，也应该是论文后面算法设计的主要出发点：\nThe model f is then\nimproved by considering how the test error on new data from\nqi changes\nwith respect to the parameters.\n\nA Model-Agnostic\nMeta-Learning Algorithm\n这里提供了算法设计，一个关键词就是之前提到的敏感度。\n考虑用参数 θ 表示的模型\nfθ。在学习具体的任务\n𝒯i\n的时候，参数的更新方式为：\nθ ← θ − α∇θℒ𝒯i(fθ)\n为了简化记号，我们假设在元学习之后学习具体任务仅用了一次梯度更新，此时任务\n𝒯i 的最优参数就是\nθi′ := θ − α∇θℒ𝒯i(fθ)，那么元学习的目标是：\nminθ∑𝒯i ∈ p(𝒯)ℒ𝒯i(fθi′) = minθ∑𝒯i ∈ p(𝒯)ℒ𝒯i(fθ − α∇θℒ𝒯i(fθ))\n那么还是使用简单的梯度下降，元学习中的参数更新就是：\nθ ← θ − β∇θ∑𝒯i ∈ p(𝒯)ℒ𝒯i(fθi′)\n在这里我们注意到出现了二阶梯度，部分深度学习框架能够支持这一操作，但本文也同样指出作一阶近似（即舍去二阶及以上的高阶项）是可行的。\n基于此，MAML 的整体框架为：\n\nSpecies of MAML\n本文这里举出了监督学习和强化学习中运用 MAML\n的例子，这里我们只关注强化学习。\n强化学习特化的 MAML 主要关注的是 loss\n的选定，这里选定的就是最经典的负收益。另外，此时 q𝒯i\n实际上就是环境中的状态转移概率分布：\n$$\n\\mathcal{L}_{\\mathcal{T}_i}(f_\\phi) = -\\mathbb{E}_{(\\b x_t, \\b a_t) \\sim\n(f_\\phi, q_{\\mathcal{T}_i})} \\left[\\sum_{t = 1}^H R(\\b x_t, \\b\na_t)\\right]\n$$\n从而，强化学习特化的 MAML 算法为：\n\n这之后就是一些实验结果了，感觉没啥意思了。\nLearning\nto Adapt in Dynamic, Real-World Environments through Meta Reinforcement\nLearning\n这篇文章似乎没有官方的 code base，只有两个 community code\nbase，现在可以在 这个链接\n获取，分别是 Tensorflow 和 Pytorch 版本。\nAbstract &amp; Introduction\n需要解决的问题依然是生成数据很困难以及测试环境中无法预料到的数据可能导致所训练的策略失效，引言之中也基本上叙述了人类可以很快适应自身机体发生的变化和外界环境发生的变化，提出了如果模型经历了足够多的环境微扰，其就可以很快学习适应新环境。\n相比较于原先的 meta RL\n对任务的定义，这篇文章提出的模型能够处理每个时间步环境或者任务都在变化的情景。也就是说，原先的\nmeta RL 不过是提前预设好了需要解决什么样的任务，并且每一个 RL trajectory\n仅会属于一个任务，而这篇文章的 RL trajectory\n中可以涵盖多种任务并且任何时间都可以切换。所以这篇文章的 meta RL 更为\ngeneral。\n本文也是有 trade off 的，主要表达如下：\nBy specifically training a neural network model to require only a\nsmall amount of experience to adapt, we can enable effective online\nadaptation in complex environments while putting less pressure on\nneeding a perfect global model.\n\n也就是说，这篇文章为了能够在少数据条件下快速适应新环境，并不会强制要求这个模型在\nglobal 环境下表现到 perfect。\n总而言之，这篇文章主要强调学得快，学习速度大约是每个新任务需要在真实世界中经历\n1.5 到 3 小时，不到原有 model-free RL\n方法学习时间的十分之一。并且，在同等数据量条件下，这篇文章的模型效果也比其他方法优越。此外，为了展示本文模型的学习能力，其将其真实部署在了机器人上，来学习真实世界的情况。\nRelated Works\n首先提到最原始的强化学习方法没有泛用性，以及 model-free RL\n往往需要大量和真是环境交互从而不实际。发展为 model-based RL\n之后，就需要面临对环境建模的 model\n需要在不同的任务之间调整的问题，首先否决了单一的全局模型，而先前有人尝试通过\nGP\n方法合并模型不确定性从而让模型能够表示不同的环境，然而这个方法做出了额外的假设且拓展性差且难以运用到高维空间，而本文提出的结果能够通过观察从而快速切换到新的环境。\n这里的问题就是我是真的没有太看懂这个 model\n到底是对环境建模的模型还是最后要学习的 policy。\n\n还有一种处理方式是首先学习一个全局模型，在测试的时候通过梯度下降进行微调。此外，还有工作表明不需要完美的全局模型，可以微调先验知识来处理小变化。然而，这些方法面临着模型的训练目的与测试时的使用方式之间的不匹配的问题。本文通过明确训练一个能快速有效适应的模型来弥合这一差距。\nPreliminaries\nModel-Based Reinforcement\nLearning\n马尔可夫决策过程在这里建模为 (𝒮,𝒜,p,r,γ,ρ0,H)。这里\n𝒮 是状态空间，𝒜 是动作空间，p(s′∣s,a)\n是环境状态转移概率，r : 𝒮 × 𝒜 → ℝ 是奖励函数，ρ0 : 𝒮 → ℝ+\n是初始状态概率分布，γ\n是奖励衰减常数，H\n是轨迹长度。\n一条轨迹描述为 τ(i,j) := (si,ai,⋯,sj,aj,sj + 1)，我们的目标是求取最优策略\nπ : 𝒮 → 𝒜\n使得累计收益期望最大。\nmodel-based RL 目标是近似处理 p(s′∣s,a)，这个模型也被称为\ndynamics model。\nMeta Learning\n一般的元学习需要给定假设，即训练用的任务和最终的测试任务都是从同一个任务分布\nρ(𝒯)\n中抽取。元学习的目标是获取一个学习流程 $\\theta' := u_\\psi(\\mathcal{D}^{\\rm\ntr}_{\\mathcal{T}}, \\theta)$ 以通过小数据集 $\\mathcal{D}^{\\rm tr}_{\\mathcal{T}}$\n来学习任务 𝒯，学习过程可以表示为：\n$$\n\\min_{\\theta, \\psi} \\mathbb{E}_{\\mathcal{T} \\sim\n\\rho(\\mathcal{T})}\\left[\\mathcal{L}(\\mathcal{D}^{\\rm\ntest}_{\\mathcal{T}}, \\theta')\\right]\n$$\n其中 $\\theta' := u_\\psi(\\mathcal{D}^{\\rm\ntr}_{\\mathcal{T}}, \\theta)$。\n这里的记号是真的复杂，事实上训练过程应该是函数 uψ，训练过程用参数\nψ\n代表，其输出为训练后的最优参数 θ′，而 θ 表示初始化参数。\n另外注意，θ\n这里是模拟环境的模型的参数，而非 policy 的参数。\n\nGradient Based Meta Learning\nMAML\n就是一种基于梯度的元学习方法，其最主要的目标是学习一个较好的参数初始化保证在少数调整中即可实现较好的下游任务。\nMAML 的 uψ\n就是一般的梯度下降：\n$$\nu_\\psi(\\mathcal{D}^{\\rm tr}_{\\mathcal{T}}, \\theta) = \\theta -\n\\alpha\\nabla_\\theta \\mathcal{L}(\\mathcal{D}^{\\rm tr}_{\\mathcal{T}},\n\\theta)\n$$\n如果学习率 α\n是一个固定参数，那么 ψ = ⌀，如果 α\n是一个元学习过程中需要学习的参数，那么 ψ = α。\n即使看起来 uψ\n是平凡的，但是这种方法的表达能力和下面介绍的方法是持平的。\nRecurrence Based Meta\nLearning\n这里借用了 RNN 的思想，在这个方法中，更新函数 uψ\n始终需要不断学习，其中 ψ\n是用于更新 RNN 隐含层状态的参数，而 θ 是余下的参数。\n这里是真的真的真的没看懂，这在说啥？是我前置知识欠缺太多了？\n只能希望下面能有个稍微好一点的说明。\n\nMeta Learning for\nOnline Model Adaptation\n之前提到过本文的 trajectory\n中任务可以随着时间步推进而变化，所以本文设定的目标是根据前 M 个时间步的数据预测未来 K 个时间步情况，这里 M, K 都是固定的超参数。\n所以在这样的设定下，训练目标就是：\n$$\n\\begin{aligned}\n\\theta_{\\mathcal{E}}' &amp;= u_\\psi(\\tau_{\\mathcal{E}}(t - M, t - 1),\n\\theta) \\\\\n\\min_{\\theta, \\psi}&amp; \\mathbb{E}_{\\tau_{\\mathcal{E}}(t - M, t + K)}\n[\\mathcal{L}(\\tau_{\\mathcal{E}}(t, t + K), \\theta_{\\mathcal{E}}')]\n\\end{aligned}\n$$\n而这里 loss 定义为：\n$$\n\\mathcal{L}(\\tau_{\\mathcal{E}}(t, t + K), \\theta_{\\mathcal{E}}') :=\n-\\frac{1}{K} \\sum_{k = t}^{t + K}\n\\log\\hat{p}_{\\theta_{\\mathcal{E}'}}(s_{k + 1} \\mid s_k, a_k)\n$$\nGrBAL 采取的更新策略为：\n$$\n\\theta_{\\mathcal{E}}' = u_\\psi(\\tau_{\\mathcal{E}}(t - M, t - 1), \\theta)\n= \\theta_{\\mathcal{E}} + \\psi\\nabla_\\theta\\frac{1}{M} \\sum_{m = t -\nM}^{t - 1} \\log\\hat{p}_{\\theta_{\\mathcal{E}}}(s_{m + 1} \\mid s_m, a_m)\n$$\nReBAL 这里又是没看懂，所以这个基于循环模型的到底是个什么东西。\nModel Based Meta\nReinforcement Learning\n这一部分就是在讲解如何在线上做\nadaptation，我觉得整体不如直接看算法直观：\n\n","categories":["【论文笔记】计算机"]},{"title":"2023 年 9 月论文笔记","url":"/2023/09/01/paper-2023-09/","content":"博士生涯正式开始了，首先先看看论文吧。\n\nNebula\n- Reliable Low-latency Video Transmission for Mobile Cloud Gaming\nIntroduction\n云游戏（Mobile Cloud Gaming /\nMCG）系统的目标是高质量传输游戏内容，一般而言具有下列特征：\n\n轻量级的客户端（手机等终端）\n相对重量级的云端服务器\n分布广泛但是具有不可预测性的移动网络\n\n现行的云游戏系统往往针对家用定点游戏（原文是 sedentary gaming at\nhome，我猜是类似主机游戏或者用户一般不会到处走动的手游），这类云游戏系统往往通过\nWebRTC 等协议实现较低传输延迟，然而可能会导致较低的画质，从而影响\nQoE。但是移动网络的带宽不确定性、丢包率高、公网传输不稳定等问题也是一大挑战。\n目前，ABR 算法常用于应对带宽波动，FEC（Forward Error\nCorrection，前向纠错）算法常用于应对丢包。然而，ABR\n受限于难以精确预测可用带宽，FEC\n受限于较高的成本。此外，这两类算法也较少同时使用。\n然后就是本文：\nIn this paper, we introduce Nebula, the first end-to-end framework\ncombining (1) video distortion propagation modelling\nwith (2) adaptive frame-level FEC and (3) joint\nvideo encoding bitrate and (4) FEC redundancy\ncontrol for MCG over mobile networks (see Figure 1).\n\n说实话四层 buff 确实让人看得有点迷糊。\nNebula\n的基础是对误差在多个游戏帧之间的传播情况建模，以考虑视频信号的失真情况。这种方案相较于直接在整组图片（Group\nof Pictures / GoP）上应用 FEC，Nebula 使用了帧级别的 FEC，从而 GoP\n中的帧将会按照时间顺序的接近程度被不同程度地保护。这是显然的，因为\nNebula\n毕竟考虑的是错误传播，越远的帧上的错误传播情况自然更加难以把握。这样的操作可以尽可能压缩端到端传输延迟，并且显著减少错误在\nGoP 之中的传播。此外，Nebula\n显然也采用了一些用来应对带宽波动的算法，但是这显然不是文章的重点。\n采用的 baseline 有标准 TCP Cubic based、标准 WebRTC based、BO 和\nESCOT。具体的一些评估还是看后面具体叙述吧。\nBackground &amp; Related Works\n这一部分不局限于云游戏，还一并叙述了实时视频传输场景的一些工作（Question\n#1 - 实时视频传输是不是指的是直播场景呢？）。\n首先是简单讲了一下实时视频传输场景的工作，首先讨论了聚焦于 FEC\n算法的工作。本文指出这些工作虽然成功通过 FEC\n实现了较为可靠的传输，但是难以满足低延迟的要求。在 FEC\n算法之外，本文讨论了常见的实时视频传输场景中的常用算法架构。首先 WebRTC\n偏好降低延迟以实现实时传输而非提高画质，此外 TCP Cubic\n等方法并不将延迟纳入考虑，这些算法或多或少的偏颇考量导致了这些方法难以做到两全。\n而和云游戏相关的工作本文似乎并没有介绍很多，但是点出了这么一句话：\nA few works target specifically MCG due to its novelty.\n\n感觉和学长和我说的“现在云游戏相关的论文好发表”有一种异曲同工之妙。\n文章之中所有和云游戏相关的工作都是采用了 GoP-level\nFEC，这虽然保证了较为正确的传输，但是也使得 MTP latency 很高。MTP\nlatency 就是 Motion to Photon\nLatency，指的是游戏中玩家作出操作后反映到画面变化上所产生的延迟。显然，过重的纠错负担会使得构建新的视频帧和解码新视频帧耗时增加，明显加重了\nMTP latency。在这之后，自然是吹一下自己使用的 frame-level FEC\n在降低延迟上具有相当的实力。\nModelling the Joint\nSource/FEC Rate Problem\n这一章主要讲解了如何针对现有问题建模。云游戏为了保证实时性，或多或少依赖于有损压缩和传输，然而云游戏对\nMTP latency 有着相当高的要求。\nFEC 算法虽然能一定程度上抑制传输失真，但是由于 FEC\n的冗余带来了新的传输成本，这导致了可用带宽降低。另外一方面，网络拥塞可能导致连续大量的丢包（文中描述为\nburst of losses），此时 FEC 也很难做到恢复原有信号，而这种拥塞也有可能是\nFEC 自身导致的。当前的工作也基本都将 FEC 应用在整个 GoP 上，导致 MTP\nlatency 大幅上升（原因似乎是在展示某个 GoP\n的任何一张图片前，必须完整解码整个\nGoP，和我之前想的有一些不同），并且导致在有限带宽条件下画质降低。\n本文首先提出了一个误差函数。对于 K 个分辨率为 M × N 的帧，对 1 ≤ m ≤ M, 1 ≤ n ≤ N, 1 ≤ k ≤ K，定义函数\nfk(m,n)\n表示传输前第 k 帧在 (m,n) 坐标上的像素值，f̂k(m,n)\n则是传输后解码得到的像素值。使用均方差的方式定义传输误差：\n$$\n{\\rm MSE} := \\frac{1}{MNK} \\sum_{k = 1}^K \\sum_{m = 1}^M \\sum_{n = 1}^N\n[f_k(m, n) - \\hat f_k(m, n)]^2\n$$\n下面我们需要考虑全过程中可能产生失真的地方，这里主要考虑三处。\n第一是编码失真 De。对于编码率\nRe，编码失真描述为：\n$$\nD_e := \\frac{\\theta_1}{R_e - R_0}\n$$\n这里 θ1, R0\n均为适当的参数，事实上这就描述了编码失真和编码率大致成反比例函数关系。\n第二是传输失真 Dc。传输失真的衡量较为简单，记丢包率为\nΠ，则：\nDc := θ2Π\n这里 θ2\n是适当的参数，传输失真与传输丢包率成正比例关系。\n第三是解码失真 Dd。在以往的工作中，将\nFEC 应用在 GoP level 时，由于在不考虑 burst package loss 的条件下 GoP\n内部丢包时均能正确解码，所以这里不需要考虑错误传播。然而将 FEC 应用在\nframe level 时，就需要考虑 GoP 内部丢失帧导致的错误传播。若将 I\n帧出现频率记为 β，那么解码失真描述为：\n$$\nD_d := \\frac{\\theta_3\\Pi}{\\beta}\n$$\n这里 θ3\n是适当的参数，这表明丢包率越高，解码失真越高，并且 I\n帧率越高，其恢复能力越强，从而使得解码失真越低。\n综合得到全过程失真为：\n$$\nD := D_e + D_c + D_d = \\frac{\\theta_1}{R_e - R_0} + \\theta_2\\Pi +\n\\frac{\\theta_3\\Pi}{\\beta}\n$$\n那么可以得到这一套系统的峰值信噪比（即 PSNR）为：\n$$\n{\\rm PSNR} = 20\\log_{10}({\\rm MAX}_I) -\n10\\log_{10}\\left(\\frac{\\theta_1}{R_e - R_0} + \\left(\\theta_2 +\n\\frac{\\theta_3}{\\beta}\\right)\\Pi\\right)\n$$\nPSNR 的定义是：\n$$\n{\\rm PSNR} :=\n10\\log_{10}\\left(\\frac{\\mathrm{MAX}_I^2}{\\mathrm{MSE}}\\right) =\n20\\log_{10}({\\rm MAX}_I) - 10\\log_{10}(\\mathrm{MSE})\n$$\n这里 ${\\rm MAX}_I$\n指的是每个像素点可能的最大取值。具体而言，如果某一类图像中每个像素均使用\nB 位二进制表示，那么 ${\\rm MAX}_I = 2^B - 1$。\n而这里 ${\\rm MSE}$\n就是上面提到的传输前后的均方差误差，在这一篇文章中就是三重失真叠加得到的\nD。\n\n综上所述，本文对失真所采用的建模方式可以展现为：\n\n但这里有个比较奇妙的地方就是，图的注释里面说了 Π = 0.1%，每一张图也都给定了 β，那么为何 Dc, Dd\n还会跟随 Re\n变化而线性变化呢？我找了一下原论文，里面也说 θ1, 2, 3\n都是常数，理应不变化的，这里就有点不太理解了。\n\n在此基础上，云游戏系统的目标应当是在满足实时性的约束下最小化失真，所以可以使用有约束优化问题的方式建模云游戏问题。我们能获取到客户端测量的部分网络参数，如往返时延\n${\\rm RTT}$、丢包率 Π、最大可用带宽 μ、MTP latency ${\\rm MTP}$，此外，我们还知晓编码率 Re\n和最大容忍延迟 Td。\n云游戏最重要的一项指标就是 MTP latency，而 MTP latency 与发送速率\nR = Re + Rr（这里\nRr\n是冗余率）以及可用带宽 μ\n均不成反比，和排队延迟 $Q_d = {\\rm RTT} - {\\rm\nRTT}_{\\rm min}$ 成正比。\n基于此，每一帧都可以有以下建模。首先定义优化目标为：\n$$\n\\{R_e, R_r\\} = \\mathop{\\rm argmin}(D + \\varphi{\\rm MTP})\n$$\n其中：\n$$\n\\begin{aligned}\nD &amp;= \\frac{\\theta_1}{R_e - R_0} + \\theta_2\\Pi +\n\\frac{\\theta_3\\Pi}{\\beta} \\\\\n{\\rm MTP} &amp;= \\frac{\\alpha_1}{\\mu} + \\frac{\\alpha_2}{R_e + R_r} +\n\\alpha_3Q_d + \\alpha_4 \\\\\n\\end{aligned}\n$$\n优化约束则为：\n$$\n\\begin{cases}\n{\\rm MTP} \\leq T_d \\\\\nR_e + R_r \\leq \\mu \\\\\n\\end{cases}\n$$\n这里 φ 是超参数，θ1, 2, 3, R0\n都是根据编码器设定的，而 α1, 2, 3, 4\n则是根据回归方式得到的有 95%\n置信度的参数，回归所使用的数据集涵盖了有线和 WiFi 等多种网络环境。\n在给定帧位置 k 和丢包率\nΠ(t)\n的条件下，在发送到该帧时需要发送的总包数为：\n$$\nn := \\begin{cases}\nk &amp; \\Pi(t) = 0 \\\\\n\\max(k + 1, \\lceil k(1 + \\omega(F - f)\\Pi(t))\\rceil) &amp; \\Pi(t) &gt;\n0, {\\rm cut}\\ D_d \\\\\n\\max(k + 1, \\lceil k(1 + \\Pi(t))\\rceil) &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n这个公式实际上是冗余率的控制公式，也就是在给定 Π 的条件下，为了发送 k\n个有效包，需要总共发送多少个包。\n这里需要说明第二项之中的 ω, F, f\n参数。首先我们能够注意到，当 I 帧率 β\n降低的时候，由于错误传递的链条增长，解码失真会更加严重。这里本文提出的方法是对\nGoP 中的帧做不均匀保护，这也就是这些参数的来源。其中 f 是该帧在 GoP 之中的位置，F 则是总帧数，针对该帧的冗余率则是\nkωΠ(F−f)，其中\n0 &lt; ω &lt; 0.4\n是一个经验参数，根据丢包率 Π\n调节。可以发现，离 I 帧越近的帧（即更小的 f），会带来更多的冗余以及保护。\n\n综上所述，本文将云游戏的问题建模为一个带约束的优化问题，即在满足即时性（MTP\nlatency\n用上界限制）和预防网络过载（发送速率用上界限制）的条件下尽可能地降低失真，通过在每个离散时间点求解该优化问题即可得到下一段时间使用的编码率\nRe\n和冗余率 Rr。\nDistortion Minimization\nFramework\n然后就是系统架构了：\n\n系统架构中主要的部分是 parameter tuner 和 controller。parameter tuner\n接受网络环境的测量值，输出 Re, Rr\n等参数，之后提供给 controller 来控制编码器和 FEC\n编码。上述部分是服务端的结构，而这一系统在客户端还包括一个 network\nperformace monitor，其用于检测网络信息上传到服务端供决策。\nEncoder &amp; Decoder\n(Control Redundancy Rate)\n系统中的 FEC Coder 采用了 RLNC 编码方法，该方法生成 r = n − k\n个冗余数据包，其中 FEC 块的大小为 n 个数据包（n\n的公式在先前有叙述）。如果在块中收到任意随机 k\n个数据包，解码器即可恢复帧。paramerter tuner\n从客户端的报告中提取数据包丢失信息，并根据 GoP\n中的帧位置来调整冗余（参见方程式5）。GoP 帧的可变 FEC\n编码确保了较低的错误传播，因为导致较高传播的帧会获得更高的保护。\n将编解码器结构单独列出，得到：\n\n这里 FEC 解码器在接收到超过 k 个帧的时候就开始解码。\nAdaptive Bitrate (Control\nEncode Rate)\n之前提到过 FEC 并不能应对 burst package loss，所以类似\nABR，需要控制编码率 Re。当然，和 ABR\n不同的地方是这一套系统还需要控制捕捉渲染帧的频率（说白了就是云游戏并不是所有帧都会渲染，在资源比较紧张的时候，会减小渲染频率，这也应该是导致丢帧的一个因素，只不过这里是主动丢帧）。\n但是似乎带宽波动最终一般导致的是延迟波动，一般不会导致丢包。原文大概是：\nThe resulting video dynamically changes resolution with minimal\ndistortion as few packets are lost due to the bandwidth variations.\n\n这一套系统也在上一幅图中有所体现，即 Source Rate Control。\nImplementation\n编码器的实现就不管了，总之就是讲了一下用了些什么库之类不是很重要的事情，具体结构之前也已经说过了，没什么新的。\n客户端的网络性能检测器（Network Performance\nMonitor）主要是计算可用带宽：\n$$\n\\mu := \\frac{\\sum_{f = 1}^{F_s}\\sum_{p = 2}^kS(p)}{\\sum_{f =\n1}^{F_s}t(f)}\n$$\n丢包率 Π\n定义为丢失的数据包数量与成功恢复帧之前接收到的数据包中丢失的序列号数量\nk 之比。此外，NPM 还会计算 MTP\nlatency。\n最后，这些值会通过近五次测量取平均的方式完成平滑。\n之后还有一些代码细节，这里就不管了，本文还把 Nebula 实现为 C++ 库供\nWebAPP 通过 JavaScript 调用。\nEvaluation\nbaseline\n算法已经叙述过了，这里不再叙述。有些实验参数设置这里也不再抄录，直接去原文找吧。\nNebula 系统的时延各部分占比情况如下，这里忽略了传输延迟：\n\n文章的意思是，虽然这里视频编解码时延还是较大，但是通过硬件编解码应当可以压缩到合适的范围内。所以，本文认为\nNebula 可以在不显著增加时延的基础上实现更高的纠错能力。\n在进一步的模拟实验中，本文模拟了一个带宽变化的无线网络，并在其上传输\n60 秒的 1080p 视频。几种算法的表现如图：\n\n可见只有 BO 具有较低的 MTP latency，然而 Nebula 至少保持了和 WebRTC\n持平。此外，ESCOT 由于使用 GoP level FEC，展现了较高的 MTP\nlatency。从画质（以 PSNR 衡量）的角度，BO\n通过保持低画质才实现了低延迟。TCP Cubic\n具有最高的画质，这是因为没有集成变化视频编码质量的机制，始终保持高画质。综合来看，只有\nNebula 和 WebRTC 做到了平衡画质和 MTP latency。\n如果观察具体的发包速率，则可以解释这些现象：\n\n\nBO 始终保持对带宽的低估，所以保持了低画质和低延迟\nWebRTC 相对较为保守，但已经足够完成画质和延迟的均衡\nTCP Cubic 始终选择较为激进的超额策略\nESCOT 和 Nebula 选用了相同的方式估算带宽，但是 ESCOT 一次发出一个\nGoP，Nebula 通过优化带宽使用实现了均衡\n\n后面还有用户实验，这里就跳过了。\nConclusion\n总而言之，我看下来觉得这篇文章的贡献主要是：\n\n将 FEC 降低到 frame level\n结合了 FEC 和类似 ABR 的系统，实现了时延和画质的平衡\n在更极端的条件下（这些条件令 baseline 算法崩溃）表现较好\n\n但我觉得这里的一些建模还是有点语焉不详，或许是我太菜看不懂罢了。\nQARC\n- Video Quality Aware Rate Control for Real-Time Video Streaming based\non Deep Reinforcement Learning\n又看到自己组的论文了，这下该逮着黄老师一顿狂问了。\nIntroduction\n简而言之就是一个直播 ABR，用 DRL\n来做码率决策。然而如果直接把原始图片作为模型的输入，那么状态空间可能会过大，所以本文最主要的是将这一个模型拆为\nVQPN 和 VQRL 两部分。其中，VQPN 用来预测未来的视频质量，VQRL 则基于 VQPN\n的预测和网络状态做出码率决策。为了训练\nVQRL，本文还提出了一个离线模拟器。\n主要贡献为：\n\n重新定义了 QoE，似乎指的是将以往基于码率的 QoE\n改成了从整个视频会话的角度思考\nQuality aware，但我还是不是很懂这个名词的含义，Google\n的解释为：Quality awareness is the way to promote quality activities by\nemphasizing quality at all stages of the business\n将庞大的模型拆为两部分，有效控制了状态空间的大小\n\nMotivation\n这里主要是说明码率并不能完全反映视频质量，一个静态场景的视频，高码率并不能有效提高用户感知的质量，反而会过分占用带宽导致拥堵。这里使用基于支持向量机的\nVMAF\n算法作为视频质量评估算法，其分别评估了静态背景视频、动态背景视频和混合背景视频在不同码率、不同编码器下的\nVMAF\n得分，数据显示大部分情况下在较高码率区域，码率的增长对视频质量提高的作用十分有限。所以，单纯依靠提升码率或者换用编码器都不足以有效提升视频质量。\n\nSystem Architecture\n系统结构还是比较直观的：\n\n整体上的话和 ABR\n结构类似，但是由于码率和视频质量的不成比例，所以需要有 VQPN\n来学习前一帧、网络状态和码率之间的关系，然后通过 VQRL 做出码率决策。\n这里提出 VQPN 的必要性在于，根据本文的 motivation，制约视频质量（以\nVMAF\n衡量）的因素过多（视频种类、亮度、物体数量等），导致难以简单地通过启发式等方法预测未来的码率和视频质量的关系。基于此，通过神经网络来完成这一任务就是自然的了。\n神经网络的设计是先通过 CNN 提取图像信息，然后预测部分则是一般的\nRNN。首先定义视频质量指标，对某一个给定的时间槽 t 以及其中的帧 fi，本文先在给定码率\nb 下将该帧编码后传入 VMAF\n算法计算得到 V(fi,b)，定义时间槽内的\nVMAF 分数为时间槽内各帧的平均值：\n$$\nV(t, b) := \\frac{1}{F}\\sum_{i = 1}^F V(f_i, b)\n$$\n最终这些分数会被归一化到 [0,1]\n区间中。\n该模型接受的输入是时间槽 t\n中的各个帧，先通过 CNN 提取图像特征，再通过 RNN\n提取时序特征，模型的输出则是不同码率下下一时间槽 t + 1 的视频质量（VMAF 分数）。\n损失函数是简单的均方差，下述公式中 V̂ 是 ground\ntruth。另外为了防止过拟合，增加了二次正则：\n$$\n\\mathcal{L} := \\frac{1}{B}\\sum_{b = 1}^B |V(t + 1, b) - \\hat V(t + 1,\nb)|^2 + \\lambda \\|\\theta\\|^2\n$$\n\n之后是 VQRL，一个经典的 RL\n算法。状态空间主要包括先前发送的视频质量、VQPN\n预测的未来视频质量、过去视频发送速率、过去视频接收速率、过去视频延迟梯度、过去视频丢包率。但是这里和黄老师之前处理状态空间的区别有两个，一个是多了个延迟梯度，一个是莫名其妙引入了\nFFT\n算法，目前还不是很清楚这样做的原因。决策空间显然是码率，这没有什么好说的。QoE\n使用了和以往不同的定义，这里先忽略。\n具体算法是 A3C，策略梯度部分为：\n$$\n\\nabla\\mathbb{E}_{\\pi_\\theta}\\left[\\sum_{t = 0}^{+\\infty} \\gamma^t\nr_t\\right] = \\mathbb{E}_{\\pi_\\theta}\\left[\\nabla_\\theta \\ln\\pi_\\theta(s,\na)A^{\\pi_\\theta}(s, a)\\right]\n$$\n在此基础上，为了更好平滑策略，在具体更新的时候还增加策略熵项：\nθ ← θ + α∑t∇θln πθ(st,at)A(st,at) + β∇θH(πθ(⋅∣st))\n此外，为了计算 A，需要在策略网络之外设定值网络。值网络采用\nQ learning 训练，这里就忽略掉了。\n在具体训练阶段，VQRL 因为采用了 A3C\n所以使用了多智能体可以理解，但是有关模拟器的部分可能还有点不是那么看得懂（这里悄悄偷懒不看了，真的缺失太多基础知识了，再说）。\nEvaluation\n首先是实现算法，这里数据集啥的也都先跳过，主要要说 QoE 指标设定：\n$$\n{\\rm QoE} := \\sum_{n = 1}^N(V_n - \\alpha B_n - \\beta D_n) -\n\\gamma\\sum_{n = 1}^{N - 1}|V_{n + 1} - V_n|\n$$\n这里 Vn\n表示时间 n 的视频质量，Bn\n是发送方选择的视频比特率，Dn\n代表接收方测量的延迟梯度，最后一项则表现了视频质量的平滑性。\n之后就是系统实现，一样的，网络结构和超参数这里就不抄了。不过本文最有意思的是其不是直接给出网络结构和超参数的选择，而是详细写了选择这些超参数的实验结果。比如在选择网络结构、是否加入\nFFT 和序列长度的时候，就有这些实验结果：\n\n另外的一些实验结果这里就跳掉了，基本上就是吊打 baseline。\nRelated Works\n讲了一下有关实时流量控制、视频质量评估和强化学习的一些基础工作。主要批评了一下用丢包事件调控发送速率的\nTCP 拥塞控制（你都已经丢包了才开始降速率，早就已经晚了），然后批评了一下\nPSNR、SSIM 不能很好形容视频质量，然后吹了一下 VMAF。\nSQP\n- Congestion Control for Low-Latency Interactive Video Streaming\n云游戏原来更官方的说法叫互动视频流。当然，这不是个等价的说法，毕竟远程桌面啥的也叫互动视频流。但是，至少以后介绍自己在干什么的时候就可以：“我做互动视频流传输优化的”。\nIntroduction\n本文是做一个拥塞控制算法（Congestion Control Algorithm /\nCCA），一个对互动视频流友好的 CCA 需要满足：\n\n低排队延迟。CCA\n需要探测带宽，那么就需要发送探测数据包，但是过度的探测会导致带宽被浪费在测量行为上，所以\nCCA 需要尽可能少占用带宽而能够获取尽可能精准的带宽测量。此外，CCA\n在带宽降低的时候，需要迅速撤回发送以减少排队。Cubic 和 PCC\n在这方面就不足够好\n公平性。不是很懂这篇文章里面对公平性的定义，但是我自己认为就是要公平对待每一个流？不管了，先看后面的\n友好型。就是不能饿死其他流\n视频感知。这里也没怎么看得懂，还是后面慢慢看吧\n\n感觉 CCA\n的一些基础可以看：https://www.fanyamin.com/blog/yong-sai-kong-zhi-ji-zhu-de-bi-ji-yi-li-lun-pian.html\n然后就是说，现在通用的 CCA\n可能不能满足互动视频流的需求，言下之意就是我们得专门设计一个\nCCA。本文提出了 SQP，其主要特点在于：\n\n优先考虑低延迟而非链路利用率。总而言之就是优化目标的重新排序，SQP\n首先考虑的是低延迟，即使并不能高强度压榨网络带宽\n应用特定的权衡。似乎指的是如果延迟过高或者可用带宽过低，会允许终止视频流通话\n帧关注式操作。网络排队是侦测网络参数的重要现象，部分不通过网络排队侦测网络的\nCCA 可能无法充分利用网络带宽，即使其延迟较低。而 SQP\n通过有节奏的突发传输将带宽测量值附加到帧信息中\n直接码率控制。SQP 似乎会通过调整帧级别的码率来响应拥塞，似乎又是一个\nABR 类似的东西\n竞争吞吐量。没太看懂，总之是比较猛的意思。此外似乎提到了自适应这一个属性，但\nCCA 里面什么是自适应，还真的不知道\n\nRelated Work\n直接把 ChatGPT 的翻译贴过来吧：\n适用于低延迟互动式视频流媒体的拥塞控制算法必须满足在第 1\n节中讨论的四个关键特性。各种拥塞控制算法总结在表 1 中。像 TCP-Lola\n[27]、TCP-Vegas [28] 和 Sprout（Salsify3）[21, 29]\n这样使用数据包延迟作为信号的低延迟拥塞控制算法存在一个关键缺点：它们在与排队建立的交叉流量竞争时无法实现高吞吐量。一些模式切换算法（例如\nCopa\n[14]）可能会误解自引发的排队为竞争流，导致高延迟，而其他拥塞控制算法如\nNimbus [15] 和 GoogCC（WebRTC）[17, 18]\n收敛速度较慢，在与排队建立的流量竞争时吞吐量不稳定。\n\n算法的比较表如下：\n\n用数据包延迟做信号的 CCA\n无法实现高吞吐的原因我猜测是因为这类算法一般也不会太激进，一旦遇到竞争就会导致包延迟加大，这就导致这类算法往回缩，直接退出竞争。模式切换算法不是很懂什么意思，后面还有攻击收敛速度慢导致不稳定的，这些就不再说了。\n此外还有些算法，如 BBR\n通过定期限制传输来做测量，这显然不适用于对实时性有高要求的互动视频流（毕竟做测量的时候就不能发包，这太恐怖了）。PCC\n算法目标是较为精准地测量网络，结果就是收敛速度慢。\n最后贴一个总结：\n拥塞控制算法使用基于速率或基于窗口的机制来在拥塞情况下控制传输速率。基于速率的拥塞控制算法更适合视频流媒体，因为数据包传输是无突发的，而基于窗口的机制可能会在发送端阻塞帧传输，使编码器速率控制变得复杂（例如，Salsify-Sprout）。基于速率的拥塞控制算法的另一个好处是它们的内部带宽估算可以直接用于设置视频比特率，而基于窗口的机制需要额外的机制来设置视频比特率。\n\nPreliminary Study\n这里就直接开始拿实验结果攻击之前的算法了。\nVariable Bandwidth Link\n大概就是让带宽从 20 Mbps 突降到 5 Mbps\n然后拉回来，主要观察算法能不能觉察到带宽突降并保持低延迟，并且在带宽恢复的时候能够觉察到资源恢复并尽快拉高传输。\n\n可以看到 Cubic\n几乎打满了带宽利用，基本上就是猛猛参与竞争，但相应的就是延迟很高。其余的算法基本上能保持较低延迟，其中\nSprout 和 Copa 0.1 保持最好，但是利用率并不理想。PCC Vivace、GoogCC、BBR\n适应较慢，基本上还是出现了延迟峰值。PCC 和 Copa Auto\n则直接爆了，在低带宽时期保持了很高的延迟。\n后面就从算法原理的角度批判了一下 BBR\n的设置很容易导致延迟（对在途包数量有限制），之后批判 Copa\n容易误判现象导致延迟。\n之后是比较收敛性，显然 PCC 和 GoogCC\n是不理想的，明显注意到在带宽恢复的时候这两个算法耗费了很长时间恢复。\n综上，互动视频流对 CCA\n的要求为：“拥塞控制算法必须能够快速识别链路容量，而不引起排队延迟，并在延迟是自引发的情况下迅速退避”。\nShort Timescale Variations\n这一部分主要是观察各个算法在时间微观尺度上的行为。\n\nCopa 的延迟波动极大，可以注意到其各个帧的发送率波动相当之大。BBR\n则更为离谱，其由于在途包数量限制和阻塞发送测量网络的行为，其中间直接出现了极低的数据包发送率。相比较之下，Vivace\n这一类基于速率的算法更适合互动视频流，其内部对发送速率的估算显然可以作为码率决策的参考。与其他类型的\nCCA\n相比，其他算法做码率决策的时候需要用其他参数七弯八拐得到决策，不如基于速率的算法直观和简单。\nDesign\nSQP 目标是：\n\n提供实时带宽估算\n在竞争条件下提供有竞争的吞吐量\n\n整体结构为：\n\n这里直接进入各个组成部分细节的讨论。\nBandwidth Sampling\n做带宽侦测，目标就是精确掌握当前可用的带宽大小，以尽可能利用并且减少排队、避免传输暂停（显然\nBBR 的神奇设计给本文作者留下了深刻的印象）。SQP\n的逻辑是，将某一个帧的各个数据包以略大于网络承载量的速率发送，以形成小范围的排队。如果视频的平均码率小于瓶颈链路可用流量，就意味着先前的队列可以在下一帧到达前排空。\n此外，SQP 的特点在于其测量链路可用流量的粒度为子帧（在 60FPS\n下粒度最大为 16.66 毫秒）\n\n假定某视频的帧间隔时间为 I（这是固定的，60FPS 下就是 16.66\n毫秒），并且假定此时帧在给定码率下大小为 F，那么 SQP 会以高于 F/I\n的速率发送这些数据包。如果没有竞争流，这些包的到达时间将会反映当前的可用链路带宽（如上图的红色点）。我们有以下公式：\n$$\nS = \\frac{F}{R_{\\rm end} - S_{\\rm start} - \\Delta_{\\rm min}}\n$$\n这里 $R_{\\rm end}$\n是最后一帧到达时间，$S_{\\rm start}$\n是第一帧发出时间，$\\Delta_{\\rm min}$\n是最小单向延迟（在第一次发送的时候就已经测量，之后不再变化），通过上图我们可以看出，这实际计算出了红色点所在直线的斜率，从而构成了对当前链路可用带宽的估计。\n可以注意到，上述计算成立是基于没有充分利用链路，因为两帧之间依然存在链路空闲（前一帧已经完全发送，但是后一帧还没编码完毕，称为无跨帧排队），这也就是图\n(a) 所显示的。这个时候第二帧的第一个数据包出现的单向延迟 Δ 等于第一帧的第一个数据包 $\\Delta_{\\rm min}$，此时 SQP\n会试图提高码率，尝试提高视频质量。\n但如果过分估计了可用带宽，则可能出现图 (b)\n的现象，此时出现了跨帧排队。这个时候第二帧的第一个数据包出现的单向延迟\nΔ 会大于第一帧的第一个数据包\n$\\Delta_{\\rm\nmin}$。此时使用先前的公式计算出的 S\n是图中虚红线的斜率，这个计算值会小于先前的计算，这意味着 SQP\n需要降低码率以排空队列。\n现在我们需要思考，SQP\n对带宽的估算是基于短时爆发流量而非视频平均码率。此时如果出现了较小的帧（例如游戏中打开了静态菜单界面等相对信息量较少的页面，此时编码器并不会完全遵守所请求的码率，而是会编码出一个小帧），如图\n(c)\n所示。若按照原先的公式，这里的带宽估计值将会被计算为图中较短的虚红线的斜率，这显然过低了。所以我们需要做出修正：\n$$\nS = \\frac{F\\gamma}{R_{\\rm end} - S_{\\rm start} - \\Delta_{\\rm min} +\n(R_{\\rm end} - R_{\\rm start})(\\gamma - 1)}\n$$\n这里 γ\n是帧的大小比例。该式子在数学上成立是显然的。\nTracking Minimum One-way\nDelay\n这里主要探讨了 $\\Delta_{\\rm min}$\n的计算，SQP\n里面应该有一个时间窗口一直计算每一帧的最小单向延迟，并取窗口中的最小值作为\n$\\Delta_{\\rm\nmin}$。这里主要是窗口的大小应当如何设定，如果窗口过小，则由于记忆的延迟数据过少，很有可能无法感知到之前自引发的排队，导致一味降低码率。如果窗口过大，虽然可以让\nSQP 更快从自引发排队中恢复，但是 SQP\n也更容易受到其他流量的影响，降低吞吐量份额。\nSQP 采取的窗口大小为 $2 \\times {\\rm\nsRTT}$，这是一个动态的窗口设置。这一设置的好处在于，如果出现了自引发排队，那么随着\n${\\rm sRTT}$\n上升，窗口大小也随之上升，从而促进排空队列。另外似乎还有一个和竞争流相关的东西，但这里暂且没有看懂，先跳过。这之后还不忘攻击一下\nBBR 的机制，虽然 BBR 能够更准确地测量延迟，但是代价是近 200\n毫秒的传输暂停，这在交互视频流中几乎是不可接受的。\nBandwidth Estimate Update\nRule\n从采样器那里获得的带宽估计将被送到这里处理为传送给编码器决定码率的平滑带宽，具体而言，我们希望平滑后的带宽越大越好，但是也需要惩罚不精准的平滑。本文采用的方式是求解一个优化目标，其中第一项是对数增长的，用来给平滑带宽的增长提供奖励，而第二项则较为严格地使用了平方项来给不精准估计以惩罚：\nmax φ(B) = max [log(1+αB)−β(B−e)2]\n这里 B\n是我们需要求的平滑带宽，α, β 是超参数。由于 B = S 显然是最佳平滑（S 为采样器提供的估计），这里 e\n就是用于调节函数极值点，使得上述函数最大的时候 B = S。为了求解这个 e，我们观察这个函数的导数：\n$$\n\\varphi'(B) = \\frac{\\alpha}{1 + \\alpha B} - 2\\beta(B - e)\n$$\n得到：\n$$\n\\frac{\\alpha}{1 + \\alpha S} = 2\\beta(S - e) \\iff e = S -\n\\frac{\\alpha}{2\\beta(1 + \\alpha S)}\n$$\n在实际平滑操作的时候，其显然采用了类似梯度下降的逻辑来平滑。即，维护一个当前估计\nB，并每次沿着导数方向前进一定步长来完成平滑：\nB ← B + δφ′(B)\n这里 δ\n是类似学习率的步长参数。我们做一些数学简化：\n$$\n\\begin{aligned}\n\\varphi'(B) &amp;= \\frac{\\alpha}{1 + \\alpha B} - 2\\beta\\left(B - S +\n\\frac{\\alpha}{2\\beta(1 + \\alpha S)}\\right) \\\\\n&amp;= \\frac{\\alpha}{1 + \\alpha B} - \\frac{\\alpha}{1 + \\alpha S} -\n2\\beta(B - S) \\\\\n&amp;= \\frac{\\alpha^2(S - B)}{(1 + \\alpha B)(1 + \\alpha S)} + 2\\beta(S -\nB) \\\\\n\\end{aligned}\n$$\n这里似乎推不出来论文里的更新表达式，找时间问问学长吧。\n\nPacing and Target\nMultipliers\n这一段似乎提到了公平性和友好性，但是实在是不是很懂，还是等到后面慢慢聊吧。\n这篇文章暂且就看到这里了，笔记也就到此为止了。\n\nEnabling\nHigh Quality Real-Time Communications with Adaptive Frame-Rate\nIntroduction\n随着网络条件优化、游戏帧率提高，云游戏系统的解码器总是能快速接收到帧数据。另外一方面，游戏分辨率的提高也增加了解码器的解码时长。综上所述，解码器排队已经是一个不可忽略的延迟，经分析，延迟超过\n100 毫秒的帧有过半数在解码器队列中等待了 50\n毫秒以上。本文基于“仅仅调整码率并不能有效缓解队列延迟”，主要引入了自适应帧率控制器（AFR），通过控制编码器的帧率来控制解码器的队列压力。\n需要注意的是，以往是有过调整帧率的相关工作的，但是随着解码硬件的发展渐渐失去了效用。然而随着高性能\nRTC、高帧率和更高的延迟要求，这一需求又凸显出来。另外，我们发现了部分当下方案的问题。首先，现有的控制机制基于反馈速度较慢的延迟或队列长度，所以需要等待队列建立才能做出调整。AFR\n相反，其依赖于到达和服务过程以及队列长度来调整帧率。其次，并非所有解码排队延迟的增加都需要降低帧率。例如，当由于瞬时的到达数据包突增而导致排队延迟增加。\n总之就是，AFR 可以较快地通过调节帧率实现极低的延迟。\nBackground - High Quality\nRTC\n首先背景就是 RTC 传输越来越猛了。首先是帧率大幅度提高，现在达到了\n60FPS 甚至 240FPS。其次是分辨率大幅度提高，已经开始出现默认 1080p 乃至\n4K 的应用。最后是延迟容忍度大幅降低，视频会议阈值大约为 150\n毫秒，云游戏则为 100 毫秒。\n之后看一下现在的高质量 RTC 结构：\n\n这里全流程优化里面，本文主要关注尾延迟，基本上也就是解码器排队。另外，出现次数较少的长时间延迟（称为延迟时间分布长尾）也需要考虑，本文甚至关注\n99% 或 99.9% 百分位数的尾部延迟。例如，在 60FPS 的帧率下，即使是 99.9%\n百分位数的延迟也可能每 16\n秒发生一次。所以控制长尾也是重要的优化目标。\nMotivation and Challenges\nMotivation - Drastic Queuing\nDelay\n首先是调研了一下云游戏中的延迟来源，基本上确定了最主要延迟来源为解码器排队、解码、网络延迟（也就是图上面的红色字显示的部分）。记\nN, Q, D, T\n分别为网络、解码器排队、解码、总延迟，数据统计时本文计算了 $\\mathbb{P}(X &gt; X_{\\rm th} \\mid T &gt; T_{\\rm\nth})$，其中 X ∈ {N, Q, D}，这里下标\n${\\rm th}$\n为给定的统计阈值。统计如下：\n\n符合直觉的是，在总延迟大于 200\n毫秒的时候，网络延迟往往占据了大部分。然而如果考虑 100\n毫秒左右的延迟，解码器排队延迟反而是占主要部分的延迟。\n这也是符合直觉的，这一切的根本原因就是高帧率和高分辨率的要求。如下图所示，这里展现了不同分辨率、帧率下视频流传输服务中\n99\n分位数解码器排队延迟的占比（即只关注尾部数据），可以看到在右上角的\nVR/AR 服务中解码器排队延迟相当严重。即使尾部数据很有可能受到 CPU\n发热等随机因素影响，但是通过更换更好的硬件，依然无法有效解决这一问题。此外，根据排队论，小幅度的排队波动都可能导致延迟的幅度增加，这些都是影响因素：\n\n从硬软协同的角度上，软件上视频应用甚至已经开始提供 8K\n视频服务，然而编解码器的能力却完全没能跟进。另外一方面，大量的用户依然保持了大量的中低端设备，完全无法流畅运行如此庞大的视频软件。\nChoice - Controlling\nProper Parameters\n总之就是要调节编码器了，编码器主要参数就是帧率、码率、分辨率。从解码器队列的角度，该队列的入队速率取决于编码帧率，出队速率取决于解码效率，即分辨率。\n本文需要分别控制各个参数以减少不同的延迟。作为响应，我们调整帧率来控制高质量\nRTC\n的排队延迟。当解码器和网络的波动导致排队延迟增加时，有必要调整编码参数以减少排队延迟。在这种情况下，经过从客户端和网络收集测量数据后，服务器上的编码器可以相应地调整以下帧的帧率。我们可以动态指定新帧被编码的特定时间戳。\n这里为什么选择调节帧率而非分辨率等参数似乎我并没有看得太懂，这里还是等等学长来讲解吧。\n\nChallenges\n实现超短队列延迟事实上是很困难的，因为一般的探测信号只有在队列已经建立的时候才会有所反馈。简而言之，大部分算法只有已经堵车了才能察觉到拥堵，而做不到预测将来会堵车而下调帧率。为了预测潜在的排队延迟增加，本文采用的方式是探测解码器队列的出队速率。另外，为了应对长尾，本文似乎提出了一整套基于排队论的延迟控制方法，更详细的叙述看来在后面了。\n此外，由于队列积累的原因多种多样。解码器的突发退化和无线网络的爆发发包，这些情况很难通过测量出入队速率来做出反应。这里本文提出了根据不同原因在不同尺度下处理排队的系统。其中一个用来防止高负载下的队列积累（稳态控制器），一个用来防止突发条件下的排队延迟（瞬时控制器）。\nDesign - Adaptive Frame Rate\n算法结构：\n\n总而言之，稳态控制器根据出入队情况尽可能将延迟控制在极低范围内，而瞬时控制器则通过队列状态计算折扣因子，在突发条件下需要折扣稳态控制器计算的帧率以响应突发条件。\nStationary Controller\n这里基于排队论中的 Kingman\n公式设计了稳态控制器，可以得到排队时间的期望为：\n$$\n\\mathbb{E}[\\tau_{\\rm queue}] \\approx \\left(\\frac{\\rho}{1 -\n\\rho}\\right)\\left(\\frac{c_a^2 + c_s^2}{2}\\right)\\mu_s\n$$\n这里：\n$$\nc_a = \\frac{\\sigma_a}{\\mu_a}, c_s = \\frac{\\sigma_s}{\\mu_s}, \\rho =\n\\frac{\\mu_a}{\\mu_s}\n$$\n其中：\n$$\n\\mu_a = \\mathbb{E}[A_n], \\sigma_a = \\sqrt{\\mathop{\\rm var}[A_n]}, \\mu_s\n= \\mathbb{E}[S_n], \\sigma_s = \\sqrt{\\mathop{\\rm var}[S_n]}\n$$\n这里 ρ\n即为队列利用率，ρ → 1\n表示队列超载，此时排队时长增加。ca, cs\n则分别代表了入队和出队的波动程度。\n这篇文章暂且就看到这里了，笔记也就到此为止了。\n这四篇文章主要还是引出目前在腾讯那边想做的画质感知相关工作的基本思路：\n采用和 Nebula（实际上就是传统 WebRTC\n云游戏）系统类似的架构，所要做的提升的 motivation 和 QARC\n比较类似，即用户体验和码率并不完全对等，然而由于云游戏对低延迟的强大需求，类似\nQARC 的基于 learning\n的方法并不能很好适用，所以需要做一些其他的设计。目前的想法是通过 encoder\n的一些编码信息来推测画质，例如如果一个帧之中独立编码的部分过多（大部分帧都会参照先前的帧做相对编码，而先前帧不能成为参考则会独立编码），就可以推测这一帧发生了较大的场景切换，从而需要调高码率来高清显示。\n此外，码率决策也很难通过 RL 等方式来完成，所以采用了 reactive\n的方法，即所谓的“面多了加水，水多了加面”的调整方法。然而现在面对画质闪烁等问题依然还有一些需要改进的地方。\nSQP 这篇论文则是主要学习一下 CC 算法和云游戏的不同要求，其中 CC\n要求打满网络，通过排队信息来获得网络测量数据，而云游戏做不到，其对低延迟要求很高。\nAFR 这篇论文则主要是学习一下\nwriting，现在论文上面比较偏好提出新颖的问题，解决方案平凡、粗糙一点都可能不会太有影响。\n\nFlashBack\n- Immersive Virtual Reality on Mobile Devices via Rendering\nMemoization\n之前试着用了一下腾讯现在的云游戏系统，然后发现在新场景加载上有很长的延迟，然而这些场景虽然对我而言是新场景，对其他用户却不一定。所以我就猜应该可以加入一些缓存来加速这些场景的渲染，至少可以尝试做一下用户无关信息的缓存。学长和我说确实有道理，然而这已经是实践中的想法了，然后给我扔了个论文让我学学，结果我一看，2016\n年的论文。\nIntroduction\n2016 年的 VR 论文了，这里的背景部分就随便看看吧。简而言之，2016 年的\nVR 方案（特指头戴式的 HMDs）大概有两种：\n\n有线方案：主要算力为主机，VR 设备通过数据线连接到主机，也就是说 VR\n设备基本上起到显示屏的作用。这类方案的问题在于，数据线限制了用户的移动范围。并且，由于\nVR 对低延迟、高帧率、高分辨率的要求，主机本身的算力要求也相当之高\n移动渲染方案：即算力集成在头戴式设备之中，然而由于硬件设计的限制，这类设备的算力往往不足以满足\nVR 的需求。所以低画质、低电池续航、热辐射成为了这类方案的问题\n\n另外，这两种方案事实上都成本高昂，很难做到成规模的商业化消费，乃至深入应用到生活的各个方面。\nFLASHBACK\n的设计思路很简单，就是通过增加缓存的方式，将场景提前渲染好后供 VR\n设备索引。而如果出现缓存缺失，则通过快速求取近似值的方式完成这一任务。\n然而即使如此，要在 VR\n这种互动性极强的视频形式上直接运用缓存也是很困难的，所以 FLASHBACK 还在\nVR 如何在移动端设备上部署这一问题上做出了创新成果。FLASHBACK 在 GPU\n视频内存（VRAM）、系统 RAM\n和辅助存储之间构建了三级帧缓存，用来存放提供给 VR\n设备的帧。这一部分缓存的索引是玩家在场景中的三维坐标和姿势，当玩家移动的时候系统都会索引该缓存，使用最近邻算法快速搜索三维空间。\n此外，为了处理动态场景（估计指的是 NPC 的移动等问题），FLASHBACK\n为每一个动态物品创立动态帧，通过将各个动态帧和表示场景的静态帧叠加的方式完成动态场景的处理。\n这里感觉就是说了一下技术上的细节，本质上还是在重复说明 FLASHBACK\n的核心思路是构建帧缓冲区。\n\nBackground\n大概说了一下什么是 VR，然后主要说明了现在商用的 VR\n场景创建的流程，也就是 Unity\n或者虚幻引擎。本文认为现在商用引擎的工作逻辑是通过工程中预设的各种对象和场景来渲染最终图像，这种工作逻辑的好处在于其清晰地划分出了静态场景和动态对象，使得\nFLASHBACK\n处理动态的逻辑变得可能。其次，这些引擎渲染结果中的摄像机在概念上是独立的，所以将其替换也是简单的。\n这里有点似懂非懂，感觉技术细节很多。动态场景那里倒是大概明白，意思就是商用引擎暂且还没傻到渲染出来的结果就是一堆像素点，是有办法获得具体一个物体的信息的。然而摄像机就不是很懂了，虽然知道摄像机是个什么东西，但是这玩意和文章里面说的“以此建立缓存索引”是什么关系一概不知。\n\n然后又大概强调了一下高分辨率、低延迟、高帧率的要求有多么多么高（但是实际上的\nVR 产品失真感还是太离谱了，完全做不到沉浸感，至少 2016\n年前后的产品实在是这样，所以我在听闻到元宇宙的时候只觉得离谱）。\nSystem Overview\n\n整个系统概括并没有带来什么新的信息，只是另外多提到了：\n\n缓存未命中的时候使用网格扭曲处理近似，这种方法的处理速度与场景复杂度无关，只和屏幕分辨率有关\n最后会使用桶形扭曲来将场景投射到 HMD 设备上\n\n这篇文章感觉没那么重要，所以就不再多看了。\n\n","categories":["【论文笔记】计算机"]},{"title":"2023 年 10 月论文笔记","url":"/2023/10/08/paper-2023-10/","content":"说是加入腾讯做云游戏，但是似乎一个月过去了暂且都没有等来信息，果然还是继续积累吧。\n\nZGaming\n- Zero-Latency 3D Cloud Gaming by Image Prediction\n现在论文都直接吹零延迟的吗，不过如果说 Abstract\n里面这句话是真的，那确实足够猛：\n与现有方法相比，ZGaming 在提供相同视频质量时，将互动延迟从 23\n毫秒减少到 0 毫秒，或者在保持互动延迟为 0 毫秒时，提高了 5.4\n分贝的视频质量。\n\nIntroduction\n先讲了一下云游戏对 MTP\n延迟很敏感，然后提出本文的目标是实现零延迟的云游戏系统。有关其他工作的部分，本文首先指出了单纯在系统上做优化的方案终究会因为网络的存在而至少具有一个\nRTT\n的延迟，从而零延迟的系统必定一定程度上涉及到预测操作，其中一个著名的工作是动作预取。动作预取的工作原理是对所有的可能潜在动作，都在服务端渲染下一帧，然后将这些帧发送到客户端，客户端上一旦执行操作即可直接访问到动作结果帧。但是动作预取面临两个困难：\n\n用户动作的随机性极高，很容易遭遇预测未命中的情况\n商用云游戏大部分依然采用用户动作后再渲染的方案，工业界适配困难较大\n\n如果难以直接修改当前的工作流水线，那么一种可能的方案为基于图像的预测，常用的方法就是\nDIBR。在具有 DIBR\n的系统中，当用户做出操作的时候，该系统会根据最近接收到的 RGBD（即 RGB\n色彩以及深度信息）直接预测接下来的视频帧，用户在此基础上几乎感知不到任何延迟。\n本文基于上述方法，希望进一步精细化图像预测，主要面临的挑战有：\n\n预测图像中存在伪影，即像素缺失。例如出现了遮挡和视野外，此时由于缺失图像信息，无法准确预测该部分的像素信息导致缺失。目前已经有一部分针对伪影的解决方案\nDIBR\n不能应用于预测动态对象，因为动态对象的运动几乎无法通过静态的像素信息观察到，从而\nDIBR 很难给出合理的预测值\n码率和网络的匹配问题（有点奇怪，为什么这里需要考虑 ABR\n相关的问题）\n\nZGaming 的设计在于，首先通过 DIBR\n预测出静态对象的图像，然后通过运动预测模型预测动态对象的图像（本文采用了\nLSTM，我严格觉得 LSTM\n做不了这种任务），最后将两者结合起来得到最终的预测图像。具体而言的工作：\n\n基于质量的静态场景缓存。如果完全存储所有历史静态场景则很有可能导致巨大的开销，所以\nZGaming\n采用了基于质量的缓存，即只缓存质量较高的静态场景，而质量较低的场景则直接丢弃\n服务器辅助的 LSTM 预测。在服务器端部署 LSTM\n以预测动态物体的运动趋势，并预取到客户端\nABR。我不评价这一部分\n\nMotivation\n首先说了一下云游戏条件下互动延迟的要求极高，大概限制在 60\n毫秒左右。然后介绍了一下 DIBR\n能够通过预测静态场景的方式做到一定程度上的零延迟，并且在工程的角度上可以增量式地连接到现有系统而不需要调整当下的云游戏渲染管线。\n但是 DIBR 是有缺陷的：\n\n简而言之本文的解决方法为：\n\n重用历史帧。本文的论据是大量的场景都有可能在历史场景中出现过，所以加大追溯历史的深度可以有效缓解空洞伪影（但是全新的场景怎么办呢）\n利用 LSTM 预测动态对象的运动模式\nABR？（为什么 DIBR 的优化策略里面有 ABR？）\n\nOverview\n总之就是上面三个部分一个对应一个模块，也就是说 ZGaming\n包括一个场景缓存，一个动态物体 LSTM 模型，一个 ABR 算法。\nQuality Driven 3D Block\nCache\n其认为，一般的缓存设计方法无法直接应用到云游戏之中，因为传统的全量缓存会占用巨大的内存空间。一种方法是一定程度上限制缓存条目的大小，并且设计有效的缓存替换策略保证高效利用有限的内存资源。在考虑缓存替换策略的时候有以下需要注意的点：\n\n不同光照条件下，同样坐标处的材质并不能直接应用于恢复。这是显然的，阳光直射的墙壁图像显然无法直接应用于恢复夜晚墙壁的空洞\n非缓存算法的竞争。事实上，缓存并非处处是最优方法，例如墙壁、地面等较为单调的场景中，一般的插值恢复法甚至会比缓存更好。这里本文认为优先执行历史缓存恢复是合理的，如果缓存内容依然无法完全填充空缺部分，那么再通过插值方法恢复\n用户操作会使得缓存本身具有不均衡特性，部分场景明显会比其他场景有更高频的访问次数\n\n本文采用的策略为，将每一帧分为 64 × 64\n的块，这样做可以避免全量缓存，并且可以避免重复场景的重复存储。对每一个块\nb，定义其质量为 Ub，质量越高则越有可能被缓存。质量的计算方式为：\n$$\nU_b := \\frac{1}{T_{\\rm now} - t_b}\\sum_{i = 1}^{N_b} ({\\rm PSNR}_{b, i}\n- {\\rm PSNR}_{b, i}')\n$$\n这里 Nb\n表示块 b\n在缓存中被使用的次数，求和项中的 PSNR 的差表示的是第 i\n次使用的时候相较于插值算法，用缓存修复所能得到的 PSNR 增益，之后使用块\nb 在缓存中持续的时间 $T_{\\rm now} - t_b$\n归一化收益即可得到缓存块质量。可以注意到该函数的逻辑就是，单位时间内该缓存块相较于插值算法能够获得多高的额外收益。\n在此基础上，缓存的替换策略为当存储满时交换出 30%\n的缓存块，并且定期逐出质量为负数的块。这里的负数质量表示该块在缓存中的收益不如插值算法，所以应当逐出。\n性能评价就不说了，基本就是形势大好。\nServer Assisted LSTM\nPredicting Foreground\n首先区分背景和前景，其实就是静态部分和动态部分。本文认为，即使某一些\nNPC\n在交互逻辑上不应该归类为背景，但是在渲染逻辑上其不会发生相对位置移动，所以应当归类为背景。在这一部分首先需要的是区分背景和前景，然后对前景进行预测。区分前景的逻辑就是将前一帧和后一帧对齐，比较是否发生了位置偏移，发生偏移则意味着是动态对象。\n而为了预测动态物体的运动，这里使用了 LSTM。然而直接使用 LSTM\n会遇到渲染帧模糊的问题，所以在 LSTM\n后面本文加上了一个图像超分模块（RefSR）。\n\n工程上，另外提到了一下 LSTM 是部署在服务端的，数据传输方面则把 LSTM\n预测的动态部分作为高优先级数据附加上 FEC\n传输到客户端，由客户端组装具体的帧。\nPrediction\nPerformance Driven Adaptive Bitrate\n这一部分整体没看明白想要做什么，似乎是根据网络情况调节预测性能？然而云游戏里面考虑网络的话还是不太会单独拉出来一个\nABR？不是很懂，这样总觉得 ABR 很孤立。\nConclusion\n感觉和吴成磊学长说的一样，这篇文章总体给的感觉是很割裂，有种头痛医头脚痛医脚的感觉。而且我觉得这篇文章的\nLSTM 部分一言难尽，LSTM\n本身的能力不好说能不能完成这类预测任务，而且使用历史帧填充未知空洞也显得很没有道理。\n总之，从 idea 到 writing 来看都不是很适合借鉴学习。\nEkho\n- Synchronizing cloud gaming media across multiple endpoints\n简而言之就是以往的工作都把云游戏简单化为视频画面的传输，而忽略了音频等多媒体的可能。多媒体事实上意味着需要做到媒体之间的同步，例如游戏画面需要与游戏音效同步。Ekho\n则通过伪噪声的方式实现了多媒体之间的同步。\nIntroduction\n简单来说，就是注意到现在常用的云游戏系统往往除了视频流之外还会有一个反馈流，这个反馈流一般作用于各种游戏配件，作用包括：\n\n在多人语音游戏的条件下混合其他玩家的声音，并提供给专用的游戏耳机等\n对玩家的操作给出触觉反馈，如手柄震动等\n\n这里容易出现的问题在于，视频流和反馈流作用到不同的终端（一个是显示器一个是各种其他配件），这导致这两个流会使用不同的网络连接传输，从而两者之间的同步就成为了问题。\n事实上，在有观众的游戏中，除了玩家本人的耳机会有一道音频流外，普通视频流中还会负载另一道音频流，这个音频流会对外播放给观众。这一道音频流播放之后还会被玩家耳机的麦克风捕捉。所以说云游戏除了多种流的同步问题外，还需要处理多道音频流之间的同步。\n一般而言，流之间会产生 100 毫秒左右的流间延迟（Inter Stream Delay /\nISD），具体取决于网络情况、终端类型、连接方式甚至玩家到屏幕的距离。但是总体而言，延迟的影响因素大概可以归纳为：\n\n网络延迟。大概来说就是网络延迟是相当复杂的，首先多设备的网络接入点不一定一样（屏幕直接通过以太网连接到路由器而控制器通过\nAP 连接到 WiFi 等）。其次，不同设备可能使用不同的网络协议（屏幕使用\nWebRTC 而控制器使用 URCP\n协议）。最后，互联网提供商可能对不同端口的流量做不同的优先级处理，这也可能导致网络延迟\n设备播放延迟。音频和视频在不同的设备上有不同的缓存管理措施，不同的播放策略也可能导致数十毫秒的\nISD\n声音传播延迟。玩家从屏幕和耳机接收到的声音的 ISD\n和玩家到屏幕的距离有关（毕竟声速也不过 340\n米每秒），这可能带来十毫秒左右的延迟\n\n本文的目标是将 ISD 限制到 10 毫秒一下，考虑到 ISD\n是波动的，所以需要在游戏进程中不断观测和动态调整来平稳 ISD。事实上，测量\nISD 就足够困难，主要挑战是：\n\nRTT\n的测量本身会因为网络往返路径不同，测量值本身具有十几毫秒的误差\n解码、播放、声音传播延迟等影响 ISD 的重要因素往往因为缺乏合适的 API\n或者硬件而难以测量\n\n以往的设备间同步有三种常见方案：\n\n通过共享的网络组件建立专用链接完成时间同步。然而云游戏系统并不强制要求各个终端共享网络组件\n通过网络时间协议同步时间。然而该协议往往测量不精准，甚至会有百毫秒的误差\n通过记录设备播放的声音测量误差。然而这对硬件要求较高，此外还要求周围环境噪声较低\n\n而本文提出 Ekho，其可以在亚毫秒级别测量 ISD\n并且做出调节。简要而言，Ekho\n通过伪噪声序列的方式对齐各种流，并且在服务端根据测量结果调整发送序列来同步各种流。\nRelated Work\n相关工作曾经研究过两路相似音频最大能够达到多大错位而不被用户感知，以前的研究结果认为单调、突发的信号音在错位超过\n5 毫秒时就会被感知，而复杂语音则需要达到 16\n毫秒左右才会感知。本文拓展了这些工作，并且通过数据论述了：\n\n音频之间的错位最大为 10 毫秒\n视频与音频之间的错位，最多允许音频提前视频 15 毫秒或视频提前音频 45\n毫秒\n触觉反馈与音频之间错位最大为 24 毫秒\n触觉反馈与视频之间错位可以宽容到 30 至 100 毫秒\n\n另外一部分的相关工作为媒体同步，指的是在一定范围的终端内同步媒体内容。现有的工作往往要求了下述前提（然后本文基于此做了点优化）：\n\n设备有准确的时钟。然而用于同步设备时钟的网络时间协议具有不可容忍的误差\n支持 PTP 的设备可以通过连接到同一路由器实现同步。然而 PTP\n并非广泛采用的协议\n利用这些设备往往物理距离较近的特征，通过在一个设备上记录另一个设备声音的方式实现流之间的延迟测量。然而由于环境噪声、硬件设备等问题，这一方案在先前工作中没有获得很好的效果，而本文基于此，做出了一步重要的拓展（伪噪声打点）\n\nBackground &amp; Motivation\nTime Synchronization\nRequirements\n为了研究音频之间的错位阈值，这一章设计了用户实验。用户实验的基本方案是\nITU-T P.808 标准中规定的 DCR 测试方法。测试中使用的音频为 30 个长度为 15\n秒的游戏录音，每个录音均加上了 0 到 300 毫秒不等的 ISD。\n测试流程就直接翻译原文了。\n人类测试者首先听取没有回声的参考音频片段，然后听取带有未知延迟量的回声的相同片段，包括\n0\n毫秒，即没有回声。测试者需要选择由于回声引起的注意力分散程度。此外，每个测试者会定期进行训练，即按照\nP.808 标准听取带有不同回声量的六个片段，以确保标准化。\n我们总共收集了 3555 个评分，根据 ITU-T P.808\n的规定，去除了低质量的回应（总数据的 33%）。每个片段被评分约 10\n次，每个延迟级别有 30 个不同的片段，共计每个延迟级别约 296\n个投票。受访者池由 17% 的年轻人（18-25 岁）、43% 的成年人（26-35\n岁）、32% 的中年人（36-50 岁）和 8% 的老年人（51\n岁及以上）组成，他们的母语是英语。按照伦理准则，调查是匿名的，我们在参与之前告知受访者有关调查过程和刺激类型。我们对受访者进行了补偿，并避免了可能被认为是令人不悦的刺激。Microsoft\nIRB 审查并批准了这项调查。\n\n最后的具体结果事实上已经在先前提到了，即根据音频的不同类别，玩家的忍受阈值是不同的，但最后大体可以用\n10 毫秒作为阈值。\n\n首先需要学一下 ITU 用户测试到底是个什么标准。\n其次的话，这篇文章的 user study\n给的启示大概就是如果要设立对比或者是五分量表类似的测试的话，需要定期通过所谓的\ntraining phase 来保证测试者没有被“带偏”。\n如果说要测试云游戏条件下画面撕裂更为显著的话，其实也可以借鉴这种主观评分模式。不同的游戏，不同的撕裂程度（或者说不同幅度的\njitter？）之下受访者到底能够容忍多少。如果发现云游戏条件下测试者的评分有显著下降，应该能说明问题了？\n以及最好能提供一些现有的解决方案，证明现在的方案还不够解决这一问题？\n\n上述实验是音频和音频之间的错位，其余种类流之间的错位本文似乎没有展开说明。\nInter Stream Delay\n这一部分主要是 ISD 的建模：\n\n可以看到基本和 Introduction\n中提出的一致，分为网络延迟、解码延迟、播放延迟、声音传播延迟。\n网络延迟的测量也和先前一样，否定了 NTP 协议和对称 RTT\n测量两种方案。解码延迟则理论可以测量（通过对目标设备和音频格式类型的仔细测量来分析这些延迟），然而受限于终端种类繁多，API\n也不总是可用，这种测量几乎实际不可行。播放延迟则来源于硬件的 jitter\nbuffer，这种延迟几乎无法测量。声音传播延迟自然因为硬件问题无法测量。\n最终归纳为下表：\n\n总而言之，目前的测量方法的误差都过大，根本无法做到从各个环节上把握\nISD，更不用谈以此为基础控制 ISD\n了（这一部分就是用于说明问题的挑战性和本文方案的创新性的）。\nISD Variation\n大概的意思是继续说现有方案解决不了问题，原因是 ISD\n是动态的。简而言之，ISD 的组成成分中，包含了低概率发生的 IP\n路径更改或者显卡调度更改导致的大幅度震荡，以及更常见的因为网络波动和\njitter buffer 耗尽导致的小幅度震荡。\n也就是说，ISD 的校正需要尽快且足够频繁以应对这些变化。实践证明，Ekho\n最多间隔 15 秒测量一次 ISD 足以应对这些震荡。\nEkho\nOverview of ISD Measurement\nin Ekho\n简而言之，Ekho\n采用了端到端的测量方案，即忽略掉中途环节，直接在端侧考虑延迟：\n\n这里两路音频指的是屏幕音频和耳机音频，由于屏幕音频最终会被耳机捕捉，所以可以在耳机中直接比较两路音频得到\nISD 的估算。\n这一方案的问题在于，一般的游戏音频内部没有标志点，无法快速供算法分析捕捉。其次，屏幕音频在经过空气传播削弱之后，加上环境噪声，会导致两路音频更难对齐，这还没有考虑传输过程中两路音频均可能经过了有损压缩。\n所以，一种简单的解决方案是在服务器端发送音频的时候，在其内部均匀地（实验中使用\n1\n秒作为间隔）插入伪噪声标记，这些标记会用来对齐两路音频。这种伪噪声标记需要精心设计，因为其不能影响到玩家正常游戏，需要尽力做到不可察觉。\nReliable Marker Detection in\nEkho\n这里就详细介绍了伪噪声序列的构造方式和检测方式。首先分析游戏音频的频谱特征，可以看到载波的频率基本都在\n12 kHz 以上，而重要游戏信息内容基本都位于 6 kHz\n以下，所以伪噪声的频率范围需要限制在 6-12 kHz\n范围内。此外，由于可探测性取决于振幅，这里的目标是不断探测游戏本体音频的振幅并控制伪噪声标记振幅与其的比值尽可能恒定（游戏声音小标记振幅就小，反之亦然）。\n假设 x[t]\n是游戏音频，w[t]\n为长度为 L\n的伪噪声序列，那么最终的带标记音频序列 xm[t]\n为：\n$$\n\\begin{aligned}\nx_m[t] &amp;= x[t] + C\\alpha_k w[t] \\\\\n\\alpha_k &amp;= \\gamma\\alpha_{k - 1} + (1 - \\gamma)\\rho(x[(k - 1)T :\nkT])\n\\end{aligned}\n$$\n参数 L 影响 ISD\n测量的速度和最大可测量的 ISD，一般的话设置为\n48000（对应一秒音频，说明生成频率为 21 MHz 左右）。ρ(x[(k−1)T:kT])\n则表示了在 (k−1)T 到\nkT\n范围内的游戏音频功率，实验中选择 T = 960，这是 48 kHz 下的 20\n毫秒音频。\n这个公式的原理在于每 20 毫秒通过功率测算调整混入比例 αk，而 αk\n采用的软更新参数 γ 在实验中取\n0.4。\n在上述混入的基础上就可以介绍检测算法了，假设耳机的录音序列为 $x_{\\rm rec}[x]$，我们计算其交叉相关 Z[t] 如下：\n$$\nZ[t] = \\sum_{i = 1}^L x_{\\rm rec}[t + i]w[i]\n$$\n可以注意到这里不断让录音和标记信号对齐，当标记对齐的时候 Z[t]\n应当在此处出现峰值。为了让峰值检测更为可靠，需要做下述归一化：\n$$\nZ^*[t] = \\left|\\frac{Z[t]}{\\sqrt{\\dfrac{1}{S}\\sum_{i = 1}^S Z[t +\ni]^2}}\\right|\n$$\n通过归一化后的 Z*[t]\n会有比较好的包络线。实际测量中会使用 S 为 100\n毫秒，这个参数的来源大致是游戏音效大约都持续 100 毫秒。\n为了更好检测峰值，下一步需要具体计算包络线：\n$$\nR[t] = \\begin{cases}\n|Z^*[t]| &amp; R[t - 1] \\leq |Z^*[t]| \\\\\n\\beta R[t - 1] &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n原理是简单的，如果出现峰值则设定峰值，如果没有出现则按照等比数列衰减包络线。这样操作可以过滤掉除了峰值之外的大量无用数据。实验中\nβ = 0.99995。在上述计算的基础上，所有\nR[t] &gt; θ = 5\n的值都认为是一次峰值。\n峰值更具体的计算为：\n$$\nP[t] = \\begin{cases}\nR[t] &amp; R[t \\pm 1] &lt; R[t], R[t] &gt; \\theta \\\\\n0 &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n此时 P[t]\n已经提取出了所有的峰值并且过滤掉了较低峰值。此外，由于峰值的间隔至少应当是\nL（峰值间隔应当是伪噪声间隔，如果有较近的峰值应当是游戏本身的峰值，需要过滤），所以给出了下述进一步过滤：\n$$\nP^*[t] = \\begin{cases}\nP[t] &amp; P[t] = \\max_{|j| &lt; \\delta}P[t + j] &gt; 0, \\max_{|j| &lt;\n\\delta}P[t + j + L] &gt; 0 \\\\\n0 &amp; {\\rm otherwise} \\\\\n\\end{cases}\n$$\n全检测流程如下：\n\nISD Estimation\n由于 L\n选择了一秒，所以这里假定 ISD 不会超越 500\n毫秒。在此基础上，将过滤过后的屏幕音频和耳机音频做对比，将距离最小的两个峰值之差作为\nISD 的估计：\n\nEkho Delay Compensation\n调节的方式很简单，就是塞零音频来强制同步（毕竟已经算出来 ISD\n了），本文未来计划通过数据包丢失掩盖技术来做（毕竟插入零音频实在是有点粗暴），但是至少现在没做。\nDesign &amp; Implementation\n结构是这样的：\n\n总体来说的话，终端设备基本上仅仅承担了录音的任务，所有的计算负载依然放在云端。云端估算\nISD 的时候依赖于终端传回的音频数据。\n具体的实现这里就不涉及了。\nEvaluation\n评估的话大概包括如下部分：\n\nEkho 是否成功在端到端系统中同步音频流？\n什么样的标记音量足以准确估算 ISD，同时又不被人察觉？\n在标记辅助的 ISD 测量方面，Ekho 与先前的工作相比如何？\n当屏幕音频流静音时，Ekho 是否可以用于视频与音频的同步？\n\n同步音频流的实验很简单，直接把 Ekho 开起来然后在每个终端开一个 log\n来记录每一帧音频的播放时间，两个设备的时钟会在实验开始前同步：\n\n总之可以看到 Ekho 将 ISD 控制在 10 毫秒内，而不用 Ekho\n的时候几乎做不到压到 10 毫秒的可能。\n","categories":["【论文笔记】计算机"]},{"title":"《Petal Letter》歌词试译","url":"/2022/10/27/petal-letter-lyrics/","content":"秋枫老师发来的一份歌词，感觉挺有意思就试着自己翻译看看了。\n歌曲的地址是 BV1Y14y1j7Fi。\n\n@ 朝日 あさひに@ 溶 とける@ 微睡 まどろみと@ 目覚 めざめの@ 狭間 はざま、そっと@ 口遊 くちずさむ@ 旋律 メロディ、@ 花片 はなびらにのせ、@ 風 かぜよ@ 届 とどけて、あなたが@ 旅 たびする@ 世界 せかいへ。\n在朝阳中浅睡与苏醒的间隙中悄悄吟唱的旋律，乘上飘落的花瓣，就让微风将它传达到你所旅行的世界吧。\n@ 魔法 まほうで@ 出逢 であった、あなたと@ 私 わたし、@ 今 いまは@ 別々 べつべつの@ 物語 ものがたりを@ 行 ゆく。\n因魔法而相遇的你我二人，如今却向着不同的未来而去。\n【注释\n#1】这里并没有将「@ 物語 ものがたり」直接翻译为“故事”，感觉并不太符合中文的语感。\n@ 何 なにかが@ 始 はじまる@ 予感 よかんを@ 胸 むねに、@ 歩 あるき@ 出 だしてから、どれだけ@ 経 たったの。\n心中不知为何，总有着何事将至的预感。即使知道那时的分别，已经过去了不知多长时间。\n@ 緩 ゆるやかな@ 坂道 さかみち、@ 登 のぼればまた@ 独 ひとりきり。\n登上平缓的山坡，依然独自一人。\n@ 寂 さびしさに、@ 心細 こころぼそさに、@ 寄 より@ 添 そってくれる、あなたと@ 交 かわした@ 心 こころの@ 花束 はなたば。\n在这寂寞与不安中，我依偎着的，是与你交换的心之花束。\n【注释\n#2】这里的语句结构有点怪异，歌曲中这里的断句也比较怪异，难以判定「くれる」与后续句子的关系。这里又要经典批判一遍为何现代日语的终止形和连体形合流，这显然难以判定一个动词词组究竟是修饰名词还是直接终止语句，这导致大量的歌词翻译困难。\nいつでも@ 誰 だれかが@ 泣 ないている@ 世界 せかい、@ 鏡 かがみの@ 向 むこうに@ 霞 かすんだ。@ 今 いまは@ 消 きえた、@ 祭 まつりの@ 果 はてで。\n无论何时都有谁在哭泣着的世界，也在镜子中烟雾朦胧。现在早已在祭典的尽头，消失不见。\n@ 触 ふれ@ 合 あうことすら、できずに@ 別 わかれた。\n我们甚至都还没有再次相遇，却又再次分别。\nあなたを@ 感 かんじたい@ 時 ときは、@ 名前 なまえをもう@ 一度 いちど\n@ 呼 よぶ。\n每当想要感受你的温暖的时候，再一次，呼唤你的名字。\n@ 青 あおい@ 薔薇 ローズ、@ 赤 あかい@ 椿 カメリア、@ 花 はなは@ 今日 きょうも@ 咲 さいてますか。\n蓝色的玫瑰，红色的山茶花，花朵如今，也依然在绽放吗。\n@ 問 といかけて@ 応 こたえなくても、@ 同 おなじ@ 楽園 そらを@ 見上 みあげてる。\n即使问而不答，我们也始终仰望着同一片乐园（天空）。\nあれから@ 始 はじまった@ 長 ながい@ 旅 たびも、@ 終 おわる、いつかは、@ 消 きえる、@ 全 すべてが。そして、@ 星 ほしは、@ 巡 めぐる。\n从那时开始的漫长旅途，总有一天也会结束，到那时，一切都会消逝。而后，群星依然流转。\n@ 止 やまない@ 嵐 あらしに@ 足 あしを@ 止 とめられ、@ 草臥 くたびれた@ 靴 くつの@ 跡 あとを@ 振 ふり@ 返 かえる。\n无休无止的山林雾气中，我不得不停下脚步，回望着以往的足迹，鞋履也早因旅途破旧不堪。\n@ 大事 だいじなものはまだ、@ 歩 あるく@ 度 たびに@ 増 ふえるでしょう。\n然而，那些珍贵的回忆，依然随着我们前行的每一步而积累着。\nそれでも@ 俯 うつむく@ 私 わたしの@ 背中 せなかを@ 押 おすのは、あなたと@ 交 かわした、@ 叶 かなわぬ@ 約束 やくそく。\n尽管如此，激励着早已疲惫不堪的我继续前行的，是与你定下的未竟约定。\n【注释\n#3】这里意译了「@ 俯 うつむく」，其本意是“低下头”。\n@ 大 おおきな@ 鞄 かばんに@ 閉 とじこめた@ 願 ねがい、@ 鏡 かがみと@ 一緒 いっしょに@ 壊 こわれた。@ 夢 ゆめと@ 追憶 ついおくが@ 降 ふり@ 注 そそぐ。\n珍藏在大大的行李箱中的愿望，也随着镜子一同破碎，梦与追忆倾泻而下。\n@ 砂 すなへと@ 零 こぼれた@ 涙 なみだを@ 拭 ぬぐって、@ 震 ふるえる@ 手 てが@ 拾 ひろい@ 上 あげた。\n拭去飘落在沙地上的泪水，用颤抖的手将碎片拾起。\n@ 光 ひかりはきっと、@ 同 おなじ@ 色 いろをした@ 花 はな。\n那光芒必然是，闪耀着相同颜色的花朵。\n@ 目 めを@ 閉 とじれば、@ 耳 みみを@ 澄 すませば、@ 花片 はなびらが@ 風 かぜに@ 乗 のって、@ 旋律 メロディを@ 届 とどけるでしょう。\n闭上眼睛，侧耳倾听，花瓣乘上微风，将那旋律传达给你。\n@ 私 わたしからあなたへの@ 手紙 レター。\n这就是，我寄给你的，一封信。\n","categories":["【杂谈】日语"]},{"title":"直博招生专业面试的一些","url":"/2022/09/14/phd-interview/","content":"2022 年 9 月 14 日，是清华大学计算机科学与技术系 2023\n级免试攻读博士生招生专业面试。Holder 参加了这一场面试，然后人炸了。\n\n今天面试本来就有点不安，最大的问题就是唯一能吹的一份挂了名的 SIGGRAPH\n的文章实际上自己并没有参与特别核心的工作，而且做到一半就被拒了，所以实际上最后那段时间就在摆烂，组会吹水也不去了。\n然而，今天就是这么时运不济，面试的评委里同时有徐昆老师和胡事民老师。没听过组会吹水不敢乱说，但胡老师就喜欢捉着这些问。他要是具体问如何实现了我负责的代码部分，我倒是可以说不少，但是问我一些\nOverview，说实话倒还真的不会。\nHolder 的科研真的毫无意义，毕竟自己就是如丧家之犬一般到处跑路。或许\nHolder 真的就不应该硬头皮读这个博士，或许就该进厂上班了。\n","categories":["【杂谈】碎碎念"]},{"title":"《美少女万华镜 5 ——理与迷宫的少女》游戏测评","url":"/2021/08/18/renge-5/","content":"Holder 不是一个玩 GAL 的人，能想到的 GAL\n除了万华镜就是柚子社这种。但是 Holder 想了想，决定把万华镜 5\n这个宣称中的最终章认真通一下，也算对我几乎唯一知晓的 GAL 致以敬意。\n离万华镜 5 发售差不多过去一年半了，各路汉化理论上应该充斥互联网，但\nHolder 也只找到了生肉，于是也顺便当成了日语阅读练习。\n\n总的感想\nHolder 大概花掉了靠近三十个小时打通了所有的线，由于 H\n情节在一年前实际上就已经都看过一遍而且自己也有全\nCG，这次的重点就是把当时看来冗杂无比的剧情认真看一下。\n当然，一直都说万华镜系列就是单纯的拔作，剧情几乎可有可无，这句话我可以说认同一半。首先，针对万华镜\n5，如果不走莲华线，而是没有压住枪走了月丘线，那确实没有任何剧情，平平淡淡地每晚在澡堂触发\nH\n情节就结束了。而你如果剧情看到一半没忍住走了绿毛线（绿毛名字是もよか，说实话不知道怎么找当て字，倒是“绿毛”这个代号挺深入人心的），那也是很快就\nBE\n了。而如果你认认真真把莲华线推完，就会发现若干的伏笔被回收，剧情似乎就有了那么一点的道理（Holder\n整体上还是觉得这个剧情偏扯，但是莲华线稍微补了一点论述）。其次，万华镜整个系列，确实几乎都是没啥剧情的，除了\n5。其他系列都是推一会就开始炮火连天，而 5\n我是整整看剧情看了靠近两天之后才解锁了新天地（当然玩的莲华线）。\n如果说总的感想的话，就是感觉看了一个很普通的小说。撇去还算优秀的 H\n情节不谈，我在玩的时候几乎全程在看底下的文字，因为图像说实话提供不了信息。比如说“\nA 把 B\n扶起来”，这个动作在番或者剧里面都可以画或者演出来，但是万华镜里面也仅仅是两个人的立绘贴了一下，动作则是文字给出。所以整体我还是一直在看文字，当小说看。\n而说它“普通”，是因为贯穿全程的就是“理”或者“命运”或者“轮回转生”，题材不是什么新颖的东西，而且能预料到莲华和男主的一些前世姻缘之类的。然后中心矛盾之一也是普通的，“我能逆天改命”和“我们只能顺应命运”的矛盾，最后认为“我能逆天改命”的人盒饭了，但却让“我们只能顺应命运”的思想少许动摇，但是为时已晚不得不继续投入到命运的轮回之中。\n要我说的话，论剧情，万华镜 5\n就是很普通的一个小说，人物关系简单，矛盾点简单。但是论 H\n情节，首先我认为绿毛连动态情节都没有是很难受的（巫女后辈啊！不配画一点动态的吗！），但是莲华在二次轮回的时候\nH 情节确实作画很好，动态也不错，还是稍微给点表扬。\n剧情简要分析\n莲华-轮回线\n既然核心是“理”（不得不提的就是这个“理”在游戏里面训读成ことわり，而这个读音一般写成“断り”）和“轮回转生”，那么我们应该默认天理和轮回转生的存在。\n剧情的主干实际上就是莲华和男主深见夏彦的前世姻缘，他们可以说每一世都会相遇相爱但由于各种不可抗力无法修成正果。先是罗马时代的奴隶主和奴隶，又是中世纪的女王和下臣，之后是猎巫人和女巫。而重点是第四世，他们是古代日本的一对恋人（这时深见夏彦的名字是“彦一”，记住，要考的），而第五世就是莲华和深见夏彦。\n说第四世重要，是因为这里狐妖介入了进来。实际上狐妖附身了第四世的莲华，或者在一定程度上，莲华在这个时候已经成为了狐妖。而当彦一（第四世的深见夏彦）死于战火的时候，狐妖则处于对人类的憎恨和爱人亡故的怨念火烧城池。人们最后将狐妖的怨念封印为“杀生石”，并在城中修建相当数量的狐狸雕像望向杀生石的方向以镇压，同时也在杀生石所在的山顶修建了一座规模宏大的神社。但是神社实际上在很多年之后的又一次战火中被烧毁，但是村民并没有重建的计划（多半是已经忘了这段历史）。而杀生石和狐狸雕像却保留了下来，成为了传说。\n这里的杀生石、狐狸雕像、神社则是第五世（现代）剧情推进的一条线索。\n而这个时候就必须引出绿毛了。在第五世，也就是现代，绿毛先前有一个家境优渥的家庭，但是由于他人嫉妒而故意放出的无端谣言而招致了全村人的厌恶，随后她的家人因他人纵火全部亡故，而纵火者却至今逍遥法外，绿毛也因此有了对人类的憎恨和怨念。孤身一人的她投靠了从兄弟\nH（名字不想打了，但是这个人的人设和痴汉别无他样，所以就用 Hentai\n的首字母代称。这里 H\n是一个女子中学的音乐老师），此时绿毛沉迷于深见夏彦所在的杂志社编辑的灵异杂志，自学了很多通灵方法。最终，她独身一人走上了原来有神社和杀生石的山顶，被满是怨念的狐妖附身，开启了剧情主线。\n绿毛有了狐妖的力量，而狐妖的一个信念就是“我是可以逆天改命的”，或者说“我不愿意服从命运的安排”。狐妖因恋人离世而对人类憎恶，绿毛因为家人离世也对人类憎恶，两个怨念叠加，绿毛开始了复仇。她的第一步就是先转学到\nH\n所在的女子高中并要控制全校，因为女子高中生就是当时散布绿毛家族无端谣言的主力。绿毛看中了这所高中禁止使用手机和通信软件，利用了她们相对闭锁的信息环境，开始通过狐妖的力量诱骗她们迷信自己的占卜，随后再通过狐妖的力量对她们下诅咒。诅咒的内容就是：\n山顶有神社可以实现你的愿望，但是在前往神社之前，你必须不停地画白狐氏（びゃっこ氏）以表虔诚，否则就会降下惩罚。\n\n而这座神社在现实中是真的不存在的（早就烧掉了还没重建），但是狐妖的灵力可以在山顶创建一个传送门，传送到若干年前的神社，而这个神社就在狐妖（或者说绿毛）控制之下。白狐氏就是这座神社供奉的神灵（就是狐妖），而所谓的惩罚是各种莫名其妙的伤害事件（突然被钢琴盖子砸断手指，实验的时候突然自燃之类），并且惩罚的共同点就是受伤的地方毛细血管会聚集成青色的蜘蛛网的样子，而且会长一个痣。\n这也就是最初的最初，深见夏彦所要调查的“青蜘蛛的诅咒”事件。\n\n主角团是四人组，深见夏彦，他的编辑月丘香恋，同期的只相信科学的优秀作家皇公晓，以及实体化的莲华。\n莲华在第五世转生的时候，没有获得肉体，成为了阿紫旅馆（也就是万华镜\n1-4\n开头的那个旅馆，其和神社等位于同一个村子）的座敷童子。所谓座敷童子，第五世的莲华的任务就是“超度”，也就是帮助满是怨念的灵魂安宁地走向死亡，走向轮回。而完成超度的道具就是“万华镜”。\n所以说 1-4\n里面深见夏彦透过万华镜看到的，就是那些已经被超度的魂灵的生前故事，而往往这些故事都或多或少带着点怨恨（1\n是人鬼情恋的越界之恨，2 是沉溺于爱而伤害恋人的愧疚之恨，3\n是文明凋亡的孤独之恨，4 则是近亲的禁忌之恨）。\n另外，作为灵力的持有者，莲华的能力就是能够读取和修改人的记忆。\n由于没有肉体，莲华无法被感知，从而也让她一直孤独一人。但深见夏彦，作为这么多次轮回之中莲华的恋人，自然是唯一一个能感知到她存在的的人。所以深见夏彦对莲华而言，简直就是世界上唯一可以交流的人类。\n另一方面，莲华在得知深见夏彦想要来调查“青蜘蛛的诅咒”事件，要在阿紫旅馆住上一星期左右的时候，其花费了很多的灵力为自己构筑了肉体，并且通过修改记忆让主角团和旅馆工作人员都认为莲华是真实存在的一个女高中生，这也就是实体化。这个时候的莲华就可以和正常人一样活动了。\n\n先前提到，第四世的莲华和狐妖实际上几乎是一体的，而在第四世到第五世的轮回之中，莲华被拆分成了两部分，狐妖的部分被封印而剩下的部分幻化成了现在的莲华，这莲华是通过触碰了一只小狐狸之后回想起来的。\n在主角团调查的时候，绿毛自然早已经觉察到，深见夏彦就是自己前世恋人彦一，所以绿毛对从兄弟\nH\n不屑一顾而单单对深见夏彦热情，而且在深见夏彦和莲华前往深山随便走走的时候将他们拉入了神社。绿毛自然也早就明白莲华和自己理论上是一体的，所以才有绿毛的“我唯一的朋友是莲华”这一句。\n而绿毛为了在他人面前让自己和深见夏彦亲近显得合理，她故意称其为“哥哥”（大家都知道绿毛失去家人的过往，所以因此会把她亲近深见夏彦理解为“绿毛把对哥哥的思念寄托在深见身上”）。而绿毛则不需要对莲华隐藏，所以在澡堂里直接说“深见才不是我哥哥呢”。\n绿毛在知道深见夏彦的存在后，除去复仇的主线，自然是尝试再构姻缘。所以她引诱深见夏彦去神社，去看杀生石，去看她舞蹈，去听铜铃的声音，给他托梦，目的就是让深见夏彦回想起自己的前世。深见夏彦在经历了若干天的噩梦和梦游（梦游去神社）之后，终于在某一天晚上回想起来了自己的一切。但是深见夏彦已经沉迷莲华，依然坚称自己是深见夏彦而非彦一。\n得知恋人心意的绿毛，自然是相当悲愤。我大费周章为你复仇，你却出轨我自己（莲华理论上和绿毛是一体的，可以理解为绿毛是邪恶的一面，莲华是善良的一面），于是托了一个巨大的噩梦给深见夏彦（就是那个，裂嘴黑眼圈的莲华\nCG，这也是游戏发售前就流传出来的梗图），想让他忘记莲华。随后动用了巨大的灵力干趴了学校里所有的学生，尝试吸取她们的灵魂。\n而随着调查的深入，莲华也了解了狐妖已经附身到绿毛身上开始复仇，而这个时候绿毛也已经因为深见夏彦的背叛而暴走了。所以为了阻止这些计划，莲华只身一人前往神社和狐妖打灵力战斗去了。\n但是莲华毕竟力量并非很充足，最后体力渐渐不支。这个时候深见夏彦突然赶到，给莲华挡下一击。绿毛眼看自己的攻击伤到的是自己的恋人，立马停手了。随后由于巨大的自责，她没有抵挡得住莲华的最后一击而幻化为怨念，被万华镜收纳住了。\n绿毛是解脱了，和 H\n去过平凡的女高中生生活去了。学校的诅咒也解除了，大家渐渐都回到正轨了。但是深见夏彦的灵魂却因为狐妖的一击变得支离破碎，如果不修复，就等于死亡。莲华这个时候想到了解决方式，就是和深见夏彦一起回到万华镜，让深见夏彦重新回想起来所有的回忆，补全灵魂，最后用莲华的力量让死者复生。这里显然就注意到了，死者复生是违反“理”的，也就是说，莲华最终还是走上了背离天理的路。\n莲华和深见夏彦两人在万华镜里遨游，把 1-4\n的场景都走了一遍，深见夏彦也渐渐回想起了各种东西，灵魂也渐渐补全。在走完第一圈后，莲华认为已经可以送深见夏彦回去了，但是深见夏彦坚决要和莲华在一起，于是他们又走了第二圈。这之后，莲华并不再是询问语气，而是命令深见夏彦赶快回去。\n原因很简单，莲华知道自己也是狐妖的一部分，包括自己的实体化，所动用的灵力的基础都是狐妖赖以生存的力量——人类的悲痛，莲华决定自己超度自己肮脏的灵魂。而这最后的力量就是留给将深见夏彦死者复生的，违反天理的力量。但是深见夏彦最终还是不愿回去，而这个时候他需要经受身边人的各种诘难以确认自己的心意。最后在一通告白之后，两人携手走向又一次轮回。\n轮回到第六世的结果，就是深见夏彦成了你（这也就是游戏开头让你输入你的名字的原因），莲华成为了一个知性大姐姐和你相遇，和你相恋。两人最后渐渐回想起了前世，由于狐妖已经消逝，阻碍已经消失，所以两人修成正果，过上了炮火连天的日子。\n莲华-非轮回线\n狐妖的部分都是一致的，第一世到第五世都是一致的，一直到两人走进万华镜都和莲华-轮回线一样。\n莲华在第一圈后会询问两次深见夏彦是否愿意回去，第二圈则会再问一次。三次都回答不想回去，才会进入轮回线，只要有一次回答了想回去，就会进入非轮回线。\n在这里，最后深见夏彦死者复生，但是他丧失了所有和莲华有关的记忆，“青蜘蛛的诅咒”事件也被科学解释了。苏醒的深见夏彦和月丘以及皇，去和旅馆工作人员、学校老师告别后回到东京过上了平凡的生活。虽然深见夏彦时不时还是觉得自己在搜寻着什么，但是总体而言并没有想起莲华。而莲华的灵魂，也随着狐妖一起被超度，不再和深见夏彦产生任何交集。\n绿毛线\n应该说是很单纯的 BE。\n绿毛在无数若干次引诱深见夏彦，让他回想前世之后，最终有一天直接冲进澡堂色诱深见夏彦。这个时候如果选择“放任自己”，则会开启第一段绿毛\nH，否则则会以绿毛无故消失结束这一天。\n最后某一晚，深见夏彦再一次前往神社的时候终于回想起了一切，这个时候会有选项问“你是谁”。如果先前压住了枪，这里就会有两个选项，一个是“深见夏彦”一个是“彦一”。选择深见夏彦就进入莲华线，被绿毛噩梦调戏一番后直接开始和莲华炮火连天。选择彦一则进入第二段绿毛\nH。不过在一炮之后，绿毛就会以“我要将你变成我的玩物”为由杀死深见夏彦后自杀。而在现实世界中，消息就是“深见夏彦和绿毛在深山中失踪”。随后两年后，月丘香恋和皇公晓回到这个村子尝试回忆一些什么，误入了深山，看到了杀生石下两人的遗体。\n如果先前没有压住枪，那么在问“你是谁”的时候，只有“彦一”一个选项，后面的剧情是一样的。\n月丘线\n最没有意思的线。\n月丘实际上一直喜欢着深见。在主角组前往调查之前，月丘前往深见夏彦的家交代一些工作的事情，这个时候月丘得知深见一直不会做饭，于是她决定给深见做一顿饭。在饭后，带有一点醉意的两人突然趴倒在墙角，男下女上。这个时候月丘向深见表白，会有“接受”和“拒绝”的选项。\n拒绝的话就正常开始调查，会调查到很多东西，会有机会进绿毛线、莲华线之类。\n接受的话直接开启 H\n情节。而因此深见夏彦的心态就变成了“我要尝试融入‘大人’的世界，不能再沉迷于莲华的万华镜了”。而这种心态下，主角组调查的时候，莲华就一直处于很边缘的地位，而月丘和深见则会每晚定时开\nH 情节。\n这次调查最终无疾而终，莲华在意识到深见的心意之后也只是默默留下一句“那就结束了吧”，便再也不见。主角组回到东京之后，自然是深见和月丘的炮火连天的二人世界。\n一些其他地方的想法\n总体而言还是贯彻了万华镜系列“压住枪的都是好儿郎”的准则，越早压不住枪就只能解锁越少的剧情，然后留下越多的没有起底的伏笔。\n虽然说万华镜没啥剧情，但是实际上总体看下来虽然平淡无奇，但还算是叙事完整，能看明白。而且有些伏笔也还算可以，比如说旅馆的“野干（やかん）”面具（“野干”在日语中是狐狸的一种代称），一方面暗示了这里和狐狸有千丝万缕的联系，而最终，绿毛跳舞给深见夏彦看的时候，戴的就是野干面具。另一方面，这个村子叫“薬缶”，和“野干”日语同音，应该是讹传出来的地名。\n此外，一定要抨击一下文案，不是说他写的东西多差，是经常把一些已经约定俗成不写汉字的关联词、虚词写成汉字，而有的时候又会把约定俗成写成汉字的词写成假名。这让我这个现代日语没学好的人读得有那么点难受。举点例子吧：\n成程、折角、兎に角、沢山、取り敢えず、一寸、丁度、其程、是迄\n\n他们实际上是：\nなるほど、せっかく、とにかく、たくさん、とりあえず、ちょっと、ちょうど、それほど、ここまで\n\n这些词可以说是，不太懂日语的人只要听到读音都能回想起来点什么的词，结果硬生生给我看不懂了。\n最后的最后\n万华镜系列我认为是，中下的剧情，中上的作画，虽然不知道为何如此火，但还是有点为三十个小时感到不值。\n但如果闲的话推推也不错，当成一个耗时间的小说吧。不过个人建议先把月丘和绿毛推了，先推莲华会很容易没有推支线的动力，因为莲华线的叙事已经很完备，其他线的逻辑就是误入歧途从而有些事情没发现最后遗憾收场。\n知乎上看了一句总结比较好：\n你以为是你把卖片的上了，谁知道人家是命中注定给你卖片。\n\n就这样吧，小学期还在等着我。\n","categories":["【杂谈】游戏 & 番剧"]},{"title":"NSDI'25 传输相关领域调研","url":"/2025/04/23/survey-nsdi25/","content":"总之来看看最近的一些 streaming 相关的工作，看看大家都在干什么。\n\nMowgli\n- Passively Learned Rate Control for Real-Time Video\nMotivation\n场景是在线会议的码率控制。\n\n基于规则的算法表现很差（GCC 如图 1，大量反例），所以使用 data-driven\n\n启发式算法的简单结构限制了其能力上限\n\n在线会议对卡顿极其敏感，这意味着不能 online 训练（online\n训练导致的质量下降如图 2，训练时导致的震荡如图 3），所以要 offline\n训练\n然而 offline\n训练很容易遇到线上线下数据分布不一致的问题，模拟器也很难完整复现网络的多变性\n\n线上 finetune\n方案也被很多次证明不可行，因为这种数据差异很有可能需要完全重构算法而非简单调整\n\n\n\n\n\nMethodology\n避免将不成熟的模型部署到线上，所以完全离线，数据全部由 GCC\n等算法线上采集回传到服务器。这样做能够收集到大量的与当前环境相关的数据。那么难点就是：\n\n日志数据分布单一（一般都是通过单一算法生成）\n\n最终决策会偏离已有日志，没有 ground truth，外推误差会累积\n\n日志噪声大，其数据不仅仅和算法有关，和外部环境也有很大关系\n\n这也就是这篇论文想要提出的核心创新点，即如何稳定地超越朴素的模仿学习获得更优算法。\n\n这就是，异轨蒙特卡洛控制。\n\n针对此的 methodology：\n\n保守\nreward，线上遇到没有学习到的模式的时候，只有有显著收益才冒险\n学习数据的分布而非单纯的期望，扩大算法的理解能力\n\n具体设计采用 SAC 算法。为了保证保守 reward，在 critic loss\n上增添下述惩罚项：\nα𝔼s ∼ D[𝔼a ∼ πQ(s,a)−𝔼a ∼ DQ(s,a)]\n实际上就是估计了 π 与数据集\nD\n的距离（称为决策信心），越远则 reward 越低。\n\n其实相关保守决策 RL 已经有人在做了，基本来源于 2020 提出的\nconservative Q-learning。相关应用也不少，比如机器人领域 2024 有 CASOG:\nConservative Actor–Critic With SmOoth Gradient for Skill Learning in\nRobot-Assisted Intervention\n\n所谓的学习分布则是直接将 critic 的输出改成一个分布，loss 函数使用\nHuber 函数表示分布之间的距离。\nEvaluation\n\nevaluation 没什么好说的，基本就是 overall\n加上特定场景比较，最后补一些消融。\nComment\n核心就是一个保守化的 ABR\n训练策略，但是说实话，有一个大坑没填上，那就是用 GCC 的 trace\n到底怎么训练出来超越 GCC\n这么多的算法的，也就是说，究竟怎么超越模仿学习的。\nconservative training 只能解决 data shift\n导致的一个子问题，也就是外推误差累积，而且这种解决也不完善。\nDissecting\nand Streamlining the Interactive Loop of Mobile Cloud Gaming\n主旨是优化安卓平台下的云游戏延迟，他们认为最主要的因素是 5\n次串行执行的垂直同步事件。\n\nMeasurement\n测量的 setup\n是使用高速摄像机拍摄，计算触控笔按下和按钮高亮之间的延迟，测量考虑了网络高峰平峰时段以及网络种类等信息。\n\n结论是：\n\n移动端云游戏延迟显著高于 PC 端云游戏，这是因为移动端云游戏可能需要\nOS 虚拟化等等\n网络延迟并非是延迟的最主要组成部分\n交互延迟与网络高峰平峰没有太大关系，显示出大部分系统的弹性\n\n更具体的测量表明，安卓云游戏延迟中最主要的部分是占比 36%\n的安卓内核垂直同步，而这个垂直同步是默认开启的。同时，由于垂直同步，小幅度的抖动可能导致帧播放错过\ndeadline，制造高达 13 毫秒的延迟，从而放大抖动的影响。\n接下来是安卓云游戏的垂直同步拆解：\n\nVSync1：游戏进程等待固定帧率的时钟（无法撤销或者绕过，该同步用于恒定帧率）\nVSync2：SurfaceFlinger 等待前序处理以合成画面\nVSync3：HWcomposer 等待显示器刷新完毕\nVSync4：客户端与服务端同步\nVSync5：客户端 SurfaceFlinger 送显\n\n解决的方式则是剪切和协调。例如第 2 和第 3\n次垂直同步可以通过工程的方式绕过，第 4\n次可以用算法协调，其余两次则基本无法绕过。这也分别带来了来自工程和算法上的两方面挑战。\nDesign\n工程上绕过两次垂直同步的思路是，考虑到图层合成仅仅是增添了 UI\n边框等东西，则可以通过拦截渲染的方式获取原始帧，然后手动合成贴图。这里细节较多，不展开。\n协调则主要通过预测的方式完成。使用回归树，利用下述特征对下述更细致的拆解延迟做预测：\n\n历史延迟数据\n编码帧大小\n丢包率与带宽估计\n\n采样间隔为 1 帧，利用历史 4 秒信息预测未来 1 秒。\n\n在得到未来一段时间的预测之后，做下述数学建模，目的是获得令延迟最小的\no：\n\nEvaluation\n\n基本就是说明了该方法能非常有效地降低延迟。\nComment\n由于这篇和 START 第二篇工作内容太相近了所以其实可以点评的还不少。\n整体的 motivation 比较相似，解决方案上的话工程上绕过 VSync\n的方式不谈，算法上其实有个比较大的问题就是回归树预测肯定是不准确的，但他有个比较\ntrick\n的地方就是，如果假定你给的网络带宽估计是准确的，那其实预测一个网络延迟是很简单的，而渲染、编解码延迟相对而言比较稳定（相对于网络）。然而问题就在于，网络带宽很难预测准，这说白了有点像用前\n10 天的股价预测第 11 天的股价。\n预测窗口是 5 秒也比较值得推敲，云游戏下 5 秒是能发生很多事情的。不过\n5\n秒的好处就是计算最优延迟绰绰有余，这里可以回避掉优化算法时间开销的问题。\n整体而言事实上是个偏工程的工作，但是毕竟还是和第二篇工作内容太近了。\nMutant\n- Learning Congestion Control from Existing Protocols via Online\nReinforcement Learning\n和 Bridging the Gap between QoE and QoS in Congestion Control: A\nLarge-scale Mobile Web Service Perspective\n有点像，都是如何充分利用已有的 CC 算法。\nMotivation\n核心的 motivation 来源于不存在一个 CC\n算法能应对所有网络情况。例如，Cubic\n在稳定环境下表现良好，但难以适应带宽波动，BBR2\n虽擅长处理突变带宽，却在低容量网络中表现欠佳。\n\n另外，为了适应不同的网络情况，各种 data-driven CC\n也应运而生。然而这些 CC 一般限于下述两点：\n\n仅依赖于历史拥塞窗口情况学习，泛化性差\n泛化性好的方案一般都有相当长的 offline 训练流程\n\n从而一种可行的解决方案则是，我们不主动推导拥塞窗口，而是选择合适的已有\nCC 来应对当前情况。\nDesign\nMutant 通过 Top-k 的方式选择初始协议，并在初始协议的基础上通过 online\nRL 来优化 CC 性能。\n协议接口通过统一函数指针封装，首先明确协议切换时需要做的事情：\n\n冻结上一个协议的所有状态变量（支持恢复）\n切换协议时保持拥塞窗口不变，保证 CC 连续性\n\nonline RL 选择了 contextual\nMBA（在给定上下文状态空间编码的条件下的多臂老虎机），策略则是线性上置信界（Linear\nUCB）。\n状态则是从内核探测，一共有 55\n个字段，时间窗口分为长中短三个阶段，对应 10/200/1000\n次采样，最后通过一个编码器降维压缩到 16 维。\nreward 定义为：\n$$\nR_t = \\dfrac{({\\rm thr}_t - \\zeta l_t)^\\kappa}{d_t}\n$$\n分子上是发送速率和丢包率，分母是延迟。\n\n在训练的时候，不断使用 MPTS 算法选出最有可能竞争的 k 个 CC\n算法组成算法池，在当前阶段则不断使用 contextual MBA\n算法选择实际执行的算法。该阶段结束后，更新各个算法的 reward。\nEvaluation\n\nComment\n该方法尝试去利用了当前已有的 CC 算法，尽力做到物尽其用。\n本篇与之前 Zili Meng 的那篇 CC selector\n比较，一个核心的竞争力在于本篇的 selector\n是可以线上学习的，是可以根据不同的网络情况生成不同的 Top-k\n然后物尽其用的。而这种线上学习也就意味着难以用神经网络构建\nselector，所以本文打开了这个 selector\n的黑盒，采用了更类似于启发式的算法（不可否认还是使用了 embedding\n之类的策略）。\nCheckpoint\n大体而言今年 NSDI 的 streaming 部分这三篇挺有代表性的：\n\n新问题（云游戏中的垂直同步）\n新方法应用到老问题，难点在讲好故事，为什么新方法可行\n老方法聚合（包括 Zili Meng 的 CC selector）\n\n云游戏总之还算是一种前沿，还是能提出一些视频相关的新问题（但是能不能解决不清楚，目前显得有点要么太容易解决，要么无解）。码率控制、CC\n之类的相对传统的方向，总之有一种需要拼凑才能做出东西的感觉。\n是否可以从一个相对系统的角度去思考问题，而非优化单一的算法（CC、ABR），从流媒体系统架构的角度去做（垂直同步那一篇）？\n\n完全不知道自己在说什么。\n\nHolmes\n- Localizing Irregularities in LLM Training with Mega-scale GPU\nClusters\nLLM\n的训练需要极其大量的硬件成本，所以需要尽可能提高训练过程对硬件的利用率。一般大家都认为训练的\nfailure 会导致巨大的硬件资源浪费，本文发现另外一个导致资源浪费的原因，即\nirregularity，指的是明显耗时过长的 iteration。\nirregularity\n不会中断训练，所以难以定位，但是依然会导致资源浪费。irregularity\n的特征是会传染，因为其不会导致中断，所以其他 GPU\n会被动等待导致传染。这使得 irregularity 甚至比 failure 更严重。\nchallenge 可以归纳为：\n\nirregularity 不会导致中断，所以难以定位\n另一方面，定位还必须要精准，因为错误定位的恢复比 irregularity\n本身的损失还要高\n而 irregularity 的传染性让定位更加困难\n\n算子分为计算算子和通信算子，顾名思义计算算子只要单 GPU\n执行即可，通信算子则需要多 GPU\n之间同步。通信算子进一步分为集群通信算子（涉及大范围的\nGPU）和点对点通信算子。\nMeasurement\n定义 δ-irregularity (δ &gt; 1，一般设定为 1.1)\n表示出现了某一个没有中断训练，但是耗时是指定窗口内平均时长的 δ 倍的 iteration。\n\n上述可见：\n\nirregularity 出现的机率比 failure 高出若干数量级\nirregularity 出现的机率随着 GPU 数量增多而增大\n\n\n上述可见：\n\nirregularity 导致的时间浪费与 failure 接近\nirregularity 所需要的诊断分析实践也高于 failure\n\n这是由于 failure 处理已经相当标准化了\n\n\n总之就是验证了 irregularity 的特质，也说明了全文的 motivation。\nDesign\nirregularity 分为三类，即 abnormal spikes、performance\nfluctuation、persistent degradation。\nabnormal spikes 指的是某些 iteration 出现了尖峰长耗时，这种\nirregularity\n有较为严重的影响。经过训练归因，本文确认了这类问题主要的两个原因是 GPU\n运算卡顿和网络卡顿是主要原因。\n\nperformance fluctuation\n指的是周期性的波动，虽然它们也呈现出尖峰长耗时，但是相对于 abnormal\nspikes 温和，并且呈现一定规律，然而正是由于规律性，performance\nfluctuation 的影响比 abnormal spikes\n大。经过训练归因，本文确认了主要原因是网络相关的显式拥塞通知（ECN）和优先流量控制帧（PFC）。\n\npersistent degradation\n指的是长期视角下的训练效率下降，但这类问题归因简单，基本都是 GPU\n过热或者 CPU 异常高占用率。\n\n最终设计如下：\n\n工作流为：\n\niteration monitor 实时追踪 GPU 日志\n检测到异常的时候，operator detector\n检查具体是什么算子导致了问题\nroot localizer 通过算子图确认需要检查的 GPU\ndevice analytics 计算 Top-k 故障 GPU，提交给值班检修\n\nIteration monitor &amp;\noperator detector\n首先，必然不可能什么东西都打日志，考虑到通信算子的状况既可以监测网络链路又可以一定程度代表其上游的计算算子，所以可以只打印通信算子的情况.\n\n在检测到异常的迭代时长的时候，需要去溯源日志去看哪个算子出问题了。这里为了管理算子的\nperformance，本文使用了随机森林，算子日志的每条记录都是随机森林的样本。同时，引入迭代时间、算子运行时间窗口均值等特征增强。\n简而言之就是对每一个算子建立一个决策树确定其是否是异常算子。但是由于\npersistent degradation 存在，所以算子的特征分布必然会\nshift，所以需要设计相关的补充措施。\n本文的决策树时，每个节点的所采用的特征都是明确的，所以当某一个统计量出现\nshift 的时候，只需要直接调整相应节点上的阈值：\n\nRoot localizer\n为了具体定位是哪一个 GPU 出了问题导致某个算子异常值（注意\nirregularity 是有传播性的），可以建构一个图来表示 GPU\n之间的依赖关系，这就是所谓的 COG。\n定义 COG G = (O,D,E)，其中\no ∈ O\n是通信算子，d ∈ D\n是设备，如果 d 需要执行 o，则连边 (o,d) ∈ E。\n为了减缩图的复杂度，可以对 COG 分组。对某一个算子 o，列出所以与其连边的 d，这些 d 构成一个 cluster c ∈ C，我们用 C 代替 D，这样我们可以注意到最终的 COG\n中每一个算子 o ∈ O\n只会有一条边，存储图的内存就可以节省。同时 C 的 size 一般也是可控的。\n\n如果现在异常的是集合通信算子 o，检测其所属 cluster c，对 c 其余的所有算子作分析。\n\n若这些算子全都异常，则说明 o 本身就是问题，终止分析\n若存在正常算子 n，则说明其他算子是因为等待 n 而异常，此时回溯 n 的前序\n\n如果没有异常算子，则说明 n\n运算超时\n如果有异常算子，重复上述过程\n\n\n\n如果现在异常的是点对点通信算子 p，检测其配对的算子。\n\n若均异常，则说明通信存在问题\n若对方正常，则回溯对方（同上）\n\nDevice analytics\n简单来说就是现在查出来根源了，怎么分锅。首先计算这个 irregularity\n和上次 iteration 超时之间的 Pearson\n关系系数作为惩罚项，然后如果定位为计算超时则直接惩罚到 GPU\n上，如果是网络超时则惩罚到相关 GPU 和这些 GPU 之间的交换机等设备上。\nEvaluation\n各组件的性能以及端到端与 baseline 的对比：\n\n时间开销：\n\n主要优势在于这个方法不需要检测所有 GPU。\n\n但说实话你构建 COG 的时候，简单加一个分组是不是也可以避免 all\nfetch？这个对比是不是有点不公平？\n\nConclusion\n很像工程技术报告的文章，写得很简单直白但是做了一件挖得很深很全面的事情。\nMinder\n- Faulty Machine Detection for Large-scale Distributed Model\nTraining\n同样的，是一篇大模型训练系统故障检测相关的文章。\n这篇文章所提出的故障检测模式有四大核心检测原则：\n\n相似性分析\n连续性检测\n各个指标有各自专用的降噪模型\n指标存在优先级排序\n\nMotivation\n\nmotivation 本身没有很多值得说明的：\n\n频率高：日均故障可能到达 2 次，严重影响训练进程\n错误级联：单机故障可能通过通信算子传播到其他机器，导致其他机器空转\n诊断耗时：平均人工诊断时间达到半小时，严重情况达到数天\n经济损失：即使不完全停机，降速也会导致额外的经济开销\n\n而当今的日志、诊断系统存在很多缺陷：\n\n日志记录设计有问题\n\n欠缺信息：日志往往只包含 CUDA\n等软件层以及网络与简单的硬件信息输出，缺失与停机关系更大的功耗、核心温度等指标\n\n案例：优先流量控制帧（PFC）未被日志及时记录导致定位困难\n\n冗余信息：环境变量、警告等信息大部分情况下无用\n\n人工核查的问题\n\n工程师只会在任务彻底停止后收到通知，对于性能 degradation\n无法及时响应\n人工核查涉及多个团队之间的协作\n\n\n\n这张表展现了各种错误的类型以及在多少的 case\n中观察到了对应的异常指标。结论：\n\n硬件/GPU 故障频发\nPCIe 总线降速、网卡掉线与网络指标强相关\n\n另外一些深入到秒级别观测指标的 measurement\n为我们提供了可以用于观测故障的敏感指标：\n\nCPU/GPU 负载：故障机利用率会骤降，受影响的机子则会因为 k8s 等的\ntimeout 过一段时间才停止\nPFC 包速率：网卡缓冲区积压会导致 PFC\n包速率飙升，健康机则不会有这一现象\n\n此外，磁盘使用率等指标则一般对故障不敏感。\n上述总结出来设计标准：\n\n硬件故障依赖于 CPU/GPU 负载率等指标\n网络故障依赖于网络相关指标\n内存负载率则作为辅助指标\n\nChallenge\n\n机器故障方式多样，下层故障可以引起多重故障。解决方式：全栈层的日志系统\n在不同的工况下，正常指标的定义不一样（高时钟频率下 GPU\n温度升高属正常），传统方式会因为缺少新的标签难以训练。解决方式：采用无监督聚类\n故障与原因之间不是一一对应（一因多果、一果多因）。解决方式：构建指标传播图\n噪声干扰。解决方式：滑动窗口、时序建模\n\nDesign\n\n工作流程首先从收集指标开始，本文要求日志系统精简后，以秒级别输出。\n每个指标都会有针对性设计的 VAE\n降噪模型，并且根据指标排序（先前统计了不同的指标对错误指示的概率是不同的）确定需要检测的指标。\n\n确定了需要检测的指标后，对于属于同一组的机器，其各项指标应当接近，所以对每一个指标，统计每一台机子距离其他机子的距离，出现离群点时即说明有可能出现了故障。例如，上图中出现故障的机子\nPFC 包速率显著上升。\n\n在确定了可能的故障机子后，对各项指标作监测。由于噪声（传感器抖动、网络等）一般持续若干秒，而故障持续以分钟计时，所以对指标应用一个滑动窗口（例如\n5 分钟），只有持续性超过阈值才会认为该指标异常。\nVAE\n这一部分主要讲怎么从日志原始数据获取去噪过后的指标序列。\n预处理主要包括使用最近邻均值填充缺失指标、时间戳对齐以及归一化处理。\n在此基础上训练 VAE 用于去噪：\n\nMetric detection\n为了检测哪一个指标有最大的问题，使用 Z-score：\n$$\nZ_{ij} := \\dfrac{x_{ij} - \\overline{x_j}}{\\sigma_j}\n$$\ni 是机器下标，j 是指标下标。同一个指标的 Z-score\n离散程度越大说明该指标有问题。\n通过长时间的人工标注得到指标优先级排序：\n\n\n本文还对这个人工标注的结果用决策树包装了一番…\n\nEvaluation\n定义：\n\n真阳性（TP）：故障后正确检测到故障机器\n假阴性（FN）：故障机器检测错误或漏检\n真阴性（TN）：机器正常运行时正确判定\n假阳性（FP）：无故障时误报\n\n据此计算 F1 等指标。\n\n对不同的故障类型：\n\n其余则是各个组件与相应的 baseline 对比，就不贴图了。\nConclusion\n这类论文的流程基本是同样的：\n\n日志告警\n定位错误机子\n定位错误原因\n\n第一篇看的主要在讲怎么去定位错误机子，而这一篇则在讲怎么正确告警和定位错误原因。\n第一篇定位错误机子显然更难，因为他是定位性能波动而不是故障，听起来就很有意思做得也合乎逻辑。\n第二篇整体就比较模糊，模型的选择、训练以及最后错误原因定位（其实说白了也是一个经验图，就那个表\n1）也相对模糊。\n不过共同点就是要进大厂做。\nMTP - Transport for\nIn-Network Computing\n是一个协议相关的工作，设计了一个原生支持网内计算的协议。网内计算就是将应用层的计算任务下沉到网络设备上进行的方案。\n网内计算协议必须满足下述约束：\n\n在应用层卸载的计算任务可能对应用消息进行修改、拦截、重排序和任意延迟的情况下，仍能保证可靠性拥塞控制等基本功能\n不额外增加 INC 硬件的传输相关资源需求（如大量缓冲或状态维护）\n\n现在常用的协议是 TCP 变种或者\nRDMA，而这些协议多少都会违反上述约束。\nMotivation\nINC\n允许在网卡或者交换机上做键值缓存、机器学习内网聚合等应用层任务，但这些操作可能和下层传输协议有所冲突。\n首先，卸载单元（指网卡、交换机等）可能需要修改 payload，例如注入\ncookies 或者梯度聚合后替换计算结果，这会影响消息长度与分包数量。\n之后，卸载单元可能会拦截消息并丢弃，例如部分负载均衡任务会丢弃不符合要求的请求。\n然后，卸载单元可能会重排序信息。\n最后，卸载后的延迟可能难以预测，例如 FPGA\n的入侵检测的延迟长尾现象很严重，部分聚合需要等待所有节点导致实际耗时无法预测。\n现今的协议主要有三个，TCP 变种（例如 QUIC）、RDMA、Homa。\n\nTCP、RDMA\n完全无法处理消息修改、拦截、重排序，因为其传输有效性完全依赖连续的字节空间与序号，修改和拦截会导致收发两端不一致，发送端无法确认是否需要重传。重排序则会被理解为丢包导致重传和拥塞窗口缩小\nHoma\n协议（不太懂）无法处理消息修改（依赖字节范围判定），兼容拦截和重排序（采用消息级独立传输），随机延迟会导致其拥塞控制失败\n\n另外一方面，由于协议不够理想，INC\n任务往往也会加入约束来适配协议。\n\n卸载节点同时运行收发两端的协议栈，这会导致大量的资源浪费，部分交换机也不支持\n约束 RPC\n长度、约束修改不能改变消息长度、选择性支持（例如不支持拦截消息）等\n\n因此，本文的设计目标为：\n\n完整支持消息修改、拦截、重排序\n在各种延迟的情况下都能保证控制有效\n不依赖于特定的硬件设计\n\nDesign\nPathlet\n消息传输过程中，可能会经过多个执行不同计算的卸载单元，这些卸载单元称为一个\npathlet。pathlet 中的各个节点可以共用地址也可以不共用而分布式。\n\n在这个基础上，我们需要实现匹配当前任务 pathlet\n的发现和路由。另外，本文优先实现全缓冲模式（节点缓存全部信息后处理），这是因为当今大部分上层应用和下层硬件都支持单包/巨型帧。\nComponents\n两大核心组件。\n\n面向消息的可靠性协议\n\n原生支持消息修改、拦截和重排序\n采用基于消息的重传超时（RTO）机制：接收端在收到完整消息后发送端到端（E2E）ACK\n以取消定时器，否则触发整条消息重传\n\n多 pathlet 拥塞控制框架\n\npathlet 级早期拥塞反馈：pathlet 可将其拥塞状态及链路拥塞信号（如\nECN）直接反馈给发送端\n消息级 pathlet 选择：当存在多个同类型 pathlet\n时，每条消息可动态选择不同实例以规避拥塞点\n\n\n优势在于无需 pathlet 维护额外传输状态。\nWorkflow\n\n\n连接建立\n\n采用类 TCP 三次握手\n发送方通过服务发现协议获取 pathlet 信息，拥塞控制模块缓存可用\npathlet\n\n消息发送\n\n应用提交消息描述符（含消息体元数据）\nMTP 栈分配递增的消息编号，拥塞控制选择 pathlet 地址并写入描述符\n消息体按 MSS（本例为 4096 字节）分片，每片携带唯一分段号\n封装 pathlet 地址和分段数据后发送\n\npathlet 处理\n\npathlet A 收到分段后立即生成拥塞反馈包（含自身及链路拥塞信号）\n执行消息修改（本例使消息增大 8 字节，导致分段数变化）\n\n消息接收\n\n接收方根据首个到达分段创建消息描述符，用位图记录已收分段\n当所有分段到达后发送 E2E ACK\n接收方被动\n\n仅对完整消息发送ACK\n不检查消息编号连续性或分段顺序\n支持因细粒度负载均衡导致的乱序到达\n\n\n\n设计特性：\n\n不保证消息顺序交付：避免队头阻塞（HOL\nblocking）影响时延敏感应用\npathlet\n行为约束：每条输入消息最多产生一条输出消息、拦截消息需模拟接收端发送 E2E\nACK、新增负载必须通过消息修改实现\n扩展性：多播 pathlet 支持留作未来工作\n\n","categories":["【论文笔记】计算机"]},{"title":"一部真实的校园恋爱番《龙与虎》","url":"/2022/12/29/toradora/","content":"由于新冠阳性卧病在床三天，中间某一天我一天刷完了《龙与虎》的 26\n集，作为为数不多的超长校园恋爱番，在看完《龙与虎》之后，我明显感受到了这部番和当下很多恋爱番的不同。\n\n人物感情线\n《龙与虎》可能最让人感到迷惑的就是错综复杂的感情线，很多观众也都评论说感情想相当扭曲。这里为了更好写读后感，还是稍微写写各个人物的感情线。\n这里想要探讨的是男主角团龙儿、北村和女主角团大河、实乃梨、亚美、会长的感情线。这里另外做个补充，由于大河在日语中发音为たいが，和意为老虎的タイガー读音类似，加上番里大河凶狠乖戾的性格，故大河也有老虎的外号。\n北村与会长\n北村为本作男二，会长为本作女四。在进入高中之后，由于对理想中的高中生活的憧憬，有点为了谈恋爱而谈恋爱地向大河表白，却遭到了拒绝。在心灰意冷之际，会长出现了，其劝说北村高中生活并不只有感情。受到鼓励的北村于是加入了学生会，在学生会的一年中，北村逐渐对会长产生了好感。由于北村确实能力卓著，会长也在自己心中确认了对北村的好感。\n然而转折出现在高二年级，会长作为毕业生即将毕业且计划留学。然而会长知道，北村之所以进学生会，之所以如此拼命干活，自己永远是重要乃至最重要的因素。也就是说，会长清晰地知道北村一直在追逐自己，所以即使答应了北村的感情，也注定将会是一段不平等的感情。所以会长为了防止北村不假思索追逐自己，强硬地隐瞒了留学的计划。\n但是计划依然暴露了，北村一蹶不振，因为对他而言，会长是他继续做下去，并接过学生会长这一身份的唯一理由，他想要追逐会长。受到打击的北村束手无策，选择了自暴自弃。先是宣布不参与学生会长竞选，后是故意违反校规校纪染发逃学，用他自己的方式阐述自己自甘堕落。会长在目睹这一切后，即使心疼，但是从自己的立场出发，依然在他人面前刻薄地评价北村为懦弱的人。\n在这个时间点，大河是喜欢北村的，为了拯救北村，大河宣布参加学生会长竞选，并故意宣扬自己在竞选成为学生会长后会推行相当严厉的政策毁掉所有人的高中生活。这种自爆行为，事实上是发动群众来劝说北村回到学生会长竞选中。在这一番操作之下，北村最终回到竞选，并且得到了会长的支持。\n在最终的竞选演讲中，北村高调面对全校向会长表白，然而会长并没有正面回应，发好人卡一样地冷处理了这一充满勇气的行为。在这之后，大河被彻底激怒了，她认为会长在玩弄北村的感情，于是提着木刀和会长线下械斗。会长自然无法是大河的对手，在落败后，会长最终情感崩溃，承认了自己喜欢北村，同时也讲出了自己的心声，讲出了不想让北村仅仅是追随自己的真实想法。\n最终，北村成为了学生会长，会长也按照计划前往美国留学。一年后，北村毕业，也同样规划前往美国留学，经历了高中三年的磨练，其心智更为成熟，也更加坚定了对会长的好感。\n大河与龙儿\n本作男女主。大河家庭情况较为混乱，父亲在和其生母诞下她后，不久就将其和其生母全部抛弃，除了每个月定时打入生活费外，与其生活完全没有交集。其与其生母的关系也较为冷淡，本作中是独居状态。正是因为这样的家庭背景，大河十分缺少关爱，这也是她感情线的重要基础。此外，大河的另外一个重要特征是十分缺乏生活技能和笨拙，这也和家庭背景有关联。\n而龙儿的家庭环境则也较为混乱，父亲是不良少年，在和龙儿生母未婚基础上诞下龙儿后人间蒸发。龙儿生母为了抚养龙儿，决定离家出走，通过陪酒女的工作支撑家庭，并且一直向龙儿隐瞒其父亲真实的情况。所以龙儿自幼缺乏父爱，又相当追求父爱。另外，由于这样的家庭背景，龙儿不得不学会了各种生活技能，主妇属性拉满。\n大河在刚进入高中被北村表白后，虽然其拒绝了北村，但是由于北村关注着她，在她困难的时候也会伸出援手，其得到了北村的关爱。在这样的基础上，大河萌生了对北村的好感。在某日，大河将写给北村的情书放到其书包中，但没想到不仅忘了把情书本体放到信封里，甚至还把情书错放到龙儿的书包内，这导致龙儿在回来拿书包回家的时候和大河起了争执，大河甚至在当晚为了夺回情书提着木刀来到龙儿家复仇。\n在那天晚上，龙儿劝说了大河，情感并非是可耻之事，并且给大河看了其为暗恋对象实乃梨写的诗乃至未来生活规划。在一番交流后，两人发现，大河暗恋的北村是龙儿的好友，而龙儿暗恋的实乃梨是大河的好友，于是两人组成龙虎同盟，帮助对方追求自己的好友。\n然而，由于大河严重缺乏生活技能，而龙儿又会做饭，两人家又很近，所以大河在此之后便稳定在龙儿家里吃饭，龙儿甚至还会帮助大河洗衣和打扫公寓。\n这个时候，大河和龙儿仅仅是一种依存关系，虽然在外人眼中看来两人已经近乎同居，但是两人均不承认和对方有超过朋友的越界行为。在龙虎同盟的约定之下，龙儿帮助大河拍北村的照片，大河也会创造龙儿和实乃梨独处的机会。\n其间，大河在龙儿鼓励之下向北村表白，但是被拒绝了，北村表示，其仅仅想作为朋友帮助大河。\n第一次转折发生在亚美的出现，作为模特，亚美身材傲人，相比之下大河的身材就显得较为弱势。这一矛盾的激发是游泳课，大河由于身材自卑于是抵触游泳课，龙儿为了帮助大河找回自信，于是帮其缝制胸垫来伪装身材。亚美在游泳课上见到这一幕后决定挑战龙虎联盟的关系，提出和大河比赛，若亚美获胜则会把龙儿带去自己的别墅过暑假。无论是出于对龙儿离去后自己生活质量下降的担忧，还是此时由于已经和龙儿相处甚久而萌生的朦胧情愫，大河都决心为了龙儿赢下比赛。比赛最终确定为五十米自由泳，然而由于大河不会游泳，所以龙儿又承担了教学游泳的任务。在两人在市民泳池练习的时候，大河第一次因为对龙儿朦胧的好感而情感爆发。\n比赛当场，大河在游泳过程中抽筋，龙儿立刻下水营救，但最终依然将自己搭了进去。然而这个时候群众的目光全都集中在亚美即将赢得比赛，没有多少人关注到龙儿即将陷入险境。最终，虽然在大河求救之下龙儿得救，但是大河也最终没能收束自己的情感，面对大家说出了著名的：\n龙儿是我的，你们一个都不许碰他！\n\n事实上，即使经历了这样的事件，大河对龙儿也依然仅仅是无法确定的朦胧好感，大河依然对北村充满热情。在此之后，由于亚美依然是实际上赢得比赛，所以亚美依然可以带龙儿前往她的别墅过暑假，然而在北村劝说之下，最终变成了主角团五人全部前往亚美的别墅。在这一过程中龙虎联盟达成了本次主要是大河帮助龙儿追求实乃梨的作战计划，大河得知实乃梨害怕灵异，于是计划故意恐吓实乃梨，让龙儿趁机营救实乃梨来创造机会。然而，这个计划非常自然地失败了，因为实乃梨实际上并不害怕灵异，反倒十分喜欢灵异。\n另外，这个时间段也是龙虎联盟在梦中和对方确认关系的时间点，两人都做了和对方确认关系的梦。\n随后，大河的父亲出现，其希望能够将大河带回抚养。作为大河的挚友，实乃梨十分清楚大河父亲的本质。然而渴望父爱的龙儿由于并不清楚大河父亲的本质，强硬地要求大河离开自己家和父亲生活。在名义上收回抚养权的基础上，大河的父亲作出了会来看女儿在学园祭上的演出的承诺，然而显然，这个承诺是空虚的，最终一条短信依然把大河甩给了龙儿。\n在学园祭的最后，发生了两件事。一件事是，由于大河没能等到父亲，其对家庭复原的期望再次落空，受伤的大河通过很有情感张力的演出赢下了学园祭选美比赛后，学生会追加举办了男子选拔赛，全校男子绕学校跑一圈，最快的人能够和选美比赛获胜者，也就是大河共舞。在这场比赛中，终于认识到自己没能看穿大河父亲而导致伤害了大河的龙儿为了赎罪，拼命希望抢下头名，在这过程中实乃梨也前来帮忙，两人自然地牵着手拿下第一。第二件事是，最终的篝火晚会上，北村邀请了大河一起跳舞。\n在这里，似乎龙虎同盟的目的即将达成，因为大河和北村，龙儿和实乃梨，这两对的关系都得到了进展。然而，转折也就随之而来，学生会长竞选事件的爆发，让大河最终认识到北村早就心有所属，其对自己的关心不过是作为朋友的关心，大河对北村的热情也随之慢慢地弱化。但是，大河先前对北村的追求，是全班都知道的，在北村表白失败后，全班为了安慰北村防止其再次自暴自弃，尝试着撮合北村和大河。另外，由于大河的学生手册中夹着在篝火晚会上她和北村共舞的照片，北村和大河的关系，在旁人眼中得到了强化。而这也让实乃梨终于敢于承认对龙儿的好感，出于龙虎同盟的约定，大河也更加卖力地帮助龙儿追求实乃梨。\n然而，实乃梨在亚美的质疑下，并没能成功面对自己对龙儿的好感，而是逃避着这一切。\n这之后，就是圣诞夜。学生会计划在圣诞夜举办派对，大河此时依然在帮助龙儿在圣诞夜向实乃梨表白，龙儿也为实乃梨准备了发卡作为礼物。但是由于实乃梨此时不断地逃避着自己的感情，不愿意面对大河和龙儿，所以并不计划参与圣诞派对，即使龙儿已经盛情邀请。大河在派对当晚，完成了演出之后立刻前往实乃梨家劝说其前往派对，并撒谎夸大了龙儿对实乃梨的承诺。大河由于此时已经逐步对龙儿产生好感，无法面对实乃梨和龙儿最终将会走到一起的现实，于是在劝说实乃梨后径直回家，没有再前往派对。\n在派对现场的龙儿，从亚美处了解到了大河早已回家，想到大河之前提到过想要见圣诞老人的想法，出于对大河的关心和担忧，立刻和别人借到一套戏服打扮成圣诞老人前往大河家。在和大河玩乐一圈后，大河意识到终究是要让龙儿回到派对现场，出于先前已经和实乃梨夸下海口并且龙虎同盟的约定也是如此，于是大河强硬地将龙儿赶去了派对。\n然而，在送走龙儿后，大河终于意识到，如果一切进展顺利，实乃梨最终和龙儿在一起，自己将无法时时刻刻呆在龙儿身边。也就是说自己已经视之平常的和龙儿的相伴，被自己亲手推向了毁灭。意识到这一切的大河情感崩溃了，赶忙出门追龙儿，但是已经为时已晚，只能无助地跪在路边痛哭。\n之后便是修学旅行，本年度修学旅行是前往雪山的滑雪之旅。在修学旅行中，亚美和实乃梨就情感问题爆发争执，这争执过程中，龙儿送给实乃梨的发卡掉落在悬崖下，而大河为了取回发卡，冒险滑下悬崖，最终被困。得知此事后，龙儿立刻前往营救并最终背回大河，大河在逐渐苏醒的过程中将龙儿错认为北村，并自言自语般透露了“这种时候还愿意管我的应该只有龙儿才对”并且透露了自己喜欢龙儿。龙儿听到了，但是没有戳穿自己不是北村这一事实。\n最后，大河为了感谢大家在自己遇难的时候帮助自己，将主角团召集在一起计划送给大家巧克力作为答谢。为了统一口径，龙儿特别叮嘱了北村，要假装成救援大河的是北村而不是自己，因为其知道大河在躲避承认感情，要是让大河知道了当晚她说的话已经被自己听到了，很有可能导致矛盾，然而龙儿忘了叮嘱知道真相的实乃梨。于是在大河送巧克力的时候，实乃梨认识到了大河并不知道真相，并且立刻明白了龙儿也在躲避大河的感情，而非正面面对。主角团其余人在此时达成共识，坚决不能让龙虎再躲避两人之间的感情，于是强硬地要求两人面对内心。大河在这样的情况下，选择了逃跑，而在追逐大河的时候，实乃梨终于不再压抑自己的情感，大声宣称自己对龙儿也是充满好感，但是由于自己还有棒球梦想，而且龙虎同盟已经事实存在了很长时间，实乃梨最终决定放弃了自己在情感上的追求。\n在这一连串事情后，龙虎二人最终互相表白。为了得到家长的认可，龙虎二人投奔了龙儿的祖父母，并用骗称龙儿遭遇事故将已经离家出走十余年的龙儿母亲骗回了家人身旁。大河在观察到龙儿的家庭之后，决心面对自己的家庭，在留下留言后，大河决定退学回到父母身边一段时间。面对这样的不辞而别，龙儿虽然不甘，但是依然充分理解。一年后，在毕业典礼上，大河终于回归，龙虎也终于破除了所有的感情障碍，走到了一起。\n实乃梨\n本作女二。其有一个弟弟，她和弟弟都擅长棒球，但是家庭却仅仅支持弟弟的棒球事业。不服输的实乃梨计划通过高中课余时间打工攒钱，在高中毕业后自给自足前往体育大学就读。实乃梨的性格对外而言是相当阳光开放的，然而其内心却相当闭塞和喜欢逃避现实。\n在感情上，由于这一梦想的存在，实乃梨一般并没有体现出自己的情感取向，更多的时候是以一副和感情绝缘的面貌示人。然而，由于目睹了龙儿的很多事迹之后，实乃梨慢慢对龙儿产生了好感。\n在暑期合宿中，龙儿在和实乃梨两人独处对话的时候，流露出了对实乃梨的好感，然而实乃梨并没有爽快承认，仅仅是搁置了这一议题。事实上，这是因为实乃梨想要维护龙虎同盟而在自己的感情上做出的让步。\n学园祭的男子选拔中，其和龙儿为了安慰受伤的大河，联手拿下了比赛的第一，事后，两人都收藏了和对方牵手冲线的照片。\n由于在她眼中看来，大河和北村的情感愈发成熟，其不需要再顾及好友的情感而不敢表达对龙儿的好感。所以在看到大河的学生手册中夹着和北村的合照之后，其松了一口气。但是这个时候，亚美发出了灵魂疑问：\n负罪感，减少了吗？\n\n在这样的疑问之下，实乃梨又一次对自己的情感犹豫了，她认为自己的情感牵挂的事情太多，自己选择龙儿依然被好友大河的情感牵制，于是她躲避了自己对龙儿的情感。然而在这种心不在焉的状态下，实乃梨甚至输掉了从来没想过会输的棒球比赛。\n在这样的低谷之下，实乃梨显然无法面对龙儿想和她一起参与圣诞派对的邀请。然而，在当晚大河的劝说下，实乃梨最终还是计划前往会场，但是，在路过大河公寓的时候，她看见了跪在地上痛哭的大河。这个时候实乃梨明白了实际上大河依然和自己想的一样喜欢着龙儿，大河依然还是出于朋友之间的情谊，将龙儿让给了自己，而大河自己却在忍耐着这些痛苦。实乃梨最终在遇到了龙儿的时候，还未等他开口，便拒绝了龙儿的所有好意。\n实乃梨对自己感情的极端逃避引来了亚美的不满，而这也是修学旅行中两人争吵的根本原因。在争吵导致大河遇难等一系列事情后，最终在大河送巧克力的时候，实乃梨终于鼓起勇气面对自己的感情，承认了龙儿终究不会选择和自己走到一起，那么自己就要更为棒球梦想努力。而正式与自己的感情告别的标志是另外一个名场景，实乃梨为了激励龙儿去追逐大河，伸出拳头给龙儿打气，结果碰到了龙儿的嘴唇，当时并没有发生什么，但是当龙儿下定决心飞奔去追逐大河之后，实乃梨偷偷亲吻了刚刚碰到龙儿嘴唇的拳头。\n然而，即使鼓起勇气，实乃梨依然改变不了自己的挚友和自己喜欢的人最终走到了一起，最终会离自己远去的事实，在痛哭一顿后，实乃梨最终接受了现实。\n亚美\n本作女三，是北村的青梅竹马。亚美是职业模特，因为跟踪狂的原因被迫放弃工作并转学，并且在工作中磨练了一套伪装术，也就是所谓人前一套人后一套。有着丰富的社会阅历，对主角团的这些情感问题看得最为透彻，甚至接近上帝视角，然而涉及到如何去解决的时候，又缺乏和青春期少年少女交流的能力，很容易触发意料之外的矛盾冲突。\n亚美的感情线较为简单，即在龙儿劝说她放弃伪装和大河暴打跟踪狂后，亚美就对龙儿产生了好感。但是亚美作为主角团中心态最为成熟的一人，其对龙儿的依赖感是最弱的，仅仅是保持了好感和希望其多关心自己的愿望。\n相对地，龙儿则几乎完全将亚美作为自己的朋友看待，在各种对话中也不会将自己和亚美并称。\n一些想说的话\n这个作品的感情线是真的扭曲，尤其是圣诞夜，如果加上前夕的话，这一段时间主角团五人全部失恋。首先是北村表白被会长冷处理，之后是亚美向龙儿示好也被龙儿忽视，再然后是大河亲手将自己和龙儿相伴的机会毁灭而痛哭，其后是实乃梨看到大河对龙儿的热烈的情感而决心放弃自己的感情，最后是龙儿甚至没有表白就被实乃梨回绝。\n虽然虽然，龙儿和大河在当时已经几乎快要两情相悦，但就是这么阴差阳错让两人到了更晚才确定互相的心意。\n不过，我为什么还是觉得这部番相当优秀，是因为这部番的感情线虽然很扭曲，但是却真实。虽说不能忽视艺术加工，但是这部番对青春期的少年少女朦胧青涩、飘忽不定的情感，以及在此基础上对自己情感的逃避，对友情和爱情之间的抉择，对家庭的理解等等的刻画十分真实。就以我自己为例，我中学时期对爱情的认识也不过是一种飘忽的感情，大多时候并没有区分一场随便的恋爱和需要承诺和责任附加的一场恋爱，所以即使有观众认为不真实，但我认为大河到最后，到真正将龙儿推给实乃梨的时候才真正认识到一直支撑、关注自己的并非是北村而是龙儿，这样的认知变化也并不虚假，而且前期就已经铺垫了大河是笨拙迟钝的。事实上，就我个人而言，2021\n年的时候我的情感动荡，直到 Sakana 离我远去才真正敢于面对自己内心对\nSakana\n的情感而自责为何之前会冷处理两人的关系长达两三年。说实话，大河在圣诞夜的痛哭，我是觉得相当真实的，因为人真的是不见棺材不落泪，不到真的要失去了，都不会正视自己的情感。\n但要说这部番的情感刻画上的问题，说实话我觉得对龙儿的情感刻画还有些欠缺，尤其是其一直到圣诞都还对实乃梨保持好感，那他究竟出于什么样的契机就爱上了大河呢？这一点实际上并没有描绘得很好。不过实际上也是可以理解的，就和大河认知转变一样，在实乃梨拒绝自己之后，龙儿这才回归了理智，缓慢认识到自己陪伴良久的大河才真正让自己动心。但这个说法也有问题，因为龙儿本身就有主妇属性，长期照顾的女性可以是母亲，可以是女儿，并不一定是恋人。所以正因此，这部番也有不少人调侃龙虎之间更像是父女。\n但整体依然瑕不掩瑜，整部番很长，大河从开头的乖戾逐步变得善解人意和温柔，这样的成长和转变无疑让我钦佩作者对大河这个人物的刻画的深度，如此大的性格转变却不显得突兀。整部番的泪点很多，因为本身就设定在类似单亲家庭等并不健全的环境上，很容易凸显人物的伟大之处，无论是将龙儿抚养成人的母亲，还是最终决定重返家庭的大河，这些人物的光芒就显得相当耀眼。\n整体上来看，我是真的觉得这部番和《中二病》可以并称我最喜欢的恋爱番，因为他们都不止是简单发糖，他们都让我看到了爱情对一个人的改变，让我看到了两个人互相支持应当是什么样的。虽然《龙与虎》对男女主之间的感情刻画并没有多少篇幅，但是这种从无感走到一起的长途跋涉却又是另外一番有趣。\n总之，很好的一部番，很真实很有共鸣的一部番，让我能够一时脱离当下充斥的快节奏工业糖精恋爱番，重新想一想两个人应当如何建构感情，两个人应当如何面对各种现实问题，无论是家庭还是未来。\n","categories":["【杂谈】游戏 & 番剧"]},{"title":"第七回 V+Next 曲推《旅》小作文","url":"/2022/11/11/vnext-7/","content":"整整 24 篇小作文呢！\n\nBasic Info\n投 4 稿的群友：\n\n蒼\n\n投 3 稿的群友：\n\nChake\n\n投 2 稿的群友：\n\n珍猪奶茶、rako、Ashitemaru、电球\n\n投 1 稿的群友：\n\nNe.、星体、Aeterrno\nAmora、寄る寄る、nagi、Akechi、20、月檬、SauceCode\n\nPost 1 始発とカフカ\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nn-buna\n初音ミク\nChake\n\n\n\n我们乘上并非我们选择的列车，踏上并非我们选择的旅途。轻快的曲调背后是淡淡的哀伤，好似成为了不自觉的卑微存在，被命运一步步推向了终点与消亡。初听曲子只是感受到欢快，但是当深入了解之后，感觉每一句的唱腔都染上了悲哀的气息，这样的曲子总是那么吸引人呢。\nPost 2 山遥路远\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nChiliChill\n乐正绫\n蒼\n\n\n\n听闻这首歌使用了非常小众的北欧乐器，古典吉他的音色像温柔的月光虚虚地笼在皑皑的雪山上。\n我非常喜欢这首歌的歌词，充满了不舍和祝福的道别。像是追随着对方的身影，直到其被山吞没的目光。\n这是一首送挚爱的对方踏上旅程的歌，怕自己反悔不断催促着他的离去。\n以及 V5 绫的歌声也很棒，很喜欢动点调的有张力的高音。\n最后关注 chilichill 喵，谢谢喵。\nPost 3 Bon Voyage!!\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nKevinz\n洛天依 &amp; 星尘 &amp; 乐正绫\nNe.\n\n\n\n\n而我驰骋山川仍愿与你同享\n行至银河深处 点亮每束林海和潮浪\n生命颠扑流淌 而我们于浪潮中央\n揽遍这世界盛况 笑谈一路风光\n\n\nkrz 是一款我的中 V xp。\n《Himawari》中的邂逅，《七月二十七号夏日记事》里的慵懒暑假出游，《Say\na Good\nBye》更为正对题目，可爱少女的一场异国旅行，上一期也很想推与题目最接近的《β 受体阻滞剂与星辰》（《To the\nmoon》的同人曲）。\n《Say a Good Bye》大概是早期作品（词作于\n2016），太甜啦，然而一看《Bon\nVoyage!!》的词作不免也同样是生气勃勃与年少气盛的意境（2017），我听来像是一觉起来，异常难得地觉得自己真的醒了。看\nkrz\n的作品从学生时代到社畜时期，虽在我的阅历之外，多少还是唏嘘。没有什么不是时间的函数吧，在上演的别离与欢聚之中，听听歌好啦。\nPost 4 Last Journey\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nいよわ\n初音ミク &amp; V Flower\nnagi\n\n\n\n胃弱早期作品中极具个性，散发着荒诞而又诡魅的美感的一作。\n变成尸体后的最终旅程，将时钟反拨，哪怕爱情已经变为了灰烬，但是拖着僵直且腐坏的躯体，沿着昏暗的小路，在锈色的世界中，等待着破晓天明，希望能够再见爱过的你。\n全曲使用了大量象征着颠倒的元素，采样逆再生、旋律倒放、画面反转、动画倒放，甚至歌词本身都是完全颠倒的，给音乐本身增添了神秘氛围和扭曲感的同时，也和时间逆行的死后旅程的世界观相照应。扭曲的文字、骇人的泪水、不安定的旋律和鼓点、行将支离破碎的和声、胃弱经典叮当效果音，勾勒出临终之际的幻梦与回光返照时的心景。\n如果说最近的胃弱风格更加柔和和偏向流行了的话，那么这首曲子可以说是早期胃弱原初风格的最好代表之一，是只有胃弱才能做出来的东西，适合任何想要了解胃弱或尝试\nVocaloid 另类表现乐曲的人收听！（场外信息：这还是葱花曲！）\nPost 5 Alice\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n古川本舗\n初音ミク\n蒼\n\n\n\n老曲回顾环节——！\n一首曾经的爱曲。老实说刚开始看到这个题目的时候脑内并没有浮现出什么契合的曲子。契机是看到米白毕业的时候主页刚好给我推了\nAlice，没由来地觉得非常合适。\n古川说这首写的是单恋的故事，“我”与“你”在幽深的森林中不断地走着，互相交织，后来再分离，最后一个人踽踽独行。生命的旅程中总会有人到来过，走过。\n这首歌确实也承载了很多回忆和旅程，无论是 12\n年重填词创作了《至此，我不再独自前行》的 B 站，还是古川 P\n本人的经历，亦或者是我自己都在旅程中经历着塑造与变化。\n在长长的旅程中回望起点总有一种物是人非的感觉，但这样也显得它们弥足珍贵。依旧感谢相遇。\nPost 6\nサンセットバスストップ (Sunset Bus Stop)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nトーマ\nGUMI\nSauceCode\n\n\n\n黄昏，一个人的旅途，却又不知道终点。些许忧伤的曲调，配上 GUMI\n略带沙哑的声音，诉说着一个迷茫的故事。反复的铺垫，终于得以将饱含情绪的副歌引出：黄昏巴士会开向哪儿，又会在哪儿停下呢？谁能知道呢……\nPost 7 タイムマシン (Time\nMachine)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n1640mP\n初音ミク\nrako\n\n\n\n旅途的意象总是带有一些孤寂的气息。告别，相遇，人生在一段段的旅途中前进。\n「生活就像海洋，只有意志坚强的人才能到达彼岸。」我大概是不够坚强的，轻微的扰动也足以让我失去脆弱的平衡。我不喜欢沉浸在感伤中的自己，但又享受着与世隔绝的孤独感。戴上耳机，世界仿佛离我而去，我蜷缩在自己的空间之中，「悲しくなんかないさと、イヤホンで閉じ込めたよ」。清脆的钢琴声静静地流过心头；这一刻，我是属于自己的罢。\nPost 8 DAYBREAK FRONTLINE\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nOrangestar\nIA\nAkechi\n\n\n\n听着这首歌的时候总是会想起以前看过的一些公路片或某些“圣地巡礼”的图文记录。\n一个旅行者，一辆车，在几乎是空空荡荡的公路上飞驰着，正在赶赴某一个早早就被写入行程表中的目的地。\n黎明前夕的风从车窗里涌入，吹向了旅行者，但无法吹散那个人心中的兴奋和略微的不安——因为这是一场期待了太久的旅程，因为那里是曾经认为遥不可及的梦想之地。\n想要奔向远方。\n想要“看到同样的风景”。\n想要站在那样的目的地。\n想要跨越夜与昼的界线，跨越现实与梦境的边缘。\n车轮继续向前，向着日出的方向奔赴而去。\nPost 9\n天穹のアクアリウム (Stargazer in Aquarium)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nFty\nすずきつづみ\nrako\n\n\n\nすずきつづみ的声音像大海一样清澈，听着感觉就可以给人带来活力。清爽的曲风搭配明快的PV，在略微悲伤的氛围中流露出一丝期冀，引领着视听者探寻「蒼く光る遥かな航路」。\nPost 10 兔子先生\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n小桦\n洛天依\nAeterrno Amora\n\n\n\n摘自评论区：\n\n但渺小的我，流浪的步伐，还没法停下。\n\n\n为了寻求梦想和独立，我们不得不离开家，就像雏鹰会离开，幼狮会远去，兔子会流浪，父母会老去。\nPost 11 Starry Starry\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nFUZI &amp; 一二三\n音街ウナ\n珍猪奶茶\n\n\n\n有时候会有一种冲动，想开一辆随处可见的车，在一个无关紧要的夜晚，离开这个看不见什么星星的城市，往星光最明亮的方向前进，然后把天上的星星一颗一颗数清楚。不需要带上什么行李，走到哪就算哪吧，也许会抵达一个星星多到数不清楚的地方，那时候就停下来。夏天可以找找夏日大三角，冬天可以看看猎户座星云。为什么这几颗星星像一个猎户呢？如果它们可以是拿着弓的猎人的话，又为什么不可以是拿着葱的初音未来呢？想把多余的感情全都向着这片星空发射出去，它们又会化作怎样的星星呢？抛下这些思绪，然后继续前进吧。夜还很长，星星还有很多。\n题外话，这个 una 居然一点也不吵。\nPost 12 종착역（终点站）\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n상록수（常青树）\nUNI\nChake\n\n\n\n希望大家能听到最后，感受那燃烧生命一般的歌声。\n另：UNI 的歌声也是有独特魅力的呢。\nPost 13 まほろば少年譚\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nユリイ・カノン\n初音ミク &amp; GUMI\nChake\n\n\n\n初为笼中之鸟，后欲高飞翅振。迷途黑夜黯淡里，手中明灯尚存。生命不过一瞬，歌声却留永恒。人生恰似逆旅，我亦匆匆行人。\nPost 14\nチャンバラジョニー (Chambara Johnny)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nDECO*27\n初音ミク\n20\n\n\n\n虽然歌词和主题没什么关系，不过像素风的 RPG\n还是会给人一种旅途的感觉。\n歌很可爱，PV 很好听。\n顺便打听一下 Holder 什么时候能请来 DECO（Holder\n注：今年看起来是没啥希望了）。\nPost 15 だんだん早くなる\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n40mP\n初音ミク\n月檬\n\n\n\n（推首儿歌，希望不会被打）\n令人感到轻松的歌曲。\n如果用一个词来形容的话，我会选择“可愛い”。虽然不是我最喜欢的类型，但是应该没人拒绝可爱吧～\n也许旅途就像这首歌一样，时而加快，时而放缓；时而高兴，时而沮丧。但不管怎么说，这一路已经走过来了，所以保持自己的步伐，继续前进吧。\n＼(ˆ▽ˆ)／\nPost 16\nエイムレスウォーカー (Aimless Walker)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n*Luna\nRana\n珍猪奶茶\n\n\n\n很喜欢行走的感觉。双脚踩在坚实的大地上，一步一步的向前迈进，从脚底传来的地面的触感，让我不至于在这个飞速运转的世界中把自己弄丢。在喜欢的地方漫无目的的行走，对我来说大概是最完美的一种旅行方式。感谢重力，让我可以感受到大地。感谢我基本健全的腿脚，让我可以自由地在天地之间穿梭。和我行走的速度比起来，世界还是太广阔了，所以在我的躯壳灰飞烟灭之前，还有很多事情可以做，也有很多地方可以去，那么就以\n5 km/h 的速度向远方开进吧，最好放点 *Luna 的 Progressive House 当\nBGM。\nPost 17 砂之惑星\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nハチ\n初音ミク\n蒼\n\n\n\n一首记录旅程的曲子。\n一些人离开了我们，但是旅程还在继续。\nPost 18 ネイロクラフト\n(Neiro Craft)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nポリスピカデリー\n初音ミク\n星体\n\n\n\n总之就是非常真实。\nPost 19 夢地図\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n40mP\nGUMI\n寄る寄る\n\n\n\n\n今僕が作り上げるもの全て\n無に還っても\n\n\n这些年来，自己究竟做到了什么。我越思考，就越觉得迷茫。\n走到现在，无论中学还是大学，最好的朋友们似乎都越走越远。\n同时，也没能给家里带来什么变化，却只能为越来越少的时间而担忧。\n自己的努力，也就像歌词中说的一样，变成了虚无吧。\n这旅途的终点，恐怕不是我想要的。\n什么时候，才能真正地描绘出属于自己的梦地图呢？\nPost 20 上山岗\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nilem\n洛天依\n蒼\n\n\n\n大家好，其实我本来是想填《一人行者》的，但时过境迁，我觉得教主在 VC\n的旅程中有了新的感悟，还是决定投这首。\n这首歌最有意思的地方应该在于 PV，可以称其为旅途中的纪念照片吧！ilem\n被称为教主以来也不乏商业活动，也有过非议。但是他愿意记得这些事情也是这首歌打动我，让我感到柔软的地方。\n我们在路上记录着着我们看到的，把它们做成歌曲。请同我大声唱吧，“再次祝福你，朋友。”\nPost 21 シンセカイ案内所\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nDECO*27\n初音ミク\n电球\n\n\n\n新世界に出る旅。帰らなくてもいいですよね？（って、この曲、旅要素ある？）\n去新世界旅行，总不能一帆风顺呢。（话说，这个曲子和旅行有关系吗？）\nPost 22 蛍はいなかった\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nはるまきごはん\n初音ミク\nHolder\n\n\n\n先听《美影日记》给刀一轮之后再听这首缓一缓。\n女孩子们的暑期出游，野餐、合影、睡前娱乐、偷偷跑去看萤火虫，一切都是那么的美好。\n整个系列曲中，唯一色调是亮色的\nPV，也是唯一一首曲风是欢快的，也是唯一一首美影红着脸笑了的。\n虽然美好的夏季已经过去了，但是还是暂且想着下一个夏季，想着下一个夏天的每一个微热潮湿的夜晚，每一个美好的夏夜，应当如何度过吧。\nPost 23 Prologue\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\nひとしずくP×やま△\n鏡音リン\n电球\n\n\n\n第一次听的时候感觉……啊怎么说呢……好可爱啊……\n后来发现一滴妈妈她根本就是带铃去做噩梦吧……\n不准欺负镜音铃！连倒是无所谓（bushi）\n另外还有一首连的版本叫 Epilogue。\n附歌词：\n\n「Prologue」\n作曲・作詞：ひとしずくP×やま△\n唄：鏡音リン\n不思議な絵本のページをめくる（翻开奇妙的绘本）\nその先には　何が待ってるの（那之中有什么在等待着呢）\n素敵な王子様が現れて（帅气的王子出现）\n優しく手を引いてくれる（温柔地牵起我的手）\n流れるワルツに合わせて（随着华尔兹的节奏）\nくるり踊る（旋转跳跃）\n誰もが私に、夢中で憧れるの（在梦里谁都憧憬着我）\n気がつけば真夜中（回过神来已是深夜）\nみんな眠っている（大家都睡着了）\n幸せな私の夢の中で（沉睡在我的幸福的梦中）\n\n\n读起来突然觉得有点恐怖呢。\nPost\n24 深海シティアンダーグラウンド (Deep Sea City Underground)\n\n\n\nP 主\n歌姬\n投稿者\n\n\n\n\n田中 B\n鏡音リン\nHolder\n\n\n\n认识这首歌还是通过\nmaimai，某位群友给我开了这首歌，第一次，完全不会打，但是发现这歌真好听。\n据说是这位 P 主唯一一首出名曲，这一点莫名显得有些凄凉。\n歌词里面杂乱无章的意象，似乎描绘了沉在海底的荒诞世界。\n似乎并不想去那里旅行呢（笑）。\n","categories":["【杂谈】碎碎念"]},{"title":"Holder 与 Vocaloid","url":"/2022/10/02/vocaloid-and-me/","content":"和 V+ 群群友度过了一天快乐的国庆假期，这次的 V+ Next\n推曲活动中，又一次提及了我的“自传”——即我和 Vocaloid 的一些故事。\n先前已经和 nagi\n以及莎布老师谈过一些，也在推曲小作文里面写过不少小故事。但回想起来我好像自己也没有系统总结过这些有趣的经历，明明是挺有意思的一段旅程，所以干脆晚上花点时间写写。\n大约是一些按照年份编写的流水账和回忆录，随便看看就好。\n\n小学高年级（2010 - 2013）\n大约这是一切的开端了。小学的时候 Holder\n可能并没有什么爱好或者说口味，同学们在玩什么游戏我就玩什么游戏，似乎并没有什么主见。但是有几件事情倒是记忆挺深刻。\n首先是《甩葱歌》的莫名走红。Holder\n家所在的街区是县城中心的一个破旧商店街，当时的所有店铺，从手机店、音乐店，甚至是鞋店、服装店，都在大音量播放这首歌，每天上下学的时候多多少少都是一直听着这首歌的。继此之后的，是\n2011 年突然爆火的《甩饼歌》。这首歌有了歌词，讲述的是 2011\n年利比亚空袭、物价飞升之类的大事件。本来自己就已经对《甩葱歌》旋律很熟悉，有了能唱的歌词，自然是很快就上手了这首改编歌，和小学同学时不时还一起唱着玩。\n其次是有一次我父亲问到我有没有喜欢的歌手，因为当时他一直在家里放歌自己听。但我当时说实话，真的不知道什么歌曲，而当时我的玩伴正沉迷汪峰，所以我就随口回答汪峰。结果我父亲大概是一下子就知道了我只是糊弄过去，于是无心地扔了一句“要找找自己喜欢的东西而不是随波逐流”。\n这句话随后就应验了。2012\n年前后，我进入了元素收藏这个小众坑，这个坑大约就是收集各种元素的单质。在当年这还是一项很难的事情，因为稀土很难有货源，类似\nRb、Cs\n之类的碱金属还只能从国外进口，一克近一千，这对小学生来说已经是天价（题外话，现在国内自制\nRb、Cs\n已经不稀奇，克价已经跌下两百，正所谓中国人擅长把东西搞成白菜价。此外，现在元素收藏坑也近乎是进坑投资几千左右就已经能买到全套单质了）。也正是因此，当时我对贴吧里面那些拥有类似\nRb、Cs、Tl、Sc\n等这些元素的聚聚们可谓是十分敬仰，其中就包括一位元老——真·凤舞九天。\n这位元老有一天晚上，在贴吧转载了一个视频，说自己今天单曲循环了一晚上。我点进去一看，是《世末舞厅》的一个自制\nPV。当然，当时我是不知道这是什么的，但我能明白的是，这是一首日文歌，而且不同于小学音乐课上那些民歌、红歌、教学歌曲，不同于汪峰那种伤感，而是一种完全不能理解的，全新的歌曲艺术形式。\n小学的我第一次看到类似心脏、死亡、骷髅、终结这些意象，而即使我一点点都看不懂英文和日文，歌词一句话都看不懂，但是图像和声音却将世界终结前的疯狂传达了出来。\n这显然是震撼的，所以即使当时 Holder\n只有一个充话费送的小手机，但我依然拿出了零花钱到同学家的手机店买下了一张\nSD\n卡，从家里人工作的地方偷偷拿了一个读卡器，自己在周末摸索着如何下载视频。这样忙活了一段时间后，我便能够随时听《世末舞厅》了。\n然而，还是那句话，由于完全看不懂英文和日文，我没能借此机会认识\nwowaka，也没能认识巡音，更没能借此机会打开术力口的大门，虽然我隐隐约约感觉到了这机械的电子音背后，似乎和《甩葱歌》有着千丝万缕的联系。\n初中（2013 - 2016）\n这一段时间似乎和术力口就没有什么关系了。\n因为家人工作的原因，我离开了原先的住处，去往另外一个地方上初中，于是也就脱离了我小学的所有同学。在完全陌生的环境下，Holder\n度过了一个并不美妙的初一。转机出现在初二，父亲的一位朋友送给我了一台\niPad。我的父母算是十分开明，决定将这个 iPad\n交给我全权处置，并不打算限制我的使用时间之类。\n那段时间，我注意到周围同学都在听歌，虽然我不知道他们在听什么，但是就是莫名其妙觉的一个人听歌似乎是一件很酷的事情。这样想着，Holder\n在 iPad 上下载了音乐软件，添加了几首类似《江南\nStyle》之类的大众歌曲。\n你可能会问，《世末舞厅》呢？然而这就很不好说了，我记忆中我似乎并没有将它加入到歌单里面，因为我不会打日文。当时我要是想听这首歌，我只能去贴吧翻找之前那位元老的贴子，或者拿\nU 盘在电脑上听（SD 卡应该在搬家时遗失了，但是之后我有了一个 U 盘）。\n《江南\nStyle》可能是一个并不好的种子，因为我为了扩充歌单，只能每天看看音乐软件的推荐。然而因为这个种子，加上当时\nEXO 和 TFBoys 在网络上的对立导致两方热度都居高不下，我的歌单迅速充满了\nEXO。EXO 的曲风大多是炫酷的类型，这也塑造了我后续的听歌风格。\n然而，我并没有在 K-pop\n的路上走得很深，因为我初中有一位朋友，很喜欢看番。当时我和他在一起玩的时候，常常是白天出门，晚上窝在某人家里看番，也就是那个时候我认识了《刀剑神域》和一些其他的番，也收获了第一个严格意义上加入歌单的日语歌——TV\n动画《空战魔导士候补生的教官》OP《D.O.B.》，因为这首歌很炫酷，节奏有力量。\n也是在他的带领之下，大约是 2014 年，我入了 B\n站，但我当时几乎只会看鬼畜区。\n虽然如此，我当时的歌单的主流依然是 EXO\n和权志龙，最喜欢的可能依然是《Call me baby》或者《BANG BANG\nBANG》。而随后因为 K-pop 的外延了解到 Maroon 5、TheFatRat\n的一些歌和欧美音乐则完全是支线了。\n其实要说到为啥即使有这么一位看番的好朋友我还一直听韩流，倒也只能说是大环境所趋。当时我的初中班级，大部分同学更乐意听\nK-pop。那种带着一些痞气，或者说是不良、叛逆、特立独行风格的歌曲，在初中生中很有市场。\n不过也正是因此，我错过了阳炎 Project 的时代。\n高中一年级（2016 - 2017）\n中考考上了当地最好的中学，并且在入学分班考试里考上了年级第一，这完全是出乎所有人的意料的，包括我自己，因为没人相信从那种初中出来的毕业生能考上这个高中的第一。这是一个非常奇妙的开局，在单纯的高中生之中，这样的成就足以让你受到瞩目。所以\nHolder 的高一开局并不算很差，反倒是收获了一群朋友。\n先前提到过 2014 年我开始看 B 站，等到我 2016\n年高中入学的时候，我已经大体对鬼畜区了解了个遍，自然也就包括了音 MAD\n和人力\nVocaloid。在此期间，我接触到了我严格意义上第一个知道是术曲的术曲——《千本樱》（《世末舞厅》我最开始并不知道这是术曲，我甚至不知道这首歌和初音未来有关）。\n然而，2016 年的 B\n站大事是和术无关的，而是《极乐净土》的爆火。这首歌的爆火让我经常逛的鬼畜区充满了这首歌的相关创作，自然而然地，这首歌也进入了我的歌单。\n有一件黑历史和这首歌有着很大的关联。当时我不会日语，想唱《极乐净土》自然是唱不出来，只能哼调。然而当时哲♂学里的\nFA 乐器又在鬼畜中广泛运用。于是有一次我在班上用 FA\n乐器唱了一小段《极乐净土》。现在想起来的话，可以说是万分羞耻。\n一切都是有开端的，自从《极乐净土》和《千本樱》进入歌单，随之而来的就是各种日语歌。但其实这个时候，我依然只是知道初音未来的名号，还不认识双子、IA\n等其他歌姬。另外，这个时候，我还不知道什么是歌姬什么是 P 主，当时的\nHolder\n认为初音未来的所有作品都由一个运营方创作，甚至还因此惊讶于为何这个运营方作出的曲子曲风如此多变。\n但也就是这个时候，我入了 LL\n坑，听了不少缪斯的歌。不过即使如此，此时我的歌单依然是 K-pop\n和欧美音乐占主流，日语歌有但不多，术也不过几首。\n当然，要是说几件小事的话还是有的。\n首先是高一的寒假，学校组织了去苏州的数学竞赛集训，那段时间比较休闲，我便无聊的时候去整理歌单，删掉了不少\nK-pop 歌。这个行为的原因其实挺怪的，因为大约在 2016 年年底或者说 2017\n年年初，我经历了第一次所谓的“被分手”。而为了将初中这些破事的记忆删除，我不仅删掉了她所有的照片（当然后面我居然在\niCloud\n的自动备份里面翻出来了），删掉了聊天记录和所有联系方式。而寒假在苏州的时候，我翻了翻歌单，发现听歌的时候依然能回想起初中当时的一些奇怪经历，尤其是《Call\nme baby》，这首歌是我和她都喜欢的。于是，我删掉了大多的 K-pop\n歌，只留下了几首自己特别喜欢的，比如《MAMA》和《Lightsaber》。\n之后是 2016\n年年底《你的名字》上映，而这让我的歌单中又多出了若干的日语歌，包括《前前前世》《火花》《没什么大不了》《黄昏之时》《梦灯笼》。其中最可说的就是《梦灯笼》，当时我沉迷这首歌到，即使我不会日语，不会写五十音，我也会拿并不富裕的晚饭休息时间跑回家打开电脑抄歌词和罗马音，尝试着学唱。\n2017\n年的暑假并没有多少可以称道的事情，虽然当时是第一年接触学科竞赛，辗转扬州、南京等地，但是就听歌而言，并没有什么可说的。硬要说的话，就是看了《未闻花名》，然后沉迷于《Secret\nbase》这首歌。术曲方面，则是零零散散加了《深海少女》《天之弱》《反语》《脑浆炸裂女孩》一共四首。\n高中二年级（2017 - 2018）\n熟悉 Holder 的人都知道，这是一切的转折点。\n2017 年进入高二之后，发生了几件事情。\n首先是 9\n月份《病名为爱》投稿，这首歌莫名其妙地在国内收获了极高的热度。而在这段时间，我们高中为我们争取到了去南京旁听数学竞赛省队培训的机会，我又可以公款旅游了。于是我在南京和我同学两个人，反复听这首歌。这里比较好玩的是，我先听到的是\nNeru\n的术版，而非不少人先听到的翻唱版。就我记忆而言，这应该是我听到的第一首双子曲。\n之后是 12\n月份《打上花火》在国内上映，我和同学翘课去看了。当时通行的一位同学稍微对八爷有一点了解，晚上在\nKFC 吃饭的时候，讲了不少八爷相关的小知识之类的，包括他前期作为 P\n主投稿的一些曲子。\n经过这一个学期，Holder\n的歌单大致变成了术曲占一半，其他歌曲混混乱乱杂在里面的一种状态，但\nHolder 此时依然没有主动去挖术曲或者去了解\nVocaloid，依然是听到好听的就放歌单。然而这个时候，大数据已经开始给我不断推术相关的东西，很少再有韩流或者欧美了。\n高二寒假备战小高考，没有什么可以说的事情，除了通过一个人力 Vocaloid\n认识了《太阳系 DISCO》。\n而高二的春季学期，我遇到了两首歌，分别是《神佛》和《被生命所厌恶》，但是是\nmafumafu 版本。mafumafu\n这个名号的出现，让我本就不清楚的概念更加混乱，什么是歌姬，什么是 P\n主，什么是唱见，这些我当时可以说万分混乱。然而也正是这两首歌，打开了一道通过\nmafumafu 获取新术曲的大门。\n3 月的时候，我在听《病名为爱》的时候，注意到评论里面有一句说 Neru 来\nB 站了。我记得当时我并不是很清楚 Neru\n到底是谁，但总之我给他点了关注，所以说 Neru 是我第一个关注的 P\n主。在此之后，我也将 Neru 的《SNOBBISM》和《随便随便》加入了歌单。\n也就是这段时间，我开始学习日语。\n时间就这样到了传奇的 2018 年暑假。\n这个暑假我为了争取清华的各种政策，首先是各个学科竞赛，数学要在扬州集训然后考试，化学要在南京集训然后考试，物理也是在南京，期间还需要参加清华的暑期学校，要去杭州参加一个训练。所以从\n6 月份一直到 9\n月份这近三个月的时间，我几乎一直在外，而且几乎孤身一人，因为我高中有资格参与化学国初的不过两人，能参与物理复赛的也寥寥无几。\n这是我第一次远离熟悉的家乡如此长的时间，而且我父母也说为了锻炼我的独立能力，并不打算跟在后面，只是说了一句，有什么要紧的情况或者缺钱了就给家里打电话。显然，为了填补课余时间，除了刷题看书，似乎也只剩下听歌了，因为我几乎不玩游戏，除了当时短暂玩过的《炉石传说》。\n这段时间给了我扩充歌单绝佳的机会，我开始第一次下意识地在搜索框中输入初音未来，我开始有意识地找各种番去看，去听它的\nOP 和 ED。那段时间，类似 MARETU、れるりり、Neru\n等这些名字开始慢慢变得熟悉，镜音双子、巡音也开始进入我的视野，虽然我还是区分不开\nP 主和歌姬。\n此时我收集到的术曲已经开始出现两极分化的特征，一类是吵闹的、喧嚣的、意味不明的，这些歌单纯提供一种精神上的刺激，似乎也和当时我沉迷\nK-pop\n有着相同的根源。而另外一类，则是舒缓的、抒情的、温柔的，这些歌，大约才真正是我当时能共鸣的。\n这其中最为特殊的自然是《胧月》。第一次听到这首歌，我并没有觉得多么特殊，甚至因为它并不突出的调教觉得十分粗糙。然而，正所谓音乐并不仅仅是一段声音，是要和个人境遇相结合的。在那个晚上，我刚刚做完一套题，起身去阳台休息。凌晨两点的南大早已休眠，但是远处登山道的路灯依然闪烁，就在那一阵风之中，歌单循环到了《胧月》。\n那应该是第一次我感受到了所谓的情景结合。因为匆匆学过一点日语，也看过歌词翻译，所以当「逃れる術を探すばかりの孤独な星」这一句响起的时候，那种孤身一人求学的寂寞，疲惫后的困倦一瞬间全部返了上来，而阳台上是依然燥热的夏夜晚风。\n而这一幕大约也是我高中那么多回忆中最为深刻的几个之一，也就是这个契机，我第一次感受到了术曲机械音中的那一种，真人并不能表达出来的沙哑感。现在我依然觉得，《胧月》再如何使用真人翻唱，也难以表达出其中蕴含的孤寂感。人本身是社会性的，再如何表达孤独，也不过是先建立起和别人的连接再失去，比如那些表达孤独寂寞的失恋曲。然而机械音中表达出的那种，自己身为人造物或者非人，生来即无法和人们平等的孤寂感，或许才是深层的。这也是我在之后沉迷于《心》这首歌的原因。\n在此之后，术曲便不断进入歌单，而自己听术曲的风格也渐渐明晰。\n当然，Holder 这个时候还是分不清歌姬和 P 主。\n高中三年级（2018 - 2019）\n备战高考的一年，并无什么可讲的。这段时间除去学习，几乎也没有其他事情可做。\n然而这个时候我遇到了《月光润色女孩》。这首歌是网易云推荐给我的，第一次听也是一点感觉都没有，没有什么特别之处。然而就是这样听着听着，就沉迷了。\n这段时间，为了学习日语，我买了标日，但是上面的课文实在是无聊乏味。这个时候我注意到，自己的歌单已经几乎全是日语了，为什么不去打印歌词来学呢。于是我打印了几首歌的歌词，一首一首学，这里面包括《Secret\nbase》《鸟之诗》《心做》以及不用想就知道的《月光润色女孩》。\n于是我早读课就不读语文或者英语了，而是把歌词偷偷藏在书下面，一个假名一个假名认，不会的语法就圈出来下课查标日。就这样，这几首歌也成为了我最先会的几首歌。不过，要是你问为啥我这么喜欢《胧月》却不打这首歌的歌词，我只能说，这首歌歌词太难了，生词太多，看不下去。\n要问我多喜欢《月光润色女孩》，我只能引用我前桌在高考后和我说的那句话，“你早读课天天唱，唱得我都会唱了”。\n高考后暑假 &amp; 大一（2019 -\n2020）\n高考后的暑假，我依然不能说我是术术人，虽然听不少术，但还是没主动找过多少。当时我喜欢的一首歌是《Narrative》，一个电影的\nED。\n这个暑假事实上记忆最深刻的术曲是《朗朗晴天》，是一位高中的好友推荐给我的。高考出分后，因为填报志愿的事情，我、我父母、我的高中和清北招生组之间产生了一些奇怪的摩擦，而这也让我产生了无法把握自身命运的一种无力感，也就在那个时候，我和高中好友交谈的时候她把这首曲子推荐给了我。\n\n进了大学之后，事情发生了一点转变。我开始接触 gyari 的 Voiceroid\n小剧场，认识了缘兔、akari、琴叶姐妹这些歌姬，也就是这个时候，我才真正知道什么是\nP 主，什么是歌姬。\n如果要说大一上学期印象最为深刻的歌曲，就是《蜘蛛丝\nMonopoly》、《妄想感伤代偿联盟》和《几望之月》。\n然而大一的下学期，因为疫情一整个学期都只能在家。然而也正是这段时间，由于我已经开始主动认识术曲，从而也是我术曲底子正式构成的开端。这段时间，我听到了《霞む夏の灯》《Unknown\nmother goose》，和几乎是我听术曲里程碑一般的《无梦之梦》。\n事实上，大一下学期在家的这一段时间，即使我依然在听动漫歌曲或者\nJ-pop，比如 Reol\n之类，但实际上我开始明显地倾向于术曲。术曲具有一种奇妙的创作自由感，相比于动漫歌曲需要考虑类似表达主旨等约束，术曲更像是自由地让歌姬传达创作者的感情，无须特别关注所谓创作要求或者一些限制自由表达的限制。\n在那段时间内，wowaka、怪力熊、MARETU、春卷饭、DECO\n构成了我最初的底子。当然，还有类似《萤火虫》《ROKI》之类的单曲。\n在这之后（2020 - ）\n在这之后就并没有太多值得讲述的了，已经入了门的术术人自然是会自己去翻找自己所喜欢的曲子的。\n不过也就是在这之后，我明显感觉到了听歌风格和个人境遇的关系。在大一的下学期，我就已经听过了《劣等上等》，而在那个时候，我觉得这首歌过分吵闹，毫无节奏可言，遂跳过。然而在我大二上学期再次听到的时候，我却觉得万分戳心。现在回想，大概是大一下学期还在为学业挣扎，社工上也因为团支书不作为而寸步难行。相比之下，大二已经适应了大学节奏并且取得一些成就，这首歌似乎也就不是那么刺耳了。\n还可以作为例子的就是 2021 年的 5\n月感情受挫的时候，在这事之前和在这事之后听春卷饭，完全是两个感觉。在这之前，我只能感受到单纯的震撼，而似乎并没有那么多的共鸣。然而在这之后，尤其是听《第三心脏》的时候，我甚至感觉这首歌就是为我而作。\n说到《第三心脏》，春卷饭的幻影系列曲，从 2021\n年更新到现在，似乎就和我奇妙地贴合了一般。在我低沉的时候，听到了《第三心脏》，在我逐步挣脱的时候，听到了《萤火虫未曾来过》，听《美影日记》的时候则又让我回到了一年前的一些混乱之中。\n当然还有一些插曲，就是入了音游坑，通过 osu 和 PJSK 认识了不少新 P\n主和术曲。还有就是认识了术群的各位，见识到了很多新的术曲口味，听到了很多新歌。\n所以呢\nHolder\n真正听术曲的时间并不长，或许只能说大一下学期之后才开始有意识听。然而实际上，Holder\n小学就听过术曲了，虽然毫不自知。\nHolder\n正如自己所描述的那样，并不想把歌曲独立于个人的境遇去解释。就像《劣等上等》，不同的境遇下就是不同的体验。我依然习惯将歌曲、文字等这些艺术和具体的、切身体会的场景联系起来。\n仔细回忆一下，Holder\n喜欢夏天的晚上并不是没有原因，因为每一年的夏天都承载了太多太多的深刻回忆。18\n年和 Sakana 的相遇以及独自求学终有回报，19 年为三年高中完美谢幕，20\n年的一人旅行，21 年和 Sakana 最激烈的矛盾到最后的和解，22\n年被导师拒绝和最后的平安上岸。而这些夏夜，都有一些曲子作伴，18\n年的《胧月》、19 年的《朗朗晴天》、20 年的《无梦之梦》、21\n年的《第三心脏》《某一家的茶会》、22 年的《坠入地狱》。\n大约歌曲就像回忆的书签一般，听到这个旋律，就仿佛回到了当时那段时光。\nHolder 和 Vocaloid 的故事，不如说就是 Holder\n自己的故事，然而这个故事还很长很长。\n","categories":["【杂谈】碎碎念"]}]