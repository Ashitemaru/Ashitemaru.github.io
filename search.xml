<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 暑假生活记录</title>
    <url>/2021/06/29/2021-summer-record/</url>
    <content><![CDATA[<p>经过 6 月 22 日到 28 日这几天的折腾，大概和高中的老师、驾校教练等人商量了一些后续的安排。现在终于可以安定下来，准备做一些学习、开发、摸鱼的事情了。</p>
<span id="more"></span>
<p>总体而言，这个暑假想要做的事情其实还是很多的。</p>
<ul>
<li><p>学习一些新东西</p>
<ul>
<li><p>Java / Android 开发相关（或许最终的结果是随便看了看 Java 的语法，装好 IDE 就不做事了）</p></li>
<li><p>汇编语言和量子计算（这属于完全不知道干啥，写在这里是因为小学期）</p></li>
<li><p>Verilog 相关（但是这个属于想想而已，因为对这东西没有兴趣，下学期 xge 带我就好）</p></li>
<li><p>编译原理相关（这个也属于想想而已，写这个是因为自动机学得惨不忍睹，要补一点）</p></li>
<li><p>图形学相关（纯纯因为安主席的安利）</p></li>
</ul></li>
<li><p>跟进一些东西</p>
<ul>
<li><p>实验室项目（主要是最近划了，要跟上）</p></li>
<li><p>THUInfo 的 UI 翻新以及培养计划 / 课程表功能翻新</p></li>
<li><p>科协技能引导文档的结构初始化</p></li>
</ul></li>
<li><p>考试相关</p>
<ul>
<li><p>科目二（再不考是来不及了，大三不计划回家）</p></li>
<li><p>GRE（属于想考一下试一下）</p></li>
</ul></li>
</ul>
<p>此外还有一些杂事，包括买一个新电脑、预定 GRE 考试、选大三的课、重办身份证、回高中讲竞赛、和高中东方同好会线下聚会、陪 Sakana 玩等各种。</p>
<p>因为想做的事情很多，所以想着不如就在这里开一个日记贴，就每天写一下想干什么，最后干了什么之类的。没啥价值，目标就是让自己做点事情，别划水了。</p>
<h2 id="section">2021.06.29</h2>
<p><strong>今天想要做的事情：</strong></p>
<ul>
<li><p>去驾校办理科目二入学手续</p></li>
<li><p>公布科协网络部招新结果，准备一下文档初始化</p></li>
<li><p>CRACKER 一日游，就到处看看有什么资料</p></li>
<li><p>准备 THUInfo 主页 UI 翻新</p></li>
<li><p>问一下韩旭下一步可以做什么</p></li>
</ul>
<p>其实想做的多，最后能做完的，凭运气吧。睡大觉去了，祝自己好梦，祝自己暑假顺利。也祝 Sakana 军训平稳度过。</p>
<p><strong>今天汇报：</strong></p>
<p>基本上弄完了网络部招新的通知工作，飞书还没有完全摸完，这个晚上慢慢来。后面应该要去问一下技术顾问团他们的情况，好准备做点事情。不过考虑到零字班的新生估计还要等他们军训完了才能安排工作，所以初始化应该暂且由老人完成。</p>
<p>给韩旭发了微信消息，等他安排吧。</p>
<p>目前下学期应该是四大原理 + 人机交互 + 计算机网络安全 + 台球 / 网球，所以也可以开始做点准备了。</p>
<p>之后就是逛 CRACKER。目前的一个打算是汇编和计组应该就通过 CSAPP 先摸一下。计组可能还需要一些 Verilog 什么的东西，这个以后等买了 Windows 电脑再来搞一搞，造 CPU 的那本书也已经拿到手了，也可以拿 PPT 做一些补充。Java 相关是不打算弄多少，总之和 xge 他们组队搬砖，所以就打算把一些算法代码改成 Java 的，熟悉一下语法算了。</p>
<p>编原那就是纯纯的逆天，因为我自动机学不明白，所以编译原理需要先看一些讲义和 Compiler 那本书。</p>
<p>信号据说是数学课，所以找个课本随便学应该也就应付过去了。网原看起来属于巨大背诵的一门课，找了个《计算机网络：自顶而下》，然后要到了所有的课件，就打算看着玩玩算了。</p>
<p>至于那些限选课，网络安全技术看起来和网原巨大相关，懒得搞。然后就是人机交互没啥经验，就算了。</p>
<p>最后是打算学习图形学，问安主席要到了整本书的电子版，然后找到了网课链接，总之打算干活。</p>
<h2 id="section-1">2021.06.30</h2>
<p><strong>今天想要做的事情：</strong></p>
<ul>
<li><p>去驾校办理科目二入学手续，开始练车</p></li>
<li><p>还有一位网络部新人没有联系上，需要补联系，并且需要搞一下飞书</p></li>
<li><p>推一点点 CSAPP、图形学什么的</p></li>
<li><p>准备 THUInfo 主页 UI 翻新</p></li>
</ul>
<p>其实也没什么好说的，就是学点新知识之后做一点之前就有的锅。明天要早起所以赶快睡大觉吧。</p>
<p><strong>今天汇报：</strong></p>
<p>以为去报名的，结果刚进去就被拉上车开始练了，估计以后就是早上八点下午两点，一整个白天都要在驾校了，所以推活、上课这些事情都得是晚上来做了。</p>
<p>那个还没联系上的新人联系上了，所以招新基本上就结束了，可以开始具体规划下面一步要做的事情了。然后对下面的工作做了一点点的推进。</p>
<p>然后就是 THUInfo 还在消极怠工，不过最近会开工的，会开工的。</p>
<h2 id="section-2">2021.07.01</h2>
<p><strong>今天想要做的事情：</strong></p>
<ul>
<li><p>科目二学侧方停车、倒车入库、坡道起步</p></li>
<li><p>推一点点 CSAPP 之类的</p></li>
<li><p>准备 THUInfo 主页 UI 翻新</p></li>
</ul>
<p>主要是晚上和家里人聊了比较多，所以说实际上今天晚上也没有认真学一些东西。</p>
<p><strong>今天汇报：</strong></p>
<p>学车真的是比较无聊，就开车十分钟等待两小时，于是其实天气热什么的都不是最大的问题，无聊是最需要解决的。</p>
<p>然后，看了一点信号处理原理和编译原理，然后就发现自己的数学全忘完了，还是得回来再学一点点。</p>
<p>没什么好说的，以后估计就是这样的重复的生活了。</p>
<h2 id="section-3">2021.07.02</h2>
<p><strong>今天想要做的事情：</strong></p>
<ul>
<li><p>科目二继续练习，但是要问清楚考试时间这些东西</p></li>
<li><p>推一点点 CSAPP 之类的（这个真的要赶快了）</p></li>
<li><p>准备 THUInfo 主页 UI 翻新（栋栋跑起来 THUInfo 了，工期来了）</p></li>
<li><p>网络部工作规划再稍微写详细一点，准备主席团会议</p></li>
</ul>
<p>这两天除了科目二看起来什么都没有做呢，所以说下面还是要准备开工吧。之前似乎还说过要买新电脑的，似乎也给我搞忘了。</p>
<p>想到一年前的自己还宣称着一个人孤独地走下去反而好，现在却苦于这里找不到人一起做事，莫名有点可笑。</p>
<p>七月份，下半年的开始，要准备拾起自己了。</p>
<p><strong>今天汇报：</strong></p>
<p>很平凡地过了一天，晚上想回姜堰找人吃饭，结果因为下雨没去得了。学习也没学多少，看了一点点 CSAPP，但是也是很肤浅。</p>
<p>话说直到现在才猛然发现自己似乎没有什么兴趣爱好，这个时候又突然想到自己之前小学的时候填兴趣爱好，永远都是大众化的“读书”。思来想去，觉得自己可能不太喜欢一直呆着，自己还是比较喜欢在路上的感觉。于是就有了一个还在萌芽的想法，就是只用公交或者地铁，去很远的地方，比如说从家到北京、到广州。也正如我自己感觉的那样，我自己还算喜欢折磨自己。这个规划算是很远期很远期的了。然后问了一下 Sakana 有没有兴趣，但是她也没有给出明确答复。</p>
<p>学习？那是不可能学习的。在闷热的天气底下随时准备被教练喊去练车，这种情况下那是不可能学习的。于是我是真的把贴吧、知乎刷到推荐都开始循环，然后就开始戳 Sakana 等她回复，要么就是水群。但哪里有闲人像我这样一整天啥事没有呢，或多或少都要去做点什么事，打游戏也算。</p>
<p>自己还是很不擅长应对无聊这个问题啊。其实只要有一个聊得来的人在，但是我能聊得来的都有事情，这就尴尬了。</p>
<h2 id="section-4">2021.07.03</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>想做的事情和之前差不多，觉得也没有必要再写一遍了。</p>
<p>大概还有一些感慨吧，感慨自己怎么很容易变得惆怅起来，会有那种莫名其妙的伤感。</p>
<p><strong>今天汇报：</strong></p>
<p>今天下午和明天都不用去练车了，还算比较开心。但是相应的，我需要在这段时间内，把之前剩下来的事情处理好，包括之前自学内容要整理成文字，网络部的工作规划还是要继续细化一下，韩旭那边还要继续跟进。</p>
<p>下午先写一些工作规划，然后等韩旭那边的回复，然后就是写博客了。</p>
<p>然后目前实验室下一步要做的事情就是先调教好 T5 以保证能够做 prompt。具体的东西会在实验室周报上写，这里就不会写了，毕竟也不是什么太适合公开的东西。</p>
<h2 id="section-5">2021.07.04</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>从驾校休息了一天，计划就是什么事情不做，好好放松一下</p>
<p><strong>今天汇报：</strong></p>
<p>发现自己最大的问题实际上是，闲下来的时候很容易胡思乱想，进而就是情绪容易不稳定。最近身边也没什么了解情况的人可以好好聊聊，所以就比较尴尬了。</p>
<p>今晚似乎喝得有点多，又对 Sakana 说了一堆胡话，大概自己到现在还没学会控制情绪。</p>
<h2 id="section-6">2021.07.05</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>暑期回校的计划最终安定下来了，6 号开始讲课到 22 号，我主要负责答疑。由于 12 号科目二才能考完，所以打算到时候再回去，这前面的一个星期就晚上线上答疑吧。</p>
<p>要做的事情，大概就是继续看看论文，晚上回学校协商一下后面的安排。至于 THUInfo 和科协那边，真的有点过意不去了快要。</p>
<p>本来想今晚找 Sakana 聊聊的，但看来落空了，所以还是自己调节吧。Holder 能做到的，或许吧。</p>
<p><strong>今天汇报：</strong></p>
<p>回高中和 FFF 遇了一下，商量了后面的安排。</p>
<p>当然还有一些和 Sakana 那边的事情，这里不多说，但是至少我现在，真的感到很安心很快乐就是了。</p>
<h2 id="section-7">2021.07.06</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>没有什么很想做的，就是很平凡地看书学习、写写 THUInfo、写写实验室代码、写写科协文档。</p>
<p><strong>今天汇报：</strong></p>
<p>选课掉了康总的计组和人机交互，可能打算去搞 VLSI 来混学分。出乎意料的是台球上了。</p>
<p>自从昨天开始，Holder 就变得似乎没那么难受了，或许也与梅雨渐渐离开有关。今天上午看了一点点 CSAPP，也预约好了 12 号的科目二考试，之后就是每天去练一练就好。</p>
<p>晚上主要在安排暑培和技能引导文档那边，夏老板突然提到了可以和企业 / 实验室 / 其他学生组织做双向链接，这样的话既解决了文档来源比较单一的问题，也一定程度上提高了文档的实用价值。</p>
<p>【和 Sakana 约了见面再聊，默默期待，还有一些误解，需要慢慢解开】</p>
<h2 id="section-8">2021.07.07</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>因为上午不去驾校，所以睡大觉放松一下。晚上的话照常工作，不过比较紧急的事情是编写竞赛习题解答以及和猫猫准备一下文档的部署。</p>
<p><strong>今天汇报：</strong></p>
<p>回学校了，旁听了 FFF 的一节课。</p>
<p>大概是觉得这一届的基础有点问题吧，很基础的解析几何都没有把握很快给出正解，这就比较困难了。</p>
<p>目前老师的意思是想让我带一下几个有机会去清华夏令营的同学，自己也要开始复习一些自主招生题了。</p>
<h2 id="section-9">2021.07.08</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>回家拿一些当时的自主招生参考资料，然后准备码点字吧。自己的事的话，可能就学习一些基本的东西，然后 THUInfo 开一些工。</p>
<p><strong>今天汇报：</strong></p>
<p>出卷子真的是好累啊，到处翻找资料，然后还要想尽办法保证我是站在一个中学生的角度来思考问题。磨了一整天还熬了一夜，基本上把一份数理化的试卷全都出完了，大概准备 10 号来考这一份卷子，以筛选出适合去清北夏令营的同学。</p>
<p>我现在比较担心的是，大家都考得不高，最后还是拉不开差距。</p>
<h2 id="section-10">2021.07.09</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>学车，然后有什么事情就做什么事情。现在是越来越不太想把自己逼得太紧。</p>
<p><strong>今天汇报：</strong></p>
<p>下午把昨天出的卷子的答案给搞出来了，结果发现这份卷子应该是比较困难的，可能会把他们搞得很惨。</p>
<p>THUInfo 说要开工到现在都没有动静，实验室没干活，科协现在还在筹划。总之就是除了正事之外的事情都在做。</p>
<p>今晚回家的时候突然想起来 GRE 还没有报名，可能都快没有考位了，还是赶快把坑填上。身份证也已经做好了，要找个时间去拿。眼镜有点刮花了，其实要去重配，但是也一直在拖。头发也要去剪一下了，现在还是得注意下形象？</p>
<p>明天早上回学校与那些考试的同学见一下面，监考一下之类的。明天下午尽快把卷子批改好成绩公布。</p>
<p>另外，我仔细思考了一下，暑假还是不要预习下学期的内容为好，暑假应该做一些其他的事情。</p>
<p>所以说这个暑假的主线就变成了 THUInfo、科协、实验室、高中竞赛、 GRE。至于新电脑、身份证、眼镜、头发之类的也就是支线任务了，科目二也将会在 12 号迎来终结。</p>
<h2 id="section-11">2021.07.10</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>上午回去监考，下午批改试卷并且和老师交流一下。然后尽可能能开工的东西就得开工，目前比较急的就是实验室和技能引导文档了。</p>
<p><strong>今天汇报：</strong></p>
<p>去监了个考，然后尽快把试卷给批改好了给老师。整体而言学弟们做得还是不错，但是细节上属于是真的需要很大的工夫去训练。</p>
<p>然后就是平凡的学车和练习。</p>
<p>另外就是，盼望 Sakana 回来。</p>
<h2 id="section-12">2021.07.11</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>去高港模考科目二，期间要开始阅读论文，至于能看多少，能领悟多少就是另外一回事情了。</p>
<p>然后就是尽快考虑新电脑的事情，并且尽快制定后面的讲课计划吧。</p>
<p><strong>今天汇报：</strong></p>
<p>高港练车真的是好累好累，一整天就在那里站着看各个考试位的点位，很没意思还很折磨。</p>
<p>当天也没别的什么事情了，出去参加了一个饭局，平平凡凡地结束了一天。</p>
<h2 id="section-13">2021.07.12</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>考科目二，然后回去准备和参加清北夏令营的各位见一个面。顺便安排之后的课程。</p>
<p><strong>今天汇报：</strong></p>
<p>科目二让我整整坐在那里等了六个小时，几乎是最后一个才考的。</p>
<p>于是顺理成章地没有赶得上下午回学校，晚上才和学弟学妹们见了个面，稍微聊了一些没有什么含金量的话题。</p>
<p>Sakana 从上海回来了，但我以后白天就似乎没有什么时间去找她玩了。</p>
<h2 id="section-14">2021.07.13</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>给他们讲一点很简单的东西。</p>
<p>自己也要开始干各种的活了，包括看论文，写 THUInfo。其实最主要的是科协那边似乎真的拖不下去了。</p>
<p><strong>今天汇报：</strong></p>
<p>上课是真的很累，站很长时间会让自己很累很难受，然后还要说很多话，口干舌燥。</p>
<p>其他倒是没有什么特别的感受，总体而言就是觉得过了很平凡的一天。</p>
<h2 id="section-15">2021.07.14</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>做一些平凡的事情，讲讲课。晚上被提前安排了饭局，所以还是得去。</p>
<p><strong>今天汇报：</strong></p>
<p>照样是讲了很平凡的一些课，没有涉及到很深层次的东西。给他们做了一个限时训练，估计效果不会很好吧。</p>
<p>晚上饭局结束，去了一趟宾馆取回东西。和 Sakana 连麦闲聊了一段时间，约了明天出来玩。然后确定买了一个新电脑，联想拯救者 Y7000，显卡只是 RTX3050，处理器是 i5 的。买这个电脑是为了混一下大作业，顺便尝试一下一些只有 Windows 有的小游戏。</p>
<p>也是很平凡地结束了一整天。</p>
<h2 id="section-16">2021.07.15</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>和 Sakana 约了去猫咖看看，然后吃烧烤打电动。</p>
<p>本来上午打算睡懒觉的，结果接到消息说清北夏令营同学不放假，所以还得去一趟。</p>
<p><strong>今天汇报：</strong></p>
<p>玩得算是很开心？撸猫很好玩，但是猫毛真的是很烦人，到现在我背后都是微微发痒。撸完猫吃了甜品之后去找 FFF 吃烧烤。随后就去时代广场打电动了。</p>
<p>Sakana 说大夏天的不想出门，但这也算是没办法吧。我俩的暑假完美错开，相交的时间几乎只有一个星期左右，所以要见面的话也就只有这一点时间。不过我的新电脑到货了，以后可以找 Sakana 连麦打游戏。</p>
<p>明天被家里人安排了，后天和 Sakana 约了晚上看 1921，大后天就得送她走了。于是这个暑假就这样等价于结束了。</p>
<h2 id="section-17">2021.07.16</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>蹲在学校正常讲讲课，晚上已经有了安排所以就没啥了。</p>
<p><strong>今天汇报：</strong></p>
<p>实际情况是，高中突然出现了电力故障导致学校全部停课，但是参与清北夏令营的同学由于在小教室里没有被电力故障波及所以电力一切正常。但是可以想见的是，看见同学们放假了，他们也完全没有心思学习。所以我就和他们玩狼人杀，聊了聊他们现在的焦虑和压力。</p>
<p>他们不是不想学习，但是高中这个体系给他们的限制实在是比较多，我作为学长也只能劝说他们做一些适应和牺牲。其实有的时候，也真的是毫无方法。</p>
<div class="note info no-icon"><p>有时治愈，常常帮助，总是安慰。</p>
<p>To cure sometimes, to relieve often, to comfort always.</p>
</div>
<p>这是特鲁多的名言，本来是形容医生的。但现在看起来我有的时候也像是这样，我帮不了他们实现他们理想中的高中生活，我最多只能做到帮助他们去理解这个可能有些扭曲的体系，让他们稍微以一种平稳的心态度过高中。</p>
<p>高中这边结束之后就去忙自己的事情了。明天去见 Sakana，18 号还有一小波聚会。</p>
<h2 id="section-18">2021.07.17</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>正常地活下去。重要的事情是开工技能引导文档。</p>
<p><strong>今天汇报：</strong></p>
<p>结果上午翘班了，在配置新电脑的 C 语言编译器和装 Python。结果就这两件事硬生生让我一个上午耗费完了。下午平凡地来高中简单讲了些东西，也顺便做了一些小事情。</p>
<p>晚上陪 Sakana 看了 1921，虽然对题材没有特别的兴趣，对演员无感，但感觉看下来还算是一部不错的电影，除了叙事线很多很杂，要不是了解一些历史可能就会错乱吧。</p>
<p>Sakana 不急着 18 号就直接回去了，打算 20 号左右回去，于是就默默约了 19 号再出来玩。</p>
<p>总之就是，一切都在慢慢变好。</p>
<h2 id="section-19">2021.07.18</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>今天约了同学聚会，所以重点会在出去玩上。不过高中这边也应该好好干活。</p>
<p><strong>今天汇报：</strong></p>
<p>和姜东会玩了一个下午一个晚上，先去麦当劳吃饭搓音游，然后星巴克打雀、掼蛋、闲聊，之后定番小菜园聚餐和舞立方手痒打机，最后 KTV。</p>
<p>KTV 上我唱了不少歌，但最满意的还是《太阳系 DISCO》。作为自己很喜欢和大家都能参与（指鼓掌和参与オーオオー以及ナナナナナナナー环节）的一首歌，整体气氛还是很好的，比那些大部分人看不懂歌词也不熟悉的比较冷的 V 曲要好一些。当然唱完这首歌我嗓子就明显不行了，中途的一段几乎就是在纯靠喊。</p>
<div class="note info no-icon"><p>あの一等星のさんざめく光で，あなたとダンスを踊ろうか。 ——「太陽系ディスコ」</p>
</div>
<p>回来之后就是和 Sakana 闲聊了一会，然后转头就装了个有补丁的 Riddle Joker 开始推。由于之前认真推过没有补丁的七海线，所以这次就很快地过掉了，看了一下 H 情节怎么搞的就睡觉去了。</p>
<h2 id="section-20">2021.07.19</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>今天 Sakana 家里有一些事情不能出门了，所以今天见不了面了。有一些话不如连麦的时候随便扯一下吧，晚上陪她打打游戏什么的也不是不行。</p>
<p>其他事情就正常慢慢推进就好。</p>
<p>【我自己依然在为一些虚无缥缈的东西而伤心，Holder 还是需要花一些时间来恢复理性】</p>
<p><strong>今天汇报：</strong></p>
<p>用了点时间给自己的网站加了个评论系统，本来是想用 Valine 的，结果现在较高版本的 NexT 不支持了，所以退而求其次装了 DisqusJS，他的缺点就是需要翻墙的账号。</p>
<p>之后听从了栋栋的建议换了 <a href="https://twikoo.js.org">Twikoo</a>，发现是真的好用而且还不用翻墙，现在我直接安利这个评论系统。</p>
<h2 id="section-21">2021.07.20</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>今天 Sakana 回上海了，所以估计是不能去找她了。</p>
<p>Holder 一个人要好好地过好自己的生活。</p>
<p><strong>今天汇报：</strong></p>
<p>大概就是接着修了一下评论系统，然后出去吃了个饭，结果又喝多了（Holder 从来没有信守过自己的 flag）。回来之后和 Sakana 连麦闲聊了一点点，似乎一直在说胡话，语无伦次。</p>
<p>之后就是和 LCR 两个人联机打 Minecraft，但说是一起玩，实际上就是两个人在已经建好的一个挡里面骑马。</p>
<div class="note info no-icon"><p>【LCR】芜湖，上次骑马出去忘了把第二只马骑回来，Holder 你没马了。</p>
</div>
<p>大概就这样平凡地过去了一整天。</p>
<h2 id="section-22">2021.07.21</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>今天和高中的老师一起吃饭讨论这几天讲课的情况，实际上 Holder 并没有做出什么很突出的贡献。</p>
<p>接着过下去就好了。</p>
<p><strong>今天汇报：</strong></p>
<p>听闻 LCR 那边可以提供他们宿舍给我住，突然有点想要去上海玩一圈，也正好送一下 Sakana。但是南京突如其来的疫情让家里人对此很担心，我自己还算是不太认为会影响到什么，但也因此搞得很不愉快就是了。</p>
<p>上海不去就算了吧，反正也只是去见个面，最多晚上陪 Sakana 在交大转转圈，再陪 LCR 打一白天加一晚上游戏。</p>
<h2 id="section-23">2021.07.22</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>好好生活。</p>
<p><strong>今天汇报：</strong></p>
<p>最近一直比较烦躁，不知道是因为无聊还是因为什么。其实能隐隐约约感到实际上就是因为当下各种事情都不顺遂（科协事情没做，实验室那边也在咕咕咕，高中这边还是感觉自己没做到什么有用的事情）加上后面还要和 Sakana 失联，一下子又没有了倾诉的人，FFF 不久出去旅游，这下子是真的没有谁出来一起玩了。还是那句话，想到一年前的自己甘愿一个人闭锁在黑暗的房间里，独自对着屏幕无论是欢笑还是难过，都不愿意和其他人过多交流，现在的我无疑是对过去的讽刺。</p>
<p>不过稍微好一些的是，我可能解开了一些心结。概括来说大概就是，我以往认为自己伤感的来源是别人变得特立独行而怪异，但是自己认认真真享受过生活之后，我才认识到，以往昏暗的我才是最为特立独行的。</p>
<div class="note info no-icon"><p>从一个本就不合群还自认为合群的人的眼光之中看去，那一切的平凡和正常，反倒是怪异。</p>
</div>
<p>所以 Holder 重新立起 flag，从今开始好好生活。</p>
<p>【箴言：Holder 的 flag 没有不倒的】</p>
<hr />
<p>于是今天上午的 Holder 起床之后就在 Riddle Joker，现在应该只剩下茉优线没有完全结束了（年上系真的不在我的 XP 上，最后推自然没有任何的问题）。</p>
<p>中午的 Holder 开始到处看 V 曲的 live，真的突然想去一次 V 家演唱会。要说现场感比较好的歌的话，<a href="https://www.bilibili.com/video/BV1Nf4y1U7z1?t=279">《Unknown Mother Goose》</a>是首推（众人おおおーおおー的那个场面真的是很震撼的），之后就是<a href="https://www.bilibili.com/video/BV11W411C7io?t=295">《劣等上等》</a>（Giga 的专业炸场子歌），<a href="https://www.bilibili.com/video/BV16s411h7eE">《号哭》</a>和<a href="https://www.bilibili.com/video/BV1As411B7J8">《东京泰迪熊》</a>也算是很有感觉的。然后就似乎沿着推荐来到了几个网络合唱视频，首先是 2017 年的<a href="https://www.bilibili.com/video/BV1Nx411u7YT">《砂之惑星》</a>（八爷 yyds，可惜出道娱乐圈了，当个 P 主不好么），然后是 2011 年的<a href="https://www.bilibili.com/video/BV1Ax411w7Sh">《千本樱》</a>，也算是猛然回忆起高中的一些时光了。</p>
<p>之前在<a href="/about">关于页</a>提到我最喜欢《无梦之梦》，但是这首歌适合一个人在难过的时候自己听，用来做安慰用的。其实春卷饭的歌基本都是这个特征，很温柔，适合一个人独自欣赏，很难在演唱会上表演得好。同理还有新曲<a href="https://www.bilibili.com/video/BV1hA411g7mt?from=search&amp;seid=51222177324975189">《第三心脏》</a>，也是最近很喜欢的。</p>
<hr />
<p>最终通过一番协商，还是决定去上海了。自己的一时冲动把 Sakana 还有家里人的安排搞得一团乱，说实话现在还是有一点愧疚。然后在安排在上海的行程的时候，发现竟然想不到可以去哪里玩。</p>
<p>所以说，Holder 的脑子一热带来的是无数若干的混乱，让 Sakana 落单还拉着她一起不知道干什么，一时间不知道说什么好。</p>
<p>今天 Sakana 应该是和同学们出去玩去了，Holder 一个人默默地去未来极越把卡里的钱给用掉了，之后骑车绕县城转了一圈。</p>
<p>一个人真的很无聊，无聊的时候就喜欢胡思乱想，然后可能就会做出很没有理由的事情。</p>
<p>惋惜我自己的高中没有发展若干的朋友，导致现在回到家乡竟然是四处无人。还不如早点回北京，至少我的舍友可以一起打牌，一起出去找地方看个电影或者是到处找点吃的。或者就是找北大的几个熟人出去转转，要么也可以和迅哥哥等 308 闲聊。</p>
<p>于是 Holder 又开始莫名难过起来，Holder 自以为值得夸耀的，竟然是一片荒芜。</p>
<p>Holder 嫉妒且憎恨着那些现实生活充实的人们，虽然这种无名火显得幼稚且没有道理。Holder 似乎就像是对着并不存在的敌人宣战一般，对着自己幻想中的困境，对着不存在的挫折精神低落而恍惚。</p>
<p>那个好好生活的 flag 突然显得可笑。</p>
<hr />
<p>我一直在思索着，现在的我的生活多么像我先前的追求。和同学彻夜聚会，和 Sakana 看电影、逛街、撸猫，即使一地鸡毛但依然决定去上海，那种自由挥洒情感，自由表达自己，不计成本地为了简单的目标而大闹一番的生活。然而我却似乎不像是之前那样无忧无虑，我每天都被一种不能明状的忧伤所萦绕。即使某天我说我释怀了，我看开了，我似乎找到了生活的乐趣。即使我这么说，我的心中实际上从未解开过这种难过的感情，只不过是因为当下的愉悦而暂且麻痹。</p>
<p>在房间里自说自话地走了几圈，尝试理清楚自己这个情感的来源。结果还是不太弄得明白，所以暂且作罢。</p>
<h2 id="section-24">2021.07.23</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>逃到上海，然后不知道干什么。</p>
<p><strong>今天汇报：</strong></p>
<p>单纯地溜来上海了，Sakana 因为绿格那边的政策一直没有很能确定下来比较低落，于是也就很单纯地一起吃了饭，去了私影玩了一圈而已。</p>
<p>晚上打算玩冬日计划，结果因为网络原因一直没有能够一起玩得了，只能作罢。</p>
<h2 id="section-25">2021.07.24</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>和 LCR 混一天。</p>
<p><strong>今天汇报：</strong></p>
<p>大概就是中午先和 Sakana 吃了一顿饭然后就和 LCR 一起到处瞎跑了。</p>
<p>本来的预定是去外滩，沿着江边随便走走，结果 LCR 在地铁半路上突然提到想要去海边，但是已经出发一段路了，就决定去黄浦江入长江口转一圈。地铁坐了整整两个小时到双江路下，然后就是沿着黄浦江骑车十几公里。本来以为沿着江边能看到什么的，结果全是造船厂，能看到的就是一堆重型机械和工人们。值得一提的是本来今天是台风来的日子，结果雨是真的没有下下来，倒是风是相当的大，大到我骑车下坡不蹬的话，风会把我吹上坡。</p>
<p>然后就是沿着一条路一路骑到了入江口，那里的风已经是相当大了，但依然没有能阻挡钓鱼佬们翻越围墙站到江边的防波堤上钓鱼。自己胆子小，就没翻过去看看，所以也就站在墙外拍了照片，打了个车回去了。</p>
<p>至于今晚发生的一些并不太愉悦的事情，还是暂且不提吧。只能说现在的 Holder 不太振作得起来。</p>
<h2 id="section-26">2021.07.25</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>活着。</p>
<p><strong>今天汇报：</strong></p>
<p>台风终于登陆上海了，整个天都是漆黑的那种，狂风大作暴雨如注。然而我还是和 LCR 两个人出了门在上交里面转了好长一段时间，跑去下院瞎窜，去思源湖边上看台风，去宿舍楼的风口看被吹倒的树。</p>
<p>反正就是两个不要命的人在台风天的无聊之举，和昨天顶着台风去江边上差不多。结果是误了回去的火车，不得不立刻改签第二天的。</p>
<p>Sakana 自然在台风天不愿意出来，所以一整天都没有见到，晚上喊她打游戏也没有理我，说是没有兴致。</p>
<h2 id="section-27">2021.07.26</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>继续活着。</p>
<p><strong>今天汇报：</strong></p>
<p>早上爬起来就接到了火车取消的消息，于是不得不接着留一天。</p>
<p>早上和 LCR 就一直在打 Minecraft 消磨时间，生存档从零开始真的是很耗时间的一种玩法。玩好了之后和 Sakana 说了下午陪她去做核酸，最后是自己任性地拉着她冒着还算不小的雨去了天街。</p>
<p>晚上没事做，于是合计了一下和 LCR 又出门了，结果是一天去了两次天街（这个时候就得说交大旁边真的是没啥玩的，除了两个商场、一个桌游店、一个 KTV、若干小饭馆之外似乎什么都没有了，喊 Sakana 出门最终的归宿永远是找一个吃饭的地方闲聊，最多去看电影）。</p>
<h2 id="section-28">2021.07.27</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>回家，然后活着。</p>
<p><strong>今天汇报：</strong></p>
<p>早上 Sakana 突然说打算送我去火车站，但实际上我知道她出远门的东西还没收拾好，但还是答应了。</p>
<p>然后就没有什么特别的事情了，在火车站拥抱后分别，自己一个人坐火车然后兜兜转转回到了家，冒着雨赶去高中。</p>
<p>一整天都过得比较累，回来之后又不得不通宵清掉了一些任务。</p>
<h2 id="section-29">2021.07.28</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>清闲地活着。</p>
<p><strong>今天汇报：</strong></p>
<p>今天是给高中的学弟学妹们考试的日子，自己是出题人也是监考。监考这个活是真的令人烦躁，无聊至极，甚至愿意出点事情让自己不至于无聊。</p>
<p>Sakana 最终踏上了旅程，坐了十个小时的火车前往兰州，她也在经受着无聊的时光。两个人一起听歌了一个小时，她到达兰州之后需要办理一系列的事务，便暂且失联了。</p>
<hr />
<p>不过 Holder 似乎算是慢慢理清楚自己到底在担忧什么了，异地造成的交流不畅和误解真的是相当折磨。不多说吧，总之就是意识到了我和 Sakana 处境其实类似，而我潜意识里深刻地误解了很多的事情而已。所以现在应该心态平稳很多了，Holder 也已经下定决心要保证自己生活乐趣的多元化了。</p>
<h2 id="section-30">2021.07.29</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>一个人活着。</p>
<p><strong>今天汇报：</strong></p>
<p>今天什么都没有发生，起床吃饭，一个人躺在床上刷手机。就是典型的一个无聊的人应该有的样子。</p>
<p>现在 Sakana 应该到达了最终的目的地，可能以后就会是几乎完全失联了。大概如此。</p>
<h2 id="section-31">2021.07.30</h2>
<p><strong>今天想要做的事情：</strong></p>
<p>把科协暑培好好弄好。</p>
<p><strong>今天汇报：</strong></p>
<p>Sakana 现在彻底处于失联状态了，多半是不到晚上联系不上了。虽然有点消沉，而且为生日怎么办的事情有点烦躁，但是自己的事情还是得好好做下去。</p>
<hr />
<p>就这样吧，这个纪录就此结束，新的生活渐渐就要开始了。</p>
<p>Holder 通过这个暑假，大概是缓慢地将自己的心态平稳下来了，或许还有一些不能言说的不舍、迷惘、辛酸等等，但暂且都埋藏起来吧。不过相较于一个自闭的 Holder，虽然现在的我或许不如以往那样沉稳专注，但可能更像一个正常的人吧。</p>
<div class="note info no-icon"><p>あたしが愛を語るのなら，そのすべてはこの歌だ。</p>
<p>誰も知らないこの物語，また口ずさんでしまったみたいだ。</p>
<p>「Unknown Mother Goose」</p>
</div>
<p>总而言之，或许还有许多的困难，还有许多的考验，还有很多我们需要去做的事情，但我依然坚信未来可期。</p>
<p>我是 Holder，我们继续走下去吧。</p>
]]></content>
      <categories>
        <category>【生活记录】日记</category>
      </categories>
  </entry>
  <entry>
    <title>2022 暑假生活记录</title>
    <url>/2022/05/27/2022-summer-record/</url>
    <content><![CDATA[<p>2022 年的暑假，将会来得意外地早，因为我提前回家了。</p>
<p>或许是抑制不住灵魂对自由的向往，或者是想要回到高中见见曾经带过的学弟学妹们，或者是想要见见 Sakana，都可以是我提早回家的理由。</p>
<p>总之面对着可能有三个月的暑假，还是稍微记录点东西省的虚度。</p>
<span id="more"></span>
<h1 id="section">2022.05.27 - 2022.05.29</h1>
<p>先回想一下自己需要完成什么事情吧：</p>
<p>【下述事务列表更新于 8.15，删除、调整部分事务，后续不再更新且不再具有效力】</p>
<ul>
<li>科协
<ul>
<li>【半搁置状态】308 权限系统</li>
<li>【半搁置状态】与软工课程的对接安排</li>
<li>图形学文档编写</li>
<li>RL Tutorial 合并</li>
<li>【半搁置状态】前期文档补助核发</li>
</ul></li>
<li>THUInfo
<ul>
<li>培养计划功能</li>
</ul></li>
<li>各类项目相关
<ul>
<li>参与实验室快手合作项目</li>
<li>实习收尾工作
<ul>
<li>递交离职申请</li>
</ul></li>
</ul></li>
<li>下学期预备工作
<ul>
<li>继续编写日语语法手册</li>
<li>学习抽象代数 Artin</li>
</ul></li>
<li>一些杂杂的东西
<ul>
<li>冲雀圣【至少打回雀豪三吧 OTZ】</li>
<li>四系麻将联赛</li>
</ul></li>
</ul>
<p>基本上而言，课内实际上压力并不大，所以升学相关一定是要重点考虑的，目前的 Target 是孙立峰教授或者艾海舟教授，还是稍微多去做点准备。</p>
<p>总之是回去之前把体育相关全都清理掉。回去之后在期末结束之前都是课内为主，同时升学相关内容也得做做，估计期末结束后也就隔离结束了。之后就可以暑期干实习、做实验室的事情、做自己想做的事情。</p>
<p>看起来还是前途一片光明的。</p>
<hr />
<p>这几天总体而言就是简单的准备回家，总之是下面的几项工作：</p>
<ul>
<li>事务性
<ul>
<li>离校事务
<ul>
<li>递交离校申请书</li>
<li>完成北京市要求的集中核酸检测</li>
<li>向辅导员、班主任、院系报备</li>
</ul></li>
<li>回家事务
<ul>
<li>和村支书对接接站、隔离政策</li>
<li>提前和家里人商量打扫房间</li>
</ul></li>
<li>路程
<ul>
<li>预约送站校车</li>
<li>预定火车票</li>
</ul></li>
<li>收拾行李</li>
</ul></li>
<li>清理必须要在学校内完成的事情
<ul>
<li>完成阳光体育打卡</li>
<li>完成体育期末考试</li>
</ul></li>
</ul>
<p>除了这些事情，也就多完成了一个开放 THUInfo 内测组的事情。</p>
<p>这些事情，已经足以让两天都没有什么闲功夫了。</p>
<hr />
<p>最终总算是到家了，对于从有中高风险地区归乡，但是出发地低风险的旅客，政策似乎是需要落地后做两次核酸检测，统一转运到集散点，由目的地社区凭社区接收人员报告来接人。</p>
<p>疫情反反复复，我回家也从疫情前的直接从火车站搭 1 路公交，变成了需要查验健康码，再变成需要回家后立刻向社区报备，最后就成为了现在这样，八点到站，十一点我才到家。</p>
<p>不过已经到家了，就是好事。熟悉的水汽蒸腾、潮湿闷热的夏日的家乡。</p>
<h1 id="section-1">2022.05.30</h1>
<p>新生活的第一天，要从睡懒觉开始，一觉睡到了十一二点，被家里人从床上拽下来了。</p>
<p>下午简简单单抄完了数学实验最后一次实验报告，稍微看了看数据挖掘的作业，但是一点都没有头绪。</p>
<p>今天比较大的事情就是 Career9 发布运营了，可以看到导师公布的名额数和当前招生情况，然后校内版也可以在同学间互相交流自己的推免状态。这个网站大约是很有用的，但是感觉推进下去会比较困难，毕竟老师那边的态度比较模糊。</p>
<p>但是可能我不太想关注这个网站的运营了，而是关注我自己的推免情况。</p>
<p>其实真正到现在都没有老师的是少数了，大部分人只是找好导师但是还没有双向确认而已，所以我现在比较重视周三和孙立峰老师的交流，看看他的态度是什么。</p>
<p>哎，这种事情不是什么很急的事情，它就像初夏闷热潮湿的那种感觉，仿佛有什么东西附着在身上，挥之不去，只有一种无力的烦躁感。</p>
<h1 id="section-2">2022.05.31</h1>
<p>五月的最后一天了，明天就要和孙立峰老师交流了，也就会决定我的六月是开门红，还是会延续五月这种莫名的阴郁。</p>
<p>今天本来是打算快速写完数据挖掘的最后一次作业、看看搜索引擎，然后去了解一下孙立峰老师相关情况的。但实际上，在写数据挖掘作业的时候还是被 Page Rank 卡住了，然后就是熟悉的，卡住就去摸鱼，和学长闲聊。</p>
<p>中途家里人突然因为网络银行无法使用安全插件，几十万卡在账户上转不出去，火急火燎地。然后我尝试着上手看，就看到 ActiveX 格式的插件。不禁感叹怎么还在用这种古老的东西，所以手动设定 Edge 浏览器浏览网银页面的时候使用 IE 模式，于是这个问题就这么解决了。</p>
<p>果然是上古遗物啊。</p>
<hr />
<p>反应过来数据挖掘作业还没写，又去网上到处找 Page Rank 的讲解文，半懂不懂地写完了代码搞出来了和舍友一样的答案，这个时候我才明白 Page Rank 只是一个简单的在图上的马尔可夫过程。</p>
<p>好多次都是这样，抄答案抄着抄着看会了。只不过这个理论上不用一小时就能写完的作业我从下午两点写到了晚上九点。</p>
<h1 id="section-3">2022.06.01</h1>
<p>今早和孙立峰老师见了个面，但是自我感觉不是很好，感觉很多话想说都没说，有些不该说的还是说了。比如说我应该不透露我还有其他老师想选，比如说我应该再解释一下我为什么到处乱跑。</p>
<p>不过孙立峰老师确实似乎展现出了一点的兴趣，大约是对着我的简历问了很多问题。</p>
<p>在和老师见面之前，几位学长告诫我说一定要展现出对老师研究方向的兴趣，这样成功机会会大一些。但我只能说，我尽力去了解孙立峰老师的方向了，但是还是很难当场就展现出那种兴趣盎然的样子。</p>
<p>孙立峰老师的博士生学长说如果夏令营那边没有很强的申请者，我应该是稳了。</p>
<p>但是他也不知道我就是因为半路杀出来的强者而被上一个老师拒绝的。</p>
<p>我现在是越来越认可这句话了，就是说人都是活在假设里的。我们假设道路畅通，我们假设我们可以随意流动，我们假设外卖总能到达，我们假设超市总是货源充足，但是疫情的封控措施摧毁了这些假设，我们就变得不安。我的推免也是这样，我总是假设老师的认可就代表我高枕无忧，但实际上面对变故，不是白纸黑字的约定，都可以摧毁。</p>
<p>所以实际上我依然是不安的，没有斩钉截铁的口头肯定或者直接认定，说实话，我不敢保证这次不会和上次一样突然跌落。</p>
<hr />
<p>下午被镇里要求去做了核酸，回来想起来体育打卡还没有做，草草拿手机拍了视频交了上去，就算完成任务了。</p>
<p>晚上突然告知数学实验取消期末考试仅考虑平时实验报告分数，虽然少了一门考试很高兴，但是说实话我也有点害怕因为大家拉不开分差突然吃一个 3.6，我的 GPA 挂在 30% 的边缘摇摇欲坠，希望不要在我想要 KEEP GPA 的时候来意外。</p>
<hr />
<p>晚上和 Sakana 打了三四个小时的电话，先是打 Escape Simulator，然后她因为电脑过烫就不想玩了。之后就在闲聊，聊游戏，聊未来的打算，聊最近有意思的事情。</p>
<p>其实是挺快乐的，很平凡很平凡的快乐。</p>
<hr />
<p>从今天开始突然打算早睡了，因为确实最近身体也感觉到了有点不堪重负，可能熬夜的伤害也在慢慢显现。</p>
<p>年轻人还是对自己的身子稍微好一点点吧，先从能两点睡觉开始。</p>
<h1 id="section-4">2022.06.02</h1>
<p>今天没有什么预定之中的安排，只是很单纯的需要完成还剩下的事情而已，比如说搜索引擎的大作业。</p>
<p>很久没有碰前端，手还是觉得有一点点生疏，果然这种东西和乐器一样，必须要时时刻刻练习。</p>
<hr />
<p>在老家实际上还是挺舒服的，除了升学焦虑之外没有什么烦心的事情，日常生活的后勤工作也做得好好的，但是总觉得缺少了点什么。今天和东方同好会的朋友开了个腾讯会议，我共享屏幕打牌、打永夜抄、写大作业，在听到同龄人们对我的操作或理解、或吐槽的时候，我大概是觉得，应该要回到这些群体之中了。</p>
<p>有点按捺不住，想早点去姜堰住几天了。明天就和家里人商量，不妨直接等高考完了就去姜堰，和同学们一起去玩耍吧。</p>
<p>不过在此之前，依然有相当大量的事情需要我来完成，最基础的就是搜索引擎的大作业和密码学的考试。</p>
<p>今天在浴室里唱了一小会歌，果然唱歌也是需要时常练习的啊。</p>
<div class="note info no-icon"><p>白い桜の花の季節は、遠く夢の中にだけ。</p>
<p>青々とした桜の葉は、なにも語りはしない。</p>
<p>「夢と葉桜」</p>
</div>
<hr />
<p>实际上最近一直都是这种，对未来隐隐担忧但是并不会影响我做手头上的事情的这样的状态。不过也越来越理解安老板所说的一些话了。</p>
<p>周六预计是要进行下一届科协副主席的选举面试的，我其实很期待高老板会作何表现。</p>
<p>Whatever，今天也要早睡。要做到不带有任何压力上床，一觉就睡到第二天天亮。</p>
<h1 id="section-5">2022.06.03</h1>
<p>今天还是做了不少事情的，和 Sakana 开腾讯会议学习（但是这个人下午晚上都是在床上睡觉 T^T）。不过我也就简单做了一些搜索引擎，然后复习了一点点密码学。</p>
<p>因为是端午，晚上家里有小聚餐，但问题在于我又被灌了可能有半斤左右（一杯半）的白酒，中途我通过疯狂喝水喝汤压住了酒劲，才不至于和一年前一样直接低血压晕倒进医院。</p>
<p>白酒这东西真的好喝吗，我到现在嘴里还是那种混合着今晚饭菜和酒气的味道，十分不好闻。</p>
<p>中途从聚餐逃离了，因为 V+ 群在商讨你画我猜，于是就回来打你画我猜了。</p>
<p>不得不说这种接力式的你画我猜非常有意思，因为你永远不知道你的上一个人会给你画个什么，或者给你一个什么样的词语。比如今天 Ne 老师就给我的一个词语就是“P 25 47 23 度和眼镜，莫非是 neji”，这种词语我也只能乱画，说实话完全不会，但是节目效果拉满。</p>
<hr />
<p>明天要面试科协新一任的各位副主席了，还是有所期待的。</p>
<p>但是今天说实话没有怎么学习，倒也是有点隐隐担忧后面的考试和大作业，和孙立峰老师也没有进一步的联系，应该也有点心里悬着。</p>
<h1 id="section-6">2022.06.04 - 2022.06.08</h1>
<p>这五天基本上每天的生活都是一样的，就是起床后写搜索引擎大作业写到睡觉。</p>
<p>现在回过头来看搜索引擎大作业，我负责的前端部分，说实话我自己是比较满意最后的成果的。刚刚动手写的时候，我意识到了我许久没有写 React，但是写着写着发现那些之前的手感会慢慢回来，而且这一次还弄明白了好多之前并不是很明白的一些 React 特性。</p>
<p>最后助教也说写得不错，那我觉得这几天认真做事还是有所回报的。</p>
<hr />
<p>7 号下午验收搜索引擎大作业，但是 8 号就要考密码学。7 号我检查完大作业的时候，我的密码学是一点都没有复习，最后我是一晚上突击学了一下直接上考场了。</p>
<p>说实话密码学的内容真的不多，几种讲了很多次的古典密码、Enigma、DES、AES、RSA、DH 密钥交换、消息认证码、数字签名，统共也就这些话题。古典密码考的是细致，只要稍微细心点错不了。DES、AES 总之也是计算量大头，但其实弄明白 <span class="math inline">\(\mathbb{F}_{2^8}\)</span> 上的乘法定义和多项式乘法定义也就那样，但是考试最后没有考 AES，白费了我打的乘法表。非对称加密那些东西，不会考很难的计算，密钥都是两位数，计算器算算就行。</p>
<p>但遗憾的是，我 Enigma 忘记了明文和对应密文不会是同一个字母这个性质，一道 6 分题没做出来。消息认证码的答案没来得及写完，最后也不知道老师愿意给几分。不过都说了一周内出分，那就等等看吧。</p>
<hr />
<p>实际上 7 号晚上虽然说我在复习密码学，但实际上我主要在做今年的高考数学试卷。我自己做的答案和一些评价写在另外一篇文章了，这里就不说什么，</p>
<p>近期打算清掉一些任务之后，去姜堰住十天半个月的。暑假也打算南京、无锡到处走走，总之不太想闲着。</p>
<h1 id="section-7">2022.06.09</h1>
<p>今天主要是回去参加一些家里的白事仪式，确实也挺没什么意思的，除了一不小心跌倒扭到了脚，现在还疼着。</p>
<p>不过今天零零散散做了不少小事，摸了一下家里的钢琴、下载好了孙立峰老师给我的论文列表里的论文、被 return 拉到了日本友人的 Discord 服务器、找到了许久之前就想玩的游戏的资源等等。</p>
<p>不过倒也是荒废的一天，没有做什么特别有价值的事情。</p>
<p>想起来自己还没有给密码学第三次作业作出什么贡献，不如明天稍微找点时间看看，而且 OS 也得开始动手，系统结构也得开始复习了。</p>
<p>但是，明天去吃一顿 KFC 才是重中之重。</p>
<h1 id="section-8">2022.06.10</h1>
<p>今天其实整体都有点阴郁的感觉，因为数学实验按照老师的意思是有可能把考勤分放大到五十分，这意味着一堂课都没有去的我有可能会被挂科。</p>
<p>我确实也是有这种情感倾向，就是容易滑坡。当遇到挂科风险的时候，我就会想到我的 GPA 可能没办法 keep，想到可能达不到导师的要求，就想到可能没有书读，总之这样一连串下去，我就瞬间觉得没什么动力去做事情了。</p>
<p>然后今天就有这种奇妙的焦虑感，在此基础上于是赶快去看论文，和孙立峰老师包括他的学生去交流。</p>
<p>不过其实按照安老板所说，如果真的老师决定招收，那么其实只要成绩达到国家政策硬性要求就行，而这个要求是很低的。</p>
<p>但是在和安老板交流的时候，我对孙立峰老师这边的不确定性的焦虑也是愈发严重。总之这些事情叠加起来，就会让我非常的不知所措，所以一整天都过的并不安分。</p>
<hr />
<p>不过现在回头来看，按照我这里光认识的就有四五个数学实验一堂课没有去过，签到一次没有去过的，可能最后真给挂科的可能性也不大。</p>
<p>孙立峰老师似乎也还在跟进我这边。</p>
<p>实际上总之就是什么都吊着胃口，这种处境是最为难受的。</p>
<p>不过后面就要开始糊弄 OS Lab 和 OS、系统结构的考试了，论文一定得好好看，但是现在课内该糊弄还是得糊弄。</p>
<h1 id="section-9">2022.06.11 - 2022.06.13</h1>
<p>这段时间过得比较恍惚，首先是周六简单地忙了点事情出去散了个心去吃了一顿 KFC，和孙立峰老师那边有了更多的一些简单交流。晚上给一位才高考完的学弟讲了一堂简单的日语课。</p>
<p>周日则一直在忙上忙下赶作业，最后 OS 还是没写完，交了一个写了一半的版本上去了。</p>
<p>周一则更加颓废，面临三份大作业、两个虽然不重要但还是一点没有底气的考试，面临可能的挂科风险，面临还没有确定的博士名额。我只记得我中午才起，吃完午饭还又睡到了四五点，打了两把牌吃了晚饭就一直在不知道要干什么。</p>
<hr />
<p>现在整个人都处于一种由于未来不确定感下的恍惚之中，或许也与我从来没有如此迷茫过有关。</p>
<p>但是我能怎么办呢，我只能说我尽力了。稍微给自己打点劲开始做点事情吧。先大致给一下后面几天的安排：</p>
<ul>
<li>13 日晚：OS 复习、写日语课讲义、看数据挖掘</li>
<li>14 日：上午复习 OS，下午考试，之后复习系统结构</li>
<li>15 日：上午系统结构考试，下午晚上做数据挖掘作业、写日语课讲义</li>
<li>16 日：搬家，之后的事情之后说</li>
</ul>
<p>其实只要熬到 24 日所有的大作业结束之后，课内就尘埃落定了。</p>
<p>安慰自己应该不至于再被咕咕咕一次，安慰自己不至于就这样被挂科。</p>
<p>让自己再一次活在假设之中。</p>
<hr />
<p>深夜最终还是不放心 OS 开始复习，但是深夜的时候真的特别容易因为没有人交流而唐突陷入一种情绪的低谷状态，本来最近状态就不是很好，现在更是非常难受。</p>
<p>还是稍微宽慰一点吧，反正六月底，最晚最晚总不能六月底这些事情都不会结束吧。还是期望着最好的结果，推免名额有个落定，数学实验也能混个 2.6 之上的分数，所有的大作业都能高质量完成。</p>
<p>希望如此，希望如此。</p>
<h1 id="section-10">2022.06.14</h1>
<p>凌晨五点睡到了早上九点，草草吃了点东西之后继续看了一小会 OS，但实际上这种困倦的状态真的是一点都看不进去。</p>
<p>下午的 OS 考试，说实话直接给我考懵了，我只能庆幸我记了 PF，不然的话可能真的要给绩点带来重大打击。如果要说的话，前面判断题不算难，文件系统的实践题也不难，简单做做就好了，文件系统的理论题非常繁复，计算量很大，花了我可能得有二十分钟。同步互斥相关题目，这道题直接给我看傻了，我直接盯着这道题看不出一点头绪，即使我自己还稍微认真看了这一部分的内容。银行家算法，前面都还好，但是后面我理解错了意思，可能一整条都做得不太对。</p>
<p>但总之我计算过了，期中考试我 82 分，五次实验满分 40 分我就当他给我扣掉 5 分，我考到 30 分卷面分也就及格了。前面的简单题再怎么说，我也应该凑凑有 30 分了。</p>
<hr />
<p>考完动身去了姜堰，和姜中音游群的同学见了面，吃了开封菜打了一堆音游。回来之后便赶快开始赶工系统结构的复习。但说实话，我看了一晚上，现在已经是凌晨四点，我还是没开始 Tomasulo 算法。本来想着系统结构差不多考到四五十分就够了，放掉这一道题不算什么的，但是一想自己的大作业最终还是得做 Tomasulo 算法，早学晚学都得学啊。</p>
<p>今天连轴转了一天，居然就在这种繁忙的压力之下找回来了一点感觉，那种隐隐约约觉得好像我还能掌握生活的感觉。</p>
<p>今晚要是能摸索出来 Tomasulo，大作业也就可以开始动手，考试也应该大体是没有问题的，系统结构这门课大概也就圆满结束了。之后数据挖掘和图形学的大作业，再冲一冲也应该能写完。</p>
<p>总而言是烦心事也是慢慢减少的，好日子终究会来的。</p>
<h1 id="section-11">2022.06.15</h1>
<p>今天考了系统结构，发现考试也不算是很难，除了没有复习的 Tomasulo 算法之外，其他的至少都是能做的，虽然对不对不重要了。</p>
<p>因为通宵复习了下午直接睡昏过去，晚上爬起来吃了晚饭出去转了一圈，然后就要准备做大作业和跟进老师那边了。</p>
<hr />
<p>密码学出分了，没想到只复习了一晚上，两道大题胡乱写也能考 95，早知道不那么努力了（弥天大雾）。</p>
<h1 id="section-12">2022.06.16 - 2022.06.18</h1>
<p>已经在姜堰住了三天了，但感觉好像还是没什么特别的记忆点。</p>
<p>刚来的那天晚上，请了今年高考完的两位同学吃了个烧烤，期间从大学生活一直聊到了姜中目前的情况、暑假能干什么、各个专业的就业前途，甚至还聊到了人类的科技发展（大雾）。那天确实也是话很投机，从九点开始吃，聊天一直到靠近晚上三点。</p>
<p>其实和他们聊也主要是帮他们排解一下最近的压力，他们似乎也因为高考还没有出分比较紧张，尤其是自我感觉不是很好的。</p>
<hr />
<p>第二天就是一整天都在家里写数据挖掘的大作业了，这个作业说实话也就是照着网上写的比较好的一顿狂抄，反正他们用了什么特征工程我们就照着这样提取特征，然后模型的超参数也是随手调调。</p>
<p>然而实际到现在我们也没有做出来什么很好的结果，ROC 评分一直卡在 0.64 左右，离我们的目标还是有一段距离。</p>
<hr />
<p>第三天主要是陪 Sakana 出门去了，然而姜堰也就这么点大地方，早就给我们逛遍了。结果就是逛了会累了到星巴克坐着，我写了会大作业后，Sakana 突然说想打麻将，于是就简单教了她一点日本麻将规则。</p>
<p>晚上我自己要打 MCLeague，于是事先回来了，普普通通吃三，无功无过。</p>
<p>明天去混姜中的毕业典礼，就当散心了。</p>
<p>当然今天的插曲就是我的 fufu 被我家里人签收了，他们震惊于二十几岁小伙子还在买毛绒玩具（大雾）。不过也确实，可能这种对可爱的 fufu 的喜好也很难被刻板印象所接受。</p>
<p>OS 期末也出分了，我居然成功卷面分及格，这让我很是震惊，因为我几乎是裸考的，我本来的估分是最高 40 分来着的。</p>
<hr />
<p>说实话最近确实有一点找回生活节奏的感觉，感觉之前烦心的事情慢慢淡出了视野。</p>
<p>就这样平凡地过下去也挺好的。</p>
<h1 id="section-13">2022.06.19</h1>
<p>因为数据挖掘的作业导致只睡了大概三四个小时就跑去姜中看毕业典礼了，感觉办得超出预期，至少每一个节目都有完成度，而且独舞节目也实在是不错。</p>
<p>期间遇到了姜中音游群的各位群友，于是散场之后简单聚餐了。</p>
<p>他们怎么说呢，还在学校的签名墙上宣群，而且打出的广告语是“群里有 Holder”。</p>
<hr />
<p>下午跑去学校见各位老师了，可惜的是孙校没有时间，于是只能明早再去看看了。之后简单遇到了刘老师和邱老师，和他们主要是交流的是一些自己的近况和姜中的近况，其实也就是随便聊聊，但是没注意时间就到五六点了。</p>
<p>晚上有饭局，好玩的是他们七点开席，但我七点有保研政策宣讲会，于是只能边吃边听。这中间我舍友还催我数据挖掘的作业，于是中途又离场去写作业了。</p>
<hr />
<p>今天还是比较累的，本来就睡的少，结果还到处跑，加上明天还要早起，黄天驰学长也在催我看论文，大作业也还有两个，一瞬间压力就上来了。</p>
<p>只不过还好数据挖掘的结果还不错，所以就还好。</p>
<h1 id="section-14">2022.06.20</h1>
<p>早上早早起来去学校找孙校长，但中途接到消息说有老师心脏病犯了被送去了医院，孙校急急赶过去，也就没有聊到什么特别有用的内容。</p>
<p>上午回到家本来以为精神状况应该还行的，结果躺在沙发上睡着了，期间错过了暑期实习选专题，打开群的时候已经剩不了多少了，不过仔细看了看，有一个有关计算几何的好像没人选，就先选上算了。</p>
<p>下午是暑培的前期组织者交流会，其实进行得很顺利，大家也都很有想法，但问题就在于好像没有就 Python Track 到底布置什么样的作业达成共识，总之现在还是等等。</p>
<p>然后就是看论文看论文看论文，好像没什么好说的。</p>
<p>啊，这种平凡的生活倒也不错。但是问题在于，马上又要交 Tomasulo 算法大作业，又要花点时间写了，什么时候课内才能真正结束啊。</p>
<hr />
<p>Tomasulo 算法决定只写算法主体部分，GUI 就不是很打算写了。</p>
<p>然后今天下午说是数学实验出分了，但是等来等去都没有等到 Info 网站上的成绩，问了舍友他也没查到，是不是只更新了毕业生成绩，我们还要继续等的意思。</p>
<p>论文也没看，又开始焦虑会不会因为太摸鱼再次被拒绝了。</p>
<p>一周的开始并不是那么顺利啊，还是需要稍微进一步的。</p>
<h1 id="section-15">2022.06.21</h1>
<p>记 PF 的好处在于你可以摆得很彻底，所以今天也是半划水半干活地写完了 Tomasulo，但是明天的验收也不知道会怎么样，不管了。</p>
<p>所以，图形学、论文都要开始了。</p>
<p>今天数学实验的助教和我说，似乎最后老师决定了考勤分仅有两分，这么说来，我反而满绩了。</p>
<hr />
<p>今天在 Sakana 注视之下打了一把雀，然后点了至少三四个炮被飞了。我怎么说呢，感谢 Sakana 还觉得我打牌还行。</p>
<h1 id="section-16">2022.06.22</h1>
<p>上午系统结构 Tomasulo 大作业检查出锅了，<code>sw</code> 指令似乎又没有处理好，但反正只要不是零分就其实问题不大。</p>
<p>话说助教捉着我的分支预测一顿疯狂提问，可能这就是没写 GUI 的特殊待遇吧。</p>
<p>今天下午本来是要好好写图形学的，结果又躺在沙发上睡着了，有点过于摸鱼了。</p>
<hr />
<p>今天的一大好事就是，孙立峰那边确认给我名额了，所以我现在，所有事情就都安定下来了，唯一需要解决的就是课内需要稍微卷一卷。</p>
<p>啊，生活最终还是变好了。</p>
<h1 id="section-17">2022.06.23 - 2022.06.26</h1>
<p>这四天应该来说过得很充实，充实着快乐着。</p>
<p>先是 23 号通宵到 24 号写图形学，完全就是从零平地起高楼写完了 SPPM，还写了软阴影、UV 贴图、KDTree 加速、Octree 加速、景深、复杂网格等一堆东西。但没想到我们助教实在是查得太松散了，大概有这样的一段对话：</p>
<div class="note info no-icon"><p>助教：“同学你写了软阴影吗？”</p>
<p>我：“有的有的！”</p>
<p>** 正准备打开面光源采样得头文件自证 **</p>
<p>助教：“好的知道了。”</p>
<p>** 此时头文件还没打开 **</p>
</div>
<p>总之感觉比较随便，可能还是最终报告之中的图会比较重要吧。</p>
<p>话说我图形学最后实在是在验收前没有办法写一些什么很复杂的东西了，于是就拿两个斯坦福兔子随便摆了摆就当验收了。</p>
<hr />
<p>图形学验收完了就是办理暑期实习的入职，暑期实习的时间也就定在了 6.27 - 8.06，六个星期。</p>
<p>但与此同时，我弟弟的高考成绩出来了，然后实验室学长说可以开一个简单的开题会讲一讲最近要做什么事情。</p>
<p>于是 24 号的晚上愣是没能歇下来，即使我已经快四十几个小时没有睡过觉了。</p>
<p>当天晚上最好玩的事情就是，我水群的时候勉勉哥突然提到想唱 K，结果我也有点想去，虽然很累。结果是两人一拍即合打算就在家门口的 KTV 随便玩一会就散，结果群里一堆人都附和，最后变成了晚上九点钟五个大男人一瞬间就组好了 KTV 车队。</p>
<p>不得不说小县城的 KTV 不仅外语歌不全，而且音响效果也不好，不过本来就是过个瘾而已，那也就算了。</p>
<hr />
<p>25 号就立刻去找 Sakana 去了，每年暑假的必定活动——混入上海交大招生组。当天下午简简单单陪他们打了一小会牌之后便去了学校准备第二天的摊位。</p>
<p>但是这个时候有个比较大的问题就是我们数据挖掘大作业的报告需要交了，于是还得在这中间抽时间写报告。</p>
<p>当晚有了饭局，所以短暂分开了一会，吃完饭之后还是去了上交招生组那边，和他们打麻将去了（弥天大雾）。</p>
<p>26 号便是简简单单地去学校摆摊，期间遇到了音游群的各位，结果就和他们顺势在上交的摊位旁边，支起来了一个姜中音游群摊位。简单拿着迪拉熊、Arcaea 的碟和 Holder 宣传，当然意料之中的就是没多少人来。</p>
<hr />
<p>26 号比较大的事情就是和很多的清北挂线毕业生聊了很多很多，其中有一位可以强基进北大数院，但是实际上也不能保稳，然后强基还不能转专业。我和他以及他家长提了很多次如果不能转专业就意味着那些数学本科转金融、计算机的捷径不存在了，必须要近十年完全贡献给理论数学，这个耐心要有。而且我也和他提过多次北大数院的竞争，如此云云。</p>
<p>虽然其实我自己感情上不是很想他来北大遭罪，但是考虑到在这样说太多毕竟会和高中的利益冲突，和他家长内心早就拿好的决定冲突，我也便悄悄退出讨论了。</p>
<p>感觉这一届我们高中说实话，特高分层实在是被腰斩了。还以为他们会发挥稳定的，谁知道只有一两个裸分上线，也不知道哪个环节出现了问题。</p>
<hr />
<p>另外一个有点奇妙的事情就是，在和同学们交流完了，自己数据挖掘的报告也写完了之后，我回到上交招生组找 Sakana，正好她在和一个学妹说绿格实践的事情。</p>
<p>怎么说呢，有的时候听到这些东西就不由自主地开始回想到一年之前那段不堪回首的经历，虽然我现在也已经不太在意 Sakana 的交友问题（毕竟她先是独立的人），虽然早已经安慰好自己，虽然早就和她平稳地又度过了一年，平凡地庆祝了四周年。</p>
<p>但是一年前，无论是当时刚得知 Sakana 对我心灰意冷，自己也愧疚于三年前的冷漠，还是之后无理取闹地将他们一群人拆散，还是因为搞得 Sakana 当时也混乱不堪而自责。总之一年前的那一次情感的崩盘，即使已经似乎修复了，但是依然在一些时候，回光返照。我还是会有时在梦中体会到一次又一次失去她的信任的恐惧。</p>
<p>一年前的那些事情，搞得我即使已经是现在还是时不时神经紧张，今天在听到那些字眼，还是会出现心头一紧的生理反射。其实 Sakana 也是，今晚我和她一提到这件事，她很快就在和我说自己已经和他们没有联系了，她也被我折腾到形成了属于她的条件反射。</p>
<p>其实只要把这件事掩藏起来，实际上就和什么都没有发生一样，我和 Sakana 的关系确乎也在这一年随着把这件事情彻底敞开谈了之后回到了正轨。</p>
<p>但是这件事，确确实实地给我和她，带来了一些感情上的禁忌。</p>
<p>虽然似乎一切都不会是尽善尽美的，都可能会经过这些折磨，但今晚，确实还让我感觉我的感性还是脆弱的。</p>
<hr />
<p>但明天就是实习的入职仪式，最近还是可以找 Sakana 随便玩玩，自己的生活依然是在正轨上，倒也，没有那么多可以担心的事情。</p>
<h1 id="section-18">2022.06.27</h1>
<p>今天直接就是在家睡了一整天，因为入职仪式也没有说什么有用的信息，我 mentor 也一直没来找我，所以我就无所事事了。</p>
<p>晚上正常去吃了点饭，就回来睡觉了。</p>
<h1 id="section-19">2022.06.28</h1>
<p>最终我的 mentor 还是说好了安排，简而言之就是不查考勤，只要每周汇报就可以。然后现在安排的任务就是学一些自动驾驶方向的基础概念。说实话应该不太困难。</p>
<p>但是我的图形学和实验室那边的任务似乎又搁置一段时间了。</p>
<hr />
<p>今天和 Sakana 一起去了星巴克学习，但这个人，先打了两个小时的 PvZ（大雾）。</p>
<p>然后晚上就回泰州了，和家里人交流了很久关于无论是我自己的未来还是我弟我妹、姜中的未来等等奇奇怪怪的内容。总之还是有很多需要做的事情吧。</p>
<h1 id="section-20">2022.06.29</h1>
<p>今天应该说需要让生活回到正轨了，该找找我妹稍微聊聊，然后该安排一下自己科目三的事情了。</p>
<p>之后就应该是周一到周五做实习项目、实验室项目，然后周末练车的无聊生活了。</p>
<hr />
<p>经过交涉，科目三那边因为实在打不满学时所以没办法去学了。然后本来想着早点去北京见见导师的，结果因为政策混乱也暂且没有什么去的想法了。</p>
<p>今天图形学很努力在做了，但是实在是没有什么推进，真的不想写报告。</p>
<hr />
<p>我现在也渐渐发现了，我感觉我一到暑假这种没有什么事情占着我的精力的时间段，我立刻就会陷入一种极度敏感的状态内，很容易因为各种小事变成一种郁郁寡欢的情感。这个时候只要有点不太顺心的外部刺激，可能就会出现一年前的情感崩溃。</p>
<p>我不太明白这到底是什么缘故，我感觉我就像依赖着精神药物才活着那样的瘾君子一样，只要不沉浸在忙碌之中，就全身不自在。</p>
<p>仿佛除了把我的生命贡献给无休止的折磨之外，我就找不到什么特别的意义一样。</p>
<p>好像一年前我就已经得到了这样的结论。</p>
<p>就像今天晚上我处于这种状态，仅仅是因为 Sakana 回消息晚了一点点都有可能导致一瞬间堵了一下那样的感觉。但是我先前在通宵做大作业的时候，连续两天和 Sakana 一共就说了两句话也丝毫没有什么影响。</p>
<p>然后因此打开了一年前的日记，开始独自回味当时的混乱。万事万物总归会奇妙地让我重新回到那一个深渊。</p>
<p>当时的事情仿佛是完全解决了，但是也不知是我自己的担惊受怕还是我自己所谓的病态的完美主义，总认为还存在着什么，还有什么没有做到，还有什么问题没有解决，还有什么结没有解开那样，做着无止境的自我反思。</p>
<p>似乎有人提到过放弃一切事物都存在简单完美的解决方案这样的思想是成熟的标志，学会接受、学会隐藏、学会平衡是最终的目标。但我还偏偏和那些做基础数学的人一样幻想着总有一天所有的悬念都会揭晓，所有的不安都有结局。</p>
<p>我还是不是很懂。其实从今年五月被徐昆拒绝之后，似乎我的心态都有这样的感觉。</p>
<div class="note info no-icon"><p>随着自己暗示着自己一年前的混乱并没有解决的时候，那种熟悉但令人恐惧的不安再一次席卷全身。</p>
<p>先尝试着自己挣扎吧。</p>
</div>
<h1 id="section-21">2022.06.30</h1>
<p>今天因为组会暂停，于是拉着 Sakana 和我的同学们打了两个小时左右的牌，我被她吊着打（确信）。</p>
<p>然后快速干完了图形学的报告，于是大三下学期的所有课程我都完成了，下面就是等待出成绩，只要没有什么很明显的大问题，我这个学期总之是平稳地过去了。</p>
<p>下面就是白天做实习的事情，晚上看实验室的事情，两边都是每周开会，所以还是需要稍微注意注意。</p>
<p>七月份了，可以开始迎接新的自己了。</p>
<h1 id="section-22">2022.07.01</h1>
<p>今天开始干实习和实验室的锅了。</p>
<p>然后顺理成章地摸了一天的鱼。</p>
<h1 id="section-23">2022.07.02</h1>
<p>今天主要是在看强化学习入门，然后和 Sakana 因为她摸鱼产生一点点摩擦。</p>
<p>强化学习也就看了还没有和深度学习结合的部分，感觉很 make sense，但是好玩的就是遇到了“狼一头撞死”这样的笑话。</p>
<p>那个笑话的意思大约就是作者需要训练一个狼去捉羊，但是那只狼好像不怎么聪明，一直捉不到羊，于是作者加大了捉不到羊的惩罚，结果发现狼一出生就会直接撞死在石头上避免惩罚。所以作者在感叹人工智能都会拒绝内卷。</p>
<p>而我今天要训练的是一个走迷宫的模型，地图上有两个地狱，遇到就会有惩罚，有一个天堂，遇到就会有奖励。去天堂需要稍微绕路，去地狱出门就是。但是我用的那个教程上他写的代码框架里面，有个问题，就是当模型在角落的时候应该缩小决策空间让模型不至于不动（比如在左上角的时候就不能作出向左走的决策），但是他没有，这就导致训练出来的模型如果没有碰巧在随机走步的时候到达过天堂留下正向反馈，那么他就会直接缩在角落避免进入地狱。</p>
<p>只能说人工智能还是会帮助我们发现一些奇怪的思维盲区，人工智能还是比我想象的稍微聪明一点啊。</p>
<h1 id="section-24">2022.07.03</h1>
<p>今天主要陪 Sakana 去了，简单把之前没有逛过的万象城简单逛了一下。</p>
<p>不过今天也顺手第一次去玩了舞萌 DX，不过不得不说迪拉熊真的好好玩。</p>
<h1 id="section-25">2022.07.04</h1>
<p>今天说实话倒也没有什么很好玩的事情，首先是一大早就要去姜中找孙校长有事情，没有交通工具也只能走路，夏天十点的太阳就已经非常让人难受了。</p>
<p>中午回来吃饭，想着下午好好看看 DQN 的，然而实际情况是吃完饭想着先打一把牌应该没问题，结果是越打越困，从坐着打牌变成躺在躺椅上打牌，最后直接爬到床上去了，熬到了南四局结束之后，直接手机一扔不省人事睡着了。</p>
<p>一路睡到了快四点，而晚上本来就约好了和 Sakana 去剧本杀，于是草率看了两眼 DQN，也就要准备去吃晚饭了。</p>
<hr />
<p>话说我这个暑期实习真的是让人一言难尽，mentor 一直在奇奇怪怪地摸鱼，我还要绞尽脑汁编日报，一点活都不给我做，我倒也真的一直没干什么事情。</p>
<p>然而这里就有一个问题，合同上说的挺明白的，实习工资会有 280 一天，总共有八千多的实习工资。但是 HR 也说得挺明白的，如果无法确认考勤，就会以旷工停发工资。现在在北京的同学已经可以去公司打卡上班了，但是我这蹲在家里的就比较难受，毕竟八千块怎么说都是钱，而且自己也有换平板的计划。</p>
<p>去问我 mentor，他说不知道，去问我 HR，她倒先站在高地说了我一通要讲诚信，考勤这件事我们看得很重。弯弯绕绕说了一堆，我都没明白我这个考勤怎么办。</p>
<p>虽然最后折腾到了结果，就是走考勤申诉，只要 mentor 认可，就可以按照到班计工资。而我那个 mentor 确实也比较不管我，所以这一关倒是很顺利地给我过了。</p>
<hr />
<p>晚上剧本杀挺难说的，先是 DM 就是我姐，然后就是，还没开打呢，又被老孙一通电话叫过去做招生工作去了。</p>
<div class="note info no-icon"><p>我一个清华的学生，为什么要掺和北大和交大之间的招生问题.jpg</p>
</div>
<p>不过反正就是到处找人问政策情况，然后期间老孙老邱都来打听我做工作情况，和学生家长、本人也聊了一些。</p>
<p>不过最搞我的就是，这人十一点多都没给我准信。他只要给了，我这个工作就能交班结束，但是显然，不能。</p>
<p>然后这人，我一点半回了个收到，他说他当时睡不着。</p>
<p>虽然我也很能理解学生这种三小时决定未来七八年的紧张和不安，但是，我着实是，作为编外人员到处玩的个人，比任某这位编内人员都忙的多（没有黑任某的意思，他今年很认真了，确实）。</p>
<hr />
<p>晚上挺郁闷的，正事也没做，这就导致我明明第二天约好了去打街机也不安分，晚上也没玩上。</p>
<p>这下就我没打过线下剧本杀了，人生体验缺失一大块（确信）。</p>
<hr />
<p>郁闷就去喝酒呗。</p>
<h1 id="section-26">2022.07.05</h1>
<p>反正就是打了一天街机。</p>
<p>回来还想着好好把 DQN 给看完，不过我倒是，很不能适应 Tensorflow，为什么有人要用 TF 写代码啊，好好用 Pytorch 皆大欢喜了好吧。</p>
<p>但是牢骚归牢骚，TF 学不会 DQN 学不会，小心学长把你扔出实验室。</p>
<p>困了。</p>
<h1 id="section-27">2022.07.06</h1>
<p>出去干活终究是一点效率都没有的，而且琢磨比较烦的东西终究还是要一个人坐着好好想才行。</p>
<p>昨天暴打迪拉熊的后果就是今天一整天都没有精神，只能靠浓缩咖啡顶着，艰难地看完了 DQN family，写完了 demo 代码。说实话有点觉得自己学习能力怎么变得这么差的感觉。</p>
<p>真的，劳累的时候确实有一点令人容易陷入 emo，即使实际上一切都很好。</p>
<p>迅哥哥说准备回北京了，我其实也有点想回去，但是回去就见不了 Sakana，一定程度上还挺受限。但是回去见导师确实也是一件需要准备去做的事情。</p>
<p>又有点担心 Sakana 太摸鱼了，但怎么说呢，其实我也不想说太多吧。</p>
<p>已经答应了明天尝试用 Pytorch 写一遍 Pensieve-DQN，既然答应了就得写出来吧。</p>
<h1 id="section-28">2022.07.07 - 2022.07.08</h1>
<p>两天都在学习，但实际上没有什么特别的产出，Policy gradients 看了好长时间了，也还没有把代码写出来。</p>
<p>心里关于 Sakana 还是有点没有越过去的坎。</p>
<p>还是很嫉妒他们一起去过的沙漠，真的，心中就仿佛有这么一道难以逾越的城墙一般，每次想到这件事情，便是懊悔、内疚、嫉妒、自责。</p>
<p>所以想带 Sakana 一起去旅游的冲动，一直是有的。</p>
<p>但我真的并不是什么有趣的灵魂，我的朋友也是，没有那种能谈笑风生或者安排精彩的旅程的能力。</p>
<p>怎么说呢，其实再不解决这个问题我只怕后续更加失衡。</p>
<h1 id="section-29">2022.07.09 - 2022.07.14</h1>
<p>说实话毫无特色的一个星期，每天就是起来之后干活，之后无聊吃完晚饭，然后继续干活。</p>
<p>最近最烦的事情就是每天晚上都会有饭局，这样就让我晚上可以自主支配的时间巨大缩短，更加没有意思了。</p>
<p>实习那边交掉了一份 demo 代码，得到了认可，还算不错。但是实验室这边的进展一直缓慢，正在考虑到底怎么做比较好了。</p>
<p>妹妹从南京回来快一个星期了，除了 14 号带着去了一趟万象城看看电脑和 iPad，我自己打了一小会滴蜡熊之外，好像也没有什么可以叙说的事情了。</p>
<p>Sakana 这几天一直在练车，完全没有什么可以交流的时间。所以我自己要不还是好好干活吧。</p>
<h1 id="section-30">2022.07.15 - 2022.07.17</h1>
<p>现在有点不太想写日记了，日记已经好几天没好好写了，但其实也和这几天没有发生什么大事有关系吧。</p>
<p>15 号是东方群的聚会，还是日常的麦当劳自闭角见面，下午打麻将，顺手还打了剧本杀，晚上小菜园吃完饭，去唱 K。</p>
<p>16 号没有发生什么事情，单纯在睡觉，非常无趣，晚上去了中骏世界城转了一圈，打了打舞立方和台球，然后步行四公里回家。</p>
<p>17 号上午去练科目三了，结果回来巨困，睡了一天。</p>
<p>这一周因为无穷无尽的应酬其实折磨得有点难受，不过现在已经答应了不会轻易出门吃晚饭，这样还是不错的。然后自己也应下来了科目三的事情，尽量七月底能拿到驾照，解决掉一件事情还是不错的。之后和黄天驰学长交流还算顺利。</p>
<p>下周还是赶快做事情，实习的事情，实验室的事情，抽象代数和日语再咕咕咕一下应该也没有什么事情。</p>
<p>八月，空出来享受一下暑假。</p>
<h1 id="section-31">2022.07.18</h1>
<p>做了一整天的事情，大概就是一直在学 Actor Critic 算法，顺便把之前 Policy Gradients 不太清楚的部分给弄明白了。</p>
<p>摸索了一下 B 站直播，播了十个小时左右，发现还挺好玩的。</p>
<p>今天算是做了不少事情，收获还是不少的。</p>
<h1 id="section-32">2022.07.19</h1>
<p>做了整整一天的事情，确实很有收获。PG、A2C、DDPG 都差不多整明白了。之后又去了万象城，吃了饭打了滴蜡熊。</p>
<p>但其实并不太开心，大概是太劳累了，然后被 Sakana 一句话气到了。</p>
<p>说实话我还是不是很明白我自己有的时候的一些思维回路，确实挺奇怪的。</p>
<p>但是话说回来，好想找 Sakana 玩，然后这个时候就会有点敏感于 Sakana 有的时候的一些玩笑，然后陷入一些很奇怪的郁闷之中。</p>
<p>想找她，但是这几天我上午练车，她下午晚上练车，这就非常烦。</p>
<h1 id="section-33">2022.07.20 - 2022.07.22</h1>
<p>这三天由于没有什么特别的事情想要做，于是就一直在干活。先是推了一下 RL Tutorial，之后推了一下实习那边的 Minkowski Sum Demo，然后今天又回来推 RL Tutorial。</p>
<p>科目三练得马马虎虎，最大的问题其实是方向感很差，真的不是很清楚应该怎么打方向盘，但总之随便弄弄过了拿本就行，我也不指望近几年内我能用机动车通勤。</p>
<p>说实话认真干活反倒给了我一种安心感，之前赶期末的时候也是这样，在忙碌的时候感到安心。</p>
<p>不过现在，已经不知不觉快七月底了，暑假居然也就这样过了快两个月了。想想当时五月底仓皇出逃，到现在这么长的时间里，居然也仅仅是干了这么点事情，反倒有点自嘲的意味在。翻看之前的日记，发现七月份的日记竟然是那么地粗糙，一时间回忆不起来自己的七月在干什么，就好像每天都是同一个模板里翻来覆去而已。</p>
<p>昨晚看到了原先 Sakana 社团的某人的恋爱一周年纪念说说，想到去年这个时候他们在沙漠确定了关系。</p>
<p>当时翻看了一些去年的日记，当时自己应该一直在一种混沌之中，日记也总是混沌的心理推论。</p>
<p>不过去年有小学期，所以日记到七月底也就匆匆结束，其实要是有当时八月那种学业压力和心理压力并存的一些日记就好了，至少我就能更清晰地回忆起那段至暗时刻的一些细节。不过当时的自己确实也没有心情去记录那些烦心事，也算是正常。</p>
<hr />
<p>倒是现在想起来自己图形学的技能引导文档没写，现在还想把自己的 RL Tutorial 贡献给技能引导文档。</p>
<p>也真的是应了 Sakana 的那句话，“总是喜欢在最忙的时候继续揽活折磨自己”。</p>
<h1 id="section-34">2022.07.23 - 2022.07.24</h1>
<p>摸鱼的周末，周六没练车，随便做了一点事情就去姜堰了，结果 Sakana 有大作业没办法出来，就喊了东方群的人去打舞立方和唱 K，就这样也一路从下午六点玩到了半夜十二点。</p>
<p>周日练完车吃个饭滚去万象城打 maimai 了，本来是想着遇一下 Sakana 的，结果还是没遇到，因为她要赶末班车赶快回家。</p>
<p>然后再一次成功因为忘记交实习报告被实习群点名批评，但反正已经迟交了，那也就慢慢写了。</p>
<p>这周最后一周在驾校了应该，然后也应该是实习的倒数第二周了。其实反过来看一下我实习做的事情，真的没什么含金量，不过这也是好事，大家一起当混子就很舒服。</p>
<p>这几天稍微加快点做事情的进度吧，实验室那边还是要做做。</p>
<h1 id="section-35">2022.07.25</h1>
<p>周一，稍微干了一点点事情，但实际上还是被 PPO 卡住了，没有钻出来什么有用的东西。</p>
<p>今天主要是找到了姜堰有一家主机游戏体验店，预约了周五的双人位打算和 Sakana 一起去。</p>
<p>其实还是有一点想早点去找 Sakana 的，但是最近的事情还是比较多，科目三也没完全弄好。</p>
<p>八月吧，还是等到八月最后再安排安排吧。</p>
<h1 id="section-36">2022.07.26</h1>
<p>因为学时没有打够的原因，科目三不得不到八月三号才能考，所以还得在驾校折磨一段时间。</p>
<p>然后勉勉哥在约着八月去南京打街机，所以现在也就准备安排着去南京的规划。</p>
<p>湖中很早之前就在说八月可以去广州逛逛，但现在也没什么下文，所以暂且也还什么都不知道。</p>
<p>迅哥哥今天也来催了一下 THUInfo 的培养方案功能，所以说还是要准备开工了。七月最后一点时间，好好用好吧。</p>
<h1 id="section-37">2022.07.27</h1>
<p>周三，接到了 FL 打算周四去回学校的消息，于是想着也可以去找找老邱，就和他约定一起去了。</p>
<p>之后想到既然已经去了姜堰，为何不把 Sakana 喊出来呢，于是又约起来了周四的局。然而工作日实在是找不到多少人陪我们玩，最后也不过凑齐了四个人勉勉强强一桌麻将。</p>
<p>最后还真的决定在麦当劳打麻将，我甚至还借到了一副日麻牌。</p>
<h1 id="section-38">2022.07.28</h1>
<p>早起练车，效果还行。</p>
<p>中午赶忙跑去应酬，敷衍过了之后就去找 FL 进学校找老师。和邱聊了大概半个下午的样子，主要还是目前我们在大学里的情况以及对后面姜中弄竞赛的一些想法。</p>
<p>现在姜中打算把竞赛在强化班搞成正规课程，有月考有期中期末，纳入强化班考核。这样搞我觉得是可以的，但是问题是老师资源可能真的不够，毕竟现在也不过招到了一位南大本科的老师。</p>
<p>晚上遇到了 Sakana，四个人打了一个半庄之后就觉得无聊起来，最终还是去了 KTV。</p>
<p>比较好玩的事情是，即使 Sakana 事先说打算闭麦不唱歌，最终还是唱了一些，但是 FL 是真的一点没唱，在 KTV 里面硬生生玩了三个小时手机。</p>
<h1 id="section-39">2022.07.29</h1>
<p>和 Sakana 去约好了的主机游戏体验馆，9.9 双人玩一下午的优惠只有七月底有了，八月就是原价，所以得快点去。</p>
<p>打了 A Way Out，但是实在是太长了，一下午六个小时两个人没有打通，但是其实也接近通关了，卡在最后一点点的枪战上。</p>
<p>晚上滚去看《独行月球》，说实话是个不错的电影，但是另外一方面，他很想带一点点的情感戏，又想带一点点的宏大叙事，还想维护住喜剧主线，这三个混杂在一起，说实话就导致一些桥段不伦不类的。不过瑕不掩瑜，总体而言是个好电影。</p>
<h1 id="section-40">2022.07.30</h1>
<p>周六，本来是玩了两天后应该好好做事的一天，结果是上午练完车太累了直接睡了一整个下午，之后借我麻将朋友说要拿回麻将，结果是晚上又去麦当劳打了一晚上麻将。</p>
<p>确实是有那么一点点怠惰了。</p>
<h1 id="section-41">2022.07.31</h1>
<p>一周的事情压到最后，终究是要给出一点点的交代，于是上午滚去高港看完科目三的考场之后，回来也只能草草睡一个短短的午觉便需要赶快爬起来把之前实习的事情拿起来赶快做。</p>
<p>今天有点乱，其实。首先是早上科三看考场实际上出了点问题，方向感不好，不知道怎么转弯的问题依然存在，现在有点担心我三号到底能不能考过了。</p>
<p>下午和 ZSJ 他们约了约，感觉可以带 Sakana 去浙江玩，一番折腾，大致的行程也规划差不多了。</p>
<p>结果最大的变故是原来和勉勉哥打算周末南京玩一圈的，结果勉勉哥没有时间，这就导致我有可能取消南京的行程直接去浙江。</p>
<p>不过去旅游终究还是要基于我三号能拿到驾驶证，在这之前好好练科三好好背科四，还是挺烦的。</p>
<h1 id="section-42">2022.08.01 - 2022.08.02</h1>
<p>八月的最初两天过得非常平凡，几乎没有什么特别的事情发生，一直在做实习那边的事情。</p>
<p>说实话还是高估了自己解决问题的能力，我本以为只要一两天就能解决掉这个问题，结果连带着摸鱼这个问题做了我整整快四天。</p>
<p>浙江旅游的计划已经差不多固定下来了。七号出发去宁波，晚上在湖边转转，八号看一圈市区景点，打打牌，九号去象山，玩到十一号回来。</p>
<p>然后明天要考科目三四了，希望这次能顺利拿到驾驶证，这样省得回家还要折腾这种无聊的事情。</p>
<h1 id="section-43">2022.08.03</h1>
<p>今天去考科目三，定的是九点的下半场，本来想着早点考完可以回去睡一觉再去考科目四。然而事实情况是，我很早就被拉去考场等考试，但是运气实在太好，抽中了这一批的最后一个，所以非常顺利地上午没轮到我，只能下午再考。</p>
<p>下午我是第一个考试，然而遇到了一个非常不想遇到的情况，两辆考试车同时起步而且我还是后面那个，结果就是我一直只能憋屈跟在后面，然后因为变道之后贴过紧被考官一个刹车带走了。不过还好，第二次顺利通过。</p>
<p>考完科目三，稍微等了一会就滚去考科目四，科目四很简单，小学思想品德题，随便做做就通过了，去等制证。</p>
<p>拿到驾驶证就算了掉一件事情了。</p>
<h1 id="section-44">2022.08.04</h1>
<p>七夕。</p>
<p>和我弟把 Sakana 约出来，先是蹲在星巴克自习了一下午，晚上本来打算去万达吃自助，结果可能是因为七夕的缘故，那家自助人爆满，要排号二十几桌，遂放弃。</p>
<p>结果是我弟喊着说自己太饿，没办法只能随随便便找了一家饭店，但问题就是，这家饭店评分真的十分差，而且确实饭菜相当不行。</p>
<p>晚上本来是没有什么具体安排的，于是就三个人到处逛，期间我们发现了原来要市民卡才能开的共享单车居然可以直接扫码打开，于是顺手三人开始骑车兜风，然而由于 Sakana 的电瓶车电量不够用，只能将她先送回去，我和我弟两人继续兜风到一点多才回家。</p>
<h1 id="section-45">2022.08.05 - 2022.08.11</h1>
<p>这一个星期大概是发生了很多事情的。</p>
<p>先是和 TTL 他们一起去游泳过夜玩游戏，看了《彗星来临的晚上》，帮 LCR 搭好了他的个人网站之后也就没做什么了。</p>
<p>之后就和 Sakana 去宁波了。</p>
<p>宁波玩的这一星期其实说实话很慵懒，就是那种起床吃个早饭然后慢慢悠悠规划今天应该干啥的那种假期生活。</p>
<div class="note info no-icon"><p>旅游本来就是用来放松的。</p>
<p>—— Sakana</p>
</div>
<p>于是在这样的方针指导下，我们宁波市内几乎只是去了一趟天一阁和宁波博物馆随便逛逛，然后和 Sakana 去东钱湖、韩岭散了一会步而已。按照一些旅游团的规划，这些地方完全可以一天就给走完，但是我们从七号到达一直到九号下午去象山，这快三天的时间也才逛了这些地方。</p>
<p>这种不紧不慢的步调，反倒很舒适。睡个自然醒，吃点早饭，和朋友打打牌之后规划午饭，下午简单逛逛，晚上等到天色渐暗温度降低的时候去晚饭然后散步，累了就回住处贴贴看番顺便点小烧烤外卖，很理想的生活。</p>
<p>九号去了象山，结果是快到晚上才到达，收拾完东西吃了个简单的晚饭也便睡了。十号赶去了石浦镇，去了海滩，玩了一些海边大家都会玩的一些娱乐设施，晚上啤酒烧烤一波之后又得赶回象山。</p>
<p>今天则是一点没玩，全在赶路，反倒是这几天里面最累的一天。</p>
<hr />
<p>要是说这次旅游留下了什么，除了一些照片、沙雕聊天记录之类的寻常之物之外，倒也是让我对旅游的组织方式有了一种新的认识，果然我这种人还是比较适应松散的时间表，那种要是实在不想去就不如在床上躺着的旅游，反倒有意思。</p>
<p>和 Sakana 玩得很开心，下回继续贴贴。</p>
<p><img src="/uploads/2022-summer-record/1.jpg" /></p>
<h1 id="section-46">2022.08.12 - 2022.08.13</h1>
<p>全都在写实习报告，最后写完了。</p>
<p>这就是，毫无意思的两天，写完了的话后面还有几件事情要做，比如说问问返校政策、去姜堰取回我的保险、处理之前的危险化学品、和 Sakana 贴贴。</p>
<p>后面实验室的事情，还是得好好推进。</p>
<h1 id="section-47">2022.08.14</h1>
<blockquote>
<p>最近 Sakana 有点冷冷的，感觉是回家开始重度手机游戏，不回我消息了。</p>
</blockquote>
<p>今天本来打算好好看 Sutton 的强化学习的，结果是没怎么推进，前面的 Introduction 部分实在是很烦，但是又觉得他会在里面写很多高屋建瓴的观点，又不想直接跳过，所以还是当成英语阅读理解算了。</p>
<h1 id="section-48">2022.08.15 - 2022.08.18</h1>
<p>最近写日记确实越来越怠惰了，主要是感觉已经没有什么很特殊的事情给我留下印象了。</p>
<p>不过随着暑假即将结束，我越来越感受到我需要好好把下个学期过好，卷卷科研这样的决心。</p>
<p>嘛，要不这个暑假记录就到此结束吧，已经正在规划回北京的事情了。</p>
<p>这个暑假确实过得比较充实，做了不少事情，但也玩了不少，回头看看暑假开始前的暑期规划，基本上还是完成了七八成的。</p>
<p>那么，就这样结束吧，Holder 要开始他的大四生活了。</p>
]]></content>
      <categories>
        <category>【生活记录】日记</category>
      </categories>
  </entry>
  <entry>
    <title>2023 秋季学期记录</title>
    <url>/2023/09/01/2023-autumn-record/</url>
    <content><![CDATA[<p>博士生涯正式开始了，还是和之前一样，开一个日记来记录自己的生活吧。博士的第一份事情应该是和吴成磊学长一起做一个云游戏相关的系统，希望能至少攒出来一篇 paper。</p>
<span id="more"></span>
<h1 id="section">2023.09.01</h1>
<p>今天是新生报到，说实话就是去领一堆杂七杂八而且不一定有啥用的东西，但总之得去一下。另外，今天做的最主要的一件事情就是回绝了实习那边的事情，一方面是导师不是很想让我做那种“没有营养”的事情，一方面自己也想全神贯注投入到博士生活之中。</p>
<p>之后现在手上就剩下 AI 协会那边需要做一个 Tutorial，然后软工助教可能也得开始做学期初准备。此外，实验室这边暂且是先看论文，以及要准备 8 号左右前往温州的 CHINANET 会议。</p>
<p>突然有种对未来的憧憬感了，虽然第二天不得不早起前往开学典礼。这种形式化的东西什么时候才能结束啊。</p>
<h1 id="section-1">2023.09.02</h1>
<p>早上是研究生开学典礼，想当年本科的开学典礼还算是认真参加的，但是现在老油条了就真的不高兴听那些空泛的讲话，于是就在分会场里默默睡了一大觉。睡醒了就去吃午饭，吃完了回来睡了个午觉又要去下午的系开学典礼。系开学典礼倒是比较文明，四十分钟就结束了，然而这个时候我已经困得受不了了，回去还得接着看论文。</p>
<p>一想到后面好几天都得早起参加这样那样没意思的活动，瞬间就失去了乐趣。</p>
<p>今天实在是困到生活不能自理，晚上吃完饭更是一点精神都没有，正在思考早睡早起的可能性。</p>
<h1 id="section-2">2023.09.03</h1>
<p>结果今天下午全在打牌，连今天是魔法未来放映会都忘掉了，只能看着合照羡慕。本来想着下午人多，我可以在等待桌子的时候看会论文，结果莫名其妙多来了几个人就变成了八个人开两桌连打，这下是一下午啥事都没干了，不得不赶快开始赶进度。</p>
<p>晚上还是正常看论文，而且毫无进度。</p>
<h1 id="section-3">2023.09.04</h1>
<p>还是无聊的入学教育，下午三点结束之后先去实验室和师姐简单规划了一下去温州的行程，定了机票酒店，然后让导师开了一下假条。搞完这些我发现我困的不得了，于是莫名其妙在工位上睡着了。</p>
<p>睡醒后，没忍住，骑车去了上地出勤，没想到的是没几把就鸟了 Sqlupp。当晚，一时兴起开了亚特兰蒂斯，结果 touch 突然开窍了，从 S 直接飞上鸟。晚上回去学习了一下谱面确认，决定明天去推鸟加。</p>
<p>今晚其实还有麻将个人赛海选，随便去打了一下，吃三不痛不痒回来了。</p>
<h1 id="section-4">2023.09.05</h1>
<p>早上签完到立刻出勤，打了一下午终于鸟加了亚特兰蒂斯，随后吃了点分上 15600 了，还顺手把标奶推了一下。总之由于五道口下午人都不算多，所以打得还是很爽，然而右臂又开始疼了。</p>
<p>在机厅看完了第一篇论文，后面还有三篇，慢慢看吧。</p>
<h1 id="section-5">2023.09.06</h1>
<p>今天是体检，大概是最麻烦的事情，因为要起大早而且还不能翘。早上困到什么程度呢，就是抽完血之后我直接出现了晕眩的现象，立刻吃了饭回去睡觉去了。下午随随便便选了选课之后做完了体检剩余的项目。</p>
<p>晚上听说空调要回上地出勤，于是就溜过来了，但是今天莫名其妙上地全是人，这我就有点不太理解了。不过由于昨天推完分了，今天打了疫苗也不太方便大开大合，所以也就随便了，继续机厅看论文。</p>
<h1 id="section-6">2023.09.07</h1>
<p>今天组会，简单混了一下，组会之后就直接去出勤了。说实话这几天除了看论文就是研究怎么出勤，似乎生活确实没啥意思了。日记也不知道写什么，论文阅读写到笔记里面，出勤研究写在备忘录，除此以外真的啥都没有了。</p>
<p>就先这样吧，明天还得去温州。</p>
<h1 id="section-7">2023.09.08</h1>
<p>早起赶路前往温州，倒了两趟飞机，然后倒地铁公交才到了会场搞完签到，随后办了入住后就决定去机厅看看。离酒店最近的机厅是第一回合，这个机厅哪里都好，问题在于来这里出勤的人怎么都这么强，大量的 16000 rating 和各种 15500+。然后，今天由于赶路很累，体力歌打不动，本来想着推一推跳拍练习曲，结果把 Strange Bar 打手癖了，太难绷了。</p>
<p>晚上压了会马路，感觉温州这个地方还是福建味道太浓，和传统想象中的浙江还是不太一样。</p>
<h1 id="section-8">2023.09.09</h1>
<p>早起开会，然后听到一半睡着了，快到最后的时候想着早点去吃饭人会少一点就先溜出去了。不得不说，这家酒店的自助午饭确实不差，虽然保留了大锅饭咋做都不会太精致的缺点，但至少调味什么方面没什么大问题。然而搞笑的是，我都吃了两盘子了，我导师突然喊我们出去吃饭，这就尴尬了。之后我导师把我们带到了一处居民区小店，吃了顿海鲜。应该说还好是海鲜，海鲜这玩意不顶饱，要是吃什么烤肉糯米团子，我估计已经撑死了。</p>
<p>下午听了个大模型的论坛，感觉没什么新意，把 PPT 放给黄老师贾老师他们讨论，他们也觉得很没意思。晚上吃完饭后去了另外一家机厅，这家机厅明显是新机子而且键很硬，主要的好处是这里新手很多，可以心态放平了。然而几天出勤实在是难受，虽然解决了 Strange Bar，但是我 Sqlupp 打到了 100.47% 之后卡住了，怎么也鸟加不了，于是决定还是以后再来。</p>
<p>晚上把教师节礼物买了，和学姐商议了一下决定睡过上午无聊的主旨报告，洗了个澡，舒舒服服睡过去了。</p>
<h1 id="section-9">2023.09.10</h1>
<p>中午才起床，决定下午看论文然后晚上出勤解决一下 Sqlupp。结果是下午也没怎么看论文，早早出门出勤去了。但说实话，这次出勤有点难绷，因为推 Sqlupp 最后鸟加的时候确实着急了，打得有点拆，被有点严厉地训了一顿。倒也不是说不承认，只是这种被陌生人劈头盖脸一顿说真的难受，虽然已经知错就改了，但还是觉得是不是指出的方式能优化一下。然而毕竟我也没立场，就这样吧。</p>
<p>晚上到酒店，学姐和我说她被拉去和导师吃饭，气氛一度十分尴尬，很后悔没和我一样提前开溜。不过明天就回北京了，再说吧。</p>
<h1 id="section-10">2023.09.11</h1>
<p>今天就是赶一整天的飞机，飞机还延误了三四个小时，晚上靠近十一点才到宿舍，赶快洗个澡第二天还得接着去新生教育。</p>
<p>赶路真的没啥好记录的东西。</p>
<h1 id="section-11">2023.09.12</h1>
<p>今天主要是和学长约了讨论腾讯的项目，于是速速赶了一下论文就赶过去开会。会上大概聊了一下质量感知的云游戏系统的大概想法，交流了一下之前的四篇论文。经过这次讨论我也差不多掌握了一下要做的事情，但是还是没有什么头绪，也不知道接下来做什么。</p>
<p>开完会就是出勤，主要是打白龙，运气比较好，很快就鸟了，但是鸟加太难，一点手感都没有。</p>
<h1 id="section-12">2023.09.13</h1>
<p>一样的，水掉新生教育，交掉报销材料之后就去出勤了。先去的五道口，结果是啥都没打出来，人还越来越多，于是速速跑去上地。结果在上地随手就解决了 Freedom Dive 和僵尸娘的鸟加，吃分吃了个爽。</p>
<p>这几天说实话事情还不少，助教的事情、AI 协会的事情、实验室的事情，一个不少。然而还是出勤，真的是无药可救了。</p>
<h1 id="section-13">2023.09.14</h1>
<p>今天依然是出勤，但其实我已经不是很想出了，然而很早以前就约好了，也躲不掉了。结果也和想的一样，完全没有手感，打什么都打不上去。加上晚上学长急急忙忙找我开会通知如果要去腾讯实习的话要和他组长做个小面试，加上第二天得开组会，加上周六得讲 AI 入门，总之就是事情一下子全都涌上来了，正好最近没什么能打的分，干脆就好好学习吧。</p>
<p>晚上的会的意思就是说现在的项目因为要投 5 月的 NSDI 并不是很急，所以把打算投 2 月 SIGCOMM 的另外一个项目优先级拉上来了。这个项目大概就是做显示器一侧的一些 jitter 优化，但是因为学长说得急急忙忙的，我也不知道究竟是个什么算法架构，走一步看一步吧。</p>
<p>其实现在比较担心的是我到底能不能接下来这个项目，因为学长一直在和我说之前有个硕士来他那边做项目，结果他组长发现这个硕士得手把手教才能做事，很不满意。然而我自己就有点觉得自己也得手把手教，毕竟之前还是没什么科研项目经验，现在总之就是很害怕很害怕，不是很清楚能不能胜任这份工作，能不能再博一攒出来一篇 paper（即使不是一作）。</p>
<h1 id="section-14">2023.09.15</h1>
<p>组会，并没有发生什么很有意思的事情，简单讲了一下和学长那边的讨论进展之后就没有了。组会之后就是出勤，但是这次手感实在是太烂了，旋转木马和 MAXRAGE 都没有能成功出分，晚上陪坐标刷了一段时间紫皇帝，更是一点不会。</p>
<p>回去之后讨论了一下软工小作业的相关事情，把软工文档搞完之后回去做了 AI Tutorial 的课件，一直到五点才昏昏睡过去。</p>
<h1 id="section-15">2023.09.16</h1>
<p>不知道为什么今天很早就起来了，起来了之后直接去上地出勤了，毕竟昨晚练了一晚上的旋转木马。今天上地几乎一直保持着 12 人的规模，然而我还是尽力把旋转木马鸟加了，但是 MAXRAGE 还是没能解决。打到最后，手感几乎已经爆炸了，所以赶快退勤。</p>
<p>回去之后就是讲 AI Tutorial，这次讲座讲下来自我感觉也很不错，下面的反响也不错，感觉是 AI 协会的一个好开头，希望能蒸蒸日上吧。</p>
<h1 id="section-16">2023.09.17</h1>
<p>周日约了 V+ 群的群 K，结果我到场发现很多老面孔已经见不到了。其实也很正常啊，那些我熟知的八字班群友们该工作的工作，该被导师压榨的压榨，只有零零星星几个还有闲时间的才会来这里。</p>
<p>今天唱了不少，最满意的还是 From Y to Y，但是还是很遗憾没有人唱女高声部，导致演绎出来的效果还是差了一截。</p>
<h1 id="section-17">2023.09.18</h1>
<p>开学第一天，周一，按照课表的话早上有一门网络性能评估的课，下午有中国马克思主义，还挺忙的。好不容易早起之后赶快赶到教学楼，坐定之后听了两节课，结果发现和预想中的一模一样，这种课就是超级催眠。任教这门课的看起来就是那种老教师，语气绵软催眠，实在忍不下去了于是中途开溜，去五道口出勤了。</p>
<p>然而今天手感真的超级烂，加上五道口机子的机况本来就每况愈下，所以最后一点分也没出，只能匆忙赶回学校上下午的课。说到下午的中马课的话，不得不说刘恩至老师的课确实相当有意思。我对一门课的最高评价就是，“宛如平时闲聊一样”，也就是说一门课能够和闲聊一样让我释放压力，也没有说教感，又能够听故事增长见识，那无疑是优秀的一门课。而刘恩至老师的中马课一定得在优秀课程上榜上有名。</p>
<p>晚上就没有什么好说的了，点了一份外卖和零食，然后看了一晚上《孤独摇滚》，于是晚上就这样无聊地过去了。</p>
<h1 id="section-18">2023.09.19</h1>
<p>周二本来就和 hhh 约好了去吃烤肉，于是早上先去上地堵门出勤，本来想解决掉 MAXRAGE 或者 Revive the Rave 的，结果还是一个没解决，反倒是右臂的疼痛感加剧了。中午吃了顿鹤一烤肉，吃完后和 hhh 散步去新奥，中途聊了很多我们两人高中时期的经历，果然闲聊还是最有意思的活动。在新奥随便打了点歌就回去了，回去又是聊了一路，甚至之后直接去 hhh 宿舍接着聊。聊累了，就和 numen 一起联机打 Malody 4k，结果我好久没打，水平退化严重，连 v3 3dan 都没有过。</p>
<p>今天纯纯摸鱼了一整天，不过也还好吧，也没什么要紧事情。</p>
<h1 id="section-19">2023.09.20</h1>
<p>周三，本来是要早上起来去组合数学的，结果偷懒了睡回去了，然而一路睡到了一点十五。当时我在床上看到这个时间的时候立刻就想到了下午导师的课要迟到了，于是速速爬起来洗漱穿衣去上课。导师的课显然是没有什么要听的，都在他实验室打工了，这些基础再不会估计也就没救了。上完课补了顿午饭，就去实验室干活了。</p>
<h1 id="section-20">2023.09.21</h1>
<p>今天是生日，虽然好久没有为自己庆祝过生日了，然而今天还是尝试约了 hhh 和空调等人来吃晚饭，结果还是凑齐了八个人吃了烤串。今天下午就去了上地出勤，然而还是一分没推上去。晚上赶快去吃饭，结果还被店里面搞了一些社死活动，比如全店放生日歌之类的。怎么说呢，我还是不能接受这种活动，但是既然大家都看起来很开心的话，那我也觉得值得吧。</p>
<p>吃完饭之后继续去出勤了，结果发现自己打小歌的手感开始上来了，比如盘古、天火明命、南十字之类的，加上现在还是觉得自己基础不是很牢靠，所以最终决定回去刷 13+ 将，尽力先把底力提升上来，稳定性提升上来之后再去攻击 14，或许会有更好的效果。</p>
<p>晚上和 hhh 聊了不少，回到宿舍之后还是得稍微干点活，至少明天组会能够交差。</p>
<h1 id="section-21">2023.09.22</h1>
<p>周五首先是组会，组会之后自然还是出勤。</p>
<p>说实话我也有点觉得这样的生活是不是也没有什么写日记的必要，每天的行动路径基本一致，每天除了做实验室的一些事情就是出勤，也没有什么特别有意思的事情或者有意思的想法值得让我在日记里面写上一笔。</p>
<p>但是还是继续写吧，万一哪一天就突然有了想法想写下来但是苦于之前没有日记本呢。</p>
<h1 id="section-22">2023.09.23</h1>
<p>周末，早上起床先去置办了一些生活物资后去把之前的所有快递都拿了回来，包括买的鼠标键盘。这次为了尝试，买了一个静电容键盘，说实话静电容键盘的好处就是真的声音很小，用我的手劲都不会很扰民。然而相对应的有个很麻烦的事情，就是触发力度实在是太小了，我买的是 35 克触发的，这导致我手稍微刮到就足够按下去，而且我还有不打字的时候把手指放在键盘上休息的习惯，原来的茶轴机械键盘这种力度根本按不下去，但是静电容键盘就不行，这点力度就足够触发连打了。果然还是得花一段时间适应一下吧。</p>
<p>晚上还是偷偷摸摸去出勤，匆匆打了一个 Starry Colors 的鸟之后就回去了。之后是科协迎新，然而这一次我因为和大家实在是差了有些年头了（三年差不多了），所以也没什么好聊的，于是混了点吃的就走了。回宿舍之后就是打牌，打到晚上四五点钟才昏昏睡过去。</p>
<h1 id="section-23">2023.09.24</h1>
<p>今天是得赶快工作了，明天早上得早起去软工那边，下午还得和学长导师聊一下接下来的工作安排。然而今天工作了一天也没感觉到学到什么东西，反倒是人很累，也不知道这个书读了个什么名堂。</p>
<h1 id="section-24">2023.09.25</h1>
<p>早上赶早起床去软工课堂念 PPT，说实话光靠这点 PPT 也没办法教会他们前端，只能希望他们小作业顺利了。讲完之后迅速赶到工位开始继续看 WebRTC 源码，希望能在下午开会之前至少能够建立起来一个基本的了解吧。</p>
<p>今天开会讲了不少，主要意思就是目前算法已经在腾讯上线了，效果其实非常不错，然而这套系统想要写成论文还是欠缺一点有意思的背景，看起来比较像 WebRTC 的实际工程改进版，而非一个很有创新性的新系统。今天这次小会主要就是在讨论怎么去写这一篇论文，最后也没讨论出来特别有意思的结果。这次会后我问学长现在可以继续做什么工作，但似乎由于我还没有入职拿不到数据，实在是做不出来什么有意思的工作。学长绞尽脑汁思考一番之后和我说，“要不你去用我们的云游戏系统去玩玩原神”。这么说，以后我打游戏也算是一种工作了，有点奇妙。</p>
<p>另外一件好玩的事情就是，开完会后一位同学提醒我中马课上开始搞教学相长线下小测了，但我当时人还在实验室。于是我迅速打印了答题纸作答，写完后飙车把答题纸送到了教室，极限操作我还是有一手的。</p>
<p>晚上又去出勤了，结果就是 Starry Colors 手癖，完全没法打鸟加了。</p>
<h1 id="section-25">2023.09.26</h1>
<p>无所事事的一天，早上陪坐标堵五道口的门，中午去六道口吃牛肉火锅，下午去新奥出勤后回到上地继续出勤。</p>
<p>不过今天解决了 MAXRAGE，然后零零散散打了些别的小歌，鸟了 Mutation 和初音天地开辟神话，北琦玉也进入了射程范围。</p>
<h1 id="section-26">2023.09.27</h1>
<p>周三自然是一天的课程，起床之后去上了导师的课，上完课之后还是老老实实去出勤了。说实话总感觉读博之后，时间安排其实更加自由了，简单来说就是你不想干活的话也不会有谁来管你，这种自由度比本科更为突出。所以我遍历了一下之前的日记，发现还是出勤占据了大部分的时间，虽然说我感觉也不是没干活，但是仅仅从日记上来看的话大概我生活就只有出勤了。</p>
<h1 id="section-27">2023.09.28</h1>
<p>今天需要开一个软工的大例会，大例会整体而言还是随便开一下就可以的。这一学期我带三个组，比上学期带四个组要轻松不少。本来我以为反季选课的同学基础可能比较薄弱，但是我整体考察下来，感觉大家基础似乎比上学期我带的四个组要强了不少。</p>
<p>晚上已经订好了惠多港的酒店，然而我忽略掉了明天是中秋节的事实，结果就是不得不顶着最后一个工作日的人流挤地铁，三个小时之后才到达了目的地。经此之后晚上出勤的心态全无，但是虽然没啥心情，手感却还是来了，Revive the Rave 打上了 100.4，还顺手 AP 了红雷切。</p>
<h1 id="section-28">2023.09.29</h1>
<p>在惠多港出勤一天，基本上就是把 Revive the Rave 解决掉之后随便打，然后随手开了一把 LANCE 鸟加了。</p>
<p>出到一半还把 wyx 骗到了惠多港，他刷了一段时间 Sage 和 solips，晚上吃完饭就回去了。</p>
<h1 id="section-29">2023.09.30</h1>
<p>简单出了一下勤，但是随后就发现不对了，我右臂的疼痛越来越显著了。在这种状态下理所当然的一点分都没能打出来，随便打了点小歌吃了个饭就赶快回去了。晚上也没干什么事情，吃了个夜宵然后和舍友随便聊了聊就睡觉了。</p>
<h1 id="section-30">2023.10.01</h1>
<p>今天是国庆节，之前就已经和同学约好了今天去雀庄打牌，所以也就早起去了。但比较烦心的事情是，早上起床的时候接到家里人的电话，得知家里大概出现了一些小矛盾，虽然不是什么很有影响的大事，但总之是有了些烦人事。</p>
<p>打了一天牌也没什么收获，晚上回到宿舍就和家里人通电话直到深夜，等到挂电话的时候已经是凌晨五点了，于是在椅子上稍微睡了一会之后赶上六点钟来热水洗澡睡觉。</p>
<h1 id="section-31">2023.10.02</h1>
<p>昨天那种情况，今天理所当然起的特别晚，约了 hhh 去吃潮汕牛肉火锅，于是起床之后就去了。边吃边聊也就一路弄到了七八点钟，回到宿舍又已经是九点多了。想到先前希望国庆的时候能够做点实在点的事情，所以今晚还是稍微学点什么吧。</p>
<h1 id="section-32">2023.10.03</h1>
<p>今天一整天都没有离开宿舍，昨天说是打算认真学点什么东西，确实是认真学了一整天，然而是在学习日语的助词。不得不说这个语法点，语法学界至今自己还在吵架先不说，我自己实际上都还没理出来一条能说服自己的逻辑链。也正是因此，今天看了一整天的日语论文，看得头昏脑胀。这个时候我也在感叹，要是我读博的时候看媒体方向论文也这样上心就好了。</p>
<p>最近高老板去法国开 ICCV 去了，要是我还是大二大三的时候，应该会对这种事情无限向往，心想为什么我不能去。然而过了那段对自己要求过高的日子之后，现在只是叹息一声自己果然不适合学计算机，然后继续去看日语论文。</p>
<p>不过话说回来，我确实该学一点 WebRTC 基础了，最近最好还要和学长讨论一下什么时候面试，不然国庆之后我组会说些什么我都不知道。</p>
<p>以及最近突然很想在养好右臂之后去鸟加海澜之家，按照道理我现在应该要开始练习谱面确认了，然而还是很懒，一点没看，还一直在打德州扑克。</p>
<h1 id="section-33">2023.10.04</h1>
<p>昨天和 xjj 约好了晚上去吃饭，于是今天还是毫无作为地过完了下午然后晚上去吃饭了。吃完饭发现自己已经来到了领展附近，有点没忍住，破戒打 mai 去了。不得不说，很久没有出勤的手感真的是非常的烂，加上领展机子不是很适应，所以一点分都没打出来，除了把海澜之家鸟了，打到了 100.3。这下，海澜之家鸟加肯定要成为重要目标了。</p>
<h1 id="section-34">2023.10.05</h1>
<p>周四，本来以为国庆假期就能躲掉一次软工例会的，结果还是得开。不得不说，这一学期我带的几个组似乎基础真的都还行，三个组里面有两个组都已经能够写出一些页面来了，感觉大家动手速度比上学期真的快了好多。</p>
<p>下午开完会就和 numen 出勤去了，本来是说和他一起推海澜之家的，结果两个人都没有打上去，晚上只能遗憾退勤了。回到宿舍想了想，国庆多少什么事情都没有做，于是悄悄把组合数学作业给写完了，写完一看已经五点多了。</p>
<h1 id="section-35">2023.10.06</h1>
<p>今天基本上就是出勤，早上堵门之后以刷海澜之家为目标一直勤到闭店。当然，最后还是心想事成了，海澜之家如愿以偿鸟加。</p>
<p>随着海澜之家鸟加，我也来到了 15694，离 15700 的阶段目标也不过是临门一脚了，但是今天时间实在是不够了，于是也没能在今天内成功达成 15700。回来之后分析了一下旧底分，目前也达到了 7862，大概也就是集火攻击几首简单 14 的距离了。虽然还是想让万分最后一首是 14+，但是看起来暂且也没有哪个 14+ 进入目标，自己也不是很急，所以就随他去吧。</p>
<h1 id="section-36">2023.10.07</h1>
<p>今天就在宿舍里好好呆了一整天，昨晚虽然睡得很早，但是今天也硬生生睡到了下午才醒。下午昏昏沉沉吃了个饭之后继续摸鱼和摆烂，上床刷了会手机之后吃了晚饭，才想起来应该做点事情了。</p>
<p>结果一整天也是白白荒废掉了，不知道为啥最近的工作热情一直很低迷，始终处于一种反正暂且没找我那我就摆烂的态度。</p>
<h1 id="section-37">2023.10.08</h1>
<p>今天是周日，按照调休补周五的课，虽然应该是没有小测签到的，但我还是早起去上了数据挖掘。上午的课实在是有点坐牢，下课之后和坐标约了去五道口吃了顿饭，出了一小会勤，晚上去实验室坐了一会，主要还是和学长聊了聊项目的事情。</p>
<p>学长聊的意思大概是，最近还是主要学习一下 SIGCOMM 23 的一些云游戏相关论文，主要分析他们的用户实验都是怎么设计的。目前来看我大概率会被分配去做这篇论文的用户实验部分，论证画面撕裂问题在云游戏场景之下显得更为严重。虽然还是有点像触碰到一些比较核心的东西，但是似乎由于核心算法毕竟已经上线了，好像我也参与不了什么了。</p>
<p>只能一声叹息，可能我已经摆烂成性了吧。</p>
<h1 id="section-38">2023.10.09</h1>
<p>今天出勤，主要目标是白 FLOWER，结果不明不白地打完了鸟加打上了 15700，在这之后推了两把 Never Get Over，顺利鸟了之后鸟加没能拿下。晚上回来又开始摆烂。</p>
<h1 id="section-39">2023.10.10</h1>
<p>说是要好好学习的一天，不过下午也确实好好学了一下午，但是晚上涵涵过生日喊去吃饭，还是没忍住去了。结果几个人从下午五点开始一直玩到快凌晨五点，吃饭唱歌聊天啥的，确实比较欢乐。不过到宿舍了之后，又开始陷入那种我怎么啥事没干的 emo 循环，有的时候感觉自己还是太控制不了自己了。</p>
<p>于是先给自己定了一些小目标，希望能够尽快完成吧。大概就是两天内清掉目前手上的任务，其实手上真的没啥真的难的任务，只是自己实在是有点摆烂。</p>
<h1 id="section-40">2023.10.11</h1>
<p>今天就在工位上做了一整天作业，把最近的作业基本都清空了。然而现在腾讯那边依然是一点动静没有，这也快一个半月了，再不让我入职我都在怀疑我能做多少事情了，该准备 push 我学长了。</p>
<h1 id="section-41">2023.10.12</h1>
<p>周四开组会，实在是没有什么好说的，不过组会之后贾老师请实验室的各位去吃他舍友家开的火锅。该说不说，真觉得没多好吃，或者说因为人多导致我没放开点自己喜欢吃的，最后也只能碍于此没能吃爽，只能在角落里孤独把一大桶水果冰吃完了，那个水果冰还一股香精味。</p>
<p>回程的时候发现路过新奥机厅，于是去摸了两把，本来以为人会很多，结果今天是日服更新日，饼机全都是排队的人，国服反倒是没有人打，我于是吧唧一晚上，直接把 N3 推上了鸟加。本来想一鼓作气把北埼玉也给拿下的，结果还是没能成功。</p>
<h1 id="section-42">2023.10.13</h1>
<p>今天出了一整天勤，但是收获颇丰，拿下了 Starry Colors、北埼玉、白吹爆等三首 14 以及一首 b15 侧 13+，加上昨天拿下的 N3，两次出勤一口气上了 42 分，老算法的话也一口气从 7869 一路飙升到 7891，几乎已经是临门一脚的状态了。</p>
<p>不过今天的遗憾就是 Aiolos 和 MEGATON BLAST 没能鸟加，要是这两个鸟加了的话万分就已经达成了。</p>
<h1 id="section-43">2023.10.14</h1>
<p>因为昨天出勤太猛，今天起来完全没有劲，腰酸背痛的，还得准备批改软工小作业。改了一整天作业的感觉就是，大家真的喜欢用 ChatGPT，改下来没少看到 ChatGPT 生成的答案，可惜，是错的。</p>
<p>晚上摸了一晚上鱼，研究了一下万分最后应该打点什么就准备睡觉了。</p>
<h1 id="section-44">2023.10.15</h1>
<p>今天基本上就是改了一整天的软工小作业然后在宿舍里面把杂七杂八的事情做了一下，大概学了一点 BLACK SWAN 和 UniTas，找时间再去打吧。之前学长说周一要找他开会，明天看看能不能迅速把论文看完找他讨论。</p>
<h1 id="section-45">2023.10.16</h1>
<p>周一就是开会，疯狂开会。这里做一些项目的记录：</p>
<div class="note info no-icon"><p><strong>目标</strong>：在保持低延迟的条件下尽量避免画面撕裂</p>
<p><strong>基本思路</strong>：通过决策客户端将各帧送显的时机来控制画面撕裂</p>
<p>原先的理解是，现代显示器并没有采用逐行扫描的方式，所以 60 Hz 对应的 16 毫秒显示槽中应当有空转时间可以把帧送显而不画面撕裂，所以决策算法可以较为简单地控制每一帧都尽可能对应到空转槽即可。</p>
<p>然而现在发现现代显示器依然采用逐行扫描，这意味着不存在先前理解的空转槽，因而只要是不在显示槽开头送显都会出现画面撕裂，然而我们做不到在低延迟条件下保证时刻在显示槽开头送显。</p>
<p>由于我们要做的是画面撕裂和延迟之间的 trade off，所以有两个显然的 baseline：</p>
<ul>
<li>垂直同步（完全杜绝画面撕裂，但是会带来巨大的延迟）</li>
<li>WebRTC jitter buffer（在不考虑送显流程的条件下尽可能压低延迟，但是也因此有严重的画面撕裂）</li>
</ul>
<p>目前已经有的一种 trade off 设计方式是，在抛弃垂直同步的基础上：</p>
<ul>
<li>论证出现在屏幕上半部分的撕裂不会被注意到。这一部分需要用户实验证明，参考 Ekho 论文设计（#1：考虑分享一下 ITU 用户实验设计的原理和流程）</li>
<li>通过图像处理方式处理掉出现在屏幕中央的撕裂</li>
<li>论证出现在屏幕下半部分的撕裂完全可以按照垂直同步方式处理而不增加很多延迟</li>
</ul>
<p>此外，做一些 content aware 的，在某些能够容忍延迟的游戏中通过增大 jitter buffer 换帧率也是一种优化。</p>
<p><strong>有个问题</strong>：没有太能想明白的在这里，这里是否和我们原先设定的优化目标不太一样？我们的一个重要限制应该是控制低延迟，这里针对某些游戏内容做让步似乎不太能嵌入整个故事之中？</p>
<p>此外，需要思考、调查还有没有其他的可以完成这一个 trade off 的设计方式。</p>
</div>
<h1 id="section-46">2023.10.17</h1>
<p>今天出勤，早上打了两把就解决了黑天鹅的鸟，本来以为万分已经是临门一脚，结果打了一下午的 Aiolos 和 UniTas 都没能解决，最后也只能遗憾离场了。</p>
<h1 id="section-47">2023.10.18</h1>
<p>周三还是一样，得去上导师的课，上完之后就去工位坐着打算做点事情。但是这一下午真的除了把组合数学的作业做掉之外完全不知道干些什么，学长那边因为也没有给材料，我自己也不知道该看些什么材料，于是只能干着急，啥都做不了。</p>
<p>自己真的有点迷茫，完全不知道科研应该干什么，感觉应该是花费大量时间阅读大量资料，但是我连找资料的思路都不太有，或者应该就是沿着论文的引用链条往下看他个十篇八篇的吧。</p>
<h1 id="section-48">2023.10.19</h1>
<p>周四的组会平稳混过去，然后继续去上地打 UniTas，十分不凑巧，还是没打出来。周二一天加上今天半天，万分的最后 7 分死活解决不掉，于是我又想着能不能拆解了。</p>
<p>晚上回去就开始郁闷，这几天其实是有点小感冒的，而且咳嗽得厉害，吃了点一般的感冒药，但是终究得靠身体自己扛过去。郁闷的主要原因倒不是身体，而是自己真的感觉读博毫无方向感，学期已经开始一个月左右了，自己却毫无算得上东西的进展，也不知道该怎么进行，只能不停打 mai，用这种廉价的成就感淹没自己。哎，其实要是说自己工作上有了点进展，倒也不会用这种东西麻痹自己了，终究还是得想办法从读博本身寻找到一些成就感比较好。</p>
<p>其实我自己也在想，日语本来也就是个爱好，但我查找日文资料的动力就凶狠得多，基本上有问题了掘地三尺都给你挖出来，果然兴趣还得是最好的老师啊。</p>
<h1 id="section-49">2023.10.20</h1>
<p>周五大概首先是数据挖掘的小测，好玩的是我还没出门，小测的答案就被 rls 发过来了，于是我干脆也就不去教室了，直接在线上做完了小测，在六教坐着休息了一会就去工位了。在工位上随便看了会论文，就是学长约的会议，这次开会大概讨论了一些杂七杂八的实验结果，以及后面的文献调研的计划，于是自己也就大概有了些论文 survey 的任务要做了。</p>
<h1 id="section-50">2023.10.21</h1>
<p>今天出勤，出了一天，一点分没出，郁闷。</p>
<h1 id="section-51">2023.10.22</h1>
<p>今天解决了一些生活上的事情，比如取快递、买洗发水、重新配眼镜等等。这么忙完一波之后去了北门口，买了点小零食回来，看完了之前闲得无聊翻出来的 COP CRAFT。这部番我怎么说呢，说实话女主很对我的口味，无论是性格还是外貌。这种矮我一头多的白发萝莉，但是又意外地很有战斗力，很有自己的见解，还会为了我改变自己，怎么说呢，只能说是理想型。而且这部番的制作组看得出来很舍得在女主上下功夫，作画就不说，每一集几乎都会有新的衣服，无论是战斗服、常服、礼服，都几乎戳在我的好球区。</p>
<p>谁能拒绝<del>贫乳白丝一米六白发萝莉呢。</del>而且，那种，松松垮垮的着装，或者说夸张点，披风式的服装，真的没人做吗，大家除了 JK 水手服之外就没有什么服装设计了吗。</p>
<p>这部番剧情也很不错，讨论的主题也有深度。但是，毁就毁在制作组太穷了，没法画动作戏，一旦进打斗场景，立刻开始 PPT 甚至出现我都能看出来的作画错误。这种问题导致，我经常在刚刚被剧情吸引住的时候，突然被穷到极致的作画出戏。说实话，虽然能看得出来制作组很努力了，但是最终的效果确实实在是差强人意。</p>
<del>
但是女主实在是太讨喜了啊，真的，完完全全的理想型。画画日常也行啊，中间第七集左右的日常实在是太好看了，为什么不多画一点！
</del>
<p>看完番，又进入了那种，空虚时期，简而言之就是完全不知道该干什么，即使有任务。于是我又开始琢磨什么时候去解决了 MEGATON BLAST，最近出勤实在是一点分不加，导致我现在对 maimai 都快失去热情了。</p>
<p>但是说实话，我自己还是觉得，我现在的状态，不适合有很强目的性地去做什么事情，更适合随随便便混混日子。然而，周三讲课和周四周五讨论会又慢慢迫近，不得不开始工作。</p>
<p>这种空虚感，这种无目的感其实就是缺乏正反馈了，无论是工作还是 maimai 还是看番，都没能给我带来一些什么正反馈，那我和耗尽能量别无二致，基本上就是处于省电模式，等到什么事情重新激发起我的热情。嘛，希望这次是工作让我充满热情。</p>
<h1 id="section-52">2023.10.23</h1>
<p>今天结果是出勤，但是今天一把解决了 MEGATON BLAST，于是离万分也就差最后一分了。但是反而到了这个时候，我却一点想打万分的心态都没了，只想打点术的 AP 来听歌，找回玩 maimai 的初心。</p>
<p>晚上回来看了会论文就睡了，没啥特别的事情发生。</p>
<p>另外就是发现 Zotero 真好用，以后就在 Zotero 上写论文笔记了，用个人 blog 写论文笔记也实在是太坐牢了。</p>
<h1 id="section-53">2023.10.24</h1>
<p>因为明天要去讲课，所以今天起床就开始看论文，但是三篇论文要一天看完然后做 PPT 也实在是太困难了，熬了一个大夜才勉强做了大部分，到最后甚至躺在椅子上睡了两三个小时。</p>
<h1 id="section-54">2023.10.25</h1>
<p>并没能睡个好觉，起来之后立刻就去讲课，说实话效果确实出乎我的意料，整个场子的氛围很好，大家也确实到最后参与了一些讨论，而且自己也几乎没有掉链子，即使我觉得我对那三篇论文的理解也不过如此。</p>
<p>下午没忍住，出勤去了，一开始也就三四个人，于是我单刷解决了 Now or Never，拿下了万分。拿下万分之后就在试着越 14+，结果除了静蓝能够勉强打打前面之外，其他的几乎连 S 都很难。哎，果然自己的 maimai 水平还是太低了，想到之前还说过“万分就代表玩透了这个游戏”这样的评论，果然还是太年轻。</p>
<h1 id="section-55">2023.10.26</h1>
<p>周四本来是要有组会的，但是大家都去 CNCC 了，结果就是组会取消，然而下午的软工例会还是得开。</p>
<p>下午顺手混掉软工例会之后本来还在想着是应该准备一下之前说的论文 survey 的事情了，然而还是没能抵制住做万分分表的诱惑，干了一下午总算是把视频给投稿出去了。晚上之后和 zz、yuki 他们把组合数学的作业给做了，一看时间也不早了，就睡觉了。</p>
<h1 id="section-56">2023.10.27</h1>
<p>周五并没有做任何的事情，早上被吴成磊学长催了一下论文 survey 之后只能开始缓慢查找论文，然后看论文。</p>
<p>不过说实话真的不知道论文 survey 应该怎么去做，感觉自己做下来就是找不到什么特别有意思的论文，但还是加把劲搞吧。</p>
<h1 id="section-57">2023.10.28</h1>
<p>非常粗暴地把论文 survey 的结果交给了学长，然后询问了一下论文 survey 到底需要做到什么地步，果然学长非常认真地回答了我。</p>
<p>但是说实话今天也一直没什么动力，于是只是非常平淡地消磨掉了周末的第一天。</p>
<h1 id="section-58">2023.10.29</h1>
<p>今天本来就约好了出勤，那就出了，顺手请了一顿万分饭。然而今天出勤实在是有点气，首先是 UniTas，几乎稳定到最后结果一不小心脑梗在双押接三下八分单点的地方灰了一个绿了一个，最后 100.41，否则我已经鸟加了。然后是 Aiolos，保持到 100.68 快到最后，结果粉了两个绝赞，直接爆炸。</p>
<p>但由于已经上万分了其实也没之前那么着急，也不想着后面几天集火攻击这两首，但是还是想着这往后每次出勤尽量都抽一下奖，抽中了就是 24 分。最近倒是比较想打 Mutation 或者 Sage，再说吧，现在说实话冲刺 15800 也没有那么有兴趣。然而我自己还是觉得有点上升无力了，简而言之就是明显感觉到我为了上分需要付出的 pc 数越来越多，我越来越需要死磕上分，很难再像以往一样随缘就能上。虽然一方面是 14 的曲目不过数十首，能打的范围很小，但我还是觉得主要原因是没有研究明白就开始打导致手癖，所以还是计划之后好好在 AstroDX 上打明白再上机。</p>
<p>然后就该准备周一全新的一周了，这周得赶快干掉论文 survey 然后和老师聊聊。</p>
<h1 id="section-59">2023.10.30</h1>
<p>上完了中马之后抱着试一试的心态去了新奥，结果发现真的没人，认真打了一下 Aiolos 和 UniTas，结果 UniTas 没有手感，但是 Aiolos 打了个 100.4678 FC+。哎，真的是，真的不如回去沉淀或者打点 14.2 之类的简单 14 来锻炼一下。</p>
<h1 id="section-60">2023.10.31</h1>
<p>十月最后一天，也就是在看论文了，啥事都没有干，有点废物了。</p>
<h1 id="section-61">2023.11.01</h1>
<p>十一月的第一天，先去上了导师的课，然后回来看论文，但是一直没有理出来一点头绪，看得云里雾里，也不知道明天的分享会到底能讲出来个什么东西，感叹啊。</p>
<h1 id="section-62">2023.11.02</h1>
<p>周四，之前就约好了讨论论文 survey，下午开完软工的例会就回到工位开始看论文，看完论文开完会分配完下一阶段任务就直接回宿舍睡大觉去了。</p>
<h1 id="section-63">2023.11.03</h1>
<p>周五组会，没什么好说的，混完之后就立刻去出勤，结果网实在是太烂，被关了好几回小黑屋之后想着不如在游客模式练习一下水母姐，结果一练习，基本也就会了。下一把能上号了，于是开始推，原来我最高纪录是 99.5，结果我都打到结尾的大散点了，还剩了 100.53，于是人又着急了，最后的扫键掉到了 100.49，然而这把断网没能传上去。于是，也就只能打趣说，要是真的出分了，才是真的急。</p>
<p>其他没打什么，很早就回去了。</p>
<h1 id="section-64">2023.11.04</h1>
<p>早起堵门新奥，先是打中二解了 Blue Zone，之后就是趁着上午网好人少赶快推水母姐。好玩的事情是，我打了四把 New Record，分别是 100.45、100.46、100.47、100.48，当时真的是，想把滴蜡熊一把打穿的心都有了。</p>
<p>下午网已经开始不稳定了，于是也就不打分了，专心打小歌 AP。晚上人少了网也慢慢好了，本来想着在国服上再打打的，但是还是有人在排队，于是我就去饼上练习水母姐，没想到，两把直接鸟加了。这个时候我已经很急躁了，于是赶着闭店前，在国服上上号，又打了一个 100.52 鸟加，然而，就在这个时候不偏不倚的断网了。</p>
<p>哎，当时整个人都已经快炸了，明明有这个水平，但就是没出分。</p>
<h1 id="section-65">2023.11.05</h1>
<p>早上堵门去西局出勤，到地方之后发现真的是一个人没有，于是立刻吧唧，热完手就开始爆推水母姐。预料之中，没打多少把就顺利拿下鸟加。事实上我从堵门打到这个时候，机厅里面都没有来第二个人，倒是有一位母亲带着孩子来玩，我反正当时已经解决心头之患，就把机子让给他们，自己上楼吃饭了。</p>
<p>吃完饭下来发现还是没有人，于是继续断断续续打，虽然说下一个目标应该是福瑞火箭，但说实话没打几次，剩余时间都在打小歌听歌。最后打累了，完全打不动了，把空调喊了过来。在等空调来的时候，我一回头，发现装着一百个游戏币的塑料框不见了，当时有一群类似常客的人在收拾他们抓娃娃机的战利品，我当时就算是带了点火气问他们我的币呢，他们也没觉得是自己拿的，反驳了我，于是我就去调监控了。监控显示确实就是他们一群人拿的，那就没啥好说的，在保安的监视之下他们取了一百个游戏币还给我，这事就算过去了。</p>
<p>空调来这里随便打了几把，结果在我的号上把变态主义给鸟了，虽然当时是我注意到已经断了网让他不要控分随便打的，但也算是制造了点笑料。好玩的事情在于，空调本来应该早点回去赶火车回雁栖湖，他也这么做了，结果是，走得晚了两三分钟没赶上末班火车，他就又回到了机厅。当时费米也来了，我俩看到他莫名其妙折返回来，在机厅里面笑了至少有两分钟。</p>
<p>最后就是一直打到七八点钟，我也就出了个失败作少女四星 AP，其他也没啥成绩，回去把作业做了就直接睡了。</p>
<h1 id="section-66">2023.11.06</h1>
<p>周一是中马，一觉睡到上课，于是立刻匆匆忙忙赶到，因为这节课是必然小测的。上课实在是坐牢，小测更是坐牢中的坐牢，毕竟冬天大家穿得都很厚，教室里又是人挨着人，结果就是可活动的范围极小，氧气含量也几乎跌破下限，昏昏沉沉做完小测就跑去上地出勤了。</p>
<p>上地依然全都是人，今天没能打到什么有意思的成绩，随便打两把就回去了。</p>
<h1 id="section-67">2023.11.07</h1>
<p>周二，本来就约好了和 yuki 他们去香山，于是早早起床，吃了早饭就去了。本想着工作日的上午香山怎么的人也不会多吧，结果到了门口，发现还算不少，大多都是退休的大爷大妈模样，或者就是我们这种无所事事的大学生。香山的叶子其实也还没怎么变红，整体来看还是翠绿一片，除了山顶稀稀朗朗的淡红之外。</p>
<p>当天天气实在是太冷，明明穿了一件卫衣和防风的风衣，却依然被山上的冷风不断提醒现在是寒潮。顶着寒风爬到香炉峰，还没喘息多久就直接坐着索道下山了。说实话玩得也是实在匆忙，确实没能看到什么有意思的风景，可能单纯的外出徒步也是一种乐趣吧。</p>
<p>回来的时候路过万柳机厅，于是小小出勤一把，把标奶推到了 100.37，打了一个暴力扳机的四星 AP，除此以外就没有出分了。</p>
<h1 id="section-68">2023.11.08</h1>
<p>今天就是上课，看论文，写作业。今天事情其实还真的不少，中马的 pre 材料准备到了 ddl，然后学长问我加紧要了 ITU-T 用户测试的材料，明天组会要讲的论文也还没准备，周四还得交高级机器学习的 proposal，总之就是一直在忙，到了一点多还没完全搞完。</p>
<h1 id="section-69">2023.11.09</h1>
<p>周四，还是一样的简单混完组会和软工会，但是这次不能出勤了，因为得赶快回去搞 proposal。不过比较好的一件事情是，回去之后 yuki 和我说他大概知道要干什么了，于是 proposal 整体写得也就比较顺利，早早完工早早交掉。</p>
<p>晚上本来是要和学长聊用户实验相关的东西的，但是学长肺炎在休息说另找时间，也就先搁置了。</p>
<h1 id="section-70">2023.11.10</h1>
<p>今天就是非常单纯睡了一个大觉然后出勤，手感比较好，AP 了白火花然后鸟加了 HERA2 和福瑞火箭，晚上本来想迅速解决白死镰的，结果粉了好几次绝赞痛失鸟加，到了闭店也没打完，于是只能赶快回去准备和学长开会。</p>
<p>这次开会基本上没有什么有意思的东西，大概就是这周末稍微思考一下用户实验怎么尽可能地在保持真实交互的条件下又符合 ITU 标准，然后约了周一再开一次会交流一下线上算法和用户实验设计，周四周五再找老板聊一下。总之就是，有了点事情要做，但是确实也一下子没啥思路。</p>
<p>好玩的一件事就是，今天早上我才发现上周五数据挖掘小测了，于是总评高高兴兴减了 10 分，不过研究生的绩点终究是随便搞搞，所以估计混个 3.6 也就随随便便过去了。但是，麻烦就在，以后真的不能翘课了，再缺一次小测成绩就实在是太难看了。</p>
<h1 id="section-71">2023.11.11</h1>
<p>出勤，去了东直门，很快解决了白死镰之后瑞文皇帝打了个 100.52 进结尾绿绝赞。哎，真的是觉得绝赞是我的一生之敌，UniTas 和 Aiolos 也是掉绝赞，白死镰之前也是掉绝赞。</p>
<p>晚上是高老板的特奖饭，吃完在五道口又小出了一会回来准备写作业。不过说实话确实挺纠结明天出不出勤的，因为瑞文皇帝确实还是比较手痒，但是手上又有一门作业、Approval9 以及实验室的东西。比较好的一种安排就是今晚早点睡明早早点起把作业和 Approval9 初步给清理掉，然后下午五点这样去新奥出勤。</p>
<h1 id="section-72">2023.11.12</h1>
<p>周日，主要做的事情就是在宿舍里面清理作业，这次作业是马尔可夫相关的一些东西，本来以为很快能解决的，结果还是花了段时间才磨了个七七八八。中途应该是 zsj 在活动室约了一群人一起看比赛打雀，我也过去混了一个半庄。</p>
<h1 id="section-73">2023.11.13</h1>
<p>周一把中马的 pre 混掉之后出勤，结果一不小心把静蓝打到了 99.8，集火推了一下，未果。</p>
<p>晚上和坐标他们吃了一顿五道双马，他们家的厚切猪排确实好吃，然而店开的位置实在是有点刁钻，去的话也有点麻烦而且外卖不卖厚切。还是下回有机会的话，找找看有没有可能再去吃一顿吧。</p>
<h1 id="section-74">2023.11.14</h1>
<p>周二就是出勤，实在是没什么好记录的，本来想解决静蓝的，结果是解决了红枪吃了 7 分烂分。</p>
<h1 id="section-75">2023.11.15</h1>
<p>周三还是一样，先去上老板的课，上完之后也不知道该干些什么就回到了宿舍准备学点东西，结果一个下午偏偏一点正事都没做出来，反倒是看了很久的国际新闻和评论，看到了第二天早七点才昏昏睡去。</p>
<h1 id="section-76">2023.11.16</h1>
<p>昨晚睡得太晚的结果就是今天组会居然没起得来，迟到十五分钟才匆匆忙忙赶到会议室。然而，更尴尬的就在于我组会上也没没什么能够讲的，结果还被导师点名讲点东西，我也只能尽可能的混了一下。</p>
<p>说实话还是摆烂太过了，真的，还是没有搞明白自己应该干些什么，不过这次之后我做了一些规划，希望能够在接下来的一段时间里，能够有所进展。</p>
<p>晚上是规划中的出勤，一共打了一两把，最后一把断网打游客号，结果一不小心把紫茄子打上 99.5 了，这下子目标来了。</p>
<h1 id="section-77">2023.11.17</h1>
<p>今天周五，早上起来把数据挖掘的小测混掉之后就是出勤。今天出勤没想到手感真的很好，很快就解决了紫茄子，拿下了 14+ 的第一个鸟。</p>
<p>之后就是杂七杂八打了点东西，也没吃到分，就这样吧。</p>
<h1 id="section-78">2023.11.18</h1>
<p>周六已经完全记不得在干什么了，感觉就是摆烂过去了。</p>
<h1 id="section-79">2023.11.19</h1>
<p>lcr 说今天要一起吃晚饭，于是起床就开始做性能评价作业，做完之后赶快前往西直门见他。中途没什么有意思的东西，买了个一般的巧克力派，然后吃了个平均水平的泰式餐厅，在周末西直门的人潮里面挤来挤去。</p>
<p>lcr 说明天就打算走，从北京南站出发，所以我们决定一路往南，走到哪里算哪里，最后我们到了西单。我算是有点手痒了，就说我去机厅抓个同学，lcr 就差不多懂意思了，于是在此分别。</p>
<p>晚上简单出了一小会，成果就是鸟加了 Climax。</p>
<h1 id="section-80">2023.11.20</h1>
<p>看了一天论文，毫无进展，也没摸鱼，但工作也没成果。</p>
<h1 id="section-81">2023.11.21</h1>
<p>周二没有事情，打算验证一下西单插电师是不是如大家所说工作日没人，于是去西单出勤了。到地方发现，还真的没人，于是基本就是吧唧乱打。今天主要的几个目标是两个 13 的 AP，这都不难，很快拿下了。然后，本来是想打钢铁超音速或者宿星审判的，结果这两个都不会，倒是泽拉斯莫名其妙开窍，正好人少，我就在饼上开 free mode 练习了好几把，最后在要退勤的时候拿下泽拉斯。</p>
<h1 id="section-82">2023.11.22</h1>
<p>周三做了一天的事情，主要还是组合数学的作业。组合数学现在讲到了母函数，其实就是数列的形式幂级数，然而这玩意真的讲得不明不白，又想出难题，但上课又不好好讲严谨的逻辑推理，导致最后作业只能忽略好多可能的 corner case 瞎做乱做，我个人是很反感的。于是，在最后交的作业里面我把这件事批判了一通，希望助教不要在意。</p>
<p>做完作业简单做了一些数据处理，就睡觉准备组会了。</p>
<h1 id="section-83">2023.11.23</h1>
<p>今天组会老师不来，于是随便聊了一下就散掉了，期间贾老师问我为啥不把毕设投出去。说实话，因为我一直觉得我毕设做得实在是不咋样，所以也不敢和老师说投出去这件事，然后手上的项目进展也没那么顺利，更不敢节外生枝提这些事情。不过今天贾老师确实说的有道理，现在这个项目进展没那么顺利，不如投一个保底的 B 会至少丰富一下 pub list。</p>
<p>组会之后简单交流了一下软工就去出勤了，一分没吃到，但是好像会打一点天秤了。</p>
<h1 id="section-84">2023.11.24</h1>
<p>今天就单纯出勤，目标就是天秤，但是大概打了一下午给我断网断了六回，我最后直接心态炸了，吃了顿萨莉亚就准备走。然而我想起来 if 说要给我带游戏币，找他打了几把之后邪心又起来了，结果真的 1pc 内打完鸟加。天秤说实话难点太集中了，很有翠子的风格，和亚特兰蒂斯、泽拉斯这种差不多，70% 白送，20% 有点难，10% 要好好学。天秤怎么说也是个 14.4，于是爽吃 12 分退勤。</p>
<h1 id="section-85">2023.11.25</h1>
<p>已经快要忘记周六干了些什么了，我记得我也没有出勤，我也没有做任何有意义的事情。大概又是睡到下午起来，然后行尸走肉一般混过去了一天。</p>
<h1 id="section-86">2023.11.26</h1>
<p>周日是 lambda 的生日，性能评价的作业做到一半就赶过去吃饭了，吃完之后出了一小会勤，结果打出了标奶 100.3 灰绝赞，这下真的不得不考虑要不要集火推了。</p>
<p>晚上最后还是得交作业，火速回去补了一下上交。</p>
<h1 id="section-87">2023.11.27</h1>
<p>周一，什么事情都没有做，也没有出勤，非常缓慢地推进了一下组合数学的作业。</p>
<h1 id="section-88">2023.11.28</h1>
<p>下午应要求来到实验室开了一下项目会，大概意思就是有个题目要开，导师让我和学长写一下开题的本子，这个活之前真没干过，还得学习一下。开完会之后就一直在实验室里写组合数学作业，写完就去五道口吃饭出勤了。</p>
<p>今天出勤实在是忍不住了，标奶的分就明晃晃放在那里，还是太诱人了。不过好事就是，这次出勤人品大爆发，打出了 10 粉以内标奶鸟加的爆炸成绩，算是近期为数不多的好消息了。</p>
<h1 id="section-89">2023.11.29</h1>
<p>今天说是要好好干活的，结果上完课到了宿舍就摆烂了一整天，说不出来摆烂干啥去了，反正就是啥都没干。</p>
<p>最近的事情还是不少的，而且确实给我一种我被人需要的快感，动力也慢慢回来了。然而由于摆烂成性，现在还是没能进入那种马力全开的状态，今天依然因为写本子没有思路而拖延了很多任务。目前还是得尽快规划一下，把这些事情给做完。</p>
]]></content>
      <categories>
        <category>【生活记录】日记</category>
      </categories>
  </entry>
  <entry>
    <title>安卓前端开发杂谈</title>
    <url>/2021/09/01/android-dev-exp-1/</url>
    <content><![CDATA[<p>安卓的移动端开发，属实让我血压高了一小段时间。毕竟已经接触过类似于 React Native 那种基于 TypeScript 语言的、优秀的跨平台移动端框架，再去尝试用繁琐的 Java 语言写安卓前端自然是不适应且感到烦躁。</p>
<p>但是毕竟是 Java 程序设计训练课程，安卓前端开发作为其最大的特色，不得不消受。</p>
<span id="more"></span>
<h1 id="关于数据绑定">关于数据绑定</h1>
<p>如果要我说最大的不适应的地方，首先就是数据和图形界面的完全分离。在 React Native 框架之中，数据和图形界面的管理大概是这样的：</p>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">props: AppProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Set states &amp; initialize</span></span><br><span class="line">    <span class="keyword">const</span> [bar, setBar] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Some functions to update or rewrite data</span></span><br><span class="line">    <span class="keyword">const</span> update = <span class="function">() =&gt;</span> setBar(<span class="function">(<span class="params">o</span>) =&gt;</span> o + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write UI with TSX, use data freely</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span> Hello world! <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span> &#123;`The val of bar is $&#123;bar&#125;`&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span> &#123;`Property foo is $&#123;props.foo&#125;`&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;update&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在安卓之中，图形界面完全定义在 <code>.xml</code> 文件之中，而且一定程度上其定义各个组件摆放方式的语法细节的繁杂程度不低于 HTML。而如果需要将数据载入图形界面，则首先要根据组件的 ID 获取组件，之后才能调用各种方法设定具体属性。</p>
<figure class="highlight java"><figcaption><span>Java</span></figcaption><table><tr><td class="code"><pre><span class="line">((TextView) view.findViewById(R.id.entity_name)).setText(data.name);</span><br></pre></td></tr></table></figure>
<p>这里出现的 <code>R</code> 类据说是相当厉害的。但是我第一次接触安卓的时候，这个符号给我带来的感觉就是不安，因为我再也不能像写 React Native 一样至少自认为自己掌握了程序之中的数据流。换一种说法，即使 React Native 可能做了很多背后工作，但它至少做到了让开发者在很多时候能直观引导数据流。</p>
<p>对于按钮等组件，React Native 框架下可以直接传入回调函数。而众所周知 Java 是纯净的面向对象语言，怎么会有 lambda 这种异端呢（新版本的 Java 已经离经叛道了！）。</p>
<p>所以你需要写监听器对象，重写其中的方法等等。</p>
<hr />
<p>并不是说这样不好，我还记得之前大一小学期的时候写 Qt 很多时候就是各种指针到处乱飞然后到处乱 <code>set</code> 这个那个的，最后一个 <code>draw</code> 函数里面上百行的，成块的各种格式设定、字体设定、内容设定、排列设定，然后这次写安卓让我回忆起了那一段黑暗时光。</p>
<h1 id="并不适应的适配器模式">并不适应的适配器模式</h1>
<p>如果只是想给一个 <code>TextView</code> 载入文字，直接几个 <code>set</code> 函数就结束了。但是给一个格式复杂的列表载入数据，则相当繁琐。比如说现在主流的 <code>RecyclerView</code>，其载入数据，就需要你自己编写一个数据适配器。</p>
<p>我首先是上网找轮子，随后想了一下，干脆自己包装了个简单的 <code>RecyclerViewAdapter</code> 先勉强用用。</p>
<p>将数据塞到图形界面上，最重要的三个东西是上下文、使用什么 <code>layout</code> 和数据本身，那么适配器的构造函数就需要接受这三项。然后就是平凡地重写 <code>RecyclerView.Adapter</code> 所要求的三个函数。不过这里我在重写 <code>onBindViewHolder</code> 的时候留了空，因为这里就是定义适配器最重要部分——数据如何映射到 UI 的函数。我将这一个函数设为虚函数，让子类继承重写就可以实现各种映射方式。最后的成果大致这样：</p>
<figure class="highlight java"><figcaption><span>Java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerViewAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mLayoutId;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;T&gt; mData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyclerViewAdapter</span><span class="params">(Context context, <span class="keyword">int</span> layoutId, List&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        <span class="keyword">this</span>.mLayoutId = layoutId;</span><br><span class="line">        <span class="keyword">this</span>.mData = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(</span><br><span class="line">                LayoutInflater.from(mContext).inflate(mLayoutId, parent, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> What is this?</span></span><br><span class="line">        <span class="comment">// holder.updatePosition(position);</span></span><br><span class="line">        <span class="keyword">this</span>.convert(holder, mData.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(ViewHolder holder, T data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mData.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">private</span> View mConvertView;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            <span class="keyword">this</span>.mConvertView = itemView;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> &lt;K extends View&gt; <span class="function">K <span class="title">getViewById</span><span class="params">(<span class="keyword">int</span> viewId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (K) mConvertView.findViewById(viewId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用起来也简单，传入三个要素，之后重写 <code>convert</code> 方法定义一下数据到 UI 的映射就好了：</p>
<figure class="highlight java"><figcaption><span>Java</span></figcaption><table><tr><td class="code"><pre><span class="line">binding.entityList.setAdapter(<span class="keyword">new</span> RecyclerViewAdapter&lt;Entity&gt;(</span><br><span class="line">    HomeFragment.<span class="keyword">this</span>.getActivity(), R.layout.home_entity_item, baseEntities</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(RecyclerViewAdapter.ViewHolder holder, Entity data)</span> </span>&#123;</span><br><span class="line">        ((TextView) holder.getViewById(R.id.entity_name)).setText(data.getLabel());</span><br><span class="line">        ((TextView) holder.getViewById(R.id.entity_category)).setText(data.getCategory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>你会发现，这比 React Native 要写的东西多太多了。上面这么多需要折腾的，React Native 只需要这样写：</p>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;View&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        baseEntities.map(<span class="function">(<span class="params">val, ind</span>) =&gt;</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">key</span>=<span class="string">&#123;ind&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span> &#123;val.name&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span> &#123;val.category&#125; <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure>
<p>就可以实现一个列表了。</p>
<p>Java 我写了一整个类，光数据转成 UI 也写了好几行长代码，这还没有算 <code>.xml</code> 文件。</p>
]]></content>
      <categories>
        <category>【杂谈】开发</category>
      </categories>
  </entry>
  <entry>
    <title>JS 文件本地化</title>
    <url>/2022/08/20/blog-js-localize/</url>
    <content><![CDATA[<p>自从 JSDelivr 半挂了之后就一直在为这些事情苦恼。</p>
<span id="more"></span>
<p>简而言之，一个静态站需要拉取一堆 JS、CSS 文件。而正常而言的 JS 文件完全可以从网络上当场获取，但是由于 JS CDN JSDelivr 半墙，我只能速速转战其他的 CDN，结果近日发现速度非常不理想，甚至仅仅是拉 jQuery 都花了 15 秒，这完全不能接受。</p>
<p><img src="/uploads/blog-js-localize/1.png" /></p>
<p>本来想尝试一下换其他的 CDN，但是怎么试都不算快。</p>
<p>还是暴力解决方法比较好，我直接把 jQuery 等一系列常用的东西的 min JS 打包放在了自己博客文件夹内，每次请求只不过是访问本地文件，太完美了。</p>
<p>虽然问题暂且是解决了，但是我还是觉得，为啥这些 CDN 会受限呢，真的和什么敏感领域有关吗。</p>
]]></content>
      <categories>
        <category>【杂谈】开发</category>
      </categories>
  </entry>
  <entry>
    <title>古日语语法笔记</title>
    <url>/2023/05/26/ancient-ja/</url>
    <content><![CDATA[<p>本章主要介绍古代日语的基本语法，并据此分析现代日语中的古日语语法残余。</p>
<span id="more"></span>
<h1 id="历史假名遣">历史假名遣</h1>
<p>历史假名遣指的是在现代日语推行假名表音化（即假名严格和发音一一对应）之前所使用的假名表记法。相较于现代假名遣的五十音图，历史假名遣的五十音图的や行和わ行有所不同，其不同之处标注在下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">あ段</th>
<th style="text-align: center;">い段</th>
<th style="text-align: center;">う段</th>
<th style="text-align: center;">え段</th>
<th style="text-align: center;">お段</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">や行「現代仮名遣い」</td>
<td style="text-align: center;">や ヤ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">ゆ ユ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">よ ヨ</td>
</tr>
<tr class="even">
<td style="text-align: center;">や行「歴史仮名遣い」</td>
<td style="text-align: center;">や ヤ</td>
<td style="text-align: center;"><strong>い イ</strong></td>
<td style="text-align: center;">ゆ ユ</td>
<td style="text-align: center;"><strong>え エ</strong></td>
<td style="text-align: center;">よ ヨ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">わ行「現代仮名遣い」</td>
<td style="text-align: center;">わ ワ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">を ヲ</td>
</tr>
<tr class="even">
<td style="text-align: center;">わ行「歴史仮名遣い」</td>
<td style="text-align: center;">わ ワ</td>
<td style="text-align: center;"><strong>ゐ ヰ</strong></td>
<td style="text-align: center;"><strong>う ウ</strong></td>
<td style="text-align: center;"><strong>ゑ ヱ</strong></td>
<td style="text-align: center;">を ヲ</td>
</tr>
</tbody>
</table>
<p>由于历史假名遣并不一定满足假名和读音一一严格对应，所以仅使用五十音图是不能完全确定使用历史假名遣书写的文句的。但实际上，历史假名遣中需要注意的读音规则基本上仅有下述条目：</p>
<ul>
<li><p>は行假名不在词头的时候，发音应当为「ワ・イ・ウ・エ・オ」。这是因为著名的语音流变ハ行转呼，其基本含义为不在词头的は行假名在语音流变过程中辅音丢失（あ段则是辅音转变），而书写表记并未随着语音流变更改。例如写作「いはひ」实则读作「イワイ」，写作「いへ」实则读作「イエ」，但写作「はな」依然读作「ハナ」。</p></li>
<li><p>元音重叠组合「あう・いう・えう・おう」的发音应当为「オー・ユー・ヨー・オー」。例如写作「あうむ」实则读作「オーム」，写作「いうなり」实则读作「ユーナリ」，写作「えうじ」实则读作「ヨージ」，写作「おうな」实则读作「オーナ」。</p></li>
<li><p>上述两个规则可以联合使用。如写作「てふ」，首先根据第一条规则得到ハ行转呼后其发音为「てう」，再根据第二条元音重叠规则即可得到其实际的发音为「テヨー」，而这个音在现代的表记法中应当使用拗音标记，即「チョー」。同理，写作「けふ」实则读作「キョー」。</p></li>
<li><p>「ゐ・ゑ・を」的发音分别为「イ・エ・オ」。这也是ハ行转呼中这三个假名丢失辅音的结果。例如写作「ゐる」实则读作「イル」，写作「こゑ」实则读作「コエ」，写作「をる」实则读作「オル」。</p></li>
<li><p>「ぢ・づ」的发音分别为「ジ・ズ」。</p></li>
<li><p>部分「む」的发音为「ン」，包括不在词头的「む」、助动词「む、らむ」以及助词「なむ」中的「む」。例如写作「ひむがし」实则读作「ヒンガシ」，写作「いくらむ」实则读作「イクラン」。</p></li>
</ul>
<h1 id="古日语的动词分类与活用">古日语的动词分类与活用</h1>
<p>古日语的动词分为五个正格类型和四个变格类型。</p>
<ul>
<li><strong>四段动词</strong>。古语的四段动词基本上演化成为了现代的五段动词。四段动词合法的词尾包括「く、ぐ、ふ、つ、る、ぶ、む、す」。这里与现代语相比缺失「ぬ」，这是因为古语中「死ぬ」并非四段动词。</li>
<li><strong>上一段动词</strong>。古语的上一段动词基本上演化成为了现代的上一段动词。</li>
<li><strong>下一段动词</strong>。这类动词包括「蹴る」，该动词演化为现代的五段动词。</li>
<li><strong>上二段动词</strong>。古语的上二段动词基本上通过将词尾固化为イ段后添加新词尾「る」的方式演化成为了现代的上一段动词。</li>
<li><strong>下二段动词</strong>。古语的下二段动词基本上通过将词尾固化为エ段后添加新词尾「る」的方式演化成为了现代的下一段动词。</li>
<li><strong>ラ变动词</strong>。这类动词包括「あり、をり、はべり、いまそかり」，其中「あり、をり」演化为现代的五段动词，而「はべり、いまそかり」被废弃不使用。</li>
<li><strong>ナ变动词</strong>。这类动词包括「死ぬ、往ぬ」，其中「死ぬ」演化为现代的五段动词，而「往ぬ」被废弃不使用。</li>
<li><strong>カ变动词</strong>。这类动词包括「く」，该动词演化为现代的カ变动词。</li>
<li><strong>サ变动词</strong>。这类动词包括「す、おはす」，其中「す」演化为现代的サ变动词，而「おはす」被废弃不使用。</li>
</ul>
<p>这些动词的六种活用形式如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">カ四</td>
<td style="text-align: center;">書か</td>
<td style="text-align: center;">書き</td>
<td style="text-align: center;">書く</td>
<td style="text-align: center;">書く</td>
<td style="text-align: center;">書け</td>
<td style="text-align: center;">書け</td>
</tr>
<tr class="even">
<td style="text-align: center;">ガ四</td>
<td style="text-align: center;">泳が</td>
<td style="text-align: center;">泳ぎ</td>
<td style="text-align: center;">泳ぐ</td>
<td style="text-align: center;">泳ぐ</td>
<td style="text-align: center;">泳げ</td>
<td style="text-align: center;">泳げ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">サ四</td>
<td style="text-align: center;">話さ</td>
<td style="text-align: center;">話し</td>
<td style="text-align: center;">話す</td>
<td style="text-align: center;">話す</td>
<td style="text-align: center;">話せ</td>
<td style="text-align: center;">話せ</td>
</tr>
<tr class="even">
<td style="text-align: center;">タ四</td>
<td style="text-align: center;">立た</td>
<td style="text-align: center;">立ち</td>
<td style="text-align: center;">立つ</td>
<td style="text-align: center;">立つ</td>
<td style="text-align: center;">立て</td>
<td style="text-align: center;">立て</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ハ四</td>
<td style="text-align: center;">歌は</td>
<td style="text-align: center;">歌ひ</td>
<td style="text-align: center;">歌ふ</td>
<td style="text-align: center;">歌ふ</td>
<td style="text-align: center;">歌へ</td>
<td style="text-align: center;">歌へ</td>
</tr>
<tr class="even">
<td style="text-align: center;">バ四</td>
<td style="text-align: center;">飛ば</td>
<td style="text-align: center;">飛び</td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛べ</td>
<td style="text-align: center;">飛べ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">マ四</td>
<td style="text-align: center;">読ま</td>
<td style="text-align: center;">読み</td>
<td style="text-align: center;">読む</td>
<td style="text-align: center;">読む</td>
<td style="text-align: center;">読め</td>
<td style="text-align: center;">読め</td>
</tr>
<tr class="even">
<td style="text-align: center;">ラ四</td>
<td style="text-align: center;">降ら</td>
<td style="text-align: center;">降り</td>
<td style="text-align: center;">降る</td>
<td style="text-align: center;">降る</td>
<td style="text-align: center;">降れ</td>
<td style="text-align: center;">降れ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">カ上一</td>
<td style="text-align: center;"><code>@ 着 き</code></td>
<td style="text-align: center;"><code>@ 着 き</code></td>
<td style="text-align: center;">着る</td>
<td style="text-align: center;">着る</td>
<td style="text-align: center;">着れ</td>
<td style="text-align: center;">着よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ナ上一</td>
<td style="text-align: center;"><code>@ 似 に</code></td>
<td style="text-align: center;"><code>@ 似 に</code></td>
<td style="text-align: center;">似る</td>
<td style="text-align: center;">似る</td>
<td style="text-align: center;">似れ</td>
<td style="text-align: center;">似よ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ハ上一</td>
<td style="text-align: center;"><code>@ 干 ひ</code></td>
<td style="text-align: center;"><code>@ 干 ひ</code></td>
<td style="text-align: center;">干る</td>
<td style="text-align: center;">干る</td>
<td style="text-align: center;">干れ</td>
<td style="text-align: center;">干よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">マ上一</td>
<td style="text-align: center;"><code>@ 見 み</code></td>
<td style="text-align: center;"><code>@ 見 み</code></td>
<td style="text-align: center;">見る</td>
<td style="text-align: center;">見る</td>
<td style="text-align: center;">見れ</td>
<td style="text-align: center;">見よ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ヤ上一</td>
<td style="text-align: center;"><code>@ 射 い</code></td>
<td style="text-align: center;"><code>@ 射 い</code></td>
<td style="text-align: center;">射る</td>
<td style="text-align: center;">射る</td>
<td style="text-align: center;">射れ</td>
<td style="text-align: center;">射よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ワ上一</td>
<td style="text-align: center;"><code>@ 居 ゐ</code></td>
<td style="text-align: center;"><code>@ 居 ゐ</code></td>
<td style="text-align: center;">居る</td>
<td style="text-align: center;">居る</td>
<td style="text-align: center;">居れ</td>
<td style="text-align: center;">居よ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">下一</td>
<td style="text-align: center;"><code>@ 蹴 け</code></td>
<td style="text-align: center;"><code>@ 蹴 け</code></td>
<td style="text-align: center;">蹴る</td>
<td style="text-align: center;">蹴る</td>
<td style="text-align: center;">蹴れ</td>
<td style="text-align: center;">蹴よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">カ上二</td>
<td style="text-align: center;">生き</td>
<td style="text-align: center;">生き</td>
<td style="text-align: center;">生く</td>
<td style="text-align: center;">生くる</td>
<td style="text-align: center;">生くれ</td>
<td style="text-align: center;">生きよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ガ上二</td>
<td style="text-align: center;">過ぎ</td>
<td style="text-align: center;">過ぎ</td>
<td style="text-align: center;">過ぐ</td>
<td style="text-align: center;">過ぐる</td>
<td style="text-align: center;">過ぐれ</td>
<td style="text-align: center;">過ぎよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">タ上二</td>
<td style="text-align: center;">落ち</td>
<td style="text-align: center;">落ち</td>
<td style="text-align: center;">落つ</td>
<td style="text-align: center;">落つる</td>
<td style="text-align: center;">落つれ</td>
<td style="text-align: center;">落ちよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ダ上二</td>
<td style="text-align: center;">閉ぢ</td>
<td style="text-align: center;">閉ぢ</td>
<td style="text-align: center;">閉づ</td>
<td style="text-align: center;">閉づる</td>
<td style="text-align: center;">閉づれ</td>
<td style="text-align: center;">閉ぢよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ハ上二</td>
<td style="text-align: center;">恋ひ</td>
<td style="text-align: center;">恋ひ</td>
<td style="text-align: center;">恋ふ</td>
<td style="text-align: center;">恋ふる</td>
<td style="text-align: center;">恋ふれ</td>
<td style="text-align: center;">恋ひよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">バ上二</td>
<td style="text-align: center;">詫び</td>
<td style="text-align: center;">詫び</td>
<td style="text-align: center;">詫ぶ</td>
<td style="text-align: center;">詫ぶる</td>
<td style="text-align: center;">詫ぶれ</td>
<td style="text-align: center;">詫びよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">マ上二</td>
<td style="text-align: center;">恨み</td>
<td style="text-align: center;">恨み</td>
<td style="text-align: center;">恨む</td>
<td style="text-align: center;">恨むる</td>
<td style="text-align: center;">恨むれ</td>
<td style="text-align: center;">恨みよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ヤ上二</td>
<td style="text-align: center;">老い</td>
<td style="text-align: center;">老い</td>
<td style="text-align: center;">老ゆ</td>
<td style="text-align: center;">老ゆる</td>
<td style="text-align: center;">老ゆれ</td>
<td style="text-align: center;">老いよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ラ上二</td>
<td style="text-align: center;">懲り</td>
<td style="text-align: center;">懲り</td>
<td style="text-align: center;">懲る</td>
<td style="text-align: center;">懲るる</td>
<td style="text-align: center;">懲るれ</td>
<td style="text-align: center;">懲りよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">カ下二</td>
<td style="text-align: center;">受け</td>
<td style="text-align: center;">受け</td>
<td style="text-align: center;">受く</td>
<td style="text-align: center;">受くる</td>
<td style="text-align: center;">受くれ</td>
<td style="text-align: center;">受けよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ガ下二</td>
<td style="text-align: center;">告げ</td>
<td style="text-align: center;">告げ</td>
<td style="text-align: center;">告ぐ</td>
<td style="text-align: center;">告ぐる</td>
<td style="text-align: center;">告ぐれ</td>
<td style="text-align: center;">告げよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">タ下二</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;">捨つ</td>
<td style="text-align: center;">捨つる</td>
<td style="text-align: center;">捨つれ</td>
<td style="text-align: center;">捨てよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ダ下二</td>
<td style="text-align: center;">出で</td>
<td style="text-align: center;">出で</td>
<td style="text-align: center;">出づ</td>
<td style="text-align: center;">出づる</td>
<td style="text-align: center;">出づれ</td>
<td style="text-align: center;">出でよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ハ下二</td>
<td style="text-align: center;">答へ</td>
<td style="text-align: center;">答へ</td>
<td style="text-align: center;">答ふ</td>
<td style="text-align: center;">答ふる</td>
<td style="text-align: center;">答ふれ</td>
<td style="text-align: center;">答へよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">バ下二</td>
<td style="text-align: center;">並べ</td>
<td style="text-align: center;">並べ</td>
<td style="text-align: center;">並ぶ</td>
<td style="text-align: center;">並ぶる</td>
<td style="text-align: center;">並ぶれ</td>
<td style="text-align: center;">並べよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">サ下二</td>
<td style="text-align: center;">失せ</td>
<td style="text-align: center;">失せ</td>
<td style="text-align: center;">失す</td>
<td style="text-align: center;">失する</td>
<td style="text-align: center;">失すれ</td>
<td style="text-align: center;">失せよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ザ下二</td>
<td style="text-align: center;">混ぜ</td>
<td style="text-align: center;">混ぜ</td>
<td style="text-align: center;">混ず</td>
<td style="text-align: center;">混ずる</td>
<td style="text-align: center;">混ずれ</td>
<td style="text-align: center;">混ぜよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">マ下二</td>
<td style="text-align: center;">求め</td>
<td style="text-align: center;">求め</td>
<td style="text-align: center;">求む</td>
<td style="text-align: center;">求むる</td>
<td style="text-align: center;">求むれ</td>
<td style="text-align: center;">求めよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ヤ下二</td>
<td style="text-align: center;">見え</td>
<td style="text-align: center;">見え</td>
<td style="text-align: center;">見ゆ</td>
<td style="text-align: center;">見ゆる</td>
<td style="text-align: center;">見ゆれ</td>
<td style="text-align: center;">見えよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ラ下二</td>
<td style="text-align: center;">入れ</td>
<td style="text-align: center;">入れ</td>
<td style="text-align: center;">入る</td>
<td style="text-align: center;">入るる</td>
<td style="text-align: center;">入るれ</td>
<td style="text-align: center;">入れよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ワ下二</td>
<td style="text-align: center;">植ゑ</td>
<td style="text-align: center;">植ゑ</td>
<td style="text-align: center;">植う</td>
<td style="text-align: center;">植うる</td>
<td style="text-align: center;">植うれ</td>
<td style="text-align: center;">植ゑよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ア下二「単字」</td>
<td style="text-align: center;"><code>@ 得 え</code></td>
<td style="text-align: center;"><code>@ 得 え</code></td>
<td style="text-align: center;"><code>@ 得 う</code></td>
<td style="text-align: center;"><code>@ 得 う</code>る</td>
<td style="text-align: center;"><code>@ 得 う</code>れ</td>
<td style="text-align: center;"><code>@ 得 え</code>よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ナ下二「単字」</td>
<td style="text-align: center;"><code>@ 寝 ね</code></td>
<td style="text-align: center;"><code>@ 寝 ね</code></td>
<td style="text-align: center;"><code>@ 寝 ぬ</code></td>
<td style="text-align: center;"><code>@ 寝 ぬ</code>る</td>
<td style="text-align: center;"><code>@ 寝 ぬ</code>れ</td>
<td style="text-align: center;"><code>@ 寝 ね</code>よ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ハ下二「単字」</td>
<td style="text-align: center;"><code>@ 経 へ</code></td>
<td style="text-align: center;"><code>@ 経 へ</code></td>
<td style="text-align: center;"><code>@ 経 ふ</code></td>
<td style="text-align: center;"><code>@ 経 ふ</code>る</td>
<td style="text-align: center;"><code>@ 経 ふ</code>れ</td>
<td style="text-align: center;"><code>@ 経 へ</code>よ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ラ変</td>
<td style="text-align: center;">有ら</td>
<td style="text-align: center;">有り</td>
<td style="text-align: center;">有り</td>
<td style="text-align: center;">有る</td>
<td style="text-align: center;">有れ</td>
<td style="text-align: center;">有れ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ナ変</td>
<td style="text-align: center;">死な</td>
<td style="text-align: center;">死に</td>
<td style="text-align: center;">死ぬ</td>
<td style="text-align: center;">死ぬる</td>
<td style="text-align: center;">死ぬれ</td>
<td style="text-align: center;">死ね</td>
</tr>
<tr class="even">
<td style="text-align: center;">サ変</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">し</td>
<td style="text-align: center;">す</td>
<td style="text-align: center;">する</td>
<td style="text-align: center;">すれ</td>
<td style="text-align: center;">せよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">カ変</td>
<td style="text-align: center;">こ</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">く</td>
<td style="text-align: center;">くる</td>
<td style="text-align: center;">くれ</td>
<td style="text-align: center;">こ・こよ</td>
</tr>
</tbody>
</table>
<p>和现代语对比，可以基本归纳出下述动词演变规律：</p>
<ul>
<li><p>古语的四段动词几乎完全演化为现代语五段动词，且除了某一行假名标记发生变动（即「ふ」转写为「う」），其余保持规则。当然，该规则存在例外，类似「借る、足る、飽く」等四段动词则演化为了现代的上一段动词「借りる、足りる、飽きる」。</p></li>
<li><p>古语的二段动词在现代语之中的残留痕迹较为明显。特征是除去词干外，有类似「きる、ける」的以イ段或者エ段假名加上「る」结尾的双假名词尾。这里的イ段或者エ段假名是古语残留的词尾，但是已经固化，而「る」则是现代语的词尾。另外，由于古语下一段动词完全合并入现代语五段动词，所以现代的下一段动词几乎全部都是古语下二段动词的演变产物。</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">文語</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;">捨つ</td>
<td style="text-align: center;">捨つる</td>
<td style="text-align: center;">捨つれ</td>
<td style="text-align: center;">捨てよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">現代語</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;">捨て</td>
<td style="text-align: center;"><strong>捨てる</strong></td>
<td style="text-align: center;"><strong>捨てる</strong></td>
<td style="text-align: center;"><strong>捨てれ</strong></td>
<td style="text-align: center;"><strong>捨てろ・捨てよ</strong></td>
</tr>
</tbody>
</table>
<p>但是在合流过程中，三个单音节的下二段动词「う、ぬ、ふ」演化路径有差别。「ぬ、ふ」类似一般的下二段动词，演化为现代的下一段动词「寝る、経る」。但是「う」则一定程度上保留了下二段动词的痕迹，演化出了两个动词「うる、える」，汉字表记均为「得る」。一般而言，使用较多的是「える」读音，但是「うる」音依然可能会出现，这也就是一种演化残留。</p>
<p>当然，该规则存在例外，类似「恨む」等上二段动词则演化为了现代的五段动词「恨む」。</p>
<ul>
<li>古语的上一段动词几乎完全演化为现代的上一段动词，且几乎没有发生活用规则变动。而古语唯一的下一段动词则直接变为现代的五段动词。</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">文語</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">きる</td>
<td style="text-align: center;">きる</td>
<td style="text-align: center;">きれ</td>
<td style="text-align: center;">きよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">現代語</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">きる</td>
<td style="text-align: center;">きる</td>
<td style="text-align: center;">きれ</td>
<td style="text-align: center;"><strong>きろ・きよ</strong></td>
</tr>
</tbody>
</table>
<p>可以发现现代语中结构简单的上一段动词大部分为古语上一段动词的残余。事实上古语中的上一段动词也极少，大约仅有二十个左右。</p>
<p>当然，该规则存在例外，古语上一段动词「射る」演化为了现代上一段动词「射る」，但是该动词在部分条件下出现了五段动词的活用形式，如「射った」。</p>
<ul>
<li>古语的ラ变动词以及ナ变动词除了部分不常用词语外完全合并进现代语五段动词，而カ变动词以及サ变动词除了部分不常用词语外在现代语中保持变格活用。</li>
</ul>
<p>此外补充一个常用定义，即<strong>ラ变型</strong>。ラ变型指的是与ラ变动词活用方式一致的一类词语，包括形容词的辅助活用和部分助动词。</p>
<h1 id="古日语的形容词分类与活用">古日语的形容词分类与活用</h1>
<p>古语形容词分为两类，即ク活用形容词和シク活用形容词，活用规则见下。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ク「主」</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無く</td>
<td style="text-align: center;">無し</td>
<td style="text-align: center;">無き</td>
<td style="text-align: center;">無けれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">ク「補助」</td>
<td style="text-align: center;">無から</td>
<td style="text-align: center;">無かり</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無かる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無かれ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">シク「主」</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しく</td>
<td style="text-align: center;">美し</td>
<td style="text-align: center;">美しき</td>
<td style="text-align: center;">美しけれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">シク「補助」</td>
<td style="text-align: center;">美しから</td>
<td style="text-align: center;">美しかり</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しかる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しかれ</td>
</tr>
</tbody>
</table>
<p>这里的辅助活用则是一种特殊的使用方法，也就是将形容词连用形「○く」加上「あり」后用「あり」的活用来弥补原先形容词规则中缺失的未然形和命令形。在演变过程中，「○くあり」逐渐连读为「○かり」，从而可以认为这是形容词的一种特殊活用，不将其认为是「あり」的活用。由于形容词辅助活用继承自ラ变动词的活用，所以辅助活用的形容词是一种ラ变型。</p>
<p>辅助活用的主要使用场景为接续各类助动词以及利用命令形表达命令，其余场景下形容词多采用主活用。当然，该规则存在例外，形容词接续打消接续助词「で」的时候使用辅助活用，而接续断定助动词「なり」的时候使用主活用。</p>
<p>古语形容词演变为现代语形容词的时候，两种活用合流，并且黏性词尾从「し」变为「い」。具体演变为，ク活用形容词直接将「し」变为「い」，而シク活用形容词直接加上新词尾「い」。而各种活用中，加「あり」词尾产生的活用逐步消失或进一步演变，而现代语中形容词规则占主流的依然是形容词的主活用规则。对比表如下。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ク「主」</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無く</td>
<td style="text-align: center;">無し</td>
<td style="text-align: center;">無き</td>
<td style="text-align: center;">無けれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">ク「補助」</td>
<td style="text-align: center;">無から</td>
<td style="text-align: center;">無かり</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無かる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">無かれ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">現代</td>
<td style="text-align: center;">無かろ</td>
<td style="text-align: center;">無く・無かっ</td>
<td style="text-align: center;">無い</td>
<td style="text-align: center;">無い</td>
<td style="text-align: center;">無けれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">シク「主」</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しく</td>
<td style="text-align: center;">美し</td>
<td style="text-align: center;">美しき</td>
<td style="text-align: center;">美しけれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">シク「補助」</td>
<td style="text-align: center;">美しから</td>
<td style="text-align: center;">美しかり</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しかる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">美しかれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">現代</td>
<td style="text-align: center;">美しかろ</td>
<td style="text-align: center;">美しく・美しかっ</td>
<td style="text-align: center;">美しい</td>
<td style="text-align: center;">美しい</td>
<td style="text-align: center;">美しけれ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>这种演变解释了一个语言现象，即现代语中有大量的「しい」结尾的形容词，这些形容词几乎全部是古语シク活用形容词演变的遗留。另外，现代语的形容词依然保留了部分古语用法，比如以「し」作词尾的形容词依然存留于口语中，比如「なし、よし」等惯用语。</p>
<h1 id="古日语的形容动词分类与活用">古日语的形容动词分类与活用</h1>
<p>古语形容动词分为两类，即ナリ活用形容词和タリ活用形容词，活用规则见下。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ナリ</td>
<td style="text-align: center;">静かなら</td>
<td style="text-align: center;">静かなり・静かに</td>
<td style="text-align: center;">静かなり</td>
<td style="text-align: center;">静かなる</td>
<td style="text-align: center;">静かなれ</td>
<td style="text-align: center;">静かなれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">タリ</td>
<td style="text-align: center;">平然たら</td>
<td style="text-align: center;">平然たり・平然と</td>
<td style="text-align: center;">平然たり</td>
<td style="text-align: center;">平然たる</td>
<td style="text-align: center;">平然たれ</td>
<td style="text-align: center;">平然たれ</td>
</tr>
</tbody>
</table>
<p>这里所有的活用和ラ变动词很类似。有一种看法是，形容动词活用本身就是词干连用形接续「あり」后用「あり」的活用表达的。而和形容词辅助活用发生连读类似，「○にあり・○とあり」随后连读为「○なり・○たり」，从而形成了形容动词活用规则。基于此，由于形容动词活用继承自ラ变动词的活用，所以形容动词是一种ラ变型。</p>
<p>一般而言，形容动词接续一般动词、接续助词「て、して」的时候使用「○に・○と」连用形，其余场景下使用「○なり・○たり」连用形。</p>
<p>古语形容动词演变为现代语形容词的时候，两种活用并未合流，并且活用词尾发生了较大的变化。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ナリ</td>
<td style="text-align: center;">静かなら</td>
<td style="text-align: center;">静かなり・静かに</td>
<td style="text-align: center;">静かなり</td>
<td style="text-align: center;">静かなる</td>
<td style="text-align: center;">静かなれ</td>
<td style="text-align: center;">静かなれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">現代ダ</td>
<td style="text-align: center;">静かだろ</td>
<td style="text-align: center;">静かで・静かだっ・静かに</td>
<td style="text-align: center;">静かだ</td>
<td style="text-align: center;">静かな</td>
<td style="text-align: center;">静かなら</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">タリ</td>
<td style="text-align: center;">平然たら</td>
<td style="text-align: center;">平然たり・平然と</td>
<td style="text-align: center;">平然たり</td>
<td style="text-align: center;">平然たる</td>
<td style="text-align: center;">平然たれ</td>
<td style="text-align: center;">平然たれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">現代タルト</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">平然と</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">平然たる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>目前来看，形容动词的演变是相当不规则的。</p>
<div class="note info no-icon"><p>目前我正使用的古日语课程之中，是这样介绍ナリ活用形容动词演变的。</p>
<p>首先是「○で」连用形的产生。在使用ナリ活用形容动词修饰的时候常常需要使用连用形接续助词「て」，也就是ナリ活用形容动词常常具有词尾「○にて」。最后「に」音脱落并发生浊化，将助词「て」吸收产生现代语第一连用形「○で」。</p>
<p>室町时代，ナリ活用形容动词已经出现了尾音「る」脱落的现象，即连体形已经逐步以「な」音结尾，并且在部分情况下，终止形也开始使用「な」结尾的形式。另一方面，新产生的连用形「○で」接续动词「ある」产生了新的连体和终止形「○である」，这种形式之后又发生了尾音「る」脱落，演变为「○であ」。而这个形式在关西演化为「○ぢゃ」，在关东演化为「○だ」。此时这些形式均处于混用状态，最后「○だ」使用频率压过其余形式变为现代语的终止形，「○な」则压过其他形式变为现代语的连体形。</p>
<p>上述演化中的连体（终止）形「○ぢゃ」开始用于接续「う、た」两个助词，分别表示意识和过去，这分别是未然形和连用形的作用。也就是说未然形接续「う」开始出现「○ぢゃらう」的形式，连用形接续「た」开始出现「○ぢゃった」的形式。随后「ぢゃら」和「ぢゃっ」音便为「だろ」和「だっ」，形成了现代语的未然形和第二连用形。</p>
<p>现代语假定形「○なら」则是由古语已然形「○なれ」接续助词「ば」得到「○なれば」后约音产生。</p>
<p>命令形则在演化的时候由于可以使用动词命令形代替表示而逐步丢失。</p>
</div>
<div class="note info no-icon"><p>形容词和形容动词的词干指的是，形容词删去活用词尾「し」，形容动词删去活用词尾「なり・たり」之后剩余的部分。词干具有以下常见的使用场景：</p>
<ul>
<li>与感叹词「あな」和间投助词「や」形成「あな、○○や」的句式，这里间投助词可省略。如「あな、をさなや」以及「あな、きよら」。该句式用于形成感叹，语意基本类似现代语「ああ、○○だなあ」。</li>
<li>接续格助词「の」形成连体修饰词用于修饰体言。如「<code>@ 心憂 こころう</code>のことや」以及「をこのしれもの」。</li>
<li>（仅限形容词词干）与体言「××」、间投助词「を」和接尾词「み」形成「××を○○み」的句式，这里间投助词可省略。该句式常见于和歌。如「瀬をはやみ」。该句式语意基本类似现代语「××が○○なので」。</li>
</ul>
</div>
<h1 id="用言的音便准则">用言的音便准则</h1>
<p>四段动词、ラ变动词与ナ变动词的连用形在接续虚词「て、たり」的时候会发生音便，其音便的准则如下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">元の形</th>
<th style="text-align: center;">音便形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">動カ四</td>
<td style="text-align: center;">書きて</td>
<td style="text-align: center;">書いて</td>
</tr>
<tr class="even">
<td style="text-align: center;">動ガ四</td>
<td style="text-align: center;">急ぎて</td>
<td style="text-align: center;">急いで</td>
</tr>
<tr class="odd">
<td style="text-align: center;">動ハ四</td>
<td style="text-align: center;">思ひて</td>
<td style="text-align: center;">思うて</td>
</tr>
<tr class="even">
<td style="text-align: center;">動マ四</td>
<td style="text-align: center;">頼みて</td>
<td style="text-align: center;">頼うで</td>
</tr>
<tr class="odd">
<td style="text-align: center;">動バ四</td>
<td style="text-align: center;">飛びて</td>
<td style="text-align: center;">飛んで</td>
</tr>
<tr class="even">
<td style="text-align: center;">動タ四</td>
<td style="text-align: center;">立ちて</td>
<td style="text-align: center;">立つて</td>
</tr>
<tr class="odd">
<td style="text-align: center;">動ナ変</td>
<td style="text-align: center;">死にて</td>
<td style="text-align: center;">死んで</td>
</tr>
<tr class="even">
<td style="text-align: center;">動ラ変</td>
<td style="text-align: center;">ありて</td>
<td style="text-align: center;">あつて</td>
</tr>
</tbody>
</table>
<p>古语中的促音标记「つ」依然使用大字书写，但是读音依然是促音。</p>
<p>另外，形容词主活用的连体形在接续体言或者相关虚词时也会发生音便，具体形式为活用词尾的「き」辅音脱落为「い」。其音便的准则如下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">元の形</th>
<th style="text-align: center;">音便形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形ク</td>
<td style="text-align: center;">強き人</td>
<td style="text-align: center;">強い人</td>
</tr>
<tr class="even">
<td style="text-align: center;">形シク</td>
<td style="text-align: center;">美しき人</td>
<td style="text-align: center;">美しい人</td>
</tr>
</tbody>
</table>
<p>而主活用的连用形在接续用言或者相关虚词时也会发生音变，具体形式为活用词尾的「く」辅音脱落为「う」。其音便的准则如下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">元の形</th>
<th style="text-align: center;">音便形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形ク</td>
<td style="text-align: center;">強くて</td>
<td style="text-align: center;">強うて</td>
</tr>
<tr class="even">
<td style="text-align: center;">形シク</td>
<td style="text-align: center;">美しくて</td>
<td style="text-align: center;">美しうて（<strong>読み：</strong>美しゅうて）</td>
</tr>
</tbody>
</table>
<p>ラ变型在接续助动词「なり、めり、べし」时发生拨音便。其音便的准则如下表，需要注意的是，有时假名「ん」会略去：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">元の形</th>
<th style="text-align: center;">音便形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">動ラ変</td>
<td style="text-align: center;">あるめり</td>
<td style="text-align: center;">あめり・あんめり</td>
</tr>
<tr class="even">
<td style="text-align: center;">形シク</td>
<td style="text-align: center;">美しかるべし</td>
<td style="text-align: center;">美しかべし・美しかんべし</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形動ナリ</td>
<td style="text-align: center;">静かなるべし</td>
<td style="text-align: center;">静かなべし・静かなんべし</td>
</tr>
<tr class="even">
<td style="text-align: center;">助動</td>
<td style="text-align: center;">なるなり</td>
<td style="text-align: center;">ななり・なんなり</td>
</tr>
</tbody>
</table>
<h1 id="系结法则">系结法则</h1>
<p>系结法则（日语：係り結びの法則）是古日语中独有，现代已经消亡的语法。系结法则表述为，句中存在的特殊的系助词会导致句末的活用词语须使用特殊的活用形式而非一般用于结句的终止形。常见的系助词包括「ぞ、なむ、や、か、こそ」。观察下述例句：</p>
<ul>
<li>いづれの山<strong>か</strong>天に<strong>近き</strong>。</li>
</ul>
<p>可以注意到，由于句中出现了系助词「か」，句末的形容词未使用一般的终止形结句，而是使用了连体形。</p>
<p>从句末使用的活用形式角度分类，上述系助词分为：</p>
<ul>
<li>（要求句末是连体形）ぞ、なむ、か、や</li>
<li>（要求句末是已然形）こそ</li>
</ul>
<p>其中，「ぞ、なむ、こそ」用于表示强调语义，一般不译出，例如下述句：</p>
<ul>
<li>梅<strong>ぞ</strong>咲か<strong>む</strong>。 → 梅が咲くだろう。</li>
<li>梅<strong>なむ</strong>咲か<strong>む</strong>。 → 梅が咲くだろう。</li>
<li>梅<strong>こそ</strong>咲か<strong>め</strong>。 → 梅が咲くだろう。</li>
</ul>
<p>另外，「こそ」多有逆接语气，可以译出为现代语的逆接助词，例如下述句：</p>
<ul>
<li>中垣<strong>こそあれ</strong>、一つ家のやうなり。 → 中垣がある<strong>けれど</strong>、…。</li>
</ul>
<p>「か、や」用于表示疑问、反语语义，具体表示其中何种语义则根据上下文判定，例如下述句：</p>
<ul>
<li>梅<strong>や</strong>咲か<strong>む</strong>。 → （疑問）梅が咲くだろうか。</li>
<li>梅<u>いかで</u><strong>か</strong>咲か<strong>む</strong>。 → （反語）梅がどうして咲くだろうか、いや咲かないだろう。</li>
</ul>
<p>此外需要注意系助词和其他助词的连用。这些连用包括「もぞ、もこそ、やは、かは」。</p>
<p>其中「もぞ、もこそ」常常表达现代语「〜すると困る、〜すると大変だ」的语义：</p>
<ul>
<li>門よくさしてよ。雨<strong>もぞ</strong>降る。 → …。雨が降ったら大変だ。</li>
<li>なほ、あやまり<strong>もこそ</strong>あれと、あやしむ人あり。 → …、誤りがあったら困る、…。</li>
</ul>
<p>而「やは、かは」的连用则代表该系助词表达反语语义的概率较高：</p>
<ul>
<li>（この人より）まさるべき<strong>やは</strong>ある。</li>
</ul>
<h1 id="古日语助动词">古日语助动词</h1>
<h2 id="被动可能自发尊敬助动词るらる">被动、可能、自发、尊敬助动词「る・らる」</h2>
<p>该助动词遵从下二段活用，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">る</td>
<td style="text-align: center;">れ</td>
<td style="text-align: center;">れ</td>
<td style="text-align: center;">る</td>
<td style="text-align: center;">るる</td>
<td style="text-align: center;">るれ</td>
<td style="text-align: center;">れよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">らる</td>
<td style="text-align: center;">られ</td>
<td style="text-align: center;">られ</td>
<td style="text-align: center;">らる</td>
<td style="text-align: center;">らるる</td>
<td style="text-align: center;">らるれ</td>
<td style="text-align: center;">られよ</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>四段、ラ变、ナ变动词使用未然形接续「る」</li>
<li>此外的动词使用未然形「らる」</li>
</ul>
<p>该助动词基本与现代助动词「れる・られる」语义近似，可以观察下述例句。</p>
<p>首先是自发语义，其经常用于「思ふ、思ひ出づ、泣く」等动词之后。该语义多译作「自然と〜れる・自然と〜られる」：</p>
<ul>
<li>都のみぞ<u>思ひやら</u><strong>るる</strong>。 → 都のことばかりが自然と思いやられる。</li>
<li>住み慣れしふるさと、限りなく<u>思ひ出で</u><strong>らる</strong>。 → 住み慣れた元の家が、とても自然と思い出される。</li>
</ul>
<p>这里第一句还体现了「ぞ」的系结法则。</p>
<p>之后是被动语义。该语义多译作「〜れる・〜られる」：</p>
<ul>
<li>人に<u>笑は</u><strong>れ</strong>けり。 → 人に笑われた。</li>
<li>ありがたきもの、<code>@ 舅 しゅうと</code>に<u>ほめ</u><strong>らるる</strong><code>@ 婿 むこ</code>。 → めったいにないもの、舅にほめられる婿。</li>
</ul>
<p>然后是可能语义。该语义多译作「〜れる・〜られる」：</p>
<ul>
<li>（横になっても）つゆ<u>まどろま</u><strong>れ</strong>ず。 → まったく眠ることができない。</li>
<li>さらにこそ<u>信ぜ</u><strong>られ</strong>ね。 → まったく信じることができない。</li>
</ul>
<p>这里第二句还体现了「こそ」的系结法则，「ね」是助动词「ず」的已然形。</p>
<p>最后是尊敬语义，需要注意的是在结构「れ給ふ、られ給ふ」中该助动词往往不是尊敬语义。该语义多译作「〜れる・〜られる」：</p>
<ul>
<li>（大将が）福原へこそ<u>かへら</u><strong>れ</strong>けれ。 → 福原へお帰りになった。</li>
<li>（光源氏が）絵ども<u>集め</u><strong>らる</strong>。 → 絵など集めなさる。</li>
</ul>
<h2 id="使役尊敬助动词すさすしむ">使役、尊敬助动词「す・さす、しむ」</h2>
<p>这两个助动词均遵从下二段活用，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">す</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">す</td>
<td style="text-align: center;">する</td>
<td style="text-align: center;">すれ</td>
<td style="text-align: center;">せよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">さす</td>
<td style="text-align: center;">させ</td>
<td style="text-align: center;">させ</td>
<td style="text-align: center;">さす</td>
<td style="text-align: center;">さする</td>
<td style="text-align: center;">さすれ</td>
<td style="text-align: center;">させよ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">しむ</td>
<td style="text-align: center;">しめ</td>
<td style="text-align: center;">しめ</td>
<td style="text-align: center;">しむ</td>
<td style="text-align: center;">しむる</td>
<td style="text-align: center;">しむれ</td>
<td style="text-align: center;">しめよ</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>四段、ラ变、ナ变动词使用未然形接续「す」</li>
<li>此外的动词使用未然形「さす」</li>
<li>所有具有活用的词语均使用未然形接续「しむ」</li>
</ul>
<p>「す・さす」演化为现代助动词「せる・させる」的时候丢失了尊敬语义（仅保留在使役被动的最高敬意用法中，该用法几乎被视为过时），使役语义则几乎一致。「しむ」虽然演化为「しめる」，然而由于使用范围过于狭窄，现代语不将其作为独立的助动词考虑。</p>
<p>首先考虑使役语义。该语义多译作「〜せる・〜させる」：</p>
<ul>
<li>（かぐや姫を）妻のおうなに預けて<u><code>@ 養 やしな</code>は</u><strong>す</strong>。 → 妻のおばあさんに預けて養わせる。</li>
<li>（女房に）<code>@ 御格子 みこうし</code>を<u>あげ</u><strong>さす</strong>。 → 御格子を上げさせる。</li>
<li>人を<u>喜ば</u><strong>しむ</strong>。 → 人を喜ばせる。</li>
</ul>
<p>然后是尊敬语义，一般而言表尊敬语义时，会配合「給ふ、おはす、おはします」等表尊敬的词语同时使用。该语义多译作「〜なさる、お〜になる」：</p>
<ul>
<li>（帝が）いみじう<u>驚か</u><strong>せ</strong>給ふ。 → ひどく驚きなさる。</li>
<li>（中宮が）<u>出で</u><strong>させ</strong>給ふ。 → 出かけなさる。</li>
<li>（藤原道真が）<u>作ら</u><strong>しめ</strong>給ふ詩。 → 作りなさる漢詩。</li>
</ul>
<p>当然，与表尊敬的词语连用的时候也有可能不表尊敬，尤其是与尊敬仅仅是常用语义之一的助动词「る・らる」连用的时候。</p>
<ul>
<li>（道長が）御随身召して遣水を<u>はらは</u><strong>せ</strong>給ふ。 → …掃除させなさる。</li>
</ul>
<p>这里虽然和「給ふ」连用，但依然表示使役语义，尊敬的语义仅仅通过「給ふ」表示。这里是因为“打扫”这一行为并不是主语发出的，主语所发出的行为应当是“命令随从”。</p>
<h2 id="过去助动词きけり">过去助动词「き、けり」</h2>
<p>这两个助动词一个不规则，一个为ラ变型，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">き</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">し</td>
<td style="text-align: center;">しか</td>
<td style="text-align: center;">○</td>
</tr>
<tr class="even">
<td style="text-align: center;">けり</td>
<td style="text-align: center;">（けら）</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">けり</td>
<td style="text-align: center;">ける</td>
<td style="text-align: center;">けれ</td>
<td style="text-align: center;">○</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>所有具有活用的词语均使用连用形接续「き、けり」</li>
<li>カ变、サ变动词接续「き」时有例外，见下表</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">す＋き</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;"><strong>し</strong>き</td>
<td style="text-align: center;"><strong>せ</strong>し</td>
<td style="text-align: center;"><strong>せ</strong>しか</td>
<td style="text-align: center;">○</td>
</tr>
<tr class="even">
<td style="text-align: center;">く＋き</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;"><strong>き</strong>し・<strong>こ</strong>し</td>
<td style="text-align: center;"><strong>き</strong>しか・<strong>こ</strong>しか</td>
<td style="text-align: center;">○</td>
</tr>
</tbody>
</table>
<p>这种不规则是因为如果按照规则的连用形接续，则有可能形成同音连读的「<strong>し</strong>し、<strong>し</strong>しか、<strong>き</strong>き」等词组，故特别允许使用未然形接续以防止这一类现象。</p>
<p>「き」表达说话人亲身经历的过去。该语义多译作「〜た」：</p>
<ul>
<li>（鬼が私を）殺さむと<u>し</u><strong>き</strong>。 → 殺そうとした。</li>
</ul>
<p>此外，「き」的未然形一般仅用于表示反事实假想，一般使用在句型「〜せば〜まし」之中。该语义多译作「〜なら、〜だろうに」：</p>
<ul>
<li>世の中にたえて桜の<u>なかり</u><strong>せ</strong><em>ば</em>、春の心はのどけから<em>まし</em>。 → この世の中にまったく桜というものがなったら、春における人の心は穏やかであるだろうに。</li>
</ul>
<p>「けり」表达未亲身经历的过去，即一般表示传闻。该语义多译作「〜たそうだ」：</p>
<ul>
<li>むかし、男<u>あり</u><strong>けり</strong>。 → 昔は男がいたそうだ。</li>
</ul>
<p>此外，在「〜なりけり」句式中以及和歌等场景下，该助动词还可以表示咏叹语义。该语义多译作「〜だなあ」：</p>
<ul>
<li>「今宵は十五夜なりけり」と思ひ出づ。 → 今宵は十五夜であったなあ。</li>
</ul>
<h2 id="完了强意并列助动词つぬ">完了、强意、并列助动词「つ、ぬ」</h2>
<p>这两个助动词一个遵从下二段活用，一个为ナ变型，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">つ</td>
<td style="text-align: center;">て</td>
<td style="text-align: center;">て</td>
<td style="text-align: center;">つ</td>
<td style="text-align: center;">つる</td>
<td style="text-align: center;">つれ</td>
<td style="text-align: center;">てよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぬ</td>
<td style="text-align: center;">な</td>
<td style="text-align: center;">に</td>
<td style="text-align: center;">ぬ</td>
<td style="text-align: center;">ぬる</td>
<td style="text-align: center;">ぬれ</td>
<td style="text-align: center;">ね</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>所有具有活用的词语均使用连用形接续「つ、ぬ」</li>
</ul>
<p>这两个助动词常见的助动词连用词组包括：</p>
<ul>
<li>（完了）つ、ぬ＋（過去）き、けり → <strong>て</strong>き、<strong>て</strong>けり、<strong>に</strong>き、<strong>に</strong>けり（訳：〜た、〜てしまった）</li>
<li>（強意）つ、ぬ＋（推量）む、べし… → <strong>な</strong>む、<strong>て</strong>む、<strong>に</strong>けむ、<strong>て</strong>けむ、<strong>ぬ</strong>らし、<strong>つ</strong>らし</li>
</ul>
<div class="note info no-icon"><p>介绍助动词连用词组的目的是用来区分助动词的语义。上述连用词组应该理解为，「つ、ぬ」与表过去的助动词连用时多表示完了，与表推量的助动词连用时多表示强意。</p>
</div>
<p>这两个助动词最常用的语义是表示完了。该语义多译作「〜た、〜てしまった」：</p>
<ul>
<li>秋田、（この子の名前を）なよ竹のかぐや姫と<u>つけ</u><strong>つ</strong>。 → 秋田はなよ竹のかぐや姫とつけた。</li>
<li>三河の国八橋といふ所に<u>至り</u><strong>ぬ</strong>。 → …というところに着いた。</li>
<li>（夢を）たのみ<u>そめ</u><strong>て</strong><em>き</em>。 → あてにし始めてしまった。</li>
<li>逃げ<u>去り</u><strong>に</strong><em>けり</em>。 → 逃げ去ってしまった。</li>
</ul>
<p>然后是强意语义。该语义多译作「きっと〜、はやく〜」：</p>
<ul>
<li>（港に）御舟（私たちは）<u>返し</u><strong>て</strong>む。 → …早く引き返そう。</li>
<li>風<u>吹き</u><strong>ぬ</strong>べし。 → 風がきっと吹くだろう。</li>
</ul>
<p>自镰仓时代以来，这两个助动词逐渐发展出了表示并列的语义。该语义多译作「〜たり、〜たり」：</p>
<ul>
<li>僧都、（舟に）乗つては<u>降り</u><strong>つ</strong>、降りては<u>乗り</u><strong>つ</strong>。 → 僧都は（舟に）乗っては降りたり、降りては乗ったり。</li>
<li>（扇が）<u>浮き</u><strong>ぬ</strong>、<u>沈み</u><strong>ぬ</strong>。 → （扇が）浮いたり、沈んだり。</li>
</ul>
<h2 id="完了存续助动词たりり">完了、存续助动词「たり、り」</h2>
<p>这两个助动词均为ラ变型，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">たり</td>
<td style="text-align: center;">たら</td>
<td style="text-align: center;">たり</td>
<td style="text-align: center;">たり</td>
<td style="text-align: center;">たる</td>
<td style="text-align: center;">たれ</td>
<td style="text-align: center;">たれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">り</td>
<td style="text-align: center;">ら</td>
<td style="text-align: center;">り</td>
<td style="text-align: center;">り</td>
<td style="text-align: center;">る</td>
<td style="text-align: center;">れ</td>
<td style="text-align: center;">れ</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>所有具有活用的词语均使用连用形接续「たり」</li>
<li>四段动词使用已然形（命令形）接续「り」，サ变动词使用未然形接续「り」</li>
</ul>
<p>这两个助动词最常用的语义是表示完了。该语义多译作「〜た、〜てしまった」：</p>
<ul>
<li>（お寺の住職が）もの、酒<u>おこせ</u><strong>たり</strong>。 → …食べ物やお酒を送ってきた。</li>
<li>（まったく鬼に）<u>会へ</u><strong>る</strong>者なし。 → …会った者はいない。</li>
</ul>
<p>其次，这两个助动词还可以用于表示存续。该语义多译作「〜ている、〜てある」：</p>
<ul>
<li>（水辺に）かきつばたいとおもしろく<u>咲き</u><strong>たり</strong>。 → …おもしろく咲いている。</li>
<li>何とも<u>思へ</u><strong>ら</strong>ず。 → 何とも思っていない。</li>
</ul>
<div class="note info no-icon"><p>如果先学过现代日语，类似「会へ<strong>る</strong>人、知れ<strong>る</strong>もの」之类的表达，真的很容易被误认为是可能动词。事实上，可能动词是很晚才成形的语法，中古日语完全没有。所以，这种表达，一定一定注意是助动词「り」的连体形。这个助动词只有一个假名而且还很容易混在动词后面（「き」已经算是守序的了，它的活用形基本都很显眼，「せ、し」什么的），所以千万注意。</p>
</div>
<h2 id="推量意志适当劝诱婉曲假定助动词むむず">推量、意志、适当、劝诱、婉曲、假定助动词「む、むず」</h2>
<p>这两个助动词一个遵从四段活用，一个遵从下二段活用，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">む</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">む</td>
<td style="text-align: center;">む</td>
<td style="text-align: center;">め</td>
<td style="text-align: center;">○</td>
</tr>
<tr class="even">
<td style="text-align: center;">むず</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">むず</td>
<td style="text-align: center;">むずる</td>
<td style="text-align: center;">むずれ</td>
<td style="text-align: center;">○</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>所有具有活用的词语均使用未然形接续「む、むず」</li>
</ul>
<p>在主语是第三人称时，这两个助动词多表推量语义。该语义多译作「〜だろう」：</p>
<ul>
<li>深きゆゑ<u>あら</u><strong>む</strong>。 → 深い理由があるのだろう。</li>
</ul>
<p>而主语是第一人称时，这两个助动词多表意志语义。该语义多译作「〜たい、〜よう」：</p>
<ul>
<li>われこそ<u>死な</u><strong>め</strong>。 → 私が死のう。</li>
</ul>
<p>主语是第二人称时，这两个助动词则多表适当或者劝诱语义。</p>
<p>此时这两个助动词常用的句型有「〜なむ（や）、〜てむ（や）、〜こそ〜め」，这里「なむ、てむ」结构中的「な、て」是表示强意语义的助动词「ぬ、つ」。这两个语义多译作「〜するほうがよい、〜たらどうだ、〜してくれないか」：</p>
<ul>
<li>（あなたは）花を見て<em>こそ</em>帰り<u>給は</u><strong>め</strong>。 → 花を見てからお帰りになるほうがよい。</li>
</ul>
<p>若这两个助动词后接续体言，则多表婉曲语义。婉曲语义是一种用于软化语气的语义，并不影响所叙述事物的本质逻辑，仅仅是调整叙述的语气。该语义多译作「〜ような」：</p>
<ul>
<li><u>うれしから</u><strong>む</strong>心地もせず。 → うれしいような気持ちもしない。</li>
</ul>
<p>若这两个助动词后接续助词，则多表示假定语义。</p>
<p>此时这两个助动词常见的句型有「〜むが、〜むも、〜むは、〜むに、〜むこそ」。该语义多译作「〜としたら」：</p>
<ul>
<li>寝<u>ざら</u><strong>む</strong><em>も</em>わろかりなむ。 → 寝ないとしたら、きっと具合が悪いだろう。</li>
</ul>
<h2 id="现在推量现在原因推量现在婉曲现在传闻助动词らむ">现在推量、现在原因推量、现在婉曲、现在传闻助动词「らむ」</h2>
<p>该助动词遵从四段活用，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">らむ</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">らむ</td>
<td style="text-align: center;">らむ</td>
<td style="text-align: center;">らめ</td>
<td style="text-align: center;">○</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>除ラ变型外所有具有活用的词语均使用终止形接续「らむ」</li>
<li>ラ变型使用连体形接续「らむ」</li>
</ul>
<p>该助动词最主要的语义是现在推量，表示对当下<strong>无法观察</strong>到的事物的推量。该语义多译作「いまごろは〜ているだろう」：</p>
<ul>
<li>（竜田山を）夜半にや君がひとり<u>越ゆ</u><strong>らむ</strong>。 → この夜更けにあの人はひとりでいまごろは越えているだろうか。</li>
</ul>
<p>此外该助动词亦可表示现在原因推量语义。现在原因推量指的是对<strong>正在观察</strong>的事物或者<strong>与自身相关</strong>的事物的原因做出推测的语义。这一语义下，助动词「らむ」往往和表示原因的语句联合使用。该语义多译作「〜（ている）のだろう」：</p>
<ul>
<li>（月に生えているという<code>@ 桂 かつら</code>の木も）もみぢすればや（月も）照り<u>まさる</u><strong>らむ</strong>。 → 紅葉するので、（月も）ますます照り輝くのだろうか。</li>
</ul>
<p>这里可能需要对这句话做出点解释。这句话所描述的场景是，说话人正在赏月并给出了自己对“月光如此皎洁”这一当前观测到的事物的原因的推测，即正是因为月亮上的桂树繁茂，月光才如此皎洁。这里表示因果关系的关键词是助词「ば」，因而暗示了助动词「らむ」表示现在原因推量语义。一个可能的现代汉语翻译为“今夜月光如此皎洁，想必是月桂树上枝繁叶茂吧”。</p>
<div class="note info no-icon"><p>又得把这句著名的例句拿出来了：</p>
<ul>
<li>思ひつつ寝ればや人の見え<u>つ</u><strong>らむ</strong>。</li>
</ul>
<p>还是注意到表示原因的助词「ば」，所以助动词「らむ」表示现在原因推量语义。另外注意这里的助动词连用，即表示强意的「つ」使用终止形接续助动词「らむ」。</p>
<p>在「〜ば（や）〜らむ」这一句式中，后半句表示的是现在所观测到的现象，前半句是对这一现象的原因的推测。这一句话中，由于说话人观测到了“最终一定会见到那个人”（表示强意的「つ」在这里译作「きっと」），而说话人对此作出的原因推测是“一边想着那个人一边入睡”。因而这句话可能的现代汉语翻译为“正是因为不停思索着你的事情入睡，才一定能在梦中与你相会”。</p>
</div>
<p>与助动词「む、むず」类似，在后接体言的时候，助动词「らむ」多表示现在婉曲语义。该语义多译作「〜ような」：</p>
<ul>
<li>（あなたが）<u>思す</u><strong>らむ</strong>こと何事ぞ。 → お思いになるようなことは、どんなことか。</li>
</ul>
<p>另外，在后接体言的时候，助动词「らむ」也有可能表示现在传闻语义。该语义多译作「〜とかいう」：</p>
<ul>
<li>鸚鵡いとあはれなり。人の言ふらむことを<u>まねぶ</u><strong>らむ</strong>よ。 → …人が言うようなことを真似するとかいうことだよ。</li>
</ul>
<p>可以注意到这句话里一共有两个「らむ」，其中后者表示现在传闻语义，而前者则相应表示现在婉曲语义。</p>
<h2 id="过去推量过去原因推量过去婉曲过去传闻助动词けむ">过去推量、过去原因推量、过去婉曲、过去传闻助动词「けむ」</h2>
<p>该助动词遵从四段活用，活用表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">けむ</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">○</td>
<td style="text-align: center;">けむ</td>
<td style="text-align: center;">けむ</td>
<td style="text-align: center;">けめ</td>
<td style="text-align: center;">○</td>
</tr>
</tbody>
</table>
<p>接续规则为：</p>
<ul>
<li>所有具有活用的词语均使用连用形接续「けむ」</li>
</ul>
<p>该助动词的语义几乎和「らむ」构成对应。过去推量语义的含义是对过去的事情做出推测。该语义多译作「〜ただろう」：</p>
<ul>
<li>（翁は）心にもかなしとや<u>思ひ</u><strong>けむ</strong>。 → …思ったのだろうか。</li>
</ul>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>大二春季学期学期总结</title>
    <url>/2021/06/19/grade-2-spring-conclusion/</url>
    <content><![CDATA[<p>魔幻的大二春季学期最终还是随着自动机考试的结束而落幕了，随意写一点东西来总结一下吧。</p>
<span id="more"></span>
<p>虽然还没有出分，但我能够预料到这一学期如果按照绩点来评判，可以说过得十分坎坷。但是，这一学期还有更多的比绩点更值得重视的一些东西。</p>
<h2 id="课内学习">课内学习</h2>
<p>课内总体而言过得很不平凡，即使这一学期只有 24 学分的课程。与一年前那种 OOP 作业一发下来就赶快刷榜完成，高代选讲还愿意在课外学习很多内容的热情相比，我这一学期对课内显然是淡薄了很多。标志性的事件可以罗列出来：</p>
<ul>
<li><p>人智导 PA2 是在黄浦江上遥控卫爷写的，PA3 是在上海桌游店里打山屋惊魂的间隙交的</p></li>
<li><p>在各种情况下写过数电实验报告，包括在人大门口醉酒的时候、在去上海的火车上、在轰趴的自动麻将机上（除了考试，我每一次实验的代码都是抄的）</p></li>
<li><p>一个学期没有见过数电、自动机、人智导的老师，这三门课均让我在考试周通了宵（一个大二学生用 24 小时创造一个奇迹）</p></li>
<li><p>软件工程大作业不到最后一周都没有认真写 UI</p></li>
<li><p>高性能一气之下决定退课，虽然从未后悔过这个决定</p></li>
<li><p>英语课一个学期就做了一份作业，占比最大的 Task C（团队 pre）只花了三四天准备</p></li>
<li><p>物理实验报告分数为 9, 8.5, 8.7, 8, 8.7，上学期则是 9, 9, 9, 9.3, 9</p></li>
</ul>
<p>总之就是这学期浪了一些，或许是认清楚你清贵系的教学水平甚至还不如高中之后的一些合理举动。如果要我来评价大二下学期这些课程的话，我只能说除了《不朽的艺术》这一门课，其他的课程我丝毫没有觉得学习到了什么有用的东西。再加上期末四门专业课考试两门可以说出事故的情况，我更是愿意给这一学期以低评价。</p>
<p>我大概算了一下，反正现在绩点的浮动不会多大，还不如抓紧时间，做一些我觉得有意义的事情。</p>
<h2 id="thuinfo">THUInfo</h2>
<p>我也说过，这是我唯一拿得出来的作品。虽然之前有写过一些小型项目，它们虽然也是我探索的足迹，但总体没有 THUInfo 给我带来的成就感大。</p>
<p>但比较愧疚的是这一学期没有给 THUInfo 作出很大的贡献。寒假的时候翻新了“计划”功能，修了几个小 bug 之后，学期中除了加了比如说“今日高亮”这种小功能之外，我也就没有作出什么贡献了。</p>
<p>但是，暑假确实是想要做很大的事情的。一方面是和校内 iOS Club 搭上了关系，对方也恰好想要找到一个重点支持的项目，双方互相需要，何乐而不为呢。通过它我们找到了美工，目前也有了一个较为简单的 UI 效果图（不得不说，做设计的就是做设计的）。另外一方面是<a href="https://www.zhihu.com/question/63407413">栋栋</a>加入了团队，总之多一个技能熟练的人手是很不错的。</p>
<p>敬请期待暑假过后的 THUInfo 3 系列版本。</p>
<h2 id="社工">社工</h2>
<p>大一下学期一番折腾之后，一个学期没有加入任何学生组织。但是一个转变的契机就是 xge 和我说他和栋栋准备开发日麻，随后将我纳入了 308（科协 &amp; 算协活动室）常驻人员之中。在 308 蹲守的过程中，我也认识了科协的许多同学（再次点名“表扬”大恶人安頔）。最后决定加入科协，大概是那天去出去散心醉酒，隔天回校的时候恰好赶上 C 楼门口的智能体嘉年华。本来是不打算去的，想着去看看也没啥问题，就突然发现科协办的东西还挺有意思。随后又去蹭了智能体决赛，还坑了 Omega Fantasy 一顿饭。</p>
<p>随后大约是某晚和安頔夜谈，经过一番交流，决定去混一个科协副主席。</p>
<p>怎么说呢，或许真的是如同之前一些人的评价——“你大一下学期的那种情况实属罕见，哪有人开局社工就是王炸的”一般，社工并不是我想的那么不堪。现在大概是发现，有一群志同道合的人一起做事情是多么愉悦。</p>
<h2 id="sakana">Sakana</h2>
<p>这一段没有什么特别想说的，总之揭开了一些过往，给一些问题作出了解答，这应该也是这个学期我应该可以说最为重视的一件事。虽然有很多的小细节，有很多的瞬间，但还是就留下我之前发在空间里的一段话吧：</p>
<blockquote class="blockquote-center">
<p>虽然我真的不会挑时间，不会好好规划安排行程，或许会因为冲动把事情做得很离谱。 但真的感谢包容我的愚拙。</p>

</blockquote>
<h2 id="一些总结与闲话">一些总结与闲话</h2>
<p>这一学期的 Holder 发生了相当大的改变，应该是真的去思考过我的大学应该如何度过这个问题了。之后就确立了“<strong>我要帮助后辈们尽可能少走弯路</strong>”这样的一个简单的目标，于是和改制的科协网络部不谋而合，于是和高中班主任谈好了回高中给学弟学妹讲数学竞赛。在确立好自己的真正想做的事情之后，便是卸下一些伪装。先前的我大概因为完全不能找到我自己的目标，而将自己浸没在无意义的内卷之中，也不敢面对自己的一些感情。这一切的一切，都在稍微通透之后被瓦解了。</p>
<p>当然我感觉需要警惕的，就是我暂且需要约束一下自己无限膨胀的野心，不能给自己捞太多的锅，接太多的任务，应该让自己慢慢达到一种平衡。</p>
<p>不如现在，来说说之后想要做的事情吧：</p>
<ul>
<li><p>接着跟进在刘知远实验室的任务，努力发篇文章，发完就撤退</p></li>
<li><p>翻新 THUInfo 的 UI，开发一些新功能</p></li>
<li><p>在科协把“技能引导文档”这件事做好，做到宣讲会上的“为了创建一个 user-friendly 的计算机系而奋斗”</p></li>
<li><p>好好地生活，让自己的大学不仅仅是绩点和社工</p></li>
</ul>
<p>还有就是一些暑假要做的事情，比如说 GRE，比如说科目二，比如说回高中讲竞赛，比如尝试一下图形学。</p>
<p>写这篇潦草的总结的时候，我应该还因为昨晚通宵复习自动机而头晕目眩，但是我的神志却异常清醒，因为我的大学似乎是真的开始了。</p>
<p>我有分享歌词的习惯，这里也来一句吧。但不同于之前我喜欢分享那种长长的，哲学家写散文式的歌词，这个歌词很朴素：</p>
<blockquote class="blockquote-center">
<p>ケーキも大好き，君も大好き。</p>
<p>——「とある一家の御茶会議」</p>

</blockquote>
<p>祝愿我余下的一半本科时光，能过得有意义。这里是 Holder，我们一起接着走下去吧。</p>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年江苏高考数学（新高考全国 I）试卷</title>
    <url>/2022/06/07/enroll-jsgk-2022/</url>
    <content><![CDATA[<p>听很多人说这份卷子十分难，于是打算简单做一下吧。</p>
<span id="more"></span>
<h1 id="单项选择题">单项选择题</h1>
<p>单项选择一共 8 条，一条 5 分，一共是 40 分。错一条的代价实在是太大了，所以还是小心为好。</p>
<p>我给出的答案为 (D)(D)(B)(C)(D)(A)(C)(C)。</p>
<h2 id="problem-1">Problem 1</h2>
<p>如果集合 <span class="math inline">\(M = \{x: \sqrt x &lt; 4\}, N = \{x: 3x \geq 1\}\)</span>，求集合 <span class="math inline">\(M \cap N\)</span>。</p>
<ol type="A">
<li><span class="math inline">\(\{x: 0\leq x &lt; 2\}\)</span></li>
<li><span class="math inline">\(\left\{x: \dfrac13 \leq x &lt; 2\right\}\)</span></li>
<li><span class="math inline">\(\{x: 3 \leq x &lt; 16\}\)</span></li>
<li><span class="math inline">\(\left\{x: \dfrac13 \leq x &lt; 16\right\}\)</span></li>
</ol>
<hr />
<p>显然 <span class="math inline">\(M = (0, 16), N = \left[\dfrac13, +\infty\right)\)</span>，答案为 (D)。</p>
<h2 id="problem-2">Problem 2</h2>
<p>如果 <span class="math inline">\(\mathop{\rm i}(1 - z) = 1\)</span>，求 <span class="math inline">\(z + \overline z\)</span> 的值。</p>
<ol type="A">
<li><span class="math inline">\(-2\)</span></li>
<li><span class="math inline">\(-1\)</span></li>
<li><span class="math inline">\(1\)</span></li>
<li><span class="math inline">\(2\)</span></li>
</ol>
<hr />
<p>假设 <span class="math inline">\(z := a + b\mathop{\rm i}(a, b \in \mathbb R)\)</span>，那么：</p>
<p><span class="math display">\[
1 = \mathop{\rm i}(1 - z) = \mathop{\rm i}((1 - a) - b\mathop{\rm i}) = b + (1 - a)\mathop{\rm i}
\]</span></p>
<p>得到 <span class="math inline">\(z = 1 + \mathop{\rm i}\)</span>，所以 <span class="math inline">\(z + \overline z = 2\Re(z) = 2\)</span>，答案为 (D)。</p>
<h2 id="problem-3">Problem 3</h2>
<p>在 <span class="math inline">\(\triangle ABC\)</span> 中，点 <span class="math inline">\(D\)</span> 在边 <span class="math inline">\(AB\)</span> 上，<span class="math inline">\(BD = 2DA\)</span>，记 <span class="math inline">\(\vec{CA} = \boldsymbol{m}, \vec{CD} = \boldsymbol{n}\)</span>，那么：</p>
<ol type="A">
<li><span class="math inline">\(\vec{CB} = 3\boldsymbol{m} - 2\boldsymbol{n}\)</span></li>
<li><span class="math inline">\(\vec{CB} = -2\boldsymbol{m} + 3\boldsymbol{n}\)</span></li>
<li><span class="math inline">\(\vec{CB} = 3\boldsymbol{m} + 2\boldsymbol{n}\)</span></li>
<li><span class="math inline">\(\vec{CB} = 2\boldsymbol{m} + 3\boldsymbol{n}\)</span></li>
</ol>
<hr />
<p>显然有 <span class="math inline">\(\boldsymbol{n} = \vec{CD} = \vec{CB} + \vec{BD}\)</span>，也就是说 <span class="math inline">\(\vec{BD} = \boldsymbol{n} - \vec{CB}\)</span>。</p>
<p>同理我们还能得到 <span class="math inline">\(\vec{AD} = \vec{CD} - \vec{CA} = \boldsymbol{n} - \boldsymbol{m}\)</span>。</p>
<p>根据 <span class="math inline">\(2\vec{AD} + \vec{BD} = \boldsymbol{0}\)</span> 得到：</p>
<p><span class="math display">\[
\boldsymbol{n} - \vec{CB} + 2(\boldsymbol{n} - \boldsymbol{m}) = \boldsymbol{0}
\]</span></p>
<p>也就是：</p>
<p><span class="math display">\[
\vec{CB} = -2\boldsymbol{m} + 3\boldsymbol{n}
\]</span></p>
<p>答案为 (B)。</p>
<h2 id="problem-4">Problem 4</h2>
<p>一道应用题。大意为，一个棱台水库，水位为海拔 <span class="math inline">\(148.5\)</span> 米的时候，水面面积为 <span class="math inline">\(140.0\)</span> 平方千米。水位为海拔 <span class="math inline">\(157.5\)</span> 米的时候，水面面积为 <span class="math inline">\(180.0\)</span> 平方千米。求解水库水位从 <span class="math inline">\(148.5\)</span> 米上升到 <span class="math inline">\(157.5\)</span> 米时增加的水量。</p>
<ol type="A">
<li><span class="math inline">\(1.0 \times 10^9\)</span> 立方米</li>
<li><span class="math inline">\(1.2 \times 10^9\)</span> 立方米</li>
<li><span class="math inline">\(1.4 \times 10^9\)</span> 立方米</li>
<li><span class="math inline">\(1.6 \times 10^9\)</span> 立方米</li>
</ol>
<hr />
<p>简单的棱台体积计算题，注意单位换算：</p>
<p><span class="math display">\[
\begin{aligned}
V &amp;= \frac13 h(S_1 + S_2 + \sqrt{S_1S_2}) \\
&amp;= \frac13 \times (157.5 - 148.5) \times(140 + 180 + \sqrt{140 \times 180}) \times 10^6 \\
&amp;= 6(3\sqrt 7 + 16) \times 10^7 \\
&amp;\approx 1.4 \times 10^9 ({\rm m}^3)
\end{aligned}
\]</span></p>
<p>答案为 (C)。</p>
<h2 id="problem-5">Problem 5</h2>
<p>从 <span class="math inline">\(2\)</span> 到 <span class="math inline">\(8\)</span> 总共 <span class="math inline">\(7\)</span> 个整数中随机取两个不同的数，求两数互质的概率。</p>
<ol type="A">
<li><span class="math inline">\(1/6\)</span></li>
<li><span class="math inline">\(1/3\)</span></li>
<li><span class="math inline">\(1/2\)</span></li>
<li><span class="math inline">\(2/3\)</span></li>
</ol>
<hr />
<p>互质的整数对包括：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;(2, 3), (2, 5), (2, 7) \\
&amp;(3, 4), (3, 5), (3, 7), (3, 8) \\
&amp;(4, 5), (4, 7) \\
&amp;(5, 6), (5, 7), (5, 8) \\
&amp;(6, 7) \\
&amp;(7, 8) \\
\end{aligned}
\]</span></p>
<p>所以概率为：</p>
<p><span class="math display">\[
p = \frac{14}{C_7^6} = \frac23
\]</span></p>
<p>答案为 (D)。</p>
<h2 id="problem-6">Problem 6</h2>
<p>函数 <span class="math inline">\(f(x) = \sin\left(\omega x + \dfrac\pi 4\right) + b(\omega &gt; 0)\)</span> 的最小正周期为 <span class="math inline">\(T\)</span>，如果 <span class="math inline">\(\dfrac{2\pi}{3} &lt; T &lt; \pi\)</span>，而且曲线 <span class="math inline">\(y = f(x)\)</span> 关于点 <span class="math inline">\(\left(\dfrac{3\pi}{2}, 2\right)\)</span> 对称，求 <span class="math inline">\(f\left(\dfrac\pi 2\right)\)</span> 的值。</p>
<ol type="A">
<li><span class="math inline">\(1\)</span></li>
<li><span class="math inline">\(3/2\)</span></li>
<li><span class="math inline">\(5/2\)</span></li>
<li><span class="math inline">\(3\)</span></li>
</ol>
<hr />
<p>根据曲线 <span class="math inline">\(y = f(x)\)</span> 关于点 <span class="math inline">\(\left(\dfrac{3\pi}{2}, 2\right)\)</span> 对称，能得到 <span class="math inline">\(f\left(\dfrac{3\pi}{2}\right) = 2\)</span>，以及 <span class="math inline">\(b = 0\)</span>，也就是说：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\sin\left(\omega \dfrac{3\pi}{2} + \dfrac\pi 4\right) = 0 \\
\Rightarrow &amp;\omega \dfrac{3\pi}{2} + \dfrac\pi 4 = k\pi \\
\Rightarrow &amp;\omega = \frac23\left(k - \frac14\right), k \in \mathbb Z
\end{aligned}
\]</span></p>
<p>根据最小正周期的范围，得到：</p>
<p><span class="math display">\[
T = \frac{2\pi}{\omega} \in \left(\dfrac{2\pi}{3}, \pi\right) \Rightarrow \omega \in (2, 3)
\]</span></p>
<p>进而得知 <span class="math inline">\(k = 4\)</span>，也就是说 <span class="math inline">\(\omega = \dfrac52\)</span>，那么：</p>
<p><span class="math display">\[
f\left(\dfrac\pi 2\right) = \sin\left(\dfrac52 \cdot \dfrac{\pi}{2} + \dfrac\pi 4\right) + 2 = 1
\]</span></p>
<p>答案为 (A)。</p>
<h2 id="problem-7">Problem 7</h2>
<p>已知 <span class="math inline">\(a = 0.1e^{0.1}, b = \dfrac19, c = -\ln 0.9\)</span>，则：</p>
<ol type="A">
<li><span class="math inline">\(a &lt; b &lt; c\)</span></li>
<li><span class="math inline">\(c &lt; b &lt; a\)</span></li>
<li><span class="math inline">\(c &lt; a &lt; b\)</span></li>
<li><span class="math inline">\(a &lt; c &lt; b\)</span></li>
</ol>
<hr />
<p>考虑函数 <span class="math inline">\(f(x) = xe^x + \ln(1 - x), x \geq 0\)</span>，有：</p>
<p><span class="math display">\[
f&#39;(x) = (x + 1)e^x - \frac{1}{1 - x} &gt; (x + 1)^2 - \frac{1}{1 - x} = -\frac{x(x^2 + x - 1)}{1 - x}
\]</span></p>
<p>导函数保证了函数至少在区间 <span class="math inline">\(\left(0, \dfrac{-1 + \sqrt5}{2}\right)\)</span> 上递增，而 <span class="math inline">\(\dfrac1{10}\)</span> 属于这个区间，所以：</p>
<p><span class="math display">\[
f(0.1) = 0.1e^{0.1} - \ln\frac{10}{9} &gt; f(0) = 0
\]</span></p>
<p>所以 <span class="math inline">\(a &gt; c\)</span>。</p>
<p>再考虑函数 <span class="math inline">\(g(x) = \ln(1 + x) - \dfrac{x}{1 + x}, x \geq 0\)</span>，有：</p>
<p><span class="math display">\[
g&#39;(x) = \frac{1}{1 + x} - \frac{1}{(1 + x)^2} = \frac{x}{(1 + x)^2} &gt; 0
\]</span></p>
<p>从而：</p>
<p><span class="math display">\[
g\left(\frac19\right) = \ln\frac{10}{9} - \frac{1}{10} &gt; 0
\]</span></p>
<p>这说明：</p>
<p><span class="math display">\[
\ln\frac{10}{9} &gt; \frac{1}{10} \Rightarrow \frac{10}{9} &gt; e^{0.1} \Rightarrow \frac{1}{9} &gt; 0.1e^{0.1}
\]</span></p>
<p>也就是 <span class="math inline">\(b &gt; a\)</span>，从而答案为 (C)。</p>
<h2 id="problem-8">Problem 8</h2>
<p>已知正四棱锥的侧棱长为 <span class="math inline">\(l\)</span>，其各顶点都在同一个球面上，若该球体积为 <span class="math inline">\(36\pi\)</span>，且 <span class="math inline">\(3\leq l\leq 3\sqrt 3\)</span>，求该正四棱锥体积的取值范围。</p>
<ol type="A">
<li><span class="math inline">\(\left[18, \dfrac{81}{4}\right]\)</span></li>
<li><span class="math inline">\(\left[\dfrac{27}{4}, \dfrac{81}{4}\right]\)</span></li>
<li><span class="math inline">\(\left[\dfrac{27}{4}, \dfrac{64}{3}\right]\)</span></li>
<li><span class="math inline">\(\left[18, 27\right]\)</span></li>
</ol>
<hr />
<p>假设球的半径为 <span class="math inline">\(R\)</span>，显然有 <span class="math inline">\(V = \dfrac43\pi R^3 = 36\pi\)</span>，得到 <span class="math inline">\(R = 3\)</span>。</p>
<p>假设正四棱锥 <span class="math inline">\(O-ABCD\)</span> 底面中心为 <span class="math inline">\(P\)</span>，其外接球球心为 <span class="math inline">\(Q\)</span>。显然我们得到一个直角三角形 <span class="math inline">\(OPA\)</span>，而球心 <span class="math inline">\(Q\)</span> 在直线 <span class="math inline">\(PO\)</span> 上。令有向线段 <span class="math inline">\(QO\)</span> 长度为 <span class="math inline">\(3\)</span>，记有向线段 <span class="math inline">\(QP\)</span> 长度为 <span class="math inline">\(x \in (-3, 3)\)</span>。显然：</p>
<p><span class="math display">\[
\begin{aligned}
l^2 &amp;= OA^2 = PO^2 + PA^2 \\
&amp;= (QO - QP)^2 + (QA^2 - QP^2) \\
&amp;= (3 - x)^2 + (9 - x^2) \\
&amp;= 18 - 6x \in [9, 27]
\end{aligned}
\]</span></p>
<p>也就得到了 <span class="math inline">\(x \in \left[-\dfrac32, \dfrac32\right]\)</span>。从而：</p>
<p><span class="math display">\[
V_{O-ABCD} = \frac13 |PO| \cdot 2PA^2 = \frac23(3 - x)(9 - x^2)
\]</span></p>
<p>不难得到函数 <span class="math inline">\(f(x) = \dfrac23(3 - x)(9 - x^2)\)</span> 在区间 <span class="math inline">\(\left[-\dfrac32, -1\right]\)</span> 上递增，在区间 <span class="math inline">\(\left[-1, \dfrac32\right]\)</span> 上递减，计算得到：</p>
<p><span class="math display">\[
f\left(-\dfrac32\right) = \frac{81}{4}, f\left(\dfrac32\right) = \frac{27}{4}, f(-1) = \frac{64}{3}
\]</span></p>
<p>体积的取值范围应当为 <span class="math inline">\(\left[\dfrac{27}{4}, \dfrac{64}{3}\right]\)</span>，答案为 (C)。</p>
<h1 id="不定项选择题">不定项选择题</h1>
<p>不定项选择一共 4 条，一条 5 分，一共是 20 分。</p>
<p>我给出的答案为 (ABD)(AC)(BCD)(BC)。</p>
<h2 id="problem-9">Problem 9</h2>
<p>对于正方体 <span class="math inline">\(ABCD-A_1B_1C_1D_1\)</span>，下列说法中正确的有：</p>
<ol type="A">
<li>直线 <span class="math inline">\(BC_1\)</span> 与 <span class="math inline">\(DA_1\)</span> 所成的角为直角</li>
<li>直线 <span class="math inline">\(BC_1\)</span> 与 <span class="math inline">\(CA_1\)</span> 所成的角为直角</li>
<li>直线 <span class="math inline">\(BC_1\)</span> 与平面 <span class="math inline">\(BB_1D_1D\)</span> 所成的角为 <span class="math inline">\(45^\circ\)</span></li>
<li>直线 <span class="math inline">\(BC_1\)</span> 与平面 <span class="math inline">\(ABCD\)</span> 所成的角为 <span class="math inline">\(45^\circ\)</span></li>
</ol>
<hr />
<p>根据直线 <span class="math inline">\(BC_1\)</span> 垂直于平面 <span class="math inline">\(A_1B_1CD\)</span> 就能得到 (A)(B) 均正确。</p>
<p>对于 (C)，显然有直线 <span class="math inline">\(A_1C_1\)</span> 垂直于平面 <span class="math inline">\(BB_1D_1D\)</span>，而 <span class="math inline">\(\angle A_1C_1B = 60^\circ\)</span>，该选项叙述错误。</p>
<p>对于 (D)，显然有直线 <span class="math inline">\(CC_1\)</span> 垂直于平面 <span class="math inline">\(ABCD\)</span>，而 <span class="math inline">\(\angle CC_1B = 45^\circ\)</span>，该选项叙述正确。</p>
<p>所以答案为 (ABD)。</p>
<h2 id="problem-10">Problem 10</h2>
<p>已知函数 <span class="math inline">\(f(x) = x^3 - x + 1\)</span>，下列说法中正确的有：</p>
<ol type="A">
<li><span class="math inline">\(f(x)\)</span> 有两个极值点</li>
<li><span class="math inline">\(f(x)\)</span> 有三个零点</li>
<li>点 <span class="math inline">\((0, 1)\)</span> 为曲线 <span class="math inline">\(y = f(x)\)</span> 的对称中心</li>
<li>直线 <span class="math inline">\(y = 2x\)</span> 为曲线 <span class="math inline">\(y = f(x)\)</span> 的切线</li>
</ol>
<hr />
<p>首先：</p>
<p><span class="math display">\[
f&#39;(x) = 3x^2 - 1
\]</span></p>
<p>得到 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\(\left(-\infty, -\dfrac{\sqrt 3}{3}\right)\)</span> 上递增，在 <span class="math inline">\(\left(-\dfrac{\sqrt 3}{3}, \dfrac{\sqrt 3}{3}\right)\)</span> 上递减，在 <span class="math inline">\(\left(\dfrac{\sqrt 3}{3}, +\infty\right)\)</span> 上递增。</p>
<p>并且计算出：</p>
<p><span class="math display">\[
\begin{aligned}
f\left(-\frac{\sqrt3}{3}\right) &amp;= \frac{2\sqrt 3}{9} + 1 &gt; 0 \\
f\left(\frac{\sqrt3}{3}\right) &amp;= -\frac{2\sqrt 3}{9} + 1 &gt; 0 \\
\end{aligned}
\]</span></p>
<p>所以 <span class="math inline">\(f(x)\)</span> 有两个极值点，一个零点，选项 (A) 正确，选项 (B) 错误。</p>
<p>进一步，我们我们有：</p>
<p><span class="math display">\[
f(x) + f(-x) = (x^3 - x + 1) + (-x^3 + x + 1) = 2, x \in \mathbb R
\]</span></p>
<p>这说明选项 (C) 正确。</p>
<p>如果选项 (D) 正确，假设其为 <span class="math inline">\(x = x_0\)</span> 处的切线，根据 <span class="math inline">\(f&#39;(x_0) = 3x_0^2 - 1 = 2\)</span> 得到 <span class="math inline">\(x_0 = \pm 1\)</span>。</p>
<p>此外，我们知道曲线 <span class="math inline">\(y = f(x)\)</span> 在 <span class="math inline">\(x = x_0\)</span> 处切线方程为：</p>
<p><span class="math display">\[
y = f&#39;(x_0)(x - x_0) + f(x_0) = f&#39;(x_0)x - x_0f&#39;(x_0) + f(x_0) = 2x
\]</span></p>
<p>那么我们得到：</p>
<p><span class="math display">\[
-x_0f&#39;(x_0) + f(x_0) = 0 \Rightarrow 2x_0 = f(x_0) = x_0^3 - x_0 + 1
\]</span></p>
<p>将 <span class="math inline">\(x_0 = \pm 1\)</span> 代入验证，发现均不成立，所以选项 (D) 错误。</p>
<p>答案为 (AC)。</p>
<h2 id="problem-11">Problem 11</h2>
<p>已知 <span class="math inline">\(O\)</span> 为坐标原点，点 <span class="math inline">\(A(1, 1)\)</span> 在抛物线 <span class="math inline">\(C: x^2 = 2py(p &gt; 0)\)</span> 上，过点 <span class="math inline">\(B(0, -1)\)</span> 的直线交 <span class="math inline">\(C\)</span> 于 <span class="math inline">\(P, Q\)</span> 两点，则下列说法中正确的有：</p>
<ol type="A">
<li><span class="math inline">\(C\)</span> 的准线方程为 <span class="math inline">\(y = -1\)</span></li>
<li>直线 <span class="math inline">\(AB\)</span> 与 <span class="math inline">\(C\)</span> 相切</li>
<li><span class="math inline">\(|OP| \cdot |OQ| &gt; |OA|^2\)</span></li>
<li><span class="math inline">\(|BP| \cdot |BQ| &gt; |BA|^2\)</span></li>
</ol>
<hr />
<p>首先显然得到 <span class="math inline">\(p = \dfrac12\)</span>，进而得到 <span class="math inline">\(C\)</span> 准线方程为 <span class="math inline">\(y = -\dfrac14\)</span>，选项 (A) 错误。</p>
<p>直线 <span class="math inline">\(AB\)</span> 方程为 <span class="math inline">\(y = 2x - 1\)</span>，代入抛物线方程得到 <span class="math inline">\(x^2 = 2x - 1 \iff (x - 1)^2 = 0\)</span>，此方程显然仅有 <span class="math inline">\(x = 1\)</span> 一个实数根，所以选项 (B) 正确。</p>
<p>不妨假设 <span class="math inline">\(P, Q\)</span> 坐标分别为 <span class="math inline">\((x_1, x_1^2), (x_2, x_2^2)\)</span>。</p>
<p>如果假设 <span class="math inline">\(PQ\)</span> 斜率为 <span class="math inline">\(k\)</span>，那么 <span class="math inline">\(PQ\)</span> 方程为 <span class="math inline">\(y = kx - 1\)</span>，代入抛物线方程得到下述二次方程：</p>
<p><span class="math display">\[
x^2 = kx - 1 \iff x^2 - kx + 1 = 0
\]</span></p>
<p><span class="math inline">\(x_1, x_2\)</span> 为上述方程的两根，从而我们有 <span class="math inline">\(x_1x_2 = 1\)</span>。</p>
<p>那么：</p>
<p><span class="math display">\[
\begin{aligned}
|OP|^2 \cdot |OQ|^2 &amp;= (x_1^2 + x_1^4)(x_2^2 + x_2^4) \\
&amp;= (x_1^2 + x_1^4)\left(\frac{1}{x_1^2} + \frac{1}{x_1^4}\right) \\
&amp;= 2 + x_1^2 + \frac{1}{x_1^2} \\
&amp;\geq 4 = |OA|^4
\end{aligned}
\]</span></p>
<p>上述等号无法取到，因为 <span class="math inline">\(x_1 \neq x_2\)</span>，从而 <span class="math inline">\(x_1 \neq \pm 1\)</span>。这说明了选项 (C) 正确。</p>
<p>现在继续计算 (D) 选项，我们有：</p>
<p><span class="math display">\[
\begin{aligned}
|BP|^2 \cdot |BQ|^2 &amp;= (x_1^2 + (x_1^2 + 1)^2)(x_2^2 + (x_2^2 + 1)^2) \\
&amp;= (x_1^4 + 3x_1^2 + 1)\left(\frac{1}{x_1^4} + \frac{3}{x_1^2} + 1\right) \\
&amp;= 11 + \left(x_1^4 + \frac{1}{x_1^4}\right) + 6\left(x_1^2 + \frac{1}{x_1^2}\right) \\
&amp;\geq 25 = |BA|^4
\end{aligned}
\]</span></p>
<p>上述等号无法取到，因为 <span class="math inline">\(x_1 \neq x_2\)</span>，从而 <span class="math inline">\(x_1 \neq \pm 1\)</span>。这说明了选项 (D) 正确。</p>
<p>所以答案为 (BCD)。</p>
<h2 id="problem-12">Problem 12</h2>
<p>已知函数 <span class="math inline">\(f(x)\)</span> 以及其导函数 <span class="math inline">\(f&#39;(x)\)</span> 的定义域均为 <span class="math inline">\(\mathbb R\)</span>，记 <span class="math inline">\(g(x) := f&#39;(x)\)</span>。</p>
<p>如果 <span class="math inline">\(f\left(\dfrac32 - x\right), g(2 + x)\)</span> 均为偶函数，那么下列说法中正确的是：</p>
<ol type="A">
<li><span class="math inline">\(f(0) = 0\)</span></li>
<li><span class="math inline">\(g\left(-\dfrac12\right) = 0\)</span></li>
<li><span class="math inline">\(f(-1) = f(4)\)</span></li>
<li><span class="math inline">\(g(-1) = g(2)\)</span></li>
</ol>
<hr />
<p>首先需要熟知这样的结论，即导函数为偶函数，则原函数为关于某点中心对称，导函数为奇函数，则原函数为偶函数。</p>
<p>由于 <span class="math inline">\(f(2 + x)\)</span> 的导函数 <span class="math inline">\(g(2 + x)\)</span> 为偶函数，那么 <span class="math inline">\(f(2 + x)\)</span> 关于点 <span class="math inline">\((2, f(2))\)</span> 中心对称。</p>
<p>那么我们可以给出下述推理：</p>
<p><span class="math display">\[
\begin{aligned}
f(x) &amp;= f\left(\frac32 - \left(\frac32 - x\right)\right) = f\left(\frac32 + \left(\frac32 - x\right)\right) \\
&amp;= f(3 - x) = f(2 + (1 - x)) = 2f(2) - f(2 - (1 - x)) \\
&amp;= 2f(2) - f(1 + x)
\end{aligned}
\]</span></p>
<p>也就得到 <span class="math inline">\(f(x + 2) = 2f(2) - f(x + 1) = f(x)\)</span>，<span class="math inline">\(f(x)\)</span> 为周期为 <span class="math inline">\(2\)</span> 的周期函数。</p>
<p>对于选项 (A)，如果 <span class="math inline">\(f(2) \neq 0\)</span>，显然可知 <span class="math inline">\(f(0) \neq 0\)</span>。而这是存在的，取反例 <span class="math inline">\(f(x) = \sin(\pi x) + 1\)</span> 即可。选项 (A) 错误。</p>
<p>根据 <span class="math inline">\(f(x)\)</span> 周期显然可知 <span class="math inline">\(f(2n) = f(2), n \in \mathbb Z\)</span>。</p>
<p>同时有 <span class="math inline">\(f(2n + 1) = f(1) = 2f(2) - f(2) = f(2), n \in \mathbb Z\)</span>。也就是说对所有整数 <span class="math inline">\(n\)</span>，都有 <span class="math inline">\(f(n) = f(2)\)</span>，所以选项 (C) 正确。</p>
<p>此外根据导函数定义（下面所有操作的基础均为导函数的存在性）：</p>
<p><span class="math display">\[
g\left(\frac32\right) = \lim_{\delta\to 0}\frac{f\left(\dfrac32 + \delta\right) - f\left(\dfrac32\right)}{\delta}
\]</span></p>
<p>根据 <span class="math inline">\(f\left(\dfrac32 - x\right)\)</span> 为偶函数，得到：</p>
<p><span class="math display">\[
g\left(\frac32\right) = \lim_{\delta\to 0}\frac{f\left(\dfrac32 - \delta\right) - f\left(\dfrac32\right)}{\delta} = \lim_{\delta\to 0}\frac{f\left(\dfrac32 + \delta\right) - f\left(\dfrac32\right)}{-\delta}
\]</span></p>
<p>上述第二个等号作换元 <span class="math inline">\(\delta\to-\delta\)</span>。上述两个式子相加得到 <span class="math inline">\(g\left(\dfrac32\right) = 0\)</span>，据 <span class="math inline">\(g(x)\)</span> 的周期性即可得到 <span class="math inline">\(g\left(-\dfrac12\right) = 0\)</span>。选项 (B) 正确。</p>
<p>选项 (D) 存在反例 <span class="math inline">\(f(x) = \sin(\pi x)\)</span>，该函数满足所有题设约束，但是不满足 (D) 要求。</p>
<p>所以答案为 (BC)。</p>
<h1 id="填空题">填空题</h1>
<h2 id="problem-13">Problem 13</h2>
<p>求 <span class="math inline">\(\left(1 - \dfrac yx\right)(x + y)^8\)</span> 的展开式中 <span class="math inline">\(x^2y^6\)</span> 的系数。</p>
<hr />
<p>最终展开式中 <span class="math inline">\(x^2y^6\)</span> 项可能的出现方式为 <span class="math inline">\(1\cdot x^2y^6\)</span> 以及 <span class="math inline">\(-\dfrac yx \cdot x^3y^5\)</span>。那么最终系数为：</p>
<p><span class="math display">\[
C_8^2 - C_8^3 = \frac{8 \times 7}{2!} - \frac{8 \times 7 \times 6}{3!} = -28
\]</span></p>
<p>故答案为 <span class="math inline">\(-28\)</span>。</p>
<h2 id="problem-14">Problem 14</h2>
<p>写出与圆 <span class="math inline">\(x^2 + y^2 = 1\)</span> 和 <span class="math inline">\((x - 3)^2 + (y - 4)^2 = 16\)</span> 都相切的一条直线的方程。</p>
<hr />
<p>假设直线方程为 <span class="math inline">\(ax + by + c = 0\)</span>，显然根据直线和圆相切的要求：</p>
<p><span class="math display">\[
\begin{cases}
\dfrac{|c|}{\sqrt{a^2 + b^2}} = 1 \\
\dfrac{|3a + 4b + c|}{\sqrt{a^2 + b^2}} = 4 \\
\end{cases}
\]</span></p>
<p>根据第一个方程显然有 <span class="math inline">\(c \neq 0\)</span>，那么记 <span class="math inline">\(a&#39; := \dfrac ac, b&#39; := \dfrac bc\)</span>，上述方程组即：</p>
<p><span class="math display">\[
\begin{cases}
\dfrac{1}{\sqrt{a&#39;^2 + b&#39;^2}} = 1 \\
\dfrac{|3a&#39; + 4b&#39; + 1|}{\sqrt{a&#39;^2 + b&#39;^2}} = 4 \\
\end{cases}
\Rightarrow
\begin{cases}
\sqrt{a&#39;^2 + b&#39;^2} = 1 \\
|3a&#39; + 4b&#39; + 1| = 4 \\
\end{cases}
\]</span></p>
<p>分情况讨论，若 <span class="math inline">\(3a&#39; + 4b&#39; + 1 = 4 \iff 3a&#39; + 4b&#39; = 3\)</span>，那么：</p>
<p><span class="math display">\[
b&#39; = \frac{3 - 3a&#39;}{4} \Rightarrow a&#39;^2 + b&#39;^2 = a&#39;^2 + \left(\frac{3 - 3a&#39;}{4}\right)^2 = 1
\]</span></p>
<p>即：</p>
<p><span class="math display">\[
25a&#39;^2 - 18a&#39; - 7 = 0 \iff a&#39; \in \left\{1, -\frac{7}{25}\right\}
\]</span></p>
<p>对应的 <span class="math inline">\(b&#39;\)</span> 分别为 <span class="math inline">\(0\)</span> 和 <span class="math inline">\(\dfrac{24}{25}\)</span>。</p>
<p>若 <span class="math inline">\(3a&#39; + 4b&#39; + 1 = -4 \iff 3a&#39; + 4b&#39; = -5\)</span>，那么：</p>
<p><span class="math display">\[
b&#39; = \frac{-5 - 3a&#39;}{4} \Rightarrow a&#39;^2 + b&#39;^2 = a&#39;^2 + \left(\frac{-5 - 3a&#39;}{4}\right)^2 = 1
\]</span></p>
<p>得到 <span class="math inline">\(a&#39; = -\dfrac35\)</span>，对应的 <span class="math inline">\(b&#39; = -\dfrac45\)</span>。</p>
<p>从而得到答案为 <span class="math inline">\(x = -1\)</span> 或 <span class="math inline">\(-7x + 24y + 25 = 0\)</span> 或 <span class="math inline">\(-3x - 4y + 5 = 0\)</span>。</p>
<h2 id="problem-15">Problem 15</h2>
<p>若曲线 <span class="math inline">\(y = (x + a)e^x\)</span> 有两条过坐标原点的切线，求 <span class="math inline">\(a\)</span> 的取值范围。</p>
<hr />
<p>首先：</p>
<p><span class="math display">\[
y&#39; = (x + a + 1)e^x
\]</span></p>
<p>那么曲线在 <span class="math inline">\(x = x_0\)</span> 处切线方程为：</p>
<p><span class="math display">\[
y = (x_0 + a + 1)e^{x_0}(x - x_0) + (x_0 + a)e^{x_0}
\]</span></p>
<p>该切线过坐标原点等价于：</p>
<p><span class="math display">\[
-x_0(x_0 + a + 1)e^{x_0} + (x_0 + a)e^{x_0} = 0 \iff x_0 + a = x_0(x_0 + a + 1)
\]</span></p>
<p>也就是说切线过坐标原点等价于 <span class="math inline">\(x_0\)</span> 为下述二次方程的根：</p>
<p><span class="math display">\[
x_0^2 + ax_0 - a = 0
\]</span></p>
<p>根据题设，上述方程有两个互不相同的实根，即：</p>
<p><span class="math display">\[
\Delta = a^2 + 4a &gt; 0 \iff a \in (-\infty, -4) \cup (0, +\infty)
\]</span></p>
<p>所以答案为 <span class="math inline">\((-\infty, -4) \cup (0, +\infty)\)</span>。</p>
<h2 id="problem-16">Problem 16</h2>
<p>已知椭圆 <span class="math inline">\(C: \dfrac{x^2}{a^2} + \dfrac{y^2}{b^2} = 1(a &gt; b &gt; 0)\)</span>，<span class="math inline">\(C\)</span> 的上顶点为 <span class="math inline">\(A\)</span>，两个焦点为 <span class="math inline">\(F_1, F_2\)</span>，离心率为 <span class="math inline">\(\dfrac12\)</span>。过 <span class="math inline">\(F_1\)</span> 且垂直于 <span class="math inline">\(AF_2\)</span> 的直线交 <span class="math inline">\(C\)</span> 于 <span class="math inline">\(D, E\)</span> 两点，<span class="math inline">\(|DE| = 6\)</span>，求 <span class="math inline">\(\triangle ADE\)</span> 的周长。</p>
<hr />
<p>根据离心率，不妨假设 <span class="math inline">\(a = 2t, b = \sqrt3 t, c = t(t &gt; 0)\)</span>。那么 <span class="math inline">\(A\)</span> 坐标为 <span class="math inline">\((0, \sqrt3 t)\)</span>，<span class="math inline">\(F_1, F_2\)</span> 坐标为 <span class="math inline">\((\pm t, 0)\)</span>。</p>
<p>那么 <span class="math inline">\(AF_2\)</span> 斜率为 <span class="math inline">\(-\sqrt 3\)</span>，得知 <span class="math inline">\(DE\)</span> 的斜率为 <span class="math inline">\(\dfrac{1}{\sqrt 3}\)</span>，那么 <span class="math inline">\(DE\)</span> 方程为 <span class="math inline">\(x = \sqrt3y - t\)</span>。代入椭圆方程得到：</p>
<p><span class="math display">\[
\dfrac{(\sqrt3y - t)^2}{4t^2} + \dfrac{y^2}{3t^2} = 1 \iff 13y^2 - 6\sqrt3 yt - 9t^2 = 0
\]</span></p>
<p>假设上述关于 <span class="math inline">\(y\)</span> 的方程的两个根为 <span class="math inline">\(y_1, y_2\)</span>，那么 <span class="math inline">\(y_1 + y_2 = \dfrac{6\sqrt3 t}{13}, y_1y_2 = -\dfrac{9}{13}t^2\)</span>。</p>
<p>我们显然知道：</p>
<p><span class="math display">\[
\begin{aligned}
|DE|^2 &amp;= 4(y_1 - y_2)^2 = 4((y_1 + y_2)^2 - 4y_1y_2) \\
&amp;= \left(\frac{48t}{13}\right)^2 = 36
\end{aligned}
\]</span></p>
<p>得到 <span class="math inline">\(t = \dfrac{13}{8}\)</span>。</p>
<p>另外，直接求解方程得到：</p>
<p><span class="math display">\[
y_{1, 2} = \frac{3\sqrt 3 \pm 12}{13}t = \frac{3\sqrt 3}{8} \pm \frac32
\]</span></p>
<p>从而得到 <span class="math inline">\(D, E\)</span> 的坐标为：</p>
<p><span class="math display">\[
\left(\frac{3\sqrt 3}{2} - \frac12, \frac{3\sqrt 3}{8} + \frac32\right), \left(-\frac{3\sqrt 3}{2} - \frac12, \frac{3\sqrt 3}{8} - \frac32\right)
\]</span></p>
<p>考虑到 <span class="math inline">\(A\)</span> 坐标为 <span class="math inline">\(\left(0, \dfrac{13\sqrt 3}{8}\right)\)</span>，得到：</p>
<p><span class="math display">\[
\begin{aligned}
|AD|^2 &amp;= \left(\frac{3\sqrt 3}{2} - \frac12\right)^2 + \left(\frac{3\sqrt 3}{8} + \frac32 - \dfrac{13\sqrt 3}{8}\right)^2 \\
&amp;= \frac{223 - 84\sqrt 3}{16} \\
|BD|^2 &amp;= \left(-\frac{3\sqrt 3}{2} - \frac12\right)^2 + \left(\frac{3\sqrt 3}{8} - \frac32 - \dfrac{13\sqrt 3}{8}\right)^2 \\
&amp;= \frac{223 + 84\sqrt 3}{16} \\
\end{aligned}
\]</span></p>
<p>不难发现 <span class="math inline">\((14 \pm 3\sqrt 3)^2 = 223 \pm 84\sqrt 3\)</span>，所以：</p>
<p><span class="math display">\[
|AD| + |BD| = \frac{14 - 3\sqrt 3}{4} + \frac{14 + 3\sqrt 3}{4} = 7
\]</span></p>
<p>从而需要求的三角形周长为 <span class="math inline">\(13\)</span>。即最后的答案为 <span class="math inline">\(13\)</span>。</p>
<hr />
<p>【另解】我自己也是算完之后才回想起来有这么一个简单的结论我忘了，离心率为 <span class="math inline">\(\dfrac12\)</span> 的椭圆，其上顶点和两个焦点构成等边三角形。</p>
<p>这个事实意味着直线 <span class="math inline">\(DE\)</span> 不仅垂直于 <span class="math inline">\(AF_2\)</span>，而且是垂直平分 <span class="math inline">\(AF_2\)</span>。也就是说 <span class="math inline">\(\triangle ADE\)</span> 全等于 <span class="math inline">\(\triangle DEF_2\)</span>。那么其周长：</p>
<p><span class="math display">\[
C_{\triangle DEF_2} = (|DF_1| + |DF_2|) + (|EF_1| + |EF_2|) = 4a = 13
\]</span></p>
<h1 id="解答题">解答题</h1>
<p>这次解答题的顺序是数列、解三角形、立体几何、统计、解析几何、导数，中规中矩的顺序。</p>
<h2 id="problem-17">Problem 17</h2>
<p>记 <span class="math inline">\(S_n\)</span> 为数列 <span class="math inline">\(\{a_n\}\)</span> 的前 <span class="math inline">\(n\)</span> 项和，已知 <span class="math inline">\(a_1 = 1\)</span>，且数列 <span class="math inline">\(\left\{\dfrac{S_n}{a_n}\right\}\)</span> 是公差为 <span class="math inline">\(\dfrac13\)</span> 的等差数列。</p>
<ol type="1">
<li><p>求 <span class="math inline">\(\{a_n\}\)</span> 的通项公式。</p></li>
<li><p>求证：</p></li>
</ol>
<p><span class="math display">\[
\sum_{k = 1}^n \frac{1}{a_k} &lt; 2, n \in \mathbb N
\]</span></p>
<hr />
<p>【第一问】根据数列 <span class="math inline">\(\left\{\dfrac{S_n}{a_n}\right\}\)</span> 是公差为 <span class="math inline">\(\dfrac13\)</span> 的等差数列，并且我们能得到其首项为：</p>
<p><span class="math display">\[
\frac{S_1}{a_1} = 1
\]</span></p>
<p>那么我们得到其通项公式为：</p>
<p><span class="math display">\[
\frac{S_n}{a_n} = \frac13 n + \frac23 \iff 3S_n = (n + 2)a_n
\]</span></p>
<p>取 <span class="math inline">\(n + 1\)</span> 代替 <span class="math inline">\(n\)</span>，得到等式 <span class="math inline">\(3S_{n + 1} = (n + 3)a_{n + 1}\)</span>，上述两式相减：</p>
<p><span class="math display">\[
3(S_{n + 1} - S_n) = (n + 3)a_{n + 1} - (n + 2)a_n \iff (n + 2)a_n = na_{n + 1}
\]</span></p>
<p>也就是下述关系：</p>
<p><span class="math display">\[
\frac{a_{n + 1}}{a_n} = \frac{n + 2}{n}, n \in \mathbb N
\]</span></p>
<p>那么对于 <span class="math inline">\(n \geq 2\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
a_n &amp;= \frac{a_n}{a_{n - 1}} \cdot \frac{a_{n - 1}}{a_{n - 2}} \cdot \cdots \cdot \frac{a_2}{a_1} = \frac{n + 1}{n - 1} \cdot \frac{n}{n - 2} \cdot \cdots \cdot \frac{3}{1} \\
&amp;= \frac{n(n + 1)}{2}
\end{aligned}
\]</span></p>
<p>经检验，<span class="math inline">\(n = 1\)</span> 时上述通项公式也成立，所以数列 <span class="math inline">\(\{a_n\}\)</span> 的通项公式为：</p>
<p><span class="math display">\[
a_n = \frac{n(n + 1)}{2}, n \in \mathbb N
\]</span></p>
<p>【第二问】可以计算得到：</p>
<p><span class="math display">\[
\begin{aligned}
\sum_{k = 1}^n \frac{1}{a_k} = \sum_{k = 1}^n \frac{2}{k(k + 1)} = 2\sum_{k = 1}^n \left(\frac{1}{k} - \frac{1}{k + 1}\right) = 2\left(1 - \frac{1}{n + 1}\right) &lt; 2
\end{aligned}
\]</span></p>
<h2 id="problem-18">Problem 18</h2>
<p>记 <span class="math inline">\(\triangle ABC\)</span> 的内角 <span class="math inline">\(A, B, C\)</span> 的对边分别为 <span class="math inline">\(a, b, c\)</span>。已知下述关系：</p>
<p><span class="math display">\[
\frac{\cos A}{1 + \sin A} = \frac{\sin 2B}{1 + \cos 2B}
\]</span></p>
<ol type="1">
<li><p>若 <span class="math inline">\(C = \dfrac{2\pi}{3}\)</span>，求 <span class="math inline">\(B\)</span></p></li>
<li><p>求 <span class="math inline">\(\dfrac{a^2 + b^2}{c^2}\)</span> 的最小值</p></li>
</ol>
<hr />
<p>【第一问】根据二倍角公式有：</p>
<p><span class="math display">\[
\frac{\sin 2B}{1 + \cos 2B} = \frac{2\sin B\cos B}{1 + (2\cos^2 B - 1)} = \frac{\sin B}{\cos B}
\]</span></p>
<p>代入已知等式：</p>
<p><span class="math display">\[
\frac{\cos A}{1 + \sin A} = \frac{\sin B}{\cos B}
\]</span></p>
<p>整理得到：</p>
<p><span class="math display">\[
\cos A\cos B = \sin B + \sin A\sin B \Rightarrow \sin B = \cos A\cos B - \sin A\sin B = \cos(A + B)
\]</span></p>
<p>根据三角形内角和，有 <span class="math inline">\(A + B + C = \pi \Rightarrow A + B = \pi - C\)</span>，即：</p>
<p><span class="math display">\[
\sin B = \cos(\pi - C) = -\cos C
\]</span></p>
<p>已知 <span class="math inline">\(C = \dfrac{2\pi}{3}\)</span>，所以：</p>
<p><span class="math display">\[
\sin B =  -\cos\frac{2\pi}{3} = \frac12
\]</span></p>
<p>由于 <span class="math inline">\(B\)</span> 位于三角形内，所以 <span class="math inline">\(B \in (0, \pi)\)</span>。</p>
<p>另外，考虑到 <span class="math inline">\(C = \dfrac{2\pi}{3}\)</span>，若 <span class="math inline">\(B &gt; \dfrac\pi2\)</span>，则 <span class="math inline">\(A = \pi - C - B &lt; 0\)</span>，不符合要求，所以 <span class="math inline">\(B &lt; \dfrac\pi2\)</span>。</p>
<p>从而 <span class="math inline">\(B = \dfrac\pi6\)</span>。</p>
<p>【第二问】根据上一问：</p>
<p><span class="math display">\[
\cos(A + B) = \sin B = \cos\left(\frac\pi2 - B\right)
\]</span></p>
<p>由于 <span class="math inline">\(A + B, \dfrac\pi2 - B \in (0, \pi)\)</span>，而余弦函数在这一个区间单调，所以：</p>
<p><span class="math display">\[
A + B = \dfrac\pi2 - B \iff A + 2B = \frac\pi2
\]</span></p>
<p>根据正弦定理：</p>
<p><span class="math display">\[
\frac{a^2 + b^2}{c^2} = \frac{\sin^2A + \sin^2B}{\sin^2C}
\]</span></p>
<p>使用 <span class="math inline">\(-\cos C = \sin B\)</span> 替换，并代入 <span class="math inline">\(A + 2B = \dfrac\pi2\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
\frac{a^2 + b^2}{c^2} &amp;= \frac{\sin^2A + \sin^2B}{\sin^2C} = \frac{\sin^2\left(\dfrac\pi2 - 2B\right) + \sin^2B}{1 - \cos^2C} \\
&amp;= \frac{\cos^2 2B + \sin^2B}{1 - \sin^2B} = \frac{(2\cos^2 B - 1)^2 + (1 - \cos^2B)}{\cos^2B} \\
&amp;= 4\cos^2B + \frac{2}{\cos^2B} - 5 \geq 4\sqrt2 - 5
\end{aligned}
\]</span></p>
<p>等号成立当且仅当 <span class="math inline">\(\cos B = \dfrac{1}{\sqrt[4]{2}}\)</span>。</p>
<p>即 <span class="math inline">\(\dfrac{a^2 + b^2}{c^2}\)</span> 的最小值为 <span class="math inline">\(4\sqrt2 - 5\)</span>。</p>
<h2 id="problem-19">Problem 19</h2>
<p>已知直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 的体积为 <span class="math inline">\(4\)</span>，<span class="math inline">\(\triangle A_1BC\)</span> 的面积为 <span class="math inline">\(2\sqrt 2\)</span>。</p>
<ol type="1">
<li><p>求 <span class="math inline">\(A\)</span> 到平面 <span class="math inline">\(A_1BC\)</span> 的距离</p></li>
<li><p>设 <span class="math inline">\(D\)</span> 为 <span class="math inline">\(A_1C\)</span> 的中点，已知 <span class="math inline">\(AA_1 = AB\)</span> 且平面 <span class="math inline">\(A_1BC\)</span> 垂直于平面 <span class="math inline">\(ABB_1A_1\)</span>，求二面角 <span class="math inline">\(A-BD-C\)</span> 的正弦值。</p></li>
</ol>
<hr />
<p>【第一问】考虑三棱锥 <span class="math inline">\(A_1-ABC\)</span>，其和直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 有相同的底面 <span class="math inline">\(\triangle ABC\)</span> 且有相同的高 <span class="math inline">\(AA_1\)</span>，所以其体积为直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 的三分之一，即：</p>
<p><span class="math display">\[
V_{A_1-ABC} = \frac13 \times 4 = \frac43
\]</span></p>
<p>如果记 <span class="math inline">\(A\)</span> 到平面 <span class="math inline">\(A_1BC\)</span> 的距离为 <span class="math inline">\(h\)</span>，<span class="math inline">\(\triangle A_1BC\)</span> 的面积为 <span class="math inline">\(S\)</span>，那么 <span class="math inline">\(V_{A_1-ABC} = \dfrac13 Sh\)</span>。从而得到：</p>
<p><span class="math display">\[
\dfrac13 Sh = \frac43 \Rightarrow Sh = 4
\]</span></p>
<p>由题设有 <span class="math inline">\(S = 2\sqrt 2\)</span>，所以 <span class="math inline">\(A\)</span> 到平面 <span class="math inline">\(A_1BC\)</span> 的距离为：</p>
<p><span class="math display">\[
h = \frac{4}{2\sqrt 2} = \sqrt 2
\]</span></p>
<p>【第二问】</p>
<p>在直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 中，我们有 <span class="math inline">\(BB_1\)</span> 垂直于平面 <span class="math inline">\(ABC\)</span>，考虑到 <span class="math inline">\(BC \subset\)</span> 平面 <span class="math inline">\(ABC\)</span>，所以 <span class="math inline">\(BB_1 \bot BC\)</span>。</p>
<p>另一方面，直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 中侧面 <span class="math inline">\(ABB_1A_1\)</span> 为长方形，而 <span class="math inline">\(AA_1 = AB\)</span>，所以该侧面为正方形，进而 <span class="math inline">\(AB_1 \bot A_1B\)</span>。</p>
<p>由于平面 <span class="math inline">\(A_1BC\)</span> 垂直于平面 <span class="math inline">\(ABB_1A_1\)</span> 且两平面交于 <span class="math inline">\(A_1B\)</span>，考虑到 <span class="math inline">\(AB_1 \subset\)</span> 平面 <span class="math inline">\(ABB_1A_1\)</span>，所以 <span class="math inline">\(AB_1\)</span> 垂直于平面 <span class="math inline">\(A_1BC\)</span>。而又由于 <span class="math inline">\(BC \subset\)</span> 平面 <span class="math inline">\(ABC\)</span>，所以 <span class="math inline">\(AB_1 \bot BC\)</span>。</p>
<p>因为 <span class="math inline">\(AB_1, BB_1\)</span> 都是平面 <span class="math inline">\(ABB_1A_1\)</span> 内的直线且两者相交于 <span class="math inline">\(B_1\)</span>，而直线 <span class="math inline">\(BC\)</span> 与两者均垂直，所以 <span class="math inline">\(BC\)</span> 垂直于平面 <span class="math inline">\(ABB_1A_1\)</span>。考虑到 <span class="math inline">\(AB \subset\)</span> 平面 <span class="math inline">\(ABB_1A_1\)</span>，所以 <span class="math inline">\(AB \bot BC\)</span>。同理依然有 <span class="math inline">\(A_1B \bot BC\)</span>。</p>
<p>也就是说 <span class="math inline">\(\triangle ABC\)</span> 为以 <span class="math inline">\(AC\)</span> 为斜边的直角三角形，<span class="math inline">\(\triangle A_1BC\)</span> 为以 <span class="math inline">\(A_1C\)</span> 为斜边的直角三角形。设 <span class="math inline">\(AA_1 = AB = a, BC = b\)</span>，那么 <span class="math inline">\(A_1B = \sqrt2 a\)</span>，<span class="math inline">\(\triangle ABC\)</span> 面积为 <span class="math inline">\(\dfrac12 ab\)</span>，<span class="math inline">\(\triangle A_1BC\)</span> 面积为 <span class="math inline">\(\dfrac{\sqrt 2}{2}ab = 2\sqrt 2\)</span>。</p>
<p>那么直三棱柱 <span class="math inline">\(ABC-A_1B_1C_1\)</span> 的体积为 <span class="math inline">\(a\cdot \dfrac12 ab = \dfrac12 a^2b = 4\)</span>。</p>
<p>从而得到 <span class="math inline">\(a = b = 2\)</span>。</p>
<p>上述论述中我们已经说明了 <span class="math inline">\(AB, B_1B, BC\)</span> 两两垂直，所以以 <span class="math inline">\(B\)</span> 为坐标原点，<span class="math inline">\(BC, BA, BB_1\)</span> 分别为 <span class="math inline">\(x, y, z\)</span> 轴建立空间直角坐标系。</p>
<p>那么 <span class="math inline">\(A\)</span> 坐标为 <span class="math inline">\((0, 2, 0)\)</span>，<span class="math inline">\(A_1\)</span> 坐标为 <span class="math inline">\((0, 2, 2)\)</span>，<span class="math inline">\(C\)</span> 坐标为 <span class="math inline">\((2, 0, 0)\)</span>。</p>
<p>由于 <span class="math inline">\(D\)</span> 为 <span class="math inline">\(A_1C\)</span> 中点，所以其坐标为 <span class="math inline">\((1, 1, 1)\)</span>。</p>
<p>那么 <span class="math inline">\(\vec{BA} = (0, 2, 0), \vec{BD} = (1, 1, 1), \vec{BC} = (2, 0, 0)\)</span>。</p>
<p>假设平面 <span class="math inline">\(ABD\)</span> 的法向量为 <span class="math inline">\(\boldsymbol{n} = (x_1, y_1, z_1)\)</span>，根据 <span class="math inline">\(\boldsymbol{n} \bot \vec{BA}, \vec{BD}\)</span> 得到：</p>
<p><span class="math display">\[
\begin{cases}
x_1 + y_1 + z_1 = 0 \\
2y_1 = 0
\end{cases}
\]</span></p>
<p>不妨取 <span class="math inline">\(\boldsymbol{n} = (1, 0, -1)\)</span>。同理可以取平面 <span class="math inline">\(CBD\)</span> 的法向量 <span class="math inline">\(\boldsymbol{m} = (0, 1, -1)\)</span>。</p>
<p>记欲求二面角大小为 <span class="math inline">\(\theta\)</span>，可以得到二面角 <span class="math inline">\(A-BD-C\)</span> 的余弦值绝对值为：</p>
<p><span class="math display">\[
|\cos\langle\boldsymbol{n}, \boldsymbol{m}\rangle| = \left|\frac{\boldsymbol{n} \cdot \boldsymbol{m}}{|\boldsymbol{n}| \cdot |\boldsymbol{m}|}\right| = \frac{1}{2}
\]</span></p>
<p>从而得到该二面角的正弦值为：</p>
<p><span class="math display">\[
\sin\theta = \sqrt{1 - |\cos\theta|^2} = \frac{\sqrt 3}{2}
\]</span></p>
<h2 id="problem-20">Problem 20</h2>
<p>概率统计相关问题。医疗团队针对某一种疾病和个人卫生的关系做调查，抽样 <span class="math inline">\(100\)</span> 名该病患者构成病例组和 <span class="math inline">\(100\)</span> 名未患有该病的健康人构成对照组，调查他们的个人卫生，得到下述数据：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">个人卫生不够良好</th>
<th style="text-align: center;">个人卫生良好</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">病例组</td>
<td style="text-align: center;"><span class="math inline">\(40\)</span></td>
<td style="text-align: center;"><span class="math inline">\(60\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">对照组</td>
<td style="text-align: center;"><span class="math inline">\(10\)</span></td>
<td style="text-align: center;"><span class="math inline">\(90\)</span></td>
</tr>
</tbody>
</table>
<ol type="1">
<li><p>能否有 <span class="math inline">\(99\%\)</span> 的把握认为患该病的群体和未患该病的群体个人卫生情况有差异</p></li>
<li><p>从该地区人群中任选一人，记 <span class="math inline">\(A\)</span> 表示事件“选到的人卫生习惯不够良好”，<span class="math inline">\(B\)</span> 表示事件“选到的人患有该疾病”。记指标 <span class="math inline">\(R\)</span> 为：</p></li>
</ol>
<p><span class="math display">\[
R = \frac{P(B \mid A)}{P(\overline B \mid A)} \cdot \frac{P(\overline B | \overline A)}{P(B \mid \overline A)}
\]</span></p>
<ol type="i">
<li>证明：</li>
</ol>
<p><span class="math display">\[
R = \frac{P(A \mid B)}{P(\overline A \mid B)} \cdot \frac{P(\overline A | \overline B)}{P(A \mid \overline B)}
\]</span></p>
<ol start="2" type="i">
<li>利用调查数据估计 <span class="math inline">\(P(A \mid B), P(A \mid \overline B)\)</span>，并根据上述结论估计 <span class="math inline">\(R\)</span> 值。</li>
</ol>
<hr />
<p>【第一问】直接使用卡方检验：</p>
<p><span class="math display">\[
K^2 = \frac{n(ad - bc)^2}{(a + b)(c + d)(a + c)(b + d)} = \frac{200 \times (40 \times 90 - 10 \times 60)^2}{100 \times 100 \times 50 \times 150} = 24 &gt; 6.635
\]</span></p>
<p>可知我们有 <span class="math inline">\(99\%\)</span> 的把握认为患该病的群体和未患该病的群体个人卫生情况有差异。</p>
<p>【第二问】我们首先证明第一小问的等式：</p>
<p>根据 <span class="math inline">\(R\)</span> 的定义和条件概率的定义：</p>
<p><span class="math display">\[
\begin{aligned}
R &amp;= \frac{P(B \mid A)}{P(\overline B \mid A)} \cdot \frac{P(\overline B | \overline A)}{P(B \mid \overline A)} = \frac{\dfrac{P(AB)}{P(A)} \cdot \dfrac{P(\overline A\overline B)}{P(\overline A)}}{\dfrac{P(A\overline B)}{P(A)} \cdot \dfrac{P(\overline AB)}{P(\overline A)}} \\
&amp;= \frac{P(AB)P(\overline A\overline B)}{P(A\overline B)P(\overline AB)} \\
&amp;= \frac{\dfrac{P(AB)}{P(B)} \cdot \dfrac{P(\overline A\overline B)}{P(\overline B)}}{\dfrac{P(A\overline B)}{P(\overline B)} \cdot \dfrac{P(\overline AB)}{P(B)}} = \frac{P(A \mid B)}{P(\overline A \mid B)} \cdot \frac{P(\overline A | \overline B)}{P(A \mid \overline B)}
\end{aligned}
\]</span></p>
<p>容易根据调查数据估计出：</p>
<p><span class="math display">\[
P(A \mid B) = 0.4, P(\overline A \mid B) = 0.6, P(\overline A | \overline B) = 0.9, P(A \mid \overline B) = 0.1
\]</span></p>
<p>此时 <span class="math inline">\(R = 6\)</span>。</p>
<h2 id="problem-21">Problem 21</h2>
<p>已知点 <span class="math inline">\(A(2, 1)\)</span> 在双曲线 <span class="math inline">\(C: \dfrac{x^2}{a^2} - \dfrac{y^2}{a^2 - 1} = 1(a &gt; 1)\)</span> 上，直线 <span class="math inline">\(l\)</span> 交 <span class="math inline">\(C\)</span> 于 <span class="math inline">\(P, Q\)</span> 两点，直线 <span class="math inline">\(AP, AQ\)</span> 的斜率之和为 <span class="math inline">\(0\)</span>。</p>
<ol type="1">
<li><p>求 <span class="math inline">\(l\)</span> 的斜率</p></li>
<li><p>若 <span class="math inline">\(\tan\angle PAQ = 2\sqrt 2\)</span>，求 <span class="math inline">\(\triangle PAQ\)</span> 的面积</p></li>
</ol>
<hr />
<p>【第一问】由于 <span class="math inline">\(A(2, 1)\)</span> 在双曲线 <span class="math inline">\(C\)</span> 上，所以：</p>
<p><span class="math display">\[
\dfrac{4}{a^2} - \dfrac{1}{a^2 - 1} = 1 \Rightarrow a^2 = 2
\]</span></p>
<p>不妨记 <span class="math inline">\(AP\)</span> 的斜率为 <span class="math inline">\(k\)</span>，那么 <span class="math inline">\(AQ\)</span> 的斜率为 <span class="math inline">\(-k\)</span>。从而 <span class="math inline">\(AP\)</span> 的方程为 <span class="math inline">\(y = k(x - 2) + 1\)</span>，将其代入双曲线方程得到：</p>
<p><span class="math display">\[
\dfrac{x^2}{2} - (kx - 2k + 1)^2 = 1
\]</span></p>
<p>整理为：</p>
<p><span class="math display">\[
\left(\frac{1}{2} - k^2\right)x^2 + 2(2k - 1)kx - (1 + (2k - 1)^2) = 0
\]</span></p>
<p>由于 <span class="math inline">\(A\)</span> 为双曲线和 <span class="math inline">\(AP\)</span> 的交点之一，所以 <span class="math inline">\(x = 2\)</span> 为其一根，另一根为 <span class="math inline">\(P\)</span> 的横坐标。</p>
<p>上述方程的两根之积为：</p>
<p><span class="math display">\[
-\frac{1 + (2k - 1)^2}{\dfrac{1}{2} - k^2} = -\frac{2 + 2(2k - 1)^2}{1 - 2k^2}
\]</span></p>
<p>得知其横坐标即可计算其纵坐标，所以 <span class="math inline">\(P\)</span> 的坐标为：</p>
<p><span class="math display">\[
\left(-\frac{1 + (2k - 1)^2}{1 - 2k^2}, \frac{2k^2 - 4k + 1}{1 - 2k^2}\right)
\]</span></p>
<p>将 <span class="math inline">\(k\)</span> 替换为 <span class="math inline">\(-k\)</span> 得到 <span class="math inline">\(Q\)</span> 的坐标：</p>
<p><span class="math display">\[
\left(-\frac{1 + (2k + 1)^2}{1 - 2k^2}, \frac{2k^2 + 4k + 1}{1 - 2k^2}\right)
\]</span></p>
<p>也就是说 <span class="math inline">\(l\)</span> 的斜率为：</p>
<p><span class="math display">\[
k_l = \frac{-\dfrac{1 + (2k + 1)^2}{1 - 2k^2} + \dfrac{1 + (2k - 1)^2}{1 - 2k^2}}{\dfrac{2k^2 + 4k + 1}{1 - 2k^2} - \dfrac{2k^2 - 4k + 1}{1 - 2k^2}} = -1
\]</span></p>
<p>【第二问】由于 <span class="math inline">\(\tan\angle PAQ &gt; 0\)</span>，所以其为锐角。我们可以知道 <span class="math inline">\(\tan\dfrac12\angle PAQ = \dfrac1k\)</span>，这里 <span class="math inline">\(k\)</span> 为 <span class="math inline">\(AP, AQ\)</span> 斜率的绝对值。从而：</p>
<p><span class="math display">\[
\tan\angle PAQ = \frac{2\tan\dfrac12\angle PAQ}{1 - \tan^2\dfrac12\angle PAQ} = \frac{2 / k}{1 - 1 / k^2} = 2\sqrt 2
\]</span></p>
<p>由 <span class="math inline">\(k &gt; 0\)</span> 得到 <span class="math inline">\(k = \sqrt 2\)</span>。</p>
<p>从而根据上一问的结果，我们得到：</p>
<p><span class="math display">\[
P\left(\frac{10 - 4\sqrt 2}{3}, \frac{4\sqrt 2 - 5}{3}\right), Q\left(\frac{10 + 4\sqrt 2}{3}, \frac{-4\sqrt 2 - 5}{3}\right)
\]</span></p>
<p>此时 <span class="math inline">\(PQ\)</span> 方程为 <span class="math inline">\(y = -x + \dfrac53\)</span>，<span class="math inline">\(A\)</span> 到此的距离为：</p>
<p><span class="math display">\[
d = \frac{|2 + 1 - 5 / 3|}{\sqrt 2} = \frac{2\sqrt 2}{3}
\]</span></p>
<p>而：</p>
<p><span class="math display">\[
|PQ| = \sqrt 2 \left(\frac{10 + 4\sqrt 2}{3} - \frac{10 - 4\sqrt 2}{3}\right) = \frac{16}{3}
\]</span></p>
<p>所以需要求的面积为：</p>
<p><span class="math display">\[
S = \frac12 |PQ| \cdot d = \frac{16\sqrt 2}{9}
\]</span></p>
<h2 id="problem-22">Problem 22</h2>
<p>已知函数 <span class="math inline">\(f(x) = e^x - ax\)</span> 与函数 <span class="math inline">\(g(x) = ax - \ln x\)</span> 有相同的最小值。</p>
<ol type="1">
<li><p>求 <span class="math inline">\(a\)</span></p></li>
<li><p>证明存在实数 <span class="math inline">\(b\)</span>，令直线 <span class="math inline">\(y = b\)</span> 和曲线 <span class="math inline">\(y = f(x), y = g(x)\)</span> 共计有三个不同的交点，且这三个交点的横坐标从小到大排列构成等差数列。</p></li>
</ol>
<hr />
<p>【第一问】显然：</p>
<p><span class="math display">\[
f&#39;(x) = e^x - a, g&#39;(x) = a - \frac1x
\]</span></p>
<p>由于这两个函数有相同的最小值，所以：</p>
<p><span class="math display">\[
f(\ln a) = a - a\ln a = 1 + \ln a = g\left(\frac1a\right)
\]</span></p>
<p>也就是说：</p>
<p><span class="math display">\[
\ln a - \frac{a - 1}{a + 1} = 0
\]</span></p>
<p>另外，由最小值的存在性显然有 <span class="math inline">\(a &gt; 0\)</span>。考虑函数：</p>
<p><span class="math display">\[
\phi(x) := \ln x - \frac{x - 1}{x + 1}, x &gt; 0
\]</span></p>
<p>其有：</p>
<p><span class="math display">\[
\phi&#39;(x) = \frac1x - \frac{2}{(x + 1)^2} = \frac{x^2 + 1}{x(x + 1)^2} &gt; 0
\]</span></p>
<p>由 <span class="math inline">\(\phi(a) = \phi(1) = 0\)</span> 得到 <span class="math inline">\(a = 1\)</span>。</p>
<p>【第二问】首先证明，<span class="math inline">\(f(x) - g(x) = 0\)</span> 在 <span class="math inline">\((0, +\infty)\)</span> 上有唯一的解 <span class="math inline">\(x_0\)</span>。</p>
<p>定义函数 <span class="math inline">\(h(x) := f(x) - g(x)\)</span>。</p>
<p>根据上一问，得知 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\((0, +\infty)\)</span> 上递增，<span class="math inline">\(g(x)\)</span> 在 <span class="math inline">\((0, 1)\)</span> 上递减，这说明 <span class="math inline">\(h(x)\)</span> 在 <span class="math inline">\((0, 1)\)</span> 上递增。</p>
<p>另外：</p>
<p><span class="math display">\[
h&#39;(x) = e^x + \frac1x - 2 &gt; e - 2 &gt; 0, x &gt; 1
\]</span></p>
<p>所以 <span class="math inline">\(h(x)\)</span> 在 <span class="math inline">\((1, +\infty)\)</span> 上递增，即 <span class="math inline">\(h(x)\)</span> 在 <span class="math inline">\((0, +\infty)\)</span> 上递增。</p>
<p>此外：</p>
<p><span class="math display">\[
h(1) = e - 2 &gt; 0
\]</span></p>
<p>另外：</p>
<p><span class="math display">\[
g(e^{1 - e}) = e^{1 - e} - (1 - e) &gt; e - 1 = f(1) &gt; f(e^{1 - e})
\]</span></p>
<p>故 <span class="math inline">\(h(e^{1 - e}) &lt; 0\)</span>。</p>
<p>这说明了 <span class="math inline">\(x_0\)</span> 唯一存在于区间 <span class="math inline">\((e^{1 - e}, 1)\)</span> 上。</p>
<p>下面证明 <span class="math inline">\(b = f(x_0) = g(x_0)\)</span> 满足条件。</p>
<p>在此之前，我们需要知道由于 <span class="math inline">\(0 &lt; x_0 &lt; 1\)</span>，所以 <span class="math inline">\(1 = f(0) &lt; b = f(x_0) &lt; e - 1 = f(1)\)</span>。</p>
<p>首先证明 <span class="math inline">\(f(x) = b\)</span> 有除 <span class="math inline">\(x_0\)</span> 外，还具有一根 <span class="math inline">\(x_1 \in (-\infty, 0)\)</span>。由于 <span class="math inline">\(f(x)\)</span> 在 <span class="math inline">\((-\infty, 0)\)</span> 上递减，并且 <span class="math inline">\(f(0) &lt; b\)</span>，且 <span class="math inline">\(f(1 - e) = e^{1 - e} + (e - 1) &gt; e - 1 &gt; b\)</span>。</p>
<p>这说明了 <span class="math inline">\(x_1\)</span> 唯一存在于 <span class="math inline">\((1 - e, 0)\)</span> 上。</p>
<p>再证明 <span class="math inline">\(g(x) = b\)</span> 有除 <span class="math inline">\(x_0\)</span> 外，还具有一根 <span class="math inline">\(x_2 \in (1, +\infty)\)</span>。由于 <span class="math inline">\(g(x)\)</span> 在 <span class="math inline">\((1, +\infty)\)</span> 上递增，并且 <span class="math inline">\(g(1) = 1 &lt; b\)</span>，且 <span class="math inline">\(g(e) = e - 1 &gt; b\)</span>。</p>
<p>这说明了 <span class="math inline">\(x_2\)</span> 唯一存在于 <span class="math inline">\((1, e)\)</span> 上。</p>
<p>也就是说直线 <span class="math inline">\(y = b\)</span> 和曲线 <span class="math inline">\(y = f(x), y = g(x)\)</span> 共计有三个不同的交点，其横坐标从小到大为 <span class="math inline">\(x_1, x_0, x_2\)</span>。</p>
<p>现在观察下述：</p>
<p><span class="math display">\[
\begin{cases}
f(\ln x_0) = e^{\ln x_0} - \ln x_0 = x_0 - \ln x_0 = g(x_0) = b \\
g(e^{x_0}) = e^{x_0} - \ln e^{x_0} = e^{x_0} - x_0 = f(x_0) = b \\
\end{cases}
\]</span></p>
<p>这说明 <span class="math inline">\(\ln x_0, e^{x_0}\)</span> 也是直线 <span class="math inline">\(y = b\)</span> 和曲线 <span class="math inline">\(y = f(x), y = g(x)\)</span> 交点的横坐标，但我们已经证明了一共仅有三个交点，这只能说明 <span class="math inline">\(x_1 = \ln x_0, x_2 = e^{x_0}\)</span>。</p>
<p>由于 <span class="math inline">\(f(x_0) = g(x_0)\)</span>，所以 <span class="math inline">\(e^{x_0} + \ln x_0 = x_1 + x_2 = 2x_0\)</span>。</p>
<p>所以这三个横坐标从小到大排列为等差数列，证明完毕。</p>
<h1 id="后记">后记</h1>
<p>卷子做完了，Holder 也已经明白了我已经没有高中时候那种手算能力了。</p>
<p>不少人说这份卷子很难，其实我看真正算得上是难题的几乎没有，几乎每道题都有很自然的思考角度和解决方式。</p>
<p>但问题就是现在大部分的高考备考流于做模板题，练死思路，结果就是这次高考连稍微难点的解三角形、立体几何都做不出来。</p>
<p>复习不够全面，可能连条件概率的定义、棱台的体积公式都会忘记。</p>
<hr />
<p>这份卷子只不过是把平时用来送分的解答题前几条，数列、解三角形、立体几何稍微出得有了点新意，稍微加了点门槛。卷子其他地方平心而论，概率与统计只要记得条件概率定义五分钟就能写完，解析几何是考烂了的二级结论，选择填空也乏善可陈。但就是这样，就能把平时的中档生直接卡住。</p>
<p>而且这份卷子的特征就是，思路的高下直接影响分数。想到了妙手，就能一分钟内看出答案，想不到，那就和我做填空题最后一问一样算到起飞还得不到答案。一旦陷入了这种状况，如果不及时调整思路，可能影响的是后面的解题状态。</p>
<p>说明死方法没用了，脑子要灵活。总而言之，是一份好卷子，但是被骂也是理所应当。</p>
]]></content>
      <categories>
        <category>【杂谈】数学</category>
      </categories>
  </entry>
  <entry>
    <title>大三秋季学期学期总结</title>
    <url>/2022/01/05/grade-3-autumn-conclusion/</url>
    <content><![CDATA[<p>今天考完了最后一门《编译原理》，随后参加了年级会。这样看来，我的大三上学期，这个被学长们称为渡劫的学期，就这样平平无奇结束了。</p>
<span id="more"></span>
<h2 id="对自己的质疑">对自己的质疑</h2>
<p>这学期之所以被称为渡劫，是因为按照教学计划计算机系的最核心的四大原理课是在这学期修读。这四大原理是《计算机组成原理》《计算机网络原理》《编译原理》《信号处理原理》。而我所说的对自己的质疑，就是我发现我完全对这四门课里的大部分提不起任何兴趣。</p>
<p>在成为大三学生之前，我从未质疑过我为什么要来这个专业，甚至一定程度上庆幸虽然选择计算机是随大流，但自己却也莫名其妙混得不算差。大一和大二修读的课程，我大多都能学得比较明白，再不济也能做到考前 overfit 一波混个考试分数。得益于此，我大三之前的 GPA 可以说还挺不错的。</p>
<p>但是进入大三之后，我明显感受到力不从心。比如说造计算机，其实我早就在《数字电路实验》这门大二下学期的入门课里面认识到了我似乎对硬件设计一窍不通，或者说完全没有一种愿意学习这类知识的冲动。另外比如说计算机网络相关，我对网络只是单纯知道一些简单的概念，深入了解却让我相当抗拒，我不是抗拒特定的课程，我是对整个计算机网络这个领域感到深刻的无力，甚至是生理性不适。</p>
<p>所以我有意无意地拖延了造机，不到最后一周没有真正开工。我有意无意地只用一下午复习网原，有意无意地没有去任何一堂除了体育之外的课。</p>
<p>因为我抗拒，我理解不了这些知识背后的逻辑，支撑着我学习新的领域的动力不能直接迁移到计组和网原这些课程上。</p>
<p>与此对应的，我课余在尝试着学习一些数学，研究生方向也想尽量往数学相关方向贴近一下。在学习《信号组成原理》的时候，常常痛斥其数学基础不牢靠（毕竟是工科面向应用的学问，其宁愿牺牲严谨性也要保证易用性），也曾钻牛角尖一样地和别人争执过信号这门课里的数学体系是不是矛盾的。</p>
<p>我发现我对知识有一点奇妙的偏执，我希望我学习的东西是体系的、有逻辑的，或者说我希望学习一个由人类<strong>发现</strong>的学科，而非由人类<strong>发明</strong>的学科。比如说网络协议往往充满了历史包袱、前人的失败经历、欠考虑的机制和随后而来的零碎补丁，它不是一个等待人类来发掘的逻辑体系，它本身就是人类在实践中堆叠的经验谈。与此类似的，还有我拒绝研究 CSS 的那一堆难以理解的属性，不想深究 Web 混沌初开时的前端技术。</p>
<p>所以我开始反思，我或许真的应该当时听从一些劝诫去学习数学什么的，但实际上我也知道这不过是虚无的懊悔，不过是这山望着那山高般的幻觉。但基于这样的自我认识，我尝试着去选择和数学关系较大的计算机领域作为研究生方向，比如说渲染。</p>
<h2 id="课内学习">课内学习</h2>
<p>和之前说的一样，这学期六门课，四大原理加两门限选。网原和网安都是网络方向的课程，考试几乎全都是背诵就行，但悲哀的是我厌恶计算机网络，连课件都懒得打开看两眼。不过还好网安不难，但是网原我估计差不多就是 B+ / B / B- 里面随机给分了，自我认为 3.3 绝对不亏，3.6 绝对血赚。</p>
<p>计组确实硬核，而且我也不喜欢写硬件语言，因为它思维逻辑和我常用的软件语言相当不同，所以造机大实验着实让我一个星期没睡好觉。但是计组和网原最大的不同是，计组学不好我认为原因是客观上我能力不行，网络学不好我认为原因是主观上我厌恶。所以即使计组不简单，考试也不简单，但我依然很努力地去学了三四天，虽然感觉也没考多好。</p>
<p>编原今年史诗级削弱，取消实验考试改为期末周后的附加实验，删减考纲，降低试题难度，提升平时作业占比。就说最明显的，今天在考场上看到 SLR(1) 文法的题选的语言竟然是 <span class="math inline">\(\{a^n: n \geq 1\}\)</span> 的时候，我已经真的深刻领悟到，什么是把分送到你手上。</p>
<p>信号原理自己学得挺开心，毕竟自己也喜欢有事没事钻一钻所谓事物本质的东西。比如说当我期末复习的时候，把数字滤波器、传递函数、 Z 变换、收敛域与系统性质那一套在课间上混乱不堪的概念理清楚的时候，自己真的有一种豁然开朗而想继续深入学习的感觉。</p>
<hr />
<p>要说总体的话，就是这学期估计 GPA 还得继续往下掉，但我也只能说 Who cares。大一大二到大三，自己也经历了微积分不考 4.0 就是挂科，数据结构 3.6 就是胜利到网原 3.3 也不算亏这一路的心态变化。</p>
<p>但似乎 Holder 还是没有摆脱那一种奇妙的思维惯性，peer pressure 还是在隐隐约约给我带来一些不愉悦。</p>
<h2 id="科协">科协</h2>
<p>上学期奇妙地成为了副主席，那这学期就应该做点事情了。</p>
<p>在还没有开始造机、造路由器之前，由于课业压力暂且还不大，我便抽了一点空余时间把技能引导文档搭建起来了，并且写了一些东西进去。</p>
<p>技能引导文档大约是一种课程前置知识的补全，因为我确实见过不少同学都已经开始上课了，却连前置技术栈都不了解，最后只能网上随便找点资料混过去。秉持着能做点什么都是好的的想法，索性借着科协这个平台，搭建起了这样的一个文档共享的网站。</p>
<p>但是随着造机、造路由器和期末周，文档维护也就暂且搁置。现在考试完了，寒假是一大波开工的好时机。</p>
<hr />
<p>说到科协就必须要提到安老板，就要提到我最终估计就会采纳安老板的提议，去媒体所混日子了。</p>
<p>现在还在绝赞学习《GAMES101》，感觉自己摸鱼摸得太过了其实。</p>
<h2 id="摸鱼摸鱼摸">摸鱼摸鱼摸</h2>
<p>这个学期虽然很辛苦，但依然可以忙里偷闲摸不少鱼。小学期莫名其妙搞到了一个日区 App store 账号，于是又可以开始玩 Project Sekai 了。这种又有音游难度，又能抽抽卡养养妹子看看剧情的小游戏我确实喜欢，所以这个学期也基本一直都在玩，Phigros 基本都荒废了。</p>
<p>要说还有什么的话，就是打牌，无穷无尽的打牌。毕竟打牌确实没那么多限制，特别是打网络麻将，随时随地就开一把打着玩就行。所以 Holder 倒也经常在学累了的时候开一把，消遣消遣倒也不错。考试周其实打了不少牌，基本上一天打五六把还是有可能的。可能也是频率上来了，这学期也总算把四人麻将打上玉之间了。</p>
<p>除了网络麻将就是宿舍里搓牌，本学期最大的进展就是大约通过次世代认识了一些八字班学长一起打牌，不过确实也算是见识到了我这类图乐子打牌和认真打牌人的水平差距。</p>
<hr />
<p>另外可能就是通过 V+ 吹水群认识了另外一些人，平常也是交流交流 Vocaloid 相关，吹水聊天。可能偶尔会在周末的时候组织去国贸唱 K，自己也去过两三回了，确实是放松的好机会。</p>
<p>不过也因此渐渐喜欢上了学习的时候唱歌，虽然之前也偶尔会这样，但是真正感觉有意识地哼唱一些歌还是这个学期的事情。</p>
<h2 id="一些碎片">一些碎片</h2>
<h3 id="小学期的精神问题">小学期的精神问题</h3>
<p>暑假的时候我处于一种神经敏感的状态，整个人还在五月份那一次大崩溃的余震之中喜怒无常。而八月中旬的小学期，由于众所周知的屑课《Java 语言程序设计》，以及当时一些早已遗忘的情感问题的引子，Holder 又成功经历了一次情绪崩盘。</p>
<p>大约，那某一个夜晚，在工物馆和美院停车场之间小路上，漫无目的地晃荡着和 Sakana 哭诉着的场景，是我小学期记忆最深刻的事情。</p>
<h3 id="无界美术馆">无界美术馆</h3>
<p>上海的一个美术馆，在一个周末 Holder 偷偷跑去和 Sakana 到那里参观去了。</p>
<p>Holder 向来是不太解风情的，对这个美术馆里展出的那些灯光艺术、雕塑、投影交互等等作品，我只能说“好闪”“好亮”“好鲜艳”这些明显语言贫瘠的评价。所以说 Holder 还只能读死书，或者有事没事和舍友抬抬杠，精神世界倒也是一片荒芜。</p>
<h3 id="造机的三星期">造机的三星期</h3>
<p>其实我也说了，虽然造机确实给了三星期，但实际上我只在最后一个星期加紧做了不少事情。当时最喜欢的工作模式就是在 308 一个人坐着，手机挑一部没有很烧脑剧情的日常番，边看番边等 Vivado 编译或者看波形图。就这样半悠闲半紧张地工作着，倒也几天内写掉了不少东西。但平心而论，我依然没能从硬件设计中获取多少快乐，虽然最终看着自己写的 CPU 上能运行自己写的贪吃蛇游戏，但要让我回到那三星期，我说还不如打两三把牌。</p>
<h2 id="所以呢">所以呢？</h2>
<p>所以说大三上学期也就这样结束了，课业成绩并不理想，人也过得疲惫不堪，其中一大半责任是网原。但是换一种角度，我认识了新的一起打牌的朋友，认识了能和我一起唱 V 曲的同学，Project Sekai 时不时能抽出好看的角色，打牌虽然会恶调但确实缓解了一些紧张情绪。自己也逐步和自己和解，不再纠结于一些得失，自己也在尝试着尽力做一些帮助他人的事。</p>
<p>所以其实我也不知道我这个学期究竟是什么样的，这篇总结我也写得磕磕绊绊不知道什么是这学期的主线。传统意义上四大原理的主线在我这里断裂了，因为我精力分配中它们并不优先。</p>
<p>但总归是看到了本科生活的尽头，自己也已经有了意向性的导师，也对自己究竟想学什么、想做些什么有了模糊的应答。虽然还是时不时感叹我真的不适合计算机系，感叹自己怎么过得这么惨，时不时在空间或者朋友圈发一些意味不明的文字，但总体上 Holder 还是履行了上个学期的诺言，尽力地享受着自己的本科生活。</p>
<p>寒假的话，可能要做不少事了。</p>
<ul>
<li><p>技能引导文档寒假宣传</p></li>
<li><p>THUInfo 翻新</p></li>
<li><p>实验室科研的一些事务</p></li>
<li><p>自学一些数学以及日语</p></li>
</ul>
<p>下学期也选了若干看起来还挺有意思的课程，希望下学期能过得更快乐一些。</p>
<blockquote class="blockquote-center">
<p>失うことに慣れてく中で失くさずにいた大事な思いを、</p>
<p>抱きしめたら不意に涙が落ちたのは、</p>
<p>この街でまだ生きていたいと思うから。</p>
<p>——「幽霊東京」</p>

</blockquote>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>大三秋季学期前的一些碎话</title>
    <url>/2021/09/12/grade-3-autumn-preview/</url>
    <content><![CDATA[<p>自己似乎就这样莫名其妙成为了一个大三学生，其实还隐隐约约记得一年前刚进实验室的时候刘知远的一句“没想到这么快八字班也要造机了啊”。现在想来，九字班这个词语从原先的代指新生，渐渐地变成了代指一群大三老油条，而自己的一字班学弟也正在憧憬着四年的本科时光，一时间竟觉得大学原来也快结束了。</p>
<p>今夜突然接到 Sakana 的一句“我还是好焦虑”，唐突地自己也开始陷入了一种窘迫的心理。自己，真的准备好去迎接之后的生活了么。</p>
<span id="more"></span>
<h1 id="学业和大三的渡劫">学业和大三的渡劫</h1>
<p>清华大学的计算机系向来会把大三上学期称为渡劫，原因是计算机核心专业课四大原理一大工程（计算机组成原理、计算机网络原理、编译原理、信号处理原理、软件工程）将会在一个学期内学习完成。虽然自己已经提前把软件工程这门课草草了结，但是作为一个对硬件和计算机系统没有感觉的人，四大原理就足以让我恐惧。已经能够预见到，将来的 Holder 或许会被造计算机、造路由器、造编译器、写 Matlab 处理信号等各种困难的作业包围，然后还要抽出时间应付掉 VLSI 和网安两门限选课的平时学习。</p>
<p>其实也正如一些人对我的评价所说，我不是一个害怕困难或者折磨的人，但是我在受折磨的时候会习惯性一个人顶着。我只是默默地担心着自己的心理健康情况，自己这近几个月来时不时的情绪崩溃足以让我感到害怕。</p>
<p>但实际上，我还是在安慰着自己没有问题，劝慰着自己造机造路由器会顺利，或许还会有点乐趣。也或许会安慰自己，信号处理原理全是微积分，自己微积分学得挺明白不用担心。然而即便如此，还是抵挡不住现在的焦虑和不安。</p>
<h1 id="科研的不顺和前途的迷茫">科研的不顺和前途的迷茫</h1>
<p>我大一就跑到组里去了，是一个进组挺早的人，家里人一直比较关心我这么早进组会怎么样，当时还不以为意，但现在看来还是有点不大行。过早的进组让我缺少时间去打基础而过快地投入到实际工作之中，我对人工智能的理解本身就是几乎为零，和同组的那些曾经 C++ 手搓神经网络的大神相比自然不可相提并论。想到自己每周二的组会都会想尽办法编造一个自己没认真做完事情的理由的时候，那种窘迫和尴尬又涌了上来。</p>
<p>至今还记忆犹新的一个场景就是，中期汇报的时候刘知远老师在场，到我上去汇报的时候，应该是说出了大量幼稚或者说根本不合理的想法。那个时候刘知远说了这样一句：“现在 Holder 这个样子，我们需要反思一下我们的指导方式”。</p>
<p>这种看似自责的说法实则，看得出来他们的意见。</p>
<p>或许从那以后，我投入了大量的精力弥补我的基础，我开始看人工智能相关网课，从全联接层开始看到 CNN / RNN，再到 Encoder-decoder 或者 Transformer，然后开始使用 HuggingFace 的 BERT 和 T5 轮子，钻研 API 设计和源码。这一定程度上牵扯了我大量本应该用于课内的时间，但收获也是不错的，我 finetune 的 BERT 模型做出了被学长们称为“promising”的成果。</p>
<p>但是后续是无休无止的挫败，我 T5 相关的工作至今都处于停滞状态。在那段时间，我经历了第一次情绪崩溃，一时间万念俱灰，每天醒来只有想睡回去的想法。那段时间，身体也一直不是很好，时不时就会有心脏疼的感觉。这种情况下的我，选择了实质上的彻底放弃，虽然一直没有和带我的学长提出我要退出。</p>
<p>现在我也不想继续学习人工智能了，每每看到那些曾经熟悉且能熟练运用的数学公式、轮子、模型，只会让我想起那段折磨至极的时光。但大三上学期的我，早就已经浪费了一年的时光，现在的 Holder 的后路究竟如何，完全还是未知的，我该如何面临毕业，也还是未知的。</p>
<h1 id="或许还是有些好消息的">或许还是有些好消息的</h1>
<p>稍微能够宽慰我的，就是我现在过得还不错。至少我身边的一切，我的学业成绩、我的感情、我的朋友们、我的家人们都处于稳定的状态上，除了我自己的出路，其余暂且不需要我过多担心。</p>
<p>这已经足够了，如果不去太担忧未来的不确定，活在当下自然是自由而快乐的。中厅的麻将还能用，新笔记本上还有若干没有玩的游戏，Sakana 还在身边，我还是有一群能聊得来的朋友，这一切的一切，暂且能够让我不再过分担忧今后。</p>
<h1 id="holder-的一些自述">Holder 的一些自述</h1>
<p>在别人眼中，特别是我高中的老师眼中，我是一个特别会规划的人。然而实际上，Holder 永远是一个走到哪里算哪里的人，只不过总是喜欢回忆，总是喜欢和过去的自己斤斤计较，懊恼于一时的失误。</p>
<p>Holder 是一个喜欢沉浸在回忆中的人，我对过去的记忆可能过于清晰。我的一个习惯性动作是，无聊的时候将记忆中的场景构建出来，比如说尝试构建出：</p>
<blockquote class="blockquote-center">
<p>2018 年的 8 月份，在高中的三层小楼中，Holder 和同学们正在为升入高三做准备。除去我们升高三的理科实验班同学，其他人早已放假。那座小楼已经老旧不堪，空调毫无用处，电风扇没有力气。外面是炽热的阳光和扭曲的蝉鸣。</p>
<p>Holder 趁着下课偷偷跑出小楼，听着下课铃在早已空荡的学校中回响。</p>

</blockquote>
<p>我或许会把这个场景构建得和刚经历差不多，然后自己沉浸在这个场景里回忆当时自己的所思所想。这个习惯来源于初中睡午觉，当时为了让自己快速入睡，就会使用这种方法——在脑海中完全重建回忆的场景，这种方法消耗脑力很多，有的时候没有构建完成就慢慢睡着了。</p>
<p>这个习惯一般会让我很难忘记一些事情，但是坏处就是：</p>
<blockquote class="blockquote-center">
<p>我忘不掉一些应该忘却的事情。</p>

</blockquote>
<p>所以至今我的思维包袱是很重的，回忆构建的数据库足够庞大，能够支撑我思维的快速切换跳转和联想。但是一旦联想到一些本应该忘却的场景，比如说曾经的尴尬场面、自己伤害别人的行为，那 Holder 可能就会沉溺在这里，然后一遍一遍鞭尸自己。</p>
<p>这还是挺折磨的，这让我很难聚焦于当下应该做的事。</p>
<h1 id="所以说">所以说？</h1>
<p>这些文字其实没有任何意义，可能明天起来就会觉得幼稚和不成熟，但是确实是现在困困的 Holder 想要记录下来的。</p>
<p>Holder 就要成为大三的学生了，在此之前，12 号先要去北大吃一顿烤串，这足以让我暂且安静地睡去。</p>
<p>晚安。</p>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>大三春季学期学期总结</title>
    <url>/2022/07/07/grade-3-spring-conclusion/</url>
    <content><![CDATA[<p>这个学期说实话比较不太平凡。</p>
<span id="more"></span>
<h1 id="课内学习">课内学习</h1>
<p>这学期最一开始的打算是修完培养计划，所以除了 OS、系统结构、数学实验三大必修课之外，还选了整整六门限选课，远超于正常人的两三门。</p>
<p>学期一开始实际上没有什么体会，毕竟什么课都还没有给压力，加上当时没有封校，所以甚至还能保持每周都有出校活动，比如打四口机、打八口机、V+ 群聚、浮生群聚等等。而且当时也是刚刚加入徐昆的实验室，刚刚给我分配了工位，还在布置工位的硬件，所以过得总体而言还算快乐。</p>
<p>但是问题就在之后慢慢出现了，我们来梳理一下我选的所有课的任务列表：</p>
<ul>
<li>OS。六个 Lab，期中期末考试</li>
<li>系统结构。每周书面作业，两个 Lab，期末考试</li>
<li>数学实验。十个 Lab，期末考试</li>
<li>现代密码学。三个 Lab，期末考试，考勤</li>
<li>数据挖掘。六个 Lab，大作业，考勤</li>
<li>搜索引擎技术基础。两个 Lab，大作业</li>
<li>计算机图形学基础。四个 Lab，大作业，考勤</li>
<li>数据库专题训练。五个 Lab</li>
<li>存储技术基础。两个 Lab，论文笔记</li>
</ul>
<p>这些东西加起来快四十个 Lab，哪怕就是平均分配到学期十六周，每周都会有两到三个 Lab 要去做。而且这些 Lab 都不太算是一天能写完的量，少的可能一天一夜，大的比如说现代密码学的 Lab2、存储技术基础的 Lab2，都是占用了半个星期乃至一整个星期没日没夜地写的。而且数学实验的 Lab 一个都几千字，写得人都发麻。</p>
<p>再加上 OS 的 Lab 和数据库的 Lab 的截止日期一般都是某个周日，这就更加恐怖了，我有的时候周日需要快速赶工两个 Lab，然后数据库这门课的 Lab 如果不做他的很难的拓展功能是拿不到 4.0 的。</p>
<p>在这些东西交杂之下，我不得已先是退掉了数据库，因为 OS 当时已经期中考完了。然后做存储技术基础的 Lab2 写到人都快废了之后，为了 keep 绩点也最后退掉了。</p>
<p>我已经对这一学期的后半学期没什么印象了，因为每天都在赶工，每天都在为课内的事情折腾。再加上当时北京疫情封校，导致几乎所有的娱乐活动坍缩成为了活动室打麻将，更让这学期后半段一点记忆点都没有。</p>
<hr />
<p>好在你清良心发现给了记两门课 PF 的机会，我立刻记了 OS 和系统结构，这样的话我就可以摆烂到底，最后考试我也直接裸考，反正谁怕谁。</p>
<p>不过即使如此，选课选多了的弊端还是会在期末周浮现，那就是大作业。这么多课里面，有三门课有大作业，而且在我期末逃难的时候，还有系统结构的 Lab2 没写，这些东西构成了我六月底考试全部结束之后的噩梦，这些作业成功让我四天五天左右没有碰到床，都是在自家沙发上睡过去的。</p>
<p>这中间的插曲就是数学实验的事情，因为取消了期末考试，所以评分只能依据十次 Lab，但是这十次 Lab 大家几乎都是满分，一点区分度没有。所以当时老师就提到了需要把上课情况纳入考量，但问题就在于我是一个巨大习惯自学的人，真的是一次课没有去过。当时在政策说明的时候，老师甚至说出了考勤分可能占比到一半的政策。</p>
<p>这就有可能导致挂科，而挂科真的会非常难弄。于是我只能去和助教说明我的情况，自证自己真的这门课学明白了。</p>
<p>不过结局也是戏剧性的，助教最后透露了考勤分只占总评两分，但是我认识的带我一共四个一次考勤没去的同学，两个 4.0 两个 3.3，我们平时分都是几乎一样的。这就很奇怪，没有人知道老师最后怎么给分。</p>
<hr />
<p>就结果而言，这个学期可谓是成功的，因为我每一门都是 4.0。但是就过程而言，这段过程可谓是艰难至极，我可再也不想经历一遍。</p>
<p>不过已经最终了，绩点排名 26%，方案内也只剩下 4 学分，体育没有挂科，专业主修也都完成，应该进推免推荐名单问题不大。加上名额也已经口头确定，我自己做实验室的事情也还不错，总之结果上而言，我的本科看起来已经快完成任务了。</p>
<h1 id="实验室">实验室</h1>
<p>这是这学期最大的破事。</p>
<p>本来是在徐昆的图形学实验室的，也分配了工位，白嫖了一个台式机，自己还稍微布置了一下工位。</p>
<p>基于此我觉得我应该就安定在徐昆这里了，不过也确实，除了猫猫之外这里没有其他九字班的同学，而猫猫打算出国，并不会和我抢名额，而且当时徐昆和他的对话也暗示着名额应该会有给我的倾向。</p>
<p>就这么一系列的事情我就觉得问题不大了，应该就定在这里了。</p>
<p>这里稍微给自己辩解两句，如果我真的想做好一件事，我可能会花很长时间去打基础然后去做，但这样的问题就是会有一个月乃至更长的时间没有什么明显的产出。然而实验室的组会并不会允许你一周没有什么产出。那么问题就显而易见了，我在组里的很长一段时间内，都在学 GAMES101、学习什么是可微渲染、研究学长代码的架构，而毫无可以在组会上说的东西。</p>
<p>大约是四月底的某一天，带我的学长给我介绍了项目的新成员，一位茶园过来的九字班同学，当时我就隐约觉得不大对劲，但是也没说什么。</p>
<p>最后也就是大家都知道的，我的名额被挤掉了，五月份的时候，还要去找新老师。先是飘到 Prof. Ji 那里打算去做量子计算，但是考虑到前景和自己兴趣，最终还是 quit 了。</p>
<hr />
<p>在这之后我有时间就会去看媒体所的导师介绍页面，我几乎给上面每个老师都发送了简历，但是大部分老师都因为没有名额回绝了我。然而在这些老师里面，贾珈老师虽然已经没有名额，但是她愿意把我推荐给其他老师，这样我就认识了孙立峰老师。</p>
<p>之后便是简简单单的互相见面，我自我介绍，他分配学长和我交流。不过不得不说黄天驰学长真的好好交流，就没有什么交流障碍，很舒服的一位学长。</p>
<p>这之后就是简简单单的流程，开组会些项目，最后在七月份我们口头确定了名额，这样这件事情才最终落定。</p>
<p>虽然中间还有一些奇奇怪怪的经历，不过也没有什么特别值得介绍的，所以就算了。</p>
<hr />
<p>不过现在反思回来，徐昆那边我其实还是有点咕咕咕的，因为课内真的选太多课了。</p>
<p>衷心建议，大三没必要选这么多课，还有大四可以选。这段时间就应该好好去和导师交流，做好他给的项目。否则真的很容易丢掉名额。</p>
<h1 id="科协-thuinfo">科协 &amp; THUInfo</h1>
<p>有点心怀愧疚的两件事，因为确实没有给这两方面做出什么贡献。</p>
<p>没什么好说的了，没什么好辩解的了。</p>
<h1 id="sakana">Sakana</h1>
<p>本来在寒假的时候，Sakana 在计划着周末来北京玩，结果是大家都知道的四月封上海五月封北京。于是一整个学期没有线下遇到 Sakana。</p>
<p>然而甚至连视频都没有怎么弄过，因为我课内非常之忙，她也并不空闲。</p>
<p>说实话异地是真的痛苦，没有感情基础的话很容易因为失去共同话题、失去热情等一系列的东西直接炸裂。</p>
<hr />
<p>不过好事就是我和她都提前回家了，忙完期末之后我们大约是见了很多次的，她也开始打日麻，我也尝试着再次入坑王者。</p>
<p>比较好玩的是，我每每会以出来干活的名义约她去星巴克坐一下午，然后实际情况是，我和她贴贴摸鱼一下午。想起来 Sakana 就已经说过两人在一起是不太可能干得了活的，现在确实也是这样。</p>
<p>最近也终于有一种关系走向正轨的感觉，当贴贴变得自然的时候。</p>
<h1 id="还有什么呢">还有什么呢</h1>
<p>打牌，打全高赛。虽然进了所谓校队，但是你清直接在全高赛被暴打，遗憾倒数第一出局。事后也算是发生了一些奇妙的摩擦。</p>
<p>但是确实借助这个机会认识了很多人，也和很多人加深了联系。</p>
<p>唱歌，但是在封校之后也只是在操场上唱过几回。</p>
<hr />
<p>说实话，Holder 还是觉得自己好像很无趣，娱乐活动真的好稀少。</p>
<h1 id="还有一些别的什么呢">还有一些别的什么呢</h1>
<p>其实这一学期应该说经历了开头斗志满满，中间疲劳过度，五月陷入困境，六月初见曙光，七月挣脱这样的一个流程。就小说的故事性而言，这样的情节走向比较符合一般的小说。</p>
<p>根据上面的描述，大家也都发现了，课内真的占据了我这个学期几乎所有时间，哪怕就是理论上最忙碌的大三上学期我也写了很多打牌、V+ 群、科协相关的一些事情。</p>
<p>我也不止一次被学长批评没有必要把大三下学期课内塞这么满，卷卷科研争取名额才是最优解。不过即使如此，我也没怎么听进去，还是我行我素继续和课内搏斗，最终自然还是吃到苦头。</p>
<hr />
<p>那么，现在已经是基本确定后路的状态了，大四也选了一些好玩、对胃口的课，那么，继续享受剩下来的一年吧。</p>
<p>不过今年的毕业季确实看得我眼馋，我好想毕业。</p>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年寒假总结</title>
    <url>/2022/02/13/grade-3-winter-conclusion/</url>
    <content><![CDATA[<p>寒假也快结束了吧。</p>
<p>其实依然是什么事情都没有做的一段时间。</p>
<span id="more"></span>
<h2 id="打牌">打牌</h2>
<p>在放寒假之前雄心壮志地想好了很多想做的事情，从 THUInfo 到技能引导文档，乃至实验室工作甚至是学抽象代数。但实际上我的寒假大约一大半时间在打牌。</p>
<p>在寒假回家的前一天，我打了一个通宵的雀，从那以后就莫名其妙比以往更沉浸在打雀之中。一方面可能和当时刚刚打上玉间有关，更重要的可能是当时我恰好处于绝好调的状态。那段时间我几乎是一四流选手，顺风的时候不需要读牌，不需要防守，牌局前期一般就能通过奇妙的运气和出亲跳和若干亲满奠定靠近五万点的胜局，后续哪怕铳几个子家满贯也不过洒洒水。</p>
<p>所以我从刚进玉间到冲上豪三并未花很长时间，大约两个星期而已。但是随后而来的是恶调，那段时间牌谱屋的数据表明我的起手平均向听数直接飙升。这个时候原先漏洞百出的打法显然完全不能适应，所以掉回了豪二。</p>
<p>在寒假快要结束的时候，接到了你清打算组织参加全高赛的信息，即使当时已经有点觉得自己过于打雀而疏忽要做的事情，但是还是毅然决定参赛。目前的结果呢，即使自己技术拉跨，但还是靠着奇妙的狗运挂边入选了代表队。</p>
<hr />
<p>我之前在 QQ 空间以及朋友圈都发过一个反省自己打雀水平的小短文，一定程度上也和这次选拔赛四位评委对我的评价类似。</p>
<p>我对我自己的一个评价就是过于死板或者直线，不够灵活，这和自己面麻喜欢打快牌以及还有时在家和家里人搓牌有关。快牌的一个显著特点就是几乎没有什么读牌的时间，因为构建自己手牌的方向就足够耗时间，所以我应对快牌的方式就是不顾一切地进攻，烂牌也全牌效，抓到明显的危险张也往往手比脑子快拍出去放大炮。并且，另外一种应对就是尽早立直进入摸切，这样能获得一点休整时间。</p>
<p>过于欠缺的防守和读牌技术使得我这一次在比赛中，即使有意识在防守，也常常会在半途发现自己没有安而侥幸着遵循“没有安就日”的信条重新回到进攻路线，然而心中的不安和紧张又会在摸到模棱两可但安全度还可以的牌的时候转为防守。我猜测这也就是评委认为我不稳定的原因之一。</p>
<p>但其实我说没有安的时候真的没有安么？其实很多时候是可以通过读牌获取一些安度其实还可以的安的。我的防守理论只有筋牌和壁牌，我对手顺的认识是相当低的，比如说连切 64m 时一般而言 58m 铳率低，这一点我很难注意到，我只会认为 58m 是没有通过的筋而完全缩。</p>
<p>还是想找找有无讲防守的一些书籍什么的。</p>
<hr />
<p>不够灵活的另外一个致命体现就是甚至可以看漏听牌，比如说名场面：</p>
<p><img src="/uploads/winter-conclusion/1.png" /></p>
<p>这里吃 1s 后打什么呢？实战我打了 8s，连切 3m 听牌都没有发现，这就是梦游切牌的技术。</p>
<h2 id="技能引导文档">技能引导文档</h2>
<p>这是我在寒假前期一直在做的事情，后期想接着做但是有点懒而且有点缺乏动力。</p>
<p>简单来说技能引导文档的初期还是取得了不错的成绩，推送有不错的浏览量，也有一定的用户反馈，编写者们也算是很有责任心。但“这个文档是不是一个造轮子的项目？”，这个问题还一直萦绕着我。目前来看文档确实是走入了一些困境，我们编写了一些编程语言的入门指导，编写了一些简单的算法入门文档，但是我们发现我们真正需要人手来编写的 advanced topics 却恰恰没有人来写。</p>
<p>我一开始设想的核心竞争力，一方面是面对你清这些已经有一定编程基础的学生，没有必要讲解那些相当基础的内容，也就是说，我们简洁。另外一个，就是我们有一些更为 advanced 的知识，比如图形学、人机交互、操作系统等一系列的入门指导，无论是简单的介绍还是课程、资料推荐，都是不错的。</p>
<p>然而现在的困境就是没有人来编写这些 advanced topics。现在也渐渐有点沉默下去，不太想打理这一份文档了。</p>
<h2 id="thuinfo-以及其他">THUInfo 以及其他</h2>
<p>目前绝赞咕咕咕 THUInfo 的开发工作，我希望下学期开头不太忙碌的时候能做一些事情。</p>
<p>当然，现在有点希望去做一些实习，这样的话能稍微了解一下业界和真实的软件开发环境。目前规划问问有没有去微软的实习机会吧。</p>
<h2 id="其他的一些">其他的一些</h2>
<p>整个寒假过得其实挺快乐，前期虽然和社区的沙雕书记起了不少摩擦，但隔离的时候也算是最认真的时候，发布了文档第一版本还确确实实提升了一些雀力。</p>
<p>回家过年则很一般，过年也就是在各处亲戚串门，闲工夫出去看电影。初三往后去了姜堰见了同学，和 Sakana 玩了两三天，和我弟交流了不少高中相关的事务。最后回家，打牌。</p>
<p>总而言之就是一种完全放松而不想做事情的态度。</p>
<hr />
<p>下学期，我打算把培养方案直接全部完成，虽然可能中途会退缩。然后 V+ 那边也会时常参加线下活动，雀的话应该也会经常约训练赛。THUInfo 那边就只能慢慢磨，实验室只能说徐老师暂且还没找我麻烦而已，但后续肯定是不能再咕咕咕了（毕竟关系到自己的后路）。</p>
<p>总之每一个学期或者假期结束的时候都会有一种下一学期（这个假期）好好干什么什么事这样的想法，但最后往往漂亮地事与愿违，这一切最后，还是归根于 Holder 这个人的惰性和摸鱼，先给那些被我摸鱼耽误事情的人道个歉。</p>
<p>但不管怎么说，生活还要继续过。下一步，应该是主要先应付实验室，不能真的一点事情不做了。然而在此之前，今天约了人出去吃饭，生活嘛，就是这样。</p>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>大四了，要干什么呢？</title>
    <url>/2022/08/19/grade-4-autumn-preview/</url>
    <content><![CDATA[<p>就这样 Holder 也已经大四了，似乎自己其实还什么都没有想好。</p>
<span id="more"></span>
<p>8.19 的晚上，我想着不如早一些回北京，于是和家里人商量好了买好了 8.22 的火车票。但是等到现在冷静下来之后，反倒是有一点觉得，这样是不是有点太仓促了，我似乎好像还没有想好我大四应该干些什么。</p>
<p>不过比较确定的是，我现在需要罗列一下我已经安排好的事情：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">8.20</th>
<th style="text-align: center;">8.21</th>
<th style="text-align: center;">8.22</th>
<th style="text-align: center;">8.23</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">早上</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">早起去做核酸</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">注册 &amp; 收拾宿舍等事务</td>
</tr>
<tr class="even">
<td style="text-align: center;">午饭</td>
<td style="text-align: center;">在家</td>
<td style="text-align: center;">万象城</td>
<td style="text-align: center;">回老家</td>
<td style="text-align: center;">食堂</td>
</tr>
<tr class="odd">
<td style="text-align: center;">下午</td>
<td style="text-align: center;">寄回 MBP &amp; 摸鱼</td>
<td style="text-align: center;">和 Sakana 贴贴、出勤</td>
<td style="text-align: center;">收拾行李 &amp; 出发</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="even">
<td style="text-align: center;">晚饭</td>
<td style="text-align: center;">【已安排的应酬】</td>
<td style="text-align: center;">【已安排的应酬】</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="odd">
<td style="text-align: center;">半夜</td>
<td style="text-align: center;">学习 &amp; 四系联赛</td>
<td style="text-align: center;">收拾行李 &amp; 入校申请</td>
<td style="text-align: center;">多半打雀</td>
<td style="text-align: center;">-</td>
</tr>
</tbody>
</table>
<p>回北京之后的第一件事果然还是赶快和导师和学长见面聊聊，稍微加深一些了解，准备正式接入实验室，并且实验室应当成为下学期的主线工作。</p>
<p>课内的预习就简单看书做题就行了，可以在下午这种精力不太充足但是又有时间的时候做。</p>
<p>THUInfo 最近应该需要加紧做做，科协那边的 308 权限系统和两个技能引导新文档也需要做，但这些都是短程任务，不需要花很多时间。把这些做完后，科协那边可以基本放手，THUInfo 也只要做做日常维护就行了。</p>
<p>主要还有一件事就是体育运动，我还是计划好好游泳的，可能初期还是每两天去一趟游泳馆，每天晚上去游上小几百米可能还是比较好的。</p>
<p>然后就是下学期省钱的事情，说实话有点经济稍稍紧张了，说不定可以接一下商业单子之类的。</p>
<p>其余的大事情其实说实话毫无想法，最多就是一些可能的娱乐活动，出勤、纯 K、打打雀什么的。生日估计就是几个人出去玩一下午，然后 ZLR 约着喝酒，国庆随便怎么过，学期中看 Sakana 情况也可以去看看她或者她来玩。</p>
<p>总之很具体的事情还暂且不需要太去规划，毕竟也不知道后面什么情况。</p>
<p>但是大体而言，果然还是以实验室事务、推免流程为主线，课内随便混混的生活。</p>
]]></content>
      <categories>
        <category>【生活记录】学期总结</category>
      </categories>
  </entry>
  <entry>
    <title>Hello world</title>
    <url>/2021/06/16/hello-world/</url>
    <content><![CDATA[<p>刚刚建立好这个地方，暂且也没什么特别想说的，不如就来玩一下 hexo 的各个语法吧。</p>
<span id="more"></span>
<p>首先玩玩代码块，自然首先试试 CPP。</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再来试一下 Python。</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>不如玩一下 JavaScript。</p>
<figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello world!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>然后玩一下数学公式。</p>
<p>我们可以把机器学习抽象描述为以下过程，这里 <span class="math inline">\(X\)</span> 表示输入集合，<span class="math inline">\(Y\)</span> 表示输出集合，<span class="math inline">\(L\)</span> 表示损失函数，<span class="math inline">\(\boldsymbol{w}\)</span> 表示模型参数，<span class="math inline">\(f_\boldsymbol{w}\)</span> 表示在某一系列参数之下的模型函数。</p>
<p><span class="math display">\[
\boldsymbol{w}^*=\mathop{\arg\min}_{\boldsymbol{w} \in \Omega}\sum_{x_i \in X, y_i \in Y} L(f_\boldsymbol{w}(x_i), y_i)
\]</span></p>
<p>再来试一下它自带的一些引用块。</p>
<blockquote><p>你成功建好了自己的第一个 hexo 站点！</p>
</blockquote>
<p>hexo 文档里面还提到了一种奇怪的东西，来试一下。</p>
<blockquote class="pullquote"><p>这个东西被称为 Pull Quote。</p>
</blockquote>
<p>似乎还有奇怪的东西。</p>
<div class="note success"><p>这个是提示成功的引用块。</p>
</div>
<p>下面是一个居中引用。</p>
<blockquote class="blockquote-center">
<p>这里我们居中一定的文本。</p>

</blockquote>
<p>这里还似乎提供了用于查询浏览器支持方法的插件。</p>
<iframe data-feature="fetch" src="https://caniuse.bitsofco.de/embed/index.html?feat=fetch&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe>
<p>暂且玩到这里吧，目前的话想要做的一些事情包括：</p>
<ul>
<li><p>写（搬运）点有点价值的东西</p></li>
<li><p>有没有可能做一些类似于管理员才可访问的东西呢</p></li>
<li><p>搞一下评论系统、浏览计数之类的</p></li>
</ul>
<p>当然我们知道明天下午就考数电了，所以 Holder 该滚去复习了。</p>
]]></content>
      <categories>
        <category>【导航】</category>
      </categories>
  </entry>
  <entry>
    <title>摸索 NexT 注入实录与实现振假名渲染</title>
    <url>/2022/08/20/inject-ruby/</url>
    <content><![CDATA[<p>由于日语文本中经常出现振假名（可以理解为国内小学课本上汉字上的拼音），但是 Markdown 并没有方便的振假名语法，所以只能摸索了。</p>
<span id="more"></span>
<p>首先是我们注意到 HTML 是有振假名相关的标签的，但是实在是太长了：</p>
<figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span> WRITTEN <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span> READ <span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么为了解决这个问题，有两种选择：</p>
<ul>
<li>定义一种新的 Markdown 语法，在将 Raw Markdown 传入解释器之前先做一步正则替换，将自定义的语法替换为 HTML 标签</li>
<li>在渲染后的 HTML 标签中找到所有打过标记的节点，将其替换为 <code>&lt;ruby&gt;</code> 标签</li>
</ul>
<p>我一开始是摸索第一种解决方式的，然后遍历了一波 Hexo 的 Markdown Parser 的文档，没有找到如何解决这个问题。</p>
<p>我之所以想到这个解决方案，是因为之前有一个 VSCode 的 Markdown 插件提供了一个 <code>onWillParseMarkdown</code> 的函数，用户可以通过其参数获得 Raw Markdown，然后自行处理后返回交给解释器。</p>
<p>但是 Hexo 似乎并没有给我开这个后门。</p>
<hr />
<p>于是只能思考第二种解决方案，这个时候我想到了 NexT 注入。</p>
<p>因为先前编写过 Twikoo Recent Comments，就是现在我的网站侧边栏上展现的最近评论，其就是在 <code>sidebar.njk</code> 内注入一个指定 <code>class</code> 的容器，然后在 <code>head.njk</code> 内部利用 jQuery 首先拉取最近评论然后再处理为列表项塞到指定容器中的。</p>
<p>那么我们考虑到，Markdown 的代码块会被渲染为 <code>&lt;code&gt;</code> 标签，我们完全可以利用此特性。而我们为这些需要替换的标签打的标记就是其以 <code>@</code> 开头并且用空格分为三块，我们识别到这个标记就进行替换。</p>
<p>我们只需要注入这样一段代码：</p>
<figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceRuby</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        .filter(<span class="function">(<span class="params">_, node</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> list = $(node).text().split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> list.length === <span class="number">3</span> &amp;&amp; list[<span class="number">0</span>] === <span class="string">&quot;@&quot;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .replaceWith(<span class="function">(<span class="params">_, text</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> list = text.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> written = list[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> read = list[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">`&lt;ruby&gt;<span class="subst">$&#123;written&#125;</span>&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;<span class="subst">$&#123;read&#125;</span>&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以用类似：</p>
<figure class="highlight markdown"><figcaption><span>Markdown</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="code">`@ WRITTEN READ`</span></span><br></pre></td></tr></table></figure>
<p>的语法书写振假名。</p>
<p>效果的话可以看下述歌词的渲染效果：</p>
<div class="note info no-icon"><p><code>@ 言葉 ことば</code>より<code>@ 単純 たんじゅん</code>な<code>@ 方法 ほうほう</code>で、いますぐ<code>@ 地獄 じごく</code>に<code>@ 落 お</code>としてくれよ。さよならはあんたも<code>@ 知 し</code>っている、<code>@ 笑 わら</code>ってくれよ、<code>@ 笑 わら</code>ってくれよ、いますぐに。</p>
</div>
<p>总之，这样就可以很方便地写振假名了，之后应该会逐步在涉及到日语的地方把之前的旧写法更换成新写法。</p>
<hr />
<p>另外还有一个小细节，似乎部署后访问字体会出现 403，根据 <a href="https://github.com/theme-next/hexo-theme-next/issues/613">相关 Issue 的提示</a>，应该是 Referrer 的问题。</p>
]]></content>
      <categories>
        <category>【杂谈】开发</category>
      </categories>
  </entry>
  <entry>
    <title>2023 春季学期记录</title>
    <url>/2023/02/20/2023-spring-record/</url>
    <content><![CDATA[<p>应该是本科的最后一个学期了，最近事情也比较多，头绪也没完全理清楚，不如效仿之前假期通过日记的方式强迫自己认真工作，也写些学期中的日记算了。</p>
<p>目前应该是毕设、先前和快手的项目以及软工助教三件长期的事情，另外有一份可能短期较忙后期平缓的实习。</p>
<span id="more"></span>
<h1 id="section">2023.02.20</h1>
<p>学期的第一天，滚去上了韩语课，没想到的是韩语课居然不让使用电脑，本来还打算以后还可以在课上少说干点活的，看起来也不行了。中午偷摸去五道口出勤，结果还是一堆人，下午只能来工位，把预定中的几件事做了：</p>
<ul>
<li>迁移好服务器上的数据，跑上实验</li>
<li>确认小程序的商品列表页面写完，check 一下 yfgg 那边给的信息</li>
</ul>
<p>本来以为迁移数据是小工作，结果发现还挺麻烦，在经历了实验室机子硬盘满了换挂载之后，我发现我测试集好像没了，现在只能想办法去把这个测试集找出来了。</p>
<p>最终还是把测试集找出来了，之前写 Pensieve PyTorch 的时候用了这个数据集然后忘了 ignore 传到了 Github 上，只能说感谢当时比较粗心了。</p>
<p>另外就是老师又把我拉到了一个项目的工作群里面，事情又要多起来。之后就是用新 Puffer 数据训练出来的模型依然是炸裂状态，洗数据的脚本不知道为什么很慢，而且估计还是有问题。自己个人网站的 CI 也不知道为啥停了三个星期没动。我现在真的是，完全不知道从哪里下手。</p>
<hr />
<p>现在洗数据的脚本慢的问题居然莫名其妙解决了，并且顺带学了一个 Python 的小知识。</p>
<p>洗数据有个非常经典的操作，就是不断向一个列表之中 append 数据，正常都会这么写：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">batch = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> tqdm(data_reader):</span><br><span class="line">    <span class="comment"># Process</span></span><br><span class="line"></span><br><span class="line">    batch.append(data_item)</span><br></pre></td></tr></table></figure>
<p>然而由于取字段运算符（就是 <code>batch.append</code> 中的 <code>.</code> 运算符）事实上在 Python 中占用的资源很大，所以事实上用下面的写法速度会快很多很多：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">batch = []</span><br><span class="line">add_data = batch.append</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> tqdm(data_reader):</span><br><span class="line">    <span class="comment"># Process</span></span><br><span class="line"></span><br><span class="line">    add_data(data_item)</span><br></pre></td></tr></table></figure>
<p>我的数据大约是 <span class="math inline">\(10^6\)</span> 量级，然后每次都需要对四个列表 append，改用这个写法直接让洗数据时间从近三个小时变成了两分钟左右。</p>
<p>这种改进方法有个需要注意的地方就是不能改变 <code>batch</code> 所指向的内存，否则先前的 <code>add_data</code> 将无法正确修改 <code>batch</code> 中的内容。比如 <code>batch = batch[: -1]</code> 之类的重新指向的写法就不能在循环体内出现。</p>
<hr />
<p>最后发现个人网站 CI 不动的原因是 Travis CI 收费了，而我自然是欠费的。那么，只能用免费的 Github Actions 了，虽然要把仓库内容给 Github 去训练 Copilot，但反正我这个个人网站他能学到个什么呢？</p>
<h1 id="section-1">2023.02.21</h1>
<p>今天早上又得早起，去软工课堂上讲小作业，不过因为学堂路堵车了稍微晚了点到，结果前排位置已经没了，只能坐到角落里。不过，由于高老板已经把小作业的 Slides 发出来了，所以我发现坐我前面的同学已经开始做了。要说实话的话，看到他能够非常顺利地把前端小作业运行起来我还是觉得挺欣慰的，毕竟没在这种地方出锅。</p>
<p>软工课还是一如既往的无聊，周围的同学要么打牌，要么写小作业，要么复习自动机，而我因为没法给电脑充电所以没办法去做实习里的开发，只能坐牢睡觉。</p>
<p>中午依然是偷偷出勤，现在疫情放开之后，五道口机厅就连工作日的下午往往也有近十个人在打。今天尝试推了推几个 13+ 的鸟，未果，随后因为又来了至少三四个人于是想了想就撤退回工位了。</p>
<p>回到工位没想到第一件事情是有同学报告了 THUInfo 的 bug，虽然没花多少时间就排查出来是课程信息缓存策略有问题，如果退课并选择另一位老师同样的课的话就会导致无法正确更新缓存中的数据。然而即使是小事，这件事情也花了我一些时间。之后就是正常拉新的 Puffer 数据然后跑实验，但是现在实验室机子的存储空间大概是不够了，不能像之前那样一跑几天，几千个几千个 epoch 那样玩了，现在差不多收敛之后跑到 1000 epoch 左右就得停了。</p>
<p>昨天挂上去的实验结果不是很好，最高的 reward 也只能达到 12 左右，甚至达不到启发式的 15，今天换了一个新的、更大的数据集看看，希望能够收获一点正常的结果。</p>
<p>以及实习那边又开始催了，感觉是该找个时间好好卷卷实习了，然而最近晚上都不太好 308 直接干，因为连着三天需要早上十点钟去上课，还挺麻烦的。</p>
<p>晚上和 xjj 他们去鹤一吃了顿烤肉，结果回来困到直接在椅子上睡着了，本来还想晚上做做事情的。</p>
<p>另外让我惊讶的是，晚上居然有位同学来问软工小作业相关的东西，一看他都做下去不少了，感觉现在一字班果然还是不可小觑，说不定再过两三天就有人做完了。</p>
<h1 id="section-2">2023.02.22</h1>
<p>今天早上依然是韩语课，今天讲松紧辅音，然而我并不太会。下课之后依然是偷偷去五道口出勤一会然后赶回来上下午的强化学习。</p>
<p>强化学习我记得课容量应该是四十几左右，结果不仅是微信群里就有一百四五十人，线下教室里也有快两百人，而我这个稍微晚到的就只能站在后面听了一节课。比较难绷的是，因为这堂课的内容我已经基本学过了，所以我就没怎么听，结果还被喊起来回答问题，还要用英语，这就很麻烦。不过说实话，这门课很符合我对大学课堂的想象，一个能有强交互性的、老师能和你保持交流的课堂，比单纯念 PPT 的单向授课不知道好了多少，可能也是因为这位老师也并没有大我们多少岁数，交流起来比较没有障碍吧。</p>
<p>现在计划把目前这个网站上和 RL 相关的东西按照这堂课的 outline 给整理好，因为我发现这堂课所使用的符号系统之类的比较贴合我所用的，正好也不要废多大的力气。</p>
<p>下午继续来工位，然后等一手 SOA 课程的消息，如果事情多、不好混分的话就赶快退了，本来大四也就想摆烂混个及格分赶快毕业得了。结果就是立刻从同学那边听闻课程大作业要求基于 ChatGPT 做开发，这已经完全超出我所需要了解的内容了，于是立刻退课跑路。</p>
<hr />
<p>今天看了一下用新一天的 Puffer 的 fox channel 训练的情况，更是爆炸，甚至到最后都负 reward，根本没收敛，我现在真的是在怀疑我的数据处理真的存在问题，然而我也是真的不知道怎么往下处理了，但这毕竟总是要结项的，我这边也要给结果的。</p>
<p>今天估计要做的事情差不多是：</p>
<ul>
<li>收拾一下强化学习的笔记</li>
<li>写实习那边的小程序</li>
<li>毕设看看能不能推进点东西出来</li>
</ul>
<h1 id="section-3">2023.02.23</h1>
<p>周四终于是没有要我十点钟就要起床的事情了，前三天连续早起让我精神状况相当不好，于是周三晚直接很早就睡了，结果一路睡了快十二个小时。</p>
<p>周四恢复了组会，一点半准时赶到会议室。组会本身是没有什么很大意思的，比较有意思的有两件事，一件是和我一起做毕设的同学好像已经进展很快，这让我比较焦虑，另外一件就是我和老师说了我寒假在实习的事情，他感叹了一句“年轻人忙点好，但是我每周该查你毕设还是查”。总之就是这波组会开下来就让我感觉毕设再不做出点东西好像就得挂了。</p>
<p>开完组会稍微收拾了点东西，把实习那边微信小程序开发者工具的一个 bug 修好之后就去上地出勤，不过因为状态不咋样就没怎么打。</p>
<p>晚上回来之后实习那边的学长也在说我最近事情实在是太多，计划再找一个来帮忙的人，虽然可能需要我让渡部分回报（工资、股份之类的）。我感觉我最近确实也不太想继续推进实习了，实在是太累了，于是就答应了下来。结果他们很快就找来了两位似乎比较有意愿的同学。</p>
<p>另外就是软工助教那边讨论大作业给分的事情，本来说很快的会，愣是开了一个多小时，就为了讨论应该怎么给同学们解释我们改革的动机和尽力阻止内卷。最后讨论下来，是和同学们明确给出过程评分要求（比如 Git 开发 comment 管理之类的评分），并且说明“完成拓展功能很容易导致在过程评分上失分，甚至可能得不偿失”，以此来尽力阻止过度追求满分的行为。</p>
<p>开完会洗完澡来到 308 本来计划好好写写实习那边的东西，结果却是一躺就睡着了，一直睡到了周五的十二点，看来这几天是真的困了。</p>
<h1 id="section-4">2023.02.24</h1>
<p>从 308 的沙发上醒来之后，就简单点了个外卖，然后和 return 讨论了一波日语中助词「は、が」的用法，这些东西稍后整理到自学手册里。外卖到后吃完了就继续推实习那边的事情了。</p>
<p>结果说是好好做实习的事情的，因为空间里刷到了一条以椭圆曲线加密算法为背景的高中题，就研究了大概几个小时的椭圆曲线。只能说完全不能集中做实习这边的事情。</p>
<p>好摸啊，今天一整天感觉一直到晚上六点都没做出来什么实际的东西，果然还是得 push 一下自己。结果就这样一直到了晚上八点，还是没有做出来什么实质性的东西，倒是实习那边的学长似乎有一些想找我的事情，先来了解一下吧。</p>
<p>和实习那边新找的技术团队简单见了一个面，看起来他们确实是很有经验的开发团队，至少对商业开发的流程把握比我这种随便写写玩玩的人实在是高到不知道哪里去了，如果可以的话还希望能把我这边接手过去我就可以稍微歇歇了。这里还是得感谢一下实习的 leader 还是帮我在投资人那里保住了一些利益，至少原先约定的现金工资还是能给出，这就还可以了，因为我确实没有作出那么多的贡献。</p>
<p>讨论下来最终我应该就只要在一周内完成：</p>
<ul>
<li>“我的”页面以及订单详情页</li>
<li>自定义导航栏</li>
<li>询问学校和手机的 PageContainer</li>
</ul>
<p>这三个应该就可以暂且休整了，感觉整体安排还是很好的。</p>
<p>晚上稍微花了点时间修正了一下主页相关的一些东西，目前来看问题不大。</p>
<p>另外，最近不少人软工小作业前后端都做得七七八八了，目前也没什么大的 bug report，还算是心里安稳了不少，希望 CI/CD 也不会出大锅。</p>
<h1 id="section-5">2023.02.25</h1>
<p>今天大概是实习那边简单开一个会，把团队所有的同学召集起来互相认识。不过说实话，我这个做开发的，确实不太了解运营那边，倒是 yfgg 需要和运营那边对接后端管理，反倒是需要经常接触。</p>
<p>中午出去吃牛肉面，结果那家店既不能在线下单，而且还需要自己取餐，还没有防丢包机制，属于是当下互联网应用普及背景下的漏网之鱼了。</p>
<p>下午于是就正常工作把“我的”页面赶快写完，说是今晚就打算验收，那总之认真干干吧。</p>
<p>然而微信小程序这种东西就是很折磨，写了一整天还是有些逻辑上的问题。另外，在写这玩意的时候还有一位上软工的同学一直在找我答疑，然而这位同学似乎对一些计算机的基础知识都不是特别熟练，确实也弄得我有点麻烦。</p>
<p>晚上就直接摸鱼了，打了一晚上德州，然后早早睡了。</p>
<h1 id="section-6">2023.02.26</h1>
<p>一点没睡好，因为突然出现了一点点的感冒症状，喉咙发痒然后咳痰，我在怀疑是冬春之交的流感，或者是我复阳了，顺带着精神状况也不是特别好，有点头晕且没啥精神，口干舌燥的很难受。</p>
<p>十一点左右就醒了，打了一把牌之后就去看 KOP maimai 决赛，yoshiki 还是很稳健地拿下优胜，确实也没啥特别可以说得上是悬念的东西。然而最主要的是在国际服比赛之前三位主持人透露了似乎 SBGA 终于要把国服 UI 更新到 festival 的信息：</p>
<ul>
<li>マイマイは日本でも人気なんですけれども、海外でも…</li>
<li>中国で、あのマイマイみたいな…</li>
<li>せっかくで、バージョンアップ、言ってもいい？</li>
<li>バージョンアップしなかったですけど、近々、システムはフェスティバルにと…</li>
</ul>
<p>然而这完全不像是一次正式通告，虽然后面也提到了最近会发布正式公告，但这暧昧的态度和语气确实也很 SBGA。只能说如果真的给更新的话，maimai 暂且是一款我的问题。</p>
<p>下午实在是拿不出来任何做事的干劲，直接去上地出勤了，然而上地一直保持着至少八人的规模，所以说实话也没打到多少把。感冒的症状说实话出勤的时候在缓慢加重，毕竟只穿了短袖而且还在不断流汗，很有可能受凉。一直到了晚上，本来想吃一顿萨利亚就回去的，结果是萨利亚居然卖完了主食，啥都吃不了，只能去上地华联地下那些不咋样的饭店随便吃吃，就这样还吃了我六七十，啥都没吃着。</p>
<p>晚上回到宿舍拿到了美团上买的感冒药，结果上楼梯的时候就已经开始感受到极端的疲惫感，到了宿舍坐下来，立刻感觉好了不少，于是赶紧吃了颗药。</p>
<p>今天本来想做的事情那是一件都没有做，这一周刚开始的时候干劲满满，每天除了日常工作还能出勤，心情也一直很不错。但是到了今天，周日，因为这个感冒症状，真的弄得我非常难受，希望明天起来能够快快好起来，这样至少不会影响我下一周的时间安排。</p>
<h1 id="section-7">2023.02.27</h1>
<p>果然症状没有好多少，依然是喉咙有点疼然后头很昏，整天处于疲劳状态，可能还有一点点低热。早上强撑着还去上了韩语课，虽然迟到了。韩语课目前在讲发音，没有什么特别有意思的东西。</p>
<p>中午按照平常的饭量点了一套粥和配粥的小菜，结果发现自己完全吃不下，虽然吃了七八成，但还有些是完全没吃的，比如三个豆沙包。下午按照道理要准备开始干活了，然而这个状况是真的一点都没法工作，于是爬上床睡觉了，除了途中上了趟厕所之外，一直到七点左右我一直在床上睡觉。比较麻烦的是，我醒过来发现四肢有点冰凉然后还有点热，这说明症状严重了。</p>
<p>为了防止我是新冠复阳，我去 308 里面拿了一份之前囤着的抗原，自测了一下是阴性，这就说明我得甲型流感的概率很高，前几天宿舍楼群里面也有人问有没有体温计之类的。</p>
<p>就这样一直磨到了晚上八点，请舍友帮忙带了饭，结果发现还是没什么特别大的胃口。但这个时候我意识到很多事情再不做来不及了，比如第二天就要在课上讲的 React 前端小作业讲稿，还有大作业文档之类的也得稍微调整一下。就在我极不情愿地坐到桌前准备工作，这种疲劳感和不集中又袭来，而且实习那边还在 push 一些事情。</p>
<p>怎么会变成这样的呢？我思考可能是先前太疲劳，毕竟连续早起了很多天，虽然只是十点起，但我平均得到四五点睡，这就很不好。于是想着该找机会调整作息和运动了，然而目前事情还得赶快推。</p>
<h1 id="section-8">2023.02.28</h1>
<p>二月的最后一天了，昨天晚上吃完药之后明显感到全身发烫，然后开始冒汗，最终到了凌晨五点左右退烧了。然而，喉咙疼和咳嗽确实是一点没有见好转，甚至还有恶化的感觉。</p>
<p>强撑着去软工课堂上讲完了两节课，回来之后自然又是睡了整整一个下午，起来就已经是晚上了，点了个外卖，胃口依然没有恢复。</p>
<p>晚上首先是我爸妈得知了消息，他们简单关照了几句，问了问药物的情况。然后我发了个朋友圈说已经甲流第三天，结果各种关心就都过来了，先是 rls，然后是之前一直有联系的学弟，一起打牌的学长，湖中，甚至贾珈老师都来关心，一时间受宠若惊。</p>
<p>不过总的来说吃了颗药然后洗了个澡之后现在精神状况恢复不少，至少现在四肢都是温暖的，然后也几乎没有疲劳感，喉咙虽然沙哑但至少也只是微微发涩，估摸着明天，应该也就能正式好转了吧。</p>
<p>期间 rls 提到了还有一个月薪两千的前端单子问我要不要接，我只能回一句“狗命要紧”，赶快回绝了。</p>
<p>以及突然很想吃水果，尤其是苹果和梨，那种清甜的口感，不知道为啥现在特别想念。</p>
<p>过了一遍 DRL 的 recitation，PyTorch 的简单入门，讲得还可以，但之前就学过了，不好说对初学者而言友不友好。比较好玩的一点是，我听完 recitation 之后，突然感觉神清气爽，有种大病初愈的感觉，难道 DRL 还有这个好处？</p>
<p>不过看这样子，明天确实可以开始正常生活了，先是得把这几天没洗的衣服给洗了，然后给自己买点水果解个馋。工作上的话，软工助教一时半会是没啥大事了，实习估计这周也会结束，毕设已经请了一周假，这周组会应该也很好过去。</p>
<p>三月了，希望能全新开始吧。</p>
<h1 id="section-9">2023.03.01</h1>
<p>今天起床之后发现好了不少，除了喉咙还是有点不舒服之外，其他应该基本都好差不多了，然后也第一次韩语课没有迟到。韩语课没啥值得记忆的，只是 zz 居然被老师听出来他的韩语有日语口音。</p>
<p>中午点了麻辣烫，虽然这次没要酱料，毕竟现在还不太能吃辛辣，于是就吃了清水煮肉片，但是比较好的事情就是发现自己饭量已经差不多恢复了。此外去猫超买了黄瓜、菠萝蜜和哈密瓜，其他的还好，就是菠萝蜜难吃出了一种境界。</p>
<p>下午摆烂没去 DRL，但是老师发 slides 真的很慢，我还打算至少看看 slides 来学点东西的。</p>
<p>结果还是摆烂了一个下午，最终还是决定去洗个衣服，至少做点什么像样的事情吧。</p>
<h1 id="section-10">2023.03.02</h1>
<p>昨晚据我舍友说睡觉的时候连续咳嗽了一个多小时，说是真怕我睡着睡着人咳没了。</p>
<p>中午爬起来去开组会，为了防止传染所以戴了个口罩去了实验室，实验室的学长们见到我这阵仗都纷纷戴上了口罩。老师看到这个状况，于是劝我还是等身体完全好了再来实验室，组会少一两次问题不大。于是我就从命地回去了，回去的路上顺手去吃了个午饭。</p>
<p>吃完午饭才发现这几天的温度已经回升到了十几度了，天气最近也一直是晴天，这两天正好又是春季百团大战，于是就去逛了一下摊位。不过由于春季百团本来就不是重点战场，各个社团也没有拿出家底，所以摊位比较一般，没啥意思。但是，这次逛了摊位之后突然发现，只是走了百十米之后就开始喘气，我自己都没发现现在身子已经虚弱到了这个程度。</p>
<p>回到宿舍坐了一会喝了口水之后瞬间就恢复了不少，甚至感觉和康复了毫无区别。果然只有出门才会意识到现在自己身体依然十分虚弱，即使没有很明显的症状。算了，先好好把 DRL 笔记整理完吧。</p>
<h1 id="section-11">2023.03.03</h1>
<p>身体看起来已经是完全好了，下午先是出门去做软工小作业答疑，但是就在这过程中不断被催实习那边的事情。目前预定下来要做的事情应该还就是之前定下来的那几个页面，然后预计还要去做后台管理应用的一些后端开发。</p>
<p>因为现在身体好了不少于是直接去上地出勤，虽然状态依然没有完全回来，但是基本上已经是能活动开了。不过打了一晚上一分没上，还是很难受的。</p>
<p>本来是打算和舍友一起去海底捞的，但是考虑到我出了勤得去洗澡，然后当晚还有韩语作业，只能偷摸溜回来。然而回来发现的第一件事就是我自行车被偷了，我明明好好锁了车，却依然被偷了。本来是打算报警的，但以前也被偷过车的一位同学提醒我这事报警挺麻烦，毕竟你也没法拿出什么很重要的证据说明这车就一定是你的，而且很多行政流程可能还挺麻烦。</p>
<p>回到宿舍本来打算稍微做点事情的，结果是相当困，写完韩语作业之后就直接摸鱼了。</p>
<h1 id="section-12">2023.03.04</h1>
<p>今天起来先是收到了 SECoder 因为网段限制无法满足给所有同学开两个部署容器的麻烦消息，这代表我们对小作业框架要做大改。急急匆匆和高老板、mfy 商议了解决方案之后，我把作业文档和课程公告写好了，就等高老板那边把 code base 修改好，然后开好容器就可以准备谢罪了。</p>
<p>此外不少同学的软工答疑我还暂且没解决，在此之外实习的事情理应今天解决我还没做。</p>
<p>不过说实话，现在我对这份实习是越来越不想上心，因为自己毕设真的是没有进度，现在也已经是三月的开头过去三四天了，四月中期拿不出东西是真的要收拾东西走人的。</p>
<p>有个题外话就是我考研的舍友似乎想来我们组，看上去还真有可能。如果是这样的话，至少几年内有个一起在组里的也不错。</p>
<p>晚上稍微摸了鱼，打了一晚上德州扑克。这一把非常有意思的一局是，我起手 AK 方片，然后直接冲刺了，翻牌是三张方片，我直接中天顶同花，于是也不演了，打退几家。令我惊讶的是，即使是这样居然还有一家和我对着下注，我看后续牌没有对子，就说明没四条或者葫芦了，结果那一家还在和我对着下注一直到 All in，我这手牌自然是一击把他打飞了。后面我还拿到过天葫芦，天顶两对等好牌，只能说这一把太运势好了。</p>
<p>其实晚上最主要的还是把软工小作业的问题解决了，更新了文档，发布了课程公告，也终于给大家开好了容器，这件事情也算是平稳过去了。</p>
<h1 id="section-13">2023.03.05</h1>
<p>周日，本来想好好做点实习的事情的，结果直接在宿舍开始摸鱼。现在气温开始回升了，慢慢有春天的感觉了，最近心情大好。</p>
<p>不过下午却是摸鱼摸过去了，中途 c7w 给我转发了 ouuan 在自己 blog 上对软工小作业的批评，怎么说呢，别人说的没错那就只能立正挨打。硬伤就是计时器资源和网络请求并没有设置在组件卸载的时候取消，这一点怎么说呢，因为曾经的项目没有使用过定时器，也没有过于管 abort 网络请求的事情，所以就没这方面的经验，确乎是得学。然后就是 ESLint 配置的事情，怎么说呢，一是 holder 确实 prefer 一个并非大众喜爱的码风，然后 ESLint 没好好配也差不多是为了同学写的时候别真的红一片，我当时第一次开始写代码就经常被 lint 干到崩溃，明明会写的逻辑硬要跟着 lint 后面走。嘛，不过也确实是在想要不从众用 2 space 缩紧和单引号算了，但是说实话 holder 真的是单引号极端厌恶。</p>
<p>整体要说的话，实际上问题也就是一个，就是“简陋”，不符合当下的一些约束或者说惯例，而且为了零基础也能上手，省掉了一堆东西还几乎没多少填空。</p>
<p>算了，还是等 ouuan 来好好调教一番吧，我摆烂了，我只想毕业了。</p>
<p>但是说实话，还是赶快做点事情从周一开始恢复到第一周的工作状态吧，否则实在是有点太摸了。</p>
<hr />
<p>总之今天整体还是太摸鱼了，实习那边的东西没有一发调出来也是真的没绷住，然后还时不时被 ouuan 拷打，包括各种可以优化的地方。看来 holder 还需要再稍微锻炼一下抗压能力，这点抗压能力完全不能应付啊，包括之前被 cyr 拷打毕设也是，完全做不到坦然面对面前的问题呢，遇到问题只想摆烂和找借口嘴硬，这实在是有点过分了。</p>
<h1 id="section-14">2023.03.06</h1>
<p>今天早上起来就发现已经十点了，已经过了韩语课的签到，于是也懒得去了，看到湖中在说想出勤，于是直接去了五道口。没有想到的是，即使是星期一的上午，五道口依然充满了人，完全打不了多少，只能随便糊糊作罢。</p>
<p>下午精神终于回来了一点，昨天摆烂加上被拷打真的是完全绷不住，但还是得赶快调整。到了工位，整理了一下自己的东西，结果发现耳机的耳塞又掉了，没有办法只能赶快下单新耳机，不能再将就着用这个破耳机了。下午依然是随便跑了一下 Puffer 的实验，可喜的是这一次实验居然似乎有了点看起来能行的样子，因为现在至少能打过启发式了，至少不是智障了。在等实验的过程中帮 abmfy 修了一下日语作文，然后准备还是赶快把实习那边的事情给做完，少一件事终究是好事。</p>
<p>今早在出勤的时候顺手把当前前端小作业存在的问题给罗列了一下，整体来讲虽然有点绷不住但还是感谢 ouuan 提供了这么多的改进意见。</p>
<h1 id="section-15">2023.03.07</h1>
<p>7 号真实地没有任何可以记录的事情，因为早上起来之后随手在群里发了一个“礼问上几”，得到上地机厅只有一人的答复之后，立刻收拾东西去出勤了。然后原本是打算随便打打就下午回来的，结果因为手感好到离谱，直接上了四十几底分，于是就这样一直打下去了。最后快要闭店的时候，随手开了一把高桥名人，结果 24 分纵连全打上了，鸟加 13.2 吃分。</p>
<p>但是事情总是得做的，因为和实习那边说了已经写完了订单页面，所以这个坑得填上，最终还是来到了 308 开夜班，一路做到早上六点，真实做到了三四个小时糊完整个页面。</p>
<h1 id="section-16">2023.03.08</h1>
<p>7 号晚上写完订单页面之后我意识到周三 8 号的韩语课多半是起不来了，于是和老师说明了情况，打算韩语课退课自学了。</p>
<p>8 号的话，起来之后先是去了 DRL，下课后结果兴致来了就去吃了顿麦当劳然后五道口出勤，出到了晚上回来和舍友吃了顿饭，308 睡了一觉之后就是软工的课咨委启动会，开完之后就十一点了，直到这个时候才准备开始做毕设。</p>
<p>这两天属实没有什么特别有意思的事情，也没有什么有意思的新闻，只是很平淡地摸鱼了两天，只能赶快把毕设启动了，不然太摸鱼了。然后韩语的收音和今天 DRL 的课程内容还得整理一下，不过还是毕设为重，这些可以明天开完会之后慢慢摸索。</p>
<h1 id="section-17">2023.03.09</h1>
<p>昨天为了赶快干活，晚上做毕设做到三四点，但是实在是顶不住了赶快去睡觉了。但是这一觉也没睡多好，中间醒了几回。早上起来就看见导师要去参加另外一场会于是组会交给我们自行组织，绝佳摸鱼机会。</p>
<p>于是下午的组会也只进行了半个小时就结束了，然后我们就在讨论导师参加的那一场会会开到什么时候，毕竟我们还得装作认真讨论的样子，至少不能让组会比导师的会提早结束。结果是没讨论出任何有价值的结果，就直接回实验室摸鱼聊天，没想到的是，导师已经回来坐到实验室了。</p>
<p>今天机厅据说人并不多，但是说实话事情还是不少的，还是稍微做做吧，大不了周五出勤出一整天。</p>
<h1 id="section-18">2023.03.10</h1>
<p>周五似乎并没有什么安排，因为周四理论上已经大体解决了问题，我也成功在周五凌晨六点前把实习的代码交掉了，虽然我知道里面还有不少的错误，但这些错误也不是我写的，我真的很难去帮别人补天。</p>
<p>然而下午毕竟是要验收的，验收这就发现这玩意几乎没有办法用，功能上欠缺了一堆东西，实习那边的学长能看得出来很着急，于是急忙安排我们前端开发的两拨人赶快开会对接。我迅速把一些比较严重的问题扔到了群里，但是他们的答复也比较暧昧不清，不太能对实际解决问题起到什么作用。</p>
<p>晚上稍微开了个会，我直接对着他们的代码指指点点了一通，总之就是他们那边出了不少问题（虽然感觉我也可能出问题），导致现在功能上完全用不了。在这之前事实上我已经和 yfgg 吐槽了很多他们代码上的错误之类的，总之就是血压超级高。</p>
<p>开会的时候我直接说我周末不奉陪了，你们的问题你们慢慢解决，然后我就开始心安理得地摆烂，打了一晚上德州扑克之后就早早睡了。</p>
<h1 id="section-19">2023.03.11</h1>
<p>周六是约好先去麦当劳吃饭然后 V+ 群群 K 的，我定好了十一点的闹钟，虽然被闹醒了但是小小眯了一会，没想到就直接迟到半小时。</p>
<p>因为这次参加的群友相当之多，最终我们是分为中 V 和日 V 两边举行，我一直在日 V 这边，确实也唱了相当多的 V 曲，嗓子已经炸裂了。</p>
<p>晚上本来是打算聚餐的，但是还是和湖中、秋枫老师临时起意去窝出了一小会勤，只是没想到窝现在十点钟就会关门，于是也没玩很长时间就只能回来了。</p>
<p>回来洗了个澡，准备稍微干点活。在今天玩的时候实习那边还在说打算周日把 bug 修好，但总之我有点不想再陪他们玩下去了，我把我的工作做好，这周，我必须把那里的事情放下来做毕设了，后面软工助教会还得开，不能再这样拖泥带水了。</p>
<hr />
<p>今天还是主要配置了一下 DRL 的环境，因为手上的 Mac 说实话已经很不好用了，很怕后面要做深度神经网络的时候撑不住，于是直接把代码拉到服务器上去了。但是这有一个重要的问题，DRL 的作业是基于 Gymnasium 的，这是需要渲染图形界面的，那我就需要通过 X11 转发图形界面到我的 Mac 上。但是刚配置完 X11，就报错了：</p>
<figure class="highlight shell"><figcaption><span>ZSH</span></figcaption><table><tr><td class="code"><pre><span class="line">X Error of failed request:  BadValue (integer parameter out of range for operation)</span><br><span class="line">  Major opcode of failed request:  149 (GLX)</span><br><span class="line">  Minor opcode of failed request:  3 (X_GLXCreateContext)</span><br><span class="line">  Value in failed request:  0x0</span><br><span class="line">  Serial number of failed request:  143</span><br><span class="line">  Current serial number in output stream:  144</span><br></pre></td></tr></table></figure>
<p>我查了半天终于在 StackOverflow 上找到了解决方案，只需要在 MacOS 的客户端这边运行下述命令启用 IGLX 即可：</p>
<figure class="highlight shell"><figcaption><span>ZSH</span></figcaption><table><tr><td class="code"><pre><span class="line">defaults write `quartz-wm --help | awk &#x27;/default:.*X11/ &#123; gsub(/\)/, &quot;&quot;, $2); print $2; &#125;&#x27;` enable_iglx -bool true</span><br></pre></td></tr></table></figure>
<p>然后普通地 <code>ssh -Y</code> 连接到 Linux 服务器端就可以了。如果是 VSCode 的话，需要在 SSH config 里面加上下面两行来保证 X11 启用：</p>
<figure class="highlight shell"><figcaption><span>SSH config</span></figcaption><table><tr><td class="code"><pre><span class="line">ForwardX11 yes</span><br><span class="line">ForwardX11Trusted yes</span><br></pre></td></tr></table></figure>
<h1 id="section-20">2023.03.12</h1>
<p>今天是周日，按照道理是和实习那边对前端的任务的，不过下午我都用来搬迁毕设代码框架里面的一个第三方框架了。我毕设真的是，毫无进展，真的得速速做点东西出来了，尤其是下一次组会真的得说点什么东西出来了，不然这也太慢了。</p>
<p>晚上临时起意去了胜博殿去吃炸猪排，不得不说，特别好吃，超出想象的好吃。猪排我点的千层锦，切面可以看到是一层层猪肉叠起来，最后炸出来居然不散开，居然还能保持猪排的形状，这也太惊艳了。小菜比如说包菜丝、茶水、金枪鱼拌饭、味增汤之类的就没有那么惊艳，但绝对也是平均向上的水平。</p>
<p>今晚吃饭的地方旁边就有 maimai，于是就去打了几把，差点鸟掉 Big Daddy，但是尾杀崩盘了就没办法了。这个机厅最大的问题就是游戏币原价太贵了，两块钱一币，maimai 1pc 要五币，原价的话十块钱 1pc，实在是离谱。</p>
<p>晚上回来发现自己 B 站六级了，于是做了一下硬核会员考试，擦边通过，关于鬼畜的一些东西真的已经是考的都是边边角角完全不知道了。做完这些迅速过了一下实习那边的代码，把订单列表页的按钮都写上了回调函数，我这边工作基本就相当于结束了。交了一些 Bug report，和学长说了自己可能得做毕设之后，就暂且告一段落吧。</p>
<h1 id="section-21">2023.03.13</h1>
<p>周一，因为已经退掉了韩语，所以没有早起，起来之后按照以往的规划去了五道口出一小会勤。本来是打算出一两个小时就回去去工位做毕设的，结果是一直打到了闭店。</p>
<p>不过这一次出勤实在是太值当了，不仅杀掉了心心念念的捕物帐、纵连派对、跳舞狗三个 13+，还 AP 了海底谭和弱虫。最经典的事情则是，因为我已经连续出勤了七个小时已经累得不行，但是最后快闭店的时候我同学拉着我说再来一把。我秉持着已经这么累了，再累点也没事的态度开了一把 DX 奶，没想到的是我把这玩意杀了。而正好，同学帮我录下来了最后十秒钟，当了一次战地记者。</p>
<p>回来之后就把这个视频上传到了 B 站，还是很有意思的。</p>
<h1 id="section-22">2023.03.14</h1>
<p>今天决定好好做毕设了，不过这次我打算换方向了，我不打算完整复现论文了，而是直接用 community code base，在这个基础上先跑起来 Pensieve 作为 baseline。感谢贾老师的建议。</p>
<p>不过这次在跑起来这个 code base 的过程中遇到了相当多的困难。我一开始打算在服务器上运行起来这套代码，首先遇到的问题是导入自己编写的模块会导致 Python 找不到模块，这也算是个经典问题了，不过这次我找到了这样一套 Python 引言代码，感觉可以后期长期使用这样一套引言来解决自己编写模块之间互引的问题：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">current_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(os.path.join(current_path, <span class="string">&quot;..&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>之后遇到的问题是服务器上没有 OpenMPI，这个简单，直接 <code>sudo apt-get</code> 就可以了。然后还有一点就是没有装 Mujoco 131，这个也不难。</p>
<p>然而后面的就是大问题了，因为这个代码框架还是涉及到图形界面，所以还是会涉及到 SSH X11 转发图形界面，然而我本以为配置好了，结果这次运行的时候炸了 <code>No specified protocol</code>。我上网找了一下，基本都是说没有权限的问题，用 <code>xhost +</code> 命令就可以解决问题，然而我无论怎么尝试都不行。于是我放弃了，我决定先在我 Mac 本地跑起来这一套玩意。</p>
<p>然而在 Mac 本地上就有另外的问题，OpenGL 找不到。我尝试了很多方法安装 OpenGL，但都不行，最后还是找到了相当邪道的解决方式，即直接修改第三方 <code>pyopengl</code> 里面寻找 OpenGL 的代码。代码位于 <code>platform/ctypesloader.py</code> 中，里面函数 <code>_loadLibraryWindows</code> 中有一段如下的代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">fullName = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fullName = util.find_library(name)</span><br><span class="line">    <span class="keyword">if</span> fullName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        name = fullName</span><br><span class="line">    <span class="keyword">elif</span> os.path.isfile(os.path.join(DLL_DIRECTORY, name + <span class="string">&#x27;.dll&#x27;</span>)):</span><br><span class="line">        name = os.path.join(DLL_DIRECTORY, name + <span class="string">&#x27;.dll&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    _log.info(<span class="string">&#x27;&#x27;&#x27;Failed on util.find_library(%r): %s&#x27;&#x27;&#x27;</span>, name, err)</span><br><span class="line">    <span class="comment"># Should the call fail, we just try to load the base filename...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>这里直接把 <code>fullName</code> 变量硬设置为 <code>"/System/Library/Frameworks/OpenGL.framework/OpenGL"</code> 即可（在 MacOS 上），这样的话似乎就能通过检查了。</p>
<p>之后也是 Mac 上装一下 OpenMPI，直接 <code>brew install openmpi</code> 就行，然后就跑起来了。然而我 Mac 究竟是老了，所以跑的时候风扇直接起飞，还是得放到服务器上。不过我发现一件事就是这玩意完全没有生成什么图形界面，意思就是说理论上根本碰不到 X11 转发的问题，所以我就打算今天至少得把这玩意在服务器上跑起来才行。</p>
<hr />
<p>在服务器上二分了一下确认了是 <code>mpi4py</code> 这个包在 import 的时候会爆炸，不过我也用不到这个东西所以直接注释掉就没有那么多事情了。</p>
<p>这个框架另外还附赠了一个用 Flask 编写的前端用来可视化训练数据，不过看起来这个前端目前也是炸得不轻，啥地方都是 500 Internal Server Error，还得一步步修理。</p>
<p>最终还是找到了前端的问题，是因为我以为代码里面的 <code>viskit</code> 是个需要安装的第三方，所以直接用 <code>pip install viskit</code> 装了一下，结果这个 <code>viskit</code> 事实上是自己写的一个 <code>viskit.py</code> 模块。而碰巧的是用 <code>pip</code> 装的时候装了个很老的依赖，现在更新到了 v3 而我装的是 v1，恰巧这个依赖还真的在 <code>viskit.py</code> 里面引用了，所以直接爆炸了。</p>
<p>我比较怀疑这个框架里的 <code>viskit.py</code> 是一个 self modified 的魔改版第三方，所以才不能从 <code>pip</code> 直接下载。</p>
<p>最后他还有一个用来展示训练结果的 Python 文件，里面读取了缓存的模型参数然后用了 Gymnasium 渲染一个图像出来，不过这里又是涉及到图像 X11 转发，于是又理所应当地炸掉了，但今晚我也懒得调试这个东西了，明天要帮黄老师找他博士毕业论文的错别字还得尽量把 Pensieve 写上去。</p>
<h1 id="section-23">2023.03.15</h1>
<p>今天真的没睡好，本来昨晚看完了《シノハユ》漫画之后已经五六点，结果还有点失眠了一下子没睡着，最后七点才昏昏沉沉睡过去。结果早上十点钟就有人来清洗空调，直接把我弄睡不着了，只睡了三个小时直接让我整个早上极端暴躁。</p>
<p>结果先去偷摸出勤了，勤到了三点多，决定回工位帮黄老师看论文。然而今天在工位说实话黄老师论文也没看进去多少，反倒是软工因为周四要开第一次大例会所以拉群、加好友、发注意事项弄得热火朝天，最忙碌的时候我同时在和五位同学保持联系。</p>
<p>晚上在实验室和学长们吹了一会 GPT-4 的水，没想到一路吹到晚上十一点，于是赶快收拾东西回宿舍。路上遇到了 lzj，于是和他两个人边聊天边走回宿舍。</p>
<p>回来之后决定先把目前复现的 GrBAL 挂到服务器上跑着，昨天虽然跑了一些，但是试验结果相当炸裂，reward 都是负的，我完全不敢相信这是目前最常用的 community code base。然后仔细想了想，终究还是得做点什么出来，于是决定用 MPC Controller 作为 policy 跑一下 Pensieve 看看结果，本想晚上就把代码迁移好的，结果还是电脑没电，终究只能作罢。</p>
<p>明天需要同时开组会和软工大例会，晚上还有学生节技术支持的会，还是挺忙的。不过目前来看周五是空闲的，估计找个时间把 Pensieve 赶快挂上去，跑点结果出来做分析最好。</p>
<h1 id="section-24">2023.03.16</h1>
<p>今天开组会的路倒是比较波折，我现在已经习惯点午饭的外卖到 FIT，然后在 FIT 吃完正好去开组会。然而今天的午饭早到了，于是起床后收拾自己又得加速，出门后扫了一辆共享单车，但是因为现在共享单车有一部分没有物理锁只能用手机控制电磁上锁，而且现在共享单车有的时候似乎还不能随处停车，这次我骑到 FIT 楼之后居然一直没法上锁。没办法，我只能投诉然后强行关锁，就这样浪费了二十分钟，午饭时间就很短了。</p>
<p>匆匆忙忙吃完午饭上楼开会，只能说勉强赶上。在组会上简单把 Pensieve 的环境搬到了新框架里面，不得不说这个框架设计得很好，可拓展性很强，我搬过来 Pensieve 也没有什么卡住的地方。下面就是尝试研究一下用 MPC Controller 解 Pensieve 可不可行了，如果这个结果打得比较好的话，至少就能当个事情说了。</p>
<p>另外似乎还得做一下 baseline，把数据集按照网络情况切分一下，把 Pensieve 也顺手跑一下，这个下一周做完吧。</p>
<hr />
<p>组会之后去开软工的第一次大例会，本来以为是个小会议室的，没想到随堂助教给我租了个 FIT 楼的大会议室，还不让吃零食和喝有色饮料，我准备的小零食也完全用不上了。例会本身没啥好说的，就是强调一下例会规范、开发规范，然后提一下下一周大家准备做多少和大家对给分的心理预期。例会效果整体不算差，甚至可以说不错，总之和大家交流下来感觉都挺好的，应该后面也会顺利吧。</p>
<p>回来之后和贾老师讨论了一下毕设下面的计划，他建议先认真检查一下论文中方法到底可不可行。检验方法有几种，一种是发邮件问作者要 code base，一种是看看有没有引用这篇论文的工作是开源代码，还有就是我感觉应该可以再 debug 看看。</p>
<p>后续就是我提到了我想做的一些，首先是做 baseline，这里就需要问黄老师要一点各种环境下的 trace 去剪切生成环境切换的数据集。然后是继续在现在的 code base 上迁移 Pensieve，然后用 MPC 求解观察一下结果。</p>
<p>总之后面还得是毕设为重，今天听说毕设中期有可能提前到三月底瞬间就很紧张，希望不要这样，最好推迟到四月中旬。今晚还同时有学生节技术支持的会和实习那边的 bug report 会，算是很忙了。</p>
<h1 id="section-25">2023.03.17</h1>
<p>昨晚晚上回来之后迅速开完了几场会，学生节技术支持弄明白了，实习那边的 bug 基本修完了，小作业思考题评分细则也定下来了。晚上就借着劲改完了一大半思考题，期间有很多很模糊的答案，十分难给分，但是最终还是睁一只眼闭一只眼给过了。说实话我现在还算是有点担心会不会后面来给我要分的同学会很多。</p>
<p>因为太晚了所以周四晚就睡 308 了，起来之后和实习那边再对了一下目前的进展，他们打算再把一些弹窗精修一下，我还得等等设计稿。然后我把软工小作业思考题改完大半之后就基本上闲下来了，没有特别大的很急的事情。约了晚上游泳和打牌，摸鱼摸一个周末。</p>
<p>晚上基本上实习那边的东西已经写完了，舍友喊我去游泳，最终是五个人一并去了游泳馆，八点钟游泳到九点半，然后出水去吃了个夜宵。夜宵吃到了心心念念的杨枝甘露麦旋风，说实话味道确实不错。吃完后赶忙回来打牌，雀魂规则不太想打，于是玩起了无一发无杠宝无里宝的 A 规，但是没想到的是依然有人能在 A 规下和出立直、混全、三色、宝牌二的跳满。</p>
<p>打完牌已经是一点半了，赶忙赶到 308 和 yfgg 看了一眼直播机和弹幕机，准备开始摸鱼了。</p>
<h1 id="section-26">2023.03.18</h1>
<p>今天一起床就去学生节现场了，当时网线等物资已经都运到了。学生节的任务基本分为搭建 WiFi、搭建弹幕机、搭建直播机三个部分。WiFi 则是最重要也是最麻烦的，不仅需要调通网络拓扑结构，更主要的是需要一堆人去拉线。</p>
<p>这次拉 WiFi 最值得记录的就是有个 NUC 是 Windows 宿主机，Debian 虚拟机，但是所有公网 IP 全都被虚拟机持有，并且虚拟机上运行着软件路由器，而宿主机则是通过 AP 的无线网络上网。这个神奇的虚拟化设计还让我们研究了一通，当时为了设置 IP 地址我们直接扫了一遍网段，就是没扫到 Windows 宿主机，指导向编导要了一个显示器硬登录进去看了一遍才知道原来是这么回事。另外，祖传的八个 AP 也老了，交换机甚至还是百兆的，只能说这套设备还是得赶快换掉。</p>
<p>之后是弹幕机，弹幕机更麻烦，似乎因为硬件已经老旧，其完全撑不住 60Hz 的刷新率，直接会导致主投黑屏。在彩排过程中这个弹幕机没少出锅，但是在最后通过降频到 30Hz 勉强稳住了三十分钟，于是大家都觉得没啥事了就直接上线。结果没想到在教师视频部分，弹幕机直接挂了，导致正式现场黑屏，最后只能下线弹幕机。比较好玩的一点是，Harry 实际上是知道这个机子是有问题的，他的意思是生产环境反正没出过事，这话只能说我很难绷，明知开发环境出过事情却一直没跟我们说过这件事，只能说运气差被我们撞到了。</p>
<p>直播机没啥好说的，按照惯例设置了一通就行了。</p>
<p>学生节结束之后，工作人员都打算去吃海底捞庆功宴，我因为约好了周日的丰泽园就没去，加上还得回去看一眼软工小作业的批改状况。</p>
<h1 id="section-27">2023.03.19</h1>
<p>早上还是睡过了，没赶得上和大部队一起去丰泽园。但不得不说，丰泽园是真的好吃，九转大肠和葱烧海参绝对的招牌菜，干炸丸子也绝对是一流水平。</p>
<p>下午按照规划，四个人坐车去昌平泡温泉，不过那个温泉我感觉有点简陋，但整体还算舒服。娱乐设施也不算完备，只有简单的棋牌、台球、乒乓球，设备也有点老旧。最主要的是，下午黄老师催促我帮他审核论文，于是我整个下午实际上都在断断续续看论文，不过最终还算是把这事做掉了。</p>
<p>回来之后和人约了周一早上去上地堵门，于是就决定早早睡觉吧。明天开始还是得做毕设，毕竟看起来三月底中期很像是真事。</p>
<p>目前毕设的计划：</p>
<ul>
<li>验证原框架是否可用
<ul>
<li>重新拉取原框架，完全不修改直接运行，确认其效果</li>
<li>若原框架可用，则 debug，若不可用，换框架</li>
<li>换框架可能流程
<ul>
<li>通过邮件联系作者获取 code base</li>
<li>找寻引用这篇论文的开源 code base</li>
</ul></li>
<li>需要研读 code base，形成完整的 paper report 和 code doc</li>
</ul></li>
<li>Pensieve 迁移
<ul>
<li>写完通过 MPC 求解 Pensieve 的代码并运行</li>
<li>研究 Pensieve environment（在线直播环境）</li>
</ul></li>
<li>数据集生成
<ul>
<li>获取黄老师的 network trace data repo</li>
<li>准备数据剪切脚本</li>
<li>训练 baseline Pensieve</li>
</ul></li>
</ul>
<h1 id="section-28">2023.03.20</h1>
<p>今天又是周一了，和群友约了上地堵门，于是真的就去了，而且一去就是一天。一整天鸟了 Selector 和吹爆，吃了一点点分，然后把不少 13+ 推到了 SS+，尤其是待宵夜虫和管弦乐，相当难受。</p>
<p>今天出勤的意外就是左手食指被售货机夹到了，结果掀开了一层皮，还好不深，简单消毒之后用了一下创口贴，晚上基本就可以自由活动了。</p>
<p>但是今天最烦的莫过于实习那边又发来了 bug report，本来以为都是小问题，结果一看甚至还要写一个新的页面，还要和后端对接。最终还是晚上稍微花了点时间把这事干掉了，干完已经是凌晨四点。</p>
<p>此外，我也是今天才知道今年从计算机系考研本系只有两人通过了，而恰好就是我两位考研的舍友。zd 预计会去朱军组，指导老师是苏航，ky 似乎和我导师联系过，但是具体也不知道。他们应该是明天周二早上面试，具体情况就在这之后再说了。</p>
<h1 id="section-29">2023.03.21</h1>
<p>今天起来先把实习那边的一些小 bug 修了，衣服洗了，然后匆匆忙忙来实验室做毕设相关的，而且 DRL HW1 就要截止了，还要花点时间写那边的东西。现在麻烦的一点就是实验室的机子硬盘可能已经不太够了，我可能还得做一些迁移工作。</p>
<p>由于现在用的机子硬盘基本快耗尽了，所以上服务器列表找了一个稍微空一点的机子，搬迁了一下实验环境。这次好就好在我终于用上了 Anaconda environment export 来做依赖管理，所以这次把代码跑起来基本上没有耗费多长时间。之后就是先做了比较简单的一件事，就是把 Learning to Adapt 的 code base 原封不动地跑了一下，结果发现 reward 也是真的烂，这我就相当难绷了。</p>
<p>不过还有发现一件事，就是似乎在我配置的环境下代码运行速度相当之慢，运行时间逼近原先 code base 的三倍，这让我十分困惑，因为我基本没做什么改动。</p>
<p>鉴于原框架也不算多好用，于是就打算邮件问问作者有没有 code base 了。</p>
<p>整个下午其实也没做到什么事情，把实验挂上去之后做完了 DRL 作业去吃两位舍友考研面试的饭，吃完之后简单把实习那里补了一点代码。</p>
<p>不过最难受的莫过于似乎这个代码框架把服务器的内存跑炸了，500G 内存我都没有一点头绪怎么能炸掉的。不过今晚已经很困了，不如先睡觉。</p>
<h1 id="section-30">2023.03.22</h1>
<p>今天是沙尘暴，没法出门了，只能在宿舍好好干活了。</p>
<p>基本上还是在折腾原先 code base，尝试了很多种方法，也调节过超参，但总之最后出来的结果并没有那么理想，尤其是 GrBAL 方法，Avaerage return 一直稳定在零附近震荡，反倒是之前没有尝试过的 ReBAL 方法，似乎能够上升到 1000 左右的 Average return，虽说没有论文中说的那么厉害，但似乎已经能够打败一众 baseline 了。</p>
<p>下面就是努力生成一篇 code doc 或者 report，迁移好 Pensieve 以及做好 baseline 了。目前中期确认在下周三，只能说希望人能活着过中期。</p>
<p>不过现在有一点疑惑的是，似乎现在并没有写好一个比较完整的线上环境切换来做实验，可能还得找个时间写完这一块东西。</p>
<p>今晚最麻烦的事情就是我才了解到微信又禁用了一些接口，导致实习那边的代码几乎要重写很大一部分。晚上电脑实在没电，只能又去了 308，迅速干完活，结果有已经是四五点了。真的，这份实习给我带来的开发体验是相当不好的，不仅是微信小程序这个东西本身就很麻烦和丑陋，而且给我找的帮手水平也是真的不行，代码各种乱写，码风一言难尽，不管 TypeScript 报错，还经常在代码里面写死数据，导致后面各种排查，React 框架也不熟悉，能写出各种惊为天人的异世界操作。另外，开发的时候产品那边给的需求也没有一下子说清楚，和产品那边的沟通还是有了点障碍，确实有点难绷了。</p>
<h1 id="section-31">2023.03.23</h1>
<p>今天组会，整体上汇报没什么问题，就是似乎进度还是不是很理想，老师们都建议考虑先至少把实验跑起来然后试着简化一下目标来混过中期。</p>
<p>对着之前写的毕设目标记录一下最近的工作吧：</p>
<ul>
<li>验证原框架是否可用
<ul>
<li>(Completed) 重新拉取原框架，完全不修改直接运行，确认其效果</li>
<li>若原框架可用，则 debug，若不可用，换框架</li>
<li>换框架可能流程
<ul>
<li>(Completed) 通过邮件联系作者获取 code base</li>
<li>(Aborted) 找寻引用这篇论文的开源 code base</li>
</ul></li>
<li>(In progress) 需要研读 code base，形成完整的 paper report 和 code doc</li>
</ul></li>
<li>Pensieve 迁移
<ul>
<li>(In progress) 写完通过 MPC 求解 Pensieve 的代码并运行</li>
<li>(Completed) 研究 Pensieve environment（在线直播环境）</li>
</ul></li>
<li>数据集生成
<ul>
<li>(Completed) 获取黄老师的 network trace data repo</li>
<li>(In progress) 准备数据剪切脚本</li>
<li>(Planned) 训练 baseline Pensieve</li>
</ul></li>
</ul>
<p>总之今天黄老师帮忙鉴定了一下我想参考的论文之后，得出了这个方法是基于 MAML 的结论，并且断言这个方法至少一定能用，所以这个 code base 应该依然是可以使用的，只是超参数设定等需要调整一下。而这个超参数设定的事情，我在 HalfCheetah 和 Ant 两个环境下使用了论文给出的超参数，但是都没有获取到相当理想的结果，但也不差，至少能优于传统的 MAML。不过为了保险还是给作者发了邮件问了一下超参数的设定，好玩的是，这个 code base 的 repo 里面还有有关超参数设置的 open issue，作者似乎在里面回复了一个很快就来，但是已经两年多过去了还是没点动静。这个框架的 code report 自然还在路上。</p>
<p>Pensieve 迁移遇到的问题是如何建立一个较为合理的 Pensieve environment 并合并到 code base 里面，而这个合并中最难的就是如何描述 Pensieve 的状态和决策空间，一般而言 Pensieve 的状态空间和决策空间都并不是传统意义上的高维空间，而更像是 hand craft 出来的一堆 tensor 构成的离散集合。而我参考的这个 code base 里面的环境基本都是描述成高维空间中的 Box 的，这不难理解，因为这篇文章主要在做动作连续控制，所以状态、决策空间基本上都是 Box 描述。而这里黄老师也给了我一份代码 repo，这份代码将 Pensieve 的状态、决策空间做了转换，即也用 Box 描述，恰好可以解决我目前遇到的问题。</p>
<p>然后就是 baseline 构建的问题，现在我似乎并不打算构建很多复杂的 trace，先从简单的规律性切换开始吧，数据集造完之后就可以准备上手测试了。</p>
<p>今晚约了麦当劳和游泳，明天打算去看电影，而且还有一个非常麻烦的毕设动员会，干活的时间确实不太多了。</p>
<hr />
<p>今天开了软工小例会，也没有什么好说的，手下的四个组进度都比较符合预期，看看大家下周 Sprint1 能交上来什么东西吧。</p>
<h1 id="section-32">2023.03.24</h1>
<p>周五，本来就约好了去西单出勤，于是就去了西西友谊机厅出勤，那里有一台最新最热。整体而言出勤不太理想，没有上分也没打爽，因为人实在是太多了，大概一直维持在八九个人的高位。</p>
<p>由于和学弟约了七点半的电影，于是六点半赶忙从西单往海淀黄庄赶，然而我错误估计了周五晚的北京晚高峰，我真的完全堵在西二环上半个小时。最终电影自然是赶不上了，到达新中关的时候已经是电影开场半小时，想了想也没必要去看这个了，所以坐了地铁两站路去了万柳机厅出勤。万柳机厅最大的问题就是只有一台机子却整整有六七个人的规模，然后还没买水的自动售货机，所以又是不太舒服的出勤体验。</p>
<p>晚上回到宿舍就是打打德州扑克摸摸鱼，然后自然就这样结束了摸鱼的一整天。</p>
<h1 id="section-33">2023.03.25</h1>
<p>来工位赶中期，没想到贾老师也在。似乎今天还正好是全高赛开赛，zsj 开了直播间直播你清海选第一轮，于是就边看边做事了。比赛的走势整体没什么特别的，所以也没怎么重点观看，还是以做事为主。</p>
<p>今天主要是写完了 Data loader，写完了 network trace 切换的代码，然后生成了一份训练集和测试集用在训练 Pensieve baseline 上。另外由于目前的数据集并不太充足，当时突然想到可以用两条位于同一环境的 trace 之间做切换来做数据集扩充，这样的话勉强够使用了。目前 baseline 的设计是，三类训练集和四部分的测试集：</p>
<ul>
<li>训练集
<ul>
<li>#1. 由无切换的 4G 行走、4G 驾驶 trace 组成的训练集（使用数据扩充保证数据集规模一致）</li>
<li>#2. 所有无切换 4G trace 与 3 次等间隔环境切换 trace 3:2 混合</li>
<li>#3. 所有无切换 4G trace 与 3 次等间隔环境切换 trace 与随机环境切换 trace 3:1:1 混合</li>
</ul></li>
<li>测试集
<ul>
<li>#1. 4G 行走 trace</li>
<li>#2. 4G 驾驶 trace</li>
<li>#3. 3 次等间隔环境切换 trace</li>
</ul></li>
</ul>
<p>数据集弄好之后，从黄老师的 Pensieve 5G repo 那里弄来一份超参数设置，然后就开始训练了。比较好玩的一点，不知道为什么，似乎使用 #1 数据集训练的似乎在一开始（3k epoch 以内）反倒在有切换的环境下表现很好，甚至在 #3 测试集上达到了较为明显的正向 reward，而在 #1 和 #2 测试集上甚至还是负 reward。</p>
<p>现在这个实验跑一次七八个小时，三种训练集全都跑完估计得一两天，所以结果汇报还得再等等，我先放个占位表格在这里。这里均是训练 100k epoch 之后的结果汇报。另外还把黄老师那边的 PPO 的 Penseive 拉出来玩玩，自己手上的这个是基于 A3C 的，还写的不是很好：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">无切换训练集</th>
<th style="text-align: center;">等间隔切换训练集</th>
<th style="text-align: center;">随机切换训练集</th>
<th style="text-align: center;">PPO 版本 Pensieve</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">4G 行走测试</td>
<td style="text-align: center;">12.99</td>
<td style="text-align: center;">14.35</td>
<td style="text-align: center;">19.28</td>
<td style="text-align: center;"><strong>19.81</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">4G 驾驶测试</td>
<td style="text-align: center;">16.88</td>
<td style="text-align: center;"><strong>17.66</strong></td>
<td style="text-align: center;">16.25</td>
<td style="text-align: center;">14.82</td>
</tr>
<tr class="odd">
<td style="text-align: center;">等间隔切换测试</td>
<td style="text-align: center;">7.16</td>
<td style="text-align: center;"><strong>7.42</strong></td>
<td style="text-align: center;">5.91</td>
<td style="text-align: center;">5.39</td>
</tr>
</tbody>
</table>
<p>此外 26 号获得的一个训练曲线就报告在这里吧，这是等间隔切换训练集的训练曲线：</p>
<p><img src="/uploads/2023-spring-record/1.png" /></p>
<p>随机切换的训练曲线是：</p>
<p><img src="/uploads/2023-spring-record/3.png" /></p>
<p>目前总之是能明显观察到仅仅通过扩充数据集是不能完全解决这个问题的，扩充数据集确实可以提升结果，但是极其有限，在有切换的测试集上的表现依然和无切换的存在段差。另外，更换 RL 算法也不完全能够解决问题。</p>
<p>另外，根据 AABR 论文的结果，即使 4G 网络在驾驶和行走这两个环境间差距并没有如此之大：</p>
<p><img src="/uploads/2023-spring-record/2.png" /></p>
<p>而这里使用的训练集中：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">4G 行走</th>
<th style="text-align: center;">4G 驾驶</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">均值</td>
<td style="text-align: center;">32.13</td>
<td style="text-align: center;">39.34</td>
</tr>
<tr class="even">
<td style="text-align: center;">方差</td>
<td style="text-align: center;">860.32</td>
<td style="text-align: center;">839.72</td>
</tr>
</tbody>
</table>
<p>可以发现事实上差距并没有想象中那么大，但其之间的切换依然会导致 Naive Pensieve 完全无法适应。</p>
<p>不过这里我有一个想法，既然差距并没有这么大，那么这两个网络的特征到底是什么的呢？到底是什么决定了这个 trace 更像是行走时测出来的还是驾驶时测出来的，这个我觉得应该要画几个 trace 出来研究一下。</p>
<hr />
<p>这里应该还需要辅以部分 log 分析，log 分析的话就等第三个随机切换训练集弄完后基于那个 log 做一些分析。这些分析应该就构成了下述论点的证明：</p>
<div class="note info no-icon"><p>Naive Pensieve 仅仅依靠于<strong>扩充训练集</strong>或者<strong>更换 RL 算法</strong>是无法解决线上环境切换的问题的。</p>
</div>
<p>这也就否定了简单的传统方法在这里的应用，从而构成了解决方案<strong>必要性</strong>的验证，下面毕设中期可能就缺一个比较好的方案<strong>可行性</strong>验证了。</p>
<h1 id="section-34">2023.03.26</h1>
<p>先前买的日语中高级语法教程到了，于是取了快递准备带去 FIT，但是偶然发现今天天气极其舒服，于是把骑着的共享单车扔在清芬，边看书边走去 FIT 了。到了 FIT 之后依然是一点点做事的心情也没有，Pensieve baseline 还在训练，按理说现在就应该准备写 code doc 然后做好迁移工作放上去训练，但是显然我摸鱼摸鱼到了现在。</p>
<p>现在比较难受的一件事情就是我似乎不太清楚迁移到 Pensieve 之后应该用什么数据集做训练，现在还有点难绷，我可能还真的得好好思考一下这个问题。这个问题的思路就是好好阅读一下代码框架，研究一下原先基于 Gymnasium 环境的训练算法策略，基于此将 Pensieve 中的概念与框架代码做一下一一对应，之后就应该能摸明白最后的逻辑了。</p>
<p>晚上是真的没心情继续做事了，于是偷摸去了五道口出勤，出到闭店之后回来继续干活。不过似乎实习那边的 bug 一直还要我修，基础技能培训我也得准备，现在总之就是事情还挺麻烦的。</p>
<hr />
<p>目前仔细阅读了一下 GrBAL 代码框架，有一些笔记就写在这里了，这里都是备忘：</p>
<ul>
<li><code>config</code> 里面的 <code>meta_batch_size</code> 应该代表的是目前训练多少个 meta task，似乎就是论文里的 #Task/itr，或者说 <span class="math inline">\(N\)</span></li>
<li><code>config</code> 里面的 <code>adapt_batch_size</code> 应该基本对应采样的时候使用多少的 trajectory 节点通过元学习策略 <span class="math inline">\(u_{\psi_*}\)</span> 来更新 dynamic model 的参数 <span class="math inline">\(\theta\)</span>，也就是论文中的 <span class="math inline">\(M\)</span></li>
<li>似乎代码框架内没有设置 <span class="math inline">\(n_S\)</span> 参数的地方，其 MB trainer 之中每一个 iteration 都会通过 Algorithm 2 收集 rollouts</li>
<li><code>MetaMLPDynamics</code> 中的 <code>self.learning_rate</code> 就是 Algorithm 1 中的参数 <span class="math inline">\(\beta\)</span>，另外其中定义的 <code>self.train_op</code> 就是以学习率 <span class="math inline">\(\beta\)</span> 优化 <code>self.post_loss</code>，而这就是 <span class="math inline">\(1/N \sum_{i = 1}^N \mathcal{L}_j\)</span></li>
</ul>
<p>这里我们就直接研究一下 Meta MLP Dynamics 的结构究竟如何。首先他为每一个 meta task 都建立了一个 pre MLP 和一个 post MLP，用来预测一个代码中名为 <code>delta_pred</code> 的变量。而这个变量参与了下述 loss 的计算：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">pre_delta_pred = pre_mlp.output_var</span><br><span class="line">pre_loss = tf.reduce_mean(tf.square(pre_delta_per_task[idx] - pre_delta_pred))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">post_delta_pred = post_mlp.output_var</span><br><span class="line">post_loss = tf.reduce_mean(tf.square(post_delta_per_task[idx] - post_delta_pred))</span><br></pre></td></tr></table></figure>
<p>这里就是简单的 MSE 均方误差，这里观察一下论文给出的 loss function，这是一个刻画当前 trajectory slice 和 dynamics 所希望的（或者说所预测的）trajectory slice 的吻合程度的 loss，最小化这个 loss 的效果就是让 dynamics 学习采样到的 trajectory，使得其模拟出来的 trajectory 贴合实际采样：</p>
<p><span class="math display">\[
\mathcal{L}(\tau_{\mathcal{E}}(t, t + K), \theta_{\mathcal{E}}&#39;) := -\frac{1}{K} \sum_{k = t}^{t + K} \ln \hat{p}_{\theta_{\mathcal{E}}&#39;}(s_{k + 1} \mid s_k, a_k)
\]</span></p>
<p>这里的 <span class="math inline">\(\theta_{\mathcal{E}}&#39;\)</span> 表示已经在环境 <span class="math inline">\(\mathcal{E}\)</span> 下 adapt 过的 dynamics 参数。</p>
<p>这里代码和论文矛盾的点有一，即论文中 loss function 是基于一个非确定的 dynamics，即 <span class="math inline">\(p := \hat{p}_{\theta_{\mathcal{E}}&#39;}(s_{k + 1} \mid s_k, a_k)\)</span>。然而代码中接受 <code>self.obs_ph</code> 以及 <code>self.act_ph</code> 并输出 <code>self.delta_pred</code> 的 MLP 却显然更像确定性 dynamics，即 <span class="math inline">\(s_{k + 1} := \hat{p}_{\theta_{\mathcal{E}}&#39;}(s_k, a_k)\)</span>。</p>
<p>post loss 的用处就是用来更新 dynamics 的参数 <span class="math inline">\(\theta\)</span>，学习率为 <span class="math inline">\(\beta\)</span>。pre loss 则似乎和元学习策略有关，但后续没在代码框架内寻找到这个变量的引用。</p>
<hr />
<p>决定换个思路了，在内部兜兜转转不如直接一点点剥开代码框架，把每个张量维度算清楚。论文中的算法有个相当明显的接口点，就是 Algorithm 1 和 Algorithm 2 之间通过 sampler 沟通，所以首先先去把握 sampler 给出的样本的尺寸。</p>
<p>sampler 给出的 observation sample 尺寸为 <code>(n_rollouts, n_timestep, obs_dim)</code>，action sample 尺寸为 <code>(n_rollouts, n_timestep, act_dim)</code>。总体是符合想象的，也就是给出了 <code>n_rollout</code> 个轨迹，轨迹长度（总时间步）为 <code>n_timestep</code>，然后第三个维度就是具体的每个时间步的观测状态和决策。</p>
<p>进入 dynamics 的 <code>fit</code> 函数，首先是把这个数据集划分成训练集和验证集，这个划分是在第一个维度上进行的，也就是把 <code>n_rollout</code> 个轨迹按照比例拆分。拆分完了就堆叠到训练集 <code>self._dataset_train</code> 和验证集 <code>self._dataset_test</code> 上。</p>
<p>下面就是看他的 batch 生成。对每一个 meta task，首先在 <code>[0, n_rollout)</code> 里随机一个 trajectory，之后选择一个中间点，向前截取 <span class="math inline">\(M\)</span> 个时间步，向后截取 <span class="math inline">\(M\)</span> 个时间步。这里就出现了问题，代码中明显假设了 <span class="math inline">\(M = K\)</span>，也就是说在 trajectory 上前向和后向截取了相同的长度，这一点显然和论文中是不一样的。</p>
<p>然后还有一点更为疑惑：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">num_paths, len_path = self._dataset_train[<span class="string">&quot;obs&quot;</span>].shape[:<span class="number">2</span>]</span><br><span class="line">idx_path = np.random.randint(<span class="number">0</span>, num_paths, size=self.meta_batch_size)</span><br><span class="line">idx_batch = np.random.randint(self.batch_size, len_path - self.batch_size, size=self.meta_batch_size)</span><br><span class="line"></span><br><span class="line">obs_batch = np.concatenate(</span><br><span class="line">    [</span><br><span class="line">        self._dataset_train[<span class="string">&quot;obs&quot;</span>][ip, ib - self.batch_size : ib + self.batch_size, :]</span><br><span class="line">            <span class="keyword">for</span> ip, ib <span class="keyword">in</span> <span class="built_in">zip</span>(idx_path, idx_batch)</span><br><span class="line">    ],</span><br><span class="line">    axis=<span class="number">0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这里关注他如何访问 <code>self._dataset_train["obs"]</code>，第一个维度其直接写了一个标量 <code>ip</code> 上去，这样会导致第一个维度消失，虽说后面指定的是 <code>axis=0</code>，实际上是在第二个维度上做合并的。由于 <code>idx_path</code> 长度为 <code>self.meta_batch_size</code>，也就是 <span class="math inline">\(N\)</span>，而第二个维度每个 trajectory 取用了 <span class="math inline">\(2M\)</span> 的长度，所以最后得到的 <code>obs_batch</code> 尺寸为 <code>(2MN, obs_dim)</code>。</p>
<p>这里明显做了很多的混同处理，比如根本体现不出来任务的差别，也体现不出来截取的作用。然而有个好处在于虽然融合了，但是这个 batch 第一个维度上的有序性至少保证我们之后可以再次把这个 batch 按照不同 meta task 拆分，虽然这也太丑陋了。</p>
<p>另外补充一句，<code>delta</code> 的含义就是 <code>obs_next - obs</code>，就是后续状态减去前置状态，即决策后的状态变化量。</p>
<p>获取 batch 之后就是喂到网络里算 post loss、pre loss，然后用优化器反传 post loss 更新网络。这里的认识就和上面的对上了，没什么新的，就不再写一遍了。</p>
<hr />
<p>把这些看明白之后我终于看明白了原先构建网络的时候的下面这段代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">nn_input_per_task = tf.split(self.nn_input, self.meta_batch_size, axis=<span class="number">0</span>)</span><br><span class="line">delta_per_task = tf.split(self.delta_ph, self.meta_batch_size, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">pre_input_per_task, post_input_per_task = <span class="built_in">zip</span>(</span><br><span class="line">    *[tf.split(nn_input, <span class="number">2</span>, axis=<span class="number">0</span>) <span class="keyword">for</span> nn_input <span class="keyword">in</span> nn_input_per_task]</span><br><span class="line">)</span><br><span class="line">pre_delta_per_task, post_delta_per_task = <span class="built_in">zip</span>(</span><br><span class="line">    *[tf.split(delta, <span class="number">2</span>, axis=<span class="number">0</span>) <span class="keyword">for</span> delta <span class="keyword">in</span> delta_per_task]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>他真的是我想的那样，依靠着那若有若无的有序性，先在生成 batch 的时候消失掉一个维度，然后再在这里凭空 split 出来。</p>
<p>这里 <code>self.delta_ph</code> 尺寸是 <code>(2MN, obs_dim)</code>，在第一个维度上按照 meta batch size，即 <span class="math inline">\(N\)</span>，等分，得到的张量尺寸为 <code>(N, 2M, obs_dim)</code>，并且恰好恢复了各个 meta task 的区别。然后遍历，列表产生式之中的 <code>delta</code> 尺寸为 <code>(2M, obs_dim)</code>，再将其沿第一个维度两等份，前半自然是 pre，后者自然是 post，尺寸变为 <code>(2, M, obs_dim)</code>。之后用 <code>zip</code> 函数重新组合一下，这里 <code>zip</code> 接受了 <span class="math inline">\(N\)</span> 个尺寸为 <code>(2, M, obs_dim)</code> 的张量作为参数，最后传出 <span class="math inline">\(2\)</span> 个尺寸为 <code>(N, M, obs_dim)</code> 的张量。</p>
<p>取 <code>obs_dim=1</code> 以及 <span class="math inline">\(N = 3, M = 2\)</span> 演示一下这个过程。下述 <code>self.delta_ph</code> 中 <code>0, 1, 2, 3</code> 属于 meta task #0，以此类推。并且 <code>0, 1</code> 是 pre observation，<code>2, 3</code> 是 post observation：</p>
<figure class="highlight plaintext"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">self.delta_ph = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span><br><span class="line">-&gt;</span><br><span class="line">delta_per_task = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]</span><br><span class="line">-&gt;</span><br><span class="line">delta (example) = [4, 5, 6, 7]</span><br><span class="line">tf.split(delta, 2, axis=0) = [[4, 5], [6, 7]]</span><br><span class="line">*[tf.split(delta, 2, axis=0) for delta in delta_per_task] =</span><br><span class="line">    [[0, 1], [2, 3]], [[4, 5], [6, 7]], [[8, 9], [10, 11]]</span><br><span class="line">-&gt;</span><br><span class="line">pre_delta_per_task = [[0, 1], [4, 5], [8, 9]]</span><br><span class="line">post_delta_per_task = [[2, 3], [6, 7], [10, 11]]</span><br></pre></td></tr></table></figure>
<p>这样确实同时完成了按 meta task 分割以及按 pre/post 分割两个任务，实在是高。</p>
<hr />
<p>把这些都看明白之后，就可以明白这里 loss function 实际上和论文不一样。代码里写的事实上是一个 deterministic dynamics，建模是 <span class="math inline">\(\delta_t := \hat{p}_{\theta_{\mathcal{E}}&#39;}(s_t, a_t)\)</span>，也就是用 MLP 预测状态的变化量，再与实际的状态变化量作 MSE（符号就随便用了，我看得懂就行）：</p>
<p><span class="math display">\[
\mathcal{L}(\tau_{\mathcal{E}}(t, t + K), \theta_{\mathcal{E}}&#39;) := \frac{1}{K \cdot \dim\mathcal{S}} \sum_{k = t}^{t + K} \bigoplus_{\mathcal{S}} [\hat{p}_{\theta_{\mathcal{E}}&#39;}(s_k, a_k) - (s_{t + 1} - s_t)]^{\otimes 2}
\]</span></p>
<p>这里上标 <span class="math inline">\(\otimes 2\)</span> 表示按元素平方，符号 <span class="math inline">\(\bigoplus_{\mathcal{S}}\)</span> 表示求所有元素的和。</p>
<h1 id="section-35">2023.03.27</h1>
<p>昨天太累了，今天就起得很晚，到 FIT 的时候已经是四点多五点了，草草吃了晚饭就开始干活。</p>
<p>昨天看了大半 GrBAL 之后，现在又有个未解之谜就是 <span class="math inline">\(\psi\)</span> 在哪里，这个元学习参数居然一下子没找到，而且我现在也暂且不太明白到底什么时候 <span class="math inline">\(\theta\)</span> 通过元学习被优化到了 <span class="math inline">\(\theta_{\mathcal{E}}&#39;\)</span>。</p>
<p>不过最终还是给我挖出来了，在构建网络的时候有这么一段代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ...</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    pre_delta_pred = pre_mlp.output_var</span><br><span class="line">    pre_loss = tf.reduce_mean(tf.square(pre_delta_per_task[idx] - pre_delta_pred))</span><br><span class="line">    adapted_params = self._adapt_sym(pre_loss, pre_mlp.get_params())</span><br><span class="line">    self._adapted_params.append(adapted_params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_adapt_sym</span>(<span class="params">self, loss, params_var</span>):</span></span><br><span class="line">    update_param_keys = <span class="built_in">list</span>(params_var.keys())</span><br><span class="line"></span><br><span class="line">    grads = tf.gradients(loss, [params_var[key] <span class="keyword">for</span> key <span class="keyword">in</span> update_param_keys])</span><br><span class="line">    gradients = <span class="built_in">dict</span>(<span class="built_in">zip</span>(update_param_keys, grads))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Gradient descent</span></span><br><span class="line">    adapted_policy_params = [</span><br><span class="line">        params_var[key] - tf.multiply(self.inner_learning_rate, gradients[key])</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> update_param_keys</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    adapted_policy_params_dict = OrderedDict(<span class="built_in">zip</span>(update_param_keys, adapted_policy_params))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adapted_policy_params_dict</span><br></pre></td></tr></table></figure>
<p>这里就是非常简单的，把 pre MLP 参数和 pre loss 扔到 <code>self._adapt_sym</code> 里面去，而这个函数里面构建的就是：</p>
<p><span class="math display">\[
\theta_{\mathcal{E}}&#39; \leftarrow u_\psi(\tau_{\mathcal{E}}(t - M, t - 1), \theta)
\]</span></p>
<p>的 adapt 过程。这个 adapt 过程在论文中具体定义为：</p>
<p><span class="math display">\[
\theta_{\mathcal{E}}&#39; = \theta_{\mathcal{E}} + \psi\nabla_{\theta}\frac{1}{M}\sum_{m = t - M}^{t - 1}\ln\hat{p}_{\theta_{\mathcal{E}}}(s_{m + 1} \mid s_m, a_m)
\]</span></p>
<p>这里显然还是和昨天提到的问题一样，论文和代码没有对的上，dynamics 是确定性的，pre loss 也更像是 MSE。不过这里根据代码实现看，<code>self.inner_learning_rate</code> 就是元学习参数 <span class="math inline">\(\psi\)</span>。下面一步就是找这个量究竟什么时候被实际计算，另外，何时其更新了元学习参数 <span class="math inline">\(\psi\)</span>。可以注意到这些要被更新的参数全都压入了 <code>self._adapted_params</code>，找寻这个变量的引用就可确定出 adapt 实际执行的位置。</p>
<p>简单找一下就能找到这个类里面的 <code>self.adapt</code> 方法就是实际执行的地方，继续找这个成员函数调用的地方，就会发现其仅仅在 <code>sim_policy.py</code> 中调用，那么就可以确定这个函数是用于线上 adapt dynamics 的。</p>
<p>说实话目前这个框架里面还有很多地方我没有研究明白，比如说到现在我都不知道其构建这么多 MLP 的用处是什么，以及论文里的 <span class="math inline">\(\theta, \psi\)</span> 是否就如我理解这样，包括 <span class="math inline">\(\psi\)</span> 的训练究竟在哪里之类的问题。但是由于数据集加载策略我已经弄明白了，所以说实话可以先去载入数据集跑一跑看看结果了。</p>
<hr />
<p>今晚偷摸去五道口出勤 2pc 之后回来，说起来昨天因为有人扒防盗门晚勤，导致商场领导直接下令禁止晚勤，所以现在晚上真的只能打到十点，反倒是帮我自律了。</p>
<p>回来之后去了 C 楼继续写毕设，Pensieve 的迁移工作总之还是有点麻烦的，reward function 要自己补写一点，然后由于 Pensieve 是离散决策空间，导致有些地方需要自己做一点适配。适配的过程中最大的修改就是把 <code>PensieveEnvPark</code> 里的 <code>self._action_space</code> 从离散的改成了连续的，也就是从 <code>Discrete</code> 修改为了 <code>Box</code>。这样做的原因是整个代码框架都是基于连续决策空间的，所以为了最小化修改，我直接把决策空间改为连续，而在实际处理 network trace 或者 video chunk 之前会把连续决策空间采样向下取整到离散空间内。</p>
<p>不过这些都还好，主要有一个 bug 是 logger 炸了，简单而言 logger 里面有这样的一段代码：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>:</span></span><br><span class="line">    CURRENT = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ...</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span>(<span class="params">...</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line">    Logger.CURRENT = Logger(...)</span><br></pre></td></tr></table></figure>
<p>这段代码的语义并不难理解，就是在 <code>Logger</code> 类里面的静态成员中存储了当前要使用的 logger 的引用，这个引用的初始化是在 <code>configure</code> 函数中进行的，这个函数会在所有训练脚本的最开始就调用。然而这个在我跑实验的过程中却出现了问题，我把新加的脚本、环境等代码都放在了根目录下另外一个目录 <code>src</code> 里面，以与位于根目录下 <code>learning_to_adapt</code> 目录中的原先的实验脚本作区分，logger 的代码也位于 <code>learning_to_adapt</code> 目录下。结果，我在 <code>src</code> 目录下的实验脚本调用 <code>configure</code> 初始化 logger，在 <code>learning_to_adapt</code> 目录下的代码文件中访问 <code>logger.CURRENT</code> 的时候却只能获得 <code>None</code>，即使我在 <code>src</code> 目录下访问 logger 一切正常。我猜测是不同目录 import 同样的东西的时候，事实上 Python 创建了不同的引用。不过我现在也没有精力去找这种小问题的解答了，我直接合并了两个目录然后把实验挂了上去就准备睡觉了。</p>
<hr />
<p>最近很喜欢这句话：</p>
<ul>
<li>思ひつつ寝ればや人の見えつらむ、夢と知りせば覚めざらましを。</li>
</ul>
<p>这是出自小野小町的一句古日语和歌，翻译成现代日语和汉语的话：</p>
<ul>
<li>恋しい人のことを思いながら寝てしまったらあの人の夢を見たわ、夢とわかっていたなら覚めなかったろうに。</li>
<li>（王向远译）思君方入梦，若知相逢在梦境，但愿长眠不复醒。</li>
</ul>
<p>这句和歌也算是我学古日语的时候很早就遇到的一句例文，是在讲解过去助动词「き」的未然形「せ」可以与表示反事实假想的助动词「まし」构成表示假想的句式「〜せば〜まし」这一知识点的时候提到的。当然要说语法点的话，这里还有很多可以讲的，包括少见的单音节下二段动词「<code>@ 寝 ぬ</code>」，表示完了的助动词「つ」、表示现在推测的助动词「らむ」、表示否定的助动词「ざる」等等。</p>
<p>然而这句话确实也很有意境，如果知道我们只有可能在梦中相遇，那么即使不可能，我也愿意长眠不醒。现代日语中没有专门表达反事实假想的词语或句式，只能用通用的表达愿望的句式「〜だろう、〜たろう、〜でしょう、〜ましょう、〜ように」等等，这个与现实抗争的感觉就没出来。</p>
<p>不过我现在确实很累，确实希望长眠不醒了。</p>
<h1 id="section-36">2023.03.28</h1>
<p>又是一天八点睡下午四点起，今天实在是忍不下去了，把攒了一周的胡子刮干净，头发太长就随他去吧，就这样收拾了一下自己，到工位开始工作的时候已经是晚上六点。不过要我说，最近的精神状态非常怪异，明明身心都很劳累，但是似乎却有种奇妙的满足感和：</p>
<ul>
<li>この生活こそおれのほしいものって、いまこそおれは確実に生きていると感じている、疲れていても。</li>
</ul>
<p>这句话是前天大晚上熬夜的时候听到香椎老师的歌的时候突然想到然后写在草稿纸上的，草稿纸的另一半是潦草的神经网络设计图，倒也有种莫名的不调和感。</p>
<p>昨天跑下来 Pensieve，至少训练没崩盘，是一个正常的训练曲线，今天就是得调试一下 reward 函数让其与 baseline 做一个公平竞争，这样就能构成方案的可行性验证。</p>
<p>现在在尝试着把训练过程中的 reward 弄出来。总体来说，sampler 使用 Algorithm 2 采样数据的时候，事实上就已经在做测试了，就已经在和训练集同样的环境下（Pensieve 环境生成 trace 的逻辑一致）测试 MPC Controller 的性能了，因为其基本就是基本在循环下述过程：</p>
<ul>
<li>收集采样数据，对 dynamics 做 adaptation</li>
<li>adaptation 之后用 MPC Controller 做决策</li>
<li>用这个决策 step environment，获取新的环境状态，作为新的采样</li>
</ul>
<p>而在 Meta MLP Dynamics 里面做的训练集和验证机切分是用来算 loss 的，他有训练集 loss 和验证集 loss。</p>
<p>也就是说，实际上用来做验证集 reward 的，应该就是采样时返回的那些 reward 信号，现在我已经把这些信号接入到 logger 里面了。</p>
<p>然而做好这些之后挂了一下实验，发现验证集上 reward 能打到 50 上下，这显然太离谱了，因为即使 GrBAL 再怎么强，比 Pensieve 高出 400% 左右多少是不太对的。回到宿舍后思考了一下，觉得是验证集不可信，因为验证集毕竟和训练集来自同样的数据池，很有可能过拟合。所以迅速写了一个在另外的数据池上测试的脚本，挂了上去，顺便增加了一个把所有决策和环境信息输出出来的 logger。</p>
<p>最后看完 logger 的记录后，总算是明白了。MPC Controller 似乎是相当激进的，其特别喜欢拉高码率，即使在低带宽环境下。这就导致在带宽还可以的环境下就能拉满 QoE，然而由于数据集低带宽环境毕竟有限（得益于现在的网络基础设施优化），所以 rebuffer 并没有预想中那么多，rebuffer penalty 也就没有把 reward 拉到很低。然而如果从直观上来讲，虽然其 reward 达到了 50 左右，其经常会在低带宽下出现十几秒的卡顿，这显然是不可接受的行为，所以这也就是 average QoE 的评价缺陷了。</p>
<p>既然整体实验框架没啥问题我就打算一直跑着了，目前的话，reward 大概也是十几，至少达到了一般水平吧。这么说中期至少是有内容可以汇报的了，现在就差做一个 PPT 出来了，最后还是决定明天再做了，正好看一眼训练结果。然后一定要记住还要做一下 baseline log 的详细分析。</p>
<h1 id="section-37">2023.03.29</h1>
<p>中午稍微起早了点赶到工位开始做中期 PPT，在这之中还花了点时间查看了一下软工小组的工作进度，目前来看还都一切正常。</p>
<p>在做 PPT 的过程中和黄老师交流了一下目前的毕设，大家似乎都比较震惊于 Pensieve 真的打不过 model based 方法。不过基本上看了一眼 log 之后都反应过来 Pensieve 决策保守了，而 GrBAL 实在是太激进了。</p>
<p>中期整体上没有什么大问题，黄老师过了一下我的 PPT 后也觉得没有大问题，提了一下多加几张图的建议，然后给我推荐了 LUMOS 5G dataset 以及一位名为 Qian Feng 的 scholar，大概也是做环境切换相关的，可以后半段尝试去学习一下这些材料。</p>
<hr />
<p>中期答辩基本上平稳地过去了，把实验结果汇报了之后，三位评审老师也没有什么很尖锐的问题，只有一位老师问了点简单的问题就放我走了。然而现在的问题就在于，我目前做出来的结果到底可不可信，因为确实感觉和大家长久以来的经验有不相符的地方，至少目前有几个值得验证的疑点：</p>
<ul>
<li>baseline 过弱，训练错误等问题</li>
<li>数据集设计有问题，应当多随机生成几次重复实验</li>
<li>GrBAL 实验成果不一定稳定，dynamics model 的预测效果也应当重复确认</li>
</ul>
<p>至少在进行中期答辩 PPT 上所写的未来研究之前，我还是打算把这些问题给思考清楚。</p>
<p>然后就是其他的一些杂事了，现在安排如下：</p>
<ul>
<li>周四组会、软工 Sprint1 组会，晚上出勤</li>
<li>周五 LVS 会议，预计早起前往</li>
<li>周六 LVS 会议，预计晚归</li>
<li>周日基础技能培训线下授课</li>
<li>有 DDL 的任务
<ul>
<li>提出不再负责微信小程序开发，转 Rust 后台开发</li>
<li>周六晚前完成基础技能培训课件供审核</li>
</ul></li>
</ul>
<p>最近确实是没有什么很重要的任务了，确实可以计划摆烂了，毕竟最终答辩差不多得到六月，中间两个月可以自由摆烂。目前日语中高级教程还想自学，日语自学笔记也还有很多想写的，DRL 的任务也想好好做，也想出勤、打雀、旅游，总之就是什么都想做，毕竟没有什么硬性要求了。</p>
<h1 id="section-38">2023.03.30</h1>
<p>周四，安排中有相当多的会议，首先是下午的组会，然后是软工 Sprint1 的验收会，然后是实习那边要有个需求对接会。一起床我就在赶场子，三场会总算是赶完了。</p>
<p>然后最后一场会开完之后，收到了坐标想要出勤的申请，于是立刻放下活计跑去上地先吃萨莉亚后出勤。然而周四晚上的上地也是一堆人，完全没打到几把就只能悻悻离场。</p>
<p>晚上就简单摸鱼，然后就要早睡早起去 LVS 了。周四真的是一点值得记录的事情都没有呢。</p>
<h1 id="section-39">2023.03.31</h1>
<p>早起去 LVS，路上还遇到了前来访华的马来西亚总理的车队，警察暂时管制了一个路口的交通，让我小等了几分钟。</p>
<p>LVS 说实话感觉并没有想象中的有趣，上午的开场致辞很有意思，然而紧接着后面的，就是一个很像民科发言一般的 ChatGPT 威胁论演讲，其中不乏人工智能已经逼近人类智能云云。而第三场是一位浙大教授的演讲，其提出了可以在传输视频的时候用语义编码代替字节编码，也就是不再逐帧逐字节编码视频内容，而是直接描述视频内容以编码，这个观点倒是第一次听，还挺有意思的。</p>
<p>之后就没什么有趣的了，午饭期待值很高但是最终也只能说无功无过，和学长说了打算提前跑之后，就溜到了四道口的机厅去出勤了。四道口机厅有 WiFi、有插座、有自动贩卖机而且人还不多，简直是出勤圣地，然而离学校确实是太远了。</p>
<h1 id="section-40">2023.04.01</h1>
<p>按照计划是要去 LVS 的，但是显然是摆烂了，于是就打算在宿舍里好好把明天基础技能培训的课件给做了。</p>
<p>结果是摆得真的很烂，一整天啥都没做出来，倒是由于找到了 Dynamix 的 Malody 皮肤于是又拾起了 4k，打了一整天。晚上实习那边还有要修的东西，理论上是要一并修好的，结果晚上是一个都没做完。于是不得不通宵接着做，到六点钟终于把课件做完了。</p>
<h1 id="section-41">2023.04.02</h1>
<p>基础技能培训看起来是真的组织上出现了一些问题，一共就来了四位同学，于是就变成了我的小班课，随便讲讲就过了。然而在此之后比较麻烦，因为实习那边一直在催，但我依然顶着压力先去了五道口。</p>
<p>晚上简单开个会之后开始修东西，但没有想到工作时长超出了预料，工作效率也低到不敢想象，一直做到早上六点都没做完，于是只能睡觉了。</p>
<h1 id="section-42">2023.04.03</h1>
<p>周一，还是得赶快把实习那边的活清理掉，于是一下午把东西做完之后，立刻赶往上地出勤。</p>
<p>其实本来是想和舍友去吃巴依老爷的，但是没想到我一直做到晚饭点都没做完，所以没办法只能不去了。</p>
<p>今天出勤收获颇丰，不仅成功上了 7k4 底分，还杀掉了几个心心念念的 13 和 13+。然而现在比较好玩的是，我整整有六七个 100.1% 以下鸟的 13+，按照我的强迫症，事实上我很想把这些都再推进一下，但是实在是没有实力去往上打了。</p>
<h1 id="section-43">2023.04.04</h1>
<p>终于按照自己的想法摸鱼了一整天，首先是睡到自然醒，然后打理了一下自己，刮胡子、剪头，收拾了一下宿舍，然后去采购了一圈，吃了顿校内比较好的食堂就去了上地出勤。出勤完了回来游泳，之后再去吃了点小夜宵。整体就是讲究一个随心所欲。</p>
<p>然而实习那边还在 bug report，我是真的完全不想搭理了。目前计划就是一切 bug report 都留到周四完成，其余时间完全摆烂，或者愿意做的话就做做。</p>
<p>明天是 V+ 群组 K，还是正常摸一天鱼，过一天正常的清明节假期。</p>
<h1 id="section-44">2023.04.05</h1>
<p>组 K 比较混乱，原因大概是两个。一是这次没有中日分场，而群友确实很少有中日 V+ 双修的，导致两边都没有尽兴，二是由于清明节纯 K 一点房间都没有，四点半结束之后无法和往常一样续时，所以只能草草结束。草草结束后，群友对各自的去向显然是完全没有安排的，原先的安排是续时到六点半到七点左右，然后部分群友直接去某个在东城区举办的 livehouse，剩余的则回校。然而由于无法续时，所以中间出现了两三个小时的空窗期。</p>
<p>我当时在音游地图上找了一下，似乎国贸附近就有一家新机厅，于是我就直接前往了。剩余的群友则部分回校，部分在国贸附近另找游乐场所。</p>
<p>新机厅的好处就在于机子是全新的，手感非常好。并且机厅周边就有饭店，有自动售货机，有充电宝租借桩，旁边就直接能进角门东地铁站，基础设施相当完善，整体来看，简直是理想的机厅。另外，由于是新机厅，所以几乎没有什么人，从晚上八点开始，就只有我一个人在打了。</p>
<p>今天晚上解决了不少 13+，包括秘密信徒和 GRÄNDIR 之类的，然后手痒试了一下齿轮，没想到打到了 SS，瞬间兴趣就上来了。</p>
<h1 id="section-45">2023.04.06</h1>
<p>周四例行三场会，组会、软工助教会和实习会。这次软工助教会整体有点奇妙，因为投屏我不太会用导致大家的 PPT 都播放不出来。</p>
<p>草草开完会之后就去了五道口，今天就没有推很多的分，只不过狂练了一波齿轮上了 99.5，但是现在似乎还是有点欠缺体力所以还是暂且不打为好。</p>
<p>每周四都是实在没什么可以记录的，都是开会，开会的内容也实在不是很想写。</p>
<h1 id="section-46">2023.04.07</h1>
<p>周五，因为完全没有安排所以直接就早起出勤了。早上到达上地的时候全都是我认识的熟人，基本上想单刷和他们说一声都可以。下午出现了一段明显的空窗期，整个机厅就我一个人，刷了大概三个小时左右，期间鸟加了捕物帐，还恰好录上了手元。</p>
<p>然而靠近傍晚的七八点钟的时候人突然就多起来了，最后在八点达到了 13 人的规模，这完全打不了了，所以赶快回宿舍。</p>
<p>回来之后把数据库给写完，听闻舍友确实打算前往无锡，于是也就开始规划下一周南下的旅程。</p>
<h1 id="section-47">2023.04.08</h1>
<p>南下基本都确定好了，所以就基本上是在做准备，比如洗洗衣服之类的。另外，把票订了一下，酒店定好。目前计划是周日早起去无锡，在无锡呆一天半，周二早前往南京，在南京玩到周三晚回北京。在无锡干什么暂且没有想好，但是在南京已经约了一小波人打算把高中化学竞赛的时候走过的路再走走。</p>
<p>现在想到那段时光还是有点神伤，一个人在外，虽然现在看来完全不算什么远门，但在当时高中生的视角，确乎有着比较重要的意义。</p>
<p>然后这些事情忙完，也都是晚上了，赶快开始做实习那边的事情，尽快把麻烦事解决掉比较好。</p>
<p>晚上开始熬夜做 DRL 的作业，最后在凌晨五点差不多顺利做完，然而由于定的去无锡的火车是六点半发车，于是赶急赶忙收拾东西立刻出发。</p>
<h1 id="section-48">2023.04.09</h1>
<p>一整天都在赶路，先赶到北京南站抢在截止前两分钟成功上车，上车之后立刻开始爆睡，睡到无锡东站之后又开始漫长的地铁。中途发现实在是太饿了，于是在三阳广场下来吃了一顿松鹤楼垫肚子，继续赶路，下午一点半两点左右到了住处，一躺，又是一觉睡到下午五点多准备吃晚饭了。</p>
<p>一整天睡了吃吃了睡，还累的要死，果然赶路还是难受。</p>
<p>晚上去滨湖万达转了一圈，和舍友找了很长时间到底去吃什么，结果找来找去万达里面除了那种炸串、火锅这些量产式的店面之外也就没啥了，最后只能随便挑了个名义上说江浙菜的菜馆去吃了。然而实际上，这家店确实是不好吃，红烧肉很柴，大煮干丝汤底没味道，总之就是完全不值。</p>
<p>吃完晚饭，舍友去超算中心开会去了，我就在万达机厅稍微出勤了一会，不得不说滨湖万达的机子真的是烂，手感极差，屏幕很粘而且吃星星，硬打了一个 AP 病女之后就敢赶快回去睡觉了。</p>
<h1 id="section-49">2023.04.10</h1>
<p>早上舍友早早就出门去中心干活了，我一路睡到中午自然醒，去楼下找了个面馆吃了午饭之后就开始无锡闲逛。</p>
<p>先是趁人少去出勤了一小会，中途由于实习那边实在是有点事情，加上人越来越多，于是就找了个万达里面的咖啡馆坐下来把事情清理了一下。其实我倒是挺感叹的，无锡滨湖区就这么一台机子，机子还这么烂，滨湖区的这些玩家就得挤着用这台破机子上分，是真的有点感慨的意味了。</p>
<p>实习那边的事情清理掉之后，决定去太湖看看，于是骑上车去了鼋头渚的方向，不得不说由于空气很好、很透亮，太湖周边的景色是真的纯净。同时期，我的朋友圈里全都是在发北京沙尘暴来袭的事情，只能说，江南还就是这一点好得多。</p>
<p>晚上和舍友以及 20 去了米桃去吃无锡菜，这家本来是想前一天就去吃的，但是三阳广场那边的那一家在中午的时候排队太夸张了，只能作废。这家菜馆就是那种较为精致的淮扬菜和当地菜，松鼠桂鱼、响油鳝糊这种菜也能做出来，而且确实做得不错。吃完之后沿着蠡湖转了转，舍友和 20 由于赶着回去开组会，于是也没多久就得走了。</p>
<p>最后依然无所事事的我又去滨湖万达出勤了，不过这次没人，把之前买的套餐游戏币打光之后就回宾馆了。晚上和舍友打了一会牌，也就收拾东西准备第二天去南京了。</p>
<h1 id="section-50">2023.04.11</h1>
<p>早上赶路去南京，大概十二点左右到达宾馆，收拾好东西，就去遇游客他们一行人。中午吃了游客推荐的泰式大排档，确实可以，但是点的有点多，最后没吃完。</p>
<p>下午就去南师大和南大了，主要是打算去找找 2017、2018 年去过的那些地方。先是南师大，简单找了找就很快找到了 18 年考完化学复赛后和同学蹲在路边骂出题人的马路牙子，找到了 18 年考完国初后，杨锦辉教授把我领去的仙林宾馆。最后本来想去找找当时的考场的（学明楼 501），但没有想到到这个房间已经改造成多媒体室了，确实有点遗憾。</p>
<p>在此以外，游客带着我们转了一圈南师大，但确实没有留下很多特别印象深刻的东西。</p>
<p>然后就是南大了，虽然过了五年，南大的基本结构我基本还是清楚的。首先就找到了省选的实验考场、考完实验后吃的食堂、入住省选宿舍后去的小卖部。从这些建筑往北，就找到了化学楼，穿过化学楼上坡就到了 17 年培训时住的 23 栋宿舍。然而令人感慨的是，原先 23 栋宿舍楼向东望，能看到一座山，山脚到山顶有一条登山道。这条登山道应该是承载了很多回忆的，包括当时凌晨刷完题在阳台上眺望、18 年考物理实验的时候带着同学从上面溜车下来、省选结构化学因为动脉破裂失利后也来到这里散心。这条登山道现在已经拆除，就连那座山也被削平，建起了人工智能院。</p>
<p>在向后，我决定重走 18 年考物理实验的时候带着同学上山的那条路。首先是从宿舍楼后身绕上一条步道，走到顶就是气象台，然后溜车下来就可以找到去天文台的路。五年前，上天文台的路旁边都是工地和堆满的黄沙，现在也都建好铺上了绿化。上到山顶，天文台还是一如既往不让进，于是也就作罢，下山吃饭。</p>
<p>吃完饭继续去新街口出勤，这次出勤倒是收获颇丰，鸟加了很多东西。最后到了半夜十二点，机厅关门，打车回宾馆睡大觉。</p>
<h1 id="section-51">2023.04.12</h1>
<p>早起去了朗玩，这里街机音游的品类很全、数量很多，光 maimai 就有五台，据说先前有六台。刚到的时候只有三个人，于是我就随便打打，但是越到下午，人越来越多，最后目测到达了二十人左右的规模，加上也快到火车发车时间了，所以也就不打了，上车回北京。</p>
<p>车上稍微做了点实习那边的事情，回到宿舍后也没干什么，就直接睡觉了。</p>
<h1 id="section-52">2023.04.13</h1>
<p>周四依然是相当忙碌的，首先是组会然后是软工的大例会。</p>
<p>然而这次让我比较感到棘手的是，我这边的四个组 Sprint2 居然都没有调通 WebSocket，作为即时通讯系统项目，快要中期的时候没有调通最基本的通信协议，这确实有点恐怖了。然而我作为助教也只能去提醒和催促，也不太能真上手帮他们做什么。</p>
<p>晚上出门打算吃麦当劳的时候，路上偶遇夏老板一行人，于是就加入了他们的疯狂星期四团建，吃完后就去出勤了。</p>
<p>实在是太没有意思的周四，实在是没有什么可以记录的。</p>
<h1 id="section-53">2023.04.14</h1>
<p>准备开始上手清理一些事情了，而且也已经定下了一周内不出勤的约定。最近首先是把实习那边最简单的 bug 给弄掉，然后就是 DRL 期中和毕设后期验证的一些事情，看起来不算特别多，但总之还是得做。</p>
<p>结果今天依然是没做到什么事情，反倒是莫名其妙摸鱼摸了很长时间，和坐标去吃酱骨、水群、和实验室的学长们吃西瓜聊天。直到最后快要回宿舍的时候稍微清理了一下短信服务那边的事情，然后跑通了 WireGuard 连上了远程主机，除此以外也没做到什么。</p>
<p>晚上回去之后 Aster 说要教 Fuyuki 微积分，于是又去了 308，本来想学习的，最后是闲聊了一晚上，又是什么也没干。</p>
<h1 id="section-54">2023.04.15</h1>
<p>昨天送审的短信模板完全没有过审，原因是没有提供可以访问的公司主页。这非常迷惑，为什么我要做短信发送服务一定需要一个公司主页。不过既然他这么说了，也只能照做，下午紧急静态部署了一个并没有什么用并且还很丑的 HTML 网页，把小程序码挂在上面，假装这是公司主页送审了。</p>
<p>然而今天依然状态并不是那么好，结果是稍微做了点无关紧要的事情之后就去五道口出勤了。周六晚似乎机厅店长也悄然违反了十点钟断电的规章，我一路打到了十点半左右，当时还有游客在旁边开了新的一局游戏，旁边的跳舞机甚至还有人在玩。</p>
<p>晚上自然也没有什么精神了，随便干了点活就睡觉了，因为微博上传闻九点钟 CP29 开票，这个显然是得快速起床抢票的。</p>
<h1 id="section-55">2023.04.16</h1>
<p>今天先起来抢票，结果九点钟开票是假消息，根本没有开票。然而这次我突然有了点研究 CPP 这个抢票网站的兴致，首先是拿到 Cookie，然后在网络界面找到了获取当前票务信息的接口。然而有一点比较麻烦，就是从票务信息跳转到支付界面的时候似乎会生成一个和时间有关的 token，这个 token 的生成逻辑我一直没找到，显然这个网站的 JS 也是经过压缩和混淆的，完全没法阅读和复现。最后也因为当时只睡了不到四五个小时，赶快滚上床接着睡了。</p>
<p>最后大概在下午两点起床，稍微收拾了一下自己出发去北大，稍微做了点事情然后和 xjj 他们吃了一顿勺园烤鱼。不得不说勺园烤鱼确实很香，虽然我觉得他那里的铁板鸡腿肉比烤鱼好吃。</p>
<p>饭后考虑到事情还是得做，于是迅速赶回工位开始干活。</p>
<p>结果这一干活没收住，一路做到了十二点半，想着回去也只能冷水澡了，于是就接着在工位上干下去了。中途实在有点饿，在实验室里找到了泡面和苏打饼干，不得不说这两样东西实在是太顶饱了。最后大约是做到了七点钟左右，实在是撑不下去了撤退回寝睡觉。</p>
<h1 id="section-56">2023.04.17</h1>
<p>周一，依然是接着来工位做实习的事情，然而没有做出任何有实质的进展，确实有点难绷。</p>
<p>说实话我感觉这个实习最大的问题就是让我时间安排非常难受，我现在很难说能够抽出一整块时间做我自己的事情，往往时不时就有新的需求，然后还不得不周末加班或者在我本来就已经声明过无法工作的周一二三工作。其实我已经很多次很想骂人了，我向来是认为催人是最不合理的事情之一，点到为止就行，我不想被别人 push，我也不喜欢 push 别人。然而这个实习的学长，虽然我确实理解他的难处，确实订单量下滑对现金流是很大的威胁，但是一天到晚在群里催促，我受不住，我不是看不见，我只是很单纯的没时间做。我在进入这个团队的时候就说了我的主业依然是读博，而且我有助教的工作，这些是我的主要任务，然而现在呢，我不得不抽出甚至超过半数的时间来做他认为可能有用的功能，而且这种左一枪右一炮的，毫无规划或者远景的工作模式，我非常不好说。我至今不是特别明白他们想把管理后台做成什么样子，我甚至不能从一个整体上把握他们的需求，只能从他们不断加入的需求中自行猜测。然而这样只会导致我做出来的很有可能不符合他们想的，然后还要返工。</p>
<p>我实在是难以接受目前这种工作模式，而且学期过半了，原先说好的二月底就能轻松点，也没有兑现。虽然确实给了物质上的补偿，然而我过得并不舒服。</p>
<h1 id="section-57">2023.04.18</h1>
<p>周二，做了一天实习的事情，还在生产环境上搞出来了锅，实在是不想记录这一天的内容了，毫无意义，毫无收获。</p>
<h1 id="section-58">2023.04.19</h1>
<p>实习那边简单告一段落了，所以直接去出勤了，打上了 7k5 底分，考虑到下一个一百分目标离我可能还有一段距离，感觉可以近期以享受游戏为目标玩了，可以一段时间不用去当分奴天天只考虑上分了。</p>
<p>晚上和 ayf 聊了不少，大概订立了我一定要把实习和我的本职工作区分开的目标，目前计划把实习约束在周四周五之内解决，至少周一二三坚决不能再干涉这边的事情了，不然我根本形成不了整块的用来认真思考的时间。这种碎片化的工作最令人恼火的是会削弱一个人沉思的能力，很多想法或者比较体系化的工作坚决不是每天随便抽一个小时就能做出来的，都是一整段时间沉浸在其中慢慢思考出来的。所以如果再被经常性打扰，说实话我不是很能接受。</p>
<h1 id="section-59">2023.04.20</h1>
<p>导师又一次因为其他的事情咕咕咕了组会，组会又一次变成了学长主持，于是混过了组会。</p>
<p>开完会之后和实习那边声明了自己的需求，从今天开始，坚决作出区分，不能再这样两边混杂下去了。我现在特别想去思考我的毕设，想去做 DRL 的课程项目，想要接着写我的日语文档，这些事情坚决不能被碎片化的工作干扰。</p>
<p>组会之后就是软工 Sprint3 小例会，这次简单看了一下大部分组已经能跑通 WebSocket 相关了，但是似乎有一组发现了 SECoder 容器的一些奇怪表现。具体而言就是似乎一个空容器也能够建立起 WebSocket 链接，这一点显然是超越想象的。</p>
<p>这一切都折腾好了就是回来继续洗实习的小程序代码，不得不说外包写的代码实在是太令人震撼了，我甚至不能用简单的语句概括到底有些什么问题，最后基本等于帮他们重写了一遍。</p>
<p>晚上简单交代了这周的开发任务之后就结束了，任务量不太小，但也还算可以。</p>
<h1 id="section-60">2023.04.21</h1>
<p>周五本来就预定好了好好摸鱼，首先是下午去了雀庄，这个时候我已经发现我很久没打雀导致手相当生，现在就是很担心明天的常规赛。</p>
<p>之后六点钟雀庄结束之后，立刻打开 CPP 抢 CP29 的门票，还好的就是手速网速都在线，迅速抢到了两天的门票。在回去的路上，我想了一下决定不直接回校，乘上地铁去了奥林匹克公园，找了个机厅简单打了一下今天更新的新歌。</p>
<p>延误列车谱面只能说还可以，狗子写谱水平在线但是和我对这首歌的理解有所错位。之后就是人人都说简单的 13+ 春岚，然而我打了两遍都没打明白，鸟都没有。其他的新歌就是一首遥控器一首拂晓抵达，谱面都比较一般，除了遥控器的错位星星打起来很爽之外其他没有什么印象。</p>
<p>新奥的机厅本来只有六个人的，结果打了 3pc 之后突然来了七八个人，于是我只能赶快撤退，找了个烧肉拌饭吃完饭，但是没想到一顿一百块还没吃饱。</p>
<p>这期间我注意到我似乎严重超支了，即使我有 2600 的助教工资和实习那边发下来的 4000 现金，这个月我依然超支近 3000，这意味着我这个月支出近小一万。虽然这个支出包括了我去了一周无锡和南京，提前买了五一期间所有交通票和广州的酒店，但是这些加起来可能也就三四千，我依然在其他场合下消费掉了五六千。虽然这也和我在吃饭和打游戏上没省钱有关系。</p>
<p>还是决定稍微省省钱，这也太奢侈了，虽然确实四月过得实在是有点享受了，自从毕设中期结束之后就在摸鱼。</p>
<p>晚上决定稍微运转一下昌平线，于是从奥森直接北上到朱辛庄终点站，然后沿着昌平线南下到西二旗，再回来。等到我到达五道口的时候，大概是十点，于是我又无聊了，去了五道口机厅打了 2pc。</p>
<p>从机厅回来后去超市简单买了点生活用品后回来打德州扑克。结果就是整个一整天，啥事没干，倒是什么什么基本都玩了个遍。</p>
<h1 id="section-61">2023.04.22</h1>
<p>今天睡了个爽，一路睡到了三点半，然后点了个外卖到 FIT 楼开始工作。</p>
<p>基本上就是做了一整天的实习，实在是没有什么值得记录的事情了。中途去打了雀魂的常规赛，吃了一把三一把一，不得不说这场比赛打得酣畅，很久没有这么投入地打一场牌，而且运气还相当照顾，既在摸绝张 dora 的时候感受到了气运，也同时在迂回防守的时候感受到了自己的冷静。赛后简单做了点复盘，整体没有什么大问题，但还是有两局面对立直的攻守判断出现了偏差。</p>
<p>此外，今天洗完了实习那边外包的代码之后，和实习的学长提出了就此收手的请求，希望这次能够切换到我希望的那种，实验室为中心，爱好也能并行的理想中的生活模式。</p>
<h1 id="section-62">2023.04.23</h1>
<p>按照道理，应该今天要做数据库的 Lab3，然而实际上太想摸鱼了，于是接着去写日语自学手册去了。这次突然想改动的原因是我感觉意志形这个名词显得相当不合适，现代日语中所谓的意志形实际上是未然形和助词接续之后的音便。那么如果接受意志形的说法就会遇到问题，就是在自学手册里我把连用形接续特定助词发生的音便处理为了第一第二连用形，而未然形音便却被处理为了两种活用，这是有矛盾的。所以最终我接受了第一第二未然形的称谓。</p>
<p>修完文档之后去参加第九次 V+ Next，这次 Ne 老师贴心地把大家的小作文印成了明信片，确实很贴心。大家最后也并没有严格遵守猜歌的形式，最后也就变成了音乐茶话会的类型，听歌聊天然后在房间的白板上画一些梗图，我就画了个咖喱乌冬，意外成为了全场最佳。</p>
<p>回来之后就是摸鱼打牌，反正数据库决定迟交了那就不管了。</p>
<h1 id="section-63">2023.04.24</h1>
<p>下午来实验室参加项目讨论会，前面讨论阿里的合作项目的时候，讲了一下如何优化直播传输，包括目前大多都在做的使用 RL 做传输策略优化，包括还有少数人在做并且更困难的传输层协议优化和 CDN 调度。</p>
<p>之后还是转向到目前快手的合作项目开题，讨论了一下如何将大模型蹭上 ABR 问题，其中重要一点就是如何将时序预测生成大模型应用到 ABR 问题上。首先考虑到，因为目前的生成式模型如果用于做 ABR 码率决策，很有可能打不过经典控制论，毕竟这不是他的强项。所以如果要蹭，基本上只能将生成式大模型用到 ABR 问题的一个序列预测子问题上——网络带宽预测。</p>
<p>贾老师调研了 Transformer 应用在带宽预测问题的文章，得出结论是 Transformer 并不足够强，甚至打不过线性层。然而现在用 Transformer 做带宽预测基本上每一个带宽测速点对应一个 token，这并不合理，因为单独的一个网络带宽点并不构成一个语义单元。所以 AAAI 2023 的一篇工作将 64 个带宽点打包成 patch 作为一个 token 传入，获得了一定程度的提升。这可能确实说明了打包后的带宽点构成了语义单元。</p>
<p>之后大概开始讨论 prompt 了。大概就是在想如果能把网络建模成一个 prompt 相关的问题，就可以用现在的大模型成果。然而后面的讨论我感觉过分天马行空了，所以暂且记录不下来什么问题。可以看出来导师似乎对大模型有些想法，然而我们的研究领域实在是一下子想不出什么可以切合的地方。</p>
<hr />
<p>晚上逛群的时候突然注意到有人低价出十周年的 Aime 卡，于是立刻全款拿下去五道口提货，顺手打了 1pc 之后赶快回工位做数据库。但是没想到数据库实在是有点麻烦，结果是做到十二点回宿舍都没做完，还错失了洗澡的机会。</p>
<p>回来之后先打牌，打了两个半小时之后修完了数据库，顺手把 Lab4 做掉之后就开始复习 DRL 了，希望能够复习完。</p>
<h1 id="section-64">2023.04.25</h1>
<p>今天差不多全是会，首先是中午的软工座谈会，大概就是老师们召集同学们一起讨论对课程和课程作业的看法。这次会大概是没有听到什么很有意思的见解的，主要还是解答同学们关于软工课程改革的一些疑问吧。</p>
<p>下午被 hgr 拉过去谈了一下有关 AI 协会的一些事情，大概这个协会接受了来自私募量化的支持，金主能够提供八张 A100 的算力支持。说实话，这个算力已经比一部分实验室都要充足了。但是另一方面，接受金主的支持就意味着有横向的硬性要求，可能打算协会实际运行的时候要可靠的成员去完成这些横向项目，保证整体的资金稳定。</p>
<p>晚上则被达哥拉去聊了一下有关课程改革的一些事情，他打算为研究生开设一门讲解如何当助教的课程，目前正在规划。然而由于当时我已经很累了，所以也就没有怎么和他做交流，只是保持了一个积极的态度。</p>
<p>晚上还是按照规划复习 DRL，然而这点时间已经完全复习不完了，所以随便看看就睡觉了。</p>
<h1 id="section-65">2023.04.26</h1>
<p>首先先去考了 DRL 的期中，期中题感觉一般，但是计算量很大，完全算不完，不过由于期中只占比 10%，而且大四只要不挂科就行，大概就这样随便考考算了。有道题，我完全不想做了，于是在卷子上写了这句话：</p>
<ul>
<li>I will just give up on this as I am a senior student.</li>
</ul>
<p>希望老师不会介意。</p>
<p>考完之后 fze 说想要体验一下 maimai，于是就去了五道口，教他打了 1pc 之后他就走了，我则接着出勤。这次出勤也是收获颇丰，鸟了 Freedom dive 和齿轮，这次明显感到自己的能力和体力都在上升。</p>
<p>晚上回来就该准备收拾东西明天南下了，希望明天能够顺利混过组会赶上火车。</p>
<p>不过说实话，最近已经在打算重启毕设了，这次在外，也会时不时地完成一些任务，这种在悠闲中做自己想做的事情的感觉，还是挺有意思的。</p>
<h1 id="section-66">2023.04.27</h1>
<p>今天就现在准备出发了，不过在此之前先过一下组会。</p>
<p>今天组会上我觉得很有意思的是贾老师说的一句话：“大模型终究只是给出一个很<strong>像</strong>的答案，而不是一个很<strong>是</strong>的答案”。这句话是用来回应为什么目前的 LLM 无法应用到带宽预测任务上的。虽然这句话表达的意思已经快要形成共识了，但是感觉莫名其妙今天很赞同这句话。感觉导师确实很想搭上大模型这班车，但是确实，我们的研究领域实在是有点难蹭上这个热点。</p>
<p>然后就是思考我毕业设计下一步的工作规划，现在简单列个表放在这里：</p>
<ul>
<li>数据集相关研究
<ul>
<li>考虑连续低带宽、带宽平均变化值等各种统计特征区分环境</li>
<li>讨论 LUMOS 5G 数据集等其他数据集</li>
</ul></li>
<li>当前结果验证
<ul>
<li>重复生成数据集并验证结论（GrBAL 在切换数据集上优于 Pensieve，Pensieve 在切换数据集上不优于无切换数据集）</li>
<li>使用其他数据集进一步验证 GrBAL 的性能</li>
</ul></li>
<li>GrBAL 相关的深入
<ul>
<li>讨论 dynamics model 给出的预测是否符合实际带宽等</li>
<li>缩小模型规模观察收敛速度</li>
</ul></li>
<li>Pensieve baseline 相关的深入
<ul>
<li>讨论 Pensieve 表现较差的原因（直接和贾老师、黄老师讨论）</li>
<li>尽量调优 Pensieve 观察其性能极限</li>
</ul></li>
<li>一些文献调研
<ul>
<li>考虑阅读一些环境切换相关的论文，比如 Feng Qian 的论文</li>
</ul></li>
<li>一个可能的新方向
<ul>
<li>李老师今天组会上提到的动态 Oboe 方法，将中心 model buffer 迁移到本地尝试</li>
</ul></li>
</ul>
<p>现在我比较困惑的一点是，似乎 GrBAL 的前期决策似乎很激进，导致前期 rebuffer 就很大。另外今天李老师讲了一篇比较有意思的文章，大概的意思就是有一个中心化的 model buffer，多个边缘计算节点保持和这个 buffer 交互，在检测到环境变化的时候向 buffer 请求新的模型。这基本上就是 Oboe 的思想，也就是有一个门控网络检测环境变化，然后调整主算法的参数。然而这篇文章的创新就是，Oboe 可选的参数是有限、静态的，而这个工作将这个 buffer 改成动态的，这样在一定程度上能形成提升，或者至少能够解决一些先前没有见过的环境切换。</p>
<p>参考论文 - RECL: Responsive Resource-Efficient Continuous Learning for Video Analytics。</p>
<h1 id="section-67">2023.04.28</h1>
<p>到达南京的第一天，首先是睡了个好觉，然后中午去仙林接我妹妹放五一假，在金鹰吃了顿烤肉之后下午就去新街口玩去了。新街口说实话从小玩到大，确实没有什么特别有意思的东西了，于是又是风云再起机厅出勤，没有想到的是在 2pc 之内鸟加了待宵夜虫，爽吃 7 分。</p>
<p>晚上的电影票一直是买好的，所以直接就去看了。电影大概是讲国产战斗机试飞员的一些故事，比如说故意飞行极端机况来收集边缘数据之类，不过说实话，确实拍的还算可以，虽然感觉有点怪怪的违和感，但整体还是比较能让人代入的。</p>
<p>但说实话今天整体在做的事情是在肝星穹铁道，世界观比较合我胃口，可以放置的回合制游戏也比较休闲，而且整体节奏也很好，确实算是我喜欢的米家游戏。这几天几乎空闲下来就在玩，确实有意思，虽然我战斗配队非常拉，打怪非常吃力，但还是好玩。</p>
<h1 id="section-68">2023.04.29</h1>
<p>按照道理讲现在应该稍微做一下实习那边的事情了，实际情况是打了一整天的星穹铁道。</p>
<p>晚上是薛之谦的演唱会，我不听华语歌，倒也听过三四成。演唱会气氛很好，周边设施（小卖部、公共交通、秩序维护人员等）都很完备，可以说是如果真的是粉丝的话就完美了。</p>
<p>回来之后继续推星穹铁道主线，然后给米哈游稍微送了一点钱抽出了板鸭，不得不说这个游戏确实做得好，能让我掏钱的游戏并不多。</p>
<h1 id="section-69">2023.04.30</h1>
<p>没想到这就是四月的最后一天了，今天最好能够把实习那边的事情全都清理掉，然后就要收拾行李准备去上海了，主要还是得把衣服洗好晾干，这一点比较麻烦。</p>
<p>结果是非常顺畅地啥都没做，全用来推星穹铁道了。晚上稍微辅导了一下我妹的 Python，果然现在什么专业都得学个什么编程，然而对他们非师范来说似乎也并没有什么用。</p>
<h1 id="section-70">2023.05.01</h1>
<p>早上自然是按照规划去南京站，捉到 byq 之后上车捉到了仁弟，三人就这样前往上海。车上简单推动了一下星穹铁道的仙舟第二章主线，然而由于手机电量实在有限所以也并没有什么大的进展。其余时间基本上都是三个人在闲聊到底到达上海之后怎么安排。</p>
<p>到站之后，收到了 Numen 发来的消息，他们似乎正在前往南京东路去逛二次元一条街，而我们到达上海站的时候差不多离得很近。原定计划是我们下午在酒店打牌，但是收到了这样的邀请自然就去和他们汇合了。五一第一天的上海到处都是人，火车站、地铁站完完全全堵满了。我们和 Numen 他们汇合之后前往外文书店。外文书店顾名思义是卖其他语言书籍的地方，然而我们显然是为了一些日文书籍而来。日文书籍全都位于四层，而显而易见的，四楼全都是人。</p>
<p>逛完外文书店之后去吃了饭，之后就是打卡了雾雨咖啡店，然后去了迪美商城。迪美商城就有一些夸张了，由于设置有大量的摊位，所以里面几乎是水泄不通，挪动一步都很困难。然而迪美的好处就在于其有一家风云再起，我手痒了于是想去打，然而实际上没带耳机没带手套，于是只能娱乐性质地随便摸了摸。</p>
<p>晚上去了已经预定好的纯 K，唱歌没什么值得记录的。之后就是回去收拾一下睡觉了，准备为第二天的 CP29 Day1 排队攒足精力。</p>
<h1 id="section-71">2023.05.02</h1>
<p>CP29 的第一天，我们大概是八点钟左右到达国家会展中心的北门，比较凑巧的是，我们下车的地方就是当时的队尾，所以相比较于 Numen 他们从南门下车还得先找队尾，我们已经领先一步了。</p>
<p>当天的队伍实在是太抽象了，我们刚到的时候队伍只是绕场一周，等到快中午的时候，队伍已经是绕场三周近十公里。</p>
<p>事实上，当天 CP29 的主办方根本没有想到会有这么多人，他们仅仅在一楼一个场馆设置了一个缓冲区，然而可想而知的是，这么点缓冲区完全装不下近四五十万人，于是队伍缓冲区溢出到场馆外马路上。虽然大家素质在线基本都是列队前进，然而由于缺乏引导，队伍实际上根本不知道往哪里排，当天的安保人手也完全没有空余能力来处理溢出的人流。结果就是好多处出现了积流，也就是出现了千人左右因不知道何处入场而淤积在死角的状况。</p>
<p>最终，过多的人流导致安保和检票设备瘫痪，这立即导致了抗议。不久后，政府方面命令不检票全员进场，这才稍微缓解了一些紧张情况。</p>
<p>我们是近十二点才进入场馆的，进场之后先是去我们同学的摊位放下行李，之后立刻就开始扫荡一号馆的各个同好摊位。我基本上就追着术力口摊位一顿找，买了不少小东西之后便回去吃饭。由于场馆里面的饭店和小卖部可想而知地服务不了这么夸张的人群，我们早就自备好了军粮当饭。然而军粮实在是实用主义，可谓不是一般的难吃，但是饱腹感很强。</p>
<p>晚上散场之后，晚饭又成了巨大的问题。经过实地探索，方圆两公里的所有超市和饭店大概都已经被占领。无奈，只能回宾馆等有饭吃了点外卖，而且还不能太晚，还得去 Day2。</p>
<h1 id="section-72">2023.05.03</h1>
<p>估计是被市政府摁着头打了一顿，CP29 主办方这次至少多派出了一倍的安保力量并且在二层多设置了一个缓冲区。这次我们没有花到半小时就成功进场。然而场馆内人数依然是十分夸张。</p>
<p>今天由于起得早而且进场快，我很快就把昨天没买到的东西收全了。在此之后基本上就没有什么欲望了，简单把所有的场馆都浏览一遍之后就去打游戏了。</p>
<p>晚上和 lcr 他们汇合，三个人在酒店里面打了一下午星穹铁道，中途我终于意识到我圣遗物和武器配置有些不太对，花了点时间洗了一遍之后，我也拥有了一个看起来很不错的队伍。</p>
<p>之后就是很早就睡了，这连着三天几乎没睡好觉然后第二天还要赶路去广州。</p>
<h1 id="section-73">2023.05.04</h1>
<p>早上醒来的时候 ttl 已经收拾好东西返程回西安，于是我慢悠悠起床收好东西走到麦当劳吃了午饭，打辆车前往虹桥。实习那边似乎也开始催了，有点麻烦，决定火车上把这些事情慢慢解决掉，不然的话还是很烦的。</p>
<p>今天就是整整坐了一天的车，到广州之后打车去宾馆，一到宾馆就睡大觉去了。</p>
<h1 id="section-74">2023.05.05</h1>
<p>早上十点就起来了，洛言志推荐了南园酒家，于是两个人中午就去了。南园酒家似乎也是广州传统的园林酒店之一了，不得不说茶点做得相当不错，一只虾饺五只虾仁实在是太震撼了。</p>
<p>吃完之后有点百无聊赖，于是去找出勤的地方。中途想到既然要路过老城，不如去老城区转转。说实话，广州给我的感觉就是，相当有特征，或者说很刻板印象。相较于我的家乡长三角地区和大学所在的华北地区，广州的城市风格是完全不同的，甚至一定程度上给我带来了一些奇妙的异域风情感。广州老城更是和影视剧中的印象完全一致，随处可见的各种热带树木，红漆写的楷体店招牌，小吃店的铁栅栏门、神龛、各式招财标语、白瓷砖墙。透过老城天际线的缺口，远方就是广州新城的各式高楼。</p>
<p>确实是听不少人说过，广州是一个城中村遍地的城市，不过实地观察了一下确实挺震撼。</p>
<p>城中村大概都是那些所谓的老广，他们感觉自成体系高度自治。城中村里随处可见旧城改造的宣传，大概都会有地产公司的署名。而最为逆天的标语莫过于：</p>
<div class="note info no-icon"><p>疫情封控历历在目</p>
<p>旧城改造刻不容缓</p>
</div>
<p>这个标语确实比较猛，一般而言现在的政治风气是对 2022 年的后半讳莫如深，然而这里堂而皇之写在这里，批判的态度一目了然。这确实印证了老城区高度自治的说法，毕竟广东整体还是天高皇帝远，其本地自然扎根的治理体系早就成型。相比较于华北地区中央政府的强大影响力，加上为了提高经济活力而适当松绑的政策，广州老城确实在这一方面具有一种令外人觊觎的自由感。联想到广州也是疫情最早放开的城市，想到广州市中心，越秀、天河两区的街道划分细碎不堪，这一切也似乎在相互呼应。然而宗法的约束或许更为可怕呢，或许房产公司的经济压力更为恐怖呢，这些也就不得而知了。</p>
<p>之后更为震撼的是，一位外卖小哥从我身边飞过，大喊着“打倒土匪共产党”“共产党係土匪嘅”，虽然我粤语近乎不懂，和小店店主还得手语交流，但是“共产党”三个字听懂之后，粤语判定句式我还是能听明白的。</p>
<p>又想到了二十大之前的北京四通桥抗议，要是这位外卖小哥出现在北京，或许现在早就莫须有吃点公家饭了。不过也是按照我的经验，北京整体民众对中央政府的支持程度较高，或许由于没有什么受众，可能公然宣传这类口号的人就不会出现吧。不过也是，印证了广州相对自由的刻板印象。</p>
<p>下午就是出勤，先是在海珠富力，只有一台机子，但是下午确实没有什么人。之后等来了 philos，和他简单打了几把之后发现来了十几个人排队，于是赶快撤退到天河城。天河城的好处就在于四台机子，整体压力就少很多。</p>
<p>晚上回宾馆已经累趴下了，洗洗就睡了。</p>
<h1 id="section-75">2023.05.06</h1>
<p>广州的人给我带来了很好的印象，然而天气却不是，闷热潮湿的气候实在是难以忍受，每天早上起来都得穿上微微湿哒哒的衣服，然后步入门外充满雾气的城市。</p>
<p>今天稍微有些事情要清理掉，所以就找了一家自习室，先去干点活。</p>
<p>结果今天一过我突然出现了很多的事情，当时不仅有外卖送达、宾馆续住、公交坐过站、腾讯云因为开服务器欠费等等这种小事，手上还被导师和学长问毕设的事情，家里人也打电话过来，实习那边学长也在催着做事，DRL 作业做不出来。总之就是各种事情混杂到了一起。</p>
<p>决定这两天把实习的事情干完，然后后面要迅速开始写论文了，不然实在是有点来不及。</p>
<h1 id="section-76">2023.05.07</h1>
<p>起来之后发现广州开始下大暴雨，于是今天还是暂且先不出门为好，在酒店里准备先清理掉一些杂事。</p>
<p>最终还是决定丢掉 DRL HW3 的 10 分，希望不要挂科。毕竟现在在广州确实没什么工作环境，真的是完全做不下去了，调试一个算法三四个小时，整体做完怕不是已经没分数了。</p>
<p>下午去了广州塔，基本也是延续一个登高望远的想法，所以尽可能买了往高处去的票，中间什么游乐园自然是对我没什么吸引力的。然而比较可惜的是，由于大雾天气，最塔顶的 480 米室外观景台关闭了。实际上从地面往上看，那个观景台已经完全淹没在云雾中了，关闭也是理所当然的。所以最终也只能买到 450 米室外观景台。剩余的流程自然没什么悬念，高速电梯上塔，过安检过检票口就到了观景台。同样，由于大雾天气，能见度实在有限，不过反而是这种云雾缭绕的感觉颇有意境。岭南的雾气传统意义上的江南烟雨有所区别，相较于长江流域那种薄薄的轻纱一般的清新湿气，岭南的湿气就显得厚重和沉闷得多，人行走在其中并不能感受到自己的心灵被荡涤，只会感受到空气海洋底部的强大阻力。广州塔顶更是如此，上午的大暴雨后，云层几乎就已经贴到观景台了，甚至一阵风吹过，直接就被淹没在了一团云雾中。</p>
<p>下塔之后，大概就在广州市中心逛了一下，体验了一下地下胶轮车 APM 线，到达体育西路附近的时候已经差不多是晚饭点了，所以就找了一家看起来还不错的冰室吃晚饭。</p>
<p>吃完晚饭之后突然有点想要去体验一下海珠有轨电车，于是又一次回到了广州塔，买了一张前往万胜围的票。不得不说晚上来走有轨电车真的是有点过于暴殄天物，原本这条有轨电车线是沿着滨江绿道建的，天气好的时候江边的风景非常好，虽然不能说夜景不好看，但是显然我还是喜好那种绿色城市的景观。</p>
<p>坐到万胜围之后已经离宾馆十公里了，有轨电车也已经开出最后一班，于是只能打车回去了。</p>
<h1 id="section-77">2023.05.08</h1>
<p>今天就准备回北京了，收拾好行李退了房之后就开始乱晃，因为提着行李也实在去不了什么地方。于是先找了个地方吃饭，之后出勤，再吃过晚饭后就得来机场办手续了。</p>
<p>今天实在是没什么可以记录的，赶路的日子确实没什么特别值得记忆的，我只知道到机场的时候我已经困得不行了。</p>
<h1 id="section-78">2023.05.09</h1>
<p>一样的，还在赶路。昨晚十一点的飞机，七点多点就到机场，然后凌晨一点多到达西安，人已经快困死了。然而西安机场找了一圈确实没有睡眠舱之类的东西，只有少许座位，还不是躺椅。于是只能把衣服袋子当枕头躺在长椅上尝试过夜，结果还被保安喊起来说不能躺。我寻思着这机场这么大基本都没人，平常不让躺是因为占了别人的位置，但我现在躺似乎也没有影响到别人啊。然而他既然这么说了，就说明我接着躺铁定睡不好觉，要被他一直喊，所以只能坐起来接着睡。</p>
<p>一直熬到了五六点钟这样安检登机，到了飞机上我就开始睡，然而完全睡不踏实，坐着睡对我来说实在是太困难了。早上九点十点这样到达大兴机场，还得坐车两小时才能到学校，就这样，十二点多我终于爬到了学校。</p>
<p>到学校后先收拾东西，这个时候人已经近乎麻痹，完全不想和外界交流。本来为了作息不崩溃计划下午不睡，晚上早点睡的，结果还是绷不住，下午直接睡了六七个小时，到了晚上十点钟才起床。</p>
<p>晚上稍微打了一会星穹铁道，然后就得赶快睡，明天还要早起去淘宝的项目讨论会。</p>
<h1 id="section-79">2023.05.10</h1>
<p>淘宝这边的话，提到了现在互联网的一个趋势，就是各种视频内容平台开始做电商，比如直播带货，尝试将视频服务通过电商变现。另一边，淘宝作为传统电商平台，计划通过内容化的手段做防御，也就是在淘宝里面做一些视频服务。这些视频可能不完全和电商相关，有可能是泛娱乐化的内容。</p>
<p>淘宝这边视频的应用场景除了最常见的商品介绍视频之类，还是希望做一些比较周边的，如带货视频等，虽然目前的业务规模和用户影响力还不及小红书。淘宝目前短视频落后于直播服务，相比较于目前抖音是短视频远超直播服务。</p>
<p>淘宝目前音视频相关团队确实相对大，但是似乎在网络传输方面的人员都比较偏向于工程，在学术、算法上可能还确实需要和高校合作。由于团队 leader 本职是做视频编码的，所以整体的团队都主要在做 encoder/decoder 方面的事务，也确实需要传输方面的人力进入。</p>
<p>目前淘宝网络传输底层还在使用 RTP，可能目前正在尝试转入 QUIC，做这一部分工作的是另一个团队。毕竟在传输层协议上层运行什么应用实际上和传输协议解耦合。</p>
<p>中午和他们一并在学校东南门口吃了一顿午饭，中途和导师 one on one 交流了一下毕设相关，看起来他似乎确实是比较担心我的毕设问题。果然，我还是稍微老实点做点东西，开始写论文比较好。然而似乎导师也并没有那么急迫，其最终还是同意我前往苏州。</p>
<p>下午就是在工位上无所事事，我也不知道我干了什么，但是就这样时间就过去了。</p>
<h1 id="section-80">2023.05.11</h1>
<p>早起赶车前往苏州，到达苏州的时候已经是下午四点，已经赶不上下午的一些论坛了，于是只能去签到领个物资之后就回酒店收拾东西。</p>
<p>晚上有一个我导师的工程博士学长请我们吃饭，这位学长已经是科大讯飞的工程师了，在职读的博士生。饭桌上整体气氛还算不错，聊了很多有关最近人工智能发展和媒体相关的一些事情。然而最不能理解的就是，这是一顿人均五六百的饭，居然没什么大肉菜，最终我没吃饱。</p>
<p>吃完饭回来开完软工的小例会之后就开始清理毕设的一些事情，感觉还是得赶快动手，否则有点急。把之前订好的列表重新搬到这边吧，先标记几个打算做的：</p>
<ul>
<li>数据集相关研究
<ul>
<li>(Scheduled) 考虑连续低带宽、带宽平均变化值等各种统计特征区分环境</li>
<li>(Scheduled) 讨论 LUMOS 5G 数据集等其他数据集</li>
</ul></li>
<li>当前结果验证
<ul>
<li>(Scheduled) 重复生成数据集并验证结论（GrBAL 在切换数据集上优于 Pensieve，Pensieve 在切换数据集上不优于无切换数据集）</li>
<li>(Scheduled) 使用其他数据集进一步验证 GrBAL 的性能</li>
</ul></li>
<li>GrBAL 相关的深入
<ul>
<li>讨论 dynamics model 给出的预测是否符合实际带宽等</li>
<li>缩小模型规模观察收敛速度</li>
</ul></li>
<li>Pensieve baseline 相关的深入
<ul>
<li>讨论 Pensieve 表现较差的原因（直接和贾老师、黄老师讨论）</li>
<li>尽量调优 Pensieve 观察其性能极限</li>
<li>(Scheduled) 训练黄老师版本的 Pensieve 或者 SIGCOMM 版本的 Pensieve 作为 baseline</li>
</ul></li>
<li>一些文献调研
<ul>
<li>考虑阅读一些环境切换相关的论文，比如 Feng Qian 的论文</li>
</ul></li>
<li>一个可能的新方向
<ul>
<li>李老师今天组会上提到的动态 Oboe 方法，将中心 model buffer 迁移到本地尝试</li>
</ul></li>
</ul>
<h1 id="section-81">2023.05.12</h1>
<p>今天本来是要去会场的，结果由于昨晚饭局上约好了今天去科大讯飞转转，所以起床就去高新工业园区了。</p>
<p>到那里了才知道，这位师兄实际上已经是研究院院长这个级别的高管了，想到这条人脉可能带来的价值，确实还是有点意思的。苏州科大讯飞这里主要是在做一些分支项目，主要包括轿车音响系统、车载语音识别系统，然后有个有意思的就是，由于这位师兄的个人兴趣爱好，苏州科大讯飞还在做围棋机器人。不得不说，整体转下来很有意思，确实比那些浮于表面的所谓企业参观有意思多了，毕竟这相当于实验室内部交流，总体上还是学习到了很多现在工业界的状况，感叹科大讯飞产品落地是真的快。</p>
<p>然后就是去了苏州微软，这是给我冲击比较大的地方。整体上苏州微软还是符合我的刻板印象的，公司内部的建筑风格等等都很符合美式审美，开放式工位、随处可见的讨论区、优秀的 work life balance 日程安排。然后就是另一位现在在苏州微软做 team leader 的师兄介绍了他们 team 在完成的工作，主要还是视频特效相关。当时有一句我记忆深刻，就是“我们宁愿 delay 一个新的功能上线，也不能让他破坏兼容性和用户体验”，然而这种话也只有微软这种体量的垄断公司才敢说，小厂连生存都是问题，只能不断卷新功能。</p>
<p>不过说实话，还是挺认可微软的一些价值观的，当时也想着毕业后入职 MSRA 或者之类的公司，但是由于微软完全不在意人才会不会来，所以开出来的工资确实在市场上没有很大的竞争力，清华计算机本科也不过 package 30w。整体来说是个很适合养老的地方，或许我毕业后，如果想留在国内的话，就先在北上工作攒钱，然后回到苏州微软养老摆烂。当然如果想要出国的话又是另外一回事了。苏州真的是个好地方啊，这个时候还是会发出这种感叹。</p>
<p>下午我们就各自散开了，贾老师去旅游去了，一鸣师兄去会场听持续学习论坛，我则找了个机厅出勤了。晚上出勤回来，开始做毕设。</p>
<hr />
<p>今天研究了一下 LUMOS 5G 数据集，这是一个自带环境切换的数据集，整体而言更为真实，如果在这上面能够做出成果也显得更有说服力一些。目前计划将 GrBAL 和黄老师的 Pensieve 在这个上面训练起来看看能不能验证之前的结果。</p>
<p>但我尝试过了一下 LUMOS 数据集，发现这带宽还挺猛的，基本上逼近 100Mbps，这就很尴尬了，比较大的带宽显然是很没意思的，直接照着大的选就可以了，完全没有什么意义，我现在最后 GrBAL 和 baseline 都收敛到疯狂选高码率，甚至 BBA 都能获得很好的效果。我在原本的 LUMOS 上试了一下 BBA，其 QoE 飙升到 123.39，这个数据几乎可以认为是不合理的了，说明原始 LUMOS 的带宽太充裕了。</p>
<p>所以我做了点手脚，我把带宽手动除以 8。之后将 LUMOS 数据集之中的前 24 个 trace 作为测试集，GrBAL 方法中另将剩余的 trace 中 20% 划分为验证集，Pensieve 则将剩余 trace 全部作为训练集。BBA 就直接在前 24 个 trace 上测试了。</p>
<p>有点很奇怪的是似乎 LUMOS 数据集内部的差距也很大，GrBAL 方法在这个数据集上面，测试集上能有上百 QoE，但是验证集上只有几十，这也让我感到不可思议。</p>
<h1 id="section-82">2023.05.13</h1>
<p>苏州的第二天，说实话没什么安排，中午一起吃过饭之后就决定各散了，我和一鸣师兄决定先找个地方做一下手上的事情，所以就先去了某一家星巴克。大概做了一些之后一鸣师兄去会场了，而我则开始苏州城区闲逛。</p>
<p>说实话这一整天也没什么说得上是收获的东西，只是无聊了。</p>
<h1 id="section-83">2023.05.14</h1>
<p>赶路，早上起来就前往火车站，晚上才到达北京，偷偷去丰台出勤之后回宿舍。宿舍还要十二点断电导致空调用不了，晚上热到睡不着。</p>
<p>稍微做了点毕设，但是验证工作还没做完。我现在计划再次运行一下 baseline，观察一下到底是谁的问题。</p>
<h1 id="section-84">2023.05.15 - ?</h1>
<p>在此之后就都是赶毕设了，实在是没有什么可以记录的了，到时候，等到毕业典礼，再去写长文吧。</p>
<p>这个学期整体还是挺有意思的，有趣而充实。</p>
]]></content>
      <categories>
        <category>【生活记录】日记</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 1 生词表</title>
    <url>/2022/08/21/ja-tutorial-ch1-vocab/</url>
    <content><![CDATA[<p>本文章为自学手册 Chapter 1 生词表。</p>
<span id="more"></span>
<p>考虑到这里还未讲解用言、助动词活用，故会同时列举出本章内出现的词语的活用形和相对应的原形，活用形使用小括号括出并写在原形下方以示区分。</p>
<p>动词生词表中词性一列的具体含义参见第二章动词活用分类。另外，对于动词、形容词、形容动词，方括号括出的为该词语在古日语中的形式与词性，若没有方括号标记，则表明古日语中该词语和现代形式或词性一致，也有可能是该词语是现代造词，没有古语对应。</p>
<p>另外补充说明，由于动词的连用形（动词为五段动词时使用第一连用形）可以用于将动词名词化。如果名词化后形成的名词和原先动词的含义类似，我们就将动词形式纳入生词表，其名词形式作为其衍生。而若含义差别较大，则其动词和名词形式分别纳入生词表。</p>
<p>本章生词表选择性收录 Chapter 1 Section 3 中的词语。</p>
<h1 id="动词生词表">动词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 気付 きづ</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">发现、察觉</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 縮 ちぢ</code>む</td>
<td style="text-align: center;">動マ五[動マ四]</td>
<td style="text-align: center;">缩小、收缩</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 居 い</code>る[<code>@ 居 ゐ</code>る] <br /> （い）</td>
<td style="text-align: center;">動ア上一[動ワ上一]</td>
<td style="text-align: center;">①（有生命事物）存在 <br /> ②居住、逗留 <br /> ③保持在某一状态</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 調 しら</code>べる[<code>@ 調 しら</code>ぶ] <br /> （<code>@ 調 しら</code>べ）</td>
<td style="text-align: center;">動バ下一[動バ下二]</td>
<td style="text-align: center;">调查、查询</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 下 くだ</code>さる <br /> （ください）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">①（给我方）送、给 <br /> ②（作补助动词）请</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 作 つく</code>る <br /> （<code>@ 作 つく</code>り）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">制作</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 過 す</code>ぎる[<code>@ 過 す</code>ぐ] <br /> （<code>@ 過 す</code>ぎ）</td>
<td style="text-align: center;">動ガ上一[動ガ上二]</td>
<td style="text-align: center;">①经过、通过 <br /> ②（时间）流逝、消逝 <br /> ③（作补助动词）过度、过分</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 持 も</code>つ <br /> （<code>@ 持 も</code>っ）</td>
<td style="text-align: center;">動タ五[動タ四]</td>
<td style="text-align: center;">①（用手）拿、持 <br /> ②携带 <br /> ③（某种物品）拥有、具有</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 行 い</code>く <br /> （<code>@ 行 い</code>っ）</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">①去、走、前往 <br /> ②步行</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 上 あ</code>げる[<code>@ 上 あ</code>ぐ] <br /> （<code>@ 上 あ</code>げ）</td>
<td style="text-align: center;">動ガ下一[動ガ下二]</td>
<td style="text-align: center;">①举起、抬起 <br /> ②（给他方）给、送给</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 仕舞 しま</code>う[<code>@ 仕舞 しま</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">结束、终结</td>
</tr>
<tr class="even">
<td style="text-align: center;">する[す] <br /> （し）</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">做、办、进行</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 思 おも</code>う[<code>@ 思 おも</code>ふ] <br /> （<code>@ 思 おも</code>い）</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">①思考、思索 <br /> ②相信、确信 <br /> ③预想、预料 <br /> ④希望、期待</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 使 つか</code>い<code>@ 古 ふる</code>す[<code>@ 使 つか</code>ひ<code>@ 古 ふる</code>す]</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">用旧、因长时间多次使用而变旧</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 来 く</code>る[<code>@ 来 く</code>]</td>
<td style="text-align: center;">動カ変[動カ変]</td>
<td style="text-align: center;">来、来到</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 話 はな</code>す</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">说话、讲话</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 飛 と</code>ぶ</td>
<td style="text-align: center;">動バ五[動バ四]</td>
<td style="text-align: center;">①飞行 <br /> ②（因外力）飞舞</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 立 た</code>つ</td>
<td style="text-align: center;">動タ五[動タ四]</td>
<td style="text-align: center;">站立</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 書 か</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">书写</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 出来 でき</code>る[<code>@ 出来 いでく</code>] <br /> （でき）</td>
<td style="text-align: center;">動カ上一[動カ変]</td>
<td style="text-align: center;">①做好、形成 <br /> ②能够做到、有能力</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 出 だ</code>す <br /> （<code>@ 出 だ</code>し）</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">取出</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 送 おく</code>る <br /> （<code>@ 送 おく</code>り）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">①送、邮寄、派遣 <br /> ②送行 <br /> ③传送、放送</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 見 み</code>る <br /> （<code>@ 見 み</code>）</td>
<td style="text-align: center;">動マ上一[動マ上一]</td>
<td style="text-align: center;">①看、观看 <br /> ②（作补助动词）尝试</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 誤魔化 ごまか</code>す <br /> （<code>@ 誤魔化 ごまか</code>し）</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">糊弄、搪塞</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 逃 に</code>げる[<code>@ 逃 に</code>ぐ] <br /> （<code>@ 逃 に</code>げ）</td>
<td style="text-align: center;">動ガ下一[動ガ下二]</td>
<td style="text-align: center;">逃跑、逃走、逃出</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 成功 せいこう</code>する[<code>@ 成功 せいこう</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">成功</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 会 あ</code>う[<code>@ 会 あ</code>ふ] <br /> （<code>@ 会 あ</code>い）</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">会面、见面</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 軽 かろ</code>んずる[<code>@ 軽 かろ</code>んず]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">轻视</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 消 き</code>える[<code>@ 消 き</code>ゆ]</td>
<td style="text-align: center;">動ア下一[動ヤ下二]</td>
<td style="text-align: center;">消失</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 消 け</code>す</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">使熄灭、关闭、解除</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 芽生 めば</code>える[<code>@ 芽生 めば</code>ゆ]</td>
<td style="text-align: center;">動ア下一[動ヤ下二]</td>
<td style="text-align: center;">出芽、发芽</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 生 い</code>きる[<code>@ 生 い</code>く]</td>
<td style="text-align: center;">動カ上一[動カ上二]</td>
<td style="text-align: center;">生存、生活</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 生 う</code>まれつく</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">天生、生来就有</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 笑 わら</code>う[<code>@ 笑 わら</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">笑</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 迷 まよ</code>う[<code>@ 迷 まよ</code>ふ] <br /> （<code>@ 迷 まよ</code>っ）</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">迷失、迷惘</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 辿 たど</code>る <br /> （<code>@ 辿 たど</code>り）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">沿路前进、追寻</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 着 つ</code>く <br /> （<code>@ 着 つ</code>い）</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">到达、抵达</td>
</tr>
<tr class="even">
<td style="text-align: center;">やる <br /> （やっ）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">做、干、进行、派遣</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 知 し</code>る <br /> （<code>@ 知 し</code>ら）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">知道、了解</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 拠 よ</code>る <br /> （<code>@ 拠 よ</code>っ）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">基于、根据、按照</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 降 ふ</code>る <br /> （<code>@ 降 ふ</code>り）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">降下、落下</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 始 はじ</code>まる <br /> （<code>@ 始 はじ</code>まり）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">开始</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 有 あ</code>る[<code>@ 有 あ</code>り] <br /> （あれ、あり）</td>
<td style="text-align: center;">動ラ五[動ラ変]</td>
<td style="text-align: center;">①（无生命事物）存在 <br /> ②属于、归于</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 終 お</code>わる[<code>@ 終 を</code>はる] <br /> （<code>@ 終 お</code>わり）</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">结束、终结</td>
</tr>
</tbody>
</table>
<h1 id="形容词生词表">形容词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 速 はや</code>い[<code>@ 速 はや</code>し] <br /> （はやく）</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">动作迅速的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 煩 うるさ</code>い・<code>@ 五月蠅 うるさ</code>い[<code>@ 煩 うるさ</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">嘈杂的、烦人的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 軽 かる</code>い[<code>@ 軽 かる</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">轻的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 重 おも</code>い[<code>@ 重 おも</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">重的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 赤 あか</code>い[<code>@ 赤 あか</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">红色的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 黒 くろ</code>い[<code>@ 黒 くろ</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">黑色的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 長 なが</code>い[<code>@ 長 なが</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">长的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 広 ひろ</code>い[<code>@ 広 ひろ</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">宽广的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 美 うつく</code>しい[<code>@ 美 うつく</code>し]</td>
<td style="text-align: center;">形[形シク]</td>
<td style="text-align: center;">美丽的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 難 むずか</code>しい[<code>@ 難 むずか</code>し]</td>
<td style="text-align: center;">形[形シク]</td>
<td style="text-align: center;">困难的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 素晴 すば</code>らしい[<code>@ 素晴 すば</code>らし]</td>
<td style="text-align: center;">形[形シク]</td>
<td style="text-align: center;">美好的</td>
</tr>
</tbody>
</table>
<h1 id="形容动词生词表">形容动词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 素敵 すてき</code>だ[<code>@ 素敵 すてき</code>なり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">美好的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 好 す</code>きだ[<code>@ 好 す</code>きなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">喜欢的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 嫌 きら</code>いだ[<code>@ 嫌 きら</code>ひなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">讨厌的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 静 しず</code>かだ[<code>@ 静 しず</code>かなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">安静的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 大変 たいへん</code>だ[<code>@ 大変 たいへん</code>なり] <br /> （<code>@ 大変 たいへん</code>に）</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">极重要的、非常</td>
</tr>
</tbody>
</table>
<h1 id="助词助动词生词表">助词、助动词生词表</h1>
<p>助词和助动词的细节用法会在后续章节讲解，这里不需要过度关注各个助词和助动词的含义。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">は</td>
<td style="text-align: center;">副助</td>
<td style="text-align: center;">标注语句的主题</td>
</tr>
<tr class="even">
<td style="text-align: center;">が</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注语句的主语</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ます <br /> （ましょ、ませ）</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示一般尊敬陈述语气</td>
</tr>
<tr class="even">
<td style="text-align: center;">の</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注从属或者同位关系</td>
</tr>
<tr class="odd">
<td style="text-align: center;">を</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注语句的宾语</td>
</tr>
<tr class="even">
<td style="text-align: center;">て</td>
<td style="text-align: center;">接助</td>
<td style="text-align: center;">标注语句的中顿</td>
</tr>
<tr class="odd">
<td style="text-align: center;">た</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示过去时态</td>
</tr>
<tr class="even">
<td style="text-align: center;">ので</td>
<td style="text-align: center;">接助</td>
<td style="text-align: center;">标注客观原因</td>
</tr>
<tr class="odd">
<td style="text-align: center;">に</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注动作发生的时间、动作的方向等</td>
</tr>
<tr class="even">
<td style="text-align: center;">も</td>
<td style="text-align: center;">副助</td>
<td style="text-align: center;">①标注同类追加（类似“也”） <br /> ②标注极端语气（类似“甚至”）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">か</td>
<td style="text-align: center;">終助</td>
<td style="text-align: center;">标注疑问语气</td>
</tr>
<tr class="even">
<td style="text-align: center;">だ <br /> （だっ）</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">（简体）作为判断词提示断定语气</td>
</tr>
<tr class="odd">
<td style="text-align: center;">で</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注动作发生的地点、动作的手段等</td>
</tr>
<tr class="even">
<td style="text-align: center;">ない</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示否定语义</td>
</tr>
<tr class="odd">
<td style="text-align: center;">から</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注时间、地点的起始，标注主观原因</td>
</tr>
<tr class="even">
<td style="text-align: center;">まで</td>
<td style="text-align: center;">格助</td>
<td style="text-align: center;">标注时间、地点的终止等</td>
</tr>
<tr class="odd">
<td style="text-align: center;">だけ</td>
<td style="text-align: center;">副助</td>
<td style="text-align: center;">标注程度限定（类似“只”）</td>
</tr>
<tr class="even">
<td style="text-align: center;">う</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示自发意志</td>
</tr>
<tr class="odd">
<td style="text-align: center;">べし <br /> （べから）</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示应当、可能等语气</td>
</tr>
<tr class="even">
<td style="text-align: center;">ず・ぬ・ん</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示否定语义</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ば</td>
<td style="text-align: center;">接助</td>
<td style="text-align: center;">标注假设、可能</td>
</tr>
<tr class="even">
<td style="text-align: center;">そうだ <br /> （そうに）</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">提示样态</td>
</tr>
<tr class="odd">
<td style="text-align: center;">です <br /> （でし）</td>
<td style="text-align: center;">助動</td>
<td style="text-align: center;">（一般尊敬语气）作为判断词提示断定语气</td>
</tr>
</tbody>
</table>
<h1 id="副词生词表">副词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">しっかり</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">①（身体）健壮、结实 <br /> ②（结构）稳固、牢靠 <br /> ③（含义）明确 <br /> ④（性格）坚强、坚定</td>
</tr>
<tr class="even">
<td style="text-align: center;">もう</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">①已经 <br /> ②就要、将要、快要 <br /> ③再、还、另外</td>
</tr>
<tr class="odd">
<td style="text-align: center;">さっぱり</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">整洁、利落</td>
</tr>
<tr class="even">
<td style="text-align: center;">たくさん</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">大量、许多</td>
</tr>
<tr class="odd">
<td style="text-align: center;">なんでも</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">①无论什么、无论如何 <br /> ②据说是</td>
</tr>
<tr class="even">
<td style="text-align: center;">いつか</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">①不知不觉的 <br /> ②曾经 <br /> ③早晚、迟早</td>
</tr>
<tr class="odd">
<td style="text-align: center;">きっと</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">一定</td>
</tr>
</tbody>
</table>
<h1 id="名词代词数词生词表">名词、代词、数词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 大阪 おおさか</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">大阪</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 経済 けいざい</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">经济</td>
</tr>
<tr class="odd">
<td style="text-align: center;">フィルム</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">胶卷</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 俺 おれ</code></td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（男性对同辈、下级使用）我</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 兄弟 きょうだい</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">兄弟</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 三人 さんにん</code></td>
<td style="text-align: center;">数</td>
<td style="text-align: center;">三人</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 容疑者 ようぎしゃ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">嫌疑人</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 情報 じょうほう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">消息、信息</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ケーキ</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">蛋糕</td>
</tr>
<tr class="even">
<td style="text-align: center;">これ</td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（名词性事物近称）这个、这些</td>
</tr>
<tr class="odd">
<td style="text-align: center;">お<code>@ 婆 ばあ</code>さん</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">①（敬称）祖母、奶奶 <br /> ②（敬称）外祖母、外婆 <br /> ③（对老年女性的敬称）老太太</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 伊呂波 いろは</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">①伊吕波歌（一首用平假名编制的歌曲） <br /> ②初步、入门</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 山 やま</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">山</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 奈美 なみ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（女性名）奈美</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 共和 きょうわ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">共和</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 当 あ</code>て<code>@ 字 じ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">假借字</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 仕付 しつけ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">管教、约束</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 仕方 しかた</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">方法、手段</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 仕草 しぐさ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">台词、说辞</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 仕事 しごと</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">工作</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 亜細亜 アジア</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">亚洲</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 麦酒 ビール</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">啤酒</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 俱楽部 クラブ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">俱乐部</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 言葉 ことば</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">话语</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 何度 なんど</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">多少次、多少回</td>
</tr>
<tr class="even">
<td style="text-align: center;">の</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（形式体言）起动词名词化的作用</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 送 おく</code>り<code>@ 仮名 がな</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">送假名</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 事 こと</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">①事物、事情 <br /> ②（形式体言）起动词名词化的作用</td>
</tr>
<tr class="odd">
<td style="text-align: center;">あれ</td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（名词性事物远称）那个、那些</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 去年 きょねん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">去年</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 私 わたし</code></td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（通用）我</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 日本語 にほんご</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">日语</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 手紙 てがみ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">书信</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 資料 しりょう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">资料</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 改 かい</code>ざん</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">篡改</td>
</tr>
<tr class="even">
<td style="text-align: center;">この</td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（连体性近称）这个</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 番組 ばんぐみ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">节目</td>
</tr>
<tr class="even">
<td style="text-align: center;">ご<code>@ 覧 らん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（尊他语）看、所看</td>
</tr>
<tr class="odd">
<td style="text-align: center;">スポンサー</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">赞助方</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 提供 ていきょう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">提供</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 上海 シャンハイ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">上海</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 東京 とうきょう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">东京</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 飛行機 ひこうき</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">飞机</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 振 ふ</code>り</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">①振动、摆动 <br /> ②（外表）样子、打扮 <br /> ③（作补助名词）装作、假装 <br /> ④（舞蹈）动作、姿势 <br /> ⑤陌生 <br /> ⑥临时、突然</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 囚人 しゅうじん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">犯人</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 看守 かんしゅ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">看守</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 目 め</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">①眼睛、眼球 <br /> ②眼光、眼神 <br /> ③外表、外观 <br /> ④监视、看守</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 彼 かれ</code></td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（通用）他</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 勤勉家 きんべんか</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">实干家、用功的人</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 当 あ</code>たり<code>@ 前 まえ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">理所应当</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 明日 あした</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">明天</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 七時 しちじ</code></td>
<td style="text-align: center;">数</td>
<td style="text-align: center;">七点</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 会社 かいしゃ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">公司</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 受付 うけつけ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">前台</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 一寸 いっすん</code></td>
<td style="text-align: center;">数</td>
<td style="text-align: center;">一寸</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 光陰 こういん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">光阴</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 世界 せかい</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">世界</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 祝福 しゅくふく</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">祝福</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 橋 はし</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">桥梁</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 石 いし</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">石头</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 生 なま</code>ビール</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">生啤酒</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 五月雨 さみだれ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">梅雨、阴历五月的阴雨</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 時雨 しぐれ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（秋冬之交的）阵雨</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 村雨 むらさめ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">阵雨、骤雨</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 梅雨 つゆ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">梅雨</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 一昨日 おととい</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">前天</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 明後日 あさって</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">后天</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 晦日 みそか</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（阴历的）每月最后一天</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 足袋 たび</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（日式）短布袜</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 吹雪 ふぶき</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">暴风雪</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 芝生 しばふ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">草坪、矮草地</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 合図 あいず</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">信号、暗号</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 馬鹿 ばか</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">愚蠢的人、傻子</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 額縁 がくぶち</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">画框、相框</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 残高 ざんだか</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">余额</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 虚 うつ</code>ろ</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">空虚、空洞</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 午前 ごぜん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">午前、正午之前、上午</td>
</tr>
<tr class="even">
<td style="text-align: center;">そこ</td>
<td style="text-align: center;">代</td>
<td style="text-align: center;">（名词性地点中称）那里</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ハッピー</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">快乐</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 天気予報 てんきよほう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">天气预报</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 雨 あめ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">雨</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 申 もう</code>し<code>@ 訳 わけ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">辩解</td>
</tr>
</tbody>
</table>
<h1 id="其他类型词语生词表">其他类型词语生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 御 お</code></td>
<td style="text-align: center;">接続</td>
<td style="text-align: center;">①您、您的 <br /> ②表尊敬的接头词</td>
</tr>
</tbody>
</table>
<h1 id="常用交际语表">常用交际语表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">よろしくお<code>@ 願 ねが</code>いします。</td>
<td style="text-align: center;">请多指教。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 2 生词表</title>
    <url>/2022/08/21/ja-tutorial-ch2-vocab/</url>
    <content><![CDATA[<p>本文章为自学手册 Chapter 2 生词表。</p>
<span id="more"></span>
<p>对于动词、形容词、形容动词，方括号括出的为该词语在古日语中的形式与词性，若没有方括号标记，则表明古日语中该词语和现代形式或词性一致，也有可能是该词语是现代造词，没有古语对应。</p>
<p>另外补充说明，由于动词的连用形（动词为五段动词时使用第一连用形）可以用于将动词名词化。如果名词化后形成的名词和原先动词的含义类似，我们就将动词形式纳入生词表，其名词形式作为其衍生。而若含义差别较大，则其动词和名词形式分别纳入生词表。</p>
<p>本章生词表不录入数词、代词、助动词与助词。</p>
<h1 id="动词生词表">动词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 泳 およ</code>ぐ</td>
<td style="text-align: center;">動ガ五[動ガ四]</td>
<td style="text-align: center;">游泳</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 読 よ</code>む</td>
<td style="text-align: center;">動マ五[動マ四]</td>
<td style="text-align: center;">阅读、朗读</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 死 し</code>ぬ</td>
<td style="text-align: center;">動ナ五[動ナ変]</td>
<td style="text-align: center;">死亡</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 歌 うた</code>う[<code>@ 歌 うた</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">唱歌、咏唱</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 起 お</code>きる[<code>@ 起 お</code>く]</td>
<td style="text-align: center;">動カ上一[動カ上二]</td>
<td style="text-align: center;">①发生 <br /> ②站起、起床</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 捨 す</code>てる[<code>@ 捨 す</code>つ]</td>
<td style="text-align: center;">動タ下一[動タ下二]</td>
<td style="text-align: center;">舍弃、丢弃</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 教 おし</code>える[<code>@ 教 をし</code>ふ]</td>
<td style="text-align: center;">動ア下一[動ハ下二]</td>
<td style="text-align: center;">①教导、指导 <br /> ②告诉、告知</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 勉強 べんきょう</code>する[<code>@ 勉強 べんきょう</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">学习</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 感 かん</code>ずる[<code>@ 感 かん</code>ず]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">感受</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 上 あ</code>がる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">①上、登 <br /> ②升起、飞扬 <br /> ③提高、长进</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 売 う</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">卖出</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 残 のこ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">留下、剩余、遗留</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 滑 すべ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">滑、滑冰、滑倒</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 入 はい</code>る[<code>@ 入 はひ</code>る]</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">进入</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 察 さっ</code>する[<code>@ 察 さっ</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">推测、推察、同情</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 告 こく</code>る</td>
<td style="text-align: center;">動ラ五</td>
<td style="text-align: center;">（年轻群体用语）告白、表白</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 好 す</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">喜爱</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 嫌 きら</code>う[<code>@ 嫌 きら</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">讨厌</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 許 ゆる</code>す</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">允许、原谅</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 駆 か</code>ける[<code>@ 駆 か</code>く]</td>
<td style="text-align: center;">動カ下一[動カ下二]</td>
<td style="text-align: center;">快速奔跑</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 導 みちび</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">引导、指引</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 塞 ふさ</code>ぐ</td>
<td style="text-align: center;">動ガ五[動ガ四]</td>
<td style="text-align: center;">阻塞</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 決 けっ</code>する[<code>@ 決 けっ</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">决定、判决</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 出 で</code>る[<code>@ 出 い</code>づ]</td>
<td style="text-align: center;">動ダ下一[動ダ下二]</td>
<td style="text-align: center;">出来、出现</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 積 つ</code>もる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">积累</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 狂 くる</code>う[<code>@ 狂 くる</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">发狂、疯狂、发疯</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 注 そそ</code>ぐ</td>
<td style="text-align: center;">動ガ五[動ガ四]</td>
<td style="text-align: center;">倾注、灌入、流</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 回 まわ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">旋转、转动</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 結 むす</code>ぶ</td>
<td style="text-align: center;">動バ五[動バ四]</td>
<td style="text-align: center;">结合、连结</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 彷徨 さまよ</code>う[<code>@ 彷徨 さまよ</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">彷徨</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 染 そ</code>める[<code>@ 染 そ</code>む]</td>
<td style="text-align: center;">動マ下一[動マ下二]</td>
<td style="text-align: center;">染颜色、涂上颜色</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 逃 のが</code>れる[<code>@ 逃 のが</code>る]</td>
<td style="text-align: center;">動ラ下一[動ラ下二]</td>
<td style="text-align: center;">逃跑、逃出</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 喋 しゃべ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">说、讲、说出</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 高 たか</code>める[<code>@ 高 たか</code>む]</td>
<td style="text-align: center;">動マ下一[動マ下二]</td>
<td style="text-align: center;">提高、抬高、加高</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 拭 ぬぐ</code>う[<code>@ 拭 ぬぐ</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">擦拭</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 信 しん</code>ずる[<code>@ 信 しん</code>ず]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">相信</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 高 たか</code>まる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">高涨、增高</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 踏 ふ</code>む</td>
<td style="text-align: center;">動マ五[動マ四]</td>
<td style="text-align: center;">踩踏、实践、体验</td>
</tr>
<tr class="odd">
<td style="text-align: center;">なさる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">（尊敬语）做、干</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 放 はな</code>つ</td>
<td style="text-align: center;">動タ五[動タ四]</td>
<td style="text-align: center;">放出、释放、发射</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 放 ほう</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">抛出、扔出、弃置不管、丢弃</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 食 た</code>べる[<code>@ 食 た</code>ぶ]</td>
<td style="text-align: center;">動バ下一[動バ下二]</td>
<td style="text-align: center;">吃、食用</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 付 つ</code>き<code>@ 合 あ</code>う[<code>@ 付 つ</code>き<code>@ 合 あ</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">交往</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 問 と</code>う[<code>@ 問 と</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">询问</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 乞 こ</code>う[<code>@ 乞 こ</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">乞求</td>
</tr>
<tr class="even">
<td style="text-align: center;">いらっしゃる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">（「行く、来る、いる、ある」等的尊敬语）</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 仰 おっしゃ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">（尊他语）说、讲、称</td>
</tr>
<tr class="even">
<td style="text-align: center;">ござる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">（「行く、来る、いる、ある」等的尊敬语）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">くれる[くる]</td>
<td style="text-align: center;">動ラ下一[動ラ下二]</td>
<td style="text-align: center;">①（给我方）送、给 <br /> ②（作补助动词）为我方做</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 愛 あい</code>する[<code>@ 愛 あい</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">爱、心爱</td>
</tr>
<tr class="odd">
<td style="text-align: center;">なる</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">成为、变成</td>
</tr>
<tr class="even">
<td style="text-align: center;">しまう[しまふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">①结束、终结 <br /> ②（作补助动词）表示动作最终结束</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 登 のぼ</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">攀登、登上</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 増 ふ</code>える[<code>@ 増 ふ</code>ゆ]</td>
<td style="text-align: center;">動ア下一[動ヤ下二]</td>
<td style="text-align: center;">增加、增多</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 歩 ある</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">行走、步行</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 学 まな</code>ぶ</td>
<td style="text-align: center;">動バ五[動バ四]</td>
<td style="text-align: center;">学习</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 負 ま</code>ける[<code>@ 負 ま</code>く]</td>
<td style="text-align: center;">動カ下一[動カ下二]</td>
<td style="text-align: center;">战败</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 勝 か</code>つ</td>
<td style="text-align: center;">動タ五[動タ四]</td>
<td style="text-align: center;">胜利</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 買 か</code>う[<code>@ 買 か</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">买入</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 痛 いた</code>む</td>
<td style="text-align: center;">動マ五[動マ四]</td>
<td style="text-align: center;">疼痛</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 掃除 そうじ</code>する[<code>@ 掃除 そうじ</code>す]</td>
<td style="text-align: center;">動サ変[動サ変]</td>
<td style="text-align: center;">扫除</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 咲 さ</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">（花）开</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 増 ま</code>す</td>
<td style="text-align: center;">動サ五[動サ四]</td>
<td style="text-align: center;">增多、增大</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 呼 よ</code>ぶ</td>
<td style="text-align: center;">動バ五[動バ四]</td>
<td style="text-align: center;">称呼、呼喊</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 言 い</code>う[<code>@ 言 い</code>ふ]</td>
<td style="text-align: center;">動ワ五[動ハ四]</td>
<td style="text-align: center;">说话</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 入 い</code>る</td>
<td style="text-align: center;">動ラ五[動ラ四]</td>
<td style="text-align: center;">进入、浸入、没入</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 植 う</code>える[<code>@ 植 う</code>う]</td>
<td style="text-align: center;">動ア下一[動ワ下二]</td>
<td style="text-align: center;">栽植、栽种</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 打 う</code>つ</td>
<td style="text-align: center;">動タ五[動タ四]</td>
<td style="text-align: center;">打击、标上记号</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 選 えら</code>ぶ</td>
<td style="text-align: center;">動バ五[動バ四]</td>
<td style="text-align: center;">选择</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 着 き</code>る</td>
<td style="text-align: center;">動カ上一[動カ上一]</td>
<td style="text-align: center;">穿、承担</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 巻 ま</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">卷、缠绕、拧、包围</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 置 お</code>く</td>
<td style="text-align: center;">動カ五[動カ四]</td>
<td style="text-align: center;">①放置、设置 <br /> ②（作补助动词）保持某种状态 <br /> ③（作补助动词）提前做某事</td>
</tr>
</tbody>
</table>
<h1 id="形容词生词表">形容词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 優 やさ</code>しい[<code>@ 優 やさ</code>し]</td>
<td style="text-align: center;">形[形シク]</td>
<td style="text-align: center;">温柔的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 高 たか</code>い[<code>@ 高 たか</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">高的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 良 い</code>い[<code>@ 良 よ</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">好的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 暑 あつ</code>い[<code>@ 暑 あつ</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">（天气）炎热的、温度高的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 嬉 うれ</code>しい[<code>@ 嬉 うれ</code>し]</td>
<td style="text-align: center;">形[形シク]</td>
<td style="text-align: center;">高兴的、喜悦的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 黄色 きいろ</code>い</td>
<td style="text-align: center;">形</td>
<td style="text-align: center;">黄色的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 悪 わる</code>い[<code>@ 悪 わる</code>し]</td>
<td style="text-align: center;">形[形ク]</td>
<td style="text-align: center;">坏的</td>
</tr>
</tbody>
</table>
<h1 id="形容动词生词表">形容动词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 自由 じゆう</code>だ[<code>@ 自由 じゆう</code>なり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">自由的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 同 おな</code>じだ[<code>@ 同 おな</code>じ]</td>
<td style="text-align: center;">形動[形シク]</td>
<td style="text-align: center;">相同的</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 大 おお</code>きな[<code>@ 大 おほ</code>きなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">大的、巨大的</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 小 ちい</code>さな[<code>@ 小 ちひ</code>さなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">小的、微小的</td>
</tr>
<tr class="odd">
<td style="text-align: center;">おかしな[をかしなり]</td>
<td style="text-align: center;">形動[形動ナリ]</td>
<td style="text-align: center;">奇怪的、可笑的</td>
</tr>
</tbody>
</table>
<h1 id="副词生词表">副词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 燦然 さんぜん</code>と[<code>@ 燦然 さんぜん</code>たり]</td>
<td style="text-align: center;">副[形動タリ]</td>
<td style="text-align: center;">璀璨地</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 段々 だんだん</code>と[<code>@ 段々 だんだん</code>たり]</td>
<td style="text-align: center;">副[形動タリ]</td>
<td style="text-align: center;">渐渐地</td>
</tr>
<tr class="odd">
<td style="text-align: center;">いつしか</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">不知不觉地、迟早、早晚</td>
</tr>
<tr class="even">
<td style="text-align: center;">どうやって</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">应当如何（做某事、达成某种目标）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">たった</td>
<td style="text-align: center;">副</td>
<td style="text-align: center;">仅仅、就</td>
</tr>
</tbody>
</table>
<h1 id="名词生词表">名词生词表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">词性</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>@ 自由 じゆう</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">自由</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 意味 いみ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">含义</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 朝 あさ</code>ご<code>@ 飯 はん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">早饭</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 日本 にほん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">日本</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 気持 きも</code>ち</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">感受、心情、感觉</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 純愛 じゅんあい</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">纯爱</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 浮気 うわき</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">出轨、不伦</td>
</tr>
<tr class="even">
<td style="text-align: center;">ホラー</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">恐怖、恐怖片</td>
</tr>
<tr class="odd">
<td style="text-align: center;">コメディ</td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">喜剧</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 誰 だれ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">（疑问词）谁</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 全員 ぜんいん</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">全员</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>@ 神 かみ</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">神、神仙</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>@ 鬼 おに</code></td>
<td style="text-align: center;">名</td>
<td style="text-align: center;">鬼、鬼怪</td>
</tr>
</tbody>
</table>
<h1 id="常用交际语表">常用交际语表</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">汉语释义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ありがとうございます。</td>
<td style="text-align: center;">谢谢。</td>
</tr>
<tr class="even">
<td style="text-align: center;">おめでとうございます。</td>
<td style="text-align: center;">恭喜。</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 1 日语文字系统</title>
    <url>/2022/08/21/ja-tutorial-ch1/</url>
    <content><![CDATA[<p>本章主要介绍日语之中并行的三套语言系统——汉字、平假名、片假名，以及其历史和其使用惯例。之后，会简单论述日语的汉字读音法则和汉字词典使用方式。</p>
<span id="more"></span>
<h1 id="日语假名与五十音图">日语假名与五十音图</h1>
<p>说到日语的文字系统，就需要从日语假名，即平假名和片假名开始讲解。几乎所有的日语学习者第一个接触的日语相关知识，就是日语假名表，即五十音图：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">五十音図</th>
<th style="text-align: center;">あ段</th>
<th style="text-align: center;">い段</th>
<th style="text-align: center;">う段</th>
<th style="text-align: center;">え段</th>
<th style="text-align: center;">お段</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">あ行</td>
<td style="text-align: center;">あ ア</td>
<td style="text-align: center;">い イ</td>
<td style="text-align: center;">う ウ</td>
<td style="text-align: center;">え エ</td>
<td style="text-align: center;">お オ</td>
</tr>
<tr class="even">
<td style="text-align: center;">か行</td>
<td style="text-align: center;">か カ</td>
<td style="text-align: center;">き キ</td>
<td style="text-align: center;">く ク</td>
<td style="text-align: center;">け ケ</td>
<td style="text-align: center;">こ コ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">さ行</td>
<td style="text-align: center;">さ サ</td>
<td style="text-align: center;">し シ</td>
<td style="text-align: center;">す ス</td>
<td style="text-align: center;">せ セ</td>
<td style="text-align: center;">そ ソ</td>
</tr>
<tr class="even">
<td style="text-align: center;">た行</td>
<td style="text-align: center;">た タ</td>
<td style="text-align: center;">ち チ</td>
<td style="text-align: center;">つ ツ</td>
<td style="text-align: center;">て テ</td>
<td style="text-align: center;">と ト</td>
</tr>
<tr class="odd">
<td style="text-align: center;">な行</td>
<td style="text-align: center;">な ナ</td>
<td style="text-align: center;">に ニ</td>
<td style="text-align: center;">ぬ ヌ</td>
<td style="text-align: center;">ね ネ</td>
<td style="text-align: center;">の ノ</td>
</tr>
<tr class="even">
<td style="text-align: center;">は行</td>
<td style="text-align: center;">は ハ</td>
<td style="text-align: center;">ひ ヒ</td>
<td style="text-align: center;">ふ フ</td>
<td style="text-align: center;">へ へ</td>
<td style="text-align: center;">ほ ホ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ま行</td>
<td style="text-align: center;">ま マ</td>
<td style="text-align: center;">み ミ</td>
<td style="text-align: center;">む ム</td>
<td style="text-align: center;">め メ</td>
<td style="text-align: center;">も モ</td>
</tr>
<tr class="even">
<td style="text-align: center;">や行</td>
<td style="text-align: center;">や ヤ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">ゆ ユ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">よ ヨ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ら行</td>
<td style="text-align: center;">ら ラ</td>
<td style="text-align: center;">り リ</td>
<td style="text-align: center;">る ル</td>
<td style="text-align: center;">れ レ</td>
<td style="text-align: center;">ろ ロ</td>
</tr>
<tr class="even">
<td style="text-align: center;">わ行</td>
<td style="text-align: center;">わ ワ</td>
<td style="text-align: center;"><strong>ゐ ヰ</strong></td>
<td style="text-align: center;">―</td>
<td style="text-align: center;"><strong>ゑ ヱ</strong></td>
<td style="text-align: center;">を ヲ</td>
</tr>
</tbody>
</table>
<p>上述就是随处可见的经典的五十音图。这里每一个单元格内，左侧为平假名，右侧为相对应的、读音一致的片假名。另外，表格内以加粗标记的两个单元格，是两个古日语中使用但目前已经停用的历史假名。</p>
<p>此外，我们需要注意的是，日语的假名除去五十音图内的清音假名之外，还有增加浊化标记的浊音假名、表示鼻音的拨音假名、表示多元音的拗音假名以及促音和长音表记法则等。接下来逐一介绍。</p>
<p>か行、さ行、た行、は行的清音假名可以加上浊点「゛」表示浊化。此外，は行的清音假名还能加上半浊点「゜」表示半浊化。所有浊音假名为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">濁音</th>
<th style="text-align: center;">あ段</th>
<th style="text-align: center;">い段</th>
<th style="text-align: center;">う段</th>
<th style="text-align: center;">え段</th>
<th style="text-align: center;">お段</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">が行</td>
<td style="text-align: center;">が ガ</td>
<td style="text-align: center;">ぎ ギ</td>
<td style="text-align: center;">ぐ グ</td>
<td style="text-align: center;">げ ゲ</td>
<td style="text-align: center;">ご ゴ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ざ行</td>
<td style="text-align: center;">ざ ザ</td>
<td style="text-align: center;">じ ジ</td>
<td style="text-align: center;">ず ズ</td>
<td style="text-align: center;">ぜ ゼ</td>
<td style="text-align: center;">ぞ ゾ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">だ行</td>
<td style="text-align: center;">だ ダ</td>
<td style="text-align: center;">ぢ ヂ</td>
<td style="text-align: center;">づ ヅ</td>
<td style="text-align: center;">で デ</td>
<td style="text-align: center;">ど ド</td>
</tr>
<tr class="even">
<td style="text-align: center;">ば行</td>
<td style="text-align: center;">ば バ</td>
<td style="text-align: center;">び ビ</td>
<td style="text-align: center;">ぶ ブ</td>
<td style="text-align: center;">べ べ</td>
<td style="text-align: center;">ぼ ボ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ぱ行</td>
<td style="text-align: center;">ぱ パ</td>
<td style="text-align: center;">ぴ ピ</td>
<td style="text-align: center;">ぷ プ</td>
<td style="text-align: center;">ぺ ぺ</td>
<td style="text-align: center;">ぽ ポ</td>
</tr>
</tbody>
</table>
<p>部分い段的假名可以附加小写的「ゃ」「ゅ」「ょ」等构成多元音，即拗音。浊音假名也可以形成拗音，所有的拗音包括：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">拗音</th>
<th style="text-align: center;">＋「ゃ」</th>
<th style="text-align: center;">＋「ゅ」</th>
<th style="text-align: center;">＋「ょ」</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">き</td>
<td style="text-align: center;">きゃ キャ</td>
<td style="text-align: center;">きゅ キュ</td>
<td style="text-align: center;">きょ キョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">し</td>
<td style="text-align: center;">しゃ シャ</td>
<td style="text-align: center;">しゅ シュ</td>
<td style="text-align: center;">しょ ショ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ち</td>
<td style="text-align: center;">ちゃ チャ</td>
<td style="text-align: center;">ちゅ チュ</td>
<td style="text-align: center;">ちょ チョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">に</td>
<td style="text-align: center;">にゃ ニャ</td>
<td style="text-align: center;">にゅ ニュ</td>
<td style="text-align: center;">にょ ニョ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ひ</td>
<td style="text-align: center;">ひゃ ヒャ</td>
<td style="text-align: center;">ひゅ ヒュ</td>
<td style="text-align: center;">ひょ ヒョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">み</td>
<td style="text-align: center;">みゃ ミャ</td>
<td style="text-align: center;">みゅ ミュ</td>
<td style="text-align: center;">みょ ミョ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">り</td>
<td style="text-align: center;">りゃ リャ</td>
<td style="text-align: center;">りゅ リュ</td>
<td style="text-align: center;">りょ リョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぎ</td>
<td style="text-align: center;">ぎゃ ギャ</td>
<td style="text-align: center;">ぎゅ ギュ</td>
<td style="text-align: center;">ぎょ ギョ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">じ</td>
<td style="text-align: center;">じゃ ジャ</td>
<td style="text-align: center;">じゅ ジュ</td>
<td style="text-align: center;">じょ ジョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぢ</td>
<td style="text-align: center;">ぢゃ ヂャ</td>
<td style="text-align: center;">ぢゅ ヂュ</td>
<td style="text-align: center;">ぢょ ヂョ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">び</td>
<td style="text-align: center;">びゃ ビャ</td>
<td style="text-align: center;">びゅ ビュ</td>
<td style="text-align: center;">びょ ビョ</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぴ</td>
<td style="text-align: center;">ぴゃ ピャ</td>
<td style="text-align: center;">ぴゅ ピュ</td>
<td style="text-align: center;">ぴょ ピョ</td>
</tr>
</tbody>
</table>
<p>此外，拨音假名仅有一个，其平假名形式为「ん」，片假名形式为「ン」，表示鼻音。</p>
<p>促音的含义是这一个音节不发音，停留一个假名的时长。促音标记是小写的「っ」，片假名形式为「ッ」。</p>
<p>长音的含义是延长上一个假名的发音一个音节。平假名中使用あ行假名标记长音，而片假名有专用的长音记号「ー」。</p>
<p>平假名的长音标记法则为如下。前一个假名位于あ段则使用「あ」标记，位于い段则使用「い」标记，位于う段则使用「う」标记，位于え段则使用「い」标记，位于お段则使用「う」标记。例如「かあ」「しい」「むう」「けい」「のう」等。可能出现的例外是「え」和「お」的长音可以标记为「ええ」和「おお」。</p>
<p>接下来我们需要简单说明罗马字注音系统，而目前大部分日语输入法均是基于罗马字注音系统的，我们可以将其理解为日语版本的拼音。</p>
<p>首先说明清浊假名的罗马字表记：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">ローマ字</th>
<th style="text-align: center;">あ段</th>
<th style="text-align: center;">い段</th>
<th style="text-align: center;">う段</th>
<th style="text-align: center;">え段</th>
<th style="text-align: center;">お段</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">あ行</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">u</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">o</td>
</tr>
<tr class="even">
<td style="text-align: center;">か行</td>
<td style="text-align: center;">ka</td>
<td style="text-align: center;">ki</td>
<td style="text-align: center;">ku</td>
<td style="text-align: center;">ke</td>
<td style="text-align: center;">ko</td>
</tr>
<tr class="odd">
<td style="text-align: center;">さ行</td>
<td style="text-align: center;">sa</td>
<td style="text-align: center;">si / shi</td>
<td style="text-align: center;">su</td>
<td style="text-align: center;">se</td>
<td style="text-align: center;">so</td>
</tr>
<tr class="even">
<td style="text-align: center;">た行</td>
<td style="text-align: center;">ta</td>
<td style="text-align: center;">ti / chi</td>
<td style="text-align: center;">tu / tsu</td>
<td style="text-align: center;">te</td>
<td style="text-align: center;">to</td>
</tr>
<tr class="odd">
<td style="text-align: center;">な行</td>
<td style="text-align: center;">na</td>
<td style="text-align: center;">ni</td>
<td style="text-align: center;">nu</td>
<td style="text-align: center;">ne</td>
<td style="text-align: center;">no</td>
</tr>
<tr class="even">
<td style="text-align: center;">は行</td>
<td style="text-align: center;">ha</td>
<td style="text-align: center;">hi</td>
<td style="text-align: center;">hu / fu</td>
<td style="text-align: center;">he</td>
<td style="text-align: center;">ho</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ま行</td>
<td style="text-align: center;">ma</td>
<td style="text-align: center;">mi</td>
<td style="text-align: center;">mu</td>
<td style="text-align: center;">me</td>
<td style="text-align: center;">mo</td>
</tr>
<tr class="even">
<td style="text-align: center;">や行</td>
<td style="text-align: center;">ya</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">yu</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">yo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ら行</td>
<td style="text-align: center;">ra</td>
<td style="text-align: center;">ri</td>
<td style="text-align: center;">ru</td>
<td style="text-align: center;">re</td>
<td style="text-align: center;">ro</td>
</tr>
<tr class="even">
<td style="text-align: center;">わ行</td>
<td style="text-align: center;">wa</td>
<td style="text-align: center;">wi</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">we</td>
<td style="text-align: center;">wo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">が行</td>
<td style="text-align: center;">ga</td>
<td style="text-align: center;">gi</td>
<td style="text-align: center;">gu</td>
<td style="text-align: center;">ge</td>
<td style="text-align: center;">go</td>
</tr>
<tr class="even">
<td style="text-align: center;">ざ行</td>
<td style="text-align: center;">za</td>
<td style="text-align: center;">zi / ji</td>
<td style="text-align: center;">zu</td>
<td style="text-align: center;">ze</td>
<td style="text-align: center;">zo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">だ行</td>
<td style="text-align: center;">da</td>
<td style="text-align: center;">di / ji</td>
<td style="text-align: center;">du / zu</td>
<td style="text-align: center;">de</td>
<td style="text-align: center;">do</td>
</tr>
<tr class="even">
<td style="text-align: center;">ば行</td>
<td style="text-align: center;">ba</td>
<td style="text-align: center;">bi</td>
<td style="text-align: center;">bu</td>
<td style="text-align: center;">be</td>
<td style="text-align: center;">bo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ぱ行</td>
<td style="text-align: center;">pa</td>
<td style="text-align: center;">pi</td>
<td style="text-align: center;">pu</td>
<td style="text-align: center;">pe</td>
<td style="text-align: center;">po</td>
</tr>
</tbody>
</table>
<p>这里有部分的假名有两种罗马字表记，前者是理论表记，即为了保证同行假名使用同一辅音表记，同段假名使用同一元音表记从而得到的表记，而后者是更为贴近事实发音的表记。根据罗马字表记应当和实际发音贴合的原则，我们一般倾向于使用后者。</p>
<p>这里需要注意，「じ」和「ぢ」、「ず」和「づ」的实际发音是完全一致的，我们根据罗马字表记应当和实际发音贴合的原则，这两对同音假名也应当使用相同的罗马字表记。例如「<code>@ 気付 きづ</code>く」的罗马字表记应当为「kizuku」，「<code>@ 縮 ちぢ</code>む」的罗马字表记应当为「chijimu」。但是在实际输入法中输入该假名的时候，需要使用前者，即理论的罗马字表记以区别这两对同音假名。</p>
<p>之后是拗音假名的表记：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">拗音ローマ字</th>
<th style="text-align: center;">＋「ゃ」</th>
<th style="text-align: center;">＋「ゅ」</th>
<th style="text-align: center;">＋「ょ」</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">き</td>
<td style="text-align: center;">kya</td>
<td style="text-align: center;">kyu</td>
<td style="text-align: center;">kyo</td>
</tr>
<tr class="even">
<td style="text-align: center;">し</td>
<td style="text-align: center;">sya / sha</td>
<td style="text-align: center;">syu / shu</td>
<td style="text-align: center;">syo / sho</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ち</td>
<td style="text-align: center;">cya</td>
<td style="text-align: center;">cyu</td>
<td style="text-align: center;">cyo</td>
</tr>
<tr class="even">
<td style="text-align: center;">に</td>
<td style="text-align: center;">nya</td>
<td style="text-align: center;">nyu</td>
<td style="text-align: center;">nyo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ひ</td>
<td style="text-align: center;">hya</td>
<td style="text-align: center;">hyu</td>
<td style="text-align: center;">hyo</td>
</tr>
<tr class="even">
<td style="text-align: center;">み</td>
<td style="text-align: center;">mya</td>
<td style="text-align: center;">myu</td>
<td style="text-align: center;">myo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">り</td>
<td style="text-align: center;">rya</td>
<td style="text-align: center;">ryu</td>
<td style="text-align: center;">ryo</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぎ</td>
<td style="text-align: center;">gya</td>
<td style="text-align: center;">gyu</td>
<td style="text-align: center;">gyo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">じ</td>
<td style="text-align: center;">zya / jya / ja</td>
<td style="text-align: center;">zyu / jyu / ju</td>
<td style="text-align: center;">zyo / jyo / jo</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぢ</td>
<td style="text-align: center;">dya / jya / ja</td>
<td style="text-align: center;">dyu / jyu / ju</td>
<td style="text-align: center;">dyo / jyo / jo</td>
</tr>
<tr class="odd">
<td style="text-align: center;">び</td>
<td style="text-align: center;">bya</td>
<td style="text-align: center;">byu</td>
<td style="text-align: center;">byo</td>
</tr>
<tr class="even">
<td style="text-align: center;">ぴ</td>
<td style="text-align: center;">pya</td>
<td style="text-align: center;">pyu</td>
<td style="text-align: center;">pyo</td>
</tr>
</tbody>
</table>
<p>同样，这里部分拗音假名有多个表记方式。为了记号统一不引起歧义，我们规定「しゃ」「しゅ」「しょ」使用「sya」「syu」「syo」表记，「じゃ」「じゅ」「じょ」使用「jya」「jyu」「jyo」表记，「ぢゃ」「ぢゅ」「ぢょ」使用「jya」「jyu」「jyo」表记。</p>
<p>拨音的罗马字则始终为「n」，但是根据实际的发音情况可以表记为「m」「ng」。同样，为了记号统一，我们仅使用「n」表记拨音。</p>
<p>长音的表记有两种常用体系。一种是在需要长音的音节的元音上加一个短横表示该音节需要长音，例如「<code>@ 大阪 おおさか</code>」表记为「ōsaka」。而我们采用另外一种表记体系，即如实表记所用假名，例如「<code>@ 経済 けいざい</code>」表记为「keizai」。</p>
<p>促音的表记方式则一般为双写促音后一音节的辅音。例如「しっかり」表记为「shikkari」。</p>
<p>此外，我们额外规定，如果需要用罗马字表记音译的外来语单词，应当使用原语言的拉丁字表记，而非用罗马字表记日语假名。例如，「フィルム」应当表记为「film」，而非「firumu」。这样规定的目的是回避现代日语中用于音译外来词产生的若干新拗音（例如上述例子中的「フィ」）暂且没有正规的罗马字表记的问题。当然，为了将外来语罗马字表记和正常的日语罗马字区分开，可以使用空格、括号等方式表示区分。</p>
<p>最后需要提醒的是三个日语助词的发音和表记规则。「は」「へ」「を」分别为标记主题的副助词、标记方向的补格助词、宾格助词，这三者若按照五十音图的对应关系，应当发音为「ha」「he」「wo」。但是当它们作为助词的时候，应当发音为「wa」「e」「o」，其罗马字表记也需要相应变化。然而在输入法中输入这三个假名的时候，由于输入法不具有语句结构分析功能，所以依然需要按照五十音图的对应规则输入。</p>
<div class="note info no-icon"><p>在日语假名创立初期，读音和写法是一一对应的，然而语音变化的速度远快于书写方法，在中古日语中经常有读音和写法无法对应的现象。到了现代，日本政府推行了读写一致的语言政策，目的是重新让假名读音和写法一致化。然而由于「は」「へ」「を」作为助词的频率实在是太高，不一致的读写反而是大众中普遍的用法，所以为了符合大众用语习惯，读写一致政策将这三者作为例外保留。</p>
<p>另外，由于假名「を」在现代日语中事实上已经几乎丧失了作为宾格助词外的所有其他用法，而该用法读「o」音。所以现在也有部分教材直接称假名「を」读音为「o」而不提读音「wo」。</p>
</div>
<h2 id="chapter-1-section-1-练习">Chapter 1 Section 1 练习</h2>
<p>【第一问】尝试为下述句子给出罗马字表记，语句中的所有汉字已经在其正上方使用假名标记了其读音。考虑到目前还未讲解日语语法，故这里将所有助词均使用加粗标记。</p>
<ul>
<li>よろしくお<code>@ 願 ねが</code>いします。（请多指教）</li>
<li>おれ<strong>は</strong><code>@ 兄弟三人 きょうだいさんにん</code><strong>が</strong>います。（我有三个兄弟姐妹）</li>
<li>はやく<code>@ 容疑者 ようぎしゃ</code><strong>の</strong><code>@ 情報 じょうほう</code><strong>を</strong><code>@ 調 しら</code>べ<strong>て</strong>ください。（赶快调查嫌疑人的信息）</li>
<li>ケーキ<strong>を</strong><code>@ 作 つく</code>りすぎた<strong>ので</strong>、これ<strong>を</strong><code>@ 持 も</code>っ<strong>て</strong>おばあさん<strong>に</strong><code>@ 行 い</code>っ<strong>て</strong>あげ<strong>て</strong>。（蛋糕做得有点多了，你去把这些拿给你奶奶）</li>
</ul>
<p>【第二问】尝试根据罗马音表记写出句子的平假名表示，暂不要求写汉字或者翻译外来语，罗马音表记已经为词语和词语之间加上空格。考虑到目前还未讲解日语语法，故这里将所有助词均使用加粗标记。</p>
<ul>
<li>yat<strong>te</strong> minakere<strong>ba</strong> nande<strong>mo</strong> shiranai<strong>kara</strong> yat<strong>te</strong> miyou.</li>
<li>tenkiyohou<strong>ni</strong> yot<strong>te</strong>, ashita<strong>wa</strong> ame<strong>ga</strong> furisouni<strong>wa</strong> nai.</li>
<li>hajimari<strong>ga</strong> are<strong>ba</strong>, itsuka owari<strong>wa</strong> kitto kuru<strong>kara</strong>.</li>
<li>taihen<strong>ni</strong> moushiwake arimasendeshita.</li>
</ul>
<h1 id="日语三大文字体系的历史和使用惯例">日语三大文字体系的历史和使用惯例</h1>
<p>上一节我们已经讲解了日语中两套假名系统以及罗马字注音系统。平假名、片假名这两套假名，加上从汉语中借鉴的汉字，共同构成了当今日语的文字体系。那么，我们就需要了解，何时使用汉字，何时使用平假名，何时使用片假名。</p>
<h2 id="表音汉字表意汉字假名的历史">表音汉字、表意汉字、假名的历史</h2>
<p>在汉语传入日本之前，日语是一个没有文字的语言。汉语传入日本，为日本带来了两样新事物，一是文字，二是原先日语中不具有的新词汇。</p>
<p>在这后日本人尝试使用汉字表记日语，而由于汉字同时具有音和意两个维度，所以在使用汉字表记日语的时候有两种思路。一是将汉字作为表音文字，用汉字表记与之同音的日语词，二是将汉字作为表意文字，用汉字表记与之同意的日语词。</p>
<p>作为表音文字的汉字最经典的代表就是万叶假名。而万叶假名中最具代表性的一个词就是「<code>@ 伊呂波 いろは</code>」，其用于表记日语词「iroha」，这显然是直接借用了这三个汉字的读音表记日语词。</p>
<p>作为表意文字的汉字则多见于各类训读词。比如日语中将“山”这一事物称为「yama」，而汉字中“山”一字恰好表达相同的意思，那么日语就会把“山”这一个汉字训读成「<code>@ 山 やま</code>」。这类字我们称为训读汉字。当然，训读并不仅仅局限于单字，这些我们后续进行说明。</p>
<p>而表音汉字具有一个缺陷，即使用了笔画繁杂的汉字仅仅表达了一个音节，这造成了书面传抄的极大不便。基于此原因，后续人们传抄的时候，会有意简化笔画来提高传抄效率。而经过足够长的时间，日语形成了两套人们都认可的简体表音汉字，而这就是平假名和片假名。</p>
<p>我们实际依然可以在现代假名中找到汉字的残余。比如说平假名「ぬ」就是从汉字「奴」简化而来，而片假名「イ」则取自汉字「依」的偏旁。</p>
<p>另外，上面提到汉语的传入带来了部分新词汇，这些词汇日语本身不具有，故这些词汇自然而然地使用汉字作为书面表记，且读音尽可能模仿当时的汉语读音。那么这里使用的汉字就和汉语中一样，既表音又表意。这类汉字我们成为音读汉字。</p>
<h2 id="现代日语中的汉字">现代日语中的汉字</h2>
<p>根据上面的论述，可以注意到现代日语中的汉字有三种情况：</p>
<ul>
<li>作为表意汉字表记日语固有词（即训读汉字）</li>
<li>万叶假名的残留，作为表音汉字表记日语固有词</li>
<li>同时作为表音汉字和表意汉字表记汉语借词（即音读汉字）</li>
</ul>
<p>实际上，现代日语中的汉字还有可能出现在下述情况中：</p>
<ul>
<li>作为假借汉字表记各类词语</li>
</ul>
<p>就出现频率而言，现代日语中最为常见的两种汉字使用方式是第 1 种情况和第 3 种情况。第 2 种情况目前几乎仅出现在部分专有名词中，比如姓名中。例如女性名「<code>@ 奈美 なみ</code>」，其汉字仅表音，不表意。</p>
<p>此外，第 3 种情况的音读汉字除去表记汉语借词之外，其实也适用于和制汉语的情形。和制汉语指的是在明治维新时，大量西方语言中的概念传入日本后，日本翻译家模仿汉字词创造的一批汉字词。这些和制汉语和传统汉语借词具有类似的逻辑，其汉字表记同时表音表意，故也可以认为是表音汉字。例如词语「<code>@ 共和 きょうわ</code>」，该词汇后续甚至传入中国，被纳入汉语词汇。</p>
<p>假借汉字，即日语中所谓的「<code>@ 当 あ</code>て<code>@ 字 じ</code>」，其作用一般是如果某一词语难以找到很合适的汉字表记，那么借用已有的表音汉字或者表意汉字对应关系，为该词语选定汉字表记。</p>
<p>比如说日语词「suteki」。因为已经有音读汉字「<code>@ 素 す</code>」和音读汉字「<code>@ 敵 てき</code>」，将其拼接即可得到该词语的汉字表记为「<code>@ 素敵 すてき</code>」。而此词语的含义为“美好”，和其汉字表记的汉语含义并无联系。</p>
<p>另外再举一例，日语词「shikata」。因为已经有音读汉字「<code>@ 仕 し</code>」和训读汉字「<code>@ 方 かた</code>」，将其拼接即可得到该词语的汉字表记为「<code>@ 仕方 しかた</code>」。此词语的含义为“方法、手段”。</p>
<p>这里需要注意的是，音读汉字「<code>@ 仕 し</code>」是现代日语中相当常见的假借字之一，大量以「shi」音开头的词汇均常常使用该字假借表记。比如「<code>@ 仕付 しつけ</code>」「<code>@ 仕方 しかた</code>」「<code>@ 仕草 しぐさ</code>」「<code>@ 仕事 しごと</code>」「<code>@ 仕舞 しま</code>う」。这些词的含义分别为“管教、约束”“方法、手段”“台词、说辞”“工作”“结束、终结”。</p>
<p>这里引出了一个问题。上述的情况 2 中的汉字也仅仅表音而不表意，而刚刚提到的部分假借字也是仅仅表音而不表意，这两者的区别是什么呢？</p>
<div class="note info no-icon"><p>可以这样理解，仅使用表音汉字的假借字拆开来，单个字依然能同时表音表意。比如「<code>@ 素敵 すてき</code>」拆开为「<code>@ 素 す</code>」和「<code>@ 敵 てき</code>」，「<code>@ 素 す</code>」依然表示“本来的、普通的”的含义，「<code>@ 敵 てき</code>」依然表示“敌人”的含义。而情况 2 中的万叶假名残余，其从根本上就没有表意的可能。即使将「<code>@ 奈美 なみ</code>」，拆开为「<code>@ 奈 な</code>」和「<code>@ 美 み</code>」，这两者依然仅仅表音不表意。</p>
</div>
<p>另外一种假借字出现的情况是用汉字表记汉语以外的外来语，这些词汇完全外来，没有原有的汉字表记，所以如果需要使用汉字表记，则必须假借。一般而言，假借表记这些词汇的时候，常常使用表音汉字。当然，如果能做到表音和表意相结合，则更能体现语言的艺术。</p>
<p>例如，来源于英语词 Asia 的日语词「ajia」，其曾用的汉字表记为「<code>@ 亜細亜 アジア</code>」。这里仅仅考虑了汉字的读音，而没有考虑汉字的含义。</p>
<p>仅表意的假借也是存在的。例如来源于英语词 beer 的日语词「biiru」，其曾用的汉字表记为「<code>@ 麦酒 ビール</code>」。这里显然仅仅考虑了汉字的含义，并未考虑汉字读音。</p>
<p>而另外一例，来源于英语词 club 的日语词「kurabu」，其曾用的汉字表记为「<code>@ 俱楽部 クラブ</code>」。这里做到了音意结合，是经典的优秀翻译。该汉字表记后续传入中国，成为了汉语对该英语词的翻译。</p>
<p>此外，假借字还常常出现在文艺作品中产生特别的表达效果。比如说著名的词语「<code>@ 五月蠅 うるさ</code>い」，这类故意不使用常用汉字表记的假借字，一般侧重于表达假借汉字本身的含义。比如说，现在文艺作品中常常会使用「<code>@ 運命 さだめ</code>」而非常用的「<code>@ 定 さだ</code>め」表记固有词「sadame」，这样更能表达出“命运本身就是确定之事”这样的含义。</p>
<p>而假借字甚至可以用来达到反语的表达效果。比如用「<code>@ 軽 おも</code>い」来表记原本含义为“沉重的”的固有词「omoi」，以达到“看似轻浮实则沉重”的表达效果。该假借字取自歌词：</p>
<div class="note info no-icon"><p><code>@ 思 おも</code>いもしない<code>@ 軽 おも</code>い<code>@ 言葉 ことば</code>、<code>@ 何度 なんど</code> <code>@ 使 つか</code>い<code>@ 古 ふる</code>すのか。（那些不经思考的轻佻话语，你还打算再来敷衍我多少次）</p>
<p>——「カワキヲアメク」</p>
</div>
<h2 id="现代日语中的平假名">现代日语中的平假名</h2>
<p>观察现代日语中的动词、形容词、形容动词词例：</p>
<ul>
<li><code>@ 動詞 どうし</code>：<code>@ 行 い</code>く、<code>@ 来 く</code>る、<code>@ 話 はな</code>す、<code>@ 飛 と</code>ぶ、<code>@ 立 た</code>つ</li>
<li><code>@ 形容詞 けいようし</code>：<code>@ 赤 あか</code>い、<code>@ 黒 くろ</code>い、<code>@ 長 なが</code>い、<code>@ 広 ひろ</code>い、<code>@ 美 うつく</code>しい、<code>@ 難 むずか</code>しい</li>
<li><code>@ 形容動詞 けいようどうし</code>：<code>@ 好 す</code>きだ、<code>@ 嫌 きら</code>いだ、<code>@ 静 しず</code>かだ</li>
</ul>
<p>可以注意到这些词语除去表意的训读汉字作为词干之外，还有使用平假名表记的词尾，这些词尾一般称为送假名，即日语「<code>@ 送 おく</code>り<code>@ 仮名 がな</code>」。这些送假名承担的作用是变形以表达语法含义，本身并不表达任何含义。</p>
<p>这些用言的词尾应当以什么样的形式变化来表达语法含义，则在后续的部分进行具体的讲解。</p>
<p>另外，在实际的语用环境下，还有省略送假名的情况。这种省略情况需要在简单介绍日语用言词尾变形原则后具体讲解。</p>
<p>而这也是现代日语文字中平假名的重要作用之一，即表记用言（可以粗略理解为动词、形容词、形容动词的集合）的送假名部分，承担通过变形表达语法含义的作用。</p>
<p>现代日语文字中平假名的第二个重要作用是在含义虚化的词语中取代表意汉字。一个较为典型的例子是词语「koto」，其具有汉字表记「<code>@ 事 こと</code>」。但是如果这个词作为形式体言以承担动词名词化的语法作用的时候，则一般不使用汉字表记，而是直接使用平假名表记为「こと」。比如说下述例句：</p>
<div class="note info no-icon"><p>あれはもう<code>@ 去年 きょねん</code>の<strong><code>@ 事 こと</code></strong>だった。（那已经是去年的事了）</p>
<p>わたしは<code>@ 日本語 にほんご</code>で<code>@ 手紙 てがみ</code>を<code>@ 書 か</code>く<strong>こと</strong>ができます。（我能用日语写信）</p>
</div>
<p>另外，如果某一词语同时具有实词和含义虚化词语的双重属性，并且这两个含义差异较大，则该词语使用汉字还是使用平假名表记甚至可以影响语句的细节含义。比如说词语「kudasaru」，其作为实词，使用汉字表记「<code>@ 下 くだ</code>さる」时，含义一般为“从他人处获取物品”，而其含义虚化，使用平假名表记「くださる」并接续在助词「て」之后时，其作用是表达请求的语气。那么观察下述例句，这里使用该动词的命令形而非原形：</p>
<div class="note info no-icon"><p><code>@ 資料 しりょう</code>を<code>@ 出 だ</code>して<strong><code>@ 下 くだ</code>さい</strong>。（把资料取出来给我）</p>
<p><code>@ 資料 しりょう</code>を<code>@ 出 だ</code>して<strong>ください</strong>。（请取出资料）</p>
</div>
<p>前者则更倾向于“把资料取出来给我”的含义，而后者则更倾向于“请取出资料”的含义。补充一点，上述两句话在口语中无法区分，但是可以通过对话情境上下文作出区分。</p>
<p>而在新闻标题、标识语等需要节省文字空间的书面条件下，这类词语无论表达何种细节含义也倾向于使用汉字表记以节省空间。</p>
<p>此外，部分日语词语本身不具有汉字表记，这类词语仅能使用假名表记。这类词主要是各类助词和助动词，以及部分本土的副词。例如，表示否定的助动词「ない」和含义为“整洁、利落”的副词「さっぱり」。</p>
<p>而现代日语中，部分原本具有汉字表记的词语由于使用者习惯的变化，逐渐不会使用其汉字表记。例如，含义为“大量、许多”的副词「takusan」，原本具有汉字表记「<code>@ 沢山 たくさん</code>」，而现在大部分时候使用的是其平假名表记「たくさん」。</p>
<p>这类逐渐丢失汉字表记的词语还包括由于汉字表记过于复杂导致使用者逐步放弃汉字表记的词语。比如词语「<code>@ 改竄 かいざん</code>」，由于汉字过于复杂，目前常见的表记方式为「<code>@ 改 かい</code>ざん」。</p>
<p>最后需要指出，上述规则也可能是存在例外的。也就是说，实际条件下具体应当选择何种表记，需要视实际环境，或者根据母语者的偏好决定。</p>
<h2 id="现代日语中的片假名">现代日语中的片假名</h2>
<p>现代日语中片假名最重要的作用是表记外来语，例如：</p>
<div class="note info no-icon"><p>この<code>@ 番組 ばんぐみ</code>はご<code>@ 覧 らん</code>の<strong>スポンサー</strong>の<code>@ 提供 ていきょう</code>でお<code>@ 送 おく</code>りします。（该节目由下述赞助商冠名播出）</p>
</div>
<p>这里的片假名即用于表记来自英语的外来词 sponsor。</p>
<p>此外，即使我们使用假借字表记了外来词，其注音假名（写在汉字上方表明其发音的假名，又称振假名）也应当写为片假名。这一规则常用于来自现代汉语的借词，这类借词往往有汉字表记，但是表记其读音的时候依然需要使用片假名。例如：</p>
<div class="note info no-icon"><p><code>@ 上海 シャンハイ</code>から<code>@ 東京 とうきょう</code>までの<code>@ 飛行機 ひこうき</code>。（从上海到东京的飞机）</p>
</div>
<p>除去表记外来语，片假名还有一个重要作用，即表记需要强调的词语。例如下述歌词：</p>
<div class="note info no-icon"><p><code>@ 見 み</code>て<code>@ 見 み</code>ぬ<strong>フリ</strong>なだけ。（我只是在视而不见）</p>
<p>——「キュートなカノジョ」</p>
</div>
<p>这里「<code>@ 見 み</code>て<code>@ 見 み</code>ぬふり」是日语熟语，含义为“视而不见”。这里将表达“装作”含义的「furi」使用片假名表记，则更为强调“我早已知晓，只不过是装作不知道”这样的含义。</p>
<h2 id="chapter-1-section-2-练习">Chapter 1 Section 2 练习</h2>
<p>【第一问】根据我们对日语中汉字的了解，除去假借字外，训读汉字和音读汉字均有表意的作用。所以当日语词的汉字表记难以使用汉字的汉语含义理解的时候，其往往是假借汉字。基于这样的认知，尝试指出下述句子中的假借汉字。下述各个句子均已经给出其汉语翻译：</p>
<ul>
<li><code>@ 囚人 しゅうじん</code>は<code>@ 看守 かんしゅ</code>の<code>@ 目 め</code>を<code>@ 誤魔化 ごまか</code>して<code>@ 逃 に</code>げた。（犯人糊弄过看守的监视逃走了）</li>
<li><code>@ 彼 かれ</code>は<code>@ 勤勉家 きんべんか</code>だから、<code>@ 成功 せいこう</code>するのは<code>@ 当 あ</code>たり<code>@ 前 まえ</code>だ。（他作为实干家成功是当然的）</li>
</ul>
<p>【第二问】音读汉字和训读汉字的差别在于训读汉字往往不表音，所以其读音往往和汉语读音有所差别。基于这样的认知，首先指出下面句子中的假借字，然后将所有汉字分为音读和训读两类。下述各个句子均已经给出其汉语翻译：</p>
<ul>
<li><code>@ 明日 あした</code> <code>@ 七時 しちじ</code>に<code>@ 会社 かいしゃ</code>の<code>@ 受付 うけつけ</code>で<code>@ 会 あ</code>いましょう。（明天七点在公司前台见吧）</li>
<li><code>@ 一寸 いっすん</code>の<code>@ 光陰 こういん</code>を<code>@ 軽 かろ</code>んずべからず。（一寸光阴不可轻）</li>
<li>この<code>@ 素晴 すば</code>らしい<code>@ 世界 せかい</code>に<code>@ 祝福 しゅくふく</code>を。（为这个美好的世界献上祝福）</li>
<li>この<code>@ 橋 はし</code>は<code>@ 石 いし</code>で<code>@ 出来 でき</code>ている。（这座桥是用石头修的）</li>
</ul>
<h1 id="日语汉字的训读和音读">日语汉字的训读和音读</h1>
<p>我们再次回忆日语中的汉字出现的场合，实际上主要依然是两类，即训读汉字和音读汉字，而假借字也一般从这两类字假借。</p>
<p>那么这一部分将会深入探讨汉字的训读和音读，讲解区分训读和音读的基本方法，基于此即可简单掌握日语汉字的发音。当然，大量的阅读日语语料开拓词汇量也是学习日语汉字发音的重要步骤。</p>
<h2 id="单字训熟字训词组训读">单字训、熟字训、词组训读</h2>
<p>我们最常见的训读形式就是单字训。单字训的逻辑是使用汉字表记与该汉字同义的日语词，从而我们称将这个汉字训读为日语词的读音。比如说我们用汉字“山”表记同义日语词「yama」，我们就称将“山”训读成「やま」。</p>
<p>此外，我们需要提醒动词等涉及到词尾的词语的训读。比如说表示“消失”的动词「kieru」和表示“使熄灭”的动词「kesu」，它们的常用表记为「<code>@ 消 き</code>える」和「<code>@ 消 け</code>す」。可以注意到他们使用了同样的汉字，但是这个汉字读音并不一致。所以为了区分，我们在提到“消”这个汉字的训读的时候，需要加上词尾，称将“消”训读为「き‐える」和「け‐す」。</p>
<p>另外，由于汉字多义，导致单个汉字可以用于表记多个日语词，这就带来了训读多音字。比如说“生”这个汉字，其表示“未经加工的”的含义的时候，训读为「なま」，词例为「<code>@ 生 なま</code>ビール」。表示“生长”的含义的时候，训读为「は‐やす」，词例为「<code>@ 芽生 めば</code>える」。表示“生存”的含义的时候，训读为「い‐きる」，词例为「<code>@ 生 い</code>きる」。表示“生产、分娩”的含义的时候，训读为「う‐む」，词例为「<code>@ 生 う</code>まれつく」。</p>
<p>此外，同一个日语词也可以用多种汉字表记。比如说「warau」，其最常用的表记为「<code>@ 笑 わら</code>う」。而当这个词倾向于表示“嘲笑、嗤笑”的含义的时候，也可以表记为「<code>@ 嗤 わら</code>う」。</p>
<p>熟字训指的是使用一个汉字词组来表记一个日语词，在这种情况下我们并不能说这个汉字词组里面具体某个汉字训读的读音，只能说这个词组整体训读成某个音。熟字训往往是具有日本文化特色的词语，另外，大量的植物和动物名也使用了熟字训。</p>
<p>常见的熟字训包括：</p>
<ul>
<li><code>@ 五月雨 さみだれ</code>、<code>@ 時雨 しぐれ</code>、<code>@ 村雨 むらさめ</code>、<code>@ 梅雨 つゆ</code></li>
<li><code>@ 一昨日 おととい</code>、<code>@ 昨日 きのう</code>、<code>@ 今日 きょう</code>、<code>@ 明日 あした</code>、<code>@ 明後日 あさって</code>、<code>@ 今朝 けさ</code>、<code>@ 昨夜 ゆうべ</code></li>
<li><code>@ 二十日 はつか</code>、<code>@ 二十歳 はたち</code>、<code>@ 一日 ついたち</code>、<code>@ 晦日 みそか</code>、<code>@ 一人 ひとり</code>、<code>@ 二人 ふたり</code></li>
<li><code>@ 田舎 いなか</code>、<code>@ 玩具 おもちゃ</code>、<code>@ 団扇 うちわ</code>、<code>@ 相撲 すもう</code>、<code>@ 台詞 せりふ</code>、<code>@ 太刀 たち</code>、<code>@ 足袋 たび</code>、<code>@ 土産 みやげ</code></li>
<li><code>@ 浴衣 ゆかた</code>、<code>@ 吹雪 ふぶき</code>、<code>@ 紅葉 もみじ</code>、<code>@ 芝生 しばふ</code></li>
</ul>
<p>词组训读指的是使用一个汉字表达一个日语词组。比如说，日语词「<code>@ 祭 まつ</code>り」和「<code>@ 事 こと</code>」的合成词「<code>@ 祭 まつ</code>り<code>@ 事 ごと</code>」具有衍生含义“政治”，所以可以使用一个字“政”表记，从而“政”单字训读为「まつりごと」。</p>
<p>这样的例子还包括：</p>
<ul>
<li><strong><code>@ 黄泉 よみ</code></strong> ＋ <code>@ 帰 かえ</code>る ＝ <code>@ 黄泉帰 よみがえ</code>る → <code>@ 蘇 よみがえ</code>る</li>
<li><code>@ 坂 さか</code> ＋ <code>@ 登 のぼ</code>る ＝ <code>@ 坂登 さかのぼ</code>る → <code>@ 遡 さかのぼ</code>る</li>
<li><code>@ 神 かみ</code> ＋ <code>@ 鳴 な</code>り ＝ <code>@ 神鳴 かみな</code>り → <code>@ 雷 かみなり</code></li>
<li><code>@ 屋 や</code> ＋ <code>@ 取 と</code>る ＝ <code>@ 屋取 やど</code>る → <code>@ 宿 やど</code>る</li>
<li><code>@ 日 ひ</code> ＋ <code>@ 回 まわ</code>り ＝ <code>@ 日回 ひまわ</code>り → <strong><code>@ 向日葵 ひまわり</code></strong></li>
</ul>
<p>根据上述例子中加粗的部分，可以注意到词组训读可能和熟字训结合。</p>
<h2 id="音读汉字的规律">音读汉字的规律</h2>
<p>大部分音读汉字都是一字一音，而且大多都是一个或者两个音节。如果双音节汉字的两个音节不是在模仿一个双音节字，那么第二个音节往往是「く」「き」「つ」等模仿古汉语入声的音节，或者拨音，或者长音。</p>
<p>一般而言，古汉语中具有入声的字，日语音读中会有模仿入声的音节：</p>
<ul>
<li><code>@ 学生 がくせい</code> ＝ が<strong>く</strong>せい</li>
<li><code>@ 責任 せきにん</code> ＝ せ<strong>き</strong>にん</li>
<li><code>@ 刹那 せつな</code> ＝ せ<strong>つ</strong>な</li>
</ul>
<p>而鼻音可能使用拨音去模仿，也可能是使用长音去模仿：</p>
<ul>
<li><code>@ 反対 はんたい</code> ＝ は<strong>ん</strong>たい</li>
<li><code>@ 形容 けいよう</code> ＝ け<strong>い</strong>よ<strong>う</strong></li>
</ul>
<p>这里有一个经验规律，即现代汉语中为前鼻音的字往往在日语音读中是拨音结尾，为后鼻音的字往往在日语音读中是长音结尾。</p>
<p>在了解单个汉字如何音读的基础上，我们需要简单了解音读汉字连读时可能发生的音便。</p>
<p>首先，入声字后面接续送气音的时候，往往发生促音便：</p>
<ul>
<li><code>@ 学校 がっこう</code> ＝ が<strong>く</strong> ＋ <strong>こ</strong>う → が<strong>っこ</strong>う</li>
<li><code>@ 察 さっ</code>する ＝ さ<strong>つ</strong> ＋ <strong>す</strong>る → さ<strong>っす</strong>る</li>
</ul>
<p>如果后面的字的开头是は行假名，往往后者还会发生半浊化：</p>
<ul>
<li><code>@ 八百 はっぴゃく</code> ＝ は<strong>ち</strong> ＋ <strong>ひゃ</strong>く → <strong>はっぴ</strong>ゃく</li>
<li><code>@ 疾風 しっぷう</code> ＝ し<strong>つ</strong> ＋ <strong>ふ</strong>う → <strong>しっぷ</strong>う</li>
</ul>
<p>而如果后面的字开头是浊音，往往不会发生促音便：</p>
<ul>
<li><code>@ 一撃 いちげき</code> ＝ い<strong>ち</strong> ＋ <strong>げ</strong>き → い<strong>ちげ</strong>き</li>
</ul>
<p>其次，如果前一个字以拨音结尾，那么后一个字一般发生浊化，而后面的字的开头是は行假名的时候，也有可能发生半浊化：</p>
<ul>
<li><code>@ 万歳 ばんざい</code> ＝ ば<strong>ん</strong> ＋ <strong>さ</strong>い → ば<strong>んざ</strong>い</li>
<li><code>@ 三百 さんびゃく</code> ＝ さ<strong>ん</strong> ＋ <strong>ひゃ</strong>く → さ<strong>んびゃ</strong>く</li>
<li><code>@ 順風満帆 じゅんぷうまんぱん</code> ＝ じゅ<strong>ん</strong> ＋ <strong>ふ</strong>う ＋ ま<strong>ん</strong> ＋ <strong>は</strong>ん ＝ じゅ<strong>んぷ</strong>うま<strong>んぱ</strong>ん</li>
</ul>
<p>当然，这一规律也是存在例外的：</p>
<ul>
<li><code>@ 関西 かんさい</code> ＝ か<strong>ん</strong> ＋ <strong>さ</strong>い → か<strong>んさ</strong>い</li>
</ul>
<p>另外我们需要注意，由于汉语传入日本是多批次的，所以音读汉字根据传入的时代还会分为吴音、汉音、唐音等等，目前大部分音读汉字遵守汉音规律。但是也会有例外，比如说「<code>@ 老若男女 ろうにゃくなんにょ</code>」一词，并不会按照常用的读音规律读成「<code>@ 老 ろう</code> <code>@ 若 じゃく</code> <code>@ 男 だん</code> <code>@ 女 じょ</code>」。</p>
<h2 id="音训混读">音训混读</h2>
<p>部分日语词中可能同时存在训读汉字和音读汉字，这类音训混读词需要特别记忆。音训混读词根据音读和训读出现的顺序分为「<code>@ 湯桶 ゆとう</code> <code>@ 読 よ</code>み」和「<code>@ 重箱 じゅうばこ</code> <code>@ 読 よ</code>み」两类。</p>
<p>「<code>@ 湯桶 ゆとう</code> <code>@ 読 よ</code>み」指的是类似「<code>@ 湯桶 ゆとう</code>」一样先训读汉字后音读汉字的音训混读词。这类词包括「<code>@ 合図 あいず</code>」「<code>@ 大勢 おおぜい</code>」「<code>@ 高台 たかだい</code>」。</p>
<p>「<code>@ 重箱 じゅうばこ</code> <code>@ 読 よ</code>み」指的是类似「<code>@ 重箱 じゅうばこ</code>」一样先音读汉字后训读汉字的音训混读词。这类词包括「<code>@ 馬鹿 ばか</code>」「<code>@ 額縁 がくぶち</code>」「<code>@ 残高 ざんだか</code>」「<code>@ 番組 ばんぐみ</code>」。注意到，这类词的后一个汉字往往会发生浊化。</p>
<p>这类词语的产生，可能是因为两个汉字本身是两个词，一个训读一个音读，后来合成为一个词的时候分别保留原先的读音，从而导致词语内部音训混读，这样形成的词语往往能够从汉字中理解词语含义。当然，也有可能源于假借汉字，这些词语就不太能够直接从汉字理解含义。</p>
<h2 id="日语数量词的读法">日语数量词的读法</h2>
<p>日语的数量词是不规则读法的集中之处，所以这里需要特别提出。</p>
<p>在讲解数量词之前，我们需要简单介绍目前日语中通行的两套数字，即传统日语中的训读数词和借自汉语的音读数词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">漢字</th>
<th style="text-align: center;">訓読み数字</th>
<th style="text-align: center;">音読み数字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;">ひ（と）</td>
<td style="text-align: center;">いち</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;">ふ（た）</td>
<td style="text-align: center;">に</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;">み</td>
<td style="text-align: center;">さん</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;">よ（ん）</td>
<td style="text-align: center;">し</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">い（つ）</td>
<td style="text-align: center;">ご</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">む</td>
<td style="text-align: center;">ろく</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">な（な）</td>
<td style="text-align: center;">しち</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">や</td>
<td style="text-align: center;">はち</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">ここの</td>
<td style="text-align: center;">きゅう・く</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;">とお</td>
<td style="text-align: center;">じゅう</td>
</tr>
<tr class="odd">
<td style="text-align: center;">百</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">ひゃく</td>
</tr>
<tr class="even">
<td style="text-align: center;">千</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">せん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">万</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">まん</td>
</tr>
</tbody>
</table>
<p>基于此，首先说明日本的大数读法。日本的大数读法中，一般而言“四”需要使用训读（其音读「<code>@ 四 し</code>」和「<code>@ 死 し</code>」同音，需要避讳），“七”训读和音读均可（其音读「<code>@ 七 しち</code>」和「<code>@ 死 し</code>」相似，可以避讳）。</p>
<p>之后，需要注意音读数词直接连接时可能出现的音便。而「<code>@ 四 よん</code>」在这里并不会引发浊音便：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;">＋「百」</th>
<th style="text-align: center;">＋「千」</th>
<th style="text-align: center;">＋「万」</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;"><strong>ひゃく</strong></td>
<td style="text-align: center;"><strong>せん</strong></td>
<td style="text-align: center;">いちまん</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;">にひゃく</td>
<td style="text-align: center;">にせん</td>
<td style="text-align: center;">にまん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;">さ<strong>んびゃ</strong>く</td>
<td style="text-align: center;">さ<strong>んぜ</strong>ん</td>
<td style="text-align: center;">さんまん</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;">よんひゃく</td>
<td style="text-align: center;">よんせん</td>
<td style="text-align: center;">よんまん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">ごひゃく</td>
<td style="text-align: center;">ごせん</td>
<td style="text-align: center;">ごまん</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">ろ<strong>っぴゃ</strong>く</td>
<td style="text-align: center;">ろくせん</td>
<td style="text-align: center;">ろくまん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">ななひゃく</td>
<td style="text-align: center;">ななせん</td>
<td style="text-align: center;">ななまん</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">は<strong>っぴゃ</strong>く</td>
<td style="text-align: center;">は<strong>っせ</strong>ん</td>
<td style="text-align: center;">はちまん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">きゅうひゃく</td>
<td style="text-align: center;">きゅうせん</td>
<td style="text-align: center;">きゅうまん</td>
</tr>
</tbody>
</table>
<p>需要注意的是“一百”“一千”不需要表示出“一”这个数量，以及“六千”并没有发生促音便。其余发音均和上述规律以及音读汉字音便规律一致。</p>
<p>一些大数的示例：</p>
<ul>
<li><code>@ 一万千六百 いちまんせんろっぴゃく</code> (11600)</li>
<li><code>@ 四万八千 よんまんはっせん</code> (48000)</li>
<li><code>@ 七千七百 ななせんななひゃく</code> (7700)</li>
</ul>
<p>在具体叙述数量词搭配的时候，我们需要特别指出，下面的讨论不包含表示日期的量词「<code>@ 日 か・にち</code>」、表示个数的量词「つ」、表示人数的量词「<code>@ 人 り・にん</code>」，因为这三个量词的使用方式完全不规则。</p>
<p>在和具体的量词搭配的时候，具体使用训读数词还是音读数词，大约遵守下面的规律。</p>
<ul>
<li>如果数量大于“十”，则无论量词如何，一般使用音读数词：</li>
</ul>
<div class="note info no-icon"><p><code>@ 三十個 さんじゅうこ</code>、<code>@ 十三夜 じゅうさんや</code></p>
</div>
<p>当然，“二十”“五十”“八百”等可能存在部分类似固定搭配用法的训读形式，然而一般而言这些词语也被认为是熟字训而并非普通的数词和量词的联合使用：</p>
<div class="note info no-icon"><p><code>@ 五十嶋 いそじま</code>、<code>@ 八百屋 やおや</code>、<code>@ 二十歳 はたち</code></p>
</div>
<ul>
<li>如果数量为“一”或者“二”，并且量词为训读量词，则一般使用训读数词与之搭配：</li>
</ul>
<div class="note info no-icon"><p><code>@ 一皿 ひとさら</code>、<code>@ 二組 ふたくみ</code>、<code>@ 一滴 ひとしずく</code></p>
</div>
<p>相应的，即使数量为“一”或者“二”，如果量词为音读数词，则一般使用音读数词，此时需要注意汉字连读时的音便（基本只需要注意“一”和音读量词连用且量词以送气音开头时发生促音便）：</p>
<div class="note info no-icon"><p><code>@ 一匹 いっぴき</code>、<code>@ 二羽 にわ</code>、<code>@ 一番 いちばん</code>、<code>@ 二台 にだい</code></p>
</div>
<p>当然，这也是有例外的，比如说音读量词「<code>@ 駅 えき</code>」，在数量为“一”或者“二”的时候，反而使用训读数词：</p>
<div class="note info no-icon"><p><code>@ 一駅 ひとえき</code>、<code>@ 二駅 ふたえき</code></p>
</div>
<ul>
<li>由于避讳问题，数量为“四”的时候往往使用训读数词，不过需要注意「よん」可能约音为「よ」，并且往往「よん」并不会引发浊音便：</li>
</ul>
<div class="note info no-icon"><p><code>@ 四時 よじ</code>、<code>@ 四回 よんかい</code>、<code>@ 四階 よんかい</code></p>
</div>
<p>当然，部分量词在数量为“四”的时候依然使用音读数词。这些词语往往更类似于固定搭配，比如「<code>@ 則 そく</code>」这个量词很少和其他数量连用，即很少见到“三则”这样的表达：</p>
<div class="note info no-icon"><p><code>@ 四月 しがつ</code>、<code>@ 四角 しかく</code>、<code>@ 四則 しそく</code></p>
</div>
<ul>
<li>而数量为“七”的时候，音读和训读量词几乎可以混用，两种均可：</li>
</ul>
<div class="note info no-icon"><p><code>@ 七月 しちがつ</code>、<code>@ 七時 しちじ</code>、<code>@ 七回 ななかい</code>、<code>@ 七本 ななほん</code></p>
</div>
<p>总而言之，数量为“四”或者“七”的时候具体使用何种数词需要根据母语者使用习惯决定。经验规律则是“四”大多用训读数词，“七”的两种数词使用频率大体类似。</p>
<p>对于余下的数量，即“三”“五”“六”“八”“九”“十”，其通常使用音读数词。当然，数量“三”接续训读量词的时候依然可能使用训读数词，但这类例子很少，几乎可以忽略：</p>
<div class="note info no-icon"><p><code>@ 三切 みき</code>れ</p>
</div>
<p>这里接续量词的时候，需要注意可能出现的音便。</p>
<ul>
<li>在送气音开头的量词前，「<code>@ 六 ろく</code>」发生促音便变为「<code>@ 六 ろっ</code>」，「<code>@ 八 はち</code>」发生促音便变为「<code>@ 八 はっ</code>」，「<code>@ 十 じゅう</code>」由于古音事实上存在入声词尾所以也会发生促音便变为「<code>@ 十 じゅっ・じっ</code>」：</li>
</ul>
<div class="note info no-icon"><p><code>@ 六回 ろっかい</code>、<code>@ 八回 はっかい</code>、<code>@ 十回 じゅっかい</code>、<code>@ 六杯 ろっぱい</code>、<code>@ 八杯 はっぱい</code>、<code>@ 十杯 じゅっぱい</code>、<code>@ 十把 じっぱ</code></p>
</div>
<ul>
<li>数量“三”后续的量词如果以は行假名开头，则一般发生浊化，但也可能发生半浊化。另外，以其他可以浊化的假名开头的数词虽然大多不会浊化，但也有浊化的可能：</li>
</ul>
<div class="note info no-icon"><p><code>@ 三杯 さんばい</code>、<code>@ 三発 さんぱつ</code>、<code>@ 三回 さんかい</code>、<code>@ 三階 さんがい</code></p>
</div>
<p>其余的数量则很少发生音便。</p>
<p>当然，现代日语甚至可能使用英语音译数词进行计数。而这种情况经常出现在和英语音译量词连用的情况中：</p>
<div class="note info no-icon"><p><code>@ 二 ツー</code>セット、<code>@ 三 スリー</code>セット</p>
</div>
<p>下面举出部分常用量词和十以内的数词连用的读音情况，部分特殊的加粗注明。</p>
<p>首先是常见的训读数词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 箱 はこ</code></th>
<th style="text-align: center;"><code>@ 組 くみ</code></th>
<th style="text-align: center;"><code>@ 文字目 もじめ</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;">ひとはこ</td>
<td style="text-align: center;">ひとくみ</td>
<td style="text-align: center;">ひともじめ</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;">ふたはこ</td>
<td style="text-align: center;">ふたくみ</td>
<td style="text-align: center;">ふたもじめ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;"><strong>さんはこ</strong></td>
<td style="text-align: center;">さんくみ</td>
<td style="text-align: center;">さんもじめ</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;">よんはこ</td>
<td style="text-align: center;">よんくみ</td>
<td style="text-align: center;">よんもじめ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">ごはこ</td>
<td style="text-align: center;">ごくみ</td>
<td style="text-align: center;">ごもじめ</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">ろっぱこ</td>
<td style="text-align: center;">ろっくみ</td>
<td style="text-align: center;">ろくもじめ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">ななはこ</td>
<td style="text-align: center;">ななくみ</td>
<td style="text-align: center;">ななもじめ</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">はっぱこ</td>
<td style="text-align: center;"><strong>はちくみ</strong></td>
<td style="text-align: center;">はちもじめ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">きゅうはこ</td>
<td style="text-align: center;">きゅうくみ</td>
<td style="text-align: center;">きゅうもじめ</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;">じっぱこ</td>
<td style="text-align: center;">じっくみ</td>
<td style="text-align: center;">じゅうもじめ</td>
</tr>
</tbody>
</table>
<p>而常见的音读量词中需要着重注意的包括（这里将接续音读数词的训读量词「<code>@ 羽 わ</code>」列出用于对比）：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 羽 わ</code></th>
<th style="text-align: center;"><code>@ 話 わ</code></th>
<th style="text-align: center;"><code>@ 時 じ</code></th>
<th style="text-align: center;"><code>@ 本 ほん</code></th>
<th style="text-align: center;"><code>@ 分 ふん</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;">いちわ</td>
<td style="text-align: center;">いちわ</td>
<td style="text-align: center;">いちじ</td>
<td style="text-align: center;">いっぽん</td>
<td style="text-align: center;">いっぷん</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;">にわ</td>
<td style="text-align: center;">にわ</td>
<td style="text-align: center;">にじ</td>
<td style="text-align: center;">にほん</td>
<td style="text-align: center;">にふん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;">さんわ</td>
<td style="text-align: center;">さんわ</td>
<td style="text-align: center;">さんじ</td>
<td style="text-align: center;">さんぼん</td>
<td style="text-align: center;">さんぶん</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;">よんわ</td>
<td style="text-align: center;">よんわ</td>
<td style="text-align: center;"><strong>よじ</strong></td>
<td style="text-align: center;">よんほん</td>
<td style="text-align: center;"><strong>よんぶん</strong></td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">ごわ</td>
<td style="text-align: center;">ごわ</td>
<td style="text-align: center;">ごじ</td>
<td style="text-align: center;">ごほん</td>
<td style="text-align: center;">ごふん</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">ろくわ</td>
<td style="text-align: center;">ろくわ</td>
<td style="text-align: center;">ろくじ</td>
<td style="text-align: center;">ろっぽん</td>
<td style="text-align: center;">ろっぷん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">ななわ</td>
<td style="text-align: center;">ななわ</td>
<td style="text-align: center;"><strong>しちじ</strong></td>
<td style="text-align: center;">ななほん</td>
<td style="text-align: center;">ななふん</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">はちわ</td>
<td style="text-align: center;">はちわ</td>
<td style="text-align: center;">はちじ</td>
<td style="text-align: center;">はっぽん</td>
<td style="text-align: center;">はっぷん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">きゅうわ</td>
<td style="text-align: center;">きゅうわ</td>
<td style="text-align: center;"><strong>くじ</strong></td>
<td style="text-align: center;">きゅうほん</td>
<td style="text-align: center;">きゅうふん</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;"><strong>じゅっぱ</strong></td>
<td style="text-align: center;">じゅうわ</td>
<td style="text-align: center;">じゅうじ</td>
<td style="text-align: center;">じゅっぽん</td>
<td style="text-align: center;">じゅっぷん</td>
</tr>
</tbody>
</table>
<div class="note info no-icon"><p>这里「<code>@ 羽 わ</code>」在数量“十”处的不规则据推测应当是ハ行转呼残留的结果。</p>
</div>
<p>之后就可以介绍三大不规则量词了。首先是较为简单规则的「<code>@ 人 り・にん</code>」，其唯一需要注意的是数量“一”和“二”需要同时改变量词的读音。当然，现在大部分观点认为这两个应该归于熟字训。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 人 り・にん</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;"><strong>ひとり</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;"><strong>ふたり</strong></td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;">さんにん</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;"><strong>よにん</strong></td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">ごにん</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">ろくにん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">ななにん</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">はちにん</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">きゅうにん</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;">じゅうにん</td>
</tr>
</tbody>
</table>
<p>之后介绍量词「つ」，其仅能用于十以内的数量，大于十的数量需要替换成为同义量词「<code>@ 個 こ</code>」。另外，对这个量词提问也应当使用「いくつ」，而非和大部分量词一样直接加上疑问词「<code>@ 何 なん</code>」（例如「<code>@ 何箱 なんはこ</code>」）。而且其和训读数词的接续几乎完全不规则：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;">つ</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;">ひとつ</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;">ふたつ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;">みっつ</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;">よっつ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;">いつつ</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;">むっつ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;">ななつ</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;">やっつ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;">ここのつ</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;">とお</td>
</tr>
</tbody>
</table>
<p>最后介绍日语中目前最不规则的量词「<code>@ 日 か・にち</code>」。该量词在这里用于表示序数的日期，即某月的某一天，而不是表示时间长度的天数。如果用该量词表示用于表明时间长度的天数，则其为规则的音读量词「<code>@ 日 にち</code>」，构成的词组包括「<code>@ 一日 いちにち</code>」等。</p>
<p>其不规则的原因在于，十以内需要使用原有的固有表达，甚至对于数量“一”需要使用熟字训特殊表达。另外，由于数量“四”和“七”的避讳问题，需要使用训读数词，而且数量为“四”的时候量词需要变音。再者，“二十”具有熟字训表达。综合上述所有的因素，「<code>@ 日 か・にち</code>」变成了目前最为不规则的量词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 日 か・にち</code></th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 日 か・にち</code></th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;"><code>@ 日 か・にち</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">一</td>
<td style="text-align: center;"><strong>ついたち</strong></td>
<td style="text-align: center;">十一</td>
<td style="text-align: center;">じゅういちにち</td>
<td style="text-align: center;">二十一</td>
<td style="text-align: center;">にじゅういちにち</td>
</tr>
<tr class="even">
<td style="text-align: center;">二</td>
<td style="text-align: center;"><strong>ふつか</strong></td>
<td style="text-align: center;">十二</td>
<td style="text-align: center;">じゅうににち</td>
<td style="text-align: center;">二十二</td>
<td style="text-align: center;">にじゅうににち</td>
</tr>
<tr class="odd">
<td style="text-align: center;">三</td>
<td style="text-align: center;"><strong>みっか</strong></td>
<td style="text-align: center;">十三</td>
<td style="text-align: center;">じゅうさんにち</td>
<td style="text-align: center;">二十三</td>
<td style="text-align: center;">にじゅうさんにち</td>
</tr>
<tr class="even">
<td style="text-align: center;">四</td>
<td style="text-align: center;"><strong>よっか</strong></td>
<td style="text-align: center;">十四</td>
<td style="text-align: center;"><strong>じゅうよっか</strong></td>
<td style="text-align: center;">二十四</td>
<td style="text-align: center;"><strong>にじゅうよっか</strong></td>
</tr>
<tr class="odd">
<td style="text-align: center;">五</td>
<td style="text-align: center;"><strong>いつか</strong></td>
<td style="text-align: center;">十五</td>
<td style="text-align: center;">じゅうごにち</td>
<td style="text-align: center;">二十五</td>
<td style="text-align: center;">にじゅうごにち</td>
</tr>
<tr class="even">
<td style="text-align: center;">六</td>
<td style="text-align: center;"><strong>むいか</strong></td>
<td style="text-align: center;">十六</td>
<td style="text-align: center;">じゅうろくにち</td>
<td style="text-align: center;">二十六</td>
<td style="text-align: center;">にじゅうろくにち</td>
</tr>
<tr class="odd">
<td style="text-align: center;">七</td>
<td style="text-align: center;"><strong>なのか</strong></td>
<td style="text-align: center;">十七</td>
<td style="text-align: center;">じゅうななにち・じゅうしちにち</td>
<td style="text-align: center;">二十七</td>
<td style="text-align: center;">にじゅうななにち・にじゅうしちにち</td>
</tr>
<tr class="even">
<td style="text-align: center;">八</td>
<td style="text-align: center;"><strong>ようか</strong></td>
<td style="text-align: center;">十八</td>
<td style="text-align: center;">じゅうはちにち</td>
<td style="text-align: center;">二十八</td>
<td style="text-align: center;">にじゅうはちにち</td>
</tr>
<tr class="odd">
<td style="text-align: center;">九</td>
<td style="text-align: center;"><strong>ここのか</strong></td>
<td style="text-align: center;">十九</td>
<td style="text-align: center;">じゅうきゅうにち</td>
<td style="text-align: center;">二十九</td>
<td style="text-align: center;">にじゅうきゅうにち</td>
</tr>
<tr class="even">
<td style="text-align: center;">十</td>
<td style="text-align: center;"><strong>とおか</strong></td>
<td style="text-align: center;">二十</td>
<td style="text-align: center;"><strong>はつか</strong></td>
<td style="text-align: center;">三十</td>
<td style="text-align: center;">さんじゅうにち</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">三十一</td>
<td style="text-align: center;">さんじゅういちにち</td>
</tr>
</tbody>
</table>
<div class="note info no-icon"><p>「<code>@ 一日 ついたち</code>」的词源为词组训读：</p>
<ul>
<li><code>@ 月 つき</code> ＋ <code>@ 立 た</code>ち ＝ <code>@ 月立 ついた</code>ち → <code>@ 朔 ついたち</code>・<code>@ 一日 ついたち</code></li>
</ul>
</div>
<p>这里注意一点，「<code>@ 三十日 みそか</code>」有熟字训，但是该熟字训并不表示“某个月份的第三十天”这个含义，现在多用于表示“某个月的最后一天”，而且多用于在词组「<code>@ 大晦日 おおみそか</code>」中表示“除夕”这个特殊的日期。</p>
<p>此外，该量词可以和「<code>@ 間 かん</code>」连用来表示时间长度。但是一定需要注意「<code>@ 一日 ついたち</code>」不能直接和「<code>@ 間 かん</code>」连用。这种方式下用于表示“一天”这样的时间长度，可以使用固定短语「<code>@ 一日中 いちにちじゅう</code>」，或者转换为“二十四小时”表达，表达为「<code>@ 二十四時間 にじゅうよじかん</code>」。</p>
<div class="note info no-icon"><p>实际上，古日语在接收汉语数字之前也有完整的数量词体系，但是在演变过程中逐步被汉语数量词体系替换。这里简单讲解一部分古日语数量词体系，基于此我们可以得知现代日语数量词体系的演变脉络。本部分采用历史假名遣，关于历史假名遣可以参考古日语相关资料。</p>
<p>首先，一到九的数字在古日语中表现为：</p>
<ul>
<li>ひと、ふた、み、よ、いつ、む、なな、や、ここの</li>
</ul>
<p>其次，作为词根的十、百、千、万分别表现为：</p>
<ul>
<li>そ、ほ、ち、よろづ</li>
</ul>
<p>所以我们可以得到部分整十数的表现：</p>
<ul>
<li>みそ (30)、むほ (600)、やち (8000)、ここのよろづ (90000)</li>
</ul>
<p>例外情况包括，数字五在接续十、百、千、万的时候会简略为「い」：</p>
<ul>
<li>いそ (50)、いほ (500)、いち (5000)、いよろづ (50000)</li>
</ul>
<p>一千、一万的表现中会忽略数字一：</p>
<ul>
<li>ち (1000)、よろづ (10000)</li>
</ul>
<p>十、二十、一百有固定表达：</p>
<ul>
<li>と (10)、はた (20)、もも (100)</li>
</ul>
<p>上述规则可以总结为下述表格：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">ひと</td>
<td style="text-align: center;">10</td>
<td style="text-align: center;"><strong>と</strong></td>
<td style="text-align: center;">100</td>
<td style="text-align: center;"><strong>もも</strong></td>
<td style="text-align: center;">1000</td>
<td style="text-align: center;"><strong>ち</strong></td>
<td style="text-align: center;">10000</td>
<td style="text-align: center;"><strong>よろづ</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">ふた</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;"><strong>はた</strong></td>
<td style="text-align: center;">200</td>
<td style="text-align: center;">ふたほ</td>
<td style="text-align: center;">2000</td>
<td style="text-align: center;">ふたち</td>
<td style="text-align: center;">20000</td>
<td style="text-align: center;">ふたよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">み</td>
<td style="text-align: center;">30</td>
<td style="text-align: center;">みそ</td>
<td style="text-align: center;">300</td>
<td style="text-align: center;">みほ</td>
<td style="text-align: center;">3000</td>
<td style="text-align: center;">みち</td>
<td style="text-align: center;">30000</td>
<td style="text-align: center;">みよろづ</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">よ</td>
<td style="text-align: center;">40</td>
<td style="text-align: center;">よそ</td>
<td style="text-align: center;">400</td>
<td style="text-align: center;">よほ</td>
<td style="text-align: center;">4000</td>
<td style="text-align: center;">よち</td>
<td style="text-align: center;">40000</td>
<td style="text-align: center;">よよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">いつ</td>
<td style="text-align: center;">50</td>
<td style="text-align: center;"><strong>いそ</strong></td>
<td style="text-align: center;">500</td>
<td style="text-align: center;"><strong>いほ</strong></td>
<td style="text-align: center;">5000</td>
<td style="text-align: center;"><strong>いち</strong></td>
<td style="text-align: center;">50000</td>
<td style="text-align: center;"><strong>いよろづ</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">む</td>
<td style="text-align: center;">60</td>
<td style="text-align: center;">むそ</td>
<td style="text-align: center;">600</td>
<td style="text-align: center;">むほ</td>
<td style="text-align: center;">6000</td>
<td style="text-align: center;">むち</td>
<td style="text-align: center;">60000</td>
<td style="text-align: center;">むよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7</td>
<td style="text-align: center;">なな</td>
<td style="text-align: center;">70</td>
<td style="text-align: center;">ななそ</td>
<td style="text-align: center;">700</td>
<td style="text-align: center;">ななほ</td>
<td style="text-align: center;">7000</td>
<td style="text-align: center;">ななち</td>
<td style="text-align: center;">70000</td>
<td style="text-align: center;">ななよろづ</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">や</td>
<td style="text-align: center;">80</td>
<td style="text-align: center;">やそ</td>
<td style="text-align: center;">800</td>
<td style="text-align: center;">やほ</td>
<td style="text-align: center;">8000</td>
<td style="text-align: center;">やち</td>
<td style="text-align: center;">80000</td>
<td style="text-align: center;">やよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">ここの</td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">ここのそ</td>
<td style="text-align: center;">900</td>
<td style="text-align: center;">ここのほ</td>
<td style="text-align: center;">9000</td>
<td style="text-align: center;">ここのち</td>
<td style="text-align: center;">90000</td>
<td style="text-align: center;">ここのよろづ</td>
</tr>
</tbody>
</table>
<p>下面介绍助数词，这是因为非整十数并不能单独使用，必须辅以助数词表现。助数词包括「つ、ち、ぢ」，其中「つ」用于个位，「ち」用于二十位，「ぢ」用于三十及以上的十位。另外，一十位应当使用「とを」。</p>
<p>添加助数词后上述表格应当表现为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
<th style="text-align: center;">数字</th>
<th style="text-align: center;">表现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">ひと<strong>つ</strong></td>
<td style="text-align: center;">10</td>
<td style="text-align: center;"><strong>とを</strong></td>
<td style="text-align: center;">100</td>
<td style="text-align: center;"><strong>もも</strong></td>
<td style="text-align: center;">1000</td>
<td style="text-align: center;"><strong>ち</strong></td>
<td style="text-align: center;">10000</td>
<td style="text-align: center;"><strong>よろづ</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">ふた<strong>つ</strong></td>
<td style="text-align: center;">20</td>
<td style="text-align: center;"><strong>はたち</strong></td>
<td style="text-align: center;">200</td>
<td style="text-align: center;">ふたほ</td>
<td style="text-align: center;">2000</td>
<td style="text-align: center;">ふたち</td>
<td style="text-align: center;">20000</td>
<td style="text-align: center;">ふたよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">み<strong>つ</strong></td>
<td style="text-align: center;">30</td>
<td style="text-align: center;">みそ<strong>ぢ</strong></td>
<td style="text-align: center;">300</td>
<td style="text-align: center;">みほ</td>
<td style="text-align: center;">3000</td>
<td style="text-align: center;">みち</td>
<td style="text-align: center;">30000</td>
<td style="text-align: center;">みよろづ</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">よ<strong>つ</strong></td>
<td style="text-align: center;">40</td>
<td style="text-align: center;">よそ<strong>ぢ</strong></td>
<td style="text-align: center;">400</td>
<td style="text-align: center;">よほ</td>
<td style="text-align: center;">4000</td>
<td style="text-align: center;">よち</td>
<td style="text-align: center;">40000</td>
<td style="text-align: center;">よよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">いつ<strong>つ</strong></td>
<td style="text-align: center;">50</td>
<td style="text-align: center;"><strong>いそぢ</strong></td>
<td style="text-align: center;">500</td>
<td style="text-align: center;"><strong>いほ</strong></td>
<td style="text-align: center;">5000</td>
<td style="text-align: center;"><strong>いち</strong></td>
<td style="text-align: center;">50000</td>
<td style="text-align: center;"><strong>いよろづ</strong></td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">む<strong>つ</strong></td>
<td style="text-align: center;">60</td>
<td style="text-align: center;">むそ<strong>ぢ</strong></td>
<td style="text-align: center;">600</td>
<td style="text-align: center;">むほ</td>
<td style="text-align: center;">6000</td>
<td style="text-align: center;">むち</td>
<td style="text-align: center;">60000</td>
<td style="text-align: center;">むよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7</td>
<td style="text-align: center;">なな<strong>つ</strong></td>
<td style="text-align: center;">70</td>
<td style="text-align: center;">ななそ<strong>ぢ</strong></td>
<td style="text-align: center;">700</td>
<td style="text-align: center;">ななほ</td>
<td style="text-align: center;">7000</td>
<td style="text-align: center;">ななち</td>
<td style="text-align: center;">70000</td>
<td style="text-align: center;">ななよろづ</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">や<strong>つ</strong></td>
<td style="text-align: center;">80</td>
<td style="text-align: center;">やそ<strong>ぢ</strong></td>
<td style="text-align: center;">800</td>
<td style="text-align: center;">やほ</td>
<td style="text-align: center;">8000</td>
<td style="text-align: center;">やち</td>
<td style="text-align: center;">80000</td>
<td style="text-align: center;">やよろづ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">ここの<strong>つ</strong></td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">ここのそ<strong>ぢ</strong></td>
<td style="text-align: center;">900</td>
<td style="text-align: center;">ここのほ</td>
<td style="text-align: center;">9000</td>
<td style="text-align: center;">ここのち</td>
<td style="text-align: center;">90000</td>
<td style="text-align: center;">ここのよろづ</td>
</tr>
</tbody>
</table>
<p>非整十数则主要通过虚词「あまり」连接，部分百以下数字的例子如下：</p>
<ul>
<li>とを・あまり・ひとつ (11)</li>
<li>はたち・あまり・いつつ (25)</li>
<li>いそぢ・あまり・ここのつ (59)</li>
</ul>
<p>更大规模的非整十数，如 4356 等的表达目前未找到合适的语料支撑，故这里不介绍其表达。</p>
<p>直接添加助数词得到的词语可以用于计数或者表达岁数。</p>
<p>另外，在利用数词接续量词的时候，各个数位都需要接续量词。如表示年数的「とせ」，如果需要表达“二十五年”，应当表达为：</p>
<ul>
<li>はた<strong>とせ</strong>・あまり・いつ<strong>とせ</strong></li>
</ul>
<p>目前这一套数量词体系中十以上的部分已经几乎完全丧失。其中部分整十数固定为若干熟字训，而非整十数几乎完全不使用。另外，这里需要注意的是，数量“五十”在接续量词的时候，一般会约音为「い」。下面给出部分现代日语中留存的整十数熟字训（使用现代假名遣）：</p>
<ul>
<li><code>@ 五十鈴 いすず</code>、<code>@ 八百屋 やおや</code>、<code>@ 八百万 やおよろず</code>の<code>@ 神 かみ</code>、<code>@ 八千代 やちよ</code>、<code>@ 四十路 よそじ</code>、<code>@ 千五百秋 ちいおあき</code></li>
</ul>
<p>而这一套数词的十以下的部分中，依然常用的仅剩下数量“一”以及“二”，即目前对于一般的训读量词，训读的“一”“二”依然常用。而三及以上的数词已经几乎仅使用在「つ、日」等极为特殊的量词中（这两个量词即使站在古日语数词体系下，也依然不规则，其演化到现代日语过程中发生的音便依然是极为特殊而不能用几条规则就能概括的）。其余状况下，古日语数词体系已经几乎完全让位于从中国引入的音读数词体系。</p>
<p>当然正如先前提到的，由于避讳等的问题，“四”与“七”的训读也依然常用。</p>
<p>这里另外需要提到的量词为「人」，其在古日语中训读为「たり」，十及以下的人数在古日语数量词体系中分别为（其中数量“一”以及“二”发生约音）：</p>
<ul>
<li>ひとり、ふたり、みたり、よたり、いつたり、むたり、ななたり、やたり、ここのたり、とたり</li>
</ul>
<p>目前现代标准日语仅保留了数量“一”以及“二”的训读表达，更大的数字则完全替代为音读量词。事实上，在部分方言中依然保留有训读的“三人”“四人”等：</p>
<ul>
<li><code>@ 三人 みったり</code>、<code>@ 四人 よったり</code></li>
</ul>
<p>当然，现在这一套数词依然还有消退的趋势。如「ひとり、ふたり」等词语，现在在「一人前、二人組」等词语中读为「いちにん、ににん」之类的现象也逐步出现。</p>
</div>
<h2 id="如何使用日语汉字词典">如何使用日语汉字词典</h2>
<p>现在我们已经掌握了训读的若干种形态，了解了音读汉字的连读规则，知道了还有音训混读词等例外的存在，且基本上掌握了日语初学者的第一道门槛，日语数量词。那么，现在我们来解决实际问题，即在我们实际阅读日文文本的时候，遇到并不会读的汉字的时候，应当如何查找字典。</p>
<p>这里推荐使用 <a href="https://kanjitisiki.com/">在线日语汉字词典</a>，其对汉字的介绍相对较为全面，且支持多种查询汉字的方式。</p>
<p>这里举出一例，这是「親」字在该网站上的读音查询结果：</p>
<p><code>Picture TODO</code></p>
<p>其上用片假名书写音读读音，用平假名书写训读读音，训读读音中加粗或者标红表示词干而剩余部分为送假名，且基本上训读读音中名词的读音在前，动词、形容词等读音在后。</p>
<p>那我们在实际阅读日文文本的时候，首先需要区分训读和音读汉字，如果遇到并不认识的，则可以直接到在线词典上查找相关读音，如果还是不能确定读音，则可以使用更为专业的词典，按词语为单位查找。</p>
<h2 id="chapter-1-section-3-练习">Chapter 1 Section 3 练习</h2>
<p>【第一问】尝试为下述句子中的汉字注音。可能使用到的汉字读音表均已附在后面。下述句子已经给出其汉语翻译。这里由于涉及到送假名的变形，所以在后续将句子中的活用形和原形的对应标出：</p>
<ul>
<li>虚ろ目の午前四時、迷って辿り着いたそこはハッピー？（眼神空虚的凌晨四点，迷惘着终于抵达的就是所谓的快乐？）</li>
</ul>
<p>活用形和原形的对应：</p>
<ul>
<li>迷っ → 迷う</li>
<li>辿り → 辿る</li>
<li>着い → 着く</li>
</ul>
<p>可能用到的汉字读音表：</p>
<ul>
<li>虚：キョ・コ・うろ・うつ‐ろ・うつ‐ける・むな‐しい</li>
<li>目：モク・ボク・め・ま・まなこ・かなめ・さかん</li>
<li>午：ゴ・うま・ひる</li>
<li>前：ゼン・セン・まえ・さき</li>
<li>迷：メイ・まよ‐う・まど‐う</li>
<li>辿：テン・たど‐る</li>
<li>着：チャク・ジャク・き‐る・き‐せる・つ‐く・つ‐ける</li>
</ul>
<h1 id="练习参考答案">练习参考答案</h1>
<h2 id="chapter-1-section-1-练习答案">Chapter 1 Section 1 练习答案</h2>
<p>【第一问】参考罗马字表记为：</p>
<ul>
<li>yoroshiku onegai shimasu.</li>
<li>orewa kyoudaisanninga imasu.</li>
<li>hayaku yougisyano jyouhouo shirabete kudasai.</li>
<li>[cake]o tsukurisugitanode, koreo motte obaasanni itte agete.</li>
</ul>
<p>【第二问】参考平假名表记为：</p>
<ul>
<li>やってみなければなんでもしらないからやってみよう。</li>
<li>てんきよほうによって、あしたはあめがふりそうにはない。</li>
<li>はじまりがあれば、いつかおわりがきっとくるから。</li>
<li>たいへんにもうしわけありませんでした。</li>
</ul>
<p>上述句子使用汉字的写法为：</p>
<ul>
<li>やってみなければなんでも<code>@ 知 し</code>らないからやってみよう。（不去试试的话就什么都了解不到，所以试着做做吧）</li>
<li><code>@ 天気予報 てんきよほう</code>によって、<code>@ 明日 あした</code>は<code>@ 雨 あめ</code>が<code>@ 降 ふ</code>りそうにはない。（据天气预报说，明天好像不会下雨）</li>
<li><code>@ 始 はじ</code>まりがあれば、いつか<code>@ 終 お</code>わりがきっと<code>@ 来 く</code>るから。（万事只要有了开始，总有一天要迎来终结）</li>
<li><code>@ 大変 たいへん</code>に<code>@ 申 もう</code>し<code>@ 訳 わけ</code>ありませんでした。（非常抱歉）</li>
</ul>
<h2 id="chapter-1-section-2-练习答案">Chapter 1 Section 2 练习答案</h2>
<p>【第一问】</p>
<p>第一句话中的假借汉字为「<code>@ 誤魔化 ごまか</code>」。该假借字仅考虑了汉字的读音。</p>
<p>第二句话中的假借汉字为「<code>@ 当 あ</code>たり<code>@ 前 まえ</code>」。这里可能需要读者了解「<code>@ 当 あ</code>たり<code>@ 前 まえ</code>」整体是一个词。该假借字借用了两个训读汉字「<code>@ 当 あ</code>」和「<code>@ 前 まえ</code>」。「<code>@ 当 あ</code>」的含义为“命中、合适”，「<code>@ 前 まえ</code>」的含义为“前方、之前”。</p>
<p>【第二问】</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">假借字</th>
<th style="text-align: center;">音读汉字</th>
<th style="text-align: center;">训读汉字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一句</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;"><code>@ 七時 しちじ</code>、<code>@ 会社 かいしゃ</code></td>
<td style="text-align: center;"><code>@ 明日 あした</code>、<code>@ 受付 うけつけ</code>、<code>@ 会 あ</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">第二句</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;"><code>@ 一寸 いっすん</code>、<code>@ 光陰 こういん</code></td>
<td style="text-align: center;"><code>@ 軽 かろ</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">第三句</td>
<td style="text-align: center;"><code>@ 素晴 すば</code></td>
<td style="text-align: center;"><code>@ 世界 せかい</code>、<code>@ 祝福 しゅくふく</code></td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">第四句</td>
<td style="text-align: center;">*<code>@ 出来 でき</code></td>
<td style="text-align: center;">―</td>
<td style="text-align: center;"><code>@ 橋 はし</code>、<code>@ 石 いし</code></td>
</tr>
</tbody>
</table>
<p>这里容易混淆的是「<code>@ 受付 うけつけ</code>」实际上是一般的训读汉字，而非假借字。其为动词「<code>@ 受 う</code>ける」和动词「<code>@ 付 つ</code>ける」构成的复合动词「<code>@ 受 う</code>け<code>@ 付 つ</code>ける」的名词形式。「<code>@ 受 う</code>ける」的含义为“承接、承蒙”。</p>
<p>此外，「<code>@ 出来 でき</code>」回答假借字和训读汉字均可。「<code>@ 出来 でき</code>る」的词源为古日语下二段动词「<code>@ 出 い</code>づ」的连用形「<code>@ 出 い</code>で」与古日语カ变动词「<code>@ 来 く</code>」构成的合成词「<code>@ 出来 いでく</code>」，之后首先发生「い」音脱落变为「<code>@ 出来 でく</code>」，随后由于二段动词和变格活用动词开始附着「る」词尾，该词语进一步演化为「<code>@ 出来 でく</code>る」，最后发生元音转变，中间「く」音转化为「き」音从而形成了现代动词「<code>@ 出来 でき</code>る」。</p>
<p>从词源的角度，该词语也可以认为是训读汉字经过演化而生成的词语。但是由于原先汉字的读音已经脱落，目前使用的汉字读音实际上是原先动词送假名的读音，故也可以认为该词语使用了假借字表记。</p>
<h2 id="chapter-1-section-3-练习答案">Chapter 1 Section 3 练习答案</h2>
<p>【第一问】注音如下：</p>
<ul>
<li><code>@ 虚 うつ</code>ろ<code>@ 目 め</code>の<code>@ 午前四時 ごぜんよじ</code>、<code>@ 迷 まよ</code>って<code>@ 辿 たど</code>り<code>@ 着 つ</code>いたそこはハッピー？</li>
</ul>
<p>首先区分音训读，一般而言动词、形容词等的单字词干、有送假名词尾的多为训读汉字，而构词法类似汉语的、没有送假名词尾的词语多为音读汉字。基本上基于此就可以区分大部分音读训读汉字。</p>
<p>之后根据给出的读音表逐个根据送假名词尾确定读音即可。</p>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 2 日语基础语法与用言活用规则</title>
    <url>/2022/08/21/ja-tutorial-ch2/</url>
    <content><![CDATA[<p>本章主要介绍日语的基本语法和基本的语句结构，并且简单介绍日语用言活用系统。本章节的作用为为下一章节的助动词、助词接续规则做铺垫。</p>
<span id="more"></span>
<h1 id="日语词语的分类">日语词语的分类</h1>
<p>日语所有的词语可以大体分为下述四类：</p>
<ul>
<li><strong>附属词语</strong>。包括助词、助动词，其必须附属在其他词语之上才能表达含义。助词和助动词的区别在于，助动词具有活用而助词不具有。</li>
<li><strong>独立词语</strong>。包括感叹词等不可附属其他成分的词语。</li>
<li><strong>装饰词语</strong>。包括副词等用于修饰其余成分的词语。</li>
<li><strong>自立词语</strong>。包含用言和体言。用言和体言的区别在于，用言具有活用而体言不具有。用言一般包括动词、形容词和形容动词。体言一般包括名词、代词和数词。</li>
</ul>
<p>我们最需要关注的两类词语为自立词语（用言、体言），日语语句中大多数的词语均属于自立词语。另外，用言的活用规则、用言与附属词语的联合使用是日语语法中的重中之重。</p>
<h2 id="动词的分类">动词的分类</h2>
<p>我们观察下面的动词词例：</p>
<ul>
<li><code>@ 書 か</code>く、<code>@ 泳 およ</code>ぐ、<code>@ 読 よ</code>む、<code>@ 死 し</code>ぬ、<code>@ 飛 と</code>ぶ、<code>@ 降 ふ</code>る、<code>@ 立 た</code>つ、<code>@ 歌 うた</code>う、<code>@ 話 はな</code>す</li>
<li><code>@ 見 み</code>る、<code>@ 居 い</code>る、<code>@ 生 い</code>きる、<code>@ 起 お</code>きる、<code>@ 捨 す</code>てる、<code>@ 教 おし</code>える</li>
<li><code>@ 来 く</code>る</li>
<li>する、<code>@ 勉強 べんきょう</code>する、<code>@ 感 かん</code>ずる</li>
</ul>
<p>可以注意到所有的动词原形都以う段假名结尾。而这里的动词分为四行，即为按照送假名活用规则不同分类得到的四个种类的动词。</p>
<p>第一行是<strong>五段动词</strong>，现代日语五段动词的合法词尾为「く、ぐ、む、ぬ、ぶ、る、つ、う、す」。</p>
<p>第二行是<strong>一段动词</strong>，现代日语一段动词仅能以「る」结尾，并且倒数第二个假名仅可以在い段或者え段。其中倒数第二个假名位于い段的称为<strong>上一段动词</strong>，倒数第二个假名位于え段的称为<strong>下一段动词</strong>。</p>
<p>第三行是<strong>カ变动词</strong>，现代日语仅有「<code>@ 来 く</code>る」为カ变动词。</p>
<p>第四行是<strong>サ变动词</strong>，现代日语仅有「する」以及以汉字等为词干并以「する、ずる」结尾的动词为サ变动词。</p>
<p>这里需要注意的是，以「る」结尾的并且不是サ变动词的动词，既可能是五段动词也可能是一段动词。其辨别方式为，首先确定倒数第二个假名所在段，如果不在い段或者え段，则一定是五段动词。例如「<code>@ 上 あ</code>がる、<code>@ 売 う</code>る、<code>@ 残 のこ</code>る」即为五段动词。相应的，如果在い段或者え段则大概率为一段动词，但是这依然有例外，仅能通过查询词典确认。例如「<code>@ 滑 すべ</code>る、<code>@ 入 はい</code>る」即为五段动词。</p>
<div class="note info no-icon"><p>サ变动词和名词的关系实际上是比较模糊的，大部分サ变动词的词干本身实际上也可以作为名词使用，如「勉強する」的词干「勉強」完全可以作为名词应用在词组「日本語の勉強」之中。</p>
<p>一个サ变动词具体应该认为是单个动词还是认为是一个名词和「する」的复合，这两者的区分往往并不明显。比如「察する」现在往往认为是单纯的サ变动词，而「勉強する」则位于两者之间，另外类似「涙する」的表达则几乎就看作名词和「する」的复合。一个サ变动词在母语者角度应当怎么理解，可以通过词典确认。</p>
<p>另外一种确认方式是加入宾格助词「を」观察是否自然，这里「察をする」显然不自然而「勉強をする」仅仅是稍显别扭，所以「察する」更倾向于サ变动词，不过该方法应用范围也较为有限。</p>
<p>另外，这里强调一个口语现象，部分理应是サ变动词的词语可能会在口语中丢失「す」，作为一段或者五段动词使用。比如著名的「<code>@ 告 こく</code>る」，其显然是名词「告」和「する」的复合，然而在年轻群体中「<code>@ 告 こく</code>る」的使用频率并不低，甚至著名漫画「かぐや様は告らせたい」，即《辉夜大小姐想让我告白》中的「告らせたい」就是「告る」的活用。另外类似麻将名词「ツモる」等也是这样的来源。</p>
</div>
<h2 id="形容词和形容动词的特征">形容词和形容动词的特征</h2>
<p>我们观察下面的形容词词例：</p>
<ul>
<li><code>@ 赤 あか</code>い、<code>@ 黒 くろ</code>い、<code>@ 長 なが</code>い、<code>@ 広 ひろ</code>い、<code>@ 美 うつく</code>しい、<code>@ 難 むずか</code>しい</li>
</ul>
<p>可以注意到所有的形容词原形都以「い」结尾。</p>
<p>进一步，我们观察下面的形容动词词例：</p>
<ul>
<li><code>@ 好 す</code>きだ、<code>@ 嫌 きら</code>いだ、<code>@ 静 しず</code>かだ</li>
</ul>
<p>可以注意到所有的形容动词原形都以「だ」结尾。</p>
<div class="note info no-icon"><p>事实上，有一种观点认为现代日语存在两种形容动词。通常的形容动词称为「ダ活用形容動詞」，而还有一类形容动词称为「タルト活用形容動詞」。「タルト活用形容動詞」的词例很少，并且其原形已经丢失，仅以「○○と、○○たる」两种形式存在。词例包括「<code>@ 燦然 さんぜん</code>と、<code>@ 段々 だんだん</code>と」。</p>
<p>本手册并不考虑「タルト活用形容動詞」，因为考虑到「○○たる」形式已经较为少见，故直接将「○○と」形式视为装饰词语中的副词，而不再视为自立词语中的用言（形容动词）的一种活用形式。</p>
</div>
<div class="note info no-icon"><p>部分观点将形容词和形容动词都归为形容词，因为在现代日语中两者都起到了类似于形容词的作用。这里我们依然按照传统的语法概念保留形容动词这个概念。</p>
<p>形容词和形容动词的差别在于，形容动词有一定的动词的属性。例如「<code>@ 好 す</code>きだ」的含义为“喜欢”，其本质上是一种动作，但是可以应用在“喜欢的事物”这样的短语中起到形容词的语法作用。</p>
</div>
<div class="note info no-icon"><p>形容动词和名词的关系实际上是比较模糊的，部分形容动词本身和名词并无太大差别，如「自由だ」，其完全有名词用法「自由」。大部分词典对这类词语的处理是认为这些词语同时是形容动词和名词。</p>
<p>事实上形容动词仅仅是名词的一种使用方式的观点在日语语法学界也一直存在，而大部分形容动词的名词痕迹确实明显，如「好きだ」的词干「好き」可以认为是动词「好く」的名词化（用言名词化见下一章），而「嫌いだ」则和动词「嫌う」有所关联。</p>
<p>不过同为形容动词和名词的词语在修饰名词的时候，往往语义上是有微微差别的：</p>
<ul>
<li>（形容动词）自由な意味（表达某个事物的含义是自由的）</li>
<li>（名词）自由の意味（描述自由这个概念的含义）</li>
</ul>
<p>上述两个词组在汉语中均一般译为“自由的含义”，所以理论上汉语中的“的”暗示的偏正短语是有可能存在歧义的。</p>
</div>
<h2 id="日语常见助动词">日语常见助动词</h2>
<p>日语的助动词常常附属在用言的活用形后，辅助用言表达更丰富的语言含义。现在将本手册着重讨论的日语助动词的原形罗列如下：</p>
<ul>
<li>たがる</li>
<li>れる・られる、せる・させる</li>
<li>ない、たい、らしい</li>
<li>べし</li>
<li>だ、そうだ②、ようだ</li>
<li>です、ます、た、そうだ①、まい、う・よう、ず・ぬ・ん</li>
</ul>
<p>上述分类的标准为助动词的活用规则。第一类助动词与五段动词活用规则近似，第二类与一段动词近似，第三类与形容词近似，第四类与古语形容词近似，第五类与形容动词近似，第六类则为不规则活用助动词。</p>
<p>这里注意到「そうだ」被分为了「そうだ①」和「そうだ②」，这是因为其表达的语法含义并不相同，其中「そうだ①」表达“传闻”，而「そうだ②」表达“样态”。更具体的使用方式，我们在后续的部分讲解。</p>
<h2 id="日语常见助词">日语常见助词</h2>
<p>日语助词系统，包括日语助词的分类，各个观点并不统一。而我们采用的助词分类方式为：</p>
<ul>
<li><strong>格助词</strong>。格助词为标识主语、宾语、动作目标、动作主观原因、动作客观原因等逻辑关系的助词，其作用为保证句意并不受语序排列不同的影响。常见的格助词包括「が①、から①、で、と①、に、の①、へ、まで①、より、を」。</li>
<li><strong>终止助词</strong>。终止助词的作用为用于语句的最后，用于表达不同的语气。常见的终止助词包括「か①、かしら、け、こと、さ、ぜ、ぞ、とも、な①、な②、ね、の②、もの・もん、ものか、よ、わ」。</li>
<li><strong>副助词</strong>。副助词往往接续在格助词或者动词等后，用于进一步修饰语意。常见的副助词包括「か②、か③、きり、くらい・ぐらい、こそ、さえ、しか、すら、だけ、でも、とか、など・なんて、なり、のみ、は、ばかり、ほど、まで②、も、や」。</li>
<li><strong>接续助词</strong>。接续助词的作用为置于两个小句之间，用于表示两个小句之间的关系，例如表达顺接、逆接等关系。常见的接续助词包括「が②、から②、けれど・けど・けれども、し、たり・だり、て・で、ても・でも、と②、ながら①、ながら②、ので、のに、ば、ものの、ものを」。</li>
</ul>
<p>这里我们需要额外注意接续助词「て・で」，其几乎可以认为是日语中最重要的助词，因为其后可以继续接续补助动词进一步表达语意。本手册中会着重讨论的补助动词包括：</p>
<ul>
<li>いる、おる、ある</li>
<li>いく、くる</li>
<li>やる、あげる、さしあげる</li>
<li>もらう、くれる、くださる、いただく</li>
<li>しまう、おく、みる</li>
<li>ほしい</li>
</ul>
<div class="note warning no-icon"><p>读者此时可能困惑于如此多的助动词和助词，暂且不明白这些助动词和助词的含义和使用方式。</p>
<p>这些我们将会在后续部分细致展开，在这里我们只是将这些助词和助动词分类枚举，以方便读者先形成基本的助动词和助词的简单分类概念。在学习完毕这些助词和助动词的用法之后，这种分类概念会帮助读者从一个更高的角度理解这些附属词语的运用。</p>
</div>
<h2 id="chapter-2-section-1-练习">Chapter 2 Section 1 练习</h2>
<p>【第一问】下述给出若干个动词的原形，请判定其为五段动词、一段动词、カ变动词、サ变动词中的哪一类。如有需要，可以通过词典确认。</p>
<ul>
<li><code>@ 許 ゆる</code>す、<code>@ 出 だ</code>す、<code>@ 駆 か</code>ける、<code>@ 導 みちび</code>く、<code>@ 塞 ふさ</code>ぐ</li>
<li><code>@ 決 けっ</code>する、<code>@ 出 で</code>る、<code>@ 積 つ</code>もる、<code>@ 狂 くる</code>う、<code>@ 注 そそ</code>ぐ</li>
<li><code>@ 回 まわ</code>る、<code>@ 結 むす</code>ぶ、<code>@ 彷徨 さまよ</code>う、<code>@ 染 そ</code>める、<code>@ 逃 のが</code>れる</li>
<li><code>@ 来 く</code>る、<code>@ 喋 しゃべ</code>る、<code>@ 高 たか</code>める、<code>@ 拭 ぬぐ</code>う、<code>@ 信 しん</code>ずる</li>
<li><code>@ 高 たか</code>まる、<code>@ 踏 ふ</code>む、なさる、<code>@ 放 はな</code>つ、<code>@ 放 ほう</code>る</li>
</ul>
<h1 id="日语语句的基本语序">日语语句的基本语序</h1>
<p>在正式学习日语语法之前，首先需要了解日语的语序。相较于汉语的主谓宾语序，日语采用了主宾谓语序。另外，日语另外一个和汉语差别较大的点在于助词后置。例如下述句子：</p>
<div class="note info no-icon"><p>私<strong>は</strong>（我）今朝七時<strong>に</strong>（在今早七点）朝ご飯<strong>を</strong>（早饭）食べました（吃了）。</p>
</div>
<p>这里为了表述清晰，将句子按照词语分解并把所有助词加粗。这里各个词语的汉语翻译均已经标注在其后。</p>
<p>显然可以发现，作为谓语的“吃了”位于句子末尾而作为宾语的“早饭”位于谓语之前，这也就是日语的主宾谓语序。</p>
<p>另外，在状语“在今早七点”中，提示动作发生时间的助词「に」位于该词组的末尾，和汉语的助词“在”位于词组开头恰好相反。</p>
<p>之后，我们还发现日语中有两个未翻译的助词「は」「を」，这两个助词的作用均为提示其之前的实词在该句子之中的语法作用。比如说在「朝ご飯を」中，助词「を」的作用是表明实词「朝ご飯」是这句话的宾语。这类助词在汉语中并没有对应，所以一般不翻译。</p>
<p>而正是由于日语中存在这一类助词，所以划分句子的各类成分会较为容易，只需要将语句拆分为若干的词组，对于有这一类助词提示的词组则根据助词的作用判定各个词组在语句中的作用即可。</p>
<p>这里简单介绍常用的助词以方便读者先行阅读简单日语语句，更为具体的讲解则见后续的部分。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">助词</th>
<th style="text-align: center;">作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">は</td>
<td style="text-align: center;">标注语句的主题</td>
</tr>
<tr class="even">
<td style="text-align: center;">が</td>
<td style="text-align: center;">标注语句的主语</td>
</tr>
<tr class="odd">
<td style="text-align: center;">を</td>
<td style="text-align: center;">标注语句的宾语</td>
</tr>
<tr class="even">
<td style="text-align: center;">に</td>
<td style="text-align: center;">标注动作发生的时间、动作的方向等</td>
</tr>
<tr class="odd">
<td style="text-align: center;">へ</td>
<td style="text-align: center;">标注动作的方向</td>
</tr>
<tr class="even">
<td style="text-align: center;">の</td>
<td style="text-align: center;">标注从属或者同位关系</td>
</tr>
<tr class="odd">
<td style="text-align: center;">で</td>
<td style="text-align: center;">标注动作发生的地点、动作的手段等</td>
</tr>
<tr class="even">
<td style="text-align: center;">から</td>
<td style="text-align: center;">标注时间、地点的起始，标注主观原因</td>
</tr>
<tr class="odd">
<td style="text-align: center;">まで</td>
<td style="text-align: center;">标注时间、地点的终止等</td>
</tr>
<tr class="even">
<td style="text-align: center;">ので</td>
<td style="text-align: center;">标注客观原因</td>
</tr>
</tbody>
</table>
<div class="note info no-icon"><p>读者可能会注意到<strong>主题</strong>和<strong>主语</strong>的区分，这也就代表了副助词「は」和格助词「が」的语法差别。这一差别较为微妙，难以简单概括，我们后续阐述。当前读者可以暂且认为两个助词的作用基本一致。</p>
</div>
<h2 id="chapter-2-section-2-练习">Chapter 2 Section 2 练习</h2>
<p>【第一问】尝试根据助词分划下述日语句子，并尝试翻译，部分可能用到的词汇列表标注在后面：</p>
<ul>
<li>上海から東京までの飛行機で日本へ来ました。</li>
<li>彼は優しいので、付き合いたい。</li>
</ul>
<p>可能使用的词汇表：</p>
<ul>
<li>飛行機（飞机）</li>
<li>来ました（来了）</li>
<li>彼（他）</li>
<li>優しい（温柔的）</li>
<li>付き合いたい（想交往）</li>
</ul>
<h1 id="日语指示词">日语指示词</h1>
<p>日语的指示词指的是一系列代词，主要分为近称、中称、远称、不定称四类，这四类代词的开头假名分别为「こ、そ、あ、ど」。这四种代称的含义为：</p>
<ul>
<li><strong>近称</strong>表示需要指代的事物距离说话人较近，对应汉语的“这”</li>
<li><strong>中称</strong>表示需要指代的事物距离听话人较近，可以对应汉语的“这”，也可以对应汉语的“那”，视具体语境确定</li>
<li><strong>远称</strong>表示需要指代的事物距离说话人和听话人都较远，对应汉语的“那”</li>
<li><strong>不定称</strong>表示不知道需要指代的事物的远近，常用于疑问，对应汉语的“哪”</li>
</ul>
<p>每一种代称的代词包含指代事物、地点、方位、人物等的名词性代词、指代从属的连体性代词、指代状态的副词性代词以及形容动词性代词共四类，这些代词如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">近称</th>
<th style="text-align: center;">中称</th>
<th style="text-align: center;">远称</th>
<th style="text-align: center;">不定称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">名词性（事物）</td>
<td style="text-align: center;">これ</td>
<td style="text-align: center;">それ</td>
<td style="text-align: center;">あれ</td>
<td style="text-align: center;">どれ</td>
</tr>
<tr class="even">
<td style="text-align: center;">名词性（地点）</td>
<td style="text-align: center;">ここ</td>
<td style="text-align: center;">そこ</td>
<td style="text-align: center;">あそこ</td>
<td style="text-align: center;">どこ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">名词性（方位）</td>
<td style="text-align: center;">こちら・こっち</td>
<td style="text-align: center;">そちら・そっち</td>
<td style="text-align: center;">あちら・あっち</td>
<td style="text-align: center;">どちら・どっち</td>
</tr>
<tr class="even">
<td style="text-align: center;">名词性（人物）</td>
<td style="text-align: center;">こいつ</td>
<td style="text-align: center;">そいつ</td>
<td style="text-align: center;">あいつ</td>
<td style="text-align: center;">どいつ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">连体性</td>
<td style="text-align: center;">この</td>
<td style="text-align: center;">その</td>
<td style="text-align: center;">あの</td>
<td style="text-align: center;">どの</td>
</tr>
<tr class="even">
<td style="text-align: center;">副词性</td>
<td style="text-align: center;">こう</td>
<td style="text-align: center;">そう</td>
<td style="text-align: center;">ああ</td>
<td style="text-align: center;">どう</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词性</td>
<td style="text-align: center;">こんなだ</td>
<td style="text-align: center;">そんなだ</td>
<td style="text-align: center;">あんなだ</td>
<td style="text-align: center;">どんなだ</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词性（连体形式）</td>
<td style="text-align: center;">こんな</td>
<td style="text-align: center;">そんな</td>
<td style="text-align: center;">あんな</td>
<td style="text-align: center;">どんな</td>
</tr>
</tbody>
</table>
<p>这里给出近称代词的汉语翻译，可以作为理解这些代词的参考：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">日语</th>
<th style="text-align: center;">これ</th>
<th style="text-align: center;">ここ</th>
<th style="text-align: center;">こちら</th>
<th style="text-align: center;">こいつ</th>
<th style="text-align: center;">この</th>
<th style="text-align: center;">こう</th>
<th style="text-align: center;">こんな</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">汉语</td>
<td style="text-align: center;">这个 <br /> （名词）</td>
<td style="text-align: center;">这里</td>
<td style="text-align: center;">这边</td>
<td style="text-align: center;">这人</td>
<td style="text-align: center;">这个 <br /> （形容词）</td>
<td style="text-align: center;">这样</td>
<td style="text-align: center;">这种</td>
</tr>
</tbody>
</table>
<h1 id="日语用言与助动词的活用规则">日语用言与助动词的活用规则</h1>
<p>现代日语中，具有活用的词语仅有用言和助动词两类。而现代日语中，这些词语一共有六种活用类型。下述为六种活用类型的基本用法介绍：</p>
<ul>
<li><strong>未然形</strong>。主要用于表述未发生的形态，用言的否定和被动常常使用未然形接续相关助动词表示。</li>
<li><strong>连用形</strong>。主要用于接续其他用言，部分动词的连用形用于将动词名词化。</li>
<li><strong>终止形</strong>。一般认为是用言的基础形态，也称为<strong>原形</strong>，用于直接或接续终止助词表现句子终结。</li>
<li><strong>连体形</strong>。主要用于接续体言。</li>
<li><strong>假定形</strong>。古日语中称<strong>已然形</strong>。现代日语中常用于接续表示假定的助动词。</li>
<li><strong>命令形</strong>。不接续或接续终止助词表示命令语气。</li>
</ul>
<p>更为具体的使用方式，包括用言和助动词、助词的接续方式我们将会在后续展开，现在我们首先研讨用言和助动词如何进行这六种活用。</p>
<h2 id="动词及类动词助动词的活用规则">动词及类动词助动词的活用规则</h2>
<p>日语动词的六种活用规则如下表，这里注意，五段动词的未然形和连用形均有两种形式，而サ变动词未然形有三种形式：</p>
<p>首先是五段动词表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形①</th>
<th style="text-align: center;">未然形②</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">五段動詞「か行」</td>
<td style="text-align: center;">書く</td>
<td style="text-align: center;">書か</td>
<td style="text-align: center;">書こ</td>
<td style="text-align: center;">書き</td>
<td style="text-align: center;">書い</td>
<td style="text-align: center;">書く</td>
<td style="text-align: center;">書け</td>
<td style="text-align: center;">書け</td>
</tr>
<tr class="even">
<td style="text-align: center;">五段動詞「が行」</td>
<td style="text-align: center;">泳ぐ</td>
<td style="text-align: center;">泳が</td>
<td style="text-align: center;">泳ご</td>
<td style="text-align: center;">泳ぎ</td>
<td style="text-align: center;">泳い</td>
<td style="text-align: center;">泳ぐ</td>
<td style="text-align: center;">泳げ</td>
<td style="text-align: center;">泳げ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五段動詞「ば行」</td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛ば</td>
<td style="text-align: center;">飛ぼ</td>
<td style="text-align: center;">飛び</td>
<td style="text-align: center;">飛ん</td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛べ</td>
<td style="text-align: center;">飛べ</td>
</tr>
<tr class="even">
<td style="text-align: center;">五段動詞「ま行」</td>
<td style="text-align: center;">読む</td>
<td style="text-align: center;">読ま</td>
<td style="text-align: center;">読も</td>
<td style="text-align: center;">読み</td>
<td style="text-align: center;">読ん</td>
<td style="text-align: center;">読む</td>
<td style="text-align: center;">読め</td>
<td style="text-align: center;">読め</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五段動詞「な行」</td>
<td style="text-align: center;">死ぬ</td>
<td style="text-align: center;">死な</td>
<td style="text-align: center;">死の</td>
<td style="text-align: center;">死に</td>
<td style="text-align: center;">死ん</td>
<td style="text-align: center;">死ぬ</td>
<td style="text-align: center;">死ね</td>
<td style="text-align: center;">死ね</td>
</tr>
<tr class="even">
<td style="text-align: center;">五段動詞「あ行」</td>
<td style="text-align: center;">歌う</td>
<td style="text-align: center;"><strong>歌わ</strong></td>
<td style="text-align: center;">歌お</td>
<td style="text-align: center;">歌い</td>
<td style="text-align: center;">歌っ</td>
<td style="text-align: center;">歌う</td>
<td style="text-align: center;">歌え</td>
<td style="text-align: center;">歌え</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五段動詞「た行」</td>
<td style="text-align: center;">立つ</td>
<td style="text-align: center;">立た</td>
<td style="text-align: center;">立と</td>
<td style="text-align: center;">立ち</td>
<td style="text-align: center;">立っ</td>
<td style="text-align: center;">立つ</td>
<td style="text-align: center;">立て</td>
<td style="text-align: center;">立て</td>
</tr>
<tr class="even">
<td style="text-align: center;">五段動詞「ら行」</td>
<td style="text-align: center;">降る</td>
<td style="text-align: center;">降ら</td>
<td style="text-align: center;">降ろ</td>
<td style="text-align: center;">降り</td>
<td style="text-align: center;">降っ</td>
<td style="text-align: center;">降る</td>
<td style="text-align: center;">降れ</td>
<td style="text-align: center;">降れ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">五段動詞「さ行」</td>
<td style="text-align: center;">話す</td>
<td style="text-align: center;">話さ</td>
<td style="text-align: center;">話そ</td>
<td style="text-align: center;">話し</td>
<td style="text-align: center;">話し</td>
<td style="text-align: center;">話す</td>
<td style="text-align: center;">話せ</td>
<td style="text-align: center;">話せ</td>
</tr>
</tbody>
</table>
<p>然后是一段动词表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">上一段動詞</td>
<td style="text-align: center;">起きる</td>
<td style="text-align: center;">起き</td>
<td style="text-align: center;">起き</td>
<td style="text-align: center;">起きる</td>
<td style="text-align: center;">起きれ</td>
<td style="text-align: center;">起きよ・起きろ</td>
</tr>
<tr class="even">
<td style="text-align: center;">下一段動詞</td>
<td style="text-align: center;">教える</td>
<td style="text-align: center;">教え</td>
<td style="text-align: center;">教え</td>
<td style="text-align: center;">教える</td>
<td style="text-align: center;">教えれ</td>
<td style="text-align: center;">教えよ・教えろ</td>
</tr>
</tbody>
</table>
<p>然后是サ变动词表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形①</th>
<th style="text-align: center;">未然形②</th>
<th style="text-align: center;">未然形③</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">サ変動詞「清音」</td>
<td style="text-align: center;">する</td>
<td style="text-align: center;">し</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">さ</td>
<td style="text-align: center;">し</td>
<td style="text-align: center;">する</td>
<td style="text-align: center;">すれ</td>
<td style="text-align: center;">しろ・せよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">サ変動詞「濁音」</td>
<td style="text-align: center;">ずる</td>
<td style="text-align: center;">じ</td>
<td style="text-align: center;">ぜ</td>
<td style="text-align: center;">ざ</td>
<td style="text-align: center;">じ</td>
<td style="text-align: center;">ずる</td>
<td style="text-align: center;">ずれ</td>
<td style="text-align: center;">じろ・ぜよ</td>
</tr>
</tbody>
</table>
<p>最后是カ变动词表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">カ変動詞</td>
<td style="text-align: center;">くる</td>
<td style="text-align: center;">こ</td>
<td style="text-align: center;">き</td>
<td style="text-align: center;">くる</td>
<td style="text-align: center;">くれ</td>
<td style="text-align: center;">こい</td>
</tr>
</tbody>
</table>
<p>可以发现五段动词的送假名除了第二连用形外全部在五十音图同一行内变化，并且可以变为这一行的任一段假名。而一段动词则除了词尾「る」发生变化外，倒数第二个假名固定在该行该段不发生变化。サ变动词和カ变动词则完全不规则。</p>
<p>唯一需要注意的是あ行的五段动词的未然形的送假名并不变为「あ」，而是变为「わ」。</p>
<p>类动词的助动词的活用则基本可以根据上述活用表推理出：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形①</th>
<th style="text-align: center;">未然形②</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">類五段動詞</td>
<td style="text-align: center;">たがる</td>
<td style="text-align: center;">たがら</td>
<td style="text-align: center;">たがろ</td>
<td style="text-align: center;">たがり</td>
<td style="text-align: center;">たがっ</td>
<td style="text-align: center;">たがる</td>
<td style="text-align: center;">たがれ</td>
<td style="text-align: center;">たがれ</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">類一段動詞</td>
<td style="text-align: center;">れる</td>
<td style="text-align: center;">れ</td>
<td style="text-align: center;">れ</td>
<td style="text-align: center;">れる</td>
<td style="text-align: center;">れれ</td>
<td style="text-align: center;">れよ・れろ</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">られる</td>
<td style="text-align: center;">られ</td>
<td style="text-align: center;">られ</td>
<td style="text-align: center;">られる</td>
<td style="text-align: center;">られれ</td>
<td style="text-align: center;">られよ・られろ</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">せる</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">せ</td>
<td style="text-align: center;">せる</td>
<td style="text-align: center;">せれ</td>
<td style="text-align: center;">せよ・せろ</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">させる</td>
<td style="text-align: center;">させ</td>
<td style="text-align: center;">させ</td>
<td style="text-align: center;">させる</td>
<td style="text-align: center;">させれ</td>
<td style="text-align: center;">させよ・させろ</td>
</tr>
</tbody>
</table>
<p>动词活用规则中存在下述例外情况：</p>
<ul>
<li>五段动词「行く」的第二连用形为「行っ」而非「行い」。</li>
<li>五段动词「問う、乞う、厭う」的第二连用形为「問う、乞う、厭う」而非「問っ、乞っ、厭っ」。</li>
<li>五大敬语动词「いらっしゃる、くださる、なさる、おっしゃる、ござる」除去「ござる」之外的四个动词的命令形词尾为「い」而非「れ」。即这些动词的命令形分别为「いらっしゃい、ください、なさい、おっしゃい、ござれ」。</li>
<li>一段动词「くれる」的命令形为「くれ」而非「くれよ・くれろ」。</li>
<li>口语中允许以「する」结尾的サ变动词按照类似五段动词的方式活用，如下表所示（这里为了并表显示，将具有多种形式的活用形合并在一个单元格内）：</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">サ変動詞</td>
<td style="text-align: center;">愛する</td>
<td style="text-align: center;">愛し・愛せ・愛さ</td>
<td style="text-align: center;">愛し</td>
<td style="text-align: center;">愛する</td>
<td style="text-align: center;">愛すれ</td>
<td style="text-align: center;">愛しろ・愛せよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">五段動詞</td>
<td style="text-align: center;"><strong>愛す</strong></td>
<td style="text-align: center;"><strong>愛さ</strong>・（愛そ）</td>
<td style="text-align: center;">愛し</td>
<td style="text-align: center;"><strong>愛す</strong></td>
<td style="text-align: center;"><strong>愛せ</strong></td>
<td style="text-align: center;"><strong>愛せ</strong></td>
</tr>
</tbody>
</table>
<p>而以「ずる」结尾的サ变动词可以按照类似一段动词的方式活用，如下表所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">サ変動詞</td>
<td style="text-align: center;">信ずる</td>
<td style="text-align: center;">信じ・信ぜ・信ざ</td>
<td style="text-align: center;">信じ</td>
<td style="text-align: center;">信ずる</td>
<td style="text-align: center;">信ずれ</td>
<td style="text-align: center;">信じろ・信ぜよ</td>
</tr>
<tr class="even">
<td style="text-align: center;">一段動詞</td>
<td style="text-align: center;"><strong>信じる</strong></td>
<td style="text-align: center;"><strong>信じ</strong></td>
<td style="text-align: center;">信じ</td>
<td style="text-align: center;"><strong>信じる</strong></td>
<td style="text-align: center;"><strong>信じれ</strong></td>
<td style="text-align: center;"><strong>信じろ・信じよ</strong></td>
</tr>
</tbody>
</table>
<p>可以注意到如果将「信ずる」转写为「信じる」，则除了终止形之外所有变形均遵循一段动词的规则，所以现代日语中以「ずる」结尾的サ变动词正在逐步合流为以「じる」结尾的一段动词。</p>
<div class="note info no-icon"><p>上述规则的一个例子是「愛する」，其五段动词的形式「愛す」实际上已经在很大范围内得到了运用，甚至部分口语条件下使用频率大于「愛する」。</p>
<p>更极端的是，这个动词的否定式已经几乎仅使用「愛せず・愛さない・愛さず」等形式，规则变化的「愛しない」在部分词典里已经标注弃用。另一方面，就连体形与终止形而言，「愛する」使用频率则明显高于「愛す」。</p>
<p>下面是该词语的几种形式，加粗的表示口语中更为常用的形式：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">终止与连体形</th>
<th style="text-align: center;">否定式</th>
<th style="text-align: center;">过去式（た形）</th>
<th style="text-align: center;">中顿式（て形）</th>
<th style="text-align: center;">假定式</th>
<th style="text-align: center;">可能式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">愛する</td>
<td style="text-align: center;"><strong>愛する</strong></td>
<td style="text-align: center;">愛しない・愛せず</td>
<td style="text-align: center;"><strong>愛した</strong></td>
<td style="text-align: center;"><strong>愛して</strong></td>
<td style="text-align: center;">愛すれば</td>
<td style="text-align: center;">愛できる</td>
</tr>
<tr class="even">
<td style="text-align: center;">愛す</td>
<td style="text-align: center;">愛す</td>
<td style="text-align: center;"><strong>愛さない・愛さず</strong></td>
<td style="text-align: center;"><strong>愛した</strong></td>
<td style="text-align: center;"><strong>愛して</strong></td>
<td style="text-align: center;"><strong>愛せば</strong></td>
<td style="text-align: center;"><strong>愛せる</strong></td>
</tr>
</tbody>
</table>
<p>下面列举歌词、推特发言等处的用例，可见口语中「愛す」的运用范围极其广泛：</p>
<ul>
<li>私は彼を<strong>愛さず</strong>にはいられない気持ちにいつしかなっていた。（我不知何时变得非他不可）</li>
<li>どうやってこの世界を<strong>愛せる</strong>かな？（我到底应当如何去爱这个世界？）</li>
<li>たった一人を<strong>愛せば</strong>純愛、二人<strong>愛せば</strong>浮気、三人<strong>愛せば</strong>ホラー、十人<strong>愛せば</strong>コメディ、百人<strong>愛せば</strong>誰も<strong>愛して</strong>ないのと同じ、全員<strong>愛せば</strong>神、自分だけ<strong>愛せば</strong>鬼、誰も<strong>愛せず</strong>とも鬼。（只爱一个人是纯爱，爱两个人是出轨，爱三个人是恐怖片，爱十个人是喜剧，爱一百个人就和谁都不爱一样，爱所有人的是神，只爱自己的是鬼，谁也不爱也是鬼）</li>
</ul>
<p>有趣的是上述第三句中的「愛せず」是「愛する」或者「愛せる」的否定而非「愛す」的否定，但是根据排比句式，基本可以排除这是「愛せる」的否定的情况。这也说明了口语的随意性。</p>
<p>而以「ずる」结尾的サ变动词的一段化则几乎十分完全，甚至影响了现代日本人对古日语的认识。</p>
<p>在 <a href="http://greenflash.private.coocan.jp/tanka-page/souko/ngaku/yasuda_bunpo6.pdf">这一篇文章</a> 中，作者以「信じる」为例，指出现代日本人在书写仿古文字的时候会写出「信じず・信じむ・信じらるるか」等并不符合古语文法的词语。这是因为该词语现代已经完全一段化，从而现代日本人在写古语的时候会把其当作上二段活用，即「信じ・信じ・信ず・信ずる・信ずれ・信じよ」，而其实际上的活用是古语サ变活用，即「信ぜ・信じ・信ず・信ずる・信ずれ・信ぜよ」。</p>
</div>
<div class="note info no-icon"><p>可以注意到，一段动词和サ变动词的命令形也有两种形式，但这里并没有将其称作第一命令形、第二命令形。这样处理的原因是这两种命令形间差别并不显著，在语法作用上几乎没有差别。这两者的差别几乎仅仅体现在语感上，其中「教えろ、しろ」偏向于口语，而「教えよ、せよ」偏向于书面。</p>
</div>
<h2 id="形容词及类形容词助动词的活用规则">形容词及类形容词助动词的活用规则</h2>
<p>日语形容词的六种活用规则如下表，这里注意，形容词的连用形有两种形式并且缺失命令形：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形容詞</td>
<td style="text-align: center;">高い</td>
<td style="text-align: center;">高かろ</td>
<td style="text-align: center;">高く</td>
<td style="text-align: center;">高かっ</td>
<td style="text-align: center;">高い</td>
<td style="text-align: center;">高けれ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>形容词的词干指的是其原形删去词尾的「い」后剩余的部分，其可能应用在一部分的助动词接续、复合词生成上，但是其并不是一种用言活用形式。</p>
<p>形容词缺失的命令形可以通过第一连用形接续动词「する」后通过动词的命令形代替，例如「高くしろ・高くせよ」。</p>
<p>类形容词的助动词的活用则基本可以根据上述活用表推理出：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">類形容詞</td>
<td style="text-align: center;">ない</td>
<td style="text-align: center;">なかろ</td>
<td style="text-align: center;">なく</td>
<td style="text-align: center;">なかっ</td>
<td style="text-align: center;">ない</td>
<td style="text-align: center;">なけれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">たい</td>
<td style="text-align: center;">たかろ</td>
<td style="text-align: center;">たく</td>
<td style="text-align: center;">たかっ</td>
<td style="text-align: center;">たい</td>
<td style="text-align: center;">たけれ</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">らしい</td>
<td style="text-align: center;">らしかろ</td>
<td style="text-align: center;">らしく</td>
<td style="text-align: center;">らしかっ</td>
<td style="text-align: center;">らしい</td>
<td style="text-align: center;">らしけれ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>当前现代日语中仅有「いい」一个不规则形容词，其活用规则为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形容詞</td>
<td style="text-align: center;">いい</td>
<td style="text-align: center;">よかろ</td>
<td style="text-align: center;">よく</td>
<td style="text-align: center;">よかっ</td>
<td style="text-align: center;">いい</td>
<td style="text-align: center;">よけれ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<div class="note info no-icon"><p>事实上形容词还有第三连用形的存在，但是其几乎已经完全固化为若干的固定短语，故这里并不将其作为一个活用形式。</p>
<p>第三连用形为第一连用形与「ございます、存じます」等动词连用后发生音便产生的：</p>
<ul>
<li>暑く ＋ ございます → 暑<strong>う</strong>ございます</li>
</ul>
<p>并且第三连用形甚至可能导致形容词词干也发生变化。例如形容词「うれしい」接续「ございます」的音便为：</p>
<ul>
<li>うれ<strong>しく</strong> ＋ ございます → うれ<strong>しゅう</strong>ございます</li>
</ul>
<p>事实上很多常用问候语是形容词第三连用形的残留：</p>
<ul>
<li>ありが<strong>たく</strong> ＋ ございます → ありが<strong>とう</strong>ございます</li>
<li>おめで<strong>たく</strong> ＋ ございます → おめで<strong>とう</strong>ございます</li>
</ul>
</div>
<h2 id="形容动词及类形容动词助动词的活用规则">形容动词及类形容动词助动词的活用规则</h2>
<p>日语形容动词的六种活用规则如下表，这里注意，形容动词的连用形有三种形式并且缺失命令形：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連用形③</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形容動詞</td>
<td style="text-align: center;">静かだ</td>
<td style="text-align: center;">静かだろ</td>
<td style="text-align: center;">静かで</td>
<td style="text-align: center;">静かだっ</td>
<td style="text-align: center;">静かに</td>
<td style="text-align: center;">静かな</td>
<td style="text-align: center;">静かなら</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>形容动词的词干指的是其原形删去词尾的「だ」后剩余的部分，其可能应用在一部分的助动词接续、复合词生成上，但是其并不是一种用言活用形式。</p>
<p>形容动词缺失的命令形可以通过第三连用形接续动词「する」后通过动词的命令形代替，例如「静かにしろ・静かにせよ」。</p>
<p>类形容动词的助动词的活用则基本可以根据上述活用表推理出：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形①</th>
<th style="text-align: center;">連用形②</th>
<th style="text-align: center;">連用形③</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">類形容動詞</td>
<td style="text-align: center;">だ</td>
<td style="text-align: center;">だろ</td>
<td style="text-align: center;">で</td>
<td style="text-align: center;">だっ</td>
<td style="text-align: center;">（に）</td>
<td style="text-align: center;">（な）</td>
<td style="text-align: center;">なら</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">そうだ②</td>
<td style="text-align: center;">そうだろ</td>
<td style="text-align: center;">そうで</td>
<td style="text-align: center;">そうだっ</td>
<td style="text-align: center;">そうに</td>
<td style="text-align: center;">そうな</td>
<td style="text-align: center;">そうなら</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">ようだ</td>
<td style="text-align: center;">ようだろ</td>
<td style="text-align: center;">ようで</td>
<td style="text-align: center;">ようだっ</td>
<td style="text-align: center;">ように</td>
<td style="text-align: center;">ような</td>
<td style="text-align: center;">ようなら</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>形容动词活用规则中存在下述例外情况：</p>
<ul>
<li>古日语形容词退化得到的形容动词「同じだ」有两种连体形，除去规则变化的「同じな」，还具有另外一种继承自古日语形容词的「同じ」形式。规则变化的连体形用于接续「ので、のに」等助词，例如「同じなので」。而修饰一般体言的时候使用特殊变化的连体形，例如「同じ人」。</li>
<li>形容动词性代词「こんなだ、そんなだ、あんなだ、どんなだ」有两种连体形，除去规则变化的「◯んなな」，还具有另外一种常用的「◯んな」形式。规则变化的连体形用于接续「ので、のに」等助词，例如「こんななので」。而修饰一般体言的时候使用特殊变化的连体形，例如「そんなこと」。</li>
<li>部分古日语中的ナリ活用形容动词在现代日语中退化，仅保留了连体形，而丢失了所有其他活用形式。这些形容动词包括「大きな、小さな、おかしな」等。</li>
</ul>
<h2 id="类古语助动词与不规则助动词的活用规则">类古语助动词与不规则助动词的活用规则</h2>
<p>类古语形容词助动词仅有「べし」一个，其活用规则类似古语形容词，活用规则如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">類古文形容詞</td>
<td style="text-align: center;">べし</td>
<td style="text-align: center;">べから</td>
<td style="text-align: center;">べかり</td>
<td style="text-align: center;">べき</td>
<td style="text-align: center;">べけれ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>不规则助动词的活用规则如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">そうだ①</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">そうで</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">そうなら</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">です</td>
<td style="text-align: center;">でしょ</td>
<td style="text-align: center;">でし</td>
<td style="text-align: center;">（です）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">う・よう</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（う・よう）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">た</td>
<td style="text-align: center;">たろ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">た</td>
<td style="text-align: center;">たら</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">まい</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（まい）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>其中不规则助动词「ます」的未然形有两种形式：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形①</th>
<th style="text-align: center;">未然形②</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">ます</td>
<td style="text-align: center;">ませ</td>
<td style="text-align: center;">ましょ</td>
<td style="text-align: center;">まし</td>
<td style="text-align: center;">ます</td>
<td style="text-align: center;">ますれ</td>
<td style="text-align: center;">まし・ませ</td>
</tr>
</tbody>
</table>
<p>而不规则助动词「ず・ん・ぬ」的活用可以看成下述两个词语合并而成的：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">仮定形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">ず・ん・ぬ</td>
<td style="text-align: center;">ず</td>
<td style="text-align: center;">ず</td>
<td style="text-align: center;">ぬ</td>
<td style="text-align: center;">ね</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">類古文ラ変</td>
<td style="text-align: center;">（ざり）</td>
<td style="text-align: center;">ざら</td>
<td style="text-align: center;">ざり</td>
<td style="text-align: center;">ざる</td>
<td style="text-align: center;">ざれ</td>
<td style="text-align: center;">ざれ</td>
</tr>
</tbody>
</table>
<p>该助动词的形成详见下一章。</p>
<h2 id="chapter-2-section-4-练习">Chapter 2 Section 4 练习</h2>
<p>【第一问】给定下述用言（助动词）的原形，写出这些用言（助动词）的未然形。</p>
<ul>
<li>しまう、入る、黄色い、好きだ、話す</li>
<li>ます、登る、増える、いい、なさる</li>
</ul>
<p>【第二问】已知助词「て・で」与用言（助动词）的接续规则为：</p>
<ul>
<li>接续在动词（类动词助动词）连用形（动词为五段动词时使用第二连用形）后且若动词原形以「ぐ、む、ぬ、ぶ」结尾则浊化</li>
<li>接续在形容词（类形容词助动词）第一连用形后且不浊化</li>
<li>「ない」也可以使用终止形接续且浊化形成「<strong>ない</strong>で」</li>
<li>「ます」使用连用形接续且不浊化形成「<strong>まし</strong>て」</li>
</ul>
<p>基于上述规则，给定下述用言（助动词）的原形，写出这些用言（助动词）接续助词「て・で」之后形成的词组。</p>
<ul>
<li>歩く、話す、出る、美しい、ある</li>
<li>ない、来る、赤い、学ぶ、死ぬ</li>
<li>負ける、勝つ、買う、いい、られる</li>
<li>たがる、泳ぐ、痛む、行く、悪い</li>
<li>掃除する、問う、らしい、作る、軽んずる</li>
</ul>
<h1 id="练习参考答案">练习参考答案</h1>
<h2 id="chapter-2-section-1-练习答案">Chapter 2 Section 1 练习答案</h2>
<p>【第一问】分类结果如下：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">动词</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">五段动词</td>
<td style="text-align: center;"><code>@ 許 ゆる</code>す、<code>@ 出 だ</code>す、<code>@ 導 みちび</code>く、<code>@ 塞 ふさ</code>ぐ、<code>@ 積 つ</code>もる、<code>@ 狂 くる</code>う、<code>@ 注 そそ</code>ぐ、<code>@ 回 まわ</code>る、<code>@ 結 むす</code>ぶ、<code>@ 彷徨 さまよ</code>う、<code>@ 喋 しゃべ</code>る、<code>@ 拭 ぬぐ</code>う、<code>@ 高 たか</code>まる、<code>@ 踏 ふ</code>む、なさる、<code>@ 放 はな</code>つ、<code>@ 放 ほう</code>る</td>
</tr>
<tr class="even">
<td style="text-align: center;">一段动词</td>
<td style="text-align: center;"><code>@ 駆 か</code>ける、<code>@ 出 で</code>る、<code>@ 染 そ</code>める、<code>@ 逃 のが</code>れる、<code>@ 高 たか</code>める</td>
</tr>
<tr class="odd">
<td style="text-align: center;">カ变动词</td>
<td style="text-align: center;"><code>@ 来 く</code>る</td>
</tr>
<tr class="even">
<td style="text-align: center;">サ变动词</td>
<td style="text-align: center;"><code>@ 決 けっ</code>する、<code>@ 信 しん</code>ずる</td>
</tr>
</tbody>
</table>
<h2 id="chapter-2-section-2-练习答案">Chapter 2 Section 2 练习答案</h2>
<p>【第一问】首先标出所有助词：</p>
<ul>
<li>上海<strong>から</strong>東京<strong>までの</strong>飛行機<strong>で</strong>日本<strong>へ</strong>来ました。</li>
<li>彼<strong>は</strong>優しい<strong>ので</strong>、付き合いたい。</li>
</ul>
<p>之后逐词组翻译：</p>
<ul>
<li>上海<strong>から</strong>（从上海）東京<strong>まで</strong>（到东京）<strong>の</strong>（的）飛行機<strong>で</strong>（用飞机）日本<strong>へ</strong>（到日本）来ました（来了）。</li>
<li>彼<strong>は</strong>（他）優しい<strong>ので</strong>（因为…温柔）、付き合いたい（想交往）。</li>
</ul>
<p>从而通过调换语序就能得到最后的翻译：</p>
<ul>
<li>乘坐从上海到东京的飞机来到了日本。</li>
<li>因为他很温柔，所以我想和他交往。</li>
</ul>
<p>这里需要注意翻译后的句子需要补全部分汉语成分，尤其对于一些日语习惯省略主语但是汉语不习惯省略的句子，需要将主语补全。</p>
<h2 id="chapter-2-section-4-练习答案">Chapter 2 Section 4 练习答案</h2>
<p>【第一问】直接根据活用规则表即可得到这些用言（助动词）的未然形：</p>
<ul>
<li>しまわ・しまお、入ら・入ろ、黄色かろ、好きだろ、話さ・話そ</li>
<li>ませ・ましょ、登ら・登ろ、増え、よかろ、なさら・なさろ</li>
</ul>
<p>【第二问】根据接续规则，并根据词语类型根据活用规则表即可得到下述词组：</p>
<ul>
<li>歩いて、話して、出て、美しくて、あって</li>
<li>なくて・ないで、<code>@ 来 き</code>て、赤くて、学んで、死んで</li>
<li>負けて、勝って、買って、よくて、られて</li>
<li>たがって、泳いで、痛んで、行って、悪くて</li>
<li>掃除して、問うて、らしくて、作って、軽んじて</li>
</ul>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 3 用言活用形与体言的基本应用</title>
    <url>/2022/08/22/ja-tutorial-ch3/</url>
    <content><![CDATA[<p>本章主要承接在上一章之后，讲解用言（助动词）各种活用形以及体言的基本应用场景。本章并不会展开讲解涉及到助动词、助词的用法，这些用法将会在后续的章节具体展开说明。对于不涉及到助动词、助词的用法，本文将详细讲解。</p>
<span id="more"></span>
<h1 id="修饰成分">修饰成分</h1>
<p>形容词和形容动词的最重要的作用就是修饰体言，此外，动词或者动词词组也可以用于修饰体言。这三者在修饰体言的时候均应当使用连体形。此外，大部分助动词的连体形也可以用于修饰体言，「だ、ます、です、う、まい」的连体形除外，这五个助动词的连体形已经退化至仅能用于连接各种助词或者助动词。下述例句中所修饰的成分用下划线表示。</p>
<ul>
<li>（动词）太陽は東から<strong>上る</strong><u>もの</u>。（太阳从东方升起）</li>
<li>（类动词助动词）裏切り者と呼ば<strong>れる</strong><u>男</u>。（被称为叛徒的男人）</li>
<li>（形容词）<strong>紅い</strong><u>リンゴ</u>はうまい。（红苹果好吃）</li>
<li>（类形容词助动词）でき<strong>ない</strong><u>こと</u>はないわけがない。（不可能没有不会做的事情）</li>
<li>（形容动词）<strong>嫌いな</strong><u>こと</u>ばっかりあった。（最近总是厌烦的事情）</li>
<li>（类形容动词助动词）輪の<strong>ような</strong><u>満月</u>。（圆环一样的满月）</li>
<li>（不规则助动词）昨日買っ<strong>た</strong><u>お菓子</u>はもうなくなった。（昨天买的零食已经吃完了）</li>
</ul>
<p>除了修饰体言，作为副词修饰用言也是极其重要的一种语法作用。形容词（类形容词助动词）的第一连用形和形容动词（类形容动词助动词）的第三连用形可以作为副词形式形容用言。不规则助动词很少作为副词成分修饰用言。下述例句中所修饰的成分用下划线表示。</p>
<ul>
<li>（形容词）<strong>すごく</strong><u>きれいな</u>風景。（非常美丽的风景）</li>
<li>（类形容词助动词）天気がいいから、出かけて遊び<strong>たく</strong><u>なる</u>。（天气挺好的，有点想出去玩了）</li>
<li>（形容动词）<strong>静かに</strong><u>しろ</u>！（安静！）</li>
<li>（类形容动词助动词）飛ぶ<strong>ように</strong><u>帰っ</u>た。（飞一般地回去了）</li>
</ul>
<p>此外，这里需要提到形式体言这个概念。形式体言指的是一类含义虚化的体言，如「こと、もの、わけ、はず、うち」等等，这类体言常常用于构成固定的句式。形式体言的具体用法后续讲解。</p>
<div class="note info no-icon"><p>形容词的「○○くなる、○○くする」以及形容动词的「○○になる、○○にする」事实上类似形式用言，这类表达已经更类似于一种固定搭配。</p>
<p>这里形容词的「○○くなる」和形容动词的「○○になる」表达自然的状态变迁。此外，体言也可以使用「○○になる」形式：</p>
<ul>
<li>彼女は化粧すると<strong>かわいくなる</strong>。（她化妆了就会很可爱）</li>
<li>気づいたら彼が<strong>好きになっ</strong>ていた。（等发觉的时候已经喜欢上他了）</li>
<li>薬を飲みすぎたら効か<strong>なくなる</strong>。（药吃太多了也会无效）</li>
<li>天気がいいから、出かけて遊び<strong>たくなる</strong>。（天气挺好的，有点想出去玩了）</li>
<li>やっと<strong>大人になっ</strong>た。（终于长大了）</li>
</ul>
<p>可以注意到翻译的时候并没有着重强调“变得”，也就是说没有必要翻译成“终于变成大人了”之类生硬的语句。这是因为这类表达本身就是一种自然而然的状态变迁，并不需要强调变化过程。</p>
<p>而形容词的「○○くする」和形容动词的「○○にする」则表达强制的状态变迁。此外，体言也可以使用「○○にする」形式：</p>
<ul>
<li>辛いものが苦手なので、料理はいつも<strong>甘くする</strong>。（因为吃不了辣所以总是把菜做甜）</li>
<li>練習は不可能を<strong>可能にする</strong>。（练习能把不可能变为可能）</li>
<li>プレゼンは誰でも分かりやすいように簡単な<strong>内容にし</strong>た。（为了让所有人都容易理解我的讲解，我尽量选择了简单的内容）</li>
</ul>
<p>可以发现这里的状态变迁是有人的主观意志存在的，所以在翻译的时候需要强调人的主观能动性。</p>
<p>此外，动词如果想要使用这样的表达，需要借助助动词「ようだ」或者使用形式体言「こと」：</p>
<ul>
<li>今は手が離せませんが、終わり次第できるだけ早く<strong>着くようにし</strong>ます。（虽然现在抽不开身，但是我一结束就会尽快到场）</li>
<li>無理し<strong>ないようにし</strong>てね。（不要太勉强自己）</li>
<li>会議の結果、部長の案を<strong>採用することになっ</strong>た。（会议的结果是采用了部长的提议）</li>
<li>拾った子猫を<strong>飼うことにし</strong>た。（决定收养捡到的小猫）</li>
</ul>
</div>
<h2 id="chapter-3-section-1-练习">Chapter 3 Section 1 练习</h2>
<p>【第一问】尝试将下述划线部分的用言或助动词原形修改为合适的活用形，以符合语法要求：</p>
<ul>
<li><u>嫌いだ</u>ものはいつか<u>好きだ</u>なるかもしれない。</li>
<li><u>普通だ</u>してもいいだよ。</li>
<li>髪は<u>紅い</u>するならどう？</li>
<li>毎日して<u>いる</u>ことは習慣と言います。</li>
</ul>
<h1 id="用言名词化">用言名词化</h1>
<p>部分用言的活用形可以直接将该用言名词化：</p>
<ul>
<li>动词的连用形（动词为五段动词时使用第一连用形）</li>
<li>形容词的第一连用形或者词干或者词干接续「さ、み」等接尾词</li>
<li>形容动词的词干或者词干接续「さ、み」等接尾词</li>
</ul>
<p>先前我们在第一章提到了送假名的规则，其中就涉及到了动词使用连用形名词化的例子。一般而言，动词在使用连用形名词化后，是否需要写出送假名的判定标准是较为模糊的。</p>
<ul>
<li><code>@ 光 ひか</code>る → <code>@ 光 ひかり</code></li>
<li><code>@ 畳 たた</code>む → <code>@ 畳 たたみ</code></li>
<li><code>@ 受 う</code>け<code>@ 付 つ</code>ける → <code>@ 受付 うけつけ</code></li>
<li><code>@ 踊 おど</code>る → <code>@ 踊 おどり</code>・<code>@ 踊 おど</code>り</li>
<li><code>@ 定 さだ</code>める → <code>@ 定 さだめ</code>・<code>@ 定 さだ</code>め</li>
<li><code>@ 迎 むか</code>える → <code>@ 迎 むか</code>え</li>
<li><code>@ 始 はじ</code>まる → <code>@ 始 はじまり</code>・<code>@ 始 はじ</code>まり</li>
<li><code>@ 終 お</code>わる → <code>@ 終 おわり</code>・<code>@ 終 お</code>わり</li>
</ul>
<p>一个大体的规律是，如果其名词形式应用更为广泛，甚至可以认为单独成词（如名词化后的含义和原先动词有所差别），如「<code>@ 光 ひかり</code>、<code>@ 畳 たたみ</code>、<code>@ 受付 うけつけ</code>」等，则送假名不需要写出，否则推荐写明和动词相对照的送假名方便读音。</p>
<p>另外，形容词、形容动词的名词化是需要根据词语的不同来确定的，不同的词语可能有不同的名词化方法，同一个词语也可以有多个名词化方法，且不同的名词化方法可能有不同的含义。这里举出一些实例，读者可以自行通过词典等方式查询这些词语比较其含义上的差别：</p>
<ul>
<li>赤い → 赤</li>
<li>強い → 強さ</li>
<li>遠い → 遠く</li>
<li>清潔だ → 清潔</li>
<li>静かだ → 静かさ</li>
<li>便利だ → 便利・便利さ</li>
</ul>
<p>这些差别将会在后续讲解接尾词的时候具体说明。</p>
<h2 id="chapter-3-section-2-练习">Chapter 3 Section 2 练习</h2>
<p>【第一问】尝试通过查阅词典等资料，名词化下述用言，并比较各种名词化用言方法的含义上的细节差别：</p>
<ul>
<li>扱う、読み込む、重い、厳格だ</li>
</ul>
<h1 id="复合词语的构成">复合词语的构成</h1>
<p>复合词语指的是两个词语通过某种规则连接成为的新的单词。拼接成为复合词语的两个词语中，位置在前的称为<strong>前项</strong>，位置在后的称为<strong>后项</strong>。一般而言，后项决定了复合词语的词性，例如说后项为动词则复合词语一般为动词。而复合词语中一般对前项有活用形的要求，基本要求如下：</p>
<ul>
<li>前项为动词时，前项动词用连用形（动词为五段动词时使用第一连用形）</li>
<li>前项为形容词时，前项形容词用词干</li>
<li>前项为形容动词时，前项形容动词用词干</li>
<li>前项为体言时，前项体言用原形</li>
</ul>
<p>复合词语例子可以参见下述表格（涉及到形容动词的复合词较少，故部分例子缺失）：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">动词前项</th>
<th style="text-align: center;">形容词前项</th>
<th style="text-align: center;">形容动词前项</th>
<th style="text-align: center;">体言前项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">动词后项</td>
<td style="text-align: center;">見送る <br /> （見る ＋ 送る）</td>
<td style="text-align: center;">近寄る <br /> （近い ＋ 寄る）</td>
<td style="text-align: center;">好き好む <br /> （好きだ ＋ 好む）</td>
<td style="text-align: center;">旅立つ <br /> （旅 ＋ 立つ）</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词后项</td>
<td style="text-align: center;">粘り強い <br /> （粘る ＋ 強い）</td>
<td style="text-align: center;">細長い <br /> （細い ＋ 長い）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">心細い <br /> （心 ＋ 細い）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词后项</td>
<td style="text-align: center;">話し上手だ <br /> （話す ＋ 上手だ）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">好き勝手だ <br /> （好きだ ＋ 勝手だ）</td>
<td style="text-align: center;">口下手だ <br /> （口 ＋ 下手だ）</td>
</tr>
<tr class="even">
<td style="text-align: center;">体言后项</td>
<td style="text-align: center;">借り物 <br /> （借りる ＋ 物）</td>
<td style="text-align: center;">浅瀬 <br /> （浅い ＋ 瀬）</td>
<td style="text-align: center;">得意顔 <br /> （得意だ ＋ 顔）</td>
<td style="text-align: center;">春風 <br /> （春 ＋ 風）</td>
</tr>
</tbody>
</table>
<p>当然，部分助动词甚至也可以参与到构成复合词语中，例如「負け<strong>ず</strong>嫌いだ」，但是这类例子极少，故认为是一类例外而并非广泛使用的用法。</p>
<p>此外，部分词语复合后可能发生浊音便等音便，比如：</p>
<ul>
<li><code>@ 心 こころ</code> ＋ <code>@ 細 ほそ</code>い → <code>@ 心細 こころぼそ</code>い</li>
</ul>
<div class="note info no-icon"><p>在涉及到形容词词干的地方，绕不过去单音节形容词这个大问题，比如「ない、いい、よい」。一般而言，由于单音节形容词的词干太短，和其余成分复合的时候容易丢失，故日语中常常在其后面加入冗余的「さ」，如「よ<strong>さ</strong>そうだ、な<strong>さ</strong>すぎる」。</p>
<p>然而这个冗余的「さ」到底加不加，目前几乎成为了仅能用惯例来约束的语法。这个语法之所以混乱，有几个原因。其一是有两个「ない」，一个是作为形容词的「ない」，一个是作为助动词的「ない」，而事实上更为复杂，部分的形容词内部有固化的「ない」，部分形容词以「ない」结尾。其二是单音节形容词中常用的仅仅是「ない、いい、よい」三个，而「濃い、酸い」之类的不常用单音节形容词应当如何处置没有定论，且语料很少。</p>
<p>这里我们分情况给出本文所接受的观点，另外由于还未讲解助动词，这里的「そうだ」是需要使用形容词词干接续的类形容动词助动词。</p>
<p>首先是「濃い、酸い」，其中「濃い」完全不加冗余的「さ」，「酸い」在涉及词干时一般使用其同义词「酸っぱい」代替。例如「濃そうだ、濃すぎる、酸っぱそうだ、酸っぱすぎる」。不过注意，「濃<strong>さ</strong>すぎる」在一定程度上也是可以接受的表达。</p>
<p>之后是「いい、よい」，由于「いい」词干往往会使用「よ」，所以这两者可以混同考虑。一般而言，接续助动词的时候会添加冗余的「さ」，形成「よ<strong>さ</strong>そうだ」，其余状况下则一般不添加，如「よすぎる」。</p>
<p>最后讨论最为麻烦的「ない」。所有用于否定动词的「ない」，都应当是助动词「ない」，包括这一类的已经固化在形容词中的「ない」，如「つまらない」，此时按照严格语法，无论如何均不能加冗余的「さ」，如「取れなそうだ、つまらなそうだ、食べなすぎる、つまらなすぎる」。然而由于「ない」在形容词和助动词之间的差别日趋消失，在口语中容忍添加冗余的「さ」的表达，如「取れな<strong>さ</strong>そうだ、つまらな<strong>さ</strong>そうだ」。</p>
<p>用于否定形容词、形容动词的「ない」，表达存在与否的「ない」，包括这一类的已经固化在形容词中的「ない」，如「頼りない」，均应当添加冗余的「さ」，如「楽しくな<strong>さ</strong>そうだ、静かではな<strong>さ</strong>すぎる、頼りな<strong>さ</strong>そうだ」。</p>
<p>仅仅以「ない」结尾的形容词，如「危ない、少ない」，均不应当添加冗余的「さ」，如「危なそうだ、少なすぎる」。然而由于使用者的惯性，逐渐出现了在口语中添加冗余的「さ」的现象，如「危な<strong>さ</strong>そうだ、少な<strong>さ</strong>すぎる」。</p>
</div>
<div class="note info no-icon"><p>复合词语的语义应当由前项与后项共同赋予。但是随着语言的发展，部分复合词语中的后项逐步退化。这意味着部分后项词语逐渐变为了类似补助词语的存在，复合词语的语义主要由其前项决定。</p>
<p>比如动词「合う」，其作为复合词语的后项的时候，用于表达“相互”的语义。如「分かる」的含义为“了解、理解”，那么「分かり合う」的含义为“相互理解”。</p>
<p>比如形容词「難い」，其作为复合词语的后项的时候，用于表达“难以”的语义。如「腐る」的含义为“腐坏”，那么「腐りにくい」的含义为“难以腐坏”。</p>
<p>根据我们在 Chapter 1 中的讲解，含义虚化的词语一般使用平假名表记。事实上，作为复合词语后项的「にくい」已经基本完全仅使用平假名表记。而作为复合词语后项的「合う」使用汉字表记以及平假名表记的频率目前依然持平。</p>
<p>更多近似补助词语的复合词语后项我们将会在后续部分讲解。</p>
</div>
<h2 id="chapter-3-section-3-练习">Chapter 3 Section 3 练习</h2>
<p>【第一问】尝试将下述给定前项与后项的词语对构成复合词语，并通过词典等方式查询这些复合词语的含义：</p>
<ul>
<li>やる ＋ 直す</li>
<li>理解する ＋ やすい</li>
<li>見る ＋ 失う</li>
<li>結ぶ ＋ つく</li>
<li>手 ＋ 放す</li>
<li>弱い ＋ すぎる</li>
</ul>
<h1 id="语句的中顿与终止">语句的中顿与终止</h1>
<h2 id="语句终止">语句终止</h2>
<p>一般而言，我们终结一句话的时候，应当使用用言（或者助动词）的终止形或者命令形。终止形结句是普遍的语法现象，而命令形结句仅会出现在表达命令语义的时候，常常带有强烈的情感倾向（部分以命令形结尾的敬语用法除外）。此外，使用用言（或者助动词）的终止形或者命令形辅助以终助词结句，以表达附加语义也是极为常见的。</p>
<p>此外可以注意到，在非正式的行文或者口语中，形容词或者形容动词的词干也可以用于结句。这种结句方式往往带有较为强烈的情感倾向。</p>
<p>使用体言结句是可行的，但是使用体言结句这种简洁的用法（这种语法现象称为「体言止め」）几乎仅出现在文学作品、和歌之中，正式文章很少使用。并且，用体言直接终结的句子一般结构比较单一，并不是普遍现象。所以这里暂不讨论使用体言结句的用法。然而在附加终助词的条件下，也就是体言附加终助词结句是一种可行的结句方式，但是并不正式。</p>
<p>使用非终助词的助词结句也是可行的，但也不是一种正式或者普遍的结句方法。同样，这一类助词附加终助词也是可以用于结句的，但也并不正式。</p>
<p>总而言之，终结语句的常见方式包括：</p>
<ul>
<li>动词或类动词助动词的终止形或者命令形（可以附加终助词）</li>
<li>形容词或类形容词助动词的终止形（可以附加终助词）或者词干</li>
<li>形容动词或类形容动词助动词的终止形（可以附加终助词）或者词干</li>
<li>不规则助动词的终止形（可以附加终助词）
<ul>
<li>不规则助动词「ます」可以使用命令形，但几乎仅限于敬语固定用法</li>
</ul></li>
<li>直接用副词、体言或者非终助词的助词结句是不常见的，但是附属上终助词后结句是可以接受的</li>
</ul>
<p>现在我们观察下述直接使用用言（或者助动词）的终止形结句的例句：</p>
<ul>
<li>（动词）春が来ると、桜が<strong>咲く</strong>。（春天来了，樱花开了）</li>
<li>（类动词助动词）わたしがあの子供に笑わ<strong>せる</strong>。（我让孩子们就那样笑着）</li>
<li>（形容词）寝不足だから今はすごく<strong>眠い</strong>。（因为睡眠不足现在特别困）</li>
<li>（类形容词助动词）部屋はまだ片付けてい<strong>ない</strong>。（房间还没收拾）</li>
<li>（形容动词）この問題はとても<strong>簡単だ</strong>。（这个问题太简单了）</li>
<li>（类形容词助动词）天気予報によると、明日は雨が降り<strong>そうだ</strong>。（据天气预报说，明天好像要下雨）</li>
<li>（不规则助动词）初めまして、わたくしは〇〇社の××と申し<strong>ます</strong>。（初次见面，我是〇〇公司的××）</li>
</ul>
<p>从自然程度上考虑，使用动词或类动词助动词结句会显得稍微突兀，而形容词或形容动词（包括类似助动词）结句则稍微委婉，不规则助动词结句则一般是出现在教科书上的范文，是一种较为正式的结句方式。</p>
<p>之后观察下述直接使用动词命令形或者形容词、形容动词词干结句的例句：</p>
<ul>
<li>（动词）早く<strong>行け</strong>！（快点！）</li>
<li>（形容词）うわ、今日、めっちゃ<strong>寒</strong>！（啊，今天真冷！）</li>
<li>（形容动词）ああ、<strong>素敵</strong>！（啊，厉害！）</li>
<li>（类形容动词助动词）おお、おいし<strong>そう</strong>！（哦，看起来真好吃！）</li>
<li>（敬语）お召し上がり<strong>ください</strong>。（请慢用）</li>
<li>（敬语）いらっしゃい<strong>ませ</strong>。（欢迎光临）</li>
</ul>
<p>可以注意到这类句子往往是一种感叹句，常用于命令他人完成某一行为（动词），或者感情强烈地感叹某种事物的某种特征（形容词、形容动词）。然而也正如最后两个例句，敬语中的命令形往往已经不再具有命令语义，而仅仅是一种固定用法。</p>
<p>下面是使用终助词辅助结句的例句：</p>
<ul>
<li>（动词终止形）勝手にやる<strong>な</strong>！（别随便动！）</li>
<li>（动词命令形）教えてくれ<strong>よ</strong>！（告诉我吧！）</li>
<li>（形容词终止形）いまやる気まったくない<strong>ね</strong>。（现在一点干劲都拿不出来）</li>
<li>（形容动词终止形）この服が好きだ<strong>か</strong>？（喜欢这件衣服吗？）</li>
<li>（不规则助动词终止形）ラーメンを食いに行こう<strong>ぜ</strong>。（一块去吃拉面吧）</li>
<li>（体言）これはなに<strong>かしら</strong>？（这又是什么？）</li>
<li>（副词）きっと<strong>ね</strong>！（一定！）</li>
<li>（非终助词的助词）気をつけて<strong>ね</strong>！（小心点啊！）</li>
</ul>
<p>附加终助词的语句的语气基本依靠终助词。至于何种终助词提供何种语气，后续章节再具体讨论。</p>
<h2 id="语句中顿">语句中顿</h2>
<p>语句的中顿与语句终止不同，中顿仅仅是表示目前的叙述暂停但是并没有停止描述。</p>
<p>中顿语句的常见方式包括：</p>
<ul>
<li>动词或类动词助动词的连用形（动词为五段动词时使用第一连用形）</li>
<li>形容词或类形容词助动词的第一连用形</li>
<li>形容动词或类形容动词助动词的第一连用形</li>
<li>不规则助动词的「そうで、ず、ずに」等形式也可以用于中顿</li>
<li>各类接续助词</li>
</ul>
<p>先不讨论接续助词，下面为各种语序中顿的例子：</p>
<ul>
<li>（动词）雨が<strong>降り</strong>、雷が鳴る。（下雨打雷）</li>
<li>（类动词助动词）落ち葉は踏ま<strong>れ</strong>、灰になった。（落叶被路人踩碎，散落一地）</li>
<li>（形容词）夏は<strong>暑く</strong>、冬は寒い。（夏天热，冬天冷）</li>
<li>（类形容词助动词）彼は学生では<strong>なく</strong>、会社員です。（他不是学生，是公司职员）</li>
<li>（形容动词）ここは水が<strong>きれいで</strong>、空は高い。（这里流水清澈，天空辽阔）</li>
<li>（类形容动词助动词）リンゴは赤<strong>そうで</strong>、うまそうに見える。（苹果红红的，看起来好吃）</li>
<li>（不规则助动词）窓を閉じ<strong>ずに</strong>寝てる。（不关窗就睡着了）</li>
</ul>
<p>可以发现中顿可以是顺接的中顿，即语义前后没有转折，也可以是逆接的中顿，即语义前后发生了转折。如果不借助接续助词，顺接和逆接需要通过语义自行判断。而为了语义更加容易理解和清晰，需要借助各种接续助词表达中顿中所包含的基本含义。这里举出几例接续助词：</p>
<ul>
<li>あの子は頭がいい<strong>し</strong>、勉強もできる<strong>し</strong>、きっといい成績をとるよ。（那孩子又聪明，又会学习，一定能取得好成绩）</li>
<li>そう言われ<strong>ても</strong>、信じられないんだな。（就算这么说，我也不太信）</li>
<li>毎日朝七時起き<strong>て</strong>、顔を洗っ<strong>て</strong>、朝ご飯を食べ<strong>て</strong>、そして新しい一日は始まる。（每天早上七点起床，洗脸吃饭，新的一天就这样开始了）</li>
<li>できなけれ<strong>ば</strong>、俺を呼んでね。（要是做不出来的话就喊我）</li>
<li>音楽を聴き<strong>ながら</strong>、宿題をしています。（一边听音乐一边写作业）</li>
</ul>
<p>这些接续助词的具体使用规则，后续章节再具体讨论。</p>
<h2 id="chapter-3-section-4-练习">Chapter 3 Section 4 练习</h2>
<p>【第一问】尝试将下述划线部分的用言或助动词原形修改为合适的活用形，以正确结句或中顿语句，并且语义符合上下文的提示：</p>
<ul>
<li>冬は来たら、雪は<u>降り始まる</u>。</li>
<li>また不合格なら留年ぞ！もっと真面目に<u>勉強する</u>！</li>
<li>あいつは天才と呼ば<u>れる</u>、できるやつだな。</li>
<li>一緒に行きましょ<u>う</u>か？</li>
<li>こっち見ないで<u>くれる</u>！</li>
</ul>
<h1 id="特殊用法">特殊用法</h1>
<h2 id="表移动目的にいくにくるにかえる">表移动目的「○○にいく、○○にくる、○○にかえる」</h2>
<p>动词的连用形（动词为五段动词时使用第一连用形）可以接续「に」后接续表达移动的动词表达移动的目的：</p>
<ul>
<li>郵便局へ手紙を<strong>出しに行き</strong>ました。（去邮局寄信）</li>
<li>ここに何を<strong>しに来る</strong>のか？（你来这里做什么）</li>
<li>家へ忘れ物を<strong>取りに帰っ</strong>た。（回家把落下的东西取过来）</li>
</ul>
<h2 id="固定表达にしたがってにしろ">固定表达「○○にしたがって、○○にしろ」</h2>
<p>动词（类动词助动词）的终止形、形容词（类形容词助动词）终止形、形容动词（类形容动词助动词）词干、体言、部分不规则助动词可以接续「に」后接续大量的固定表达，这里只列举出部分：</p>
<ul>
<li>年を<strong>取るにしたがって</strong>、目が悪くなってきた。（随着年龄增长，眼睛也不太干净了）</li>
<li>あいつはもう十年も日本に住んでた、日本語が上手に<strong>話せるに違いない</strong>。（他在日本住了十年，日语肯定说得好）</li>
<li>宿題は少ないほうが<strong>いいに決まってる</strong>。（作业当然是越少越好）</li>
<li><strong>するにしろ</strong>、し<strong>ないにしろ</strong>、そんなことは決して意味がない。（无论你做不做，这事永远没啥意义）</li>
</ul>
<p>这类表达实际上数量庞大，后续将会专门开出一章来收集这一类表达。</p>
<h1 id="练习参考答案">练习参考答案</h1>
<p>本章节没有练习问题。</p>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 7 句式与常用固定表达</title>
    <url>/2022/08/22/ja-tutorial-ch7/</url>
    <content><![CDATA[<p>本文将在基本了解日语语句构成的条件下总结各类常见的日语语句表达方式，基于此，读者应当可以自行书写符合语法且自然的日语语句。</p>
<span id="more"></span>
<h1 id="状态变迁">状态变迁</h1>
<p>有关状态变迁的表达相当之多，先前也讲解过部分。虽然涉及状态变迁的句式很多，但基本上均分为自然变迁和强制变迁两种，分别对应「なる、する」两个动词。</p>
<p>这里讲解的时候直接引用了先前章节的例句。</p>
<p>如果描述状态的是形容词（类形容词助动词），则一般使用「～くなる、～くする」句式：</p>
<ul>
<li>彼女は化粧すると<strong>かわいくなる</strong>。（她化妆了就会很可爱）</li>
<li>辛いものが苦手なので、料理はいつも<strong>甘くする</strong>。（因为吃不了辣所以总是把菜做甜）</li>
</ul>
<p>如果描述状态的是形容动词（类形容动词助动词）或者体言，则一般使用「～になる、～にする」句式：</p>
<ul>
<li>気づいたら彼が<strong>好きになっ</strong>ていた。（等发觉的时候已经喜欢上他了）</li>
<li>やっと<strong>大人になっ</strong>た。（终于长大了）</li>
<li>練習は不可能を<strong>可能にする</strong>。（练习能把不可能变为可能）</li>
<li>プレゼンは誰でも分かりやすいように簡単な<strong>内容にし</strong>た。（为了让所有人都容易理解我的讲解，我尽量选择了简单的内容）</li>
</ul>
<p>如果描述状态的是动词，则可以使用「～ことになる、～ことにする」，其中「～ことになる」强调事态自然而然发展到了某个情况，而「～ことにする」一般用于描述说话者作出了某种决定：</p>
<ul>
<li>会議の結果、部長の案を<strong>採用することになっ</strong>た。（会议的结果是采用了部长的提议）</li>
<li>拾った子猫を<strong>飼うことにし</strong>た。（决定收养捡到的小猫）</li>
</ul>
<p>同时，也可以使用「～ようになる、～ようにする」，其中「～ようになる」强调能力的变化，而「～ようにする」一般用于描述为了达到某一种目的而做的努力。特别地，「～ようにしている」用于描述为了达到某一种目的而养成的习惯：</p>
<ul>
<li><strong>できるようになる</strong>と楽しいだが、そこまでの道は長い。（能做得到的话自然很开心，但是为了学会要走过的路还是很长）</li>
<li>きれいな服を買いたい、髪型とかもそれに<strong>似合うようにし</strong>たい。（想买好看的衣服，那么也要做个搭配的发型）</li>
<li>毎日日本語の番組を<strong>見るようにしている</strong>。（我每天都会看日语节目）</li>
</ul>
<p>另外，形容动词、体言以及动词接续「こと」后还可以使用「～となる」句式，该句式相对于对应的使用助词「に」的句式语义整体并无变化但是语气较为生硬，适合正式行文：</p>
<ul>
<li><strong>冷静となっ</strong>て考えてみよう。（冷静下来再想想看）</li>
<li>年取って<strong>病気となっ</strong>た。（年纪大了开始生病了）</li>
<li>明日は<strong>出勤することとなっ</strong>た。（明天得上班了）</li>
</ul>
<p><strong>注意</strong>，该句式不能描述理所当然、物理规律使然的自然变化，比如时间的推移，只能使用「七時になる」而不能用「七時となる」。</p>
<p>而动词还能使用「～こととする」句式，该句式相对于「～ことにする」语义整体并无变化但是语气较为生硬，适合正式行文：</p>
<ul>
<li>地球温暖化防止のため、化石燃料を使う代わりに自然エネルギーを<strong>利用することとし</strong>た。（为了防止全球变暖，决定用清洁能源代替化石燃料）</li>
</ul>
<p><strong>注意</strong>，该句式不能描述他人的决定。</p>
<p>在涉及到动词的「～ことになる、～ことにする、～ようになる、～ようにする、～こととなる、～こととする」句式中表否定均是否定接续在这些句式前面的动词，即形成「～<strong>ない</strong>ことになる、～<strong>ない</strong>ことにする、～<strong>ない</strong>ようになる、～<strong>ない</strong>ようにする、～<strong>ない</strong>こととなる、～<strong>ない</strong>こととする」。</p>
<p>另外注意，这类句式之中涉及到的时态全部都是<strong>现在时</strong>，如果采用过去时则这些句式的含义可能有所变化。</p>
<h1 id="反复构文">反复构文</h1>
<p>参考文献：https://www.jstage.jst.go.jp/article/nihongonokenkyu/14/2/14_126/_pdf/-char/ja</p>
<p>参考文献：https://www.lang.nagoya-u.ac.jp/nichigen/issue/pdf/10/10-04.pdf</p>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>《铃芽户缔》的不恰当译名与日译中问题</title>
    <url>/2022/11/04/jc-translation/</url>
    <content><![CDATA[<p>今天偶然刷到新海诚的动画电影新作《すずめの戸締り》的中文译名从《铃芽户缔》换为了《铃芽小姐来锁门》的新闻，于是产生了一些奇妙的感叹，慨叹翻译真的是一门艺术。这里也就随便写写，反正也就是 Holder 自己的一些想法罢了，没有严谨性，不具有参考价值。</p>
<span id="more"></span>
<h1 id="为什么直接搬汉字是不对的">为什么直接搬汉字是不对的</h1>
<p>中日双语互译有一个特点，就是这两门语言至今都在使用汉字，而汉字是具有超脱于语言的表意性的，这也就是甚嚣尘上的“日语不要学，汉字随便拼一拼就读懂了”这个观点的一个基本点。</p>
<p>事实上这类观点不能直接断定地说不对，因为如果一个日语句子里音读词居多，日本本土的虚词居少的话，实际上只要在认读汉字的基础上了解日语是 SOV 主宾谓语序就可以很方便地读出来句子：</p>
<ul>
<li>私は東京大学の大学生です。</li>
<li>私は毎日七時に朝ご飯を食べます。</li>
</ul>
<p>虽然具体用词上和中文有些许差异，比如第一人称这里用的汉字是“私”，“早饭”在日语中的汉字是“朝饭”，但是大部分认识汉字的人都能基本准确地了解第一句表达“我是东京大学的大学生”，第二句表达“我每天七点吃早饭”。</p>
<p>要是再知道点现代日语的高频虚词，比如否定往往以「ない、ません、ず」出现，存在往往以「ある、いる、あります、います」出现，过去往往以「た」出现，断定往往以「です、だ」出现，假定往往以「ば、なら、たら」出现，基本上就已经能够在甚至不会读五十音的条件下阅读很多的日语句子了。</p>
<p>但是，这套方法的缺陷是相当明显的。</p>
<p>首先，现代日语的汉字使用频率实际上是在下降的。除了由于同音异义词过多导致不得不使用汉字的音读词，事实上大部分不太常用的训读慢慢都在消退。比如说，现在很少有人将「かける」写成「駆ける、掛ける」之类的了，在诸如「夜にかける」这样结构的句子里，显然就直接导致动词无法认读，进而完全无法理解整体含义。甚至，类似「私、君、彼」等词语现今写为假名的频率可能已经高于或者逐步高于写为汉字。</p>
<p>再者，日语汉字的含义与中文汉字的含义，可以有着很大的差别。相信大家早已在很多地方见过类似日语的“手纸”实际上是“信件”，日语的“爱人”实际上是“小三”之类的科普文章。事实上，还有很多类似「直す、戸惑う、見舞う、手配」等各种在中文中找不到对应表达的包含有汉字的日语词，即使可以尝试通过上下文断定，但是这类词语的认读依然是相当困难的。</p>
<p>而这个原因也恰恰是我认为直接搬汉字的翻译方式是完全不正确的理由，日语中的汉字经过多年的发展，早已和当代中文中的汉字有了很大的偏差。纵使有相当部分的词语中的汉字和中文近似，我们也不能忽视掉另外一部分和中文并不贴切的汉字。这里「戸締り」就是一个重要的例子，「戸」是日语中表达“门”的汉字，「締まり」是动词「締まる」的名词形式，其动词形式表达“关闭”。而「戸締り」完完全全就是按照日语 VO 顺序构造出来的一个复合词，和中文使用汉字的思路完全不一致。直接的搬运明显造成了表意不明，因为“户缔”在中文中并不存在，对于完全不了解日语的人，这是一个不亚于“鲁棒性”一样的迷惑翻译。</p>
<h1 id="与你的名字等的比较">与《你的名字》等的比较</h1>
<p>或许有人反驳，《你的名字》的原名是《君の名は》，其称为《君名》是完全可以接受的。但我依然认为，《你的名字》这个翻译的使用频率高于《君名》这个翻译。而且《君名》能被接受的核心原因，我认为是这个名称的的构词语序对于中文日文都是统一的。这是一个偏正短语，在中文和日文中都是定语置于名词之前，再加上「の」这个假名作为格助词表示“的”的含义早就广为人知，这才让《君名》这个实际上很偷懒的译名活了下来。</p>
<p>再说说新海诚别的作品，比如《言の葉の庭》《秒速 5 センチメートル》《天気の子》，这些作品的译名分别为《言叶之庭》《秒速五厘米》《天气之子》。这些标题的结构都较为简单，而且几乎没有使用到和中文意义不一致的汉字，所以翻译相当简单。或许这一次的《铃芽户缔》也就出于这种翻译惯性才成为了最初的官方译名。</p>
<h1 id="日式风格">日式风格？</h1>
<p>上面提到了《言叶之庭》，其中有一个词语“言叶”，这个词语显然并不是中文的词汇。然而这个词语由于已引入中国很长时间，在这一类日系作品的受众人群中，其表达“话语”这一含义已经广为人知。这实际上和「の」表示“的”也广为人知有类似之处。而「の」作为“的”广为人知的程度更是相当恐怖，甚至在输入法内输入 de，也有几率跳出「の」这个选项。另外，部分仿日式商品的销售词中会故意将“的”替换为「の」，完全忽视了「の」仅能够接在名词之后，导致部分动词词组修饰名词的时候也用「の」，让了解日语的人一眼看出来这是假日本货。</p>
<p>然而这类严格意义上错误的用法依然得到了广泛承认，这又是为何。这类和中文并不一致但是又不至于和中文用法相差过远的日文事实上营造了一种日式的风格。包括日本人的姓名也有着类似的作用。</p>
<p>与之前流行过的欧美翻译腔类似，事实上日文文本的翻译也为中文带来了日式表达。这类表达并不是源于中文本土环境，但是又能够让中文使用者理解，在这种微妙的违和感中携带的，就是所谓的语言风格。</p>
<p>观察下述两句话（引用自知乎专栏 <a href="https://zhuanlan.zhihu.com/p/134031271" class="uri">https://zhuanlan.zhihu.com/p/134031271</a>）：</p>
<ul>
<li>我敢打赌，他做的菜就像地狱一样糟糕。</li>
<li>突然被告白什么的，怎么做才好。</li>
</ul>
<p>前者明显携带一种欧美的语言风格，而后者则携带有一种日式的语言风格。</p>
<p>营造这样的一种语言风格是有利于传播和营销的，现在大部分的人还是比较买日式这笔账的。然而，我也说过，营造这种氛围至少要让中文使用者理解，翻译的底线至少要做到让完全不懂对方语言的人能够看懂含义。回到《铃芽户缔》的问题上，如果你是完全不懂日语的中文使用者，你可能能够通过“铃芽”这个日式名字来感受这是一个日式的电影，然而如果我只给你看“户缔”，你又会如何理解呢？这种舍本逐末的行为显然是不可行的。</p>
<p>再说现在新的译名《铃芽小姐来锁门》，这次做到了中文正确，但是是否过于僵硬了呢？这个译名过分强调了动作，“来”和“锁”的动作性过于强烈，让整个译名的重心偏向了动作。再加上莫名其妙加上了个现在比较微妙的“小姐”这个称谓，是否和铃芽作为少女的身份或多或少有点不匹配呢？“小姐”容易让人对主人公铃芽产生不正确的第一印象。</p>
<p>我斗胆试译为《铃芽关上了门》，弱化一部分动作的属性，避免使用“小姐”这类可能引起误解的称谓，留下一些空白，可能稍微好一些。</p>
<h1 id="口语与书面">口语与书面</h1>
<p>其实在打算把这篇文章结束的时候，我突然想起《命に嫌われている》这首歌的歌名也经常简称为《命嫌》。</p>
<p>不过这并不能构成对《铃芽户缔》这个译名的辩护，因为《命嫌》永远不是正式译名，仅仅是一个口语上的简称，其正式的译名依然是《被生命所嫌弃》。</p>
<p>口语的随意性永远不能影响书面语的正式性，虽然我理解部分文艺作品的翻译为了贴合口语以方便受众，但是这类完全不能表达原意的翻译成为正式翻译是我不能接受的。</p>
<h1 id="一些其他的话">一些其他的话</h1>
<p>事实上随着信息交换的速度加快，认真翻译一个外来概念已经越来越困难，这在网络热词上更为明显。比如说日文中的接尾词「がち」，用于表达“往往”的含义。这个词在日本 Vtuber 圈内火了一圈之后传入中国，在中文互联网上则直接写为 gachi，直接音译，甚至连汉字都没用。当然这也有身份认可的作用在里面，理解 gachi 含义的人，显然比知道这个词应该翻译为“往往”的人更容易被这个团体接受。</p>
<p>毕竟网络热词这种东西转瞬即逝，你认真为某个热词设计了很贴切的翻译，随后这个词早就没有人用了。</p>
<p>或许这也是不愿意好好翻译电影名称的原因吧，虽然现在能引入国内院线的外国电影也是越来越少就是了。</p>
]]></content>
      <categories>
        <category>【杂谈】日语</category>
      </categories>
  </entry>
  <entry>
    <title>一些散落的古日语语法——以ク语法为例</title>
    <url>/2022/12/05/ku-grammar/</url>
    <content><![CDATA[<p>发现这个东西实际上是在一句歌词，即「願わくば、忘れてと」。这句歌词里面显然出现了一个相当奇怪的构词法，即「願わくば」。之后我又想起了一些和这个类似的常用词，如「恐らく、いわく」。</p>
<p>随后查找了一下词典，发现是一种已经散失很久的古日语语法——ク语法。</p>
<span id="more"></span>
<p>我们一般而言的古日语，也就是日本中学中教学的古日语，是中古日语。而在中古日语之前的上古日语则是一种更为古老的日语，ク语法是上古日语中的语法。</p>
<p>ク语法就形式上而言（下述使用中古日语名词和历史假名遣）：</p>
<ul>
<li>四段动词未然形接续「く」。如「いふ」变为「いはく」</li>
<li>其余动词终止形接续「らく」。如「す」变为「すらく」</li>
<li>形容词词尾「し」变为「けく」。如「やすし」变为「やすけく」</li>
<li>助动词「ず」变为「なく」
<ul>
<li>这个变形的逻辑解释为「ず」的原始形式为「にす」，这里「に」是助动词「ぬ」的连用形而「す」是サ变动词，从而ク语法自然是「ぬ」的未然形「な」接续「く」</li>
</ul></li>
<li>助动词「き」变为「しく」。如「申しき」变为「申ししく」</li>
</ul>
<p>其起源似乎是用言连用形接续名词性成分「あく」，但具体我也无法深究。</p>
<p>这个语法几乎可以和现代语的连体形接续「こと」等同，但是ク语法生命力已经几乎完全丧失，仅留下部分习惯用法，而且基本是副词用法：</p>
<ul>
<li>曰く ＝ 言うこと</li>
<li>恐らく ＝ 恐ること</li>
<li>思惑 ＝ 思うこと</li>
<li>願わくば ＝ 願うことは</li>
<li>望むらくは ＝ 望むことは</li>
<li><code>@ 須 すべか</code>らく ＝ すべきこと</li>
</ul>
<p>可以注意到上述ク语法的例子也并不是完全符合之前提到的规则，这是因为ク语法在中古日语时期就已经很少使用，造成很多人错误使用该语法。最典型的就是四段动词也开始直接使用终止形接续「らく」，这就说明现代日语中的副词「望むらくは」实际上应当是「望まくは」。</p>
<p>此外，助词「は」的浊化也是一种错误用法，「願わくば」就是这个原理。</p>
<p>再者，「思う」的ク语法「思わく」甚至具有了假借字「思惑」。</p>
<p>有一种观点认为ク语法是部分词语的来源。比如说现代副词「暫く」就是动词「縛る」的ク语法，表示时间有限，而后衍生出表示“暂时”的用法。</p>
<hr />
<p>ク语法的缘由可以认为是用言活用接续「<code>@ 如 し</code>く」后「し」脱落，而这种观点也给部分动词和形容词的对应带来了支持：</p>
<ul>
<li>痛む ＋ しく ＝ 痛ましく → 痛まし → 痛ましい</li>
<li>潤ふ ＋ しく ＝ 潤はしく → <code>@ 麗 うるは</code>し → <code>@ 麗 うるわ</code>しい</li>
</ul>
<p>而由于ク语法本身用于名词化，所以中古形容词「痛まし」的名词形式就是「痛ましく」，而这正是其连用形。这也给为何现代形容词「近い・遠い・多い」的名词化是其连用形「近く・遠く・多く」带来了解释，因为这些名词化的形式可以认为是ク语法的一种外拓。</p>
<hr />
<p>总之这已经完全就是一个早就没有任何生命，没有拓展能力的语法了，但这个语法遗留下来的各种约定俗成用法却还在困扰着我这种摸索日语的学习者。</p>
]]></content>
      <categories>
        <category>【杂谈】日语</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 4 助动词接续规则</title>
    <url>/2022/08/22/ja-tutorial-ch4/</url>
    <content><![CDATA[<p>本文将主要讲解各个助动词的基本使用法则，并举出若干例句进行分析。本章例句尽量避免出现没有提到的助词，句子结构也尽力简化，以方便读者自行分析句子结构。</p>
<span id="more"></span>
<p>本章为了讲解各类词语如何接续给定助动词，选取的用言词例为「読む、起きる、来る、する、高い、好きだ」，选取的体言词例为「花」，选取的助动词词例为「たがる、られる、ない、ようだ、です、ます、た、そうだ①、まい、う、ず・ぬ・ん、べし」，助动词中后八个词例会单独列表，因为其活用不规则。下面以助动词「ない」为例，将这些例词与「ない」接续的要求整理为表格，而本章将会多次使用类似该格式的表格整理助动词对其之前的词语的活用形式要求：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一未然形 <br /> <strong>読ま</strong>ない <br /> <strong>たがら</strong>ない</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>ない <br /> <strong>られ</strong>ない</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>ない</td>
<td style="text-align: center;">第一未然形 <br /> <strong>し</strong>ない</td>
<td style="text-align: center;">第一连用形 <br /> <strong>高く</strong>ない <br /> <strong>なく</strong>ない</td>
<td style="text-align: center;">第一连用形 <br /> <strong>好きで</strong><em>は</em>ない <br /> <strong>ようで</strong><em>は</em>ない</td>
<td style="text-align: center;">（助动词） <br /> <strong>花</strong><em>では</em>ない <br /> <strong>これ</strong><em>では</em>ない</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（助动词） <br /> <strong>う</strong><em>では</em>ない</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>后续如果有特殊说明会在表后列出。</p>
<p>该表有一项并未覆盖到，即助词之后接续助动词。事实上，能够接续在助词之后的助动词较少，并且能够接续助动词的助词也较少。如果即将讲解的助动词可以接续在助词之后，会另附表举出若干例子。</p>
<p>有关指示词，这里将所有名词性的指示词处理为体言，并以「これ」为例。连体性、副词性和形容动词性的「この、こう、こんな」如果可以用于接续，则另附表举出若干例子。这里不把「こんなだ」处理为形容动词是因为其行为和形容动词依然有很多不一致之处。</p>
<p>此外，一定注意，本表仅显示接续要求，并不一定代表接续后形成的词组真实存在。</p>
<h1 id="否定助动词ない">否定助动词「ない」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一未然形 <br /> <strong>読ま</strong>ない <br /> <strong>たがら</strong>ない</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>ない <br /> <strong>られ</strong>ない</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>ない</td>
<td style="text-align: center;">第一未然形 <br /> <strong>し</strong>ない</td>
<td style="text-align: center;">第一连用形 <br /> <strong>高く</strong>ない <br /> <strong>なく</strong>ない</td>
<td style="text-align: center;">第一连用形 <br /> <strong>好きで</strong><em>は</em>ない <br /> <strong>ようで</strong><em>は</em>ない</td>
<td style="text-align: center;">（助动词） <br /> <strong>花</strong><em>では</em>ない <br /> <strong>これ</strong><em>では</em>ない</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（助动词） <br /> <strong>う</strong><em>では</em>ない</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>该接续的例外包括：</p>
<ul>
<li>五段动词「ある」接续「ない」形成「ない」而非「あらない」</li>
<li>助动词「そうだ②」与「ない」接续表达否定的形式较为复杂且不规则，我们将会在讲解助动词「そうだ②」的时候讨论</li>
</ul>
<p>词语接续助动词「ない」后的形式，一般称之为该词语的<strong>否定式</strong>。</p>
<p>下面我们给出一些否定式的例句。</p>
<ul>
<li>そんなことをまだ<strong>知ら<u>ない</u></strong>。（那事情我还不知道）</li>
<li>この服は値段がきっと<strong>安く<u>ない</u></strong>。（这衣服一定便宜）</li>
<li><strong>好きで<em>は</em><u>ない</u></strong>と思うが、<strong>嫌いで<em>も</em><u>ない</u></strong>。（虽说不算喜欢，但也不算讨厌）</li>
<li>わたしは<strong>学生<em>では</em><u>ない</u></strong>。（我不是学生）</li>
<li>もう遅いから、帰ろ<strong>う<em>では</em><u>ない</u></strong>か？（已经很晚了，回去吧？）</li>
</ul>
<p>此外，在口语中「ては・では」可以约音为「ちゃ・じゃ」，所以上述例句中后三句在口语中可以表达为：</p>
<ul>
<li><strong>好き<em>じゃ</em><u>ない</u></strong>と思うが、<strong>嫌いで<em>も</em><u>ない</u></strong>。</li>
<li>わたしは<strong>学生<em>じゃ</em><u>ない</u></strong>。</li>
<li>もう遅いから、帰ろ<strong>う<em>じゃ</em><u>ない</u></strong>か？</li>
</ul>
<p>现在我们分析这样的一个语法现象，动词接续「ない」的方式为使用第一未然形接续，而形容词和形容动词却使用第一连用形接续，且体言和助动词「う」均是首先接续助动词「だ」之后通过「だ」的第一连用形再接续「ない」。这种未然形和连用形的对立，根本原因是动词所接续的「ない」和其他情况下的「ない」有着并不一致的语源。</p>
<p>简而言之，动词所接续的「ない」是严格意义上的助动词，而形容词、形容动词所接续的「ない」实际上是实意形容词「無い」退化形成的形式形容词，而这两者在现代日语中逐渐合流，其区分也不再明显。在这样的语源基础上，形容词、形容动词就应当使用连用形接续一般用言。</p>
<p>目前还能体现这两者差别的语法现象在于，形容词、形容动词在接续「ない」之前，还可以先接续副助词「は、も」等。其中，形容词先接续副助词的情况不多，但形容动词几乎必须先接续副助词「は」，以至于可以直接认为形容动词「○○だ」的否定式就是「○○ではない」。</p>
<p>而相对应地，动词在接续「ない」之前，绝不可以接续任何助词，动词必须直接使用未然形直接接续「ない」。</p>
<ul>
<li>（×）食べ<strong>は</strong>ない</li>
<li>（○）高く<strong>は</strong>ない</li>
<li>（○）静かで<strong>は</strong>ない</li>
</ul>
<p>另外一种能够体现这两者差别的语法现象是，否定形容词、形容动词的时候，可以将「ない」替换为「ありません」。这是动词「ある」的一般尊敬体的否定，并非严格意义上的助动词，而更应当为一般用言的活用形式。使用「ありません」否定的时候，一般而言语气更为尊敬。</p>
<ul>
<li>あそこのビルは<strong>高く<u>ありません</u></strong>。（那里的楼不算很高）</li>
<li>この町は<strong>にぎやかで<em>は</em><u>ありません</u></strong>。（这城市不算繁华）</li>
<li>まだ卒業していないので、<strong>会社員<em>では</em><u>ありません</u></strong>。（我还没毕业，还不算公司职员）</li>
<li>一緒に食べに行こ<strong>う<em>では</em><u>ありません</u></strong>か？（一起去吃饭吗？）</li>
</ul>
<p>相应地，动词绝不可以用「ありません」否定。</p>
<ul>
<li>（×）そんなことを<strong>やら<u>ありません</u></strong>。</li>
</ul>
<p>另外关于「ある」的否定，严格的语法说明是「ある」不能使用「ない」否定，而直接采用其反义词「ない」代表，也就是说这里的「ない」就是实意形容词。或者可以理解为「ある」接续助动词「ない」形成的「あらない」让位给了实意形容词「ない」。可以观察下面句子的对应：</p>
<ul>
<li>わたしは横浜へ行ったことが<strong>ある</strong>。（我去过横滨）</li>
<li>わたしは横浜へ行ったことが<strong>ない</strong>。（我没去过横滨）</li>
</ul>
<p>事实上这一观点的支持并不少，其一就是实意形容词「ない」可以用「ありません」代替。</p>
<div class="note info no-icon"><p>助动词「う」的否定式「うではない」目前几乎仅可以应用于固定句式「～うではないか？」之中，用于表示说话者的邀请和提议。</p>
</div>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）彼女は家にい<strong>ない</strong>。（她不在家）</li>
<li>（未然形）君はまさか田中さんでは<strong>なかろ</strong>うか？（你不会就是田中吧？）</li>
<li>（連用形①）あいつは優しく<strong>なく</strong>て、すぐ怒る人だな。（他一点也不温柔，很容易生气）</li>
<li>（連用形②）もし雨は降ら<strong>なかっ</strong>たら行く。（雨停了就走）</li>
<li>（連体形）やってはいけ<strong>ない</strong>ことを絶対にやらない。（不能做的事情绝对不做）</li>
<li>（仮定形）やってみ<strong>なけれ</strong>ばなんでも知らない。（不去试试的话就什么都了解不到）</li>
</ul>
<div class="note info no-icon"><p>目前「ない」的未然形「なかろ」在口语中使用频率逐步降低，该用法逐渐仅出现在书面用语中，而在口语中其替换形式为「ない」首先接续助动词「だ」后用「だ」的未然形表达的「ないだろ」：</p>
<ul>
<li>（書き言葉）君はまさか田中さんでは<strong>なかろ</strong>うか？</li>
<li>（話し言葉）君はまさか田中さんでは<strong>ないだろ</strong>うか？</li>
</ul>
</div>
<h1 id="否定助动词ずぬん">否定助动词「ず・ぬ・ん」</h1>
<div class="note warning no-icon"><p>初学日语的读者可以暂且不用学习该助动词，因该助动词和古典日语有较大关联，其连用、活用等规则较为复杂，但是该助动词在现代日语中的高频应用已经几乎只剩下用于否定助动词「ます」以形成否定式「ません」。</p>
</div>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一未然形 <br /> <strong>読ま</strong>ず <br /> <strong>読ま</strong>ぬ <br /> <strong>読ま</strong>ん <br /> <strong>たがら</strong>ず <br /> （以下略）</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>ず <br /> （以下略） <br /> <strong>られ</strong>ず <br /> （以下略）</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>ず <br /> （以下略）</td>
<td style="text-align: center;">第二未然形 <br /> <strong>せ</strong>ず <br /> （以下略）</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">第一未然形 <br /> <strong>ませ</strong>ん <br /> <strong>ませ</strong>ぬ <br /> <strong>ませ</strong>ず</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">未然形 <br /> <strong>べから</strong>ず</td>
</tr>
</tbody>
</table>
<p>该助动词也用于表达否定的含义，是一种较为古典的表达方式，在现代日语中也残留有部分固定表达。尤其是「ます」仅能使用该助动词否定，且几乎仅使用「ません」的形式。</p>
<div class="note info no-icon"><p>该助动词的古日语语源有一种解释为，其原本为表示否定的助动词「ず」，之后附着上ラ变动词「あり」后变为「ずあり」，后续音便为「ざり」，从而具有了类似ラ变动词的一套活用形式。</p>
<p>从而该助动词的活用表就有了两个系列（这里使用古日语活用形名称）：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">終止形</th>
<th style="text-align: center;">未然形</th>
<th style="text-align: center;">連用形</th>
<th style="text-align: center;">連体形</th>
<th style="text-align: center;">已然形</th>
<th style="text-align: center;">命令形</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">不規則</td>
<td style="text-align: center;">ず</td>
<td style="text-align: center;">ず</td>
<td style="text-align: center;">ず</td>
<td style="text-align: center;">ぬ</td>
<td style="text-align: center;">ね</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">ラ変</td>
<td style="text-align: center;">（ざり）</td>
<td style="text-align: center;">ざら</td>
<td style="text-align: center;">ざり</td>
<td style="text-align: center;">ざる</td>
<td style="text-align: center;">ざれ</td>
<td style="text-align: center;">ざれ</td>
</tr>
</tbody>
</table>
<p>在现代日语演变过程中，连体形、终止形逐渐合流，从而以「ぬ」结句的形式逐步扩展开。随后由于音便，「ぬ」约音为「ん」，从而形成了现在复杂的助动词「ず・ぬ・ん」。</p>
</div>
<p>关于这个助动词的接续问题，有一点需要强调，即如果某个动词从古日语演化到现代日语过程中发生了类型变化，如从四段动词变为一段动词而非惯例的五段动词，则这个动词在接续「ない」和「ず」的时候是有区别的。古日语四段动词「足る」演化为现代上一段动词「足りる」，所以「足りる」接续「ない」形成「足りない」，而接续「ず」形成「足らず」。</p>
<p>该助动词的各类活用形式的例句如下（由于该助动词为古代日语残留，在现代日语中应用有限，故需要引入古代日语例句。这里标星号的例句为古代日语例句，相应的现代日语翻译标注在其后）：</p>
<ul>
<li>（終止形①）無用の者入るべから<strong>ず</strong>。</li>
<li>（終止形②）年には勝て<strong>ぬ</strong>。</li>
<li>（終止形③）まだうまく歌うことができませ<strong>ん</strong>。</li>
<li>（未然形）*夢と知りせば覚め<strong>ざら</strong>ましを。
<ul>
<li>（現代語訳）もし夢とわかっていたなら覚めなかったろうに。</li>
</ul></li>
<li>（連用形①）*神鳴る騒ぎにえ聞か<strong>ざり</strong>けり。
<ul>
<li>（現代語訳）雷の鳴るやかましさに聞くことができなかった。</li>
</ul></li>
<li>（連用形②）電気を消さ<strong>ず</strong>に寝てしまいました。</li>
<li>（連体形①）バスが故障したので、帰ら<strong>ざる</strong>をえなかった。</li>
<li>（連体形②）なければなら<strong>ぬ</strong>人。</li>
<li>（仮定形①）*人木石にあら<strong>ざれ</strong>ば、みな情あり。
<ul>
<li>（現代語訳）人は木や石のような非情のものでないから、皆人情がある。</li>
</ul></li>
<li>（仮定形②）学生として勉強せ<strong>ね</strong>ばならない。</li>
<li>（命令形）*我を打たしめ<strong>ざれ</strong>。
<ul>
<li>（現代語訳）私を打たせないようにしてくれ。</li>
</ul></li>
</ul>
<div class="note info no-icon"><p>根据上述例句，实际上可以看出该助动词在现代日语中的残留几乎仅有下述若干情况：</p>
<ul>
<li>「ん」终止形用于否定助动词「ます」形成「ません」</li>
<li>「ん」终止形在口语中作为「ない」的替代</li>
<li>「ず」连用形形成「ず・ずに」作为「なくて・ないで」中顿形式的替代</li>
<li>「ぬ」终止形、连体形以及相应的「ね」假定形作为「ない・なけれ」的替代</li>
<li>「ず」终止形用于否定古语助动词「べし」形成「べからず」</li>
<li>「ざる」连体形几乎仅用于形成固定句式「～ざるを得ない」，表示“不得不”</li>
</ul>
<p>上述六种使用方式由高频到低频排列。事实上就作者实际阅读现代日语文本、歌词等的经验而言，后两种情况也极为少见，仅仅因为这两种情况是 JLPT 日语等级测验语法考点才将其列在上述列表中。并且第四点也仅仅在部分谚语、仿古歌词、严谨行文的文章中出现。</p>
</div>
<h1 id="过去时态助动词た">过去时态助动词「た」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第二连用形 <br /> <strong>読ん</strong>だ <br /> <strong>たがっ</strong>た</td>
<td style="text-align: center;">连用形 <br /> <strong>起き</strong>た <br /> <strong>られ</strong>た</td>
<td style="text-align: center;">连用形 <br /> <strong><code>@ 来 き</code></strong>た</td>
<td style="text-align: center;">连用形 <br /> <strong>し</strong>た</td>
<td style="text-align: center;">第二连用形 <br /> <strong>高かっ</strong>た <br /> <strong>なかっ</strong>た</td>
<td style="text-align: center;">第二连用形 <br /> <strong>好きだっ</strong>た <br /> <strong>ようだっ</strong>た</td>
<td style="text-align: center;">（助动词） <br /> <strong>花</strong><em>だっ</em>た <br /> <strong>花</strong><em>でし</em>た <br /> <strong>これ</strong><em>だっ</em>た <br /> <strong>これ</strong><em>でし</em>た</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">连用形 <br /> <strong>でし</strong>た</td>
<td style="text-align: center;">连用形 <br /> <strong>まし</strong>た</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（助动词） <br /> <strong>ん</strong><em>でし</em>た</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>词语接续助动词「た」后的形式，一般称之为该词语的<strong>过去式</strong>。</p>
<p>下面我们给出一些过去式的例句。</p>
<ul>
<li>ゆうべ酷い雨が<strong>降っ<u>た</u></strong>よ。（昨晚下了大雨）</li>
<li>昨日の天気はすごく<strong>寒かっ<u>た</u></strong>な。（昨天天气太冷了）</li>
<li>昔にこの町は<strong>にぎやかだっ<u>た</u></strong>。（原来这个城市很繁华的）</li>
<li>三年前にここは公園<strong>でし<u>た</u></strong>。（三年前这里是公园）</li>
<li>あのことならもうわかり<strong>まし<u>た</u></strong>。（那件事我已经知道了）</li>
<li>あのときわたしは会社員ではありませ<strong>ん<em>でし</em><u>た</u></strong>。（那时候我还不是公司职员）</li>
</ul>
<p>这里需要注意的是动词终止形如果以「ぐ、む、ぬ、ぶ」结尾，在活用为第二连用形后接续助动词「た」的时候，应当发生浊音便形成「○だ」的形式。</p>
<p>此外，我们需要额外讲解过去否定式。日语中过去式和否定式连用的时候，应当先进行否定，之后表达过去时态。对动词而言，其首先使用助动词「ない」否定，之后使用助动词「ない」接续助动词「た」表达过去否定：</p>
<ul>
<li>読む → 読まない → 読まなかった</li>
</ul>
<p>需要注意，使用助动词「ず・ぬ・ん」否定的动词几乎不再进一步活用以表达过去时态：</p>
<ul>
<li>読む → 読まず → ×</li>
</ul>
<p>而形容词使用「ない」否定的时候，其过去否定和动词的逻辑类似：</p>
<ul>
<li>高い → 高くない → 高くなかった</li>
</ul>
<p>先前在讲解否定助动词的时候提到了用「ない」否定形容词、形容动词的时候可以使用「ありません」替代，而此时进一步表达过去时态需要使用「ありませんでした」。这里因为否定助动词「ん」无法直接接续助动词「た」，而是先接续助动词「です」之后再接续助动词「た」形成「でした」的形式：</p>
<ul>
<li>高い → 高くありません → 高くありませんでした</li>
</ul>
<div class="note info no-icon"><p>助动词「ん」的过去式，即「んでした」，在现代日语中几乎仅存在于助动词「ます」的过去否定式「ませんでした」之中，其余情况下均不应当使用该形式。</p>
</div>
<p>形容动词的过去否定则与形容词同理：</p>
<ul>
<li>好きだ → 好きではない → 好きではなかった</li>
<li>好きだ → 好きではありません → 好きではありませんでした</li>
</ul>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）昨日のこと、本当にすまなかっ<strong>た</strong>。（昨天真是抱歉了）</li>
<li>（未然形）昨日の映画はおもしろかっ<strong>たろ</strong>う。（昨天电影有意思吧）</li>
<li>（連体形）そう言っ<strong>た</strong>のはわたしではない。（我可没那样说过）</li>
<li>（仮定形）もしわたしが鳥だっ<strong>たら</strong>、あなたのもとへ飛んでいくだろう。（要是我是鸟的话，我现在就飞到你那里去）</li>
</ul>
<div class="note info no-icon"><p>与「なかろ」类似，「た」的未然形「たろ」在现代日语口语中的使用频率也在降低，取而代之的是「た」接续助动词「だ」后用「だ」的未然形「だろ」表达的形式：</p>
<ul>
<li>（書き言葉）昨日の映画はおもしろかっ<strong>たろ</strong>う。</li>
<li>（話し言葉）昨日の映画はおもしろかっ<strong>ただろ</strong>う。</li>
</ul>
</div>
<div class="note info no-icon"><p>助动词「た」的假定形「たら」实际上已经基本不具有表达过去时态的含义，而更多地作为一种表达假定含义的助动词存在。</p>
<p>表达假定含义的助动词与助词之间更为详细的使用方式区别，之后再讲解。</p>
</div>
<h1 id="尊敬语气助动词ます">尊敬语气助动词「ます」</h1>
<p>该助动词的接续表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一连用形 <br /> <strong>読み</strong>ます <br /> <strong>たがり</strong>ます</td>
<td style="text-align: center;">连用形 <br /> <strong>起き</strong>ます <br /> <strong>られ</strong>ます</td>
<td style="text-align: center;">连用形 <br /> <strong><code>@ 来 き</code></strong>ます</td>
<td style="text-align: center;">连用形 <br /> <strong>し</strong>ます</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>该接续的例外包括：</p>
<ul>
<li>五大敬语动词「いらっしゃる、くださる、なさる、おっしゃる、ござる」接续「ます」形成「いらっしゃ<strong>い</strong>ます、くださ<strong>い</strong>ます、なさ<strong>い</strong>ます、おっしゃ<strong>い</strong>ます、ござ<strong>い</strong>ます」而非「いらっしゃ<strong>り</strong>ます、くださ<strong>り</strong>ます、なさ<strong>り</strong>ます、おっしゃ<strong>り</strong>ます、ござ<strong>り</strong>ます」</li>
</ul>
<p>词语接续助动词「ます」后的形式，一般称之为该词语的<strong>ます形</strong>。</p>
<p>动词接续助动词「ます」是为了表达一般尊敬的陈述语气，该语气也是与陌生人对话、公共场合演讲、与上级者对话时经常使用的语气。</p>
<p>该助动词除去提示这类尊敬语气之外的应用极少，且动词附加该助动词后的语义几乎不发生变化。所以部分面向国人的教程也会将ます形作为动词的基础形式，而非严格语法中的原形。因为国人应用日语的场合大多为和陌生日本人交谈，更应当采用ます形作为基本语气。</p>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）わたしは毎日朝七時に起き<strong>ます</strong>。（我每天早上七点起床）</li>
<li>（未然形①）わたしはまだ日本語の文章を読むことができ<strong>ませ</strong>ん。（我读不懂日语的文章）</li>
<li>（未然形②）一緒に食事に行き<strong>ましょ</strong>う。（一起去吃饭吧）</li>
<li>（連用形）初め<strong>まし</strong>て、よろしくお願いします。（初次见面，请多指教）</li>
<li>（連体形）愛される子になれ<strong>ます</strong>ように。（我也希望能被人怜爱）</li>
<li>（仮定形）よく考えてみ<strong>ますれ</strong>ば、この責任はわれわれの大人にあると言えるのでしょうか。（好好想想的话，这责任不应该是我们这些大人承担吗）</li>
<li>（命令形①）いらっしゃい<strong>ませ</strong>。（欢迎光临）</li>
<li>（命令形②）お早くお召し上がりください<strong>まし</strong>。（请慢用）</li>
</ul>
<p>教育语法中，可以将「ません」称为「ます」的否定式，将「ました」称为「ます」的过去式，将「ませんでした」称为「ます」的过去否定式，将「ましょう」称为「ます」的意志式。</p>
<div class="note info no-icon"><p>「ます」的假定形「ますれ」在日常的日语交流中极少使用，一般使用先接续助动词「た」之后使用「た」的假定形「たら」形成的「ましたら」作为其替代表达：</p>
<ul>
<li>真面目に勉強し<strong>ますれ</strong>ば、もっといい成績を取るかもしれません。（要是认真学习，说不定有更好的成绩）</li>
<li>真面目に勉強し<strong>ましたら</strong>、もっといい成績を取るかもしれません。（要是认真学习，说不定有更好的成绩）</li>
</ul>
</div>
<h1 id="尊敬语气判断助动词です">尊敬语气判断助动词「です」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">（终止形） <br /> <strong>読む</strong>です <br /> <strong>たがる</strong>です</td>
<td style="text-align: center;">（终止形） <br /> <strong>起きる</strong>です <br /> <strong>られる</strong>です</td>
<td style="text-align: center;">（终止形） <br /> <strong><code>@ 来 く</code>る</strong>です</td>
<td style="text-align: center;">（终止形） <br /> <strong>する</strong>です</td>
<td style="text-align: center;">（终止形） <br /> <strong>高い</strong>です <br /> <strong>ない</strong>です</td>
<td style="text-align: center;">词干 <br /> <strong>好き</strong>です <br /> <strong>よう</strong>です</td>
<td style="text-align: center;">原形 <br /> <strong>花</strong>です <br /> <strong>これ</strong>です</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（终止形） <br /> <strong>た</strong>です</td>
<td style="text-align: center;">词干 <br /> <strong>そう</strong>です</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">助词接续例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>から</strong>です、<strong>の</strong>です</td>
</tr>
</tbody>
</table>
<p>相比较于动词之后常常接续「ます」，体言之后常常接续「です」。该助动词的作用为表达判断，与汉语的“是”作用类似。</p>
<p>在表达的语气方面，助动词「です」同时也提示了一般尊敬语气，其与「ます」的尊敬程度相当，常常应用在与陌生人对话、公共场合演讲、与上级者对话时。</p>
<p>这里需要提示的是，形容动词和体言接续「です」是自然且广泛使用的，但是形容词使用终止形接续「です」则是有一定争议的，而动词以及助动词「た」等使用终止形接续「です」则更多时候被视为不正确的日语。但是由于口语中动词接续「です」的使用方法依然存在，这里也将其列出。</p>
<p>形容词使用终止形接续「です」根据形容词的不同，其违和感程度也相应不同。例如「楽しいです」等近乎于固定用法的语句已经被大多数人接受且运用，而类似「興味深いです」等用法则逐渐被接受，另外一方面「多いです、少ないです」等表达在一部分人看来有着强烈的违和感，但是随着时间推移也正在被逐步接受。具体形容词和「です」是否连用应当根据大多数人的使用方式来确定。</p>
<p>若考虑口语的话，该助动词几乎已经滥用在各种词语之后。在这一层意义上，该助动词实际上丧失了判定的含义，单纯成为一般尊敬语气的标记，除去动词常用「ます」标记外，几乎所有词语都可以接续「です」表达一般尊敬。</p>
<ul>
<li>おもちゃは先ず安全である<strong>べきです</strong>。（玩具首先要安全）</li>
</ul>
<p>甚至在一些敬语环境中，「です、ます」重叠使用的情况也是存在的，虽然不常见，但也可以窥见「です」作为判断助动词其判断语义已经大幅弱化：</p>
<ul>
<li>お名刺を頂戴でき<strong>ますでしょ</strong>うか。（请问能麻烦给一张您的名片么）</li>
</ul>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）今年わたしは二十四歳<strong>です</strong>。（今年我二十四岁）</li>
<li>（未然形）明日は雨<strong>でしょ</strong>う。（明天要下雨吧）</li>
<li>（連用形）去年わたしは二十三歳<strong>でし</strong>た。（去年我二十三岁）</li>
<li>（連体形）まだ未成年<strong>です</strong>ので、お酒は飲めません。（我还没成年，喝不了酒）</li>
</ul>
<p>教育语法中，可以将「でした」称为「です」的过去式，将「でしょう」称为「です」的意志式。</p>
<h1 id="判断助动词だ">判断助动词「だ」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">（终止形） <br /> <strong>読む</strong>だ <br /> <strong>たがる</strong>だ</td>
<td style="text-align: center;">（终止形） <br /> <strong>起きる</strong>だ <br /> <strong>られる</strong>だ</td>
<td style="text-align: center;">（终止形） <br /> <strong><code>@ 来 く</code>る</strong>だ</td>
<td style="text-align: center;">（终止形） <br /> <strong>する</strong>だ</td>
<td style="text-align: center;">（终止形） <br /> <strong>高い</strong>だ <br /> <strong>ない</strong>だ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">原形 <br /> <strong>花</strong>だ <br /> <strong>これ</strong>だ</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">だ</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">（终止形） <br /> <strong>ます</strong>だ</td>
<td style="text-align: center;">（终止形） <br /> <strong>た</strong>だ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">助词接续例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>から</strong>だ、<strong>の</strong>だ</td>
</tr>
</tbody>
</table>
<p>该助动词的基础用法和「です」几乎一致，不同的地方在于语气不同。「です」提示了一般尊敬语气，但是「だ」则是日常使用的语气。</p>
<p>该助动词和「です」一样，接续在体言之后是自然的，而接续在形容词后是存在争议的，接续在动词与部分助动词后一般视为语法错误。其和「です」的差别在于，「だ」表判断的语感依然很强烈，而「です」表判断的语感已经相当弱化。</p>
<p>回到「だ」接续在动词与部分助动词后的情况。该助动词的部分活用形式，尤其是未然形「だろ」或者是假定形「なら」，接续在动词与部分助动词后是一定程度的常见用法。下表展现了助动词「だ」各种活用形式接续在动词之后的接受程度与替代表达：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">接续</th>
<th style="text-align: center;">接受程度</th>
<th style="text-align: center;">替代表达</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">终止形</td>
<td style="text-align: center;">読む<strong>だ</strong></td>
<td style="text-align: center;">一般</td>
<td style="text-align: center;">読むのだ</td>
</tr>
<tr class="even">
<td style="text-align: center;">未然形</td>
<td style="text-align: center;">読む<strong>だろ</strong>（う）</td>
<td style="text-align: center;">较常见</td>
<td style="text-align: center;">（読もう）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">第一连用形</td>
<td style="text-align: center;">読む<strong>で</strong></td>
<td style="text-align: center;">极少见</td>
<td style="text-align: center;">読んで</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">読む<strong>で</strong><em>は</em>ない・読む<strong>じゃ</strong>ない</td>
<td style="text-align: center;">较常见</td>
<td style="text-align: center;">（読まない）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">第二连用形</td>
<td style="text-align: center;">読む<strong>だっ</strong>（た）</td>
<td style="text-align: center;">极少见</td>
<td style="text-align: center;">読んだ</td>
</tr>
<tr class="even">
<td style="text-align: center;">第三连用形</td>
<td style="text-align: center;">読む<strong>に</strong></td>
<td style="text-align: center;">极少见</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">连体形</td>
<td style="text-align: center;">読む<strong>な</strong></td>
<td style="text-align: center;">极少见</td>
<td style="text-align: center;">読む</td>
</tr>
<tr class="even">
<td style="text-align: center;">假定形</td>
<td style="text-align: center;">読む<strong>なら</strong></td>
<td style="text-align: center;">常见</td>
<td style="text-align: center;">（読めば）</td>
</tr>
</tbody>
</table>
<p>事实上「読むだろう」以及「読むなら」以及「読むではない」等这类用法存在的目的是补全动词活用也未能表达出的部分语义。这里至少存在下面三组词组的对比：</p>
<ul>
<li>「読まない」与「読むではない」</li>
<li>「読むだろう」与「読もう」</li>
<li>「読むなら」与「読めば」乃至于与「読んだら」和「読むと」</li>
</ul>
<p>下面的注释部分解释了第一组词组之间的差别，第二组和第三组的差别则需要在这之后具体讲解。</p>
<div class="note info no-icon"><p>这里简单阐述一下动词的一般否定形式和使用「だ」的否定形式的区别。</p>
<p>事实上，这也就是日语反问句的构成。我们比较下述两句话：</p>
<ul>
<li>いま起きて<strong>いない</strong>か？（现在你没醒着吗？）</li>
<li>いま起きて<strong>いるではない</strong>か？（现在你不是醒着吗？）</li>
</ul>
<p>这里第一句话明显偏向否定语义，是对动词否定含义的推测，可以翻译为“现在你没醒着吗”，或者意译为“现在你睡着吗”。而第二句话则是偏向肯定语义，实际上构成反问句句式，事实上表达的含义为“现在你不是醒着吗”。</p>
<p>另外这里需要说明的是，在口语中反问句的「ではない」常常约音为「じゃん」。例如：</p>
<ul>
<li>しっかりして<strong>と</strong>言っ<strong>てお</strong>いた<strong>ではない</strong>か？（不是说过要好好干吗？）</li>
<li>しっかりして<strong>って</strong>言っ<strong>と</strong>いた<strong>じゃん</strong>？（不是说过要好好干吗？）</li>
</ul>
<p>这里上方是未约音的句子，下方为约音后的句子，这里一共发生三次口语约音。</p>
</div>
<p>再说到「だ」接续在形容词后的情况。形容词接续「だ」的活用形式形成的「高いだろう」，包括接续「です」的活用形式形成的「高いでしょう」等这类表达，和动词有着类似的出发点，即替代并不常用的未然形。</p>
<p>相比之下，形容动词的未然形虽然依然常用，但其使用词干接续「です」的活用形式形成的「好きでしょう」等表达也同时是常用词组。</p>
<p>这些词组的对比，事实上是两种日语语体之间的对比，关于日语语体的介绍见本文的最后。</p>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）いまは朝七時<strong>だ</strong>。（现在是早上七点）</li>
<li>（未然形）日本語は難しくない<strong>だろ</strong>う？（日语不算难吧？）</li>
<li>（連用形①）これはわたしの本<strong>で</strong>はない。（这不是我的书）</li>
<li>（連用形②）あれは去年のこと<strong>だっ</strong>た。（那已经是去年的事情了）</li>
<li>（連体形）未成年<strong>な</strong>ので、ここは入らない。（未成年禁止入内）</li>
<li>（仮定形）あの人<strong>なら</strong>できると思います。（要是那个人的话就能做成了）</li>
</ul>
<p>这里第三连用形由于使用频率极低所以不举出例句。</p>
<h1 id="推量意志助动词うよう">推量、意志助动词「う・よう」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第二未然形 <br /> <strong>読も</strong>う <br /> <strong>たがろ</strong>う</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>よう <br /> <strong>られ</strong>よう</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>よう</td>
<td style="text-align: center;">第一未然形 <br /> <strong>し</strong>よう</td>
<td style="text-align: center;">未然形 <br /> <strong>高かろ</strong>う <br /> <strong>なかろ</strong>う</td>
<td style="text-align: center;">未然形 <br /> <strong>好きだろ</strong>う <br /> <strong>ようだろ</strong>う</td>
<td style="text-align: center;">（助动词） <br /> <strong>花</strong><em>だろ</em>う <br /> <strong>花</strong><em>でしょ</em>う <br /> <strong>これ</strong><em>だろ</em>う <br /> <strong>これ</strong><em>でしょ</em>う</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">未然形 <br /> <strong>でしょ</strong>う</td>
<td style="text-align: center;">第二未然形 <br /> <strong>ましょ</strong>う</td>
<td style="text-align: center;">未然形 <br /> <strong>たろ</strong>う</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>词语接续助动词「う・よう」后的形式，一般称之为该词语的<strong>意志式</strong>。</p>
<p>该助动词主要有两种含义，即推量和意志。推量的含义为表达说话人在没有确切的根据的条件下对某种状态、行为的推测，另外也包含了征询听话人自己的推测是否合适、合理的含义。而意志的含义为说话人本身的期望和计划中进行的行为，另外也包含了对听话人的劝诱含义。</p>
<p>这里需要注意的是，不同的词语接续「う」之后，这两种含义之间是有倾向性的：</p>
<ul>
<li>意志动词接续「う」倾向于表达意志</li>
<li>非意志动词接续「う」倾向于表达推量</li>
<li>形容词（类形容词助动词）接续「う」倾向于表达推量</li>
<li>形容动词（类形容动词助动词）接续「う」倾向于表达推量</li>
<li>「でしょう」两种含义均表达</li>
<li>「ましょう」倾向于表达意志</li>
<li>「たろう」倾向于表达推量</li>
</ul>
<p>这里补充意志性动词和非意志性动词的定义：</p>
<ul>
<li>意志性动词。即表述下列含义的动词：
<ul>
<li>表述有生命者能够自控的动作，如「笑う、行く」</li>
<li>表述有生命者能够自控的心理活动，如「思う、考える」</li>
</ul></li>
<li>非意志性动词。即表述下列含义的动词：
<ul>
<li>表述自发的心理活动，如「慌てる、飽きる」</li>
<li>表述自然的生理现象，如「老いる、疲れる」</li>
<li>表述能力，如「できる、分かる」</li>
<li>表述偶发、偶然事件，如「出会う、忘れる」</li>
<li>表述动植物的行为，如「咲く、育つ、枯れる」</li>
<li>表述自然现象与物理运动，如「霞む、光る、流れる、増える」</li>
<li>表述抽象行为，如「ある、終わる」</li>
</ul></li>
</ul>
<div class="note info no-icon"><p>意志性动词和非意志性动词的划分实际上是模糊的，有很多位于中间地带的动词，需要根据语句判断。</p>
<p>使用非意志性动词的限制在于其命令形、可能式等用于表达意志的活用形式不具有含义，并且也不能用于表达愿望（通过助动词「たい、たがる」表达，后续说明），也很少接续补助动词（通过助词「て」接续，后续说明）。</p>
</div>
<p>这也就是动词通过先接续助动词「だ」后利用其未然形形成「○だろう」的作用了。因为动词（类动词助动词）通过第二未然形接续「う」倾向于表达意志，所以为了更好地表达推量，只能通过另外接续助动词表达。</p>
<p>下面我们给出一些意志式的例句。</p>
<ul>
<li>僕は<strong>死の<u>う</u></strong>と思ったのは。（我也曾想过一了百了）</li>
<li>休日なので、公園には人が<strong>多かろ<u>う</u></strong>と思います。（今天休息日，公园里人应该很多）</li>
<li>この試験はとても<strong>困難だろ<u>う</u></strong>？（这考试不是特别难吗？）</li>
<li>これは最後の<strong>問題点<em>だろ</em><u>う</u></strong>？（这是最后的问题了吗？）</li>
<li>一緒に参加してもいい<strong>でしょ<u>う</u></strong>？（一起参加不也挺好的吗？）</li>
<li>放課後カラオケに行き<strong>ましょ<u>う</u></strong>？（放学后一起去 KTV 吧？）</li>
<li>昨日は楽しかっ<strong>たろ<u>う</u></strong>？（昨天快乐吗？）</li>
</ul>
<p>由于该助动词活用形式有限，故不给出该助动词的各类活用形式的例句。</p>
<div class="note info no-icon"><p>意志式最重要的句式就是和动词「思う」连用表示当前说话人的行为意向：</p>
<ul>
<li>明日は六時くらい<strong>起きようと思う</strong>。（我打算明天六点起）</li>
<li>この秘密をみんなに<strong>打ち明けようと思っ</strong>ている。（在想着把这个秘密告诉大家）</li>
</ul>
<p>此外，出于行为意向可能有不确定性，加入表示不确定的助词「か」也是常见的：</p>
<ul>
<li>明日は六時くらい<strong>起きよう<u>か</u>と思う</strong>。（我在想明天要不要六点起）</li>
<li>この秘密をみんなに<strong>打ち明けよう<u>か</u>と思っ</strong>ている。（在想着要不要把这个秘密告诉大家）</li>
</ul>
<p>另外注意，这一句式不能用来形容他人的行为意向，形容他人行为意向可以使用形式体言「つもり」。</p>
<p>而如果这种行为意向已经将要变为现实，则一般使用动词「する」：</p>
<ul>
<li><strong>出かけようとし</strong>たとき、友達がきた。（刚要出门的时候朋友来了）</li>
<li><strong>言おうとする</strong>と、忘れてしまった。（刚要说的就忘了）</li>
</ul>
<p>当然，另外一个重要句式是先前提到过的表示邀请和提议的「～うではないか？」。</p>
</div>
<h1 id="被动可能自发尊敬助动词れるられる">被动、可能、自发、尊敬助动词「れる・られる」</h1>
<p>该助动词的接续表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一未然形 <br /> <strong>読ま</strong>れる <br /> <strong>たがら</strong>れる</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>られる <br /> <strong>られ</strong>られる</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>られる</td>
<td style="text-align: center;">第三未然形 <br /> <strong>さ</strong>れる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>词语接续助动词「れる・られる」后的形式，一般称之为该词语的<strong>被动式</strong>或者<strong>可能式</strong>等。</p>
<div class="note info no-icon"><p>本助动词四种含义的区别往往涉及到句中助词的使用，所以这里需要讨论到部分助词的使用方法。</p>
</div>
<h2 id="被动语义">被动语义</h2>
<p>首先讨论该助动词表达被动语义的用法，我们可以观察主动语义句如何转换为被动语义句。</p>
<ul>
<li>先生<strong>は</strong>わたし<strong>を</strong>褒めた。（老师夸奖了我）</li>
<li>わたし<strong>は</strong>先生<strong>に</strong>褒め<u>られた</u>。（我被老师夸奖了）</li>
</ul>
<p>可以看到在主动语义句中动作的发出者由「は」标记，而动作的接收者由「を」标记，这也是先前介绍过的基本助词使用方式。而转为被动语义句之后，动作的接收者则换用「は」标记，动作的发出者则换用「に」标记。</p>
<p>更为复杂的句式可以观察下述例句。</p>
<ul>
<li>犬<strong>は</strong>妹<strong>の</strong>足<strong>を</strong>噛んだ。（狗咬了妹妹的腿）</li>
<li>妹<strong>は</strong>犬<strong>に</strong>足<strong>を</strong>噛ま<u>れた</u>。（妹妹被狗咬了腿）</li>
<li>妹<strong>の</strong>足<strong>は</strong>犬<strong>に</strong>噛ま<u>れた</u>。（妹妹的腿被狗咬了）</li>
</ul>
<p>如果按照第一对例句的转换方式，上述例句转换为被动语义句的时候应当转换为第三句的形式，然而第二句的形式却是实际上更为常见的用法。这里相比于第三句调换了句子的主题（即副助词「は」的位置发生变换），而动作的最终实际承受者依然使用「を」标记，但是发出者仍然应当使用「に」标记。</p>
<p>另外，有时我们并不关注动作实际的发出者，在这样的条件下，被动句可以写为：</p>
<ul>
<li>今週月曜日は駅にイベント<strong>が</strong>行わ<u>れます</u>。（这周一车站举办活动）</li>
</ul>
<p>这类语句中动作的最终实际承受者使用「が」标记。</p>
<div class="note info no-icon"><p>事实上日语的被动句中动作的发出者除了常见的使用「に」标记，有时还可以使用「から」或者「によって」标记。</p>
<p>其中「によって」常见于正式文本，并且经常与指定创作、发明、发现的具体主体搭配使用：</p>
<ul>
<li>アメリカ大陸はコロンブス<strong>によって</strong>発見されました。（美洲大陆由哥伦布发现）</li>
<li>この建物は日本の有名なデザイナー<strong>によって</strong>設計されました。（这建筑由日本有名的设计师设计）</li>
<li>田中氏は法律<strong>によって</strong>罰されました。（田中被法律制裁了）</li>
</ul>
<p>「から」的主要用法基于日语格助词的一个使用准则，即格助词不重复原则。该原则限定了一个日语句子内原则上不能出现相同的格助词。当然这一原则也存在例外，即如果重复的格助词不至于引起歧义则可以允许：</p>
<ul>
<li>わたしは先生<strong>に</strong>寿司屋さん<strong>に</strong>誘われた。（我被老师邀请去了寿司店）</li>
</ul>
<p>这里的两个格助词「に」虽然重复但是可以通过分析语境得知并无歧义，故可以接受。但事实上我们并不推荐这样的语句，因为其实际上提高了交流成本。</p>
<p>回到「から」的用法，首先考虑下述主动句：</p>
<ul>
<li>校長が学生に卒業証書を授与しました。（校长给学生授予毕业证书）</li>
</ul>
<p>若按照一般原则将上述语句改为被动句，就会发现格助词「に」重复：</p>
<ul>
<li>卒業証書は校長<strong>に</strong>学生<strong>に</strong>授与されました。</li>
</ul>
<p>从而这里应当将表示动作的发出者的「に」修改为「から」。上述场景常见于描述授受关系的动词句中：</p>
<ul>
<li>卒業証書は校長<strong>から</strong>学生<strong>に</strong>授与されました。（毕业证书由校长授予给学生）</li>
</ul>
<p>而如果句子中的动词是情感相关的动词或者有方向性描述的动词，即使并未发生格助词重复，也可以使用「から」替代「に」：</p>
<ul>
<li>わたしは先生<strong>に</strong>褒められた。</li>
<li>わたしは先生<strong>から</strong>褒められた。（我被老师夸奖了）</li>
<li>課長はみんなさん<strong>に</strong>尊敬されています。</li>
<li>課長はみんなさん<strong>から</strong>尊敬されています。（课长受大家尊敬）</li>
<li>突然、友達<strong>に</strong>呼び止まれた。</li>
<li>突然、友達<strong>から</strong>呼び止まれた。（我突然被朋友喊住了）</li>
</ul>
</div>
<p>此外，被动语义还有一种运用方式，即表达某人受到了某种不良结果的影响，可以认为是广义条件下某人作为动作的接收方受到了该动作造成的影响。这类语句往往没有对应的主动语义句。</p>
<ul>
<li>あの子<strong>は</strong>両親<strong>に</strong>死な<u>れた</u>。（那孩子死了父母）</li>
</ul>
<p>这里「死ぬ」并非是及物动词（日语称为“他动词”），所以没有对应的主动语义句。但是这句话表明的是，这个孩子受到了父母双亡造成的不良影响。广义而言动作的发出者为「両親」，而广义而言动作的接收者为「あの子」。</p>
<h2 id="可能语义">可能语义</h2>
<p>之后讨论该助动词表达可能语义的用法。该用法即代表动词的主语有能力，能够做到该动词所指代的动作。这里需要注意的是助词的变化：</p>
<ul>
<li>あの子は自分で来<u>られます</u>。（那孩子能自己过来）</li>
<li>わたしは日本語の新聞<strong>が</strong>読ま<u>れます</u>。（我能读懂日语的报纸）</li>
</ul>
<p>可以注意到，第二句中即使「新聞」应当是动词「読む」的宾语，但是依然使用了格助词「が」。而这也是表达能力的时候格助词的使用规定，即表达能力的动词的宾语使用「が」注明。</p>
<p>同样，直接表达能力的动词「できる」的宾语也应当使用「が」注明：</p>
<ul>
<li>わたしはピアノを弾くこと<strong>が</strong>できます。（我会弹钢琴）</li>
</ul>
<p>此外，五段动词接续「れる」并表可能语义的时候，常常发生音便，此时词尾未然形的あ段假名和「れる」中的「れ」合音为该行え段假名：</p>
<ul>
<li>読<strong>まれ</strong>る → 読<strong>め</strong>る</li>
<li>買<strong>われ</strong>る → 買<strong>え</strong>る</li>
<li>書<strong>かれ</strong>る → 書<strong>け</strong>る</li>
</ul>
<p>音便后形成的动词继承「れる」的活用规则，即一段动词活用规则，称为<strong>可能动词</strong>。由于可能动词的存在，所以当五段动词需要表达可能语义的时候，一般均使用可能动词，而非可能引起混淆的助动词「れる」。</p>
<div class="note info no-icon"><p>有一种语法观点为，「する」的可能动词为「できる」，这样就能够解释サ变动词的下述用法：</p>
<ul>
<li>勉強する → 勉強できる</li>
<li>掃除する → 掃除できる</li>
</ul>
<p>而该用法的另外一种解释方法为，「勉強できる」等中的「勉強」等词实际上为名词，而「できる」可以直接接续名词以表达能力。</p>
<p>本手册并不倾向于两者中的任何一方，读者可以自行采用自己更能接受的解释以构建自己的语法体系。</p>
</div>
<div class="note info no-icon"><p>口语中，为了防止可能语义和其他语义（尤其是被动语义）混淆，存在着「ら抜き言葉」的用法。其具体含义为一段动词接续「られる」并表可能语义的时候，可以删去「られる」之中的「ら」来表示区分。</p>
<p>比如下述句子就存在一定的歧义：</p>
<ul>
<li>虎は食べられます。</li>
</ul>
<p>该句可以表达“老虎可以吃”和“被老虎吃”两种含义，而口语中为了区分，可以表达为：</p>
<ul>
<li>（可能）虎は食べれます。</li>
<li>（受け身）虎は食べ<strong>ら</strong>れます。</li>
</ul>
<p>但是需要注意，书面语必须遵守日语语法，即使表达可能语义也不能省略「ら」。</p>
</div>
<div class="note info no-icon"><p>除了「ら抜き言葉」，实际上还有「られ足し言葉」，也就是在可能动词基础上再加上「られる」形成双重可能表达，虽然这严格而言违反语法，但是在「行けられる、書けられる」，甚至再拔去「ら」形成的「行けれる、書けれる」等词例中已经得以体现。</p>
<p>这种口语语法可能的成因是，「行ける」除了是「行く」的可能动词外还具有其他义项，为了强调可能的语义，只能再次添加「られる」形成「行けられる」并按照「ら抜き言葉」的规则变为「行けれる」。</p>
<p>不过相较于「ら抜き言葉」，「られ足し言葉」并不普及，目前仅出现在极少数的动词上。</p>
</div>
<h2 id="自发语义">自发语义</h2>
<p>然后讨论该助动词表达自发语义的用法。自发语义指的是某一个动作是说话人自然而然形成的或者发出的，一般用于描述在某一种环境或者境遇下自然的行为或表现。例如下述句子：</p>
<ul>
<li>子供の時の写真を見て、あのころが思い出さ<u>れます</u>。（看到童年的照片，不禁回忆起了那个时候）</li>
</ul>
<p>这里就阐述了说话人在看见了自己童年时期的照片的时候，自然而然地会想起那段时间的记忆。</p>
<p>自发语义在汉语中并不常见，因为这类语义常常使用实意副词“自然而然”“情不自禁”等表达，而不会通过一个固定的语法形式进行。</p>
<h2 id="尊敬语义">尊敬语义</h2>
<p>最后讨论该助动词表达尊敬语义的用法。描述地位高的对象的行为的时候，可以使用该形式表达尊敬的语气：</p>
<ul>
<li>課長も来<u>られます</u>。（课长也会来）</li>
<li>例の件ですが、もう決め<u>られました</u>か？（还是那件事，已经决定了吗？）</li>
<li>先生は新聞<strong>を</strong>読ま<u>れます</u>か？（老师看报吗？）</li>
</ul>
<p>这里注意第三句中的格助词使用，尊敬语义下，格助词应当遵守正常的使用规则。如果将这句话中的「を」替换为「が」，则表明助动词「れる」此时表达可能语义，这句话的含义也就变为询问老师是否能读得懂报纸，相对于想要表达的尊敬语义则是完全相反。</p>
<p>基于该助动词承担了过多容易混淆的语义，在表达尊敬语义的时候，有时可以使用更为正式的敬语以防止和被动语义混淆。</p>
<h2 id="可能式的拓展">可能式的拓展</h2>
<p>事实上日语表达可能语义的方式较为丰富，除了通过助动词「れる・られる」，还有很多其他方式：</p>
<ul>
<li>（助动词）わたしは英語で手紙を<strong>書かれる</strong>。</li>
<li>（可能动词）わたしは英語で手紙を<strong>書ける</strong>。</li>
<li>（可能动词）わたしは英語で手紙を<strong>書くことができる</strong>。</li>
<li>（复合动词后项）わたしは英語で手紙を<strong>書きえる</strong>。</li>
</ul>
<p>事实上，日语中部分动词自带有可能语义，这类动词理论上不能再表示为可能式，这类动词包括「分かる、治る、入る、受かる、慣れる、上がる」。直接用这类动词表达的可能语义称为<strong>无标可能</strong>：</p>
<ul>
<li>この薬を飲めば、一週間で<strong>治る</strong>。（吃了这个药，一周就能好）</li>
<li>肩が痛くて、腕が<strong>上がらない</strong>。（肩膀太疼了，手抬不起来）</li>
<li>いくら押しても、ドアが<strong>開かない</strong>。（再怎么推，门就是开不了）</li>
<li>ここの生活にはまったく<strong>慣れない</strong>。（完全没法习惯这里的生活）</li>
<li>もう少し詰めれば、まだ<strong>入る</strong>。（稍微再压压还能放得进去）</li>
</ul>
<p>这类无标可能动词尽量不使用可能式也是目前日语学习的一个重点。</p>
<hr />
<p>另外，先前提到可能式的宾语使用格助词「が」，事实上，如果句子过分长可能导致误解，仍然应当用回「を」防止误解：</p>
<ul>
<li>ワープロ<strong>を</strong>今年から一年生の間に<strong>打てる</strong>ように、カリキュラムを組み直すことになりました。（为了能让从现在开始的一年级学生学会用打字机，我们重新安排了课程）</li>
</ul>
<p>事实上，可能式的主语还可以用「に・には」之类的助词标注：</p>
<ul>
<li>あいつ<strong>には</strong>そんな困難な問題は解けないよ。（他可做不出来这么难的问题）</li>
<li>もちろん、素人<strong>に</strong>できる技はありません。（当然，新手就会的技术是不存在的）</li>
<li>これがわたし<strong>には</strong>できない。（这我不会做）</li>
</ul>
<hr />
<p>此外，提及可能式，则还需要提出两个重要的动词，即「見える、聞こえる」。</p>
<div class="note info no-icon"><p>从词源上讲，这两个动词的起源更为久远，来源于上古日语的可能式助动词「ゆ」，其接续在「見る、聞く」之后形成了「見ゆ、聞かゆ」，随后「聞かゆ」转音为「聞こゆ」。事实上在中古日语中「見ゆ、聞こゆ」就已经和「見る、聞く」区分开了。这也是因为语言学中越常用的词语越容易不规则这一原则。</p>
<p>随后这两个动词均遵守了中古日语下二段动词演化为现代下一段动词的规律，变为现代日语的「見える、聞こえる」。</p>
<p>事实上，现代日语中的「あらゆる、いわゆる、しのはゆ」也是助动词「ゆ」的残留，这里不展开说明。</p>
</div>
<p>这里讲解「見える、見られる」的区别，「聞こえる、聞ける・聞かれる」的差别基本与之类似。</p>
<p>从语义上说，「見られる」是用来形容在有看的欲望或者意图的前提下是否能够看到的，相比较而言「見える」一般用于形容客观条件下是否可以看到或者自发地看到。可以观察下述例句：</p>
<ul>
<li>（客观制约）この文字が<strong>見えます</strong>か？（这个字看得见吗？）</li>
<li>（有意图）今は美術館でゴッホの絵が<strong>見られます</strong>。（现在美术馆能看到梵高的画）</li>
<li>（自发性）ああ、富士山が<strong>見える</strong>！（啊，看见富士山了！）</li>
<li>（自发性）目を閉じると、懐かしい故郷の風景が<strong>見える</strong>。（闭上眼，眼前浮现了令人怀念的故乡风景）</li>
</ul>
<p>简而言之，「見られる」更具有主观性质，更强调在主体拥有想去看的欲望或者意图下能否如愿。</p>
<h1 id="使役助动词せるさせる">使役助动词「せる・させる」</h1>
<p>该助动词的接续表为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一未然形 <br /> <strong>読ま</strong>せる <br /> <strong>たがら</strong>せる</td>
<td style="text-align: center;">未然形 <br /> <strong>起き</strong>させる <br /> <strong>られ</strong>させる</td>
<td style="text-align: center;">未然形 <br /> <strong><code>@ 来 こ</code></strong>させる</td>
<td style="text-align: center;">第三未然形 <br /> <strong>さ</strong>せる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>词语接续助动词「せる・させる」后的形式，一般称之为该词语的<strong>使役式</strong>。</p>
<p>在叙述将主动句修改为从动句（即含使役态动词的语句）的方法之前，我们简单叙述日语动词在另外一个标准下的分类。日语动词可以根据是否接续宾语分为：</p>
<ul>
<li>双及物动词（二重他動詞）。即可以接续两个宾语的及物动词，类似「渡す」等描述授受的动词均属于这一类。</li>
<li>一般及物动词（一般的他動詞）。即可以接续单个宾语的及物动词，大部分及物动词类似「歌う、話す」等属于这一类。</li>
<li>不及物动词（自動詞）。即不接续宾语的动词，类似「笑う、疲れる」等动词属于这一类。</li>
</ul>
<p>这里分别研讨双及物动词、一般及物动词、意志性不及物动词、非意志性不及物动词的主动句变为从动句时涉及的注意点。下述是若干主动句例句：</p>
<ul>
<li>彼<strong>が</strong>あの手紙<strong>を</strong>彼女<strong>に</strong>渡す。（他把那封信交给她）</li>
<li>この二人<strong>が</strong>国歌<strong>を</strong>歌う。（那两个人唱国歌）</li>
<li>あの子供<strong>が</strong>笑う。（那个孩子笑了）</li>
<li>そのゼリー<strong>が</strong>固まる。（果冻凝固了）</li>
</ul>
<p>下面我们将上述句子变为从动句，这里所有使役均由“我”发出。主动句变为从动句时，使役发出者使用「が」标记，使役对象首先考虑使用「を」标记。那么上述四句话即可变为：</p>
<ul>
<li>*わたし<strong>が</strong>彼<strong>を</strong>あの手紙<strong>を</strong>彼女<strong>に</strong>渡させる。</li>
<li>*わたし<strong>が</strong>この二人<strong>を</strong>国歌<strong>を</strong>歌わせる。</li>
<li>わたし<strong>が</strong>あの子供<strong>を</strong>笑わせる。（我把那个孩子逗笑了）</li>
<li>わたし<strong>が</strong>そのゼリー<strong>を</strong>固まらせる。（我让果冻凝固了）</li>
</ul>
<p>注意到标星的句子出现了格助词重复，所以需要考虑将使役对象用「に」标记：</p>
<ul>
<li>*わたし<strong>が</strong>彼<strong>に</strong>あの手紙<strong>を</strong>彼女<strong>に</strong>渡させる。</li>
<li>わたし<strong>が</strong>この二人<strong>に</strong>国歌<strong>を</strong>歌わせる。（我让那两个人唱了国歌）</li>
</ul>
<p>然而即使如此标星的句子依然出现了格助词重复，此时只能将原先表现授受方向的「に」进一步替换为「へ」：</p>
<ul>
<li>わたし<strong>が</strong>彼<strong>に</strong>あの手紙<strong>を</strong>彼女<strong>へ</strong>渡させる。（我让他把那封信交给她）</li>
</ul>
<p>而上述句子中第三句和第四句的共同点在于不及物动词改为从动句不会出现格助词冲突，但是其差别在于动词是否表达意志。如果动词能够表达意志，那么标记使役对象的格助词使用「を」和「に」均可。其中「を」表示该动作的意志最终由使役发出者决定，即表达强制、强迫的含义。而「に」表示该动作的意志最终由使役对象决定，即表达放任、默许的含义：</p>
<ul>
<li>わたし<strong>が</strong>あの子供<strong>を</strong>笑わせる。（我把那个孩子逗笑了）</li>
<li>わたし<strong>が</strong>あの子供<strong>に</strong>笑わせる。（我就让那个孩子那样笑着）</li>
</ul>
<p>这里第一句话表示我跟随自己的意愿使得孩子们笑了出来，可以翻译为“我把那个孩子逗笑了”。而第二句话表示我放任了孩子们笑出来的意愿，可以翻译为“我就让那个孩子那样笑着”。虽然最终都使用了使役式，但意志的最终决定方并不一样。</p>
<p>与此相反，非意志动词的使役对象不能使用「に」标记，因为使役对象不存在意志：</p>
<ul>
<li>（○）わたし<strong>が</strong>そのゼリー<strong>を</strong>固まらせる。</li>
<li>（×）わたし<strong>が</strong>そのゼリー<strong>に</strong>固まらせる。</li>
</ul>
<p>当然，如果通过省略宾语以消除格助词重复的影响，意志性及物动词的使役对象使用「を」和「に」标记均可。与意志性非及物动词规律一致，「を」表示强制、强迫而「に」表示放任、默许：</p>
<ul>
<li>わたし<strong>が</strong>あの二人<strong>を</strong>歌わせる。（我让那两个人唱了国歌）</li>
<li>わたし<strong>が</strong>あの二人<strong>に</strong>歌わせる。（我就让那两个人那样唱着国歌）</li>
</ul>
<p>这里两句话的具体阐释略去。</p>
<div class="note info no-icon"><p>使役式的一个重要作用为通过助词「て」接续表示授受的补助动词以进一步表达使役方向，这一用法我们后续阐释。</p>
</div>
<div class="note info no-icon"><p>与可能式中的「見える、聞こえる」类似，使役式中也存在「見せる、着せる」这类具有使役含义的动词与真正的使役式「見させる、着させる」的对立。</p>
<p>「見せる、見させる」的区别在于是否强制：</p>
<ul>
<li>（非强制性）子どもに教育テレビを<strong>見せる</strong>。（让孩子看教育台）</li>
<li>（强制性）嫌がる子どもに教育テレビを<strong>見させる</strong>。（让讨厌学习的孩子看教育台）</li>
</ul>
<p>这里明显「見させる」突出了强制的含义。</p>
<p>此外，由于使役式也可以表示放任的语义，所以下列句子虽然不是强制，但是依然使用「見させる」：</p>
<ul>
<li>子どもにテレビを<strong>見せ</strong>たくはないけど、どうしてもって言うから、毎日二時間だけは<strong>見させる</strong>よ。（虽然不想给孩子看电视，但是要说的话，每天还是会让他就看个两个小时）</li>
</ul>
<p>这里前者的「見せる」是并非强制的使役，说话人本就不想让孩子看电视，更不可能用「見させる」表示强制使役了。而后者的「見させる」则是表示放任的使役式用法。</p>
<p>而「着せる、着させる」的区别在动作的主体：</p>
<ul>
<li>（使役发出者动作）母親は子どもに服を<strong>着せる</strong>。（妈妈给孩子穿衣服）</li>
<li>（使役对象动作）母親は子どもに服を<strong>着させる</strong>。（妈妈让孩子穿衣服）</li>
</ul>
<p>事实上这依然是强制性上的差别。使役的本意就在于强制让使役对象作出要求中的动作，所以「着させる」的本意就是让使役对象自己穿衣服，或者说强制要求使役对象穿衣服，所以穿衣服的动作主体是使役对象。而「着せる」则是使役发出者帮助使役对象穿好衣服，严格而言并非是使役，实际上是另外一种动作。</p>
<p>迁移到「見せる、見させる」上。「見させる」作为本质的使役式，应当表示使役发出者强制要求使役对象看，本身就包含了强制要求。而「見せる」实际上可以理解为让使役对象能够看到，并没有强烈的强制性。</p>
</div>
<h2 id="使役被动式">使役被动式</h2>
<p>之后我们需要讲解使役被动式。使役被动式是使役式和被动式的连用，两者的顺序为先构成使役式，后构成被动式。所以动词的使役被动式即为其未然形接续「せられる・させられる」：</p>
<ul>
<li>読ま<strong>せられる</strong>、食べ<strong>させられる</strong>、来<strong>させられる</strong>、さ<strong>せられる</strong></li>
</ul>
<p>此外，针对五段动词，其使役被动式中的「せら」可以音便为「さ」，但是さ行五段动词由于会形成「ささ」连读故一般不音便：</p>
<ul>
<li>（○）読ま<strong>せられる</strong> → 読ま<strong>される</strong></li>
<li>（○）立た<strong>せられる</strong> → 立た<strong>される</strong></li>
<li>（×）話さ<strong>せられる</strong> → 話さ<strong>される</strong></li>
</ul>
<div class="note info no-icon"><p>该音便的一种解释为人们重新接纳了古语使役助动词「す」，毕竟类似「費やす、濡らす、満たす、踊らす」等古语使役式的残留依然存在于现代语中。</p>
<p>部分学者将这一音便归纳为使役助动词的五段化的一个侧面。</p>
</div>
<h3 id="使役被动语义">使役被动语义</h3>
<p>使役被动式的基本用法即表达说话方被强迫进行某一行为：</p>
<ul>
<li>あの子<strong>は</strong>先生<strong>に</strong>廊下<strong>で</strong>立たせられた。（那孩子被老师在走廊罚站）</li>
<li>あいつ<strong>は</strong>社長<strong>に</strong>会社<strong>を</strong>やめさせられた。（他被社长要求离职）</li>
</ul>
<p>可以注意到使役被动句之中的主语和主动句中的主语一致，唯一的差别为需要标记一个使役发出者。使役发出者优先使用「に」标记，出现格助词冲突时则视情况调整其他格助词。</p>
<h3 id="使役自发语义">使役自发语义</h3>
<p>另外由于助动词「れる・られる」还能表示自发语义，所以使役被动式还可以用于表达某一个事物、行为使得说话方自然地进行了某一行为：</p>
<ul>
<li>目の前の素晴らしい景色<strong>に</strong>感動させられた。（眼前美丽的景色让我感动）</li>
<li>先生の決断<strong>には</strong>、わたしは実に感心させられました。（老师的决断真的让我钦佩）</li>
</ul>
<p>这里应当使用「に」标记使得说话人作出自发行为的事物、行为。</p>
<h3 id="使役可能语义">使役可能语义</h3>
<p>此外由于助动词「れる・られる」还能表示可能语义，所以使役被动式还可以用于表达可能能够使得某人作出某种行为：</p>
<ul>
<li>雲もない日にも雨<strong>を</strong>降らせられますか？（我们还能让连云都没有天空下雨？）</li>
<li>金満家でも彼女の欲望<strong>を</strong>満足させられない。（再有钱也满足不了她的欲望）</li>
</ul>
<p>可见这里格助词的使用准则基本符合使役式的格助词使用规则。</p>
<h3 id="尊敬语义-1">尊敬语义</h3>
<p>最后由于助动词「れる・られる」还能表示尊敬语义，所以使役被动式还可以用于表达最高程度的敬意，常常用于皇室相关活动。此时使役被动式不能使用音便形式：</p>
<ul>
<li>殿下はご視察のご日程<strong>を</strong>予定の通り<strong>に</strong>終えさせられました。（殿下按照预定的日程结束了视察）</li>
</ul>
<p>此时即使使用了使役被动式，实际上句子依然为一般主动句的结构，格助词相关的要求与一般主动句一致。</p>
<div class="note info no-icon"><p>除去使役被动，日语中还有其他的复合语义，但是其表达则各有惯例。</p>
<p>例如被动使役，虽然理论上可以通过「○れさせる・○られさせる」表达，但更为常用的形式为通过助动词「ようだ」形成「○れるようにする・○られるようにする」的形式：</p>
<ul>
<li>わたしはあの子をしかられるようにした。（我让那孩子被骂了一顿）</li>
</ul>
<p>当然，为了进一步强调使役的含义，还可以用「仕向ける」替换「する」：</p>
<ul>
<li>わたしはあの子をしかられるように仕向けた。（我让那孩子被骂了一顿）</li>
</ul>
<p>此外例如被动可能，实际上由于被动式实际上并不是意志性的，故严格意义而言不存在被动可能式。如果确需表达可能，则可以通过连用形复合动词「得る」表达：</p>
<ul>
<li>褒められえる。（可能被表扬）</li>
</ul>
<p>再者，在尊敬的语义下询问可能，理论上可以在可能动词上继续通过助动词「れる・られる」表示，如：</p>
<ul>
<li>先生は漢文が読められますか？（老师能看懂汉文吗？）</li>
</ul>
<p>事实上这种用法极其少见，一般会换用其他敬语表达：</p>
<ul>
<li>先生は漢文がお読みになれますか？（老师能看懂汉文吗？）</li>
</ul>
</div>
<h1 id="愿望助动词たいたがる">愿望助动词「たい、たがる」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一连用形 <br /> <strong>読み</strong>たい <br /> <strong>読み</strong>たがる <br /> <strong>たがり</strong>たい <br /> <strong>たがり</strong>たがる</td>
<td style="text-align: center;">连用形 <br /> <strong>起き</strong>たい <br /> <strong>起き</strong>たがる <br /> <strong>られ</strong>たい <br /> <strong>られ</strong>たがる</td>
<td style="text-align: center;">连用形 <br /> <strong><code>@ 来 き</code></strong>たい <br /> <strong><code>@ 来 き</code></strong>たがる</td>
<td style="text-align: center;">连用形 <br /> <strong>し</strong>たい <br /> <strong>し</strong>たがる</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>词语接续助动词「たい、たがる」后的形式，一般称之为该词语的<strong>愿望式</strong>。</p>
<p>这两个助动词均用于形容某人的某种愿望，所不同的是人称。助动词「たい」一般仅能表现第一人称的愿望，而助动词「たがる」可以用于表现其他人称的愿望。</p>
<ul>
<li>喉が渇いているから、水が<strong>飲みたい</strong>。（口干想喝水）</li>
<li>息子がいつもケーキを<strong>食べたがっ</strong>ている。（我家孩子总是想吃蛋糕）</li>
</ul>
<p>日语中描述愿望时产生的「たい」和「たがる」的对立的根本原因是，断言他人的愿望实际上是一种不合礼仪的行为。基于此，「たがる」实际上也并不适合用于描述上级、长辈的愿望。并且「たがる」常常蕴含有些许的负面含义，比如上述第二句，描述自己的孩子总是想吃蛋糕，其中实际上蕴含有认为常常吃蛋糕并不好的语义。</p>
<p>但是，「たい」也可以在一定的条件下表现其他人的愿望。例如，在引文这一类站在他人视角下的阐述方式：</p>
<ul>
<li>田中さんはこれを<strong>読みたい</strong>と言った。（田中说他想看这本书）</li>
</ul>
<p>这里阐述的“想读”这一愿望是作为“说过”这一行为的引文出现的，实际上是站在别人的视角上阐述愿望，所以可以用「たい」。</p>
<p>另外还有类似于下述的「たい」例句：</p>
<ul>
<li>そんなに<strong>読みたい</strong>なら貸すよ。（那么想看的话就借你了）</li>
<li><strong>やめたい</strong>人はやめればいい。（想放弃的现在就可以放弃）</li>
</ul>
<p>这两句话实际上都表现出一种对他人愿望的推测，而非一种确定的断言。第一句话是说话者对对方“想要读这本书”这一愿望的自我推测，所以可以用「たい」。而第二句话里「たい」作为了定语对「人」给出限定，这里并没有实际上指出具体某人“想要放弃”，而只是在推测谁“想要放弃”，所以可以用「たい」。</p>
<p>此外，使用「たがる」描述第一人称的愿望也是可行的，但是几乎仅可以在固定短语「たがっても」中使用：</p>
<ul>
<li>わたしはどんなに退院し<strong>たがっても</strong>、医者が許してくれない。（我无论多想出院，医生就是不让）</li>
</ul>
<div class="note info no-icon"><p>注意上述例句中下述两句：</p>
<ul>
<li>喉が渇いているから、水<strong>が</strong>飲みたい。（口干想喝水）</li>
<li>田中さんはこれ<strong>を</strong>読みたいと言った。（田中说他想看这本书）</li>
</ul>
<p>可以注意到虽然都是标记宾语，但实际上第一句使用的格助词是「が」。这两个格助词的差别在于：</p>
<ul>
<li>使用「が」时，表明语气上强调宾语</li>
<li>使用「を」时，表明语气上强调动词</li>
</ul>
<p>具体而言，第一句使用了「が」，表明在“想喝水”这个行为中，强调的是“水”这个物品，包含着“我想喝的是水而非其他饮品”的含义。与此相反，第二句使用了「を」，表明在“想看这个”这个行为中，强调的是“看”这个动作，包含着“我想看这个而非听你讲这个”的含义。</p>
<p>事实上，通过添加修饰词也可以体现出这里格助词的语感差异：</p>
<ul>
<li>冷たい水<strong>が</strong>飲みたい。（想喝冷水）</li>
<li>水<strong>を</strong>ゆっくり飲みたい。（想慢慢喝水）</li>
</ul>
<p>这里第一句强调了“我想喝的是冷水而非热水”，所以应当使用「が」。第二句强调了“我要慢慢喝水而非快速喝水”，所以应当使用「を」。</p>
</div>
<h1 id="推量样态助动词らしい">推量、样态助动词「らしい」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">终止形 <br /> <strong>読む</strong>らしい <br /> <strong>たがる</strong>らしい</td>
<td style="text-align: center;">终止形 <br /> <strong>起きる</strong>らしい <br /> <strong>られる</strong>らしい</td>
<td style="text-align: center;">终止形 <br /> <strong><code>@ 来 く</code>る</strong>らしい</td>
<td style="text-align: center;">终止形 <br /> <strong>する</strong>らしい</td>
<td style="text-align: center;">终止形 <br /> <strong>高い</strong>らしい <br /> <strong>ない</strong>らしい</td>
<td style="text-align: center;">词干 <br /> <strong>好き</strong>らしい <br /> <strong>よう</strong>らしい</td>
<td style="text-align: center;">原形 <br /> <strong>花</strong>らしい <br /> <strong>これ</strong>らしい</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">终止形 <br /> <strong>た</strong>らしい</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">终止形 <br /> <strong>ぬ</strong>らしい <br /> <strong>ん</strong>らしい</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">助词接续例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>から</strong>らしい、<strong>の</strong>らしい</td>
</tr>
</tbody>
</table>
<p>该助动词的主要用法为描述说话人根据所听闻到的信息作出的推测：</p>
<ul>
<li>天気予報によると、明日は雨が<strong>降るらしい</strong>。（据天气预报说，明天好像要下雨）</li>
<li>今年の冬は<strong>寒いらしい</strong>。（听说今年冬天很冷）</li>
<li>田中さんは村上さんが<strong>嫌いらしい</strong>。（听说田中讨厌村上）</li>
<li>あそこに立っているのは<strong>木村さんらしい</strong>。（站在那里的看起来像木村）</li>
<li>彼はもうサッカーをやめ<strong>たらしい</strong>。（他好像已经不踢球了）</li>
<li>あいつらはまったくあのことを知ら<strong>んらしい</strong>。（他们好像还不知道那件事）</li>
</ul>
<p>而这种推测实际上引申出了委婉的断定的含义：</p>
<ul>
<li>彼は落第し<strong>たらしい</strong>。（他没考上）</li>
</ul>
<p>在描述此类负面的信息的时候，即使已经完全确定事件的真实性，也可以使用该助动词的推测含义来表达委婉的断定，从而软化语气。</p>
<p>而该助动词还具有另外一种用途，即接续在体言之后表示具有该体言特色和性质的含义（很少接续在动词、形容词、形容动词、助动词之后）。比如下述例句：</p>
<ul>
<li><strong>男らしい</strong>男になりたい。（想成为有男子气概的男人）</li>
</ul>
<p>这两种用法在语法上的差别在于，表示推测的用法没有否定式「らしくない」、假定形「らしけれ」以及未然形「らしかろ」，而表示样态的用法具有全部形容词的活用。如果需要在表示推测的用法里表示否定，则需要使用「ないらしい」的形式：</p>
<ul>
<li>日本語は難しく<strong>ないらしい</strong>。（听说日语不难）</li>
</ul>
<p>但是表示样态的用法可以按照形容词的活用方式表示否定：</p>
<ul>
<li>そんなやり方は<strong>あなたらしくない</strong>ね。（那种行事风格真不像你）</li>
</ul>
<p>该助动词表示推测的用法的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）隣のあの子は勉強している<strong>らしい</strong>。（听说隔壁家孩子在学习）</li>
<li>（連用形①）彼は疲れている<strong>らしく</strong>、無言に立ち去った。（感觉他已经累了，没说话就走了）</li>
<li>（連用形②）謎を解き明かしたい<strong>らしかっ</strong>た。（听说你想把这问题弄明白）</li>
<li>（連体形）結婚した<strong>らしき</strong>話を聞いた。（好像听说要结婚了）</li>
</ul>
<p>该助动词表示样态的用法的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）彼はとても男<strong>らしい</strong>。（他特别有男子气概）</li>
<li>（未然形）子供<strong>らしかろ</strong>う。（像孩子吧）</li>
<li>（連用形①）学生は学生<strong>らしく</strong>しなさい。（学生就该有学生样）</li>
<li>（連用形②）涙なんか流しちゃって、あほ<strong>らしかっ</strong>た。（最后还是没忍住泪水，真傻啊）</li>
<li>（連体形）練習<strong>らしい</strong>練習もできないまま本番を迎えた。（连像样的练习都没做就这样上场了）</li>
<li>（仮定形）たとえ平凡でも自分<strong>らしけれ</strong>ばいい。（即使平凡，只要活出自我就行）</li>
</ul>
<div class="note info no-icon"><p>「らしい」的词性实际上是较为复杂的，这里介绍本文所采纳的一种观点。</p>
<ul>
<li>表示推测的「らしい」是助动词，且活用受限（如不存在否定式等）</li>
<li>表示样态的「らしい」是助动词，且具有形容词全部活用</li>
<li>部分表示样态的「らしい」已经固化成为单词的一部分（如「見窄らしい、愛らしい」），这里的「らしい」不看作助动词</li>
<li>「らしい」本身可以作为独立的形容词使用，但是仅限口语</li>
</ul>
<p>部分观点将部分表示样态的「らしい」看作接尾词，从而固化为单词的一部分的「らしい」就是构成复合词的接尾词。</p>
<p>此外，「らしい」作为独立形容词使用的例句包括：</p>
<ul>
<li><strong>らしさ</strong>なんて最初からないから。（所谓相像，最初就不存在）</li>
<li>どうした、いつもと違って<strong>らしくない</strong>ぞ。（怎么了，这可不像你平时啊）</li>
</ul>
</div>
<div class="note info no-icon"><p>表示推测的「らしい」的过去式存在两种可能，即对「らしい」用过去时和对「らしい」之前的词语用过去时，但是其语感上有一定的差别。</p>
<ul>
<li>彼は来<strong>た</strong>らしい。（他之前像是来过）</li>
<li>彼は来るらしかっ<strong>た</strong>。（他说是要来的）</li>
</ul>
<p>前者是自然的，其表明了说话者站在现在的角度，根据各种信息推断他之前来过这个动作。</p>
<p>而后者过去时的逻辑是对「来るらしい」这个整体表达过去。「来るらしい」表示根据各种信息推断他就要过来，而这个的整体的过去时就表示根据各种信息推断他过去就该来过了，实际上就蕴含了他并没有来这样的事实。</p>
<p>一定程度上，后者与英语的 should have come 所表达的语意类似。</p>
</div>
<div class="note info no-icon"><p>表示样态的「らしい」的假定形「らしけれ」并不常用，现在常常用助动词「ようだ」的假定形「ようなら」替代：</p>
<ul>
<li>たとえ平凡でも自分<strong>らしけれ</strong>ばいい。（即使平凡，只要活出自我就行）</li>
<li>たとえ平凡でも自分の<strong>ようなら</strong>いい。（即使平凡，只要活出自我就行）</li>
</ul>
</div>
<div class="note info no-icon"><p>表示推测的和表示样态的「らしい」的连体形一般而言为了做出区分，表示推测的「らしい」的连体形会使用古语连体形「らしき」。</p>
</div>
<h1 id="比况助动词ようだ">比况助动词「ようだ」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">连体形 <br /> <strong>読む</strong>ようだ <br /> <strong>たがる</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong>起きる</strong>ようだ <br /> <strong>られる</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong><code>@ 来 く</code>る</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong>する</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong>高い</strong>ようだ <br /> <strong>ない</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong>好きな</strong>ようだ <br /> <strong>ような</strong>ようだ</td>
<td style="text-align: center;">（助词） <br /> <strong>花</strong><em>の</em>ようだ <br /> <del><strong>これ</strong><em>の</em>ようだ</del></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">连体形 <br /> <strong>ます</strong>ようだ</td>
<td style="text-align: center;">连体形 <br /> <strong>た</strong>ようだ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">（终止形） <br /> <strong>ん</strong>ようだ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">指示词接续例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>この</strong>ようだ</td>
</tr>
</tbody>
</table>
<p>这个助动词实际上也有四种语义，简而言之是比况、列举、推量、引用，其中后三者实际上都是比况语义的拓展。</p>
<h2 id="比况语义">比况语义</h2>
<p>首先讨论比况语义，这种语义有时也称为比喻，这也是日语中比喻句的最常见的构成方式。</p>
<ul>
<li>この銅像はまるで生きて<strong>いるようだ</strong>。（这铜像简直就像活了一样）</li>
<li>赤ちゃんを<strong>扱うように</strong>優しくしてください。（请像对待婴儿一样温柔一点）</li>
<li>人生は<strong>桜のようだ</strong>。（人生就如樱花一般）</li>
<li>何かに取りつかれ<strong>たように</strong>唸っている。（像是被什么东西附身了一样一直在碎碎念）</li>
</ul>
<p>另外，由于比喻句总是蕴含着实际上并不是但是很像是这样的对比语义，所以加入表示不确定的助词「か」以表现说话人无法断定的语感也是常见的，注意这里「か」和「ようだ」之间需要用助词「の」连接：</p>
<ul>
<li>この銅像はまるで生きて<strong>いるかのようだ</strong>。（这铜像简直就像活了一样）</li>
<li>明日<strong>死ぬかのように</strong>生きよう。（向死而生吧）</li>
</ul>
<h2 id="列举语义">列举语义</h2>
<p>之后讨论列举语义。事实上列举语义是从比况语义中分解出来的，因为列举本身就是在暗示与已经举出来的例子类似，或者比况近似的事例，表达的语感近似于“像这样的”：</p>
<ul>
<li><strong>数学、物理のような</strong>科目が嫌いだ。（不喜欢像数学、物理这样的学科）</li>
<li><strong>彼女のような</strong>美しさが欲しい。（想要像她那样的美貌）</li>
<li><strong>東京のような</strong>大きな都市には、人と人の距離は逆に希薄になる傾向がある。（在东京这样的大城市里，人与人之间的距离反而容易变得疏远）</li>
</ul>
<h2 id="推量语义">推量语义</h2>
<p>然后讨论推量语义。这种语义依然和比况语义有较强的联系，表示通过观察到的状态所做出的对事实的推测：</p>
<ul>
<li>どうやら失敗し<strong>たようだ</strong>。（怎么看都是失败了啊）</li>
<li>この猫はお腹が空い<strong>たようだっ</strong>たから食べ物をあげた。（那只猫看起来饿了，所以我就给了点吃的）</li>
<li>空の様子を見ると、明日は雨が<strong>降るようだ</strong>。（看这天，明天恐怕要下雨）</li>
</ul>
<h2 id="引用语义">引用语义</h2>
<p>最后讨论引用语义。这种语义依然和比况语义有较强的联系，表示正如同某种信源所描述的一样，接续对某一种事态的论述：</p>
<ul>
<li>先生が言ってい<strong>たように</strong>、今学期の授業内容はだんだん難しくなった。（正如老师所说，这学期的讲课内容越来越难了）</li>
<li>このグラフが<strong>示すように</strong>、日本は晩婚化が進んでいます。（正如这幅图，日本正在迈入晚婚社会）</li>
</ul>
<div class="note info no-icon"><p>「ようだ」实际上还有一种表达希望、建议、祈愿的语义，但是基本仅使用「ように」这个活用形。</p>
<ul>
<li>（希望）皆様に楽しんで<strong>いただけるように</strong>頑張ります。（为了让大家都能开心而努力）</li>
<li>（建议）寝坊し<strong>ないように</strong>早めにおやすみなさい。（防止睡过头，建议你早点睡）</li>
<li>（祈愿）明日の試験、うまくいき<strong>ますように</strong>。（希望明天考试顺利）</li>
</ul>
<p>一般而言，使用「～ますように、～ませんように」这类接续在「ます」之后的用法常见于向神明祈愿，是一种正式的祈愿语法。</p>
</div>
<div class="note info no-icon"><p>「ようだ」的否定式「ようではない」几乎不使用，需要否定时使用「ないようだ」这一形式。</p>
</div>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）明日は雨が降る<strong>ようだ</strong>。（明天看起来要下雨）</li>
<li>（未然形）忘れ物は家にある<strong>ようだろ</strong>う？（你东西大概是忘在家了吧）</li>
<li>（連用形①）迷惑をかけた<strong>ようで</strong>ある。（像是之前给添麻烦了）</li>
<li>（連用形②）あの表情はまるで氷の<strong>ようだっ</strong>た。（那表情就像冰一样）</li>
<li>（連用形③）ピアノを弾ける<strong>ように</strong>頑張ってる。（为了能弹好琴而努力）</li>
<li>（連体形）花の<strong>ような</strong>少年。（像花一样的少年）</li>
<li>（仮定形）返せない<strong>ようなら</strong>ば通報します。（再不还给我就报警了）</li>
</ul>
<div class="note info no-icon"><p>表达比况实际上还有一个类似于助动词的表达「みたいだ」，但是目前的日语语法并不将其认为是一个助动词，而部分对外日语教学中则将其作为一个助动词处理。</p>
<p>「みたいだ」和「ようだ」的用法几乎一致，差别在于：</p>
<ul>
<li>接续上「みたいだ」可以直接接续体言，如「花みたいだ」，另外「みたいだ」一般不接续助动词「ます、ん」和指示词</li>
<li>语义上「みたいだ」不能表示引用、希望、建议、祈愿（即仅能用于推量、比况、列举），并且包含「みたいだ」的句式较少（也就是说没有和「～ようになる」类似的固定句式表达状态变迁）</li>
</ul>
<p>例句如下：</p>
<ul>
<li>（推量）教室に誰かが<strong>いるみたいだ</strong>。（教室里好像有人）</li>
<li>（推量）このコップは<strong>壊れやすいみたいだ</strong>。（这杯子看起来容易坏）</li>
<li>（推量）今寝不足、少し睡眠が<strong>必要みたいだ</strong>。（现在有点没睡饱，好像有必要再睡会）</li>
<li>（推量）あの人は<strong>留学生みたいだ</strong>。（那人看起来像是留学生）</li>
<li>（比况）彼は<strong>飛ぶみたいに</strong>帰った。（他像飞一样回家了）</li>
<li>（比况）彼は<strong>アメリカ人みたいに</strong>英語で話している。（他能像美国人一样说英语）</li>
<li>（列举）<strong>金盗むみたいな</strong>ことをやるな！（别做偷钱这种事！）</li>
<li>（列举）<strong>東京みたいな</strong>都市にはコンビニが多い。（东京这种大城市里便利店很多）</li>
</ul>
<p>另外，口语中直接以「みたいだ」结尾的时候常常直接使用词干：</p>
<ul>
<li>教室に誰かが<strong>いるみたい</strong>。（教室里好像有人）</li>
</ul>
<p>以及，与「ようだ」类似，其否定式「みたいではない」几乎不使用，需要否定时使用「ないみたい」这一形式：</p>
<ul>
<li>あの人は先生では<strong>ないみたい</strong>。（那人看起来不像是老师）</li>
</ul>
</div>
<h1 id="传闻助动词そうだ①">传闻助动词「そうだ①」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">终止形 <br /> <strong>読む</strong>そうだ <br /> <strong>たがる</strong>そうだ</td>
<td style="text-align: center;">终止形 <br /> <strong>起きる</strong>そうだ <br /> <strong>られる</strong>そうだ</td>
<td style="text-align: center;">终止形 <br /> <strong><code>@ 来 く</code>る</strong>そうだ</td>
<td style="text-align: center;">终止形 <br /> <strong>する</strong>そうだ</td>
<td style="text-align: center;">终止形 <br /> <strong>高い</strong>そうだ <br /> <strong>ない</strong>そうだ</td>
<td style="text-align: center;">终止形 <br /> <strong>好きだ</strong>そうだ <br /> <strong>ようだ</strong>そうだ</td>
<td style="text-align: center;">（助动词） <br /> <strong>花</strong><em>だ</em>そうだ <br /> <strong>これ</strong><em>だ</em>そうだ</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">终止形 <br /> <strong>た</strong>そうだ</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>该助动词的最主要语义为表达传闻，即直接转述说话人的所见所闻。</p>
<ul>
<li>明日は先生が<strong>来るそうだ</strong>。（听说明天老师要来）</li>
<li>高齢者は操作ミスで事故が<strong>多いそうだ</strong>。（听说高龄工人因为操作失误出的事故很多）</li>
<li>先生は最近<strong>元気だそうだ</strong>。（听说老师最近身体健康）</li>
<li>あの子はもう<strong>十歳だそうだ</strong>。（听说那孩子已经十岁了）</li>
</ul>
<p>一定要注意的是「そうだ①」本身没有否定和过去式，必须要通过前面接续的词语去表达否定和过去：</p>
<ul>
<li>明日は先生が来<strong>ないそうだ</strong>。（听说明天老师不来）</li>
<li>先生もこの小説を読ん<strong>だそうだ</strong>。（听说老师也读过这本小说）</li>
</ul>
<div class="note info no-icon"><p>相较于「そうだ②」常常用词干结句表示感叹等语义，「そうだ①」的词干理论上很少直接结句。但是近期类似于下述的表达逐渐被大众接受了：</p>
<ul>
<li>ね、明日は<strong>雨だそう</strong>よ。（诶，明天说要下雨啊）</li>
</ul>
</div>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）昨日来たのは木下さんではなかった<strong>そうだ</strong>。（听说昨天来的不是木下）</li>
<li>（連用形）教授はおいでになる<strong>そうで</strong>ある。（听说教授要来）</li>
</ul>
<p>这里假定形由于使用频率极低所以不举出例句。</p>
<h1 id="样态助动词そうだ②">样态助动词「そうだ②」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">第一连用形 <br /> <strong>読み</strong>そうだ <br /> <strong>たがり</strong>そうだ</td>
<td style="text-align: center;">连用形 <br /> <strong>起き</strong>そうだ <br /> <strong>られ</strong>そうだ</td>
<td style="text-align: center;">连用形 <br /> <strong><code>@ 来 き</code></strong>そうだ</td>
<td style="text-align: center;">连用形 <br /> <strong>し</strong>そうだ</td>
<td style="text-align: center;">词干 <br /> <strong>高</strong>そうだ <br /> <strong>な</strong>そうだ</td>
<td style="text-align: center;">词干 <br /> <strong>好き</strong>そうだ <br /> <strong>よう</strong>そうだ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>该接续的例外包括：</p>
<ul>
<li>单音节形容词「ない、よい、いい」接续「そうだ②」形成「な<strong>さ</strong>そうだ、よ<strong>さ</strong>そうだ、よ<strong>さ</strong>そうだ」而非「なそうだ、よそうだ、いそうだ」</li>
</ul>
<div class="note info no-icon"><p>关于上述接续中冗余的「さ」的问题，见上一章复合词语部分的讨论。</p>
</div>
<p>该助动词的主要含义为表达样态，即表达事物应当具有的性质：</p>
<ul>
<li>天気が寒くてもう<strong>凍えそうだ</strong>。（天冷的都像冻起来了）</li>
<li>あの荷物は<strong>重そうだ</strong>。（那件行李看起来就很重）</li>
<li>あいつは日本語が<strong>上手そうだ</strong>。（他日语像是很好）</li>
<li>子どもたちは遊園地へ行き<strong>たそうだ</strong>。（孩子们看起来很想去游乐园）</li>
<li>あいつは日本人では<strong>なさそうだ</strong>。（那人不像是日本人）</li>
</ul>
<p>「そうだ②」的否定较为复杂，先不论到底是否定「そうだ②」本身还是其前面接续的词语，就连否定「そうだ②」本身的时候使用哪一个连用形也是有区别的。这里首先给出本文接纳的否定规则：</p>
<ul>
<li>动词接续「そうだ②」的否定应当否定「そうだ②」本身并且使用第三连用形，即形成「～そうにない」的形式，此外添加副助词的「～そうにはない、～そうにもない」也是可以接受的
<ul>
<li>部分情况下使用词干和副助词形成「～そうもない」也是可以接受的</li>
</ul></li>
<li>形容词和形容动词接续「そうだ②」的否定应当否定形容词或形容动词，形成「～なさそうだ」
<ul>
<li>理论上此时也可以否定「そうだ②」本身并且使用第一连用形，但是含义并不一样并且接受程度不高</li>
</ul></li>
</ul>
<p>例句如下：</p>
<ul>
<li>空は晴れて、雨が<strong>降りそうにもない</strong>。（天空放晴了，不像要下雨）</li>
<li>この料理は<strong>おいしくなさそうだ</strong>。（这菜看起来不好吃）</li>
<li>どうした？<strong>元気ではなさそうだ</strong>。（怎么了？看起来身体不好的样子）</li>
</ul>
<p>形容词和形容动词接续的语义对比如下：</p>
<ul>
<li>この料理はおいしく<strong>なさそうだ</strong>。（这菜看起来不好吃）</li>
<li>この料理はおいし<strong>そうではない</strong>。（这菜不是看起来好吃的样子）</li>
<li>あの家族は幸せでは<strong>なさそうだ</strong>。（那家人看起来不幸福）</li>
<li>あの家族は幸せ<strong>そうではない</strong>。（那家人不是看起来幸福的样子）</li>
</ul>
<p>总而言之，否定的位置不同确实能够带来些许的语义差别，但是整体差别不大。</p>
<p>就实际语用而言，有两点需要注意：</p>
<ul>
<li>无论何种否定，看起来和形容动词保持一致的「そうではない」的接受程度极低，达不到 20%</li>
<li>年轻人群体中逐渐出现动词接续「そうだ②」时也用「なさそうだ」表达否定的倾向
<ul>
<li>比如年轻人很有可能说出「空は晴れて、雨が降らなさそうだ」</li>
</ul></li>
</ul>
<p>该助动词的各类活用形式的例句如下：</p>
<ul>
<li>（終止形）今日は雨になり<strong>そうだ</strong>。（今天看起来要下雨）</li>
<li>（未然形）彼ならこの問題を解け<strong>そうだろ</strong>う？（要是他就应该能解决问题了）</li>
<li>（連用形①）このままなら迷惑になり<strong>そうで</strong>ある。（再这样下去恐怕就麻烦了）</li>
<li>（連用形②）今にも雪になり<strong>そうだっ</strong>た。（好像随时都会下雪）</li>
<li>（連用形③）水溜りが氷となって、転び<strong>そうに</strong>なった。（积水结冰了，走路容易滑到了）</li>
<li>（連体形）雨になり<strong>そうな</strong>ときには、傘を差してはいい。（要下雨的时候，打把伞比较好）</li>
<li>（仮定形）雨になり<strong>そうなら</strong>、傘を差しなさい。（要是要下雨，就打把伞吧）</li>
</ul>
<div class="note info no-icon"><p>可以注意到「らしい、ようだ、そうだ①、そうだ②、みたいだ」有很多重合的语义，下面简单介绍这几个助动词之间的细微语感差别。</p>
<p>具体而言，「そうだ①」是最特殊的，其无法表示说话人的判断，其仅仅说明说话人正在转述无论是媒体报道或者是他人判断中的信息。另外，「みたいだ」和「ようだ」几乎含义一致。</p>
<p>所以只需要区分「らしい、ようだ、そうだ②」即可。简单而言：</p>
<ul>
<li>「らしい」表示判断的时候，信息来源往往是<strong>间接的</strong>，如之前读过的书或者别人曾说过的话，可信度较低，主观成分低</li>
<li>「ようだ」表示判断的时候，信息来源往往是<strong>带有主观的间接信息源</strong>或<strong>直接的</strong>，如自己经历过的事情形成的经验，可信度稍高，主观成分较多</li>
<li>「そうだ②」表示判断的时候，信息来源往往是<strong>直接的</strong>，如目前正在发生的事情或目前的状态，可信度较高，主观成分高。此外，强调当下即将发生，不能用于判断过去的事情，不能用于判断自己目前所在地方之外的事物</li>
</ul>
<p>如果现在说话人都判断即将下雨，那么可能的情景如下：</p>
<ul>
<li>判断来源于今早的天气预报或者听别人说了要下雨，多用「らしい」</li>
<li>判断来源于刚刚看了一眼天气预报，多用「ようだ」</li>
<li>判断来源于现在天色转暗且开始打雷，多用「そうだ②」</li>
</ul>
<p>如果现在说话人判断昨晚下过雨，首先不能使用「そうだ②」，可能的情景如下：</p>
<ul>
<li>判断来源于别人的判断，多用「らしい」</li>
<li>判断来源于看到了地上的积水，多用「ようだ」</li>
</ul>
<p>如果现在说话人判断东京要下雨（说话人不在东京），首先不能使用「そうだ②」，并且「ようだ」也很少使用，此时几乎仅能依靠间接信息源给出判定，所以基本只能使用「らしい」。</p>
<p>当然，上述状况无论如何都可以通过传闻的方式获取信息而不涉及到任何主观判断，无论如何都可以使用「そうだ①」。</p>
</div>
<h1 id="古语残留助动词べし">古语残留助动词「べし」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">终止形 <br /> <strong>読む</strong>べし <br /> <strong>たがる</strong>べし</td>
<td style="text-align: center;">终止形 <br /> <strong>起きる</strong>べし <br /> <strong>られる</strong>べし</td>
<td style="text-align: center;">终止形 <br /> <strong><code>@ 来 く</code>る</strong>べし</td>
<td style="text-align: center;">终止形 <br /> <strong>する</strong>べし <br /> <strong>す</strong>べし</td>
<td style="text-align: center;">（辅助动词） <br /> <strong>高く</strong><em>ある</em>べし <br /> <strong>なく</strong><em>ある</em>べし</td>
<td style="text-align: center;">（辅助动词） <br /> <strong>好きで</strong><em>ある</em>べし <br /> <strong>ようで</strong><em>ある</em>べし</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>需要注意的是，该助动词是中古日语残留的助动词，在现代日语中严格来说已经丧失原形，仅能使用「べき」这一原先的连体形。</p>
<p>该助动词用于表达“应当”的判断或建议语气，表达效果类似于「～ほうがいい、～ないほうがいい」。不过该助动词语气较为生硬，尽量不在正式用语场合之外使用。由于这种使用场景的约束，其经常与「です」连用（也可以在口语中与「だ」连用）：</p>
<ul>
<li>お客様に敬語を<strong>使うべき</strong>です。（对客人应该使用敬语）</li>
<li>取扱説明書は<strong>簡単であるべき</strong>です。（使用说明书应该简单易懂）</li>
</ul>
<p>该助动词的否定仅可以使用「べきではない、べきではありません」而不能使用「ないべき」：</p>
<ul>
<li>電車の中で大声で<strong>話すべきではありません</strong>。（电车中不应大声交谈）</li>
</ul>
<p>该助动词和仅有连体形与古语保持一致，即可以使用「べき」直接修饰体言：</p>
<ul>
<li><strong>注意すべき</strong>点はひとつあります。（需要注意的地方有一个）</li>
</ul>
<p>此外，在接续「のに、ので」等助词的时候，应当使用「べきな」的形式：</p>
<ul>
<li>お前がやる<strong>べきなのに</strong>、全部わたしがやったんだ。（本来该你做的活全给我做了）</li>
</ul>
<p>除了上述的使用方法外，该助动词不应当以其他方式使用，除非熟语或其余古语残留情况。目前常见的古语残余包括表示“不应当”的「べからず」以及表示“尽可能”的「なるべく」。此外，在类似下述对仗句中，有可能出现古语终止形：</p>
<ul>
<li>食欲の秋、恐る<strong>べし</strong>。（食欲之秋，令人畏惧）</li>
</ul>
<h1 id="古语残留助动词まい">古语残留助动词「まい」</h1>
<p>该助动词的接续表为：</p>
<table style="width:100%;">
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">五段动词</th>
<th style="text-align: center;">一段动词</th>
<th style="text-align: center;">カ变动词</th>
<th style="text-align: center;">サ变动词</th>
<th style="text-align: center;">形容词</th>
<th style="text-align: center;">形容动词</th>
<th style="text-align: center;">体言</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">终止形 <br /> <strong>読む</strong>まい <br /> <strong>たがる</strong>まい</td>
<td style="text-align: center;">终止形 <br /> <strong>起きる</strong>まい <br /> <strong>られる</strong>まい <br /> 未然形 <br /> <strong>起き</strong>まい <br /> <strong>られ</strong>まい</td>
<td style="text-align: center;">终止形 <br /> <strong><code>@ 来 く</code>る</strong>まい <br /> <strong><code>@ 来 く</code></strong>まい <br /> 未然形 <br /> <strong><code>@ 来 こ</code></strong>まい</td>
<td style="text-align: center;">终止形 <br /> <strong>する</strong>まい <br /> <strong>す</strong>まい <br /> 未然形 <br /> <strong>し</strong>まい <br /> <strong>せ</strong>まい</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">です</th>
<th style="text-align: center;">ます</th>
<th style="text-align: center;">た</th>
<th style="text-align: center;">そうだ①</th>
<th style="text-align: center;">まい</th>
<th style="text-align: center;">う</th>
<th style="text-align: center;">ず・ぬ・ん</th>
<th style="text-align: center;">べし</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">―</td>
<td style="text-align: center;">终止形 <br /> <strong>ます</strong>まい</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>该助动词用于表达否定的推量或意志语气，表达效果类似于「～ないだろう、～ないつもりだ」：</p>
<ul>
<li>いや、そんなことは<strong>あるまい</strong>。（不，那种事不会有的）</li>
</ul>
<p>目前这一助动词正在逐步消退，被等价表达替换，目前该助动词也仅仅常用于部分固定句式。</p>
<h1 id="日语的语体">日语的语体</h1>
<p>日语有两种常用语体，即<strong>ですます体</strong>与<strong>简体</strong>（或称<strong>だ体</strong>）。</p>
<p>ですます体已经在讲解助动词「です」和「ます」的部分提到过，是一种面向陌生人、上级等有一定距离的对象的语体，而简体则是面向自己、亲友等关系紧密的对象，或者自己所不尊敬、蔑视的对象的语体。</p>
<p>事实上日语中还存在<strong>である体</strong>，其基本上仅用于严谨的书面文章中。「である」的语源为判断助动词「だ」的第一连用形接续动词「ある」，其完全继承了动词「ある」的活用方式。另外，「である」在表达尊敬含义的时候也可以使用「であります」。である体的另外一种称谓是<strong>书面简体</strong>，而在这种语境下，一般的简体就称为<strong>口语简体</strong>，代表である体是用于严谨书面行文而一般的简体用于正常口语交流。</p>
<p>在ですます体中，「です」和「ます」的区分在于「ます」仅用于动词或者类动词助动词，而其余词语为了表达一般尊敬均可以直接使用「です」。当然，在由于「です」和「ます」缺乏对应的活用形式的时候，则也需要借用其他语体的表达。另外，由于ですます体实际上仅仅是一般尊敬，在公文、商务邮件、与地位相对高的对象交谈等场合中所使用的，更为完整的敬语体系则在后续部分介绍。</p>
<p>下面我们列举三种语体在各种表现要求下的具体词组构成，首先是动词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">ですます体</th>
<th style="text-align: center;">简体</th>
<th style="text-align: center;">である体</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">动词陈述</td>
<td style="text-align: center;">読みます</td>
<td style="text-align: center;">読む</td>
<td style="text-align: center;">読む</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词中顿</td>
<td style="text-align: center;">読みまして</td>
<td style="text-align: center;">読んで</td>
<td style="text-align: center;">読み</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词连体</td>
<td style="text-align: center;">読むこと</td>
<td style="text-align: center;">読むこと</td>
<td style="text-align: center;">読むこと</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词否定</td>
<td style="text-align: center;">読みません <br /> （読まないです）</td>
<td style="text-align: center;">読まない</td>
<td style="text-align: center;">読まない</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词否定中顿①</td>
<td style="text-align: center;">読まないで</td>
<td style="text-align: center;">読まないで</td>
<td style="text-align: center;">読まずに <br /> （読まないで）</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词否定中顿②</td>
<td style="text-align: center;">読まなくて</td>
<td style="text-align: center;">読まなくて</td>
<td style="text-align: center;">読まず <br /> 読まなく</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词假定①</td>
<td style="text-align: center;">読めば <br /> （読みますれば）</td>
<td style="text-align: center;">読めば</td>
<td style="text-align: center;">読めば</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词假定②</td>
<td style="text-align: center;">読みましたら</td>
<td style="text-align: center;">読んだら</td>
<td style="text-align: center;">読んだら</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词过去</td>
<td style="text-align: center;">読みました</td>
<td style="text-align: center;">読んだ</td>
<td style="text-align: center;">読んだ</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词过去否定</td>
<td style="text-align: center;">読みませんでした <br /> （読まなかったです）</td>
<td style="text-align: center;">読まなかった</td>
<td style="text-align: center;">読まなかった</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词意志</td>
<td style="text-align: center;">読みましょう</td>
<td style="text-align: center;">読もう</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">动词推测</td>
<td style="text-align: center;">読むでしょう</td>
<td style="text-align: center;">読むだろう</td>
<td style="text-align: center;">読むだろう</td>
</tr>
<tr class="odd">
<td style="text-align: center;">动词命令</td>
<td style="text-align: center;">（読みましょう）</td>
<td style="text-align: center;">読め</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>之后是形容词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">ですます体</th>
<th style="text-align: center;">简体</th>
<th style="text-align: center;">である体</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形容词陈述</td>
<td style="text-align: center;">高いです</td>
<td style="text-align: center;">高い <br /> （高いだ）</td>
<td style="text-align: center;">高い <br /> （高いだ）</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词中顿</td>
<td style="text-align: center;">高くて</td>
<td style="text-align: center;">高くて</td>
<td style="text-align: center;">高く</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容词连体</td>
<td style="text-align: center;">高いこと</td>
<td style="text-align: center;">高いこと</td>
<td style="text-align: center;">高いこと</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词否定</td>
<td style="text-align: center;">高くありません <br /> （高くないです）</td>
<td style="text-align: center;">高くない</td>
<td style="text-align: center;">高くない</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容词否定中顿</td>
<td style="text-align: center;">高くなくて</td>
<td style="text-align: center;">高くなくて</td>
<td style="text-align: center;">高くなく</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词假定①</td>
<td style="text-align: center;">高ければ</td>
<td style="text-align: center;">高ければ</td>
<td style="text-align: center;">高ければ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容词假定②</td>
<td style="text-align: center;">高かったら <br /> （高いようでしたら）</td>
<td style="text-align: center;">高かったら</td>
<td style="text-align: center;">高かったら</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词过去</td>
<td style="text-align: center;">高かったです</td>
<td style="text-align: center;">高かった</td>
<td style="text-align: center;">高かった</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容词过去否定</td>
<td style="text-align: center;">高くありませんでした <br /> （高くなかったです）</td>
<td style="text-align: center;">高くなかった</td>
<td style="text-align: center;">高くなかった</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容词推测、征询</td>
<td style="text-align: center;">高いでしょう</td>
<td style="text-align: center;">高いだろう</td>
<td style="text-align: center;">高いであろう</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容词命令</td>
<td style="text-align: center;">（高くしましょう）</td>
<td style="text-align: center;">高くしろ・高くせよ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>最后是形容动词：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">ですます体</th>
<th style="text-align: center;">简体</th>
<th style="text-align: center;">である体</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">形容动词陈述</td>
<td style="text-align: center;">静かです</td>
<td style="text-align: center;">静かだ</td>
<td style="text-align: center;">静かだ</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词中顿</td>
<td style="text-align: center;">静かで</td>
<td style="text-align: center;">静かで</td>
<td style="text-align: center;">静かで</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词连体</td>
<td style="text-align: center;">静かなこと</td>
<td style="text-align: center;">静かなこと</td>
<td style="text-align: center;">静かなこと</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词否定</td>
<td style="text-align: center;">静かではありません <br /> （静かではないです）</td>
<td style="text-align: center;">静かではない</td>
<td style="text-align: center;">静かではない</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词否定中顿</td>
<td style="text-align: center;">静かではなくて</td>
<td style="text-align: center;">静かではなくて</td>
<td style="text-align: center;">静かではなく</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词假定①</td>
<td style="text-align: center;">静かならば</td>
<td style="text-align: center;">静かならば</td>
<td style="text-align: center;">静かならば</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词假定②</td>
<td style="text-align: center;">静かだったら</td>
<td style="text-align: center;">静かだったら</td>
<td style="text-align: center;">静かだったら</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词过去</td>
<td style="text-align: center;">静かでした <br /> （静かだったです）</td>
<td style="text-align: center;">静かだった</td>
<td style="text-align: center;">静かだった</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词过去否定</td>
<td style="text-align: center;">静かではありませんでした <br /> （静かではなかったです）</td>
<td style="text-align: center;">静かではなかった</td>
<td style="text-align: center;">静かではなかった</td>
</tr>
<tr class="even">
<td style="text-align: center;">形容动词推测、征询</td>
<td style="text-align: center;">静かでしょう</td>
<td style="text-align: center;">静かだろう</td>
<td style="text-align: center;">静かであろう</td>
</tr>
<tr class="odd">
<td style="text-align: center;">形容动词命令</td>
<td style="text-align: center;">（静かにしましょう）</td>
<td style="text-align: center;">静かにしろ・静かにせよ</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<div class="note info no-icon"><p>这里最有趣的实际上是ですます体下过去式的一个特例：</p>
<ul>
<li>（动词）ご飯を食べます。</li>
<li>（形容词）ここは高いです。</li>
<li>（形容动词）ここは綺麗です。</li>
<li>（名词）ここは公園です。</li>
</ul>
<p>上述句子变为过去式时，基本都在助动词上表过去，然而只有形容词是特例：</p>
<ul>
<li>（○）ご飯を食べ<strong>ました</strong>。</li>
<li>（×）ここは高い<strong>でした</strong>。</li>
<li>（○）ここは綺麗<strong>でした</strong>。</li>
<li>（○）ここは公園<strong>でした</strong>。</li>
</ul>
<p>这是因为形容词后面接续「です」事实上是近代才作为简易敬语而扶正的语法，一定程度上接受程度并不高。所以形容词的ですます体中几乎不会出现对「です」直接作变形的情况，要么是对形容词本身变形，要么是换成「○○くあります」之后在「あります」上变形。</p>
<p>然而由于日语初学者（比如刚到日本的游客、留学生）很容易说出「○○いでした、○○いではありません」之类的错误表达（本文作者自己也不少次因惯性脱口而出这些表达），实质上促进了这类错误表达逐步被大众接受的过程。不过就目前而言，这类用法依然在教育、官方层面明确归类为错误用法。</p>
</div>
<p>观察可以发现：</p>
<ul>
<li>である体和简体几乎没有很大差别，差别几乎仅仅在三处
<ul>
<li>である体倾向于在中顿时不使用接续助词「て」</li>
<li>である体倾向于使用古语否定助动词「ず」</li>
<li>である体不具有命令和意志的概念</li>
</ul></li>
<li>ですます体很多时候需要借用简体的表达方式，其原因在于「です」和「ます」的退化
<ul>
<li>（连体形退化）「です」和「ます」的连体形仅能用于接续助词，不能接续一般体言。这种退化甚至会影响后续接续的助动词，如「でした、ました」事实上也不能用于修饰一般体言
<ul>
<li>然而语言这玩意有趣就有趣在万事万物皆有例外，本文作者在毕业旅行时，于神户看见了这样一句话：「萌黄の館は、門を出て右手に<strong>見えます薄緑色の建物</strong>です」。这里显然「見えます」是作为连体修饰语的，修饰一般体言「建物」。然而除此例之外，本文作者再也没有见过「ます」连体形修饰一般体言的例子了</li>
</ul></li>
<li>（假定形退化）「ます」的假定形逐步被废弃</li>
<li>（古语否定形式局限）「ます」否定式为「ません」，其后续继续接续词语的时候受限于活用已经严重退化的古语否定助动词「ん」从而往往无法形成合法表达</li>
<li>（连用形退化）「です」的连用形接续接续助词「て」形成的「でして」虽然语法正确但是作者并未在实际语用中见过该表达（更多时候使用「～なので」等表达方式代替）
<ul>
<li>同样，本文作者最终在一些日剧中见到了一些「でして」连用的语例，然而依然极为少见，甚至在部分日语论坛中也出现过「でして」是否是合法表达的讨论</li>
</ul></li>
<li>（假定形缺失）「です」没有假定形，无法接续接续助词「ば」</li>
</ul></li>
</ul>
<p>前面提到的「です」活用形的退化事实上会在描述体言的时候让ですます体大量借用である体的表达。下表为描述体言的时候，三种语体相对应的若干词组：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">ですます体</th>
<th style="text-align: center;">简体</th>
<th style="text-align: center;">である体</th>
<th style="text-align: center;">（であります体）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">陈述</td>
<td style="text-align: center;">花です</td>
<td style="text-align: center;">花だ</td>
<td style="text-align: center;">花である</td>
<td style="text-align: center;">花であります</td>
</tr>
<tr class="even">
<td style="text-align: center;">否定</td>
<td style="text-align: center;">花ではありません</td>
<td style="text-align: center;">花ではない</td>
<td style="text-align: center;">花ではない</td>
<td style="text-align: center;">花ではありません</td>
</tr>
<tr class="odd">
<td style="text-align: center;">过去</td>
<td style="text-align: center;">花でした</td>
<td style="text-align: center;">花だった</td>
<td style="text-align: center;">花であった</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">过去否定</td>
<td style="text-align: center;">花ではありませんでした</td>
<td style="text-align: center;">花ではなかった</td>
<td style="text-align: center;">花ではなかった</td>
<td style="text-align: center;">花ではありませんでした</td>
</tr>
<tr class="odd">
<td style="text-align: center;">推测</td>
<td style="text-align: center;">花でしょう</td>
<td style="text-align: center;">花だろう</td>
<td style="text-align: center;">花であろう</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">中顿</td>
<td style="text-align: center;">花であって <br /> （花であり）</td>
<td style="text-align: center;">花で</td>
<td style="text-align: center;">花であり <br /> （花であって）</td>
<td style="text-align: center;">花でありまして</td>
</tr>
<tr class="odd">
<td style="text-align: center;">否定中顿</td>
<td style="text-align: center;">花ではなくて</td>
<td style="text-align: center;">花ではなくて</td>
<td style="text-align: center;">花ではなく</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">连体</td>
<td style="text-align: center;">花であること</td>
<td style="text-align: center;">花であること <br /> （花なこと）</td>
<td style="text-align: center;">花であること</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="odd">
<td style="text-align: center;">假定①</td>
<td style="text-align: center;">花であれば</td>
<td style="text-align: center;">花ならば</td>
<td style="text-align: center;">花であれば</td>
<td style="text-align: center;">―</td>
</tr>
<tr class="even">
<td style="text-align: center;">假定②</td>
<td style="text-align: center;">花でしたら</td>
<td style="text-align: center;">花だったら</td>
<td style="text-align: center;">花であったら</td>
<td style="text-align: center;">―</td>
</tr>
</tbody>
</table>
<p>语体需要注意的是，同一句话之中语体需要统一，不能混用语体，同一篇文章原则上也应当仅使用一种语体。</p>
<p>最后我们需要说明的一点是，「である」现今已经越来越近似于「です」在部分情况下的替代品。其一，「である」内部可以插入副助词形成「で<strong>も</strong>ある、で<strong>しか</strong>ない」之类的表达。其二，在「です」缺乏合适的活用的时候的形成类似「であり<strong>たい</strong>、である<strong>べき</strong>」之类的表达。</p>
<h1 id="练习参考答案">练习参考答案</h1>
<p>本章节没有练习问题。</p>
<div class="note info no-icon"><p>从这一章开始，应该再也没有练习问题了，因为作者出不出来好题目了。</p>
<p>事实上之前的日语汉字、用言活用等等都能出题，是因为这是有相当严格语法规定的和词典支持的，而从助动词开始，到后面的助词、虚词、句式，就开始走到没有严格语法约束的语用过程中了。</p>
<p>就比如说我这一章最多让大家练习一下某个助动词前面动词应该是未然形还是连用形，而涉及到比如说样态描述或者说「れる・られる」四种语义的区别，乃至更为深刻的一些语言内核，作者自己都不会怎么出题。</p>
<p>所以大家多看日语文本，多和日本人交流可能才是学日语的最终路径，这里写的这些语法，只是大家约定俗成的一种最基本最基本的规定，至于怎么去说出一句话，还得靠自己习得。</p>
</div>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>又一年五月</title>
    <url>/2022/05/08/lab-quit/</url>
    <content><![CDATA[<p>是不是每年的五月都会有些不太顺遂的事情发生。</p>
<span id="more"></span>
<p>昨晚通宵写了一些密码学的作业，然后就睡昏过去，一路睡到了下午四点，醒来之后导师发了微信消息说想聊聊。</p>
<p>虽然有一点不太妙的预感，但在做完核酸之后还是接了导师的电话，导师自然还是弯弯绕绕地回忆了一下我在实验室的几个月，然后也就直白地说出了“我觉得你还是不太适合我们实验室”。</p>
<p>其实还是有所预料的，毕竟自己因为期中课内一堆事情咕咕咕了科协咕咕咕了实验室工作，而这个项目五月底是要投的，所以交给我的任务也是无限期拖延，即使只是一个 Toy example。然后半路有一位茶园的同年级同学也加入了这个项目，虽然没和他直接交流，但是可以看出他一个星期内将项目推进了很多。</p>
<p>所以导师不把名额给我其实也是很正常的一件事情。</p>
<p>但毕竟现在是大三下学期，都快进入正常的推免流程了，这个时候作出这样的定论，毕竟还是杀了我一个措手不及。</p>
<p>一看时间，又是五月初。去年五月初的狼狈已经不堪回首，前年五月的混沌早已淡出了记忆，今年的五月又是这样的变故。再这样下去，怕不是每年五月，即使我相当喜欢初夏，我也得下意识地恐惧这段时光。</p>
<hr />
<p>其实我一直是选择困难症的，选专业、选导师啥的。选图形学也是因为安老板推荐，加上 GAMES101 看着还不错，也就直接这么选了。但面临这样的境遇，也只能再去审视自己到底想去学什么。</p>
<p>最后经过和若干位学长和同学交流了一番，我给季铮锋老师发出了邮件，想着去做量子计算之类的方向。</p>
<hr />
<p>其实打心底而言，我一直没有动现在实验室的项目也是有一定原因的。我想的是来实验室做一些渲染工作，然而我打开项目工程代码，我看到的是 Pytorch。虽然这也并不奇怪，毕竟有名言“Neural network rapes everything”。</p>
<p>但我在想，导师把我安排来这个项目也是有原因的，毕竟我的简历上写着刘知远实验室的经历。但他可能并不了解的是，我从那里退出并不是因为我抢不到他的名额，而是我不想做人工智能。</p>
<p>所以在面对项目代码的时候，我还是有点不大愿意动手。</p>
<hr />
<p>选量子，我也不是那么清楚为什么，可能是因为没人去做量子，所以名额比较充裕，也有可能是一种病急乱投医。</p>
<p>时而会感叹自己，从人工智能到图形学再到量子，完全是从热门到冷门，从就业面宽到没有就业面。</p>
<hr />
<p>我到底想做什么，其实要我说，我也说不明白，我能明确说明的，只有我绝对不想做什么。我厌恶人工智能，厌恶计算机网络，高性能和计算机系统也不太想触碰（不是反感，而是自己太菜了）。</p>
<p>如果需要给出一点模糊的答案，那可能是做开发，软件开发。我严重怀疑我自己的代码强迫症，看到什么都想重构，喜欢写那些别人看来是炫技的代码。</p>
<p>但是软件开发又何必读博士呢。</p>
<p>我也不太清楚我为何想继续读书，可能只是不想那么早就去接触职场。但毕竟这是逃避。</p>
<hr />
<p>谁知道呢，更何况我们的 Prof. Ji 也可以拒绝我，那我只能拿着 GPA 到时候随机挑导师了。</p>
<p>出国没考 GRE，就业没实习，推免还被导师因为摸鱼拒绝了。</p>
<hr />
<p>但其实我现在也说不上难过，说不上有什么负面情绪，我大概看了几篇量子方向的论文，重新拿起 Artin，似乎又对可能的研究方向起了兴趣。</p>
<p>然而我自己也是清楚的，我之前对图形学也有着这样的幻想，直到我打开了项目代码。</p>
<p>Holder 真没有什么持久的爱好，慨叹。于是又要担心这种三分钟的热度何时会被消磨殆尽。</p>
<hr />
<p>哎，为了学位读书好烦啊，我好想就顺着自己的爱好随便乱学东西，今天学日语明天看几何大后天说不定在敲 Haskell。</p>
<p>然而不为了学位读书没饭吃，没饭吃就没我这个人了。</p>
<hr />
<p>其实也算不上什么挫折，但是 Holder 莫名其妙想了好多。有那种积沙成塔但是倾覆于一旦的感觉，就是这种一点点的失落感。</p>
<p>Whatever，明天照样起床，去做核酸，写密码学作业，等 Prof. Ji 的回信。</p>
<p>其实现在内心还有一点点，说不定又可以名正言顺学 Artin 的兴奋。</p>
<p>晚安哦。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年 11 月 17 日凌晨的一些</title>
    <url>/2022/11/17/look-back/</url>
    <content><![CDATA[<p>先前因为一次偶然的通宵导致作息又紊乱了起来，周三不得不去射击课导致当晚没睡满五小时，只能下午补了五小时觉，结果就是今天的凌晨五六点，Holder 还坐在 308 不知道干啥。</p>
<span id="more"></span>
<p>本来来 308 是打算边调之前炸炉子的丹，边写软工改进方案的，毕竟李山山老师都杀到跟前，这周日还不得不和他见一面，不能真的啥都写就去见他吧。</p>
<p>然而也是偶然，闲的无聊在 QQ 空间转发了一个“你最早注意到我是什么时候”这样的说说，底下一小部分都是 22 届学弟学妹回的一些类似“高中榜样”之类的。然而这也正常，高中，三年一轮，19 年目送我毕业的老师们，紧接着就会带 22 届的高一新生。如今 22 届的小朋友们也已经高中毕业，开始在网络上活跃起来。</p>
<p>但是想到我为何有这么多 22 届学弟学妹的好友，其实还得说 19 年年底，大一刚过一学期的寒假回高中做的一次所谓宣讲。其实大家那个时候都明白，老师只不过是将行政楼五楼空出来，让我们这些才上大学的学长学姐随便讲点东西，给那些才上高中的学弟学妹们开开眼界、放放松而已。真要说“宣讲”了什么政策还是什么有价值的论点，大概是一点没有的。以那次宣讲为契机，和很多 22 届学弟学妹成了 QQ 好友，不过真要说有什么交流，我觉得是没有多少的。</p>
<p>然而这种玩笑一般的宣讲，自从 20 年新冠袭来后，也就变的索然无味，加上各个大学也给大一新生附加上了一些宣讲的要求，这种宣讲多半是变了些味道。</p>
<p>所以我在愣神，我想不出来为什么我对高中有着这么奇妙的情感。我回想着我大学以来的屡次长假，寒暑假、五一、十一，除了过年、找 Sakana，多半可能还是和高中纠缠，甚至还回去带过一次胡闹的暑期学校。按照道理讲，高中那种非人类的作息安排，非人类的约束，似乎完全不可能构成所谓的美好回忆。</p>
<p>之前我似乎也和别人提过，要让我重来一遍高中，我万分乐意，重来一遍本科，我大抵抗拒。</p>
<p>我不可否认的是，我为我在我高中所取得的成绩万分自负，我依然可以大方地夸耀我在高中时期的成绩，在那些高中生的眼中，这大抵是近乎顶峰的存在。我不可否认，我回到高中，多半是带着夸耀自己，衣锦还乡的意味。</p>
<p>然而为我披上锦衣的你清，那万众所向的所谓学府，为何我又不想再来一回。</p>
<p>我记忆中我的大学，只有两年万分黑暗的时光和一年并不那么黑暗但也并不光明的时光。大一大二闷头卷绩点，我现在也难以想象我大一的下学期和大二的上学期是怎么做到在那么多课程中还能苟延残喘，甚至在大一下学期疫情在家的时候，还能给政治课记下详细的笔记，还能分出精力学那么多课外的东西。</p>
<p>或许是疫情，我的大学似乎并没有给我留下任何一个闪光的回忆，我永远想不到一个能让我在深夜的时候把玩的一个瞬间。我的大学能让我感慨的，只不过是为了继续留在你清拼尽全力，平凡地完成一个个任务而已。我翻阅了我大学期间的 QQ 空间，除了时不时抱怨累了，发一些装逼说说，或者是一些打牌、唱歌、打游戏的东西外，似乎也没有什么很有意义的。我也翻阅了我的相册，除了 2021 年那个惊心动魄的夏季外，也只是绵延不断的打牌、唱歌、打游戏和涩图。</p>
<p>然而似乎高中给我留下的还是很多的。我对高中最早的记忆，是 2016 年参加实验班选拔，离我家最近的北门因为修路走不了，我顶着大太阳绕远路赶到班上，破旧的空调降不下教室的气温，室内一直都是干热炙烤出来的气味。那天天非常蓝，即使那时候的新闻天天在批判环保问题。</p>
<p>还有什么，高一的每一个周末和一群人讨论数学竞赛然后再去北门口喝奶茶，寒假去苏州时用恶作剧戏弄同学，快要小高考时的大雪，2018 年的传奇夏季，临近高考的时候经常一个人蜷缩的楼梯角落。</p>
<p>其实，我时常想着，高中最主要的还是纯粹，舞台不过那么一亩三分地，每天的内容不过枯燥无味的反复，这其中的闪光似乎显得弥足珍贵。</p>
<p>但说实话，最近还是经常感到一种剥离感的。我时常疑惑着这样的生活真的值得我用三年高中换来吗。我总是感觉现在的每一步行动，每一步决策似乎都有着目标，都伴随着责任，我举步维艰。我担心着是否应当做出这样的决定。</p>
<p>最近几位朋友筹划着给我们的一位朋友庆生，然而就在筹办的时候，我又一次感受到了极度的不真实，我真心地为这位同学的生日感到快乐吗？还是包含着我怎么没有这样一群朋友为我这样庆祝生日的嫉妒？</p>
<p>我又一次回忆起那天晚上在 C 楼和众多计算机的零字班一字班朋友们闲聊，某人不经意飘了一句“这不是 Holder 在前面探路么”。具体的语气、语境、上下文早就忘却了，但这个“探路者”的评价我倒是记住了。当时我一下子卡住，我总感觉这句话让我很不是滋味，倒不是说这位同学说错了什么，只是我又一次卡在了回忆里面。</p>
<p>早在 2017 年，我的高中出了一位高分省状元录取姚班，2018 年，出了一位省第二录取经管。18 年那位学姐，与我的交集，或许仅仅是招生的时候聊过两句，以及在我军训的时候将一本 C++ 入门书在紫荆门口交给了我便离去。我与 17 年的那位学长呢？我甚至在本科就没和他见过面，虽然甚至我们就住在一栋楼。</p>
<p>我在你清的探索，在你清计算机系的探索，现在这么想来，或许还真的是孤身一人。大一大二的时候一直在模仿着一位能力突出的同届同学的路径，大三之后决心不再模仿别人，结果是处处碰壁，今年的暑假还因此折磨不已。</p>
<p>真的有谁给我引过路吗，我想很少，没有任何一位学长，告诫我应该干啥，除了安老板曾经叮嘱过一些。翻翻我的朋友圈，八字班的学长少之又少，零字班和一字班的学弟却是很多，我向这些学弟没少倒过我本科的苦水。</p>
<p>然后我又看到了正在编写的软工课程改革草案，一瞬间感觉，这又是何苦呢，我大没有义务做这些。</p>
<p>我不知道。</p>
<p>我是否应该花更多的时间关注自己的能力提升，而不是在这里给别人做公益。</p>
<p>我也不知道。</p>
<p>但或许这也就是我对高中如此眷恋的缘故，高中的那些所谓的波澜，与大学相比，显得那么渺小，就连那个时候所谓的伤感、颓丧，反倒显得那么可爱。高中不过是高考的缓冲区，是一条不允许有任何路径偏移的单行道，在这种狭小的天地里，我完全不需要为未知迷茫，因为我的未来就是在高考中考出尽可能高的成绩。</p>
<p>今天看到一篇分析克苏鲁神话恐惧感来源的文章，大体就是又强调了一遍恐惧来源于未知。</p>
<p>高中的纯粹保护了这脆弱的平衡，在我们求知欲最旺盛的时段，构造了最精致的闭合结构，让我们误以为我们无所不知无所不晓，从而战无不胜。</p>
<p>果然，我至今也不过是那些大人口中，未经风霜的温室花朵而已。今天凌晨的这些，也不过只是无用的叹息，为赋新词强说愁罢了。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>歌词记录集</title>
    <url>/2021/11/29/lyrics/</url>
    <content><![CDATA[<p>之前大一的时候打算记录各种引起共鸣的歌词，于是就时不时在 QQ 空间里面发一些。但是现在来看，一直都是零零散散的，并不方便，所以就做个总集，顺手就当回忆一些东西了。</p>
<p>这里歌词全是日语的，然后翻译都是自己翻译的，可能会有错误。</p>
<span id="more"></span>
<h1 id="年">2019 年</h1>
<p>2019 年刚刚走进大学，暂且还没有过多的忧虑，整天最大的抱怨只是微积分学不完。饱暖之后就擅长为赋新词强说愁，所以即使经常分享一些莫名其妙的歌词，实际上也只是近乎无病呻吟一般。</p>
<div class="note info no-icon"><p><strong>いつの間にか雪は雨になりました。</strong></p>
<p>不知何时，飘雪已然幻化成雨。</p>
<p>——「ハレハレヤ」 2019.10.10</p>
</div>
<p>《朗朗晴天》这首歌是火出圈的 V 曲，当时刚高考完纠结于志愿的时候，一个玩得比较好的同学推荐给我的。当时确实很纠结，很迷茫，这首歌还是带来了一些安慰的。</p>
<p>其特征就是描写确实很漂亮，然后遣词造句也比较朴素干净，属于是很中意的类型。</p>
<div class="note info no-icon"><p><strong>誰もみんな消えてく夢を見た，</strong></p>
<p>梦中大家悄然消逝，</p>
<p><strong>真夜中の部屋の広さと静寂が胸につっかえて，</strong></p>
<p>深夜空旷寂静的房间，胸口一阵微痛，</p>
<p><strong>上手に息ができなくなる。</strong></p>
<p>连呼吸也变得困难。</p>
<p>——「炉心融解」 2019.10.16</p>
</div>
<p>《炉心融解》是相当老的一首 V 曲了，也是我喜欢上镜音双子的开端。铃的高音确实很惊艳，这首歌里面也体现得很彻底。</p>
<p>所以，不要在 KTV 里尝试唱《炉心融解》，年轻人对自己嗓子好一点。</p>
<div class="note info no-icon"><p><strong>春はうすもも，夏は群青，</strong></p>
<p>春日是浅桃花，夏日是茂密的树林，</p>
<p><strong>紅色に染まる秋，真っ白の冬，美しい山。</strong></p>
<p>鲜红渲染出的是秋日，纯白的是冬日美丽的群山。</p>
<p>…</p>
<p><strong>山をこえて，どこどこへ。</strong></p>
<p>越过高山，又往何处去？</p>
<p>——「遠く君へ」 2019.12.19</p>
</div>
<p>《致远方的你》是略带悲情的一首歌，看这种词大致是能理解其内涵的相思之苦的。这首歌大约是高中随机到的，歌词几乎没有长句子，几乎都是各种意象的堆叠，偶尔会无端责怪两句对方为何远去。</p>
<p>原唱是那种细细的女声，很能听出来愁苦的滋味。</p>
<div class="note info no-icon"><p><strong>気づき始めた，生まれた理由を，きっと独りは寂しい。</strong></p>
<p>似乎察觉到了，你创造我的理由，一定是形单影只太寂寞了吧。</p>
<p><strong>宿るココロが溢れた。</strong></p>
<p>你赋予我的那颗“心”，已然满溢而出了啊。</p>
<p>…</p>
<p><strong>一緒に過ごせた日々をアリガトウ。</strong></p>
<p>我们一起度过的时光，无比感谢。</p>
<p>——「ココロ」 2019.12.25</p>
</div>
<p>《心》大约是讲述的科学家与其所创造的一个机器人相恋的故事，但是毕竟人有寿限。这类有点类似探讨人生边界的奇妙歌曲，确实很能打动当时的我。</p>
<p>不过现在也能打动我，因为镜音双子确实好听。</p>
<h1 id="年-1">2020 年</h1>
<p>大学第一学期浪过了，同时也通过各种渠道了解到大学依然还是看成绩的地方，所以渐渐开始沉闷下去了。另外就是，大一下学期面临着大量的琐事，班长也不想当了。年底的甲级团支部评比也让我心态近乎崩溃。</p>
<p>随之变化的就是听歌的风格，这个时候的我，第一次接触到了 MARETU 和熊，也开始听一些真正的意味不明的歌了。</p>
<div class="note info no-icon"><p><strong>足りないものばっかりずっと増えてくの，</strong></p>
<p>不足之物，还在不断增加</p>
<p><strong>物々しく出しゃばる物思い。</strong></p>
<p>煞有介事，多管闲事的思虑。</p>
<p>——「うみたがり」 2020.01.05</p>
</div>
<p>《渴望诞生》是严格来说我听的第一首 MARETU 的歌，歌词令人困惑不解，使用的词汇在日常交际中也少见。但是整体的偏低沉的曲风确实很吸引当时的我。</p>
<div class="note info no-icon"><p><strong>三日月，水玉模様，</strong></p>
<p>初三的月亮，是水晶的模样，</p>
<p><strong>破れた障子，甘い飴の味。</strong></p>
<p>破碎的窗户纸，还有糖的甜味。</p>
<p>——「抑圧錯乱ガール」 2020.02.01</p>
</div>
<p>这首歌是《地狱型人间动物园》专辑里的一首，整首专辑的立意就是总是有很多人和当代社会无法贴合，最终无法融合的他们只能堕落。《抑压错乱女孩》大致就是讲述的在过大的精神压力下崩溃的女孩的故事，所以莫名其妙和她共鸣了。</p>
<div class="note info no-icon"><p><strong>僕たちもかつてはいつか素晴らしい人に，</strong></p>
<p>我们也曾经和你一样，</p>
<p><strong>憧れていた，君の同じさ。</strong></p>
<p>憧憬着成为伟大的人。</p>
<p><strong>いつだって時間はそう，諦めを教えてくれる。</strong></p>
<p>但是时间一直是那样，教会我们放弃。</p>
<p>Nice people make the world boring.</p>
<p>——「LOVE SONG」 2020.02.04</p>
</div>
<p>《情歌》是比较冷门的一首歌，在各大平台上都没有很多播放，我也已经忘了什么时候听到的了。整首歌的 MV 也是偏意味不明和压抑的风格，但总之还是表现了正向积极的主题，确实也包含了一些我当时在尝试探求的答案吧。</p>
<div class="note info no-icon"><p><strong>澄み渡る晴天を昇りゆく白い満月を濡らす。</strong></p>
<p>水汽浸润了那在澄澈的晴空中升起的一轮满月，</p>
<p><strong>空を映る池の水面に光る蛍みたいと過れば。</strong></p>
<p>映照在池面上的月光，如同萤火一般闪烁而过。</p>
<p>…</p>
<p><strong>ふと迸る胸は霧雨でこぼこが作った水溜り。</strong></p>
<p>忽然迸发而出的雾雨，在凹凸不平的地面上积攒起水洼。</p>
<p><strong>まるで夜の虹を見るようなふわりさんざめく夜光虫。</strong></p>
<p>仿佛就像黑夜中的彩虹一般灿烂着的萤火虫们啊。</p>
<p>——「蛍」 2020.02.24</p>
</div>
<p>《萤火虫》也不是热门的 V 曲，这首歌是纯纯的写萤火虫的写景抒情曲子，也是当时我学习日语文学的重要歌曲。</p>
<p>这类歌曲我并不擅长翻译，因为我一直感觉保留着原汁原味的歌词才显得有韵味，一旦我翻译了这些歌词，就难免融入我自己对景物、情感的想象。</p>
<div class="note info no-icon"><p><strong>その言葉に挟まるカミシオリ。</strong></p>
<p>夹在那些话语中的纸笺。</p>
<p>——「カゲロウ」 2020.03.12</p>
</div>
<p>《蜉蝣》是东方曲的填词，这句词是整首歌的第一句的开头。这首歌是我大一下学期可以说最喜欢的一首歌，曲调很惊艳，演唱者也很有表现力。那种平静的氛围中，很适合让我暂且幻想一下远方和未来。</p>
<p>不过现在确实不太听了，莫名感觉听多了之后有点厌倦了这种声线。或许只是当时听太多了吧。</p>
<div class="note info no-icon"><p><strong>私って失敗作だってさって要らない子なんだって，</strong></p>
<p>我就是所谓的失败作吧，是不被人需要的孩子吧，</p>
<p><strong>何やったって頑張ったって駄目らしいや。</strong></p>
<p>无论做什么，无论多么努力，也不过虚幻一场吧。</p>
<p>——「失敗作少女」 2020.04.07</p>
</div>
<p>《失败作少女》是我听的第一首熊，这首歌其实我更喜欢 MARETU 的 remix。为什么说喜欢这首歌呢，因为这首歌节奏把握得很好，有情绪爆发的副歌，也有沉寂的过渡段，尤其是那一段雨声，能让人想见在雨中漫无目的走着的，失魂落魄的少女。而在雨声过后，也有向神明祈求的最后一段情感爆发，歌曲最后的结局是开放的，也确实留下了很大的想象空间。</p>
<p>这段词精妙之处就是大量的促音，有一种难以表达的跳跃感，总之就是唱起来特别带感。</p>
<p>现在的熊，有点歌词莫名其妙，曲风固化，节奏也单调，确实没有一开始那么让人喜欢了。</p>
<div class="note info no-icon"><p><strong>調子はどうですか？空は自由に飛べましたか？すごい魔法が出せましたか？</strong></p>
<p>近况如何？能自由地在天空中飞行了么？能使出厉害的魔法了么？</p>
<p><strong>全部夢の中限定品さ。</strong></p>
<p>这些不过是梦境中的限定品啊。</p>
<p>…</p>
<p><strong>それはあなたの望む世界じゃないから，</strong></p>
<p>这并非是你希望的世界啊，</p>
<p><strong>こんな続きを愛してほしい。</strong></p>
<p>但也不妨爱上这并不完美的梦的后续吧。</p>
<p>——「ドリームレスドリームス」 2020.04.19</p>
</div>
<p>《无梦之梦》，绝对称得上现在我最喜欢的 V 曲。一样的，歌曲对抒情节奏有着绝对的把握，梦碎的那一瞬间的副歌段相当震撼，随后是 miku 声线无缝切入，安慰着主角的情绪，劝导主角接受梦想和现实的落差。</p>
<p>可以看得出这段时间我的歌单几乎全都是梦想和现实的矛盾这样的主题，显得很颓丧和没有生机，也确实贴合那段时间的心情。</p>
<div class="note info no-icon"><p><strong>神様もしも生まれ変わることができたら，</strong></p>
<p>神啊，如果我还能重生的话，</p>
<p><strong>愛される子になれますように。</strong></p>
<p>我也想成为被人怜爱的孩子啊。</p>
<p>——「失敗作少女」 2020.04.25</p>
</div>
<p>这就是之前说的，《失败作少女》最后的一段抒情段，那种对现有生活的悲观和失望，那种渴求他人善意的感觉。</p>
<p>四月份，当时正准备结束一年的社工生涯，由于团支书当时几乎不做任何事情，整个班级的事务就全在我的肩上。再加上自己还在摸索如何过好大学生活，而且还没有正视自己的一些过往，确实是没有任何人可以倾诉，只能自己默默消化这种逆境。</p>
<div class="note info no-icon"><p><strong>死に方教えてよ。</strong></p>
<p>教会我如何去死吧。</p>
<p>——「ヒトサマアレルギー」 2020.05.09</p>
</div>
<p>《旁人过敏症》也是熊曲，不是那么喜欢。这句词只是因为当时确实相当压抑。</p>
<div class="note info no-icon"><p><strong>正しさだけで殴り合うならば，勝ち目はないんだよ。</strong></p>
<p>如果仅仅是因为追求正当就相互殴打，那几乎就没有胜利的可能。</p>
<p>——「ネガティヴ進化論」 2020.06.03</p>
</div>
<p>《消极进化论》似乎是基于一个现有的故事还是小说，所以是具有背景的，然而我至今都没有去了解，所以歌词的含义也是似懂非懂。我听这首歌，只是因为旋律确实好听。</p>
<div class="note info no-icon"><p><strong>希望の花，繋いだ絆を。</strong></p>
<p>希望的花，连接起的羁绊。</p>
<p>——「フレジア」 2020.07.26</p>
</div>
<p>单纯的梗曲，不过抛开梗来看，这首歌也还不错。</p>
<div class="note info no-icon"><p><strong>花で一つ，鳥で二つ，</strong></p>
<p>第一是花，第二是鸟，</p>
<p><strong>手打ち鳴らす，</strong></p>
<p>拍着手轻声唱，</p>
<p><strong>風で三つ，嗚呼，月出て四つ，</strong></p>
<p>第三是风，啊，第四是升起的月亮，</p>
<p><strong>鳴らす鳴らす。</strong></p>
<p>轻声唱着。</p>
<p>——「回レ！雪月花！」 2020.08.28</p>
</div>
<p>《雪月花》也是经典歌曲了，歌词的特色就是大量的四字成语。这一段是中间的过渡段，没有什么很深刻的含义，只是当时觉得很有意思就放上来了。</p>
<div class="note info no-icon"><p><strong>誰もいなくなったら意味はないんですか？</strong></p>
<p>难道万物消逝之后一切都没有意义了吗？</p>
<p>——「ドリームレスドリームス」 2020.11.03</p>
</div>
<p>《无梦之梦》最喜欢的一句词，虽然目前都没有领悟之中的含义，不过这句歌词确实是引入副歌的歌词，也是将全曲拉上最高潮的一句词。这种声嘶力竭的反问，确实能让人感到相当震撼。</p>
<div class="note info no-icon"><p><strong>まっさらなら，声上げて。</strong></p>
<p>一尘不染的话，引吭高歌吧。</p>
<p>——「百鬼祭」 2020.11.03</p>
</div>
<p>Kanaria 的初投稿，整首歌歌词不是很喜欢，因为完全不明白他想表达的含义。不过 Kanaria 的旋律做得很好，到现在我也一直在听。</p>
<div class="note info no-icon"><p><strong>「まあまあ」なんて要らない，欲しがります死ぬまでは。</strong></p>
<p>得过且过绝对不需要，我要贪得无厌，至死方休。</p>
<p>…</p>
<p><strong>わかるか，私の美学。</strong></p>
<p>你明白吗？我的美学。</p>
<p><strong>この馬鹿正直な拳一つが切り札。</strong></p>
<p>这愚蠢正直的一发拳头，就是我最后的王牌。</p>
<p>——「劣等上等」 2020.12.23</p>
</div>
<p>《劣等上等》是 Giga 的代表作，歌很吵，但是词比较有意思。当时的我，在大二上学期取得了很多可以说很好的成就，也在大学中找到了自己的节奏，所以听歌的风格也开始激昂起来了。</p>
<p>有趣的是，我在大一下学期比较沉闷的时候就已经听过《劣等上等》，但当时觉得很不好听，半年后就觉得这首歌绝对好听。看来听歌口味和境遇确实有很大的关联。</p>
<h1 id="年-2">2021 年</h1>
<div class="note info no-icon"><p><strong>お願い死なないで，そんなこと言わないで，</strong></p>
<p>不要去寻死，这样的话语也不要再说，</p>
<p><strong>少し胸の奥が締め付けられる。</strong></p>
<p>心口稍稍有点疼痛。</p>
<p>…</p>
<p><strong>今日からの君も昨日までの君も，</strong></p>
<p>无论是今天以后的你，还是昨天以前的你，</p>
<p><strong>大切に愛しくて嬉しくて好きで。</strong></p>
<p>我都珍重地喜欢着可爱又令我愉悦的你啊。</p>
<p>…</p>
<p><strong>光の群れが羽ばたく景色が，</strong></p>
<p>那绽放着光芒的景色，</p>
<p><strong>どこまでも広がればいいと思えるの。</strong></p>
<p>或许可以充满整个世界。</p>
<p>——「蝶々世界」 2021.04.05</p>
</div>
<p>这也是一个较为冷门的 V 曲，分享出来的契机是你清又有人轻生。刚刚步入大二下学期，当时暂且还是处于延续上一学期意气风发的状态。</p>
<div class="note info no-icon"><p><strong>暗闇の自由より鎖に繋がれた光でいいんだ。</strong></p>
<p>与其接受自由的黑暗，我宁愿带着锁链沐浴在光芒之下。</p>
<p>——「琥珀の身体」 2021.04.17</p>
</div>
<p>《琥珀的身体》是个好歌，旋律很震撼，然后这一句词绝对是我很喜欢的，也是我第一遍听就确定一定要分享出来的歌词。</p>
<div class="note info no-icon"><p><strong>太陽になれなかった腐った炎，</strong></p>
<p>没能成为太阳的腐烂的火焰，</p>
<p><strong>意味もなく酸素を費やす。</strong></p>
<p>只是毫无意义地耗费着氧气。</p>
<p>——「映えない」 2021.04.18</p>
</div>
<p>《不太上镜》是那段时间我几乎算是最喜欢的歌，这首歌就在探讨那些并没有实质的人，为何需要在人前假装出一副胸有成竹的样子。当时我渐渐发觉自己对学业力不从心，确乎有了一些自卑的心理，于是这首歌也确实让我感受到了一点点的震撼。</p>
<div class="note info no-icon"><p><strong>美学とかプライドとか語る前に，</strong></p>
<p>在谈论美学和自尊之前，</p>
<p><strong>やれることをやっていけ。</strong></p>
<p>先去做好能做的事。</p>
<p>——「限りなく灰色へ」 2021.05.04</p>
</div>
<p>当时刚刚从上海见 Sakana 回来，心态确实有所好转。在回来的火车上，默默下了一定要好好活下去的决心，于是把《向着无尽之灰》的这句歌词分享出来了。</p>
<div class="note info no-icon"><p><strong>「自分らしく生きて」なんて言わないで，</strong></p>
<p>不要说那些“活出自我”，</p>
<p><strong>らしさなんて最初からないから。</strong></p>
<p>因为根本就没有什么自我。</p>
<p>——「映えない」 2021.05.06</p>
</div>
<p>已经忘记了为什么突然要分享这句词了，不过可以知道的是，这段时间往后的一个月，甚至两三个月，我都沉浸在自我否定之中。那段时间我尝试着揭开了很多往事，结果就是相当长时间内都没有缓过来，一直在尝试着建立起自己努力下去的理由。</p>
<div class="note info no-icon"><p><strong>ここ調子が悪いんだ，いや本気はまだまだ，</strong></p>
<p>现在状况有些不太好，不对，只是没拿出真本事而已。</p>
<p><strong>そう言ったのはこれは何度目の台詞だろう？</strong></p>
<p>这个借口已经用了多少次了？</p>
<p>——「いや〜いや〜」 2021.05.09</p>
</div>
<p>这首歌高中就听了，但是真正感到理解了一些还是在大二。那段时间开始注意到自己对感情问题的拖延和视而不见已经结出了恶果，也注意到过度的自我封闭让自己完全无法接受现况，于是只能用这段歌词聊以自慰。</p>
<div class="note info no-icon"><p><strong>芝居し合い化かし合い，みんな灰色なんだ，</strong></p>
<p>一起表演，一起幻化，大家不过是一团灰色，</p>
<p><strong>地球は茶番さ，人類みな劇団さ，</strong></p>
<p>地球不过是笑谈，人类也不过是剧团，</p>
<p><strong>存在しない神や愛，芝居で表してきた。</strong></p>
<p>那些本来就不存在的神和爱情，都通过表演展现出来了啊。</p>
<p>——「Hyper Reality Show」 2021.05.25</p>
</div>
<p>当时莫名其妙想分享的一句歌词，其实目的只是想让 Sakana 和自己聊聊而已，没有什么特别的含义。</p>
<div class="note info no-icon"><p><strong>取り出し給え，刃！刃！</strong></p>
<p>取出来吧！你的利刃！</p>
<p>——「ナミダ」 2021.06.03</p>
</div>
<p>这句词是在第二次去上海的路上分享的，当时自己尝试着通过这种情感特别激烈的歌来调动自己的情绪，以尝试掩盖心中的不安。</p>
<div class="note info no-icon"><p><strong>さよならを言わないのは，あなたに見抜かれてしまわないように。</strong></p>
<p>不和你道别，只是还不想被你看透啊。</p>
<p>——「第三の心臓」 2021.06.15</p>
</div>
<p>春卷饭现在的风格是越来越走向温柔向了。《第三心脏》讲述的是朋友之间偶然的矛盾和不快，确实也贴合当时和 Sakana 之间的矛盾。歌曲的最后，两人最终和好，并肩前行，也算是寄托了一些自己的想法吧。</p>
<div class="note info no-icon"><p><strong>ケーキも大好き，君も大好き。</strong></p>
<p>喜欢蛋糕，也喜欢你。</p>
<p>——「とある一家の御茶会議」 2021.06.19</p>
</div>
<p>这首歌相当老，是滚苹果 P 的隐退曲，这种欢快的曲调下掩藏的是无可奈何的悲伤。说不出来当时被触动到的心情了，但总之大约是感受到了自己逐渐走向正轨的一些安心，和这些安心之下依然被埋藏着的不安。</p>
<div class="note info no-icon"><p><strong>くたびれた私が駄目だったんだね，</strong></p>
<p>颓废的我已然不堪大用。</p>
<p><strong>まだ役に立つつもりだったけれど。</strong></p>
<p>本还想着发挥最后的余热的。</p>
<p>——「ハルノ寂寞」 2021.06.24</p>
</div>
<p>《春日寂寞》是稻叶昙作品中我最喜欢的，无论是技术上调教相当完美，还是歌词旋律相当优秀。那种空灵的旋律，传达出一种无法和你继续下去的痛苦和无奈。</p>
<div class="note info no-icon"><p><strong>ゴミ溜めで埋もれたまま，星空を眺めてるよ。</strong></p>
<p>即使掩埋于垃圾堆之下，也要向上仰望星空。</p>
<p>——「ぼくらみんな意味不明」 2021.07.02</p>
</div>
<p>匹老板的代表作之一，旋律不算好听，但是这段歌词确实不错。虽然现在看也并没有讲什么大道理，但确实让我感受到了一点动力。</p>
<div class="note info no-icon"><p><strong>凍てつく雪の中で，確かな熱を帯びた，</strong></p>
<p>冻结着的积雪之下，确实还留存着些许温热，</p>
<p><strong>呼吸をして，声を焼いて，燃えた燃えた禊の火。</strong></p>
<p>喘着气，声音灼热着，映照着燃烧着的业火。</p>
<p>——「ハレハレヤ」 2021.07.20</p>
</div>
<p>《朗朗晴天》的副歌段，音调极其之高，但也因此表达出了相当强烈的情感。当时分享的动机就是单纯的好听。</p>
<div class="note info no-icon"><p><strong>全知全能の言葉をほら聞かせてよ。</strong></p>
<p>来，让我听听那些全知全能的话语吧。</p>
<p>——「東京テディベア」 2021.08.25</p>
</div>
<p>《东京泰迪熊》也是相当经典的歌曲，依然是镜音的绝妙演出。这一段没有什么特殊含义，只是因为好听。这句词每一个重音都会突然拉高音调，有那种直击人心的表现力。</p>
<div class="note info no-icon"><p><strong>僕は大人にやってなったよママ。</strong></p>
<p>我终于长成大人了啊妈妈。</p>
<p>——「ビターチョコデコレーション」 2021.09.22</p>
</div>
<p>《苦巧克力装饰》是我听的第一个 syudou 的歌，这种带一点压抑，带一点深度的歌词很让我着迷。这首歌主要探讨的是放弃童真成长为大人的故事，苦巧克力的含义大致和苦咖啡类似，是成长为社会人的标志，也是小孩子们常常用来假装自己已经长大的一个逞能的用具。</p>
<p>总体而言，当时我坐在西大操场旁边的长椅上等待 Sakana 的电话，偶然循环到了这一句。</p>
<div class="note info no-icon"><p><strong>失うことに慣れてく中で，</strong></p>
<p>已经习惯失去的我，</p>
<p><strong>失くさずにいた大事な思いを抱き締めたら，不意に涙が落ちたのは，</strong></p>
<p>偶然将还未丢失的回忆拥入怀中之时，泪水在不意间悄然落下，</p>
<p><strong>この街でまだ生きていたいと思うから。</strong></p>
<p>是因为我还想在这城市中生存下去啊。</p>
<p>——「幽霊東京」 2021.10.09</p>
</div>
<p>《幽灵东京》大约是在探讨着在大城市中生存的艰难，那种为了生活打拼之后，在一天的疲惫之后突然回想起曾经的美好的悲伤感。现在自己这个乡下出身的人，来到北京上大学，确实是需要一段时间接受的。那段时间和同一个高中的学弟交流也很多，所以也时不时会想起自己在高中的那些无忧无虑的时光。</p>
<p>虽然不像歌词写的那么夸张，但还是有点共鸣。</p>
<div class="note info no-icon"><p><strong>どうかどうか与えて，生活を与えて。</strong></p>
<p>无论如何给予她吧，把梦想中的生活给予她吧。</p>
<p>…</p>
<p><strong>あなたがいたあの部屋，未来を繋ぐギャラリアだったはず，</strong></p>
<p>你所在的那个房间，本应该是连接未来的画廊啊，</p>
<p><strong>だったはず。</strong></p>
<p>本应该啊。</p>
<p>——「ギャラリア」 2021.10.11</p>
</div>
<p>比较喜欢的一个作品，讲述的是家暴类似话题。不过我倒不是因为歌词喜欢上这首歌的，纯属因为调教比较好，旋律也不错。</p>
<div class="note info no-icon"><p><strong>僕にしかできないことはなんだか？</strong></p>
<p>只有我能做到的事是什么啊？</p>
<p>——「群青」 2021.10.25</p>
</div>
<p>《群青》是相当优秀的一个曲子，当时分享这句歌词，也是出于一些不安，觉得自己是可替代的一个人，并不是所谓的独一无二的人。不过其实到现在，我都没有说服自己自己是独一无二的。</p>
<div class="note info no-icon"><p><strong>なるべく永く一緒にいたいんだよ。</strong></p>
<p>那就多让我在你身边吧。</p>
<p>…</p>
<p><strong>少しだけ名残惜しそうにさようなら。</strong></p>
<p>那就依依不舍地道别吧。</p>
<p>——「ハルノ寂寞」 2021.10.30</p>
</div>
<p>《春日寂寞》中相互呼应的两句歌词，结合之前说的那种不得不离去的无奈感，确实很感人吧。</p>
<div class="note info no-icon"><p><strong>他人の不幸は蜜の味。</strong></p>
<p>他人的不幸就像是蜜糖的味道。</p>
<p>…</p>
<p><strong>助けを乞う姿を見せておくれ。</strong></p>
<p>让我看看你乞求我救助的可怜模样。</p>
<p>——「シャーデンフロイデ」 2021.11.11</p>
</div>
<p>这是《雨路女孩》的续作，大致讲述了一个趁人之危的人作恶的故事，似乎也是影射了一些社会事件，但我这个听歌的，就没有管多少了。这首歌论旋律论节奏都算是不错，不至于很惊艳，但也是相当不错的水平。</p>
<div class="note info no-icon"><p><strong>僕の一等賞を奪いにきて。</strong></p>
<p>来夺取我的一等奖吧。</p>
<p>——「ホワイトハッピー」 2021.11.12</p>
</div>
<p>《白色幸福》也是 MARETU 的作品，这句词常常用于影射性相关话题。那具体影射的是什么呢，其实都说是“一等奖”和“夺取”了，应该不难猜出来。</p>
<div class="note info no-icon"><p><strong>簡単な感情ばっか数えいたら，</strong></p>
<p>如果只是清点着简单的感情，</p>
<p><strong>あなたがくれた体温まで忘れてしまった。</strong></p>
<p>就连你传递给我的体温都会忘却。</p>
<p>——「DONUT HOLE」 2021.11.29</p>
</div>
<p>《甜甜圈洞》是八爷相当著名的作品，用欢快的语调歌唱感情的绝望。即使 V 家发展了这么多年，八爷这首歌论硬实力依然是相当上乘的，不愧是顶尖音乐人。</p>
<h1 id="年-3">2022 年</h1>
<div class="note info no-icon"><p><strong>なあ今年もさ，桜が散ってしまうんだ。</strong></p>
<p>今年，樱花也如同往常一样凋谢。</p>
<p><strong>夢みたいに踊る桃色に騙されてしまいそうだ。</strong></p>
<p>那如梦境一般漫天飞舞的粉红，几乎将我欺骗。</p>
<p>——「地獄に落ちる」 2022.03.16</p>
</div>
<p>《坠入地狱》大约是我目前可以称得上最喜欢的曲子之一，赶上北京短暂的春天，这首歌就显得尤为切合时宜。</p>
<p>这首歌歌词充满力量，而且 KAFU 调得确实相当扎实。副歌段的抒情很强烈，这段简单的写景又是柔和，只能说黑柿子确实把一个失魂落魄而又在漫天飞舞的樱花中重拾理想的人描写出来了。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>马尔可夫随机过程杂谈</title>
    <url>/2023/11/13/markov-process/</url>
    <content><![CDATA[<p>最近学网络建模，发现随机过程真的应用太广了，尤其是马尔可夫过程，在之前的 RL 笔记里面也有提到但是没写很多，这次想着还是稍微做点总结比较好。</p>
<span id="more"></span>
<h1 id="随机过程与马尔可夫性质">随机过程与马尔可夫性质</h1>
<p>所谓随机过程实际上就是一个随机变量的序列 <span class="math inline">\(\{X_t\}, t \in T\)</span>，<span class="math inline">\(t\)</span> 一般都解释为时间，体现随机过程随时间的推移。如果 <span class="math inline">\(T\)</span> 是一个可数集（一般都是自然数集 <span class="math inline">\(\mathbb{N}\)</span>），那么这就是<strong>离散时间随机过程</strong>。如果 <span class="math inline">\(T\)</span> 是 <span class="math inline">\(\mathbb{R}\)</span> 上的一段区间，那么这就是<strong>连续时间随机过程</strong>。随机变量 <span class="math inline">\(X_t\)</span> 的所有可能取值构成的集合称为<strong>状态空间</strong>。</p>
<p>考虑一个状态空间 <span class="math inline">\(\mathcal{S}\)</span> 至多可数的离散时间随机过程 <span class="math inline">\(\{X_t\}_{t \in \mathbb{N}}\)</span>。该随机过程的<strong>马尔可夫性质</strong>是指，对于任意 <span class="math inline">\(t \in \mathbb{N}\)</span>，如果已知 <span class="math inline">\(X_t\)</span> 的取值，那么 <span class="math inline">\(X_{t + 1}\)</span> 的取值与 <span class="math inline">\(X_0, X_1, \cdots, X_{t - 1}\)</span> 的取值都是独立的。这个性质可以用下面的式子来表示：</p>
<p><span class="math display">\[
\mathbb{P}(X_{t + 1} = j \mid X_t = i, X_{t - 1} = i_{t - 1}, \cdots, X_0 = i_0) = \mathbb{P}(X_{t + 1} = j \mid X_t = i)
\]</span></p>
<p>这里 <span class="math inline">\(i, j, i_0, \cdots, i_{t - 1} \in \mathcal{S}\)</span> 均为任意的状态。</p>
<p>鉴于此，一个马尔可夫随机过程可以定义一个<strong>转移概率矩阵</strong> <span class="math inline">\(P = (p_{ij})_{n \times n}\)</span>，这里 <span class="math inline">\(n\)</span> 为状态空间 <span class="math inline">\(\mathcal{S}\)</span> 的大小，其各元素定义为 <span class="math inline">\(p_{ij} := \mathbb{P}(X_{t + 1} = j \mid X_t = i)\)</span>。</p>
<p>这个矩阵的重要性质是，每一行的和为 <span class="math inline">\(1\)</span>：</p>
<p><span class="math display">\[
\sum_{k = 1}^n p_{ik} = \sum_{k = 1}^n \mathbb{P}(X_{t + 1} = k \mid X_t = i) = 1
\]</span></p>
<div class="note info no-icon"><p>一个满足马尔可夫性质的状态空间可数离散时间随机过程一般称为<strong>马尔可夫链</strong>。</p>
<p>任何马尔可夫链均可以按照上述过程定义转移概率矩阵。然而在一些特别的实际问题中，转移概率矩阵可能是与时间相关的，而我们上述的讨论中矩阵并不随时间推移而改变，这类马尔可夫链称为<strong>时间齐次马尔可夫链</strong>，也是强化学习问题中最常见的建模。</p>
<p>时间不齐次的马尔可夫链则会在后面提及连续时间马尔可夫链时讨论。</p>
</div>
<p>如果考虑多步转移，我们可以通过概率运算发现：</p>
<p><span class="math display">\[
\begin{aligned}
\mathbb{P}(X_{t + r + 1} = j \mid X_t = i) &amp;= \sum_{k = 1}^n \mathbb{P}(X_{t + r + 1} = j \mid X_{t + 1} = k) \mathbb{P}(X_{t + 1} = k \mid X_t = i) \\
&amp;= \sum_{k = 1}^n \mathbb{P}(X_{t + r} = j \mid X_t = k) \mathbb{P}(X_{t + 1} = k \mid X_t = i)
\end{aligned}
\]</span></p>
<p>这里最后一个等号利用了时间齐次的特性。利用上述式子，我们可以发现马尔可夫链的多步状态转移可以通过矩阵的幂次表现。具体而言，记 <span class="math inline">\(P^r\)</span> 的第 <span class="math inline">\((i, j)\)</span> 位置上的元素为 <span class="math inline">\(p^{(r)}_{ij}\)</span>，则：</p>
<p><span class="math display">\[
p^{(r)}_{ij} = \mathbb{P}(X_{t + r} = j \mid X_t = i)
\]</span></p>
<h1 id="马尔可夫链的可达性与可约性">马尔可夫链的可达性与可约性</h1>
<p>首先我们来定义<strong>可达性</strong>。如果对于任意的 <span class="math inline">\(i, j \in \mathcal{S}\)</span>，存在 <span class="math inline">\(r \in \mathbb{N}\)</span> 使得 <span class="math inline">\(p^{(r)}_{ij} = \mathbb{P}(X_{t + r} = j \mid X_t = i) &gt; 0\)</span>，那么称 <span class="math inline">\(j\)</span> 是从 <span class="math inline">\(i\)</span> 可达的，记作 <span class="math inline">\(i \to j\)</span>。如果 <span class="math inline">\(i \to j\)</span> 且 <span class="math inline">\(j \to i\)</span>，那么称 <span class="math inline">\(i\)</span> 和 <span class="math inline">\(j\)</span> 是<strong>互达</strong>的，记作 <span class="math inline">\(i \leftrightarrow j\)</span>。</p>
<p>可达性的直观理解是简单的。<span class="math inline">\(i \to j\)</span> 的含义即为，从状态 <span class="math inline">\(i\)</span> 出发，经过有限步转移，可以到达状态 <span class="math inline">\(j\)</span>。</p>
<p>不难验证互达的自反性、对称性和传递性，从而互达构成状态空间上的等价关系，这意味着可以据此划分等价类。从而，若一个马尔可夫链的状态空间在互达关系上仅有一个等价类，则该马尔可夫链<strong>不可约</strong>。</p>
<p>不可约性的直观理解也是简单的。不可约的马尔可夫链的所有状态之间都能通过有限步的状态转移两两互达。</p>
]]></content>
      <categories>
        <category>【杂谈】数学</category>
      </categories>
  </entry>
  <entry>
    <title>简明日语自学手册 Chapter 5 助词使用规则</title>
    <url>/2022/08/22/ja-tutorial-ch5/</url>
    <content><![CDATA[<p>本文将主要讲解各个助词的基本使用法则，并举出若干例句进行分析。在阅读先前章节的基础上，通过本文读者应当可以基本了解日语的附属词体系。</p>
<p>然而，日语助词的分类包括语义至今依然是语法学界争论的话题之一，相比较于助动词相对成熟统一的体系，现代日语的助词很难归纳出一套较为完整的体系，例外情况相当繁杂，而且口语中的随意使用现象十分普遍。基于此，本文也仅能做到给出一套较为粗糙的体系，举出作者知道的一些例外，介绍这些助词最为基本的含义，和最为基本的一些知识点，至于如何应用这些助词，依然需要读者自行阅读日语文本。</p>
<span id="more"></span>
<h1 id="格助词">格助词</h1>
<p>首先讲解格助词，格助词一般接续在体言之后，部分情况下接续在用言终止形（形容动词词干）、助词、副词等后。一般而言，接续在非体言之后的格助词往往是补格助词。格助词的最基本用途是标记某个词语或者词组在句子之中的地位（也就是所谓的<strong>格</strong>）。日语在提供格助词标记词组语法作用的条件下就可以在一定范围内自由调换各个词组的顺序而不至于影响整个句子的理解。</p>
<div class="note info no-icon"><p>格助词接续在用言终止形之类之后的用法事实上是<strong>小句充当格成分</strong>的表征：</p>
<ul>
<li>この作品を完成する<strong>まで</strong>頑張りましょう！（努力把作品做完吧！）</li>
</ul>
<p>这里的「まで」就接续在动词之后。然而这句话的理解方式应当为，「この作品を完成する」是一个小句，整个小句被格助词「まで」统领作为主句的补格成分。而这个小句里面出现的「を」则是小句的宾格助词，和主句的格成分没有关系。</p>
<p>接续在其他助词后面的格助词也可能代表小句充当格成分：</p>
<ul>
<li>手を洗って<strong>から</strong>ご飯を食べる。（先洗手再吃饭）</li>
</ul>
<p>这里格助词「から」统领小句「手を洗って」，只不过这个小句使用了接续助词「て」结句而非常见的终止形。</p>
</div>
<p>另外需要注意，格助词并非是界限分明的，比如主格助词「が①」也可以是宾格助词，但是其最主要用法依然是标注主语。本文对于有多种助词特性的助词，会将其最主要的用法写出，在后面的括号内写出其次要用法。</p>
<h2 id="主格助词宾格助词领格助词が①">主格助词（宾格助词、领格助词）「が①」</h2>
<p>「が①」用于标记句子的主语，后续承接形容该主语样态的形容词句或者表现该主语动作的动词句：</p>
<ul>
<li>田中さん<strong>が</strong>本を読んでいる。（田中在读书）</li>
<li>リンゴ<strong>が</strong>紅い。（苹果是红的）</li>
</ul>
<p>「が①」有时也可以用于标记宾语，但这种用法一般仅限于下述情景：</p>
<ul>
<li>涉及到<strong>说话人自身</strong>情感与能力的句子，宾语可以使用「が①」标记，例如：
<ul>
<li>助动词「たい」</li>
<li>各类可能式表述，如可能动词、无标可能</li>
</ul></li>
<li>涉及到<strong>说话人自身</strong>情感与能力的形容词和形容动词，<strong>对象</strong>可以使用「が①」标记，例如：
<ul>
<li>形容词「欲しい」</li>
<li>形容动词「好きだ、嫌いだ、上手だ、下手だ、苦手だ」</li>
</ul></li>
<li>助词「て」后接续补助动词「ある」形成的存在状态句中，宾语可以使用「が①」标记</li>
<li>表达可能的句子中，宾语可以使用「が①」标记</li>
<li>被动句中如果不需要强调实际动作发出方，宾语可以使用「が①」标记</li>
<li>自发语义中，宾语可以使用「が①」标记</li>
</ul>
<p>例句如下：</p>
<ul>
<li>今は水<strong>が</strong>飲み<u>たい</u>。（现在想喝水）</li>
<li>わたしはきれいな服<strong>が</strong><u>欲しい</u>。（我想要漂亮的衣服）</li>
<li>わたしは甘いもの<strong>が</strong><u>好きだ</u>。（我喜欢甜食）</li>
<li>わたしはピアノ<strong>が</strong><u>上手だ</u>。（我擅长钢琴）</li>
<li>机の上にケーキ<strong>が</strong>置い<u>てある</u>。（桌上放着蛋糕）</li>
<li>わたしは日本語<strong>が</strong><u>話せる</u>。（我会说日语）</li>
<li>選択幅<strong>が</strong>大きく<u>拡大された</u>。（选择的范围大幅扩大了）</li>
<li>外国の息子のこと<strong>が</strong><u>案じられる</u>。（我很担心我在外国的孩子）</li>
</ul>
<div class="note info no-icon"><p>可以注意到上述提到涉及到情感和能力的形容词和形容动词的时候，使用的是<strong>对象</strong>这个表述而非<strong>宾语</strong>，这是因为形容词和形容动词不具有引导宾语的能力。但是我们注意到，在翻译到汉语之后，明显可以看出动宾结构，如“想要衣服”和“擅长钢琴”，在汉语中是明显的动宾短语。</p>
<p>对于这一类有动词性质的形容词和形容动词，目前一种折衷的说理方式是，在「服が欲しい」这样的短语中，其本质含义是描述「服」这个物品具有让说话者想要拥有这个属性，也就是说「欲しい」这个形容词是用于形容物品具有让人想要拥有这个特性的。也就是说「服」依然是「欲しい」的主语。</p>
<p>这类句式应当是不少日语初学者很早就会学习的，而这里汉语和日语逻辑的不同，确实会让不少初学者写出「服<strong>を</strong>欲しい」之类的短语。</p>
</div>
<div class="note info no-icon"><p>上面提到的「たい、欲しい、好きだ」等例子，均强调了一定是第一人称。在描述其他人称的时候实际上和「たい、たがる」的对立类似，因为我们无法断言其他人的愿望、感情，所以使用涉及到愿望、感情的形容词或形容动词，如「欲しい、嫌だ」等的时候，应当使用接尾词「○がる」并用回宾格助词「を」：</p>
<ul>
<li>田中さんはきれいな服<strong>を</strong>欲し<u>がる</u>。（田中想要漂亮的衣服）</li>
<li>田中さんは勉強<strong>を</strong>嫌<u>がる</u>。（田中讨厌学习）</li>
</ul>
<p>但是描述能力等词语以及「好きだ、嫌いだ」是例外：</p>
<ul>
<li>田中さんは甘いもの<strong>が</strong>好きだ。（田中喜欢甜食）</li>
<li>田中さんはピアノ<strong>が</strong>上手だ。（田中擅长钢琴）</li>
</ul>
</div>
<p>需要注意的是，「が①」有时起到连体修饰的作用，即现代日语中「の①」的作用，但这种用法几乎仅存在于固定短语中，是古日语的残余：</p>
<ul>
<li>我<strong>が</strong>国の労働者。（我国的劳动者）</li>
<li>霞<strong>が</strong>関。（霞关）</li>
</ul>
<h2 id="补格助词から①">补格助词「から①」</h2>
<p>「から」最主要的目的是标注起点，这类起点可以是具体的时间、地点、材料的起点，也可以是抽象的顺序、授受的起点。可以从下述例句中观察「から」的语义：</p>
<ul>
<li>（时间起点）授業は六時<strong>から</strong>始まります。（从六点开始上课）</li>
<li>（地点起点）野良猫は窓<strong>から</strong>入ってくる。（野猫从窗户进来）</li>
<li>（材料起点）チーズは牛乳<strong>から</strong>作られたものだ。（奶酪是牛奶做的）</li>
<li>（顺序起点）君<strong>から</strong>入って。（从你开始进去）</li>
<li>（授受起点）友達<strong>から</strong>もらったプレゼント。（朋友给的礼物）</li>
</ul>
<p>此外，「から①」也可以在被动句中表示动作的发出方：</p>
<ul>
<li>わたしは先生<strong>から</strong>褒められた。（我被老师夸奖了）</li>
</ul>
<div class="note info no-icon"><p>事实上「から」还有表示事物缘由的语义，不过需要注意的是，这种事物缘由往往主观因素较强，一般带有说话人本身的判断和情感，如果需要表述完全客观的原因，一般可以使用「ので」代替：</p>
<ul>
<li>だんだん暗くなってきた<strong>から</strong>、早く帰ろう。（天已经慢慢变黑了，早点回去吧）</li>
</ul>
<p>这个语义的「から」应当作为格助词还是接续助词，本文所采纳的观点是，作为格助词的「から①」表示事物缘由的语义已经基本被作为接续助词的「から②」所代替，所以不认为作为格助词的「から①」具有表达事物缘由的语义。而作为接续助词的「から②」则几乎仅有表达事物缘由的语义。</p>
</div>
<div class="note info no-icon"><p>表示时间起点的「から」有时也会出现不符合格助词要求的用法：</p>
<ul>
<li>猫を飼って<strong>から</strong>が本当の人生だ。（养了猫之后才叫人生）</li>
<li>これ<strong>から</strong>が真剣勝負だ。（从现在开始才是决战）</li>
</ul>
<p>这里的「から」显然也不符合格助词的要求。其形成了类似从句的短语，作为主句的一个体言成分。有观点将这类助词称为<strong>准体助词</strong>。</p>
<p>本文接受准体助词这个概念，并且统一将所有涉及到准体助词概念的格助词用法视为语法允许的格助词用法例外。而部分观点会采用严格的格助词定义，认为所有准体助词用法都是违背格助词的，应当将所有准体助词视为副助词。事实上，大部分补格助词都具有准体助词的使用方式（「に」几乎不作为准体助词），而主格助词、宾格助词很难构成准体助词，这也和补格助词作为格助词的属性并不强这一特性有关。</p>
<p>另外，这里提到了特殊句式「～てから」，这种特殊句式一般用于强调时间的先后关系，使用在需要特别说明动作先后关系的句子中。</p>
</div>
<h2 id="补格助词で">补格助词「で」</h2>
<p>「で」最主要的目的如下所述：</p>
<ul>
<li>标注动作发生的地点</li>
<li>标注手段
<ul>
<li>标注动作所使用的道具</li>
<li>标注动作的方式、方法</li>
<li>标注动作的材料</li>
<li>标注动作的构成要素</li>
<li>标注动作的内容物、附着物</li>
</ul></li>
<li>标注范围</li>
<li>标注数量、期限、限度</li>
<li>标注原因、理由</li>
</ul>
<p>例句如下：</p>
<ul>
<li>（地点）あの店<strong>で</strong>ラーメンを食べる。（在那家店吃拉面）</li>
<li>（手段）
<ul>
<li>（道具）包丁<strong>で</strong>野菜を切る。（用菜刀切菜）</li>
<li>（方式）インターネット<strong>で</strong>相手の情報を探る。（在网上找对手信息）</li>
<li>（材料）粘土<strong>で</strong>人形を作る。（用粘土做人偶）</li>
<li>（构成要素）今日の試合は三人<strong>で</strong>行きます。（今天比赛要三个人去）</li>
<li>（内容物）スタジアムは熱気<strong>で</strong>ムンムンしてる。（体育场里充满热气）</li>
<li>（附着物）髪の毛は雨<strong>で</strong>ぐっしょり濡れてしまった。（头发被雨水全打湿了）</li>
</ul></li>
<li>（范围）これは世界<strong>で</strong>一番高い建物だ。（这是世界上最高的建筑）</li>
<li>（数量）車は時速百キロ<strong>で</strong>走っている。（汽车以时速一百公里飞驰）</li>
<li>（期限）一週間<strong>で</strong>できるのか？（一周内能做完吗？）</li>
<li>（原因）地震<strong>で</strong>電車が止まった。（电车因为地震停了下来）</li>
</ul>
<p>这里需要注意，标注手段中的道具是可以抽象化的，也就是说动作的道具可以不是一个具体的事物，而也可以是一种抽象的描述：</p>
<ul>
<li>（具体）新幹線<strong>で</strong>東京へ行く。（乘新干线去东京）</li>
<li>（抽象）言葉<strong>で</strong>相手を責める。（用话语责备对方）</li>
<li>（抽象）赤ちゃんは大声<strong>で</strong>泣いている。（婴儿在大声哭闹）</li>
<li>素足<strong>で</strong>砂浜を歩く。（赤脚在沙滩上走）</li>
</ul>
<p>这里考虑最后一个例句，虽然「素足」是一个具体的事物，但是其并不能完全认为是「歩く」这个动作的道具，其更像是「歩く」这个动作进行时候的状态。这是一类介于具体道具和抽象道具之间的表述。</p>
<p>此外，标注道具和标注方式的「で」之间也并非界限分明：</p>
<ul>
<li>（道具）汚い手<strong>で</strong>お菓子をつままないでください。（不要用脏手拿点心）</li>
<li>（方式）汚い手<strong>で</strong>ライバルを蹴落とす。（用肮脏手段打败对手）</li>
</ul>
<p>即使同时都标注了「汚い手」这个词，但是根据这个词具体采用具体的含义还是抽象的含义，这里的「で」的含义也有所变化。</p>
<div class="note info no-icon"><p>「で」以及「から①」都可以用于标注材料，关注下述两句话：</p>
<ul>
<li>ワインは葡萄<strong>から</strong>作られた。（红酒是葡萄做的）</li>
<li>千代紙<strong>で</strong>鶴を折る。（用纸折千纸鹤）</li>
</ul>
<p>由于「から」表达起点的语义很强，所以当其标注材料的时候，一般会强调从材料到成品需要经过一个很长的过程，而且最后成品往往是看不出材料原本的性质的。相对应，「で」标注材料则一般能够在成品中体现出原材料。</p>
<p>所以，酿酒、造纸等工序较长的制作中会使用「から」，而烹饪、手工等工序较短的制作中会使用「で」。</p>
</div>
<div class="note info no-icon"><p>「で」也有作为准体助词的应用：</p>
<ul>
<li>新型コロナウイルスの東京<strong>で</strong>の状況。（新型冠状病毒在东京的感染情况）</li>
</ul>
</div>
<div class="note info no-icon"><p>事实上「で」的应用范围几乎不太可能穷尽，这个助词在现代日语中有着举足轻重的地位，而且还具有很强的生命力。</p>
<p>这里举出的「で」的用法分类和例句也仅仅只能作为这个助词语用的冰山一角，要掌握这个助词还是需要读者多读日语文本。</p>
</div>
<h2 id="补格助词と①">补格助词「と①」</h2>
<p>「と」最主要的目的如下所述：</p>
<ul>
<li>标注动作的对象</li>
<li>标注动作的共同进行者
<ul>
<li>用于枚举对象</li>
</ul></li>
<li>标注比较的对象</li>
<li>标注状态变迁的结果</li>
<li>标注所引用的引文</li>
<li>标注动作的状态</li>
</ul>
<p>从中文的角度理解的话，该助词的前三个用法均和中文的“和”“与”等虚词类似。</p>
<p>例句如下：</p>
<ul>
<li>（动作对象）彼女<strong>と</strong>結婚する。（和她结婚）</li>
<li>（动作共同进行者）家族<strong>と</strong>一緒に公園に行く。（和家人一起去公园）
<ul>
<li>（枚举对象）竹本さん<strong>と</strong>山本さんは一緒に来る。（竹本和山本一起来）</li>
</ul></li>
<li>（比较对象）この町は昔<strong>と</strong>違う。（这小镇和之前不一样）</li>
<li>（状态变迁结果）氷は水<strong>と</strong>なった。（冰变成了水）</li>
<li>（引用）「こんにちは」<strong>と</strong>言った。（说了声“你好”）</li>
<li>（动作状态）彼はゆっくり<strong>と</strong>立ち上がった。（他慢慢站起身）</li>
</ul>
<p>这里一定注意动作对象和动作共同进行者并不一致，区别方式是添加一个副词「一緒に」，如果无法添加则代表这里「と①」代表动作对象，如果可以添加则代表动作共同进行者。</p>
<p>此外，标注动作状态这一用法几乎仅能用于副词，接续在体言后并表动作状态的「と①」在现代日语中几乎由「～のようだ」代替。另外，部分在古语中是タリ活用形容动词的副词，如「だんだんと」可能自带「と」词尾，但是随着这类词语逐步丧失「と」词尾，「だんだん、だんだんと」两种形式均可以使用。</p>
<p>另外，标注状态变迁结果这一用法具体的讲解见 Chapter 7，其中会比较在这一语义上格助词「と①」和「に」的语感差别。</p>
<div class="note info no-icon"><p>「と①」也有作为准体助词的应用，但几乎仅用于表动作对象和动作共同进行者：</p>
<ul>
<li>友達<strong>と</strong>の旅行はすごく楽しい。（和朋友一起旅行很快乐）</li>
</ul>
</div>
<h2 id="补格助词に">补格助词「に」</h2>
<p>「に」最主要的目的如下所述：</p>
<ul>
<li>标注动作发生的时间点</li>
<li>标注静态的地点，如存在、出现、行为结果留存</li>
<li>标注移动的归着点</li>
<li>标注动作的方向</li>
<li>标注动作的对象</li>
<li>标注变化的结果</li>
<li>标注状态认定的基准、比较的基准</li>
<li>标注行为的目的，如构成「～にいく、～にくる、～にかえる」等句式</li>
<li>标注原因和理由</li>
<li>标注比例</li>
<li>在被动句中标注动作实际执行者</li>
<li>在使役句中标注动作执行者，且一般用于“放任”语义</li>
<li>标注状态</li>
<li>标注敬意的对象</li>
<li>构成各类固定句式</li>
</ul>
<p>例句如下：</p>
<ul>
<li>（时间点）七時<strong>に</strong>起きます。（七点起床）</li>
<li>（静态地点）机の上<strong>に</strong>本があります。（桌上有书）</li>
<li>（归着点）東京<strong>に</strong>行きます。（去东京）</li>
<li>（归着点）電車<strong>に</strong>乗ります。（坐电车）</li>
<li>（动作方向）田中さん<strong>に</strong>英語を教えます。（教田中英语）</li>
<li>（动作对象）先生<strong>に</strong>話します。（和老师谈话）</li>
<li>（变化结果）氷は水<strong>に</strong>なりました。（冰变成了水）</li>
<li>（基准）この製品は水<strong>に</strong>強いです。（这个制品防水）</li>
<li>（基准）私の家は駅<strong>に</strong>近いです。（我家离车站近）</li>
<li>（基准）テレビは目<strong>に</strong>悪いです。（电视对眼睛不好）</li>
<li>（行为目的）買い物<strong>に</strong>行きます。（去买东西）</li>
<li>（行为目的）食材を買い<strong>に</strong>行きます。（去买食材）</li>
<li>（原因）人の多さ<strong>に</strong>びっくりした。（人太多了吓了一跳）</li>
<li>（比例）一日<strong>に</strong>一回薬を飲みます。（每天吃一回药）</li>
<li>（被动句）先生<strong>に</strong>褒められた。（被老师表扬了）</li>
<li>（使役句）学生<strong>に</strong>答えさせた。（让学生回答）</li>
<li>（状态）上下<strong>に</strong>揺れる。（上下摇晃）</li>
<li>（敬意对象）先生<strong>に</strong>はますますご健勝のことと存じます。（祝愿老师日益健康）</li>
<li>（固定句式）この本はお読み<strong>に</strong>なりましたか？（请问有看过这本书吗？）</li>
<li>（固定句式）考え<strong>に</strong>考えて、この問題を解くことができた。（想来想去终于会做这个问题了）</li>
</ul>
<p>「に」涉及到的固定句式是相当多的，这里无法穷尽，故仅举出部分例子。</p>
<p>这里注意，「に」和「で」都能标注地点，但是其差别在于动态和静态。一般而言，存在等静态行为用「に」而其余的动态行为用「で」：</p>
<ul>
<li>（静态）部屋<strong>に</strong>猫があります。（房间里有猫）</li>
<li>（动态）部屋<strong>で</strong>勉強しています。（在房间里学习）</li>
<li>（动态）部屋<strong>で</strong>寝ます。（在房间里睡觉）</li>
</ul>
<p>可以注意到所谓的静态和动态并不是说动作执行者在物理上是否有动作，比如理论上睡觉这个动作中，人是不会在物理意义上移动的，但依然认为是动态行为，使用助词「で」。这里的静态和动态实际上更像是<strong>状态</strong>和<strong>行为</strong>的区别，也就是说，静态行为更像是在描述一个状态，在时间轴上是静止的，而动态行为则是一般的动词所描述的行为，在时间轴上是动态的。</p>
<div class="note info no-icon"><p>「に」在表达能力、可能的语句中可以标记主语：</p>
<ul>
<li>愛<strong>に</strong>できることはまだあるかい？（还有什么是爱能做到的吗？）</li>
<li>僕<strong>に</strong>は英語が話せません。（我不会说英语）</li>
</ul>
<p>不过大部分观点并不将其归为主格助词用法，因为此时「に」更应当译为“对于”，比如第二句，直译的话应当为“对我来说，英语是不会说的”，而将其译为以“我”为主语的“我不会说英语”，实际上是意译。</p>
</div>
<h2 id="领格助词主格助词の①">领格助词（主格助词）「の①」</h2>
<p>该助词用于名词与名词之间，有时也用于助词和名词之间（往往和准体助词相关），基本用于表示修饰和同位两种关系，与汉语中的“的”连用在名词之间时的含义几乎一致：</p>
<ul>
<li>（修饰）田中さん<strong>の</strong>本。（田中的书）</li>
<li>（修饰）東京へ<strong>の</strong>飛行機。（到东京的飞机）</li>
<li>（同位）友達<strong>の</strong>田中さんは来るそうだ。（我的朋友田中听说要来）</li>
</ul>
<p>「の①」也可以作为主格助词，但仅能用作从句的主格助词。可以注意到，「が①」用来标记表示情感或能力的形容词和形容动词的对象的用法，在从句中也能由「の①」代替：</p>
<ul>
<li>田中さんはあそこの背<strong>の</strong>高い男だ。（田中是那边的高高的男子）</li>
<li>字<strong>の</strong>上手な人は少なくなった。（写字好看的人越来越少了）</li>
</ul>
<p>当然，从句中的主格助词也可以使用「が①」：</p>
<ul>
<li>田中さんはあそこの背<strong>が</strong>高い男だ。（田中是那边的高高的男子）</li>
</ul>
<h2 id="补格助词へ">补格助词「へ」</h2>
<p>该助词仅有一个常用含义，即表示移动的方向：</p>
<ul>
<li>東京<strong>へ</strong>行きます。（去东京）</li>
</ul>
<p>需要注意的是表示移动方向的「へ」和「に」的区别。事实上，由于「に」的归着点的语义很强，所以在表示移动方向的时候，依然强调的是移动的最终目的地。相应地，「へ」虽然也会标注出移动目的地，但是更着重强调到达的过程，或者移动的方向。比如在电车的广播中，下面的「へ」就几乎不能用「に」代替：</p>
<ul>
<li>この電車は東京方面<strong>へ</strong>行きます。（本次列车开往东京方向）</li>
</ul>
<p>这里确实表示电车最终会到达东京，但是其更强调现在电车是在往东京方向走，不会最终到达东京但是途中绕路，甚至往东京的反方向走。</p>
<p>还有个例子，涉及到台风等不可预测的事物的移动：</p>
<ul>
<li>台風は東京<strong>へ</strong>向かっています。（台风正在向东京移动）</li>
</ul>
<p>这里几乎完全不能使用「に」，因为我们无法确准台风最终到达东京，只能说现在的状况下台风的方向是朝向东京的。</p>
<p>现代日语中「へ」和「に」在表述移动方向的语义上的区分事实上是较为模糊和暧昧的，上述规则也仅仅是出于语感上的区分。</p>
<div class="note info no-icon"><p>「へ」也有作为准体助词的应用：</p>
<ul>
<li>大阪<strong>へ</strong>の電車。（到大阪的电车）</li>
</ul>
</div>
<h2 id="补格助词まで①">补格助词「まで①」</h2>
<p>该助词仅有一个常用含义，即表示时间、地点的终点，且常常和「から①」连用：</p>
<ul>
<li>（时间）九時<strong>まで</strong>勉強します。（学习到九点）</li>
<li>（空间）北京<strong>まで</strong>飛行機で行きます。（坐飞机去北京）</li>
<li>（抽象范围）この映画は大人から子供<strong>まで</strong>人気があります。（这个电影无论大人孩子都喜欢）</li>
</ul>
<div class="note info no-icon"><p>「まで①」也有作为准体助词的应用：</p>
<ul>
<li>明日<strong>まで</strong>の会議。（开到明天的会）</li>
</ul>
</div>
<p>另外，在表示移动的时候，「まで①」和「に」以及「へ」有着相当明显的语感区别，「まで①」本质含义是表示终点，表示现阶段或者现今状况下某个范围延伸到了某个地点，比如下面的句子中「まで①」明显较「に、へ」合适：</p>
<ul>
<li>新幹線は北海道<strong>まで</strong>開通した。（开通了到北海道的新干线）</li>
<li>人類はもう月<strong>まで</strong>行きまして、未来に火星<strong>まで</strong>行くでしょう？（人类已经到达过月球了，未来也会到火星吧？）</li>
</ul>
<p>这里两个都蕴含了一个范围，第一句话是新干线开通的范围，第二句话是人类踏足过的星球的范围。这两句话事实上更像是在叙述一个范围的扩张，而非单纯的移动目的地。</p>
<p>在一般的描述移动的句子中，「まで①」的终点感也比其余两者强，其甚至比描述归着点的「に」更为强调目的地。</p>
<h2 id="补格助词より">补格助词「より」</h2>
<p>该助词的常见含义为表示比较的基准：</p>
<ul>
<li>新幹線は地下鉄<strong>より</strong>速いです。（新干线比地铁快）</li>
</ul>
<p>此外，另外一种较常见的用法是限制范围，但是常用于否定句，用于否定除某些给定项之外的所有其他可能：</p>
<ul>
<li>こうする<strong>より</strong>他には方法がない。（除此以外别无他法）</li>
<li>手術を受ける<strong>より</strong>ほかにないでしょう？（除了做手术也没别的方法了吧？）</li>
</ul>
<p>再者，「より」作为「から①」的古语残留，可以在较为正式的文本中表示起点：</p>
<ul>
<li>戦友<strong>より</strong>の手紙。（战友寄来的信）</li>
<li>七歳<strong>より</strong>入学を許可する。（满七岁后准许入学）</li>
<li>これ<strong>より</strong>会議を始めます。（现在开始开会）</li>
</ul>
<p>从第一句可见这里「より」也继承了「から①」作为准体助词的用法。</p>
<p>作为例外的惯用法，「より」可以单独使用，意义和汉语中“更”类似。这是其格助词用法的一种例外的拓展，并且常见于较为正式的文本：</p>
<ul>
<li>われわれは現状に満足せず、<strong>より</strong>よい生活を目指して努力すべきだ。（我们不应满足现状，应当为了更好的生活而努力）</li>
<li>次の会には、<strong>より</strong>多くの方々にお集まりいただきたいと思う。（下次会议，我希望能够邀请更多的嘉宾来参加）</li>
</ul>
<h2 id="宾格助词补格助词を">宾格助词（补格助词）「を」</h2>
<p>该助词的最为核心的用法是标注宾语：</p>
<ul>
<li>ご飯<strong>を</strong>食べます。（吃饭）</li>
<li>学生は図書館で本<strong>を</strong>読んでいます。（学生们在图书馆看书）</li>
</ul>
<p>其作为补格助词的另外一个重要用处是标记移动的起点和经由点，这类句子中的动词往往是描述移动的自动词：</p>
<ul>
<li>（起点）去年大学<strong>を</strong>卒業した。（去年我大学毕业）</li>
<li>（起点）田中さんは家<strong>を</strong>出て、大阪に行った。（田中离开了家去了大阪）</li>
<li>（经由点）川<strong>を</strong>泳いで、島に着いた。（游过河上了岛）</li>
</ul>
<p>另外，有时可以用于表示时间的经由：</p>
<ul>
<li>もう十時<strong>を</strong>すぎた。（已经过了十点了）</li>
<li>あの人はもう四十歳<strong>を</strong>超えている。（那人已经过了四十岁了）</li>
</ul>
<p>关于移动的起点，「を」和「から①」的对比可以简单罗列如下：</p>
<ul>
<li>起点是清晰的时候多用「を」，是宽泛的时候多用「から①」</li>
<li>起点是人体部位的时候，即使清晰也多用「から①」</li>
</ul>
<p>例句如下：</p>
<ul>
<li>（清晰）風呂<strong>を</strong>出る。（出浴）</li>
<li>（模糊）海<strong>から</strong>出る。（从海里出来）</li>
<li>（人体部位）涙は目<strong>から</strong>出る。（眼泪从眼睛里流出来）</li>
</ul>
<h1 id="接续助词">接续助词</h1>
<p>接续助词指的是用于接续两个小句的助词，用于细化两个小句之间的关系。按照接续助词所表示的两个小句之间的关系，可以将接续助词大体分为逆接、并列、因果、条件、递进五大类。然而这个分类并不是严格的，不少接续助词可以属于多个类别。</p>
<div class="note info no-icon"><p>大部分接续助词作用在两个小句之间，然而部分接续助词则大多作用在句子内部：</p>
<ul>
<li>そうであっ<strong>たり</strong>なかっ<strong>たり</strong>し<strong>ても</strong>僕には関係ないだろう。（不管是不是那样都和我没关系吧）</li>
<li>みんなさんはここに来<strong>て</strong>くれ<strong>て</strong>ありがとう。（感谢各位前来）</li>
</ul>
<p>观察上述句子中的接续助词用法，不难看出第一句话中的「たり」并不是作用于小句之间的，而是并列了若干用言构成了整体，这句话中的「ても」则真正是用在小句之间的接续助词，表达逆接。</p>
<p>第二句话中第一个「て」并不作用在小句之间，而是用来连接后面的补助动词「くれる」，第二个「て」才是作用在小句之间的接续助词表达递进。</p>
<p>总而言之，接续助词基本应用在小句之间这一原则依然成立，但是需要注意类似「し、たり・だり、て・で」等应用在句中的接续助词。事实上容易发现，这类接续助词大多表示并列关系，这和格助词「と」很类似：</p>
<ul>
<li><u>田中さん<strong>と</strong>山本さん</u><strong>が</strong>来たらしい。（田中和山本像是来过）</li>
</ul>
<p>这里的「と」和「が」实际上“不在同一层级上”，也就是说句子的分割并不是「田中さん<strong>と</strong>/山本さん<strong>が</strong>」，而是「と」作用在“内部”，把两个体言成分结合在一起构成一个整体同时被「が」引导成为主格成分。这也就是并列语义的特殊之处。</p>
</div>
<p>这里需要注意，部分接续助词接续在用言或者助动词等后面是有活用要求的。由于接续助词多接续在小句后，所以要求接续在终止形后的接续助词不会特殊说明，其他接续要求本文会详细说明。</p>
<h2 id="逆接递进关系が②">逆接、递进关系「が②」</h2>
<p>该接续助词最核心的作用是用于表示转折，即逆接语义：</p>
<ul>
<li>日本語の勉強は難しいです<strong>が</strong>、楽しいです。（学日语虽然难，但也快乐）</li>
<li>もうやってみた<strong>が</strong>、まだダメだった。（虽说已经尝试了，但还是不行）</li>
</ul>
<p>另外，从转折语义引申出来的是对比语义，用于形成前后两个小句所描述的事实之间的对比：</p>
<ul>
<li>国文の先生は四十歳を過ぎた<strong>が</strong>、数学の先生はまだ三十歳くらい。（语文老师已经四十几了，而数学老师才大概三十岁）</li>
<li>さっき赤いボタンを押すべきだった<strong>が</strong>、今は青いのを押すべきだ。（刚刚是该按红的按钮，但现在应该按蓝的）</li>
</ul>
<p>这个语义还有一种常见的用法，即直接用在句尾。这个时候，由于该助词表达逆接语义，会传达出虽然就已有状况说话人有一定的意见或者想法，但是鉴于当下状况并没有完全指明自己想法的语义：</p>
<ul>
<li>これは日本語辞書だ。中国語辞書が欲しいんだ<strong>が</strong>。（这是日语词典啊。我想要的是汉语词典啊…）</li>
<li>早く手術を受けるほうがいいんだ<strong>が</strong>。（早点做手术就好了啊…）</li>
</ul>
<p>这种时候往往会表达出对现状的不满情绪，但是由于日语独特的含蓄表达，故采用这种稍显委婉的表达方式。</p>
<p>而该助词也可以表示递进，一般而言常常用于前面的小句首先说明事情背景后，后面的小句具体陈述的场景，即起到铺垫的作用：</p>
<ul>
<li>田中さんと申します<strong>が</strong>、佐藤さんはいらっしゃいますか？（敝人田中，请问佐藤先生在吗？）</li>
<li>昨日あの寿司屋さんに行ってみた<strong>が</strong>、なかなかいい店だよ。（昨天去了那家寿司店，还挺不错的呢）</li>
</ul>
<p>这种时候，「が②」可以不翻译出来。</p>
<h2 id="因果关系から②">因果关系「から②」</h2>
<p>先前在讲解格助词「から①」的时候已经提到，作为接续助词的「から②」几乎仅能表示因果关系，并且这种因果关系往往是出于说话人主观：</p>
<ul>
<li>危ない<strong>から</strong>窓の外へ手を出さないでください。（因为危险，所以别把手伸出窗外）</li>
<li>安い<strong>から</strong>たくさん買った。（因为便宜，所以买了很多）</li>
</ul>
<div class="note info no-icon"><p>尝试对比词组「日曜日から」和「日曜日だから」，可以发现前者直接接续在名词后，是表时间起点的格助词用法，而后者接续在小句后，是表主观原因的接续助词用法。其对比见下述句子：</p>
<ul>
<li>日曜日<strong>から</strong>、学校を休む。（从周日开始不上学）</li>
<li>日曜日<strong>だから</strong>、公園に多くの人がいる。（因为是周日，公园里有很多人）</li>
</ul>
<p>「から」作为格助词和接续助词之间的语义差别较大，故一定要注意区分。一般而言直接接续在名词成分后面则为格助词用法，除此之外多是接续助词用法。</p>
</div>
<div class="note info no-icon"><p>准体助词这个概念对极少数接续助词（几乎只有「から②」）依然存在：</p>
<ul>
<li>学校を休むのは風邪を引いた<strong>から</strong>だ。（不上学是因为感冒了）</li>
<li>彼らは離婚したのは不倫だ<strong>から</strong>らしい。（他俩离婚听说是因为出轨）</li>
</ul>
<p>类似对格助词中准体助词的用法的处理，本文将这类用法依然视作接续助词的一种例外用法。</p>
</div>
<h2 id="逆接递进关系けれどけどけれども">逆接、递进关系「けれど・けど・けれども」</h2>
<p>该助词几乎和「が②」用法一致，除了「が②」直接用在句末的用法外，其余用法几乎可以直接替换「が②」。区别在于「が②」相对于「けれど・けど・けれども」稍显正式，后者基本不可用于正式行文而前者可以：</p>
<ul>
<li>（逆接）早速電話をかけてみた<strong>けど</strong>、誰も出なかった。（我马上打电话过去了，但是没人接）</li>
<li>（对比）英語が上手だ<strong>けど</strong>、日本語は苦手だ。（虽说英语很好，但是日语不太行）</li>
<li>（递进）あまりおいしくないかもしれません<strong>けれど</strong>、どうぞ召し上がってください。（虽说可能并不好吃，但也请慢用）</li>
</ul>
<h2 id="并列因果关系し">并列、因果关系「し」</h2>
<p>该助词最核心的用法是形成并列文：</p>
<ul>
<li>景色はいい<strong>し</strong>、気候は温和だ。（景色很好，气候也温和）</li>
<li>田中さんは英語が上手だ<strong>し</strong>、フランス語も上達している。（田中英语很好，法语也在进步）</li>
</ul>
<p>此外，其也可以用于表示因果关系，常常用于并列多个原因：</p>
<ul>
<li>朝は早い<strong>し</strong>夜は遅い<strong>し</strong>、子どもたちの顔を見ることはほとんどない。（每天早上要早起，晚上很晚才回，几乎见不着孩子）</li>
<li>あの人は顔がいい<strong>し</strong>、頭もいい<strong>し</strong>、そして優しい<strong>し</strong>、本当に申し分ない人だよ。（那人又好看又聪明还温柔，真的是毫无缺点的人哦）</li>
</ul>
<p>如果表因果关系的时候仅列举出一个原因，那么一般是从若干个原因中挑选出最主要的原因来陈述，也就是说一般暗含有还有其他原因的语感。这种用法也是由于该助词最主要用法是并列多个事物：</p>
<ul>
<li>年も取った<strong>し</strong>、無理な仕事をやめるほうがいい。（年纪也大了，困难的工作还是不做为好）</li>
<li>まだ若いんだ<strong>し</strong>、やり直してみない？（既然还年轻，不再试试吗？）</li>
</ul>
<p>在近似于固定句式的「～あるまいし、～なかろうし」之中，往往还蕴含有责备、轻视的语气。然而随着「まい」和「なかろう」使用频率下降，这类用法也被其他句式，如「～のに、～くせに」所代替：</p>
<ul>
<li>一人で行くわけでは<strong>あるまいし</strong>、心配は無用です。（我也多半不会一个人去，不必要担心）</li>
<li>彼は噓を言うのは<strong>なかろうし</strong>、聞き入れたほうがよかったかもしれない。（既然他也不一定是说谎，说不定当初听进去就好了）</li>
</ul>
<p>目前「し」和「から②」在表示主观因果方面的口语使用频率正在逐渐接近。</p>
<p>另外，该助词也可以直接用在句末，往往有表示原因的语气：</p>
<ul>
<li>旅行は行きたいけど、まだ体は十分じゃないだ<strong>し</strong>な。（虽说想旅行，但身体还不太允许啊）</li>
<li>これを覚える必要がないよ、試験に出ない<strong>し</strong>ね。（这个不记也行，毕竟考试又不考）</li>
</ul>
<p>而有的时候，也可以用于表达对现状不满的语气，是和「～のに、～くせに」相当的一种语气：</p>
<ul>
<li>俺の提案のほうがいい<strong>し</strong>。（明明我的方案更好）</li>
<li>俺が一番早いんだ<strong>し</strong>。（明明我是最早的）</li>
</ul>
<h2 id="并列关系たりだり">并列关系「たり・だり」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连用形（动词为五段动词时使用第二连用形）后且若动词原形以「ぐ、む、ぬ、ぶ」结尾则浊化，如「<strong>書い</strong>たり、<strong>泳い</strong>だり、<strong>飛ん</strong>だり、<strong>られ</strong>たり」</li>
<li>接续在形容词（类形容词助动词）第二连用形后且不浊化，如「<strong>寒かっ</strong>たり、<strong>なかっ</strong>たり」</li>
<li>接续在形容动词（类形容动词助动词）第二连用形后且不浊化，如「<strong>好きだっ</strong>たり、<strong>だっ</strong>たり」</li>
</ul>
<p>该助词一般用于并列用言，且往往在并列完毕后连接动词「する」，表示上述并列的动作或状态交替发生。当然，并列完毕后使用其他用言或者结句也是可行的，但是后接「する」占据了相当大的比例：</p>
<ul>
<li>夏休みは海に行っ<strong>たり</strong>、山を登っ<strong>たり</strong>して過ごしました。（暑假就去去海边爬爬山这样过了）</li>
<li>天気は暖かかっ<strong>たり</strong>、寒かっ<strong>たり</strong>して定まらない。（天气一会暖和一会寒冷完全稳定不下来）</li>
<li>神は本当だっ<strong>たり</strong>、存在しなかっ<strong>たり</strong>して、どうでもいい。（神是真的还是不存在，怎样都和我无关）</li>
</ul>
<p>如果并列仅出现一项，则这一项是说话人所选出的具有代表性的动作或状态，暗含还有与之类似的动作或状态：</p>
<ul>
<li>噓をつい<strong>たり</strong>してはいけない。（说谎这类事不能做）</li>
<li>ここで泣い<strong>たり</strong>するものではない。（现在不是哭的时候）</li>
</ul>
<div class="note info no-icon"><p>「たり」表示的并列事实上要求每一项之后都需要接续该助词。这和「と」不一样，「と」表示的并列是在除了最后一项之外的每一项后接续该助词，或者说在每一项之间加入该助词。比较下述例句：</p>
<ul>
<li>これ<strong>と</strong>それ<strong>と</strong>あれ</li>
<li>泣い<strong>たり</strong>笑っ<strong>たり</strong></li>
</ul>
<p>然而「たり」的这一并列要求在口语和不正式文本中正在消逝，例如日版 maimai DX 中启动提示语音如下：</p>
<ul>
<li>（△）強く叩い<strong>たり</strong>なぞらないでください。（请不要大力拍打或滑动哟）</li>
<li>（○）強く叩い<strong>たり</strong>なぞっ<strong>たり</strong>しないでください。（请不要大力拍打或滑动哟）</li>
</ul>
<p>上述第一句为实际采用的语音，可见这一并列规则并没有被完全严格遵守。</p>
</div>
<h2 id="并列递进因果等关系てで">并列、递进、因果等关系「て・で」</h2>
<p>该助词完全可以称为现代日语中最重要的助词，其用法相当繁杂且多样，本文仅作简单的介绍。</p>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连用形（动词为五段动词时使用第二连用形）后且若动词原形以「ぐ、む、ぬ、ぶ」结尾则浊化，如「<strong>書い</strong>て、<strong>泳い</strong>で、<strong>飛ん</strong>で、<strong>られ</strong>て」</li>
<li>接续在形容词（类形容词助动词）第一连用形后且不浊化，如「<strong>寒く</strong>て、<strong>なく</strong>て」</li>
<li>「ない」也可以使用终止形接续且浊化形成「<strong>ない</strong>で」</li>
<li>「ます」使用连用形接续且不浊化形成「<strong>まし</strong>て」</li>
</ul>
<p>词语接续助词「て・で」后的形式，一般称之为该词语的<strong>て形</strong>。</p>
<p>另外，形容动词（类形容动词助动词）的第一连用形，以及不规则助动词的「そうで」也可以看作其て形。</p>
<p>该助词的一种用法是表示动作的并列，不过和「たり・だり」不同，这类动作并列是有顺序的，即动作是顺序发生的或者有先后关系的：</p>
<ul>
<li>中学校を卒業し<strong>て</strong>大学生になる。（中学毕业后成为大学生）</li>
<li>夏が過ぎ<strong>て</strong>秋が来る。（夏去秋来）</li>
<li>デパートに行っ<strong>て</strong>、買い物をし<strong>て</strong>帰った。（去商场，买东西后回家）</li>
</ul>
<p>如果并列的是形容词或者形容动词，则一般表示事物同时具有这些性质：</p>
<ul>
<li>この服は<u>きれいで</u>、安く<strong>て</strong>、デザインがいいです。（这件衣服又漂亮，又便宜，设计也好看）</li>
<li>我が国は広く<strong>て</strong>、物産も豊かです。（我国幅员辽阔，物产丰盈）</li>
</ul>
<p>此外，该助词还能表示原因：</p>
<ul>
<li>雨が降っ<strong>て</strong>涼しくなる。（下了雨，天气变凉爽了）</li>
<li>風邪を引い<strong>て</strong>学校を休む。（因为感冒所以没去学校）</li>
</ul>
<p>同时，该助词还能表示手段，这是动作并列的一种引申用法：</p>
<ul>
<li>立っ<strong>て</strong>答えなさい。（请站起来回答）</li>
<li>手をたたい<strong>て</strong>賛成する。（鼓掌表示赞同）</li>
</ul>
<p>另外，该助词用在句末可以用于表示轻微的命令语气：</p>
<ul>
<li>もうちょっと急い<strong>で</strong>。（再快点）</li>
<li>ちゃんと話を聞い<strong>て</strong>。（认真听我说话）</li>
<li>そんなことをしない<strong>で</strong>。（别做这种事）</li>
</ul>
<div class="note info no-icon"><p>我们可以注意到「ない」接续「て・で」的时候有「なくて」和「ないで」两种选择。这里的「ない」既可以是助动词也可以是形容词。</p>
<p>这两者的区别在于，「ないで」几乎仅能用在助动词的「ない」之后，这意味着「ない」前面的词语必然是动词的未然形。「ないで」一般倾向于描述某一个动作没有做，也就是更倾向于动作这个概念：</p>
<ul>
<li>ここに入ら<strong>ないで</strong>ください。（请不要进入此处）</li>
<li>歯を磨か<strong>ないで</strong>学校に来た。（没刷牙就来学校了）</li>
</ul>
<p>事实上，可以将「○○ないで」理解成「○○て」的否定，如「読まないで」类似「読んで」的否定式。从而「ないで」具有动词て形的所有语义，包含动作并列、因果、命令等。比如上述的第二句，事实上很类似于动作顺序发生这个语义。</p>
<p>此外需要注意，「ないで」往往不独立成句，如果直接用「ないで」结句，则与动词て形位于末尾含义一致，即表示轻微的命令：</p>
<ul>
<li>壁に落書きをし<strong>ないで</strong>。（别在墙上乱涂乱画）</li>
<li>余計なことを考え<strong>ないで</strong>。（别想多余的事情）</li>
</ul>
<p>而「なくて」在语感上更倾向于形容词，也就是对于动作没有做，或者并不是某种状态这种状况作出评论：</p>
<ul>
<li>あなたは来<strong>なくて</strong>、残念です。（你没来真遗憾）</li>
<li>漢字が読め<strong>なくて</strong>、不合格になった。（不会读汉字所以没及格）</li>
<li>料理はおいしく<strong>なくて</strong>食べたくない。（菜不好吃所以不想吃）</li>
</ul>
<p>也就是说「なくて」更像是形容词て形，是用来描述状态的。</p>
<p>作为题外话，「ないで」和「なくて」的对立事实上很像「ずに」和「ず」的对立，而上述大部分例句实际上可以等价用「ずに」和「ず」代替：</p>
<ul>
<li>歯を磨か<strong>ずに</strong>学校に来た。（没刷牙就来学校了）</li>
<li>あなたは来<strong>ず</strong>、残念です。（你没来真遗憾）</li>
<li>漢字が読め<strong>ず</strong>、不合格になった。（不会读汉字所以没及格）</li>
</ul>
<p>不过无论如何「ず」作为古语残余的助动词，其经常用于正式行文，所以日常口语中使用「ずに」和「ず」事实上较为生硬。</p>
</div>
<p>该助词的一大用法在于其可以接续大量的补助动词辅助表意，这里不具体展开。</p>
<h2 id="逆接关系てもでも">逆接关系「ても・でも」</h2>
<p>该助词接续在用言和助动词后的接续要求与「て・で」完全一致，可以视作接续助词「て・で」和副助词「も」的连用。需要注意的是，形容动词（类形容动词助动词）接续该助词的时候直接使用第一连用形接续「も」即可。</p>
<p>该助词最重要的含义就是表示转折：</p>
<ul>
<li>明日雨が降っ<strong>ても</strong>、イベントは行います。（就算明天下雨，活动照常进行）</li>
<li>親に反対され<strong>ても</strong>、僕たちは結婚した。（就算双亲反对，我们也结婚了）</li>
<li>辛く<strong>ても</strong>我慢して食べた。（就算很辣，也忍着吃下去了）</li>
<li>これは<u>きれいで</u><strong>も</strong>、値段がすごく高い。（虽然这个很好看，但是也太贵了）</li>
</ul>
<p>该助动词常见用于构成「～てもいい」句式，表示应允某种行为，用在疑问句中则常常表示委婉的请求：</p>
<ul>
<li>ここで座っ<strong>てもいい</strong>ですか？（请问能坐在这里吗）</li>
<li>わざわざうちに来なく<strong>てもいい</strong>です。（倒也不必麻烦你来我家）</li>
</ul>
<h2 id="条件关系と②">条件关系「と②」</h2>
<p>该助词常用于顺接，表示在某种既定条件下，事物顺理成章的发展方向：</p>
<ul>
<li>春になる<strong>と</strong>、桜が咲く。（春天来了，樱花开了）</li>
<li>六を三で割る<strong>と</strong>二となる。（六除以三得二）</li>
<li>ウイルスが人体に入る<strong>と</strong>病気を起こす。（病毒进入人体就会引发病症）</li>
</ul>
<p>此外，该助词也能表示假定条件：</p>
<ul>
<li>早く行かない<strong>と</strong>、間に合わない。（再不快点就赶不上了）</li>
<li>この線路を選ぶ<strong>と</strong>、かなりのリスクも伴う。（选择这条路伴随着很大的风险）</li>
</ul>
<p>由于该助词可以表示事物顺理成章的发展，所以引申出表示很紧密的动作前后关系的作用，这类表达往往表示突然的语义：</p>
<ul>
<li>いつものように散歩している<strong>と</strong>、「助けて」という声が聞こえた。（正在像平时一样散着步的时候，突然听到了呼救的声音）</li>
<li>勉強している<strong>と</strong>、友達が来た。（正在学习的时候朋友来了）</li>
</ul>
<p>上述两句话也体现了该助词对时态的要求，即使上述语句都在描述过去的事情，但该助词前面的动词均应当使用现在时。</p>
<p>事实上可以看出，该助词实际上表示条件的语义并不强，更多的是在叙述事物发展的方向。</p>
<h2 id="并列关系ながら①">并列关系「ながら①」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连用形（动词为五段动词时使用第一连用形）后，如「<strong>書き</strong>ながら、<strong>泳ぎ</strong>ながら、<strong>飛び</strong>ながら、<strong>られ</strong>ながら」</li>
</ul>
<p>该助词的主要含义是表示动作同时发生，与汉语中“一边…一边…”语义近似：</p>
<ul>
<li>お茶を飲み<strong>ながら</strong>、新聞を読んでいる。（边喝茶边看报）</li>
<li>テレビを見<strong>ながら</strong>、ご飯を食べる。（边看电视边吃饭）</li>
</ul>
<h2 id="逆接关系ながら②">逆接关系「ながら②」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在表示存在的动词「ある、いる」的连用形（动词为五段动词时使用第一连用形）后，如「<strong>あり</strong>ながら、<strong>い</strong>ながら」
<ul>
<li>作为这一规则的拓展，「～ている、～である」句式后接续该助词的时候形成「～て<strong>い</strong>ながら、～で<strong>あり</strong>ながら」</li>
</ul></li>
<li>接续在表示称谓、思维的动词「言う、思う、考える」等的连用形（动词为五段动词时使用第一连用形）后，如「<strong>言い</strong>ながら、<strong>思い</strong>ながら、<strong>考え</strong>ながら」
<ul>
<li>此时「ながら」多和副助词「も」连用形成「ながらも」</li>
</ul></li>
<li>接续在形容词（类形容词助动词）的终止形后，如「<strong>高い</strong>ながら、<strong>ない</strong>ながら」</li>
<li>接续在形容动词（类形容动词助动词）的词干后，如「<strong>好き</strong>ながら、<strong>そう</strong>ながら」</li>
<li>接续在体言原形后，如「<strong>昔</strong>ながら」</li>
</ul>
<p>该助动词的主要含义是表现转折，并且语气一般较为强烈，即相较于「が②」或者「けれども」等相对委婉的转折而言强烈，其语气近似于「～のに、～のくせに」等表达：</p>
<ul>
<li>知ってい<strong>ながら</strong>、知らないふりしている。（明明知道，却一直装不知道）</li>
<li>体が小さい<strong>ながら</strong>、なかなか力がある。（虽说身材小，但是力气也真大）</li>
<li>このカメラは小型<strong>ながら</strong>、よく映る。（这相机虽说小型，但是拍照效果很好）</li>
<li>難しいと言い<strong>ながら</strong><u>も</u>、テストで満点を取った。（虽然一直说难，但还是考了满分）</li>
</ul>
<div class="note info no-icon"><p>「ながら」无论是表示动作并列还是逆接，都有不少固定短语，这里列出部分：</p>
<ul>
<li>（动作并列）いつもながら、生まれながら、涙ながら</li>
<li>（逆接）残念ながら、及ばずながら、失礼ながら、お粗末ながら、われながら</li>
</ul>
<p>这些词语部分甚至不符合接续要求，理应作为固定词组或者单独的一个单词处理。然而这些词语的合成词痕迹过于明显，本文依然将其视为助词「ながら」的应用，但是是一类例外。</p>
</div>
<h2 id="因果关系ので">因果关系「ので」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连体形后，如「<strong>書く</strong>ので、<strong>泳ぐ</strong>ので、<strong>飛ぶ</strong>ので、<strong>られる</strong>ので」</li>
<li>接续在形容词（类形容词助动词）连体形后，如「<strong>高い</strong>ので、<strong>ない</strong>ので」</li>
<li>接续在形容动词（类形容动词助动词）连体形后，如「<strong>好きな</strong>ので、<strong>ような</strong>ので」</li>
<li>可以与不规则助动词形成「<strong>です</strong>ので、<strong>ます</strong>ので、<strong>た</strong>ので、<strong>ん</strong>ので」等词组，但是不可以接续在表示推量或者意志的助动词「う、まい」之后</li>
<li>通过助动词「だ」的连体形可以接续在体言原形后，如「<strong>中国人</strong><u>な</u>ので」</li>
</ul>
<p>该助词的核心语义是表达客观原因，其客观原因极强，导致含有主观因素（愿望、命令、推测、请求等）的类似「う、まい」等表达均很少与其连用：</p>
<ul>
<li>ちょっと外出します<strong>ので</strong>、留守をお願いします。（我得出个门，得麻烦你看个家）</li>
<li>電車の事故がありました<strong>ので</strong>、遅れたのです。（因为电车出事故了，所以迟到了）</li>
<li>中国人な<strong>ので</strong>、日本語が下手だ。（因为我是中国人，所以日语不太好）</li>
</ul>
<p>不过「～たいので」的表达一定程度上是可以接受的，这种时候与其称之为因果关系，更多时候近似于表达一种为了某种目标而做某一件事的语感：</p>
<ul>
<li>試験に合格したい<strong>ので</strong>、いつも勉強してます。（为了通过考试，我一直在学习）</li>
</ul>
<p>另外，由于主观性和客观性的对立，「から」可以和表示不确定的助词「か」连用而「ので」不能：</p>
<ul>
<li>昨日仕事やりすぎた<strong>からか</strong>、腰がすごく痛い。（昨天怕不是工作过头了，现在腰好疼）</li>
</ul>
<div class="note info no-icon"><p>「ので」在口语中经常约音为「んで」：</p>
<ul>
<li>中国人な<strong>んで</strong>、日本語が下手だ。（因为我是中国人，所以日语不太好）</li>
<li>試験に合格したい<strong>んで</strong>、いつも勉強してる。（为了通过考试，我一直在学习）</li>
</ul>
</div>
<h2 id="逆接关系のに">逆接关系「のに」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连体形后，如「<strong>書く</strong>のに、<strong>泳ぐ</strong>のに、<strong>飛ぶ</strong>のに、<strong>られる</strong>のに」</li>
<li>接续在形容词（类形容词助动词）连体形后，如「<strong>高い</strong>のに、<strong>ない</strong>のに」</li>
<li>接续在形容动词（类形容动词助动词）连体形后，如「<strong>好きな</strong>のに、<strong>ような</strong>のに」</li>
<li>可以与不规则助动词形成「<strong>です</strong>のに、<strong>ます</strong>のに、<strong>た</strong>のに、<strong>ん</strong>のに」等词组，「<strong>う</strong>のに、<strong>まい</strong>のに」相对而言较为少见</li>
<li>通过助动词「だ」的连体形可以接续在体言原形后，如「<strong>中国人</strong><u>な</u>のに」</li>
</ul>
<p>该助词的核心语义是表达说话人对现状不满的语义，一般表达现状不符合预期的不满、遗憾、惊讶语气：</p>
<ul>
<li>大学生な<strong>のに</strong>、そんな小学生レベルの問題も解けないか？（明明是大学生，连这种小学生等级的问题都做不出来吗？）</li>
<li>外は寒い<strong>のに</strong>、店内はエアコンがあるので暖かい。（外面虽然很冷，但是店里有空调就很暖和）</li>
<li>まだ彼女のことが好きな<strong>のに</strong>、なぜそんなひどいことしたの？（明明你还喜欢她，为什么要做这么过分的事？）</li>
<li>試合に勝った<strong>のに</strong>、全然嬉しくない。（明明赢了比赛，却开心不起来）</li>
</ul>
<h2 id="条件关系ば">条件关系「ば」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在任何具有假定形活用的用言或者助动词的假定形后，如「<strong>書け</strong>ば、<strong>られれ</strong>ば、<strong>高けれ</strong>ば、<strong>なけれ</strong>ば、<strong>好きなら</strong>ば、<strong>ようなら</strong>ば、<strong>ますれ</strong>ば、<strong>たら</strong>ば、<strong>ね</strong>ば」
<ul>
<li>形容动词（类形容动词助动词）以及助动词「た」的假定形接续「ば」后会形成「○○ならば、○○たらば」，这种结构中的「ば」倾向于省略</li>
</ul></li>
</ul>
<div class="note info no-icon"><p>「○○ならば、○○たらば」结构中「ば」可省略的原因的一种解释如下。</p>
<p>「なら、たら」假定形在成形过程中实际上已经吞并了助词「ば」，如古语的ナリ活用形容动词的假定形（已然形）语尾事实上是「なれ」，而现代日语的「なら」实际上是「なれ」接续「ば」后约音形成的，所以再在「なら」后面加「ば」实际上是重复的。但是为了让现代日语语法连贯，即假定形之后都可以加「ば」，「ならば、たらば」这种表达也是允许的，但是会显得不自然。但是近年来「ならば」在部分条件下也在慢慢被人接受。</p>
</div>
<p>该助词的核心语义是表达假定条件：</p>
<ul>
<li>素人なのに、背がそんなに高くなけれ<strong>ば</strong>バスケ部に入部は全然できないだろう？（明明还是新手，要不是个子那么高估计也进不了篮球部）</li>
<li>余った食材があれ<strong>ば</strong>、晩ご飯は自分で作ろう。（要是还有多的食材的话，晚饭就自己做吧）</li>
</ul>
<p>不过该助词表达既定条件也是可行的，但是相对较少，且多出现在熟语等场景中：</p>
<ul>
<li>捨てる神あれ<strong>ば</strong>拾う神あり。（天无绝人之路）</li>
<li>備えあれ<strong>ば</strong>憂いなし。（有备无患）</li>
</ul>
<p>此外，在「～いえば、～によれば」等表达中，该助词表达条件的语义较为微弱：</p>
<ul>
<li>そう<strong>いえば</strong>、昨日はあいつを見たんだ。（这么说的话，昨天我看见他了）</li>
<li>情報<strong>によれば</strong>、敵は北にいる。（根据情报，敌人在北方）</li>
</ul>
<div class="note info no-icon"><p>现在，现代日语中用于表达条件的四大表达方式终于全部涉及，即「と、ば、たら、なら」，现在简单介绍这四种表达的区别。</p>
<p>首先，「と」表示条件的语义是微弱的，其更一般用于表述事物的发展方向。所以其常见的使用场景为：</p>
<ul>
<li>描述反复的、恒常的、符合自然规律的条件</li>
<li>描述过去所发生的事情</li>
<li>描述发现</li>
</ul>
<p>而第二、三种用法是其他三者均不具有的。这三种用法的例句如下：</p>
<ul>
<li>（恒常）冬になる<strong>と</strong>、雪が降る。（冬天到了就会下雪）</li>
<li>（过去）目を覚ます<strong>と</strong>、部屋に知らない人がい<u>た</u>。（我醒来后发现房间里有不认识的人）</li>
<li>（发现）改札を出る<strong>と</strong>、赤い壁が見える。（从出站口出来就能看见一面红墙）</li>
</ul>
<p>由于其条件语义不强而描述事物前后承接关系的语义较强，其后句很难描述一个虚构的事件，如命令、劝诱等涉及到主观虚构的动作：</p>
<ul>
<li>（○）授業が終わる<strong>と</strong>、塾に行く。（上完课去补习班）</li>
<li>（×）授業が終わる<strong>と</strong>、プールに行こう！（上完课我们去游泳吧！）</li>
<li>（×）授業が終わる<strong>と</strong>、職員室に来なさい！（上完课来办公室一趟！）</li>
</ul>
<p>其次，「ば」表示假定条件的语义是强烈的，其表示既定条件等已经几乎仅存在于熟语。对应到汉语的话，其表达假定条件的时候和“如果”等虚词语气相近：</p>
<ul>
<li>君とまた同じクラスになれれ<strong>ば</strong>いいです。（要是还能和你在一个班就好了）</li>
<li>この作業ができるようになれ<strong>ば</strong>、お前はもう一人前だ。（如果这个工作你也会做了，你也算是独当一面了）</li>
</ul>
<p>「ば」的后句也不常出现命令、劝诱，然而如果前句使用形容词、形容动词或者「いる、ある」等描述状态的动词接续的「ば」，则可以酌情允许命令、劝诱的出现：</p>
<ul>
<li>（×）外に出れ<strong>ば</strong>、必ずマスクをつきなさい。（要是外出的话，一定要戴口罩）</li>
<li>（○）彼女が好きではなけれ<strong>ば</strong>、曖昧な態度を止めて！（如果你不喜欢她的话，就别玩暧昧！）</li>
</ul>
<p>「ば」不应当用于描述过去的事实，这类描述应当使用「と」：</p>
<ul>
<li>（×）昨日、部屋のスイッチを押せ<strong>ば</strong>、すぐに電気がつきました。（昨天按下房间里的开关后，马上就来电了）</li>
<li>（○）昨日、部屋のスイッチを押す<strong>と</strong>、すぐに電気がつきました。（昨天按下房间里的开关后，马上就来电了）</li>
</ul>
<p>之后，「たら」在表示假定方面，很大程度上和「ば」一致：</p>
<ul>
<li>君とまた同じクラスになれ<strong>たら</strong>いいです。（要是还能和你在一个班就好了）</li>
<li>この作業ができるようになっ<strong>たら</strong>、お前はもう一人前だ。（如果这个工作你也会做了，你也算是独当一面了）</li>
</ul>
<p>不一样的地方在于，「たら」之后可以出现命令、劝诱等主观动作：</p>
<ul>
<li>休みになっ<strong>たら</strong>、一緒に旅行しようぜ。（放假的话一起去旅游吧）</li>
</ul>
<p>另外，相较于「と」用于形容恒常条件，「たら」更倾向于单次、特定：</p>
<ul>
<li>明日は雨が降っ<strong>たら</strong>、大会を中止します。（明天下雨的话，就停办大会）</li>
</ul>
<p>最后，「なら」在假定方面与先前各个词语亦差别不大，并且之后可以出现命令、劝诱等主观动作：</p>
<ul>
<li>ずっと家にいる<strong>なら</strong>、少し家事を手伝って。（一直在家的话，也稍微帮着做做家务吧）</li>
</ul>
<p>而「なら」最不同的一点在于，其不强调时间关系，也就是说后项甚至可以发生在前项之前：</p>
<ul>
<li>乗る<strong>なら</strong>、飲むな。（开车就别喝酒）</li>
</ul>
<p>这里“开车”这一动作显然是在“喝酒”之后的，然而在句子中却在其之前。</p>
</div>
<h2 id="逆接关系ものの">逆接关系「ものの」</h2>
<p>该助词接续在用言和助动词后的接续要求为：</p>
<ul>
<li>接续在动词（类动词助动词）连体形后，如「<strong>書く</strong>ものの、<strong>泳ぐ</strong>ものの、<strong>飛ぶ</strong>ものの、<strong>られる</strong>ものの」</li>
<li>接续在形容词（类形容词助动词）连体形后，如「<strong>高い</strong>ものの、<strong>ない</strong>ものの」</li>
<li>通过补助动词「ある」接续在形容动词（类形容动词助动词）第一连用形后，如「<strong>好きで</strong><u>ある</u>ものの、<strong>ようで</strong><u>ある</u>ものの」
<ul>
<li>形容动词（类形容动词助动词）亦可直接使用连体形接续，如「<strong>好きな</strong>ものの、<strong>ような</strong>ものの」</li>
</ul></li>
<li>可以与不规则助动词形成「<strong>た</strong>ものの」等词组</li>
<li>通过「である」可以接续在体言原形后，如「<strong>中国人</strong><u>である</u>ものの」</li>
</ul>
<p>该助词的核心语义是表达，在某个<strong>既定事实</strong>的基础上，与此相背的事实或者主观态度：</p>
<ul>
<li>東大卒業した<strong>ものの</strong>、仕事はまだ見つからない。（虽说是东大毕业，但现在也还没找到工作）</li>
<li>予約した<strong>ものの</strong>、行くかどうかまだ迷っている。（虽说已经预约了，但是还在考虑到底去不去）</li>
<li>彼は言葉遣いが丁寧である<strong>ものの</strong>、態度があんまりよくないので印象が悪い。（他用词虽说委婉，但是态度实在不算好，所以对他印象不怎么样）</li>
<li>今の会社は給料が安い<strong>ものの</strong>満足している。（虽说现在公司工资不算高，但是也算满足）</li>
</ul>
<h2 id="逆接关系ものを">逆接关系「ものを」</h2>
<ul>
<li>接续在动词（类动词助动词）连体形后，如「<strong>書く</strong>ものを、<strong>泳ぐ</strong>ものを、<strong>飛ぶ</strong>ものを、<strong>られる</strong>ものを」</li>
<li>接续在形容词（类形容词助动词）连体形后，如「<strong>高い</strong>ものを、<strong>ない</strong>ものを」</li>
<li>通过补助动词「ある」接续在形容动词（类形容动词助动词）第一连用形后，如「<strong>好きで</strong><u>ある</u>ものを、<strong>ようで</strong><u>ある</u>ものを」
<ul>
<li>形容动词（类形容动词助动词）亦可直接使用连体形接续，如「<strong>好きな</strong>ものを、<strong>ような</strong>ものを」</li>
</ul></li>
<li>可以与不规则助动词形成「<strong>た</strong>ものを」等词组</li>
<li>通过「である」可以接续在体言原形后，如「<strong>中国人</strong><u>である</u>ものを」</li>
</ul>
<p>该助词的核心语义是表达说话人所期望的事情实际上落空的负面态度，此外，该助动词省略后半句，直接用在句尾也是可行的，表示说话人对前半句所表达的事情落空的遗憾情感：</p>
<ul>
<li>わからなかったら聞けばいい<strong>ものを</strong>、一人でするからそんな失敗をしてしまうんだな。（明明有不会的问就行了，偏要一个人做才弄成这副烂摊子）</li>
<li>インターネットで簡単に済む<strong>ものを</strong>、わざわざ電話で予約するなんてずいぶん古いよ。（明明网上预约就能搞定，大费周章电话预约还真是古板）</li>
<li>もっと早く医者に行けばよかった<strong>ものを</strong>。（明明早点去看医生就好了的）</li>
</ul>
<h1 id="副助词">副助词</h1>
<h2 id="副助词概况与应用场景">副助词概况与应用场景</h2>
<p>副助词，顾名思义，是一类用来辅助表达含义的助词。一般而言，副助词除了单独使用，还经常和其他助词联合使用表达更加丰富的含义。并且，副助词作为准体助词的用法更为普遍。在部分语法观点中，副助词仅有准体助词的用法，而「は」等无准体助词用法的助词则被归类为<strong>系助词</strong>（大部分承认系助词分类的语法观点中，系助词一般而言指的是「は、も、でも、しか、こそ、さえ、すら」）。</p>
<p>这里尤其需要提到的是格助词和副助词的连用准则。事实上由于除了格助词、副助词之外，日语助词也就剩下用于小句之间的接续助词和用于句末的终助词了，所以讨论格助词和副助词的连用规则事实上近似于讨论日语中助词连用的所有可能。这里本文的参考论文为：</p>
<ul>
<li>https://www2.ninjal.ac.jp/past-events/2009_2021/event/specialists/project-meeting/files/JCLWorkshop_no3_papers/JCLWorkshop_No3_02.pdf</li>
</ul>
<p>首先明确讨论的助词范围，本文认为格助词包括：</p>
<ul>
<li><strong>が</strong>、<strong>から</strong>、<strong>で</strong>、<strong>と</strong>、<strong>に</strong>、<strong>の</strong>、<strong>へ</strong>、<strong>まで①</strong>、<strong>より</strong>、<strong>を</strong></li>
</ul>
<p>副助词包括：</p>
<ul>
<li>か、きり、<strong>くらい・ぐらい</strong>、<strong>こそ</strong>、<strong>さえ</strong>、<strong>しか</strong>、<strong>すら</strong>、<strong>だけ</strong>、<strong>でも</strong>、とか、<strong>など・なんて</strong>、なり、<strong>のみ</strong>、<strong>は</strong>、<strong>ばかり</strong>、<strong>ほど</strong>、<strong>まで②</strong>、<strong>も</strong>、や</li>
</ul>
<p>其中加粗的是参考论文所讨论的助词范围，可见除了「きり、なり」等具有一定分类争议的助词外，大部分助词均纳入了讨论。</p>
<p>首先，参考论文将除了「の」的格助词分为两类，即<strong>强格助词</strong>和<strong>弱格助词</strong>，分类标准为是否具有准体助词用法。事实上，本文也就相关问题作过讨论，最终得出了与参考论文一致的结论：</p>
<ul>
<li>强格助词：が、に、を</li>
<li>弱格助词：から、で、と、へ、まで①、より</li>
<li>领格助词：の</li>
</ul>
<p>格助词的强弱事实上暗含了其所标记的格对修饰成分的容忍程度。例如说主格助词「が」、宾格助词「を」、领格助词「の」很难容忍其他修饰成分，而「に」则是补格助词中格助词性质相对较强的一个。事实上，「に」对修饰成分的容忍程度依然较「が、を」高。具体而言，「が」之后不容许任何其他助词出现，「を」之后仅容忍副助词「も」以构成「をも」这一已经相当少见的固定搭配，而「に」之后几乎容忍所有除了「ほど」的副助词，如「には、にも、にまで」等等都是常见表达。</p>
<p>按照是否具有准体助词用法为标准，副助词也可以分为<strong>强副助词</strong>和<strong>弱副助词</strong>：</p>
<ul>
<li>强副助词：しか、でも、は、も</li>
<li>弱副助词：くらい・ぐらい、こそ、さえ、すら、だけ、など・なんて、のみ、ばかり、ほど、まで②</li>
</ul>
<p>事实上，参考论文发现，副助词是否具有准体助词用法和副助词之后是否能直接接续强格助词之间具有等价性。例如：</p>
<ul>
<li>三十代<strong>こその</strong>転職。（正当三十岁的跳槽）</li>
<li>こちら<strong>こそが</strong>よろしくお願いします。（这边才要拜托您多关照）</li>
<li>名前<strong>すらの</strong>公表を拒んだ。（连名字都拒绝公开）</li>
</ul>
<p>然而这种等价性本文认为是显然的，因为这两者都反映了副助词能否被语义较强的格助词所限制的性质（准体助词大多时候和领格助词「の」有关），从根本上而言就是同一种事物的两个侧面。</p>
<div class="note info no-icon"><p>需要补充说明的是，「も」事实上存在准体助词用法：</p>
<ul>
<li>百万個<strong>もの</strong>注文。（多达百万的订单）</li>
</ul>
<p>此外，根据语料调查，虽然「も」之后不能接续其他的强格助词，但是「もが」连用是存在的，然而仅存在于类似下述的句子中：</p>
<ul>
<li>誰<strong>もが</strong>驚いた。（大家都很惊讶）</li>
<li>彼まで<strong>もが</strong>反対した。（连他都反对）</li>
<li>彼女さえ<strong>もが</strong>反対した。（连她都反对）</li>
</ul>
<p>参考文献是这样解释的，首先「もの」的连用仅出现在数量词之后，视为一种例外情况。再者，「誰も」可以认为已经固化为一个单词，不将其拆分出副助词「も」。其次，助词连用「までもが、さえもが」作为固定搭配处理为例外情况。</p>
</div>
<p>在上述分类的基础上，参考论文对语料库中存在的所有助词连用做了分类。首先，助词连用可以简单划分为两大类，即<strong>体言中心修饰</strong>和<strong>用言中心修饰</strong>。体言中心修饰的助词连用类似于「六時<strong>からの</strong>会議」，助词连缀接续在某个体言成分之后，并且最终以领格助词「の」结尾，修饰后续接续的另外一个体言成分。用言中心修饰的助词连用类似于「リンゴ<strong>などを</strong>食べる」，助词连缀接续在某个体言成分之后，并且其中往往具有一个格助词作为中心助词，最终作为句子中的一个格成分存在（可以理解为最终修饰了这句话的动词，即用言部分）。事实上，除了格助词，用言中心修饰的助词连缀中的中心助词也有可能为一个强副助词。</p>
<p>如果分别将强格助词、弱格助词、领格助词、强副助词、弱副助词分别表记为 A、B、N、C、D，我们可以观察到助词连用的模式。</p>
<p>首先分析体言中心修饰。由于这类修饰以领格助词结尾，所以在连缀中不应当出现强格助词和强副助词。最终参考文章统计出的模式包括：</p>
<ul>
<li>BN：への、との、での、からの</li>
<li>DN：までの、などの、だけの、ほどの、くらいの、のみの、ばかりの</li>
<li>DBN：などへの、などとの、などでの</li>
<li>CN：もの（属于上述讨论中的特例，此外还包含「いつもの」等已经固化为助词的特例）</li>
</ul>
<p>理论来说，BDN 形式的助词连缀可以出现，然而参考论文在语料库中并未找到用例。</p>
<p>具体的统计结果为：</p>
<p><img src="/uploads/ja-tutorial-ch5/1.png" /></p>
<p>现在考虑用言中心修饰。考虑到助词连缀中的中心助词往往是格助词，该格助词之前均不应当是一个强副助词，所以这类助词连缀的模式应当大致为：</p>
<p><span class="math display">\[
(\varnothing / \text{D}) + (\text{A} / \text{B}) + (\varnothing / \text{C} / \text{D})
\]</span></p>
<p>中心助词是副助词的部分后续讨论。</p>
<p>此外需要强调一点，那就是格助词「と」作并列和引用的特殊用法，这两种用法使得该格助词可以自由出现在助词连缀的开头（表并列）和助词连缀的结尾（表引用）。由于这两种用法本质上并不能将这一个「と」纳入连缀之中，然而从语料库处理的角度，很难准确区分出「と」究竟是连缀中的一员还是表并列或引用，所以这一部分需要仔细根据实际上下文讨论。</p>
<p>回到语料库统计，中心助词是「が、を」的模式包括：</p>
<ul>
<li>DA：などが、だけが、こそが、までが、ばかりが、のみが、などを、だけを、のみを、ばかりを、までを、くらいを</li>
<li>BA：とが（表并列）、とを（表并列）</li>
<li>AC：をも（属于上述讨论中的特例）</li>
<li>CA：もが（属于上述讨论中的特例）</li>
<li>DCA：までもが（属于上述讨论中的特例）</li>
</ul>
<p>可以发现，排除掉「も」相关的特例以及「と」表并列的用法后，以「が、を」为中心的助词连缀永远是弱副助词在其之前作修饰，然后受这两个助词整体引导作为句子的主语或者宾语成分。</p>
<p>而以「に」为中心助词的模式则相对较为多样：</p>
<ul>
<li>AC：には、にも、にしか</li>
<li>AD：にまで、にさえ、にこそ、にばかり</li>
<li>DA：などに、までに、だけに、のみに、くらいに、ほどに</li>
<li>DAC：などにも、までには、などには</li>
<li>BA：とに（表并列）</li>
<li>AB：にと（表引用）</li>
</ul>
<p>「に」这种多样性的成因在于其之后允许出现副助词，也就是说公式 <span class="math inline">\((\varnothing / \text{D}) + (\text{A} / \text{B}) + (\varnothing / \text{C} / \text{D})\)</span> 中的第三项允许不为空，而「が、を」必须为空（除了特例）。此外，理论上可以存在 DAD 模式的连缀，但是语料库中并没有出现。</p>
<p>以弱格助词为中心助词的模式则开始复杂了：</p>
<ul>
<li>BC：では、でも、でしか、へは、へも、とは、とも、としか、よりも、よりは、からは、からも、からでも、までは、までも、までしか</li>
<li>BD：でさえ、ですら、でこそ</li>
<li>DB：などで、だけで、くらいで、のみで、ほどで、までで、などへ、などと、までと、だけと、のみと、などから、くらいまで</li>
<li>DBC：だけでは、などでは、などでも、だけでも、のみでは</li>
<li>BB：とで（表并列）、へと（表引用）、からと（表引用）</li>
<li>BBC：とでは（表并列）</li>
</ul>
<p>可以看到，强副助词之中的「は、も」占据了极大的比重，而「しか、でも」则仅仅出现在了「でしか、としか、からでも」等少数连缀之中。此外，虽然「さえ、すら、こそ」是弱副助词，但是从实际语用的角度，其即使具有准体助词用法也不常用（本文作者花费了较大精力寻找这类例文，事实上在阅读该参考论文之前，本文作者的观点是这三者也是强副助词），所以如果放宽标准，这三个助词可以算“较弱的强副助词”。从上述统计中也可以看出，BD 类型的连缀之中，也只有这三个弱副助词出现，其余弱副助词均无法应用在弱格助词之后。</p>
<p>综上所述，弱格助词为中心的助词连缀的核心就是 BC 和 DB 两种模式，因为 DBC 模式局限在极少数以「で」为中心的用法中，BD 模式极其类似于 BC 模式。</p>
<p>而以强副助词为中心助词的模式则相对简易：</p>
<ul>
<li>DC：などは、なども、だけは、くらいは、くらいしか、さえも、こそは、ばかりは、だけしか、ほども</li>
<li>CB：はと（表引用）</li>
</ul>
<div class="note info no-icon"><p>以强副助词为中心助词事实上就代表格助词缺失。事实上日语中能够缺失的格助词仅有「が、を」，并且缺失的原因就在于这两个格助词之后几乎不能接续其他助词。然而，强副助词理应接续在格助词之后（可以在弱格助词中找到印证，「では、でも、とは」都是常用连缀），所以此时格助词让位于强副助词，造成了格助词缺位。</p>
<p>也就是说，每个日语初学者都遇到的句子「わたし<strong>は</strong>学生です」的内部逻辑更有可能是「わたし<strong>がは</strong>学生です」，然而这里格助词让位于强副助词，从而省略了「が」。</p>
</div>
<p>另外参考论文给出了 DD 模式，但仅有「などなど」一例，本文认为这不是助词连缀的应用，仅仅是重复构文的一个体现。</p>
<p>这里的具体统计表因为过长不贴出。</p>
<p>综合上述，参考论文认为助词连缀的模式仅限于下述：</p>
<p><img src="/uploads/ja-tutorial-ch5/2.png" /></p>
<p>也就是说，助词连缀的基本模式为：</p>
<p><span class="math display">\[
(\varnothing / \text{D}) + \begin{cases}
(\text{A} / \text{B}) + (\varnothing / \text{C} / \text{D}) \\
\text{C} \\
(\varnothing / \text{B}) + \text{N}
\end{cases}
\]</span></p>
<p>以及「までもが、もの」等有限的例外，再附加上前置表并列或者后置表引用的「と」。</p>
<div class="note info no-icon"><p>总结一下副助词的应用的话，可以认为副助词分为两部分：</p>
<ul>
<li>第一类副助词（系助词，即强副助词以及部分较强的弱副助词）は、も、でも、しか、さえ、すら、こそ</li>
<li>第二类副助词（其他弱副助词）略</li>
</ul>
<p>首先注意到体言成分（包含一般体言和受准体格助词/准体接续助词/准体副助词引导的文节）在句子中一般有两种地位：</p>
<ul>
<li>受领格助词助词引导修饰下一个体言成分</li>
<li>受其他格助词引导成为句子的格成分</li>
<li>（几乎仅限于准体副助词或者形式体言引导）构成类似副词的句中独立成分（例如「できるだけ、～ないかぎり」）</li>
</ul>
<p>我们观察第二类副助词出现在助词连缀尾部的情况，可以注意到只有「にまで、にばかり」等极少数情况。这就说明除了极少数和「に」有关的特例外，第二类副助词的核心应用方法为<strong>接续在文节之后构成体言成分</strong>（暗含了<strong>这类副助词基本出现在格助词之前</strong>的原则），事实上就是所谓的<strong>准体副助词</strong>。</p>
<p>之后观察第一类副助词，可以发现若包含省略「が、を」的情况，所有第一类副助词的用法都是<strong>应用在格助词之后作为格成分限定</strong>。</p>
<p>上述总结里面所有的例外为：</p>
<ul>
<li>「こその、すらの」等较强的弱副助词的准体助词用法</li>
<li>「もの、までもが、さえもが」等固定搭配式的准体助词用法</li>
<li>「をも」这一极其有限的不省略「が、を」的用法</li>
<li>「にまで、にばかり」等出现在格助词之后的第二类副助词用法</li>
</ul>
<p>当然，口语、歌词等随意的文体中出现各种奇怪的助词连用都是正常的，例如在春卷饭的歌词之中就出现了「でだけ」这样的连用。此外，部分副助词与接续助词等连用形成「ては、ながらも」等格式也是不少见的。</p>
</div>
<div class="note info no-icon"><p>第一类副助词（系助词）除了刚刚提到的用法，其实还有一种不少见的用法，即插入在形容词、形容动词或助动词「だ」的第一连用形以及其后接成分（多为「ある、ない」及其衍生）之间辅助表义。</p>
<p>最常见的就是形容动词的否定「○○で<strong>は</strong>ない」，以及「である」中间的各种插入成分（如「で<strong>しか</strong>ない、で<strong>も</strong>ある」）。</p>
<p>形容词也会出现这类插入情况，但相对于形容动词而言较少。常见的例子有「○○く<strong>も</strong>ない」。</p>
<p>此外，插入成分有的时候甚至可以包含副词成分，但极其少见并且具有违和感：</p>
<ul>
<li>（△）あいつは学生で<strong>は決して</strong>ない。（他绝不是学生）</li>
</ul>
<p>另外需要补充的是，系助词还可以插入在动词第一连用形和其后接成分（多为「する」及其衍生）之间，如「読み<strong>こそ</strong>した」。然而这类例子更为少见，毕竟将动词改写为其名词形式后接「する」的状况本身很少，所以用例基本仅限于部分固定语法。</p>
</div>
<h2 id="不定语义か②与并列语义か③">不定语义「か②」与并列语义「か③」</h2>
<p>「か②③」在先前的参考论文中并没有讨论，这里引用另外一篇讨论该助词用法的论文：</p>
<ul>
<li>https://jumonji-u.repo.nii.ac.jp/record/700/files/22-1.pdf</li>
</ul>
<p>这篇文章的观点为，这两种语义的副助词「か」都来源于最基本的表示疑问语气的终助词「か」。具体而言，如果将疑问句作为小句插入主句之中，小句的终助词「か」在主句中则会逐渐被内化为副助词。</p>
<p>例如下述句子：</p>
<ul>
<li>校長は<u>いつ帰った<strong>か</strong></u>、姿が見えない。（校长究竟何时回来呢，现在还是见不到人）</li>
</ul>
<p>这里的下划线部分与其称之为某个格成分，不如称之为一个小句，只不过没有通过接续助词辅助。显而易见，这里的「か」就保留了终助词的语感，而很难看作副助词。</p>
<p>随着这种用法的增多，以及部分固定用法的出现，「か」的终助词语感逐渐削弱：</p>
<ul>
<li>美乃は<u>腹がくちいの<strong>か</strong>空いているの<strong>か</strong></u>判らない気持ちだった。（就美乃的心情，她也说不清自己算是吃饱了还是还饿着肚子）</li>
</ul>
<p>这里事实上是可以通过补足缺失成分来将「か」解释为普通的终助词的：</p>
<ul>
<li>美乃は<u>腹がくちいの<strong>か</strong>空いているの<strong>か</strong></u>、（それが）判らない気持ちだった。</li>
</ul>
<p>然而无论如何解释，这里「か」在形式上已经获得了准体助词用法是显而易见的。</p>
<p>由于疑问句往往携带不定的语气或者选择的要求，因而这些终助词内化之后就形成了表示不定语义的「か②」和并列语义的「か③」。此外，在此基础上，参考论文指出副助词「か②③」通常都以准体助词的形态引导一个带有疑问、选择性质的小句出现，举例如下：</p>
<ul>
<li>（与强格助词「が」连用）つまりぼくには、<u>このぼくが「急患」である<strong>か</strong>どう<strong>か</strong></u><strong>が</strong>全くわからなかったわけだ。（也就是对我而言，我本就没有理由知道我究竟是不是重症患者）</li>
<li>（与强格助词「を」连用）自分は<u>どんな注文が兄の口から出る<strong>か</strong></u><strong>を</strong>恐れた。（我一直担惊受怕着，完全不知道哥哥能从口中吐出什么样的要求）</li>
<li>（与强格助词「に」连用）だが、喧嘩の勝敗は決して<u>投げるか投げられる<strong>か</strong></u><strong>に</strong>ないことを彼は承知していた。（*然而，他也知道争吵的结果绝不取决于扔还是被扔）</li>
<li>（与弱格助词「へ」连用）ともかくすぐ<u>三越でした<strong>か</strong>白木屋でした<strong>か</strong></u><strong>へ</strong>参りました。（不管怎么说，总之先去了三越，要么就是白木屋）</li>
<li>（与弱格助词「まで」连用）またそれは一番から順に検番に張り出され、<u>何番<strong>か</strong></u><strong>まで</strong>はお金が出る<code>@ 由 よし</code>云った。（而且，那些事务所还会从第一名按照顺序贴标签，听说无论排多少名也都有钱拿）</li>
<li>（与弱格助词「で」连用）そのときわたしはどうも<u>どこ<strong>か</strong></u><strong>で</strong>会ったことのある男に違いないという気がしてならなかった。（那一刻，我不禁觉得那男人一定是我何时何地见过的某一位）</li>
<li>（与领格助词「の」连用）<u>どうして異性を取り扱うべき<strong>か</strong></u><strong>の</strong>修養を、こうして叔父からばかり学んだ彼女は、どこへ嫁に行ってもそれをそのまま夫に応用すれば成功するに違いないと信じていた。（她既然已经从叔叔那里学尽了应对异性的技能，我相信无论她嫁到哪里，只要用其所学应付未来的丈夫，她也就一定不会失败）</li>
<li>（与弱格助词「と」连用）<u>山嵐を誘いに来たものは誰<strong>か</strong></u><strong>と</strong>思ったら赤シャツの弟だ。（还在想着是谁邀请山岚来着的，结果是我那穿红衬衫的弟弟）</li>
<li>（与强副助词「は」连用）<u>使い途がある<strong>か</strong>ない<strong>か</strong></u><strong>は</strong>、使ってみなければわからぬ。（到底有没有用途，不去用着试试看是不知道的）</li>
<li>（与强副助词「も」连用）それからあとは<u>どこでどうした<strong>か</strong></u><strong>も</strong>、<u>どこで友達と別れた<strong>か</strong></u><strong>も</strong>わからなかった。（这之后，无论是做了些什么还是说在哪里和朋友告别的，我一概都记不清了）</li>
<li>（与弱副助词「くらい」连用）<u>あの男がどんな性分<strong>か</strong>ゆくさき望みがある<strong>か</strong>ない<strong>か</strong></u><strong>くらい</strong>わかりそうなもんじゃないか。（那男人性格怎么样，对未来有没有希望，至少这样的一些东西还是能弄明白的吧）</li>
<li>（与弱副助词「さえ」连用）<u>それは事実である<strong>か</strong>どう<strong>か</strong>、どこまで信じていい<strong>か</strong></u><strong>さえ</strong>見当がつかなかった。（就连这是不是事实，这些话应该相信到哪里都是不明不白）</li>
<li>（与判断助动词「だ」连用）全く<u>御殿女中の生まれ変わり<strong>か</strong>何<strong>か</strong></u><strong>だ</strong>ぜ。（她一定是宫女转生什么的）</li>
</ul>
<p>* 这里无法不通过上下文准确翻译该句，故仅作字面翻译。</p>
<p>如果具体回到副助词「か②③」在现代日语中究竟以何种方式应用，参考论文给出了下述分类。</p>
<h3 id="小句判定不定语义か②">小句判定（不定语义「か②」）</h3>
<p>所谓小句判定，指的是助词接续在小句后，并且表达出要求对方判定该小句的描述是否成立的用法：</p>
<ul>
<li>しかし母はひどくあなたに興味を持ったようでした。病院を訪れると、必ず<u>あなたがもう来た<strong>かどうか</strong></u>を僕に尋ねました。（然而我母亲对你似乎有着很深的兴趣。她每次来医院看望我，一定都会问我你之前来没来过）</li>
</ul>
<p>事实上，这类用法几乎都会以固定句式「～かどうか」的形式出现。虽然副助词「か」也可以单独使用，但是在其后接续上「どうか」构成类似选择疑问句的格式相对而言是更为常见的。</p>
<h3 id="小句选择并列语义か③">小句选择（并列语义「か③」）</h3>
<p>本质上和小句判定用法一致，都来源于选择疑问句。然而小句判定类似于一般疑问，回答只有是或者否，而小句选择则类似普通的选择疑问，可以从多个选项中选择：</p>
<ul>
<li>とにかく準平は<u>相手の息の根をとめる<strong>か</strong>、どうか勘弁してくれと手をついてあやまらせる<strong>か</strong></u>のどちらかになるまで（済まない、）今迄（こう）やって来た男なんだ。（无论怎么说，准平这个男人要是遇上对手了，要么把他斩草除根，要么就一直斗争到让他跪地求饶。他就是这么一路走过来的）</li>
</ul>
<p>事实上，在类似「〜あるかないか、〜か否か」之类的句式中的「か」应当归类为小句判定还是小句选择事实上是较为模糊的，下述例句也如此：</p>
<ul>
<li>三四郎は<u>この三人の外に、まだ連がいる<strong>か</strong>いない<strong>か</strong></u>を確かめようとした。（三四郎尝试着去调查除了这三个人外还有没有同伙）</li>
</ul>
<p>这里只要选择其中一项，在逻辑上就会自动否定另外一项的选择在实际的语用中其实就和小句判定一致了。</p>
<h3 id="小句不定不定语义か②">小句不定（不定语义「か②」）</h3>
<p>所谓小句不定，指的是助词接续在一个特殊疑问句之后，表示说话人无法明确给出这个特殊疑问句的答案，只能直接将该特殊疑问句通过「か」引入句子中：</p>
<ul>
<li>けれども彼があの女の室に入った時，<u>二人の間に<strong>何んな</strong>談話が交換された<strong>か</strong></u>に就いて，彼は遂に何事をも語らなかった。（但是就算到最后，他也没透露在他去那女人的房间的时候，他们两人之间交谈了些什么）</li>
</ul>
<p>可以注意到这里「か」引导的小句中必然存在一个特殊疑问词。</p>
<h3 id="事物举例不定语义か②并列语义か③">事物举例（不定语义「か②」、并列语义「か③」）</h3>
<p>从小句切换到事物，此时的「か」并不是直接接续在一个疑问句之后，而是会接续在体言或者是判断句「～です、～だった、～でした」之后。而事物举例所表达的是，以所举例的事物为代表，将这一类事物并入讨论的不定或者并列语义：</p>
<ul>
<li>富岡は<u>「罪と罰」だった<strong>か</strong></u>のなかの、～ドストエフスキーの言葉を思い出して、～。（富冈想起了《罪与罚》还是什么书中，陀思妥耶夫斯基的一句话）</li>
</ul>
<p>这里「か」引导的是一个判断句，指的是“与《罪与罚》类似的书”这样的一个群体。</p>
<p>事物举例这一用法可能出现的形式包括「～か、～か～か、～か（何、誰、どれ）か」这三种：</p>
<ul>
<li>たしか<u>十一歳のとき<strong>か</strong></u>に欣之助が～。（（这么说的话，）欣之助确实在大约十一岁的时候…）</li>
<li>いくつか<code>@ 能 よ</code>く知らんが大方<u>六つ<strong>か</strong>七つ<strong>か</strong></u>だろう。（虽说不清楚到底有几个，但大概就是六七个这样）</li>
<li><u>水島<strong>か</strong>誰<strong>か</strong></u>がそれとなく奥村氏に注意したのか。（不知道是水岛还是谁在暗中提醒了奥村）</li>
</ul>
<h3 id="事物选择并列语义か③">事物选择（并列语义「か③」）</h3>
<p>事物选择指的是从若干并列的事物中选择其中之一的语义：</p>
<ul>
<li>それは年に<u>三回<strong>か</strong>四回<strong>か</strong></u>にわけて郵便局で受け取るので、～。（因为这是每年三四次在邮局领取的…）</li>
</ul>
<p>可以看出事物选择常见的用法也是「～か～か」，这一句式同样也可以表达事物举例。事物举例和事物选择的区别在于，前者是具有泛化性的，也就是说并不局限于其举出的事物，而是扩散到与之类似的事物，后者则相对具体，只是从若干事物中选择其中之一。</p>
<h3 id="事物不定不定语义か②">事物不定（不定语义「か②」）</h3>
<p>若无法给出具体的事物作为代表或供选择，则可以直接使用疑问词来描述，这就是事物不定：</p>
<ul>
<li>ただ、軍人で<u>一生のうちの何分の一<strong>か</strong></u>を海の上で暮らしたおやじには、～。（但是，对于一生中有相当一部分时间在海上度过的军人来说…）</li>
</ul>
<p>上述语句中无法确定“作为军人在海上度过这一时间段占一生的比例”究竟是多少，也无法给出若干的例子，所以直接使用疑问词来代指。显然，事物不定的常见句式就是「（何、誰、どれ）か」。</p>
<p>这类用法事实上是现代日语中极为常见的，甚至催生了类似「誰か、何か」等已经被视为一般体言成分的固定搭配。这种固定搭配一方面体现在「誰かさん」这种词汇中，一方面体现在断句方式中。例如「不良がかってる誰か」，虽然严格按照语法而言，应当断句为「（不良がかってる誰）か」，即「不良がかってる」作为连体成分修饰「誰」，然后这个整体由表事物不定语义的「か」引导。然而现在更常见的断句则为「不良がかってる（誰か）」，即「不良がかってる」修饰「誰か」这一个已经固化的搭配。</p>
<h3 id="一些惯用搭配">一些惯用搭配</h3>
<p>「か」主导了很多惯用搭配，基本上都是上述用法的具体例子。这里列举一些常见的惯用搭配：</p>
<ul>
<li>ある<strong>か</strong>なき<strong>か</strong></li>
<li>する<strong>か</strong>しない<strong>か</strong></li>
<li>～<strong>か</strong>のようだ、～<strong>か</strong>のごとく、～<strong>か</strong>に見える</li>
<li>～<strong>か</strong>もしれない（～<strong>か</strong>も）</li>
</ul>
<p>这里第四个搭配中的「知れない」已经完全固化，不可替换为其他表达（除了「知れません」），并且也几乎不写作汉字。</p>
<h2 id="限定语义きり">限定语义「きり」</h2>
<p>该助词源于动词「<code>@ 限 き</code>る」的名词形式，表示“界限”。该助词也可能以「っきり、ぎり」等形式出现。</p>
<p>该助词接续在表示数量的名词或者「これ」等指示范围的代词之后，表示“仅限于这个数量或者范围”：</p>
<ul>
<li>今度、二人<strong>きり</strong>で映画を見に行きましょう。（下次就我们两个人一起去看电影吧）</li>
<li>一回<strong>きり</strong>の人生なので後悔のないようにしてください。（人生只有一次，所以不要留下遗憾）</li>
</ul>
<p>该助词也可以接续在动词的过去式之后，表示在这一动作之后再也没有下文，一般后续接续表示否定的语句：</p>
<ul>
<li>あの子は家を<u>出た</u><strong>きり</strong>、再び帰ってこない。（那孩子离家出走之后，再也没有回来过）</li>
<li>彼女はまたねと<u>言った</u><strong>きり</strong>、全然連絡をくれない。（她说了再见之后，就再也没有联系过我）</li>
</ul>
<p>这类用法可以认为是限定语义的延申，即这一动作仅限于这个时间点，在这个时间点之外就不再有。这种用法的一个固定搭配是「寝たきり」，其表示“睡下之后就再也没有其他动作”，即“卧床不起”：</p>
<ul>
<li>彼は病院で<u>寝た</u><strong>きり</strong>だから連絡がない。（他在医院卧床不起才没有联系）</li>
</ul>
<p>此外，固定搭配「～きり～ない」与「～しか～ない」几乎同义，也用于表示限定：</p>
<ul>
<li>五分間<strong>きり</strong>時間が<strong>ない</strong>。（只有五分钟的时间）</li>
<li>京都へは一度<strong>きり</strong>行ったことが<strong>ない</strong>。（只去过一次京都）</li>
</ul>
<h2 id="限定语义くらいぐらい">限定语义「くらい・ぐらい」</h2>
<p>该助词来源于名词，所以接续要求为用言使用连体形接续，体言直接接续。</p>
<p>该助词最基本的含义为“大约”，即举出一个比较的基准，表示一个与此基准相仿的数量：</p>
<ul>
<li>長さはこの<strong>くらい</strong>でいいです。（长度就这样就可以了）</li>
<li>今から一時間<strong>くらい</strong>かかる。（从现在开始大约要一个小时）</li>
<li>僕の部屋はこの教室<strong>くらい</strong>に広いです。（我的房间大约有这个教室那么大）</li>
</ul>
<p>需要注意的是，该助词指定的基准往往是较低的，甚至是极端低的基准。如果和类似「少なくとも」等表示极端的副词连用，往往会表达极端低的参考语义，甚至有时候会带有轻蔑等负面的语气：</p>
<ul>
<li>家全体がいいけど、少なくとも自分の部屋の片付け<strong>くらい</strong>は自分でしなさいよ。（就不谈让你打扫整间房子了，至少自己得把自己房间收拾好吧）</li>
<li>足が痛い<strong>くらい</strong>はたいしたことない、すぐ回復できる。（脚疼这种小事情不算什么，很快就能恢复）</li>
<li>あの人は少なくとも、自分のことは自分でやる<strong>くらい</strong>のやつだ。（那个人至少是个自己的事情自己做的家伙）</li>
<li>今日はとても忙しくて、昼食はパン<strong>くらい</strong>しか食べられなかった。（今天很忙，中午只能吃点面包）</li>
<li>一万円を払ってそんなに役に立たないものを買うのは君<strong>ぐらい</strong>のものだ。（花一万买这么没用的东西的估计也就你了）</li>
</ul>
<h2 id="限定语义こそ">限定语义「こそ」</h2>
<p>该助词介于强副助词和弱副助词之间，一般情况下作为强副助词出现，接续在格助词后「（が、を）こそ、でこそ、にこそ」，但在类似「こそが、こそを」等有限的固定搭配中，以及一些准体助词用法中，也可以作为弱副助词出现。此外，该助词接续在接续助词后也是常见的，如「からこそ、ばこそ、てこそ」。在部分情况下也可以接续在副词成分之后。</p>
<p>该助词的基本语义与汉语副词“正、才”相当，表示恰好的限定语义。其限定语义是相当强的，一般而言该助词所引导的体言成分或小句是整个句子的重心：</p>
<ul>
<li>（强副助词，格助词省略）来年<strong>こそ</strong>海外旅行のつもりです。（明年正打算去海外旅行）</li>
<li>（强副助词，格助词让位）これ<strong>こそ</strong>私の望んでいたものだ。（这正是我所期望的东西）</li>
<li>（强副助词，格助词让位）こちら<strong>こそ</strong>よろしくお願いします。（这边才是要拜托你的）</li>
<li>（强副助词，格助词保留）困ったとき<u>に</u><strong>こそ</strong>互いに助け合うべきです。（困难的时候正应该互相帮助）</li>
<li>（强副助词，与接续助词连用）そうし<u>て</u><strong>こそ</strong>立派な学者になれるんだ。（这样才能成为优秀的学者）</li>
<li>（强副助词，与接续助词连用）先生の教えを覚え<u>ば</u><strong>こそ</strong>、逆境にさらされても頑張ってるのです。（正是因为记住了老师的教诲，才能做到即使逆境也能坚持下来）</li>
<li>（强副助词，与接续助词连用）親は子を愛する<u>から</u><strong>こそ</strong>、厳しくしかることもある。（正是因为父母爱着子女，有时才会严厉批评）</li>
<li>（弱副助词，与接续助词连用）あの子と仲良し同士になれ<u>ば</u><strong>こそ</strong>です。（这正是因为和那孩子是好朋友）</li>
</ul>
<p>需要注意的是，与「こそ」连用的「ば」往往表示的是已然条件，而非假定条件。</p>
<div class="note info no-icon"><p>格助词省略和格助词让位还是有一点区别的，省略代表可以补回来，但是让位就表示无法补回来，并且仅会出现在主格和宾格两种情况中。</p>
</div>
<p>此外，该助词作为系助词，可以插入在用言的第一连用形和后接成分之间，此时一般表示“尽管、虽然”的含义。另外，这个语义有的时候也可以用在体言之后：</p>
<ul>
<li>本を<u>読み</u><strong>こそ</strong>したんですが、内容がよくわかりませんでした。（虽说书是读了，内容倒是没怎么看懂）</li>
<li>彼女は姿形が<u>美しく</u><strong>こそ</strong>あれ、内面の酷薄さは隠しようがない。（她虽然外表很漂亮，但是内心的冷酷是无法掩饰的）</li>
<li>彼は<u>真面目で</u><strong>こそ</strong>あるが、優柔不断なところが欠点だ。（他虽说是很认真，但是也有优柔寡断的缺点）</li>
<li><u>大学</u><strong>こそ</strong>入っていないが、大学に匹敵する知識を持っている。（虽然没有上过大学，但是有着和大学相当的知识）</li>
</ul>
<p>然而这种转折现在基本直接使用「が、けど」表达，几乎不再附加「こそ」。</p>
<p>这里的「こそあれ」是古语系结法则的残余，「こそ」在系结法则中要求句末用言使用已然形，然而这一规则现在几乎不再生效。依然残存的用法还有：</p>
<ul>
<li>うちのちびは文句<strong>こそ</strong><u>言え</u>、人の言うことを聞こうともしない。（我家的小孩净是说道，从来不听别人的话）</li>
</ul>
<p>上述句子中的「こそ」单纯表强调语义。</p>
<p>古语残余还有接续在动词未然形后的「～ばこそ」，表示彻底否定：</p>
<ul>
<li>押しても引いても<u>動か</u><strong>ばこそ</strong>。（不管是推也好，拉也好，都不会动）</li>
</ul>
<h2 id="强调语义さえ">强调语义「さえ」</h2>
<p>「さえ」也是系助词，所以常常接续在格助词后，如「（が、を）さえ、でさえ、にさえ」。相比较于「こそ」，「さえ」几乎不具有准体助词用法。此外，作为系助词，「さえ」也可以作为插入成分插入在用言的第一连用形后。此外，该助词接续在接续助词后也是常见的，如「てさえ」。在部分情况下也可以接续在副词成分之后。</p>
<p>需要注意的是，虽然系助词理论上不能重叠使用，但「さえも」却是常见的例外搭配，其语气比「さえ」更强。</p>
<p>该助词的基本语义与汉语副词“连”相当，即强调一个事物的极端状况：</p>
<ul>
<li>（强副助词，格助词让位）あいつは自分の名前<strong>さえ</strong>書けない。（那家伙连自己的名字都写不出来）</li>
<li>（强副助词，格助词保留）今は科学が進歩して、月<u>へ</u><strong>さえも</strong>行き来できるようになったんだ。（现在科学发达，人类就连月球都能来往了）</li>
<li>（强副助词，格助词保留）飲み会が嫌いなので、上司に誘われても行こう<u>と</u><strong>さえ</strong>しなかった。（不喜欢酒会，就算被上司邀请也不想去）</li>
<li>（强副助词，与接续助词连用）実はね、彼はその試験を受け<u>て</u><strong>さえ</strong>いなかったんだよ。（其实呢，他连那场考试都没有参加）</li>
</ul>
<p>比较有趣的是，有些本身应当为主格成分的体言，理论上直接使用「さえ」引导即可（主格助词让位），有时却会使用「でさえ」。据说这种用法是受到了「でも」的影响，事实上这种「でさえ」直接替换为「でも」一般也不会有问题：</p>
<ul>
<li>日本人<strong>でさえ</strong>敬語の使い方を間違えるそうです。（据说就连日本人都会搞错敬语的用法）</li>
</ul>
<p>该助词有时会与「～なら、～たら、～ば」等假定用法连用，表“只要”的语义。该助词作为插入成分的时候，多使用这种句式：</p>
<ul>
<li>わたしは本<strong>さえ</strong>あれ<strong>ば</strong>、ほかには何もいらない。（只要有书，其他什么都不需要了）</li>
<li>彼が<u>来</u><strong>さえ</strong>すれ<strong>ば</strong>、すべてがわかる。（只要他来了，一切都会明白的）</li>
<li><u>汚く</u><strong>さえ</strong>なけれ<strong>ば</strong>、どちらでもいい。（只要不脏，哪个都可以）</li>
<li>体が<u>丈夫で</u><strong>さえ</strong>あれ<strong>ば</strong>よい。（只要身体健康就好）</li>
</ul>
<p>当然，作插入成分的时候也可以不后接假定用法：</p>
<ul>
<li>そんなことをしたら、笑われるだけでなく、人に嫌わ<u>れ</u><strong>さえ</strong>するよ。（要是做了那种事情，不仅会被人笑话，甚至还会被人讨厌）</li>
</ul>
<h2 id="限定语义しか">限定语义「しか」</h2>
<p>「しか」也是系助词，所以常常接续在格助词后，如「（が、を）しか、でしか、にしか」，并且几乎不具有准体助词用法。其作为系助词，也具有作为插入成分的用法。然而，其与接续助词的连用是不常见的。在部分情况下其也可以接续在副词成分之后。</p>
<p>需要注意的是，该助词<strong>必须与否定助动词「ない、ん」联合使用（有时可以与「まい」连用）</strong>，用于表示“仅有”的含义：</p>
<ul>
<li>（强副助词，格助词让位）いやまだまだですよ、もう精一杯でも六点<strong>しか</strong>取れ<strong>なかっ</strong>た。（不，还差得远呢，我就算拼尽全力也只拿了六分）</li>
<li>（强副助词，格助词保留）この味はこの店<u>に</u><strong>しか</strong>作れませ<strong>ん</strong>。（这种味道只有这家店才能做出来）</li>
<li>（强副助词，格助词让位）今ならそうする<strong>しか</strong>ある<strong>まい</strong>。（现在只能这么做了）</li>
</ul>
<p>可以注意到上述句子中「しか」和「ない」之间有其他词语存在。而在部分情况下，可以直接将之间没有其他词语的「しか」和「ない」绑定为固定搭配「～しかない」，表达“仅有”：</p>
<ul>
<li>本月の休みが三日<strong>しかない</strong>。（这个月只有三天假）</li>
<li>これは任務ですから、しっかりやる<strong>しかありません</strong>。（这是任务，我们也只能认真做了）</li>
</ul>
<p>该助词作插入成分的用法几乎仅限于插入「である」构成「でしかない」，表达“只不过是”：</p>
<ul>
<li>彼は社長ですが、両親の目から見ると子ども<strong>でしかありません</strong>。（他虽然是社长，但是在父母眼里也只不过是个孩子而已）</li>
</ul>
<div class="note info no-icon"><p>事实上，「～しか～ない」的用法中还有一条准则，即<strong>「しか」和「ない」不能同时接在动词之后</strong>：</p>
<ul>
<li>（○）日本<u>に</u><strong>しか</strong>行ったことが<strong>ない</strong>。（只去过日本）</li>
<li>（○）俺は死神だから、俺の持つものは俺の意思<u>で</u><strong>しか</strong>人間が<u>触れ</u><strong>ない</strong>。（我是死神，我所持有的东西没有我的授意人类是无法触碰的）</li>
<li>（○）単語は自分で努力して<u>覚える</u><strong>しか</strong>方法が<strong>ない</strong>。（单词只能靠自己努力记住）</li>
<li>（○）私達は<u>設計されたように</u><strong>しか</strong>生きる事が許さ<u>れ</u><strong>ない</strong>。（我们只能按照设计好的方式生活）</li>
<li>（×）もし梨の味を知りたければ、<u>試食する</u><strong>しか</strong><u>分から</u><strong>ない</strong>。（要想知道梨的味道，只能去尝它）</li>
</ul>
</div>
<h2 id="强调语义すら">强调语义「すら」</h2>
<p>「すら」和「さえ」几乎具有一样的用法和含义，除了以下的区别：</p>
<ul>
<li>「すら」更为书面语，「さえ」更为口语</li>
<li>「すら」多表负面情绪，「さえ」则正面负面均可</li>
<li>「すら」不能构成「すらも」，「さえ」可以构成「さえも」</li>
<li>「すら」较少与假定连用</li>
</ul>
<p>观察例句：</p>
<ul>
<li>（强副助词，格助词让位）亀<strong>ですら</strong>あんたより速いんだよ。（就连乌龟都比你快）</li>
<li>（强副助词，格助词让位）今まであいつの味方をする人はもう一人<strong>すら</strong>ありません。（到现在支持他的连一个人都没有）</li>
<li>（强副助词，与接续助词连用）セカイはまだ始まって<strong>すら</strong>いない。（世界甚至还没有开始转动）</li>
<li>（强副助词，插入成分）電車の中で女性が酔っ払いに絡まれていても、乗客たちは止めに入り<strong>すら</strong>しなかった。（即使在电车上有女性被醉鬼纠缠，乘客们也没有一个人去阻止）</li>
</ul>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>早安、可能是午安、或者是晚安</title>
    <url>/2021/09/17/navigation/</url>
    <content><![CDATA[<p>关于我更多的信息，请见 <a href="/about">关于页</a>。</p>
<p>这里主要是一些杂谈，正经内容主要是课程笔记、论文笔记和日语笔记。</p>
<p>查看最近的文章可以直接向下滑动找到对应的文章，需要查看较远的文章可以通过网页上方栏目的分类页或者归档页寻找。</p>
<p>考虑到分类页只展示分类却不展示分类内的文章列表，这里有一个简单的文章分类列表：</p>
<ul>
<li>学习笔记
<ul>
<li>大二春季学期《人工智能导论》</li>
<li>大二夏季学期《汇编语言程序设计》</li>
<li>大三秋季学期《信号处理原理》《计算机网络原理》</li>
<li>大四春季学期《深度强化学习》</li>
</ul></li>
<li>各月论文笔记合集（已经停更，目前使用 Zotero 管理笔记）</li>
<li>简明日语自学手册（持续更新）</li>
<li>一些生活记录和总结
<ul>
<li>大二春季学期、大三秋季学期、大三春季学期总结</li>
<li>大三寒假总结</li>
<li>大二暑假、大三暑假、大四春季学期、博一秋季学期生活记录</li>
<li>大三秋季学期、大四秋季学期前期感想</li>
</ul></li>
<li>杂七杂八
<ul>
<li>2022 年新高考 I 卷（江苏）数学答案</li>
<li>一些原创数学题</li>
<li>乱七八糟的开发感想</li>
<li>还有一些混乱感想、游戏笔记、歌词记录本</li>
</ul></li>
</ul>
<p>总之，不如自己来翻翻这里有些什么，在评论区留下足迹，个人网站不就是这个用处么。</p>
]]></content>
      <categories>
        <category>【导航】</category>
      </categories>
  </entry>
  <entry>
    <title>小学期深夜的废话</title>
    <url>/2021/08/17/nonsense-at-night/</url>
    <content><![CDATA[<p>突然有点想随便写点东西说点感受而已，写完就该睡大觉了。</p>
<span id="more"></span>
<p>现在是 2021 年 8 月 17 日的深夜 03:44，这个叫 Holder 的大二学生还没有睡。</p>
<p>小学期选了整整 8 学分的课，从第二周开始每周周一到周五都是全天满课。汇编每周有作业，还有一个大作业和考试。Java 每堂课有一个小作业，还有一个看起来不是很小的大作业。量子计算作为一门新课，上来就是全英文 PPT，讲着虚张声势的线性代数，倒也真的把 Holder 愉悦送走了。</p>
<p>但值得庆幸的是，只要不去听老师上课，自己在空调房里和 Sakana 连着麦看 PPT / CSAPP / 各路文档自学，累了就开瓶快乐水刷两眼手机或者打一小会 Project Sekai，然后慢慢写自己学习的时候的笔记和一时的感悟，这种体验简直不要太好。就是那种感觉，那种感受到了学习愉悦之处的感觉。</p>
<p>我也不知道什么时候我变成了厌恶上课的一个人，烦躁于古板沉闷的 PPT reader 式的课堂。我宁愿自己一个人琢磨，不懂的时候就去各种翻资料或者问问同学，然后在个人网站上写下万字之多的笔记。特别是一时间想通一个很困难的问题的时候，我习惯把当时所有的思路都复盘下来写下来。</p>
<p>这个小学期，我突然觉得自己找到了一种玄妙的乐趣，那种像想要抓住什么的一样的冲动。虽然每天都累得不成样子，到处抱怨，但是内心是充实的。</p>
<p>虽然不知道学的东西会不会派上用场，但是就是享受到了学习这一过程之中的乐趣。</p>
<hr />
<p>也不知道这种斗志昂扬的状态会持续到什么时候，也不知道 Holder 未来会不会又一次陷入像今年 5 月那样沉闷的时光，但无论如何，现在的 Holder 是快乐的。</p>
<p>Holder 或许得睡大觉了，虽然现在才睡，翘汇编是不可避免的了。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>《现代日语中高级语法教程》学习笔记</title>
    <url>/2023/04/05/note-of-adv-jp/</url>
    <content><![CDATA[<p>这本书我已经记不得何时得知的了，但总之看起来是一本基于学校语法进一步延伸的教材。想到最近写日语自学手册已经开始磕磕碰碰，遇到很多自己无法解释的问题，果然还是得放弃产出，暂时回到学习的过程中。</p>
<span id="more"></span>
<h1 id="绪论">绪论</h1>
<p>本书似乎主要在阐述现代日语中的下述四个概念——语态（Voice）、动态（Aspect）、时态（Tense）、情态（Modality）。这四个概念是词法（也就是助动词接续规则等）的上层概念，在构句的句法范畴内，把握这四个概念才有可能辨析构句中的细微差别。</p>
<p>书上举了两句话作为例子：</p>
<ul>
<li>課長が知らない間に、その男が写真を撮る。</li>
<li>課長はその男に知らぬ間に写真を撮られていたらしい。</li>
</ul>
<p>本书认为第一句话结构松散、单调抽象，不像实际使用的语言，更像是为了解释词法所生造的句子。而相比较而言，第二句话更为紧凑，更像实际用语。本书认为，这种差别在于第二句话在时态、语态、动态、情态等方面比第一句话更丰富。</p>
<h1 id="语态">语态</h1>
<p>语态在日语中译为「ボイス、ヴォイス」。本书将语态定义为<strong>在叙述某运动性事项时，讲话人的叙述焦点在谓语动词形态与主语等句子成分格形式的语法关系上的表现形式</strong>。这是一个从叙述焦点出发的定义，如果展开解释的话，就是对于同样的事项，不同的焦点会在语句中产生格的变动。</p>
<p>例如，同样是描述花子唆使太郎殴打次郎这一件事，从焦点的不同和是否叙述花子的存在，可以有下面的叙述方式：</p>
<ul>
<li>（焦点为太郎，主动句）太郎が次郎をなぐった。</li>
<li>（焦点为次郎，被动句）次郎が太郎になぐられた。</li>
<li>（焦点为花子，使役句）花子が太郎に次郎をなぐらせた。</li>
<li>（焦点为太郎，被役句）太郎が花子に次郎をなぐらせられた。</li>
</ul>
<p>可以看到所使用的格助词有所不同，动词所使用的形式也有所不同。</p>
<p>本书主要研讨的语态包括被动态、可能态、自发态、使役态、自动态、他动态共六种，其中前四种一般借助助动词表达而后两种一般通过动词自身构成。</p>
<h2 id="主动态">主动态</h2>
<p>主动态是自动态和他动态的合称，一般通过词汇自身就可以表达，也就是一般而言自动词的原形表示自动态，他动词的原形表示他动态。</p>
<p>在《当用汉字音训表》中共有 1057 个动词，这些动词的自他类别大致分为：</p>
<ul>
<li>（自他动词对，55%）あく・あける、帰る・帰す</li>
<li>（绝对自动词，14%）ある、死ぬ、歩く、親しむ</li>
<li>（绝对他动词，27%）書く、洗う、許す、与える</li>
<li>（两用动词，4%）笑う、吹く、増す、張る</li>
</ul>
<p>可以注意到自他动词对占据了近半数，这意味着现代日语中的自动词多半能找到一个与之对应的他动词。这也就不奇怪为什么各路教材都在总结自他动词对的送假名对应规律来帮助学生扩展词汇了，毕竟通过这一项规则，记住一个自动词，多半就能再记住一个他动词。</p>
<p>自他动词对，本书总结了下面的几种类型（均是前者自动词，后者他动词）：</p>
<ul>
<li>不同的活用词尾
<ul>
<li>移る・移す、隠れる・隠す、足りる・足す、乗る・乗せる、寝る・寝かす、捕まる・捕まえる</li>
</ul></li>
<li>基本形和派生形对立
<ul>
<li>あく・あける、進む・進める、切れる・切る、減る・減らす、合う・合わせる、聞こえる・聞く</li>
</ul></li>
<li>不同的派生形间对立
<ul>
<li>あげる・あがる、出る・出す、漏れる・漏らす、捕われる・捕らえる、強まる・強める、尽きる・尽くす</li>
</ul></li>
<li>双向对应
<ul>
<li>見える・見る・見せる、休まる・休む・休める、剥がれる・剥げる・剥ぐ・剥がす</li>
</ul></li>
</ul>
<div class="note warning"><p>注意，下述内容是 Holder 的猜想，从未得到任何教科书和资料的证实。</p>
</div>
<p>我们来从古语的角度分析一下自他动词对。首先考虑古语中的自动词，这些自动词演化出与之对应的他动词的路径如表所示。其中他动词词尾一列中频率较高的可能演化路径排在前面，而频率较低的可能演化路径排在后面：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">古语词尾</th>
<th style="text-align: center;">现代语词尾</th>
<th style="text-align: center;">对应他动词词尾</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">古语四段</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-asu/-osu/(-aseru)</td>
</tr>
<tr class="even">
<td style="text-align: center;">古语上二段</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-iru</td>
<td style="text-align: center;">-asu/-osu/-usu</td>
</tr>
<tr class="odd">
<td style="text-align: center;">古语下二段</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-eru</td>
<td style="text-align: center;">-asu</td>
</tr>
</tbody>
</table>
<p>举例如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">古语</th>
<th style="text-align: center;">现代语</th>
<th style="text-align: center;">对应他动词</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">古语四段</td>
<td style="text-align: center;">動く</td>
<td style="text-align: center;">動く</td>
<td style="text-align: center;">動かす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">散る</td>
<td style="text-align: center;">散る</td>
<td style="text-align: center;">散らす</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛ぶ</td>
<td style="text-align: center;">飛ばす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">迷ふ</td>
<td style="text-align: center;">迷う</td>
<td style="text-align: center;">迷わす</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">合ふ</td>
<td style="text-align: center;">合う</td>
<td style="text-align: center;">合わせる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">滅ぶ</td>
<td style="text-align: center;">滅ぶ</td>
<td style="text-align: center;">滅ぼす</td>
</tr>
<tr class="odd">
<td style="text-align: center;">古语上二段</td>
<td style="text-align: center;">伸ぶ</td>
<td style="text-align: center;">伸びる</td>
<td style="text-align: center;">伸ばす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">満つ</td>
<td style="text-align: center;">満ちる</td>
<td style="text-align: center;">満たす</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">起く</td>
<td style="text-align: center;">起きる</td>
<td style="text-align: center;">起こす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">降る</td>
<td style="text-align: center;">降りる</td>
<td style="text-align: center;">降ろす</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">落つ</td>
<td style="text-align: center;">落ちる</td>
<td style="text-align: center;">落とす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">尽く</td>
<td style="text-align: center;">尽きる</td>
<td style="text-align: center;">尽くす</td>
</tr>
<tr class="odd">
<td style="text-align: center;">古语下二段</td>
<td style="text-align: center;">逃ぐ</td>
<td style="text-align: center;">逃げる</td>
<td style="text-align: center;">逃がす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">枯る</td>
<td style="text-align: center;">枯れる</td>
<td style="text-align: center;">枯らす</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">揺る</td>
<td style="text-align: center;">揺れる</td>
<td style="text-align: center;">揺らす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">出づ</td>
<td style="text-align: center;">いでる → 出る</td>
<td style="text-align: center;">いだす → 出す</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">燃ゆ</td>
<td style="text-align: center;">燃える</td>
<td style="text-align: center;">燃やす</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">増ゆ</td>
<td style="text-align: center;">増える</td>
<td style="text-align: center;">増やす</td>
</tr>
</tbody>
</table>
<p>可以发现古语中的自动词演化为对应的他动词基本依靠于词尾「す」，这一词尾可能和表示使役的助动词有关，但是目前没有确切的证据。另外，「す」前面的活用词尾大多是转变为ア段，当然也有可能存在例外。词尾「す」大多条件下遵从四段活用，然而在部分词语中则遵从下二段活用，因而演化为现代语中的「せる」词尾。</p>
<p>之后是古语的他动词，这些他动词演化出与之对应的自动词的路径如表所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">古语词尾</th>
<th style="text-align: center;">现代语词尾</th>
<th style="text-align: center;">对应自动词词尾</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">古语四段</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-aru/-oru/(-areru)</td>
</tr>
<tr class="even">
<td style="text-align: center;">古语下二段</td>
<td style="text-align: center;">-u</td>
<td style="text-align: center;">-eru</td>
<td style="text-align: center;">-aru/-oru</td>
</tr>
</tbody>
</table>
<p>举例如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">古语</th>
<th style="text-align: center;">现代语</th>
<th style="text-align: center;">对应自动词</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">古语四段</td>
<td style="text-align: center;">刺す</td>
<td style="text-align: center;">刺す</td>
<td style="text-align: center;">刺さる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">挟む</td>
<td style="text-align: center;">挟む</td>
<td style="text-align: center;">挟まる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">塞ぐ</td>
<td style="text-align: center;">塞ぐ</td>
<td style="text-align: center;">塞がる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">積む</td>
<td style="text-align: center;">積む</td>
<td style="text-align: center;">積もる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">剥ぐ</td>
<td style="text-align: center;">剥ぐ</td>
<td style="text-align: center;">剥がれる</td>
</tr>
<tr class="even">
<td style="text-align: center;">古语下二段</td>
<td style="text-align: center;">上ぐ</td>
<td style="text-align: center;">上げる</td>
<td style="text-align: center;">上がる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">始む</td>
<td style="text-align: center;">始める</td>
<td style="text-align: center;">始まる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">植う</td>
<td style="text-align: center;">植える</td>
<td style="text-align: center;">植わる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">終う</td>
<td style="text-align: center;">終える</td>
<td style="text-align: center;">終わる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">掛く</td>
<td style="text-align: center;">掛ける</td>
<td style="text-align: center;">掛かる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">篭む</td>
<td style="text-align: center;">篭める</td>
<td style="text-align: center;">篭もる</td>
</tr>
</tbody>
</table>
<p>可以发现古语中的他动词演化为对应的自动词基本依靠于词尾「る」，这一词尾可能和表示可能的助动词有关，但是目前没有确切的证据。词尾「る」大多条件下遵从四段活用，然而在部分词语中则遵从下二段活用，因而演化为现代语中的「れる」词尾。</p>
<p>据此可知，词尾「る」多与自动词有关，词尾「す」多与他动词有关。这引出了另外一种对应，即同样的词干分别连接「る」和「す」形成一对对应的自他动词。这里接续词尾「る」和「す」后形成四段动词还是下二段动词，则没有找到明显的规律。作为下二段动词时词尾「る」和「す」分别演化为现代语的词尾「れる」和「せる」：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">古语自动词</th>
<th style="text-align: center;">古语他动词</th>
<th style="text-align: center;">现代语自动词</th>
<th style="text-align: center;">现代语他动词</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">現る</td>
<td style="text-align: center;">現す</td>
<td style="text-align: center;">現れる</td>
<td style="text-align: center;">現す</td>
</tr>
<tr class="even">
<td style="text-align: center;">隠る</td>
<td style="text-align: center;">隠す</td>
<td style="text-align: center;">隠れる</td>
<td style="text-align: center;">隠す</td>
</tr>
<tr class="odd">
<td style="text-align: center;">離る</td>
<td style="text-align: center;">話す</td>
<td style="text-align: center;">離れる</td>
<td style="text-align: center;">離す</td>
</tr>
<tr class="even">
<td style="text-align: center;">乗る</td>
<td style="text-align: center;">乗す</td>
<td style="text-align: center;">乗る</td>
<td style="text-align: center;">乗せる</td>
</tr>
<tr class="odd">
<td style="text-align: center;">寄る</td>
<td style="text-align: center;">寄す</td>
<td style="text-align: center;">寄る</td>
<td style="text-align: center;">寄せる</td>
</tr>
<tr class="even">
<td style="text-align: center;">移る</td>
<td style="text-align: center;">移す</td>
<td style="text-align: center;">移る</td>
<td style="text-align: center;">移す</td>
</tr>
<tr class="odd">
<td style="text-align: center;">灯る</td>
<td style="text-align: center;">灯す</td>
<td style="text-align: center;">灯る</td>
<td style="text-align: center;">灯す</td>
</tr>
<tr class="even">
<td style="text-align: center;">渡る</td>
<td style="text-align: center;">渡す</td>
<td style="text-align: center;">渡る</td>
<td style="text-align: center;">渡す</td>
</tr>
</tbody>
</table>
<p>最后需要提到古语中最为重要的一类动词，即自他同形的动词。自他同形动词指的是，一对对应的自他动词有相同的形式，而一般而言有不同的活用方式，当然不排除具有相同活用方式的可能。例如动词「叶ふ」，其作为他动词的时候遵从下二段活用，作为自动词的时候遵从四段活用。而由于二段动词演化时词尾的变化，如果这类动词同时拥有四段和二段的活用，则会演化为现代日语中的一对自他动词对。而如果这类动词在自动和他动时都是四段活用或者二段活用，则会演化为现代日语中的一个两用动词。这些单词的词例包括：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">类别</th>
<th style="text-align: center;">古语</th>
<th style="text-align: center;">现代语自动</th>
<th style="text-align: center;">现代语他动</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">自动四段、他动二段</td>
<td style="text-align: center;">苦しむ</td>
<td style="text-align: center;">苦しむ</td>
<td style="text-align: center;">苦しめる</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">揃ふ</td>
<td style="text-align: center;">揃う</td>
<td style="text-align: center;">揃える</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">付く</td>
<td style="text-align: center;">付く</td>
<td style="text-align: center;">付ける</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">浮かぶ</td>
<td style="text-align: center;">浮かぶ</td>
<td style="text-align: center;">浮かべる</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">入る</td>
<td style="text-align: center;"><code>@ 入 い・はい</code>る</td>
<td style="text-align: center;">入れる</td>
</tr>
<tr class="even">
<td style="text-align: center;">自动二段、他动四段</td>
<td style="text-align: center;">切る</td>
<td style="text-align: center;">切れる</td>
<td style="text-align: center;">切る</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">砕く</td>
<td style="text-align: center;">砕ける</td>
<td style="text-align: center;">砕く</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">抜く</td>
<td style="text-align: center;">抜ける</td>
<td style="text-align: center;">抜く</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">剥ぐ</td>
<td style="text-align: center;">剥げる</td>
<td style="text-align: center;">剥ぐ</td>
</tr>
</tbody>
</table>
<p>需要注意，这类古语自他同形动词有可能继续遵从先前叙述的规则发生拓展。例如动词「休む」在作为自动词时使用四段活用，作为他动词时使用下二段活用，据此得到一对现代语自他动词对「休む・休める」。然而其作为他动词的时候依然可以通过「る」词尾获取另外一个对应的自动词「休まる」。这里我的猜测是，四段的「休む」在自动和他动的区分上并不明显，甚至更类似于自他两用动词，因而需要派生出一个完全的自动词完善表达。</p>
<p>而动词「剥ぐ」作为自动词时使用下二段活用，作为他动词时使用四段活用。由于四段的「剥ぐ」自他性并不显著，从而分别通过词尾「る」和「す」派生出了新的自动词「剥がれる」和他动词「剥がす」。</p>
<p>在此之外还有很多例外的对应：</p>
<ul>
<li>分かれる・分ける</li>
<li>消える・消す</li>
<li>捕まる・捕まえる</li>
<li>見える・見る、聞こえる・聞く</li>
<li>揺れる・揺する</li>
<li>潤う・潤す</li>
<li>なくなる・なくす</li>
</ul>
<p>这些对应大多难以使用简单的规则概括，故仅能依靠记忆。</p>
]]></content>
      <categories>
        <category>【学习笔记】日语</category>
      </categories>
  </entry>
  <entry>
    <title>《汇编语言程序设计》学习笔记</title>
    <url>/2021/08/09/note-of-asm/</url>
    <content><![CDATA[<p>这门课是 2021 年暑期学期开设的计算机系专业课，应该也算是为下学期的《计算机组成原理》课程做预备，所以还打算好好学一下。</p>
<span id="more"></span>
<h1 id="课程基本介绍">课程基本介绍</h1>
<h2 id="汇编语言介绍">汇编语言介绍</h2>
<p>汇编语言可以认为是机器指令的一种表记方式，其表述了计算机硬件系统对外开放的主要接口和规格，是计算机系统之中的软硬件的分界。所以说要了解汇编语言，就首先需要了解机器指令。</p>
<p>机器指令系统一般分为两类：</p>
<ul>
<li><p>CLSC，即<strong>复杂指令系统</strong>。一般而言具有多种指令，寻址方式复杂，单条指令的功能较为复杂。较为经典的代表是 X86。</p></li>
<li><p>RISC，即<strong>精简指令系统</strong>。考虑到实际使用的指令大多都是简要指令，故该系统只具有常用的精简指令。在这样的条件下，该指令系统依赖于编译器产生高效的代码（依赖编译器优化）。较为经典的代表为 MIPS。</p></li>
</ul>
<p>目前，CLSC 和 RISC 之间的差别渐渐缩小。但是还是具有明显的区分方式的，即：</p>
<div class="note info no-icon"><p>It loads / stores [with / without] other operations.</p>
</div>
<p>借助于连接软硬件的机器指令集，计算机系统实现了软硬件解耦合。这样软硬件可以独立编写，从而促进了计算机的发展。</p>
<p><strong>注解：</strong>软硬件的分离的一个重要基石是<strong>图灵完备性</strong>。也就是说软件使用的高级语言是图灵完备的，硬件的指令序列也是图灵完备的，这两者完全等价。这样才保证了分离的可行性。</p>
<h2 id="x86-指令集介绍">X86 指令集介绍</h2>
<p>X86 指令集具有以下的基本特征：</p>
<ul>
<li><p>向下兼容、变长指令、多种寻址方式</p></li>
<li><p>通用寄存器个数有限（X86-32 具有 8 个通用寄存器，X86-64 具有 16 个通用寄存器）</p></li>
<li><p>至多允许一个操作数在内存中，另外一个操作数需要在寄存器中或者是立即数</p></li>
</ul>
<div class="note info no-icon"><p>这里提到了寄存器。X86 之中的寄存器命名为：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">寄存器名称【 X86-64 名称】</th>
<th style="text-align: center;">X86-32 名称</th>
<th style="text-align: center;">寄存器名称【 X86-64 名称】</th>
<th style="text-align: center;">X86-32 名称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>%rax</code></td>
<td style="text-align: center;"><code>%eax</code></td>
<td style="text-align: center;"><code>%r8</code></td>
<td style="text-align: center;"><code>%r8d</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rdx</code></td>
<td style="text-align: center;"><code>%edx</code></td>
<td style="text-align: center;"><code>%r9</code></td>
<td style="text-align: center;"><code>%r9d</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rcx</code></td>
<td style="text-align: center;"><code>%ecx</code></td>
<td style="text-align: center;"><code>%r10</code></td>
<td style="text-align: center;"><code>%r10d</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rbx</code></td>
<td style="text-align: center;"><code>%ebx</code></td>
<td style="text-align: center;"><code>%r11</code></td>
<td style="text-align: center;"><code>%r11d</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rsi</code></td>
<td style="text-align: center;"><code>%esi</code></td>
<td style="text-align: center;"><code>%r12</code></td>
<td style="text-align: center;"><code>%r12d</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rdi</code></td>
<td style="text-align: center;"><code>%edi</code></td>
<td style="text-align: center;"><code>%r13</code></td>
<td style="text-align: center;"><code>%r13d</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rsp</code></td>
<td style="text-align: center;"><code>%esp</code></td>
<td style="text-align: center;"><code>%r14</code></td>
<td style="text-align: center;"><code>%r14d</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rbp</code></td>
<td style="text-align: center;"><code>%ebp</code></td>
<td style="text-align: center;"><code>%r15</code></td>
<td style="text-align: center;"><code>%r15d</code></td>
</tr>
</tbody>
</table>
</div>
<p>由于 X86 重视向下兼容，所以其指令集越来越趋向于庞杂，所以其一个缺点就是资源利用率低。</p>
<h2 id="mips-指令集介绍">MIPS 指令集介绍</h2>
<p>MIPS 的设计思想是充分利用处理器的流水线结构，目标是让流水线各段负载均匀，这样可以让处理器频率得到提高。其特征包括：</p>
<ul>
<li><p>以寄存器为中心，只有 Load 以及 Store 命令可以访问内存</p></li>
<li><p>所有计算操作均是从寄存器堆之中读取数据并将结果保存到寄存器堆，一共具有 32 个通用寄存器</p></li>
<li><p>指令格式规整、定长，且操作码位置固定，指令类型少（MIPS32 的指令只有 register / immediate / jump 三类）</p></li>
<li><p>寻址方式简单，每一条指令的操作过程简单</p></li>
</ul>
<p>当然，MIPS 也具有一些被扩展过的扩展指令集，如 MIPS16e 等等。</p>
<p>此外，RISC-V 也是一种常用指令集。但其几乎和 MIPS 同源，故这里不作详细介绍。</p>
<h1 id="整数的表示与计算">整数的表示与计算</h1>
<p>首先我们介绍一些简要表记，即 K / M / G / T / P / E。符号 K 表示 <span class="math inline">\(2^{10}\)</span>，之后有 <span class="math inline">\({\rm M} = 2^{10} \cdot {\rm K}\)</span> 以及 <span class="math inline">\({\rm G} = 2^{10} \cdot {\rm M}\)</span>，依此类推。</p>
<p>同时我们将一个二进制位称为<strong>比特（bit）</strong>，将八个比特称为<strong>字节（byte）</strong>。在 X86 架构下，两个字节称为一个<strong>字（word）</strong>，而在 MIPS 架构下则是四个字节。</p>
<p>对于数的进制、二进制数的逻辑运算，这里不进行介绍。</p>
<h2 id="机器字和字节序">机器字和字节序</h2>
<p>首先引入<strong>机器字</strong>的概念，机器字指的是计算机进行一次整数运算所能处理的二进制数据组，也可以是一个数据地址。相应的，<strong>机器字长</strong>指的就是一个机器字的位数。对于 32 位字长的计算机，其地址能够表示的空间大小为 4GB 左右。机器字长越大的计算机，其地址的表示空间就越大。</p>
<p>机器字的定位为这个机器字第一个字节的地址，所以说相邻机器字的地址之差在 32 位系统之中为 4，而在 64 位系统之中为 8。</p>
<p><strong>字节序</strong>指的就是一个机器字所包含的字节在机器字之中的排列的顺序，分为<strong>大端序（Big endian）</strong>以及<strong>小端序（Little endian）</strong>。大端序指的是低位字节占据高地址，小端序则相反。</p>
<p>比如说十六进制数据 <code>0x01234567</code>，如果这个机器字地址为 <code>0x100</code>。那么在大端序之下，<code>0x100, 0x101, 0x102, 0x103</code> 的字节内容分别为 <code>01, 23, 45, 67</code>。而在小端序下则是 <code>67, 45, 23, 01</code>。</p>
<h2 id="整数的二进制编码">整数的二进制编码</h2>
<p>我们首先复习一下 C 语言之中各个数据类型的大小，这里以字节作为单位：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">数据类型</th>
<th style="text-align: center;">经典 32 位系统</th>
<th style="text-align: center;">X86-32</th>
<th style="text-align: center;">X86-64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>char</code></td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>short</code></td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>int</code></td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>long</code></td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">8</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>long long</code></td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">8</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>float</code></td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>double</code></td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">8</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>long double</code></td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">10 / 12</td>
<td style="text-align: center;">10 / 16</td>
</tr>
<tr class="odd">
<td style="text-align: center;">指针</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">8</td>
</tr>
</tbody>
</table>
<p>这里我们为了简便，使用 16 位系统来演示整数的编码方式，也就是说机器字长为 16 位，一个整数使用 2 个字节表示。</p>
<h3 id="有符号数的编码">有符号数的编码</h3>
<p>对于非负的整数，显然可以直接使用其二进制表示作为其编码。比如说十进制数 <code>12345</code>，其二进制表示为 <code>00110000 00111001</code>，那么其编码就是 <code>00110000 00111001</code>。</p>
<p>对于负数，一种解决方式是使用最高位表记符号，最高位为 <code>1</code> 的数为负数，为 <code>0</code> 的数为非负数。然而这样会导致加法器在运算的时候需要首先验证符号位，计算出结果后还需要计算符号为，比较繁杂。所以说这里引入了<strong>补码（two's complement）</strong>，用补码表示的整数可以简化有符号整数的计算。</p>
<p>非负数的补码就是其二进制表示，负数的补码是其绝对值的二进制表示按位取反之后加一。</p>
<p>比如说十进制数 <code>-12345</code>，由于 <code>12345</code> 的二进制表示为 <code>00110000 00111001</code>，首先按位取反得到 <code>11001111 11000110</code>，最后加一得到其补码为 <code>11001111 11000111</code>。</p>
<p>这个时候符号位依然存在，也就是说补码表示下负数最高位为 <code>1</code>，非负数最高位为 <code>0</code>。</p>
<div class="note info no-icon"><p>补码的优越性在于简化了有符号整数的加法计算。如果我们使用 <span class="math inline">\({\rm TC}_w(x)\)</span> 表示字长为 <span class="math inline">\(w\)</span> 的系统下整数 <span class="math inline">\(x\)</span> 的补码（比如 <code>-12345</code> 的补码为 <code>11001111 11000111</code>，后者直接转换为十进制表示的是 <code>53191</code>，那么定义 <span class="math inline">\({\rm TC}_w(-12345) = 53191\)</span>）。实际上可以发现对于非负数 <span class="math inline">\({\rm TC}_w(x)=x\)</span>，而对于负数：</p>
<p><span class="math display">\[
{\rm TC}_w(x) = 1 + \mathop{\sim}(-x)
\]</span></p>
<p>而对于字长为 <span class="math inline">\(w\)</span> 的系统，<span class="math inline">\(x + (\mathop{\sim}x) = 2^w - 1\)</span>，所以说对于负数 <span class="math inline">\(x\)</span> 有：</p>
<p><span class="math display">\[
{\rm TC}_w(x) = 1 + 2^w - 1 - (-x) = 2^w + x
\]</span></p>
<p>所以无论如何我们都可以断定：</p>
<p><span class="math display">\[
{\rm TC}_w(x) \equiv x\ ({\rm mod}\ 2^w)
\]</span></p>
<p>在这样的条件下做加法是简单的，因为一个整数和其补码在模 <span class="math inline">\(2^w\)</span> 意义下等价。后面讨论补码条件下的加法的时候，即使出现截断，由于所截断的 <code>1</code> 必然位于不低于 <span class="math inline">\(2^w\)</span> 的位上，所以截断还是不会影响模的结果。</p>
</div>
<p>对于字长为 <span class="math inline">\(w\)</span> 的系统，按照补码表示的有符号数系统之中，最大的数为 <span class="math inline">\(2^{w - 1} - 1\)</span>，而最小的数为 <span class="math inline">\(-2^{w - 1}\)</span>。</p>
<h3 id="无符号数的编码">无符号数的编码</h3>
<p>无符号数的编码是简单的，因为其只需要考虑非负数，所以直接使用二进制表示作为编码就可以了。</p>
<p>这种系统之下，最大的数为 <span class="math inline">\(2^w - 1\)</span>，而最小的数为 <span class="math inline">\(0\)</span>。</p>
<h3 id="有符号数和无符号数的关系和转换">有符号数和无符号数的关系和转换</h3>
<p>现在我们已经给出了有符号和无符号整数的表示方式了。现在考虑将一个有符号整数强制类型转换为无符号整数，比如说在机器字长为 4 的时候，<code>-4</code> 的补码为 <code>1010</code>，而强转为无符号整数的时候，<code>1010</code> 则表示 <code>12</code>。其实不难证明对于字长为 <span class="math inline">\(w\)</span> 的系统，有这样的关系：</p>
<p><span class="math display">\[
(\text{unsigned})x = \begin{cases}
x &amp; x \geq 0 \\
x + 2^w &amp; x &lt; 0
\end{cases}
\]</span></p>
<p>这里提一下，在 C 语言的比较运算之中如果同时出现有符号数和无符号数，则会将有符号数强制转换为无符号数。当然，如果两边都是有符号数，则按照有符号数的比较规则进行。</p>
<p>事实上，由于这样的隐式转换，如果我们给声明为无符号整数的变量赋予一个负数值，就有可能被强制转换为一个大整数，从而导致违反直觉的结果，甚至导致错误。所以说我们应当谨慎使用无符号整数，一般而言，只有涉及到<strong>模运算</strong>或者单纯使用<strong>位运算</strong>的时候无符号整数比较适合。</p>
<h2 id="整数的计算">整数的计算</h2>
<h3 id="无符号整数的加法">无符号整数的加法</h3>
<p>对于字长为 <span class="math inline">\(w\)</span> 的系统，两个整数的加法可能会需要 <span class="math inline">\(w + 1\)</span> 位才能表示，这个时候就会发生<strong>溢出</strong>。计算机的一般处理方式是舍去最高位，强制仅用 <span class="math inline">\(w\)</span> 位表达计算结果，其实相当于对 <span class="math inline">\(2^w\)</span> 取了模。也就是说，字长为 <span class="math inline">\(w\)</span> 的、带有截断的无符号整数加法为（这里，符号 <span class="math inline">\(+^{\text u}_w\)</span> 表示的是字长为 <span class="math inline">\(w\)</span> 的系统下无符号整数的加法）：</p>
<p><span class="math display">\[
x +^{\text{u}}_w y =\begin{cases}
x + y &amp; x + y &lt; 2^w \\
x + y - 2^w &amp; x + y \geq 2^w
\end{cases}
\]</span></p>
<h3 id="有符号整数的加法">有符号整数的加法</h3>
<p>在字长为 <span class="math inline">\(w\)</span> 的、使用补码的系统下，对于有符号整数 <span class="math inline">\(x, y\)</span>，其加法是有可能溢出的。</p>
<p>一种是两个大正数相加，超越了补码能表示的最大整数。此时补码的符号位承接了较低位溢出的 <code>1</code>，也就是说补码之和实际上代表一个负数。由于负数 <span class="math inline">\(u\)</span> 的补码 <span class="math inline">\({\rm TC}_w(u) = u + 2^w\)</span>，这个负数实际上就是 <span class="math inline">\(x + y - 2^w\)</span>。这种情况被称为<strong>正溢出</strong>。</p>
<p>另外一种是两个绝对值很大的负数相加，超越了补码能表示的最小整数。此时补码符号位两个 <code>1</code> 相加得到 <code>10</code>，溢出为 <span class="math inline">\(w + 1\)</span> 位数，但是最高位的 <code>1</code> 被截断。另外，较低的 <span class="math inline">\(w - 1\)</span> 位不会向上进位（绝对值很大的负数的补码较低位所表示的数实际上会很小）。此时结果的补码符号位为 <code>0</code>，代表一个正数。由于负数 <span class="math inline">\(u\)</span> 的补码 <span class="math inline">\({\rm TC}_w(u) = u + 2^w\)</span>，考虑到截断了一个 <code>1</code>，所以该正数为：</p>
<p><span class="math display">\[
(x + 2^w) + (y + 2^w) - 2^w = x + y + 2^w
\]</span></p>
<p>这种情况被称为<strong>负溢出</strong>。</p>
<p>对于求和结果在表示范围内的，补码的和（截断为 <span class="math inline">\(w\)</span> 位后）就是和的补码。这是因为 <span class="math inline">\(x, y\)</span> 的补码相加后截断，所代表的数与 <span class="math inline">\(x + y\)</span> 模 <span class="math inline">\(2^w\)</span> 同余，而 <span class="math inline">\(x + y\)</span> 位于补码能表示的范围内，所以 <span class="math inline">\(x, y\)</span> 的补码相加后截断得到的就是 <span class="math inline">\(x + y\)</span> 的补码。</p>
<p>总而言之，字长为 <span class="math inline">\(w\)</span> 的、带有截断的有符号整数加法为（这里，符号 <span class="math inline">\(+^{\text t}_w\)</span> 表示的是字长为 <span class="math inline">\(w\)</span> 的系统下无符号整数的加法）：</p>
<p><span class="math display">\[
x +^{\text{t}}_w y = \begin{cases}
x + y - 2^w &amp; x + y \geq 2^{w - 1} \\
x + y &amp; -2^{w - 1} \leq x + y &lt; 2^{w - 1} \\
x + y + 2^w &amp; x + y &lt; -2^{w - 1}
\end{cases}
\]</span></p>
<h3 id="无符号整数除以-2-的幂">无符号整数除以 2 的幂</h3>
<p>一般而言在计算机中，除法计算消耗的时间是相当长的。但是对于除数是 2 的幂的情况，我们可以使用移位的方式简化计算。</p>
<p>左移是很好理解的，溢出的部分会被截断，低位会用 <code>0</code> 补齐。但是右移的时候，低位截断是自然的，但是高位如何补齐则有两种方式。如果高位用 <code>0</code> 补齐，这种移位称为<strong>逻辑右移</strong>。如果用原数的最高位补齐（这里的最高位可以是 <code>0</code>，比如 16 位系统之中的 <code>00000000 00000001</code> 的最高位为 <code>0</code>），这种移位称为<strong>算术右移</strong>。</p>
<p>在字长为 <span class="math inline">\(w\)</span> 的系统下，我们将无符号的逻辑右移标记为 <span class="math inline">\(&gt;^{\text{ul}}_w\)</span>，无符号的算术右移则标记为 <span class="math inline">\(&gt;^{\text{um}}_w\)</span>。</p>
<p><strong>注解：</strong>有符号的右移则将上标的 <span class="math inline">\(\text{u}\)</span> 替换为 <span class="math inline">\(\text{t}\)</span>。</p>
<p>其实对于无符号整数 <span class="math inline">\(x\)</span> 不难得到：</p>
<p><span class="math display">\[
x &gt;^{\text{ul}}_w k = \left\lfloor \frac{x}{2^k} \right\rfloor
\]</span></p>
<h3 id="有符号整数除以-2-的幂">有符号整数除以 2 的幂</h3>
<p>首先说明，我们希望除法的结果<strong>向 0 舍入</strong>，也就是说 <code>23.6</code> 舍为 <code>23</code>，<code>-24.6</code> 舍为 <code>-24</code>。</p>
<p>这里我们依然使用右移来简化除法计算。但是我们注意到负数除以 2 的幂之后必然还是负数，所以不能使用逻辑右移，只能使用算数右移。这个时候，对于有符号整数 <span class="math inline">\(x\)</span> 我们可以简单地使用 <span class="math inline">\(x &gt;^{\text{tm}}_w k\)</span> 来计算 <span class="math inline">\(x / 2^k\)</span>。</p>
<p>对于正数，这样的计算显然是正确的。但是对于负数，比如说 <code>-15213</code>，其补码为 <code>11000100 10010011</code>。我们计算其除以 <code>256</code> 的商，按照上面的计算方式即将其补码算术右移 <code>8</code> 位，得到 <code>11111111 11000100</code>，结果为 <code>-60</code>。然而我们知道实际的结果应当为 <code>-59.43</code>，按照舍入应当保留为 <code>-59</code>。</p>
<div class="note info no-icon"><p>事实上我们可以说明：</p>
<p><span class="math display">\[
x &gt;^{\text{tm}}_w k = \left\lfloor \frac{x}{2^k} \right\rfloor
\]</span></p>
<p>也就是说<strong>使用算术右移计算有符号整数的时候永远得到向下舍入的结果</strong>。我们只要说明负数的情况即可，对于负数 <span class="math inline">\(x\)</span> 的补码 <span class="math inline">\(x_{w - 1}x_{w - 2} \cdots x_0\)</span>，我们设二进制数 <span class="math inline">\(x_{w - 1}x_{w - 2} \cdots x_k\)</span> 表示数 <span class="math inline">\(x&#39;\)</span>，二进制数 <span class="math inline">\(x_{k - 1}x_{k - 2} \cdots x_0\)</span> 表示数 <span class="math inline">\(x&#39;&#39; &lt; 2^k\)</span>。显然：</p>
<p><span class="math display">\[
2^k x&#39; + x&#39;&#39; = {\rm TC}_w(x) = 2^w + x
\]</span></p>
<p>而 <span class="math inline">\(x &gt;^{\text{tm}}_w k\)</span> 得到的是 <span class="math inline">\(x_{w - 1}x_{w - 1} \cdots x_{w - 1}x_{w - 2} \cdots x_k\)</span>，其表示数：</p>
<p><span class="math display">\[
x&#39; + \sum_{i = w - k}^{w - 1} 2^i = x&#39; + 2^{w - k}(2^k - 1)
\]</span></p>
<p>按照补码去解读这个二进制串的话，其结果为 <span class="math inline">\(x&#39; + 2^{w - k}(2^k - 1) - 2^w = x&#39; - 2^{w - k}\)</span>。也就能够计算得到：</p>
<p><span class="math display">\[
\left\lfloor \frac{x}{2^k} \right\rfloor = \left\lfloor \frac{2^k x&#39; + x&#39;&#39; - 2^w}{2^k} \right\rfloor = \left\lfloor x&#39; - 2^{w - k} + \frac{x&#39;&#39;}{2^k} \right\rfloor = x&#39; - 2^{w - k} = x &gt;^{\text{tm}}_w k
\]</span></p>
</div>
<p>为了修正这个舍入问题，我们可以尝试使用这样的一个性质：</p>
<p><span class="math display">\[
\left\lceil \frac{x}{y} \right\rceil = \left\lfloor \frac{x + y - 1}{y} \right\rfloor\ (y &gt; 0)
\]</span></p>
<p>也就是说我们只要在计算负数 <span class="math inline">\(x\)</span> 的时候改变为：</p>
<p><span class="math display">\[
\left\lfloor \frac{x + 2^k - 1}{2^k} \right\rfloor = [x +^{\text{t}}_w (2^k - 1)] &gt;^{\text{tm}}_w k
\]</span></p>
<p>即可。</p>
<h1 id="小数的表示">小数的表示</h1>
<h2 id="ieee-浮点数标准">IEEE 浮点数标准</h2>
<p>对于一个有小数部分的数 <span class="math inline">\(B\)</span>，我们总是能找到唯一的 <span class="math inline">\(s \in \{0, 1\}\)</span> 以及实数 <span class="math inline">\(M \in [1, 2)\)</span> 和整数 <span class="math inline">\(E\)</span> 满足：</p>
<p><span class="math display">\[
B = (-1)^s M \cdot 2^E
\]</span></p>
<p>这里 <span class="math inline">\(s, E, M\)</span> 分别称为<strong>符号</strong>、<strong>阶码</strong>和<strong>尾数</strong>。</p>
<p>基于这样的性质，我们可以给出小数的表示方式。将一片数据区域的最高位用于放置符号位 <span class="math inline">\(s\)</span>，然后后面分割为两部分，即 <strong>exp 域</strong>和 <strong>frac 域</strong>，分别放置 <span class="math inline">\(E\)</span> 以及 <span class="math inline">\(M\)</span>。exp 域和 frac 域的具体大小有两种常见的制式（即<strong>单精度浮点</strong>和<strong>双精度浮点</strong>）。当然还有一些不太常用的分区方式，具体见表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">标准</th>
<th style="text-align: center;">exp 域长度</th>
<th style="text-align: center;">frac 域长度</th>
<th style="text-align: center;">浮点总长</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">单精度浮点</td>
<td style="text-align: center;">8 bits</td>
<td style="text-align: center;">23 bits</td>
<td style="text-align: center;">4 字节</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">双精度浮点</td>
<td style="text-align: center;">11 bits</td>
<td style="text-align: center;">52 bits</td>
<td style="text-align: center;">8 字节</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">扩展精度浮点</td>
<td style="text-align: center;">15 bits</td>
<td style="text-align: center;">63 bits</td>
<td style="text-align: center;">10 字节</td>
<td style="text-align: center;">空置 1 bit</td>
</tr>
<tr class="even">
<td style="text-align: center;">半精度浮点</td>
<td style="text-align: center;">5 bits</td>
<td style="text-align: center;">10 bits</td>
<td style="text-align: center;">2 字节</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<p>在具体存储的时候，尾数由于整数部分必然为 <code>1</code>，所以只需要将小数部分按顺序存储即可，而阶码使用无符号整数方法存储。</p>
<p>这里注意，阶码理应是有可能为负数的，但一般存储的时候会将阶码加上一个固定的偏置变成正数之后存储。如果阶码长度为 <span class="math inline">\(e\)</span>，那么这个偏置就是 <span class="math inline">\(b = 2^{e - 1} - 1\)</span>。</p>
<p>比如说按照单精度浮点的方式存储数 <code>15213.0</code>，其二进制表示为 <span class="math inline">\(1.1101101101101 \times 2^{13}\)</span>。所以符号位为 <code>0</code>，尾数取小数部分前 23 位，即 <code>1101101 10110100 00000000</code>。阶码为 <code>13</code>，加上偏置 <span class="math inline">\(2^{7} - 1 = 127\)</span> 得到 <code>140</code>，即 <code>10001100</code>。所以最后的存储方式为：</p>
<figure class="highlight plaintext"><figcaption><span>Bits</span></figcaption><table><tr><td class="code"><pre><span class="line">01000110 01101101 10110100 00000000</span><br></pre></td></tr></table></figure>
<h2 id="浮点数的非规格化">浮点数的非规格化</h2>
<p>事实上，浮点数标准保留一部分阶码用于表示特殊的数字。一般而言，阶码全 <code>1</code> 和全 <code>0</code> 是被保留的。具体而言，阶码全 <code>1</code> 和全 <code>0</code> 的、表述特殊数字的浮点数被称为<strong>非规格化浮点数（denormalized float point）</strong>，其余的被称为<strong>规格化浮点数（normalized float point）</strong>。</p>
<p>全 <code>0</code> 的阶码如果按照上述的标准解读的话，表示的是相当接近于零的小数。但是由于默认了尾数的整数部分为 <code>1</code>，所以说还按照原有解读方式的话，浮点数无法表示 <code>0</code>。这个时候作出规定，就是<strong>阶码全 <code>0</code> 的时候，尾数的整数部分变为 <code>0</code></strong>。相应的，为了配合尾数解读方式的调整，<strong>阶码的偏置减去一</strong>。</p>
<p>假设某浮点数标准之中阶码长为 <span class="math inline">\(e\)</span>，尾数长为 <span class="math inline">\(m\)</span>。那么规格化的条件下最小的正浮点数应当是阶码为 <code>00...01</code>，尾数全 <code>0</code>。此时表示的数为 <span class="math inline">\(2^{1 - (2^{e - 1} - 1)} = 2^{2 - 2^{e - 1}}\)</span>。在非规格化条件下，如果将尾数按照无符号整数解析得到的非负整数标记为 <span class="math inline">\(n\)</span>，那么该浮点数应该为 <span class="math inline">\(2^{2 - 2^{e - 1}} \cdot 2^{-m}n\)</span>。这里非负整数 <span class="math inline">\(n\)</span> 取值范围为 <span class="math inline">\(0\)</span> 到 <span class="math inline">\(2^m - 1\)</span>。</p>
<p>所以说非规格化的浮点数所能表述的非负数序列为：</p>
<p><span class="math display">\[
0, \ 2^{2 - 2^{e - 1}} \cdot 2^{-m} \cdot 1, \ \cdots, \ 2^{2 - 2^{e - 1}} \cdot 2^{-m}(2^m - 1)
\]</span></p>
<p>这是一个公差为 <span class="math inline">\(2^{2 - 2^{e - 1}} \cdot 2^{-m}\)</span> 的等差数列，而且最后正好可以和规格化浮点数所表述的最小正数 <span class="math inline">\(2^{2 - 2^{e - 1}}\)</span> “无缝衔接”。所以说非规格化浮点数是一个合理的拓展。</p>
<p>但是，注意非规格化浮点数之中有 <code>+0</code> 和 <code>-0</code> 的区别。</p>
<p>全 <code>1</code> 的阶码用于表示很大的浮点数。一般而言尾数全 <code>0</code> 的时候该浮点数被保留用于表示无穷。而尾数有非 <code>0</code> 位的时候，该浮点数被保留用于表示 <code>NaN</code>。</p>
<hr />
<p>现在补全了非规格化浮点数之后，可以发现浮点数的大小比较实际上几乎可以按照无符号整数从高位直接比较到低位的逻辑进行。因为阶码大的数一定大，阶码一样的时候尾数大的数一定大，包括无穷大也可以纳入进来。但是要考虑这样的例外：</p>
<ul>
<li><p>考虑符号位</p></li>
<li><p>考虑 <code>+0</code> 和 <code>-0</code> 的特例</p></li>
<li><p>考虑 <code>NaN</code> 的问题</p></li>
</ul>
<h2 id="浮点数的舍入问题">浮点数的舍入问题</h2>
<p>由于部分数不能表述为有限的二进制小数，所以在转化为浮点数表示的时候需要舍入。一般而言向上舍入、向下舍入、向零舍入都会带来统计误差，而计算机之中常常使用<strong>向偶数舍入</strong>。其舍入的规则是向最接近的数舍入。如果向两边舍入的距离一致，那么优先舍入到偶数。比如说下列数之中，向百分位的舍入为：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; 12.324999 \Rightarrow 12.32 \\
&amp; 12.325001 \Rightarrow 12.33 \\
&amp; 12.325000 \Rightarrow 12.32 \\
&amp; 12.335000 \Rightarrow 12.34 \\
\end{aligned}
\]</span></p>
<p>回到二进制上的话，由于十进制的 <code>0.5</code> 相当于二进制的 <code>0.1</code>。也就是说如果二进制小数之中后面需要舍去的部分大于 <code>100...</code> 则向上舍入，小于 <code>100...</code> 则向下舍入，恰好是 <code>100...</code> 则向偶数舍入（舍入完毕后尾数为 <code>0</code>）。</p>
<p>这里要注意一点，舍入是有可能导致溢出。</p>
<hr />
<p>至此，小数的计算机编码方式基本就介绍完毕了。其具体过程为：</p>
<ul>
<li><p>根据使用的浮点数标准，判定使用规格化的浮点数还是非规格化的浮点数</p></li>
<li><p>据此判定符号位、阶码和尾数</p></li>
<li><p>对尾数进行舍入后转化为二进制表示</p></li>
</ul>
<h2 id="c-语言的浮点数">C 语言的浮点数</h2>
<p>C 语言之中，<code>int</code> 类型以及 <code>float</code> 类型是 4 字节的，<code>double</code> 则是 8 字节。它们之间的互相转换满足这样的规则：</p>
<ul>
<li><p><code>int</code> 可以精确转换为 <code>double</code> 类型</p></li>
<li><p><code>int</code> 转换为 <code>float</code> 类型不会溢出，但有可能被舍入</p></li>
<li><p><code>float</code> 以及 <code>double</code> 转换为 <code>int</code> 时尾数截断，如果发生溢出则产生 UB</p></li>
</ul>
<h1 id="汇编语言基本知识">汇编语言基本知识</h1>
<p>在这一部分，我们使用<strong>指令集架构（Instruction Set Architecture, ISA）</strong>来定义机器级程序的行为。在这个架构之中，CPU 内有一个记录下一条指令在主存储器之中位置的<strong>指令寄存器（Program Counter, PC）</strong>，这个寄存器在 X86 体系中被命名为 <code>%rip</code>。CPU 之中同时还具有若干个<strong>寄存器</strong>，以及一个用于存储最近执行指令的结果状态信息的<strong>条件码寄存器</strong>。除去 CPU 外，这个架构之中还有<strong>主存储器</strong>，其可以认为是以字节为单元的一片连续的地址空间。</p>
<h2 id="汇编语言的数据类型">汇编语言的数据类型</h2>
<p>和 C 语言不同，汇编语言不区分具体的数据类别，其不关心某一组二进制数据具体代表什么类型的数据。其不区分有符号和无符号的整数，甚至不区分指针和整数。其一般只区分数据的长度为字节、字、双字、四字。在处理这四种长度的数据的时候，指令的后缀分别为 <code>b, w, l, q</code>。比如说传送数据的命令为 <code>mov</code>，在传送字节的时候该命令写为 <code>movb</code>，在传送单字的时候该命令写为 <code>movw</code> 等等。</p>
<h2 id="汇编语言的数据操作">汇编语言的数据操作</h2>
<p>汇编语言的基本操作只包括对寄存器或主存数据进行运算、在寄存器和主存内部或者之间传递数据、转移程序执行位置这三种。</p>
<div class="note info no-icon"><p>在 X86-64 系统之下，寄存器是四字长的、通过名称访问的一片空间。但实际上有的时候指令可以不用访问整个四字长的寄存器空间，其可以通过 32 位操作访问四个字之中较低位的两个字，通过 16 位操作访问四个字中最低位的字，也可以通过字节操作访问最低位的字节。相应的，指代这一片寄存器空间的名称有所改变：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">64 位操作</th>
<th style="text-align: center;">32 位操作</th>
<th style="text-align: center;">16 位操作</th>
<th style="text-align: center;">字节操作</th>
<th style="text-align: center;">64 位操作</th>
<th style="text-align: center;">32 位操作</th>
<th style="text-align: center;">16 位操作</th>
<th style="text-align: center;">字节操作</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>%rax</code></td>
<td style="text-align: center;"><code>%eax</code></td>
<td style="text-align: center;"><code>%ax</code></td>
<td style="text-align: center;"><code>%al</code></td>
<td style="text-align: center;"><code>%r8</code></td>
<td style="text-align: center;"><code>%r8d</code></td>
<td style="text-align: center;"><code>%r8w</code></td>
<td style="text-align: center;"><code>%r8b</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rdx</code></td>
<td style="text-align: center;"><code>%edx</code></td>
<td style="text-align: center;"><code>%dx</code></td>
<td style="text-align: center;"><code>%dl</code></td>
<td style="text-align: center;"><code>%r9</code></td>
<td style="text-align: center;"><code>%r9d</code></td>
<td style="text-align: center;"><code>%r9w</code></td>
<td style="text-align: center;"><code>%r9b</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rcx</code></td>
<td style="text-align: center;"><code>%ecx</code></td>
<td style="text-align: center;"><code>%cx</code></td>
<td style="text-align: center;"><code>%cl</code></td>
<td style="text-align: center;"><code>%r10</code></td>
<td style="text-align: center;"><code>%r10d</code></td>
<td style="text-align: center;"><code>%r10w</code></td>
<td style="text-align: center;"><code>%r10b</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rbx</code></td>
<td style="text-align: center;"><code>%ebx</code></td>
<td style="text-align: center;"><code>%bx</code></td>
<td style="text-align: center;"><code>%bl</code></td>
<td style="text-align: center;"><code>%r11</code></td>
<td style="text-align: center;"><code>%r11d</code></td>
<td style="text-align: center;"><code>%r11w</code></td>
<td style="text-align: center;"><code>%r11b</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rsi</code></td>
<td style="text-align: center;"><code>%esi</code></td>
<td style="text-align: center;"><code>%si</code></td>
<td style="text-align: center;"><code>%sil</code></td>
<td style="text-align: center;"><code>%r12</code></td>
<td style="text-align: center;"><code>%r12d</code></td>
<td style="text-align: center;"><code>%r12w</code></td>
<td style="text-align: center;"><code>%r12b</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rdi</code></td>
<td style="text-align: center;"><code>%edi</code></td>
<td style="text-align: center;"><code>%di</code></td>
<td style="text-align: center;"><code>%dil</code></td>
<td style="text-align: center;"><code>%r13</code></td>
<td style="text-align: center;"><code>%r13d</code></td>
<td style="text-align: center;"><code>%r13w</code></td>
<td style="text-align: center;"><code>%r13b</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>%rsp</code></td>
<td style="text-align: center;"><code>%esp</code></td>
<td style="text-align: center;"><code>%sp</code></td>
<td style="text-align: center;"><code>%spl</code></td>
<td style="text-align: center;"><code>%r14</code></td>
<td style="text-align: center;"><code>%r14d</code></td>
<td style="text-align: center;"><code>%r14w</code></td>
<td style="text-align: center;"><code>%r14b</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>%rbp</code></td>
<td style="text-align: center;"><code>%ebp</code></td>
<td style="text-align: center;"><code>%bp</code></td>
<td style="text-align: center;"><code>%bpl</code></td>
<td style="text-align: center;"><code>%r15</code></td>
<td style="text-align: center;"><code>%r15d</code></td>
<td style="text-align: center;"><code>%r15w</code></td>
<td style="text-align: center;"><code>%r15b</code></td>
</tr>
</tbody>
</table>
<p>实际上，有的时候我们还可以用字节操作访问 <code>%rax, %rbx, %rcx, %rdx</code> 这四个寄存器的倒数第二低位的字节，指代这一部分空间的名称则为 <code>%ah, %bh, %ch, %dh</code>。</p>
</div>
<p>在具体进行操作的时候，一个机器指令往往需要跟随若干的操作数具体规定操作方法（如传送数据的时候，需要通过操作数指定传送的起始位置和终止位置）。操作数有三种表述方式：</p>
<ul>
<li><p><strong>立即数</strong>。其是一个整型的常数，写法为 <code>$</code> 后接上一个 C 风格的数字表示这个立即数的值。比如说 <code>$-521</code> 以及 <code>$0x4FD</code>。</p></li>
<li><p><strong>寄存器数值</strong>。直接使用寄存器的名称访问，如 <code>%rbp</code> 就代表这个寄存器之中的数据。但是注意，寄存器 <code>%rsp</code> 一般而言是被保留的。</p></li>
<li><p><strong>主存数值</strong>。使用地址访问，其地址由某一个寄存器之中的数据指定，写法为寄存器名称加括号。比如说要访问某一个主存数值，其地址存储在寄存器 <code>%rax</code> 之中，那么其写法为 <code>(%rax)</code>。</p></li>
</ul>
<h2 id="汇编语言的寻址方式">汇编语言的寻址方式</h2>
<h3 id="x86-系统的变址寻址方式">X86 系统的变址寻址方式</h3>
<p>但实际上，在 X86 系统中访问主存数值的方式（这也被称为<strong>寻址方式</strong>）并不是单一的。除去直接使用寄存器之中的数据作为地址去访问，X86 系统提供了包含变址、立即数偏移的寻址模式，其表记一般为 <code>IMM(a, b, s)</code>。这里 <code>IMM</code> 为一个立即数，称为<strong>立即数偏移</strong>，<code>a, b</code> 为两个寄存器名，分别称为<strong>定址寄存器</strong>和<strong>变址寄存器</strong>，<code>s</code> 为 <code>1, 2, 4, 8</code> 之中的一个数，称为<strong>比例因子</strong>。这个记号所代表的地址为：</p>
<p><span class="math display">\[
{\rm IMM} + {\rm R}(a) + {\rm R}(b) \cdot s 
\]</span></p>
<p>这里符号 <span class="math inline">\({\rm R}(a)\)</span> 表示寄存器 <code>a</code> 之中的数据。</p>
<p>这个表记存在一系列简写：</p>
<ul>
<li><p>当不存在定址和变址寄存器的时候，简写为 <code>IMM</code>。这个时候相当于不经过寄存器直接指定主存中的某一个地址，称为<strong>绝对寻址</strong>。</p></li>
<li><p>当 <code>IMM</code> 为 <code>0</code>，不存在变址寄存器的时候，简写为 <code>(a)</code>。这也就是最简单的寻址方式，即直接将寄存器数值作为地址解读，称为<strong>间接寻址</strong>。</p></li>
<li><p>当存在变址寄存器但 <code>s</code> 为 <code>1</code> 的时候，简写为 <code>IMM(a, b)</code>。</p></li>
</ul>
<hr />
<p>现在我们就可以尝试解读一些汇编代码了，比如：</p>
<figure class="highlight plaintext"><figcaption><span>X86-64 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">movq $-147, (%rax)</span><br></pre></td></tr></table></figure>
<p>这个指令的意思是按照四字数据转移的方式，将立即数 <code>-147</code> 写入主存，写入地址为寄存器 <code>%rax</code> 的数值。</p>
<h3 id="利用寻址进行整数计算">利用寻址进行整数计算</h3>
<p>地址实际上也可以被解读为整数，而机器进行寻址的时候实际上就在完成整数计算。根据上面给出的变址寻址方式，我们可以利用寻址命令来计算类似 <span class="math inline">\(x + ky\)</span> 的整数算式。</p>
<p>首先需要知道指令：</p>
<figure class="highlight plaintext"><figcaption><span>X86-64 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">leaq [SRC], [DEST]</span><br></pre></td></tr></table></figure>
<p>这里 <code>[SRC]</code> 是一个寻址表达式，其计算出来的结果将赋给 <code>[DEST]</code>。比如 <code>leaq (%rdi, %rdi, 2), %rax</code> 会将前面寻址计算出来的地址赋予寄存器 <code>%rax</code>。</p>
<p>实际上在编译器优化之中，部分整数运算都会被优化为地址计算。比如说 <code>x * 12</code> 这个代码有可能会被转化为如下的汇编代码：</p>
<figure class="highlight plaintext"><figcaption><span>X86-64 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">leaq (%rdi, %rdi, 2), %rax</span><br><span class="line">salq $2, %rax</span><br></pre></td></tr></table></figure>
<p>第一步使用地址计算实际上计算了 <code>x + x * 2</code>，即三倍的 <code>x</code>。第二步命令为左移，左移两位即再次乘以 <code>4</code> 得到最后结果。</p>
<h2 id="汇编语言常用的整数计算命令">汇编语言常用的整数计算命令</h2>
<p>汇编语言计算整数运算的时候，会有如下表所列出的常用命令。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">命令格式</th>
<th style="text-align: center;">等价的 C 代码</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>addq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST + SRC</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>subq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST - SRC</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>imulq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST * SRC</code></td>
<td style="text-align: center;">结果取较低的 64 位截断</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>salq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST &lt;&lt; SRC</code></td>
<td style="text-align: center;">与逻辑左移 <code>shll</code> 等价</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>sarq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST &gt;&gt; SRC</code></td>
<td style="text-align: center;">算术右移</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>shrq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST &gt;&gt; SRC</code></td>
<td style="text-align: center;">逻辑右移</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>xorq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST ^ SRC</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>andq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST &amp; SRC</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>orq [SRC], [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST | SRC</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>incq [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST + 1</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>decq [DEST]</code></td>
<td style="text-align: center;"><code>DEST = DEST - 1</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>negq [DEST]</code></td>
<td style="text-align: center;"><code>DEST = -DEST</code></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>notq [DEST]</code></td>
<td style="text-align: center;"><code>DEST = ~DEST</code></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h1 id="条件码与其应用">条件码与其应用</h1>
<p>当程序运行的时候，部分和当前程序运行状态相关的数据将会被 CPU 保存。我们已经介绍过指向下一条指令的程序计数器 <code>%rip</code>，存储临时数据的寄存器堆。另外我们要提到的是被保留的寄存器 <code>%rsp</code> 其用于存储<strong>栈顶地址</strong>。另外提一下条件码，条件码一般分为四个：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">条件码标记</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>CF</code></td>
<td style="text-align: center;">Carry Flag</td>
<td style="text-align: center;">进位标记</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>ZF</code></td>
<td style="text-align: center;">Zero Flag</td>
<td style="text-align: center;">运算数为零标记</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>SF</code></td>
<td style="text-align: center;">Sign Flag</td>
<td style="text-align: center;">运算数符号标记</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>OF</code></td>
<td style="text-align: center;">Overflow Flag</td>
<td style="text-align: center;">补码运算溢出标记</td>
</tr>
</tbody>
</table>
<p>条件码一般是由算术指令运算过程中隐含地设定的，具体如何设定条件码需要查看具体的命令运行方式。这里额外指出，<strong><code>leaq</code> 指令计算的时候不设置条件码</strong>。</p>
<h2 id="推知操作数关系">推知操作数关系</h2>
<p>若干以 <code>set</code> 为前缀的命令可以读取条件码的内容并存入某寄存器的最低位字节（使用字节操作）。比如说 <code>setle</code> 命令实际上会读取 <code>SF, OF, ZF</code> 三个条件码，将 <code>(SF ^ OF) | ZF</code> 的计算结果存入指定字节。</p>
<p>这个计算结果其实就代表了两个操作数之间的一个关系。比如说 <code>cmpq [SRC], [DEST]</code> 指令在 <code>SRC == DEST</code> 的时候会将 <code>ZF</code> 置真，在 <code>DEST - SRC &lt; 0</code> 的时候将 <code>SF</code> 置真，在运算溢出的时候将 <code>OF</code> 置真。那么 <code>setle</code> 所计算的结果为真实际上就代表 <code>DEST &lt;= SRC</code>。</p>
<p>这里给出具体示例，比如以下 C 语言代码：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y; &#125;</span><br></pre></td></tr></table></figure>
<p>会被汇编为：</p>
<figure class="highlight plaintext"><figcaption><span>X86-64 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">cmpq   %rsi, %rdi</span><br><span class="line">setg   %al</span><br><span class="line">movzbl %al, %eax</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>
<p>其含义为首先使用 <code>cmpq</code> 命令更新条件码，然后使用 <code>setg</code> 命令读取条件码，最后使用 <code>movzbl</code> 将计算结果移动到表示函数返回值的寄存器。</p>
<h2 id="实现程序跳转">实现程序跳转</h2>
<p>对于 C 语言之中的 <code>if, goto</code> 等涉及到程序跳转的语句，汇编之中也应当有相应的可以跳转执行的命令，而条件码及其相关运算结果会控制程序是否跳转。与 <code>set</code> 系列命令一致，汇编之中还有 <code>j</code> 系列命令，如 <code>je</code>。其会读取条件码并计算，结果为真则会触发程序跳转。</p>
<p>比如这样的 C 代码：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">absdiff</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) result = x - y;</span><br><span class="line">    <span class="keyword">else</span> result = y - x;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>会被汇编为：</p>
<figure class="highlight plaintext"><figcaption><span>X86-64 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">absdiff:</span><br><span class="line">    cmpq %rsi, %rdi</span><br><span class="line">    jle  .L4</span><br><span class="line">    movq %rdi, %rax</span><br><span class="line">    subq %rsi, %rax</span><br><span class="line">    ret</span><br><span class="line">.L4:</span><br><span class="line">    movq %rsi, %rax</span><br><span class="line">    subq %rdi, %rax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>
<p>这里第三行就会读取 <code>cmpq</code> 命令设置的条件码，如果满足了跳转条件，就会跳转到 <code>.L4</code> 标记处继续执行，否则向下继续执行。</p>
<p>实际上，汇编代码的跳转基本和 C 语言之中的 <code>goto</code> 类似，所以我们可以将 <code>if</code> 转为等价的 <code>goto</code> 表达式，这样的话就可以得到和汇编代码形式类似的 C 代码。对于以下的 C 代码：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (CASE) &#123; <span class="comment">/* IF BLOCK */</span> &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">/* ELSE BLOCK */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>实际上等价于以下 C 代码：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!CASE) <span class="keyword">goto</span> Else;</span><br><span class="line">    <span class="comment">/* IF BLOCK */</span></span><br><span class="line">    <span class="keyword">goto</span> Done;</span><br><span class="line">Else:</span><br><span class="line">    <span class="comment">/* ELSE BLOCK*/</span></span><br><span class="line">Done:</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><p>使用条件码实现程序跳转的方式称为<strong>条件跳转</strong>。但实际上，条件跳转一般会拖慢整个系统的速度。这是因为现代的流水线式处理器一般要求系统能够基本精确得知接下来应当运行的指令是什么，这样才能保证并发执行，获得高效率。</p>
<p>为了解决这个问题，一种方法是提高处理器对下面具体运行哪一个分支的预测准确率，一种方法是使用<strong>条件转移</strong>。</p>
<p>条件转移指的是将两个分支的结果都计算出来，最后再根据条件码决定取用哪一个。比如说上面的 <code>absdiff</code> 函数，现代编译器一般会把 <code>x - y</code> 和 <code>y - x</code> 都计算出来，最后根据条件码取其中一个放到返回值寄存器上。</p>
<p>但是条件转移的使用是有局限性的，比如说下面两种情况就并不适合：</p>
<ul>
<li><p>某一个分支有副作用，比如说修改了某些其他数据</p></li>
<li><p>某一个分支的计算量过于庞大</p></li>
</ul>
</div>
<p>除去 <code>if</code>，C 语言中还可以使用 <code>switch</code> 语句实现程序跳转。<code>switch</code> 语句可以翻译为若干的 <code>if-else</code> 组，但是更常见的解读方式是<strong>构建跳转表</strong>。</p>
<p><code>TODO</code></p>
<h2 id="实现程序循环">实现程序循环</h2>
<p>C 语言之中使用关键字 <code>do, while, for</code> 可以实现程序循环，同样我们可以使用条件码和 <code>j</code> 系列命令完成等价汇编代码编写，实际上我们只需要改写为等价的 <code>goto</code> 表达的 C 代码就可以。</p>
<p>对于 <code>do ... while</code> 循环，等价改写为：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* do ... while */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123; <span class="comment">/* CONTENT */</span> &#125; <span class="keyword">while</span> (CASE)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* goto */</span></span><br><span class="line"></span><br><span class="line">Loop:</span><br><span class="line">    <span class="comment">/* CONTENT */</span></span><br><span class="line"><span class="keyword">if</span> (CASE) <span class="keyword">goto</span> Loop;</span><br></pre></td></tr></table></figure>
<p>对于 <code>while</code> 循环，等价改写为：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* while */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (CASE) &#123; <span class="comment">/* CONTENT */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* goto v1 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> Test;</span><br><span class="line">Loop:</span><br><span class="line">    <span class="comment">/* CONTENT */</span></span><br><span class="line">Test:</span><br><span class="line">    <span class="keyword">if</span> (CASE) <span class="keyword">goto</span> Loop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* goto v2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!CASE) <span class="keyword">goto</span> Done;</span><br><span class="line">Loop:</span><br><span class="line">    <span class="comment">/* CONTENT */</span></span><br><span class="line"><span class="keyword">if</span> (CASE) <span class="keyword">goto</span> Loop;</span><br><span class="line">Done:</span><br></pre></td></tr></table></figure>
<p>而 <code>for</code> 循环一般是改写为等价的 <code>while</code> 循环后再改写为 <code>goto</code> 版本：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* for */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="comment">/* INIT */</span>; CASE; <span class="comment">/* UPDATE */</span>) &#123; <span class="comment">/* CONTENT */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* while */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* INIT */</span></span><br><span class="line"><span class="keyword">while</span> (CASE) &#123;</span><br><span class="line">    <span class="comment">/* CONTENT */</span></span><br><span class="line">    <span class="comment">/* UPDATE */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数调用与程序栈">函数调用与程序栈</h1>
<h2 id="程序栈和相关指令">程序栈和相关指令</h2>
<p>X86 系统中，将一片内存区域按照栈的方式管理，其中<strong>高地址为栈底</strong>，这片内存区域就被称为<strong>程序栈</strong>，其栈顶地址由寄存器 <code>%rsp</code> 管理。</p>
<p>对程序栈有两种最为基本的操作，即压栈和出栈。压栈操作命令为 <code>pushq [SRC]</code>，含义是将 <code>[SRC]</code> 写入程序栈，寄存器 <code>%rsp</code> 减小一个字节（即减去 <code>8</code>）。而出栈命令为 <code>popq [DEST]</code>，含义是将程序栈栈顶字节写入 <code>[DEST]</code>，寄存器 <code>%rsp</code> 增加一个字节（即加上 <code>8</code>）。</p>
<h2 id="函数调用">函数调用</h2>
<p>有关函数调用的两个命令为 <code>call</code> 和 <code>ret</code>，两者分别代指调用某一个函数和某一个函数返回。</p>
<p><strong>注解：</strong>似乎在汇编之中，更习惯把函数调用说成过程调用，我们之后也使用这样的名称。</p>
<p><code>call</code> 的命令格式为 <code>callq 40050 &lt;mul&gt;</code>。两个参数分别为需要调用的过程的机器码在主存里的位置，系统根据这个参数令程序指针 <code>%rip</code> 跳转。第二个参数则是调用的过程的名称。</p>
<p><code>call</code> 命令一共会完成两个任务。第一个任务是将<strong>返回地址</strong>（返回地址指的是 <code>call</code> 指令<strong>下一条</strong>指令的地址）压入程序栈，这一步是为了在调用的过程终结返回的时候能够返回到正确的位置继续执行。第二个任务是将 <code>%rip</code> 设置为要跳转的过程在主存之中的地址，实现真正的跳转。</p>
<p>而 <code>ret</code> 命令所完成的就是将程序栈的栈顶写入 <code>%rip</code>，让系统回到原先位置继续执行。其不需要接受参数，一般只需要命令本身即可。</p>
<hr />
<p>有的时候调用过程需要传递参数。在 X86 架构之下，如果传递参数不多于 6 个，则使用 <code>%rdi, %rsi, %rdx, %rcx, %r8, %r9</code> 一共 6 个寄存器进行传递。如果参数多余 6 个，则使用程序栈传递，序号越大的参数越在栈底。而函数返回值默认存放在 <code>%rax</code> 之中。</p>
<h2 id="栈帧">栈帧</h2>
<p>类似 C 之类的语言，会支持函数的递归调用，这就说明了这些语言的代码支持<strong>重入（Reentrant）</strong>，即允许多个实例同时运行同一块代码。基于这样的要求，我们不仅需要在程序栈之中记录返回地址，我们还需要记录是哪一个实例调用了过程。而每一次过程调用就会在程序栈之中生成一片用于记录这次调用的数据（包括这一次调用的临时变量、返回地址、寄存器副本等），这就是一个<strong>栈帧（Stack frame）</strong>。</p>
<p>栈帧的管理也是简单的，在过程被调用的时候分配空间、创建栈帧，在过程返回之后，该栈帧被释放。由于栈帧一般多于一个字节，所以除去栈顶指针 <code>%rsp</code> 外，还设定了栈帧指针 <code>%rbp</code> 标记栈帧的起始地址，所以 <code>%rbp</code> 和 <code>%rsp</code> 之间的程序栈指代栈顶的栈帧。</p>
<hr />
<p>另外我们也需要指出，有的时候系统会做出一些“明明没有分配栈帧（<code>%rsp</code> 没有动）但相当于创建了临时栈帧”的行为。一种可能是使用栈空间进行数据传递，这个时候栈就类似于寄存器。比如说系统可以在不动 <code>%rsp</code> 的条件下将数据通过比 <code>%rsp</code> 低一个字节的位置传递一定的数据。但栈空间的也是有限制的，比 <code>%rsp</code> 低多于 128 字节的栈空间一般是被保留的，不能直接使用。</p>
<h2 id="寄存器使用惯例">寄存器使用惯例</h2>
<p>在一个过程调用另外一个过程的时候，往往会出现寄存器冲突，比如说两者都需要使用 <code>%rdi</code> 存放参数。这个时候一般需要将寄存器数据复制到栈帧之中暂且保存，将寄存器空出给另外一方使用。</p>
<p>而到底由调用者还是被调用者的栈帧暂存寄存器，则一般遵循一些惯例。在 X86 架构下寄存器 <code>%rbx, %rbp, %r12, %r13, %r14, %r15</code> 称为<strong>被调用者保存（Callee saved）</strong>寄存器，即被调用者的栈帧保存这些寄存器的数据，在<strong>过程返回之前将栈帧数据复原</strong>。寄存器 <code>%r10, %r11</code> 和所有的传递参数的寄存器称为<strong>调用者保存（Caller saved）</strong>寄存器，即调用者的栈帧保存寄存器的数据，在<strong>调用结束后将栈帧数据复原</strong>。</p>
<h1 id="数组及结构的存储表示">数组及结构的存储表示</h1>
<h2 id="数组的存储">数组的存储</h2>
<p>数组 <code>T a[N]</code> 在主存之中存储的基本原则为连续存储，也就是将连续 <code>N * sizeof(T)</code> 字节的空间用于存储这个数组。</p>
<p>而对于二维数组，我们还是会使用连续的存储空间进行存储，而且一般遵循<strong>行优先</strong>原则。对于 <code>int a[3][5]</code>，其在主存之中的存储顺序为 <code>a[0][0], a[0][1], ..., a[0][4], a[1][0], ..., a[2][4]</code>。这种存储方式称为<strong>嵌套数组（Nested array）</strong>。</p>
<p>除了嵌套数组，还有一种存储方式是<strong>多级指针数组（Multi-level pointer array）</strong>。其基本想法为在根数组上存若干指针，这些指针指向下一级数组的起始地址。这样的存储方式方便进行多级扩展，但相应的由于内存空间不连续，而且读取指针并定位需要多次寻址，一定程度上降低了效率。</p>
<h2 id="结构的存储">结构的存储</h2>
<p>一个结构体的数据是将其成员按照声明顺序，在一片连续的空间内存储的。比如说：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[<span class="number">4</span>] val;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    node* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其将会在连续的 32 个字节中存储这个结构体，其中低地址的 16 字节存放 <code>val</code>，中间的 8 字节存放 <code>i</code>，高地址的 8 字节存放 <code>next</code>。</p>
<p>而在实际存储的时候是需要考虑<strong>对齐</strong>问题的：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">align</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> val;</span><br><span class="line">    align* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果按照正常思维推测，一个字符和一个指针应该只需要 9 字节，但在 X86-64 架构下，实际上会占用 16 字节，其中低地址的 8 字节仅有最低一个字节存储了 <code>val</code>，而剩余的为占位符。</p>
<p>原因是简单的，现代的 CPU 在从主存之中读取数据的时候是同时读取多个，比如说一次性读取 8 个字节。实际上这种读取方式就将每 8 个字节的存储空间划分为了一个机器字（机器字的定义见 <a href="#机器字和字节序">绪论</a>），如果数据在同一个机器字之中，那么一次读取就可以将所有数据读出来。但如果数据跨越了两个机器字，那么就需要两次读取。</p>
<p>所以说编译器会故意在存储结构的空间内部塞入若干的空白空间让每一个成员的数据不跨越机器字以保证读取效率。</p>
<p>另外我们也注意到，变量的声明顺序实际上会影响具体的空间分配。比如说：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    S1* next;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> b;</span><br><span class="line">    S2* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里，结构 <code>S1</code> 占用 24 字节，而结构 <code>S2</code> 占用 16 字节。这是因为 <code>S1</code> 在存放 <code>a</code> 后不得不空出 7 字节，否则 <code>next</code> 就会跨机器字。而 <code>S2</code> 中可以先把 <code>a, b</code> 都放置好之后，只需要空出 6 字节就可以让 <code>next</code> 不跨机器字。</p>
<h2 id="联合数据的存储">联合数据的存储</h2>
<p>联合数据类型可以定义多个成员，但是一个联合数据类型的变量在任何时候只能指代某一个成员。这些成员享有同一片存储空间，而联合所占据的空间即其中最大成员占据的空间。比如说：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[<span class="number">2</span>] i;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">double</span> v;</span><br><span class="line">&#125; *p;</span><br></pre></td></tr></table></figure>
<p>这里联合的三个成员分别应该占用 1 字节、 8 字节、 8 字节，所以最后联合占据 8 字节。</p>
<h1 id="程序的链接">程序的链接</h1>
<h2 id="链接的基本概念">链接的基本概念</h2>
<p>多个源代码文件编译成为可执行文件的时候需要经过一个重要过程，即<strong>链接（Linking）</strong>，含义就是将各个独立的文件链接为单一的最终文件。这样做的好处是，某一个文件发生修改，只需要对这个文件编译并重新链接即可，不需要再次编译其他文件。同时，一些常用函数可以事先编译为一个库，需要使用的时候再将其链接进入最后的可执行文件即可。</p>
<p>链接之前，编译器首先会将每一个源代码文件之中每一个符号存储起来，存储的内容包括符号名称、其占据的内存大小和其在主存之中的地址，这就构成了<strong>符号表（Symbol table）</strong>。随后链接器将所有源代码文件综合为单个文件后，会将符号表之中的地址更新为绝对地址。</p>
<h2 id="elf-格式和符号分析">ELF 格式和符号分析</h2>
<p>可以被链接的文件一般有<strong>可重定向对象文件</strong>和<strong>共享对象文件</strong>，前者扩展名通常为 <code>.o</code>，后者则多为 <code>.dll / .so</code>。后者是特殊类型的重定向对象文件，可以被装载入内存后进行动态链接，其链接可以在装载时或者运行时完成。上述两种文件以及可执行文件，这三种二进制文件都必须要符合 <strong>ELF（Executable &amp; Linkable Format）</strong>格式。</p>
<p>ELF 格式的文件依次具有以下的部分：</p>
<ul>
<li><p>ELF header 部分。这一部分会存储与这个文件相关的基本信息。</p></li>
<li><p>Segment header table。这一部分只有可执行文件具有，会存储一些和可执行相关的内容。</p></li>
<li><p><code>.text</code> 部分。这一部分存储代码。</p></li>
<li><p><code>.rodata</code> 部分。这一部分存储只读数据，比如说跳转表。</p></li>
<li><p><code>.data</code> 部分。这一部分存储初始化过的全局变量。</p></li>
<li><p><code>.bss</code> 部分。这一部分存储未初始化的全局变量。</p></li>
<li><p><code>.symtab</code> 部分。这一部分存储符号表。</p></li>
<li><p><code>.rel.text</code> 部分。这一部分是 <code>.text</code> 部分的重定向信息。</p></li>
<li><p><code>.rel.data</code> 部分。这一部分是 <code>.data</code> 部分的重定向信息。</p></li>
</ul>
<p>后续还有一些部分，这里暂且不用讨论。</p>
<p>这里可以提一下 <code>.bss</code> 区设立的原因。<code>.bss</code> 区域的数据不会存储数据类型，并且会默认将这一部分数据的每一个字节全部置 <code>0x00</code>，作为系统默认的初始化。这样做显然要比既要存储数据类型，又要存储数据初始值的 <code>.data</code> 区高效。而能够这样粗暴解决问题的原因是系统约定了非静态全局变量的默认初始化方式为全 <code>0</code>，以及汇编并不区分各种不同的数据类型。</p>
<hr />
<p>在叙述链接过程之前，我们首先要叙述符号的概念。一个程序之中的符号分为三类，即<strong>全局符号</strong>、<strong>局部符号</strong>和<strong>外部符号</strong>。注意，这里全局符号和局部符号的区别不是全局变量和局部变量的区别。局部符号指的是在该模块定义且只可以让该模块引用的符号，包括静态和非静态的局部变量、静态函数和静态全局变量。而全局符号则是可以供给其他模块使用的符号，包括非静态的全局变量和函数。</p>
<p>首先说外部符号，其含义很简单，就是引用的其他模块的符号。包括其他模块开放的非静态全局变量和函数。可以用 <code>extern</code> 关键字声明外部符号，即声明该符号将会在链接的时候再具体给出定义，本文件只是做一个引用。</p>
<p>程序中定义的非静态局部变量，链接器并不会分析。非静态局部变量将会在运行的时候被存储在程序栈之中，使用完立刻释放。</p>
<p>而静态局部变量会被存放在可重定向文件之中的 <code>.data</code> 或者 <code>.bss</code> 部分。对于命名冲突的静态局部变量，编译的时候会给他们赋予后缀以示区分。</p>
<p>对于静态的全局变量和函数，其实际上是局部符号（<code>static</code> 关键字限制了这些变量和函数只能在本模块之中使用），所以其存放在可重定向文件之中的 <code>.data, .bss, .text</code> 部分。其中函数存放在 <code>.data</code> 部分。而如果多个文件中声明了同名的静态全局变量和函数，并不会冲突。</p>
<p>非静态的全局变量和函数一般也是存放在 <code>.data, .bss, .text</code> 部分。这个时候也有可能出现命名冲突，但此时必须作出区分。此时需要引入<strong>强符号（Strong symbol）</strong>和<strong>弱符号（Weak symbol）</strong>的定义。这个定义只对非静态的全局变量和函数成立，其中未被初始化的非静态全局变量被称为弱符号，否则是强符号。</p>
<p>链接器的原则是：</p>
<ul>
<li><p>不允许出现强符号命名冲突，否则链接失败。</p></li>
<li><p>有强符号和弱符号的命名冲突则将弱符号的指代指向强符号（强制覆盖弱符号）。</p></li>
<li><p>弱符号之间的命名冲突，则任取其中之一作为代表，其余弱符号指向被选中的弱符号。</p></li>
</ul>
<p>由于存在强制覆盖，我们应当减少全局变量的使用，或者使用静态的全局变量。如果需要使用，尽量将其初始化变为强符号。并且在使用其他模块的全局变量的时候，尽量先使用 <code>extern</code> 关键字声明这个变量。</p>
<h2 id="代码和数据重定向">代码和数据重定向</h2>
<p>在处理完毕符号后，就可以开始链接了。现在有若干的可重定向对象文件，其中 <code>.text</code> 部分存储着代码，<code>.data</code> 部分存储着变量数据。这些文件的代码之中可能包含着函数调用，而我们知道函数调用需要知道函数在内存之中的位置。编译器在编译生成可重定向对象文件的时候有两个重要信息是不了解的：</p>
<ul>
<li><p>这个模块之中的函数最终会被存放在内存的什么地方。</p></li>
<li><p>这个模块所引用的其他模块的函数的地址是什么。</p></li>
</ul>
<p>针对第一个问题，编译器会存放<strong>相对地址</strong>，也就是这个模块之中的所有函数的地址都是相对于这个模块而言的，而不能表示最后的绝对地址。针对第二个问题，编译器可能会选择将地址留空，比如使用 <code>0x00</code> 留空，之后会在 <code>.rel.data</code> 或者 <code>.rel.text</code> 部分留下信息告诉链接器要补全这里的地址。</p>
<p>到这里，编译器的任务就完成了，接下来链接器会修正相对地址并填充留空地址。</p>
<p>首先链接器会将所有可重定向对象文件的 <code>.data</code> 部分拼接为可执行文件的 <code>.data</code> 部分，<code>.text</code> 部分也如此。拼接完成后，所有函数和全局变量的绝对地址就确定了，链接器会将所有需要调整的相对地址调整为目前的绝对地址，并填充留空地址。</p>
<h2 id="库链接">库链接</h2>
<p>我们提到过，一些常用函数会被事先编译为可重定向对象文件，在使用的时候再链接进入程序。但是一般而言这样的函数库是很大的，如果完全链接进入，则相当消耗时间空间。所以有另外一个解决方案，就是将每一个函数都打包为可重定向对象文件，然后把这些可重定向对象文件打包为<strong>静态库文件</strong>，也称<strong>归档文件（Archive file）</strong>。归档文件的扩展名常常为 <code>.a</code>。</p>
<p>归档文件之中每一个可重定向对象文件是具有索引的，基于此，我们让链接器能够在用户编写的代码之中解析外部符号，并且能够在静态库之中寻找出相应的可重定向对象文件进行链接。</p>
<p>现代的静态库一般允许增量更新。</p>
<p>静态库的缺点在于可执行文件以及运行时内存之中会重复包含库文件函数和数据，同时如果库文件发生变动，则所有的相关文件都需要重新链接。目前已有的解决方式是使用<strong>共享库文件</strong>，其特征在 <a href="#elf-格式和符号分析">ELF 格式和符号分析</a> 部分已经说明。</p>
<h1 id="内存布局与缓冲区">内存布局与缓冲区</h1>
<p>在 X86-64 架构下，主存的最高地址部分是程序栈，其栈顶由 <code>%rsp</code> 管理，且栈空间向低地址增长。程序栈一般具有 8MB 的空间限制。程序栈用于存放局部变量等数据。</p>
<p>之后就是分配给每一个任务的存储空间，每一个任务都会在主存之中占用一片空间，这片空间从高地址到低地址的分配为：</p>
<ul>
<li><p>堆。堆空间可以根据程序需要动态分配，如 C 语言的 <code>malloc</code> 函数。堆空间向高地址增长。</p></li>
<li><p>静态数据。这一部分数据会在将可执行文件加载到主存的时候写入内容，写入的内容就是可执行文件的 <code>.data</code> 部分，称为<strong>数据段</strong>。</p></li>
<li><p>机器代码。这一部分就是可执行文件的 <code>.text</code> 部分，称为<strong>代码段</strong>。</p></li>
</ul>
<p>而程序栈的构成，先前已经叙述过。即分为若干的栈帧，其中栈帧高地址的 8 字节存放这个栈帧的返回地址，剩余的部分存放临时变量等数据。</p>
<hr />
<p>这个时候就可以引入缓冲区溢出攻击了。这个攻击利用的是类似 <code>gets()</code> 等不限制读入长度的函数，可能会越过预留空间对程序栈进行非法写入的漏洞。</p>
<p>比如说函数 <code>foo()</code> 之中调用了 <code>gets()</code>：</p>
<figure class="highlight cpp"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">gets</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而函数 <code>foo()</code> 执行的时候是会分配一个栈帧给这个函数存放 <code>buf</code> 这个临时变量的。但是由于 <code>gets()</code> 不限制读入长度，所以我们可以输入相当长的字符串，这样的话就会一直向栈帧的高地址写入，从而会覆写掉返回地址，甚至是上一个函数的栈帧。这样，在 <code>foo()</code> 结束进行返回的时候，就可以控制其跳转到指定的位置执行我们注入的程序。</p>
<p>防御这种攻击的方法也很多。一种是使用可以限制读入长度的函数，如 <code>fgets()</code>。一种是给栈内部加入随机长度的无意义数据，让攻击方无法准确预测 PC 应当跳转到何处。还有比如说可以限制执行权限，让这一片区域的内存不能作为机器指令执行。此外还可以让函数在返回之前检查栈帧是否被修改等等。</p>
<h1 id="x86-汇编编程基础">X86 汇编编程基础</h1>
<p><code>TODO</code></p>
<h1 id="异常">异常</h1>
<h2 id="基本原理">基本原理</h2>
<p><strong>异常（Exception）</strong>指的是会阻止程序正常执行，并且会引起状态切换（比如从用户态切换到内核态）的事件。异常分为同步异常和异步异常。</p>
<p>同步异常一般有三种，即 <strong>Trap</strong>、<strong>Fault</strong> 以及 <strong>Abort</strong>。其中，Trap 一般是由程序主动触发的，比如说产生了系统调用 syscall，或者是触发了断点或者是使用了 Trap 命令，其恢复之后会跳转到原命令的下一条继续执行。Fault 往往是由程序出现的一些问题触发的，一般这种问题都是可以恢复的，恢复之后会重新执行原命令。Abort 则是由不可恢复的问题触发的异常，会引起程序退出。</p>
<p>异步异常则一般由外部事件触发，比如说 IO 设备中断，发生系统重置等等。一般而言，在 MIPS 架构下，如果发生的时候命令已经执行完毕 MEM 阶段，系统会保证这条命令的流水线执行完毕。否则这条流水线会被废弃。这里有关 MIPS 流水线的叙述可以查看下面的 MIPS32 基础。</p>
<h1 id="虚拟内存">虚拟内存</h1>
<h2 id="基本原理-1">基本原理</h2>
<p>我们先前提到过，每一个进程都会分配到一片内存空间，用于存放数据段、代码段并且分配堆空间。但是我们也会注意到，有的进程用不到如此大的内存空间，很容易出现分配了空间但几乎不可能使用的现象。这个问题的一个解决方案是<strong>虚拟内存（Virtual memory）</strong>，其相当类似于懒分配，即真正使用到某一块内存的时候再进行分配。</p>
<p>虚拟内存的工作原理大致为，对于每一个新进程，会分配连续的虚拟内存空间。进程使用到某一个存储地址的时候，处理器会去虚存地址和物理内存地址对照表（这个表一般称为<strong>页表（Page table）</strong>，并且每个进程都会有自己的页表）之中寻找这个虚拟内存地址所对应的真实地址，如果发现还没有给这个虚存地址分配物理内存空间，则会分配并建立两者之间的映射。</p>
<p>虚拟内存地址通常简称为<strong>虚址（Virtual address）</strong>。上述过程中负责将虚址转换为物理地址的单元称为<strong>内存管理单元（MMU）</strong>。</p>
<h2 id="页和页缺失">页和页缺失</h2>
<p>一般而言，我们会将一片固定大小的连续虚存集合起来成为一个<strong>页（Page）</strong>，而每一个虚存的页映射到物理地址空间也是一片连续的空间，这被称为<strong>页帧（Page frame）</strong>。相对应的页和页帧具有相同的大小。MMU 进行地址映射的时候都是以页为单位的。</p>
<p>基于页的结构，处理器实际上传输给 MMU 进行转换的虚地址可以分为两个部分。前半部分为<strong>虚页码（Virtual page number / VPN）</strong>，后半部分是<strong>页内偏置（Page offset）</strong>。虚页码指明了虚存之中我需要映射的字节位于具体哪一页，而页内偏置则表明了我需要映射的字节在页内是第几个字节。</p>
<p>MMU 所进行的页码映射就是将虚页码根据页表映射为<strong>物理页码（Physical page number / PPN）</strong>，之后根据页内偏置获取最后实际的数据。</p>
<p>如果某次映射之中，某个页没有找到对应的页帧，就会触发<strong>页缺失（Page fault）</strong>。页缺失产生后，系统会转入内核态，调用异常处理代码将所需要的数据从外部存储读入内存以解决异常。</p>
<h2 id="页表项的附加标记">页表项的附加标记</h2>
<p>采用虚存机制还有一种好处，就是可以通过页表实现权限管理。页表之中的每一项除去记录页和页帧的映射之外，还可以记录这个进程对物理内存的访问权限，权限控制的具体实现则由硬件完成。</p>
<p>另外，页表项还可以记录目前这个映射是否成立，这一位也常常被称为 valid 位。其为 <code>1</code> 则说明对应的页帧已经被加载到物理内存之中，否则代表对应的页帧还需要从外部存储之中获取。页缺失就会在 valid 位为 <code>0</code> 的时候发生。</p>
<h2 id="快表机制">快表机制</h2>
<p>记住这一句话就可以了：</p>
<div class="note info no-icon"><p>快表（TLB）和页表的关系，就是缓存（Cache）和内存的关系。</p>
</div>
<p>TLB 相当于页表的一个高速缓存，其出现的原因是处理器所请求的内存地址往往是聚集的，也就是说某一小部分地址占据了处理器的大部分请求。所以这个时候我们可以将常用地址缓存到 TLB 之中，请求内存的时候首先查询 TLB 有无相关映射，命中则直接使用。否则再去页表之中查找，命中则直接使用，同时将这个映射缓存到 TLB 之中。TLB 满了之后会触发淘汰机制，删去使用较少的映射项。</p>
<p>之所以提到缓存，因为内存之中的常使用部分会被加载到 cache 之中。而系统从 MMU 获取物理地址之后也会先去 cache 之中查找，找不到才会去内存之中查找。这个过程和 TLB 机制几乎一致。</p>
<h2 id="内存映射">内存映射</h2>
<p><code>TODO: We may learn it later from OS class.</code></p>
<h1 id="mips32-基础">MIPS32 基础</h1>
<p>MIPS 架构的特征可以查看本文最开头的部分，有较为详细的介绍。</p>
<p>这里补充一些其他的 MIPS 基础知识。这些知识并不是重点，但是会影响对 MIPS 架构细节的理解，故不单独开一个二级标题但还是需要分点一条条列出：</p>
<ul>
<li><p>MIPS 架构之中，一个字等于四个字节</p></li>
<li><p>MIPS 架构下返回地址不保存在栈上，而是保存在 31 号寄存器之中</p></li>
<li><p>MIPS 架构下 0 号寄存器永远存储常数 <code>0</code></p></li>
<li><p>MIPS 架构不具有条件码，条件的表示全部使用寄存器</p></li>
<li><p>MIPS32 架构除去 32 个通用寄存器，还有高位寄存器 <code>%hi</code> 以及低位寄存器 <code>%lo</code>。这两者都是 32 位寄存器，其出现的原因是需要处理整数的乘除法。另外需要注意，MIPS32 架构的立即数通常只允许 16 位，而寄存器是 32 位的，所以通常会使用这两个寄存器将 32 位数拆开表示。记号上，<code>%hi($1)</code> 这种写法代表 1 号寄存器的 16 位高位</p></li>
<li><p>MIPS 架构下有四个传参寄存器，即 4 到 7 号寄存器。多余的参数使用栈传递</p></li>
<li><p>MIPS 架构的命令后缀 <code>i</code> 表示立即数，<code>u</code> 表示不启用溢出检测。比如说 <code>addiu</code> 命令表示将某一个寄存器加上一个立即数，溢出的话取模放入结果寄存器</p></li>
</ul>
<h2 id="流水线结构与延迟槽">流水线结构与延迟槽</h2>
<p>在 MIPS 架构之中，任何指令的执行都会分为五个步骤，这五个步骤由不同的硬件完成。这些步骤分别是：</p>
<ul>
<li><p>读取指令（IF）</p></li>
<li><p>读取寄存器（RD）</p></li>
<li><p>代数或逻辑运算（ALU）</p></li>
<li><p>访问内存（MEM）</p></li>
<li><p>回写（WB）</p></li>
</ul>
<p>一个指令的五个执行步骤构成一条<strong>流水线</strong>，而不同指令的流水线是可以并发执行的，只要保证它们不会同时调用某一个硬件资源（比如说两条指令不可以同时在 IF 过程中）。</p>
<p>而这种并行的流水线架构的优越之处就是可以最大程度利用硬件资源。比如说考虑这样的 MIPS 汇编代码：</p>
<figure class="highlight plaintext"><figcaption><span>MIPS32 Assembly</span></figcaption><table><tr><td class="code"><pre><span class="line">jal  printf</span><br><span class="line">move $4, $6</span><br><span class="line">op</span><br></pre></td></tr></table></figure>
<p>这里 <code>jal</code> 类似于 X86 的 <code>call</code> 命令，用于调用过程。但是，与这条指令间隔一条的 <code>op</code> 指令才是 <code>printf</code> 返回后调用的指令（返回地址）。</p>
<p>原因是 <code>jal</code> 指令流水线执行到 ALU 阶段的时候才会发生实质跳转，从 <code>jal</code> 的 IF 阶段结束到实质跳转这段时间 IF 硬件是空闲的，这段时间就被称为<strong>延迟槽（Delay slot）</strong>。但是我们可以让 IF 硬件立刻执行 <code>move $4, $6</code> 的 IF 阶段，这样在实质跳转发生前的这段延迟槽就被利用了。</p>
<p>能这样做的原因是 <code>move</code> 指令在 RD 阶段结束后就执行完毕了，后续的阶段可以忽略或者说当成不存在。如果说 <code>jal</code> 命令之后跟随了一些需要实质 ALU 的命令，则可能会因为和 <code>jal</code> 或者所调用的过程发生硬件冲突而导致异常。所以有的时候我们可以填入 <code>nop</code> 回避掉可能的问题。</p>
<h2 id="多线程操作">多线程操作</h2>
<p>在多线程编程之中，我们往往会涉及到多个线程对共享资源的读写操作。在 MIPS 架构中，针对这个场景，有 <code>ll</code> 和 <code>sc</code> 两个命令。</p>
<p><code>ll</code> 全称为<strong>链接加载（Load linked）</strong>，在使用这个命令从内存之中加载数据之后，处理器会记住这一次操作，这一次操作访问的地址也会被暂时保存。</p>
<p><code>sc</code> 全称为<strong>条件存储（Store conditional）</strong>，使用这个命令将寄存器 <code>v</code> 之中的数据存储到内存的时候，处理器会首先检查上一次 <code>ll</code> 命令操作的内存区域有没有被改动。如果没有被改动过，则存储成功，<code>v</code> 之中的值也会被写为 <code>1</code> 表示操作成功。反之，写入失败，内存不会被修改，<code>v</code> 之中的值也会被写为 <code>0</code> 表示操作失败。</p>
<h2 id="协处理器与异常处理">协处理器与异常处理</h2>
<p>协处理器是用于协助处理器处理类似内存管理、内存映射、异常等工作的硬件，其在可以被认为是一系列拓展寄存器。这里我们主要关注 MIPS 架构下协处理器之中的 Cause 和 Status 寄存器。</p>
<p>MIPS 系统的一个优点就是支持精确异常处理，也就是说保证发生异常的命令之前的所有命令都可以被执行完毕，之后的命令不进行处理。而为了实现这一点，就需要精确记录异常位置，并且处理好延迟槽机制带来的问题。</p>
<p>借助协处理器，MIPS 系统处理异常的步骤大致为：</p>
<ul>
<li><p>保存异常现场信息。协处理器利用<strong>异常程序计数器（Exception program counter / EPC）</strong>记录异常命令的位置，Cause 寄存器会记录异常原因，且其 BD 位会记录延迟槽信息，Status 寄存器的<strong>异常标志位（EXL）</strong>被置 <code>1</code>。另外，一些相关寄存器的值也会被保存，另外 26 和 27 号寄存器会被留给异常处理。</p></li>
<li><p>根据具体类型判定处理异常的方式。这里会使用 Cause 寄存器获取异常类型。</p></li>
<li><p>开辟异常处理内存空间。系统会开辟出空间并且保留一部分通用寄存器用于异常处理。</p></li>
<li><p>处理完毕后返回。此时协处理器清空相关寄存器，跳转到原有命令继续执行。</p></li>
</ul>
<p>这里要注意一点，一般异常处理会在内核态下运行，而正常的程序会在用户态下运行。为了防止异常处理机制被不正当利用于在内核态下执行攻击代码，系统要求状态转换和程序跳转回原有命令必须同时。</p>
<h2 id="mips-内存管理">MIPS 内存管理</h2>
<p>MIPS 使用虚存机制，其虚址一般按照下述方式分配：</p>
<ul>
<li><p>高于 <code>0xC0000000</code> 的虚址为 kseg2 空间，其仅可以由核心态使用，使用的时候需要经过 MMU 转换，也就是说这一部分是 Mapped memory。</p></li>
<li><p>介于 <code>0xA0000000</code> 和 <code>0xC0000000</code> 之间的虚址是 kseg1 空间，其不可以在用户态下使用，使用的时候不需要经过 MMU 转换（其虚址最高三位清零就是物理地址）。另外，这一部分不会被缓存，也就是说这一部分是 Unmapped uncached memory。</p></li>
<li><p>介于 <code>0x80000000</code> 和 <code>0xA0000000</code> 之间的虚址是 kseg0 空间，其不可以在用户态下使用，使用的时候不需要经过 MMU 转换（其虚址最高一位清零就是物理地址）。另外，这一部分可以被缓存，也就是说这一部分是 Unmapped cached memory。</p></li>
<li><p>低于 <code>0x80000000</code> 的虚址为 kuseg 空间，是用户态空间，使用的时候需要经过 MMU 转换，也就是说这一部分是 Mapped memory。</p></li>
</ul>
<p>这样划分的意图就是区分内核态和用户态对内存的访问。另外，上述划分之中有 unmapped 的内存空间，这一部分设置的缘由是系统刚启动的时候 TLB 并未初始化，不可以进行正常的地址转换，故使用 unmapped 的空间进行操作。</p>
<p>另外，为了区分某虚拟地址属于哪一个进程，MIPS 会给虚拟地址附上 ASID 进程标识符。</p>
<hr />
<p>MIPS 架构支持一种特殊的快表，即 JTLB。其内部记录的是<strong>虚页码除以 2</strong> 之后的结果和<strong>两个</strong>物理页码之间的关系，两个映射项都标注了是否 valid 以及是否允许写入（一般称为是否 dirty，如果一个页面不是 dirty 的，则会禁止写入）。</p>
<p>这个时候的转换需要将虚页码先去掉末位进行查表，最后如果命中，则需要根据虚页码末位选取最终的映射项。</p>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>《人工智能导论》学习笔记</title>
    <url>/2021/06/16/note-of-iai/</url>
    <content><![CDATA[<p>这个文档就是一时兴起想要好好学学人工智能背后的玩意创建的。主要还是记录《人工智能导论》课程的笔记。</p>
<span id="more"></span>
<p>大概随着这个文档越来越饱满，我应该就能看懂 <code>paper.md</code> 这个诡异的超纲文档了。</p>
<h2 id="搜索问题">搜索问题</h2>
<h3 id="盲目搜索bfs-dfs">盲目搜索（BFS / DFS）</h3>
<p>DFS 优先扩展深度深的节点，BFS 优先扩展深度浅的节点。由于 DFS 往往存在深度限制，所以 DFS 是有可能找不到最优解的，并且最坏情况下 DFS 等价于枚举。而 BFS 在<strong>单位耗散值的有解问题</strong>上一定能找到最优解。</p>
<p>但有的时候搜索树上的相邻节点之间距离并非一致，所以出现了 Dijkstra 算法。这个算法是最短路算法之中较为重要的一个。在 Dijkstra 算法之中，原则是优先扩展<strong>距离起点最近的节点</strong>。</p>
<p>Dijkstra 算法考虑了当前节点与起点的距离，但是实则没有对距离终点的距离进行评估。所以之后可以引入启发式搜索。</p>
<h3 id="启发式搜索a-a">启发式搜索（A / A*）</h3>
<p>所谓启发式，就是引入<strong>启发知识</strong>，也就是对当前节点与目标之间的距离的评估。</p>
<p>在 A 算法之中，我们引入对节点 <span class="math inline">\(n\)</span> 的<strong>评估函数</strong> <span class="math inline">\(f(n)\)</span>：</p>
<p><span class="math display">\[
f(n) = g(n) + h(n)
\]</span></p>
<p>这里 <span class="math inline">\(h(n)\)</span> 就是对当前节点与目标之间距离的评估，也被称为<strong>启发函数</strong>。</p>
<p>上述函数均为<strong>估计值</strong>。我们把相应的实际值（也就是最短路所对应的）分别标记为 <span class="math inline">\(f^*(n), g^*(n), h^*(n)\)</span>。</p>
<p>A 算法的核心为，优先扩展 <span class="math inline">\(f(n)\)</span> 最小的节点。</p>
<p>在算法的具体实现过程之中，定义了<code>OPEN</code>表以及<code>CLOSE</code>表，分别代表<strong>当前考虑扩展的节点</strong>以及<strong>当前暂时不考虑扩展的节点</strong>。一份伪代码实现为：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">OPEN = [<span class="string">&#x27;s&#x27;</span>] <span class="comment"># &#x27;s&#x27; is the starting node</span></span><br><span class="line">CLOSE = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> OPEN.empty():</span><br><span class="line">    <span class="comment"># Select the node with minimum f value</span></span><br><span class="line">    n = OPEN.node_with_min_f()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># n is the expected node</span></span><br><span class="line">    <span class="keyword">if</span> expected(n):</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line">    OPEN.remove(n)</span><br><span class="line">    CLOSE.add(n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Traverse the neighbors</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> n.neighbor():</span><br><span class="line">        path_len = g(n) + distance(n, m)</span><br><span class="line">        <span class="comment"># Expand the list</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> m <span class="keyword">in</span> OPEN) <span class="keyword">and</span> (<span class="keyword">not</span> m <span class="keyword">in</span> CLOSE):</span><br><span class="line">            OPEN.add(m)</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line">        <span class="comment"># m has been explored before, but it needs update</span></span><br><span class="line">        <span class="keyword">elif</span> (m <span class="keyword">in</span> OPEN) <span class="keyword">and</span> (path_len &lt; g(m)):</span><br><span class="line">            g(m) = path_len</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line">        <span class="comment"># m has been discarded, but it can be reused now</span></span><br><span class="line">        <span class="keyword">elif</span> (m <span class="keyword">in</span> CLOSE) <span class="keyword">and</span> (path_len &lt; g(m)):</span><br><span class="line">            CLOSE.remove(m)</span><br><span class="line">            OPEN.add(m)</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line"><span class="comment"># Fail</span></span><br><span class="line"><span class="keyword">return</span> FAIL</span><br></pre></td></tr></table></figure>
<p>在 A 算法之中，如果满足：</p>
<p><span class="math display">\[
h(n) \leq h^*(n)
\]</span></p>
<p>那么 A 算法就称为 A* 算法。A* 算法的特点就在于<strong>只要初始节点到目标节点有路径，那么算法永远能找到最优解</strong>，而 A 算法并不保证有最优解。</p>
<p>另外给出一个定理：</p>
<blockquote>
<p>对于两个 A* 算法 <span class="math inline">\(A_1, A_2\)</span>，如果对于非目标节点均满足：</p>
<p><span class="math display">\[
h_2(n) &gt; h_1(n)
\]</span></p>
<p>那么 <span class="math inline">\(A_1\)</span> 所扩展的节点数不小于 <span class="math inline">\(A_2\)</span> 所扩展的节点数。</p>
</blockquote>
<h3 id="改进-a-算法">改进 A* 算法</h3>
<p>A* 算法面临的一个问题在于<strong>可能会多次扩展同一个节点</strong>，这就导致了算法的低效，而实际上多次扩展某一个节点的原因在于扩展该节点所使用的路径并非是最短的。</p>
<p>我们可以认为可以使用<strong>单调的</strong>启发函数来解决这一问题，启发函数的单调性指的是三角形法则：</p>
<p><span class="math display">\[
\begin{cases}
    h(n_i) - h(n_j) \leq {\rm distance}(n_i, n_j) \\
    h(t) = 0
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(n_j\)</span> 为 <span class="math inline">\(n_i\)</span> 的子节点。</p>
<p>我们可以证明如果 <span class="math inline">\(h\)</span> 是单调的，那么使用这个启发函数的 A* 算法一旦扩展到了某一个节点 <span class="math inline">\(n\)</span>，就已经找到了从起点到这个节点的最短路，也就是说 <span class="math inline">\(g(n) = g^*(n)\)</span>。</p>
<p>实际上还有一个结论，就是满足单调性的 <span class="math inline">\(h\)</span> 必然满足 A* 条件。</p>
<p>基于此改进 A* 算法如下（伪代码表示）：</p>
<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line">OPEN = [<span class="string">&#x27;s&#x27;</span>] <span class="comment"># &#x27;s&#x27; is the starting node</span></span><br><span class="line">CLOSE = []</span><br><span class="line">f_max = <span class="number">0</span> <span class="comment"># The maximum f value that has been found till now</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> OPEN.empty():</span><br><span class="line">    <span class="comment"># Find the nodes in OPEN with f value less than f_max</span></span><br><span class="line">    NEST = OPEN.with_f_less_than(f_max)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Select the node</span></span><br><span class="line">    <span class="comment"># When the f value has been small enough to be selected into NEST</span></span><br><span class="line">    <span class="comment"># We just need to select the minimum g value now</span></span><br><span class="line">    n = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> NEST.empty():</span><br><span class="line">        n = OPEN.node_with_min_f()</span><br><span class="line">        f_max = f(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n = NEST.node_with_min_g()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># n is the expected node</span></span><br><span class="line">    <span class="keyword">if</span> expected(n):</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line">    OPEN.remove(n)</span><br><span class="line">    CLOSE.add(n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Traverse the neighbors</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> n.neighbor():</span><br><span class="line">        path_len = g(n) + distance(n, m)</span><br><span class="line">        <span class="comment"># Expand the list</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> m <span class="keyword">in</span> OPEN) <span class="keyword">and</span> (<span class="keyword">not</span> m <span class="keyword">in</span> CLOSE):</span><br><span class="line">            OPEN.add(m)</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line">        <span class="comment"># m has been explored before, but it needs update</span></span><br><span class="line">        <span class="keyword">elif</span> (m <span class="keyword">in</span> OPEN) <span class="keyword">and</span> (path_len &lt; g(m)):</span><br><span class="line">            g(m) = path_len</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line">        <span class="comment"># m has been discarded, but it can be reused now</span></span><br><span class="line">        <span class="keyword">elif</span> (m <span class="keyword">in</span> CLOSE) <span class="keyword">and</span> (path_len &lt; g(m)):</span><br><span class="line">            CLOSE.remove(m)</span><br><span class="line">            OPEN.add(m)</span><br><span class="line">            n.<span class="built_in">next</span> = m</span><br><span class="line"><span class="comment"># Fail</span></span><br><span class="line"><span class="keyword">return</span> FAIL</span><br></pre></td></tr></table></figure>
<h2 id="博弈问题对抗搜索">博弈问题（对抗搜索）</h2>
<h3 id="alpha-beta-剪枝"><span class="math inline">\(\alpha-\beta\)</span> 剪枝</h3>
<p>我们在面临双方博弈，需要我方决策的时候，我们可以先搜索一遍所有可能的双方情况并使用专家知识对局面进行评估。由于对方有利就是我方不利，所以在搜索到最底部回溯得到估值的时候，要注意并不是始终取孩子节点的最大值，而是按层数交替取最大值和最小值。</p>
<p>一般而言，根节点要取最大的儿子节点（一般用方形节点代表<strong>极大过程</strong>），下一层要取最小的儿子节点（一般用圆形节点代表<strong>极小过程</strong>），以此类推。</p>
<p>所谓剪枝，就是目前遍历到此，发现继续遍历子节点都不会更新这个节点的估值了，此时就可以剪枝。注意，判定是否剪枝的时候是要和<strong>当前节点的所有祖先</strong>都进行比较的，不能只比较父节点。</p>
<p>不过要注意，在最后给出根节点估值后确定最后决策的时候，<strong>只能沿着决策树走一步</strong>。这是因为你做出决策后决策树可能会改变形态，不能保证后面的决策的估值情况还保证如此。</p>
<h3 id="蒙特卡罗方法">蒙特卡罗方法</h3>
<p><span class="math inline">\(\alpha-\beta\)</span> 剪枝依赖于大量的专家知识，所以在实际应用上也有所局限。其基本的思路是在给定的时限之内不断通过模拟对弈的方式扩展搜索树，最后再给定走步方式。</p>
<p>基本的循环包括以下几个部分：</p>
<ul>
<li>根据前期评估结果选取最有希望的叶子节点</li>
<li>在该叶子节点处随机进行一步，扩展出新叶子节点</li>
<li>从新叶子节点开始随机模拟对弈直到判定出胜负</li>
<li>根据模拟的结果反向更新决策树上各个节点的评估值</li>
</ul>
<p>一般而言，节点的评估值包含两个方面：</p>
<ul>
<li>当前信息下节点是有希望的</li>
<li>深度较浅的节点具有更大的探索可能</li>
</ul>
<p>一般而言可以选择这样的评估方式：</p>
<p><span class="math display">\[
I_j = \overline{X_j} + c\sqrt{\frac{2\ln n}{T_j(n)}}
\]</span></p>
<p>这里 <span class="math inline">\(\overline{X_j}\)</span> 表示经过当前节点的决策路径的胜率，这是一个守成的选项。</p>
<p><span class="math inline">\(n\)</span> 表示当前搜索总次数，<span class="math inline">\(T_j(n)\)</span> 表示当前节点访问次数。</p>
<h2 id="高级搜索">高级搜索</h2>
<h3 id="局部搜索">局部搜索</h3>
<p>局部搜索的意思就是一直往更好的地方走，具体过程为：</p>
<ul>
<li>选择初始点 <span class="math inline">\(x_0\)</span>，以及其相邻可考察点集 <span class="math inline">\(P\)</span></li>
<li>只要不满足退出条件，进行下面循环：
<ul>
<li>选择 <span class="math inline">\(P&#39; \subset P\)</span>，取 <span class="math inline">\(P&#39;\)</span> 之中最优解 <span class="math inline">\(x_b\)</span></li>
<li>如果 <span class="math inline">\(x_b\)</span> 更优，则切换为考察 <span class="math inline">\(x_b\)</span>，<span class="math inline">\(P\)</span> 修改为 <span class="math inline">\(x_b\)</span> 的相邻考察点集</li>
<li>否则 <span class="math inline">\(P = P - P&#39;\)</span></li>
</ul></li>
<li>输出结果</li>
</ul>
<h3 id="模拟退火算法">模拟退火算法</h3>
<p>模拟退火实际上是对局部搜索的一个优化。其基本原理来自于液态金属凝固的时候如果降温过快则有可能由于分子没有充分时间排列为结晶态而导致凝固不工整（没有达到最低能状态），而实际工艺会让温度缓慢下降，并且有回升温度的可能，保证大概率凝固为结晶态。</p>
<p>迁移到局部搜索上，为了防止落入局部最小值，我们可以让“温度回升”是一个有概率发生的事情。对于评估函数 <span class="math inline">\(E(i)\)</span>，以及两个状态 <span class="math inline">\(p,q\)</span>，给出从 <span class="math inline">\(p\)</span> 迁移到 <span class="math inline">\(q\)</span> 的概率：</p>
<p><span class="math display">\[
P(p \rightarrow q) = \begin{cases}
1 &amp; E(q) \leq E(p) \\
\exp\left(\dfrac{E(p) - E(q)}{kT}\right) &amp; E(q) &gt; E(p) \\
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(k\)</span> 是一个常量，<span class="math inline">\(T\)</span> 是“温度”，指的是优化问题之中的控制参数。</p>
<p>根据物理定律（Boltzmann 分布）实际上我们可以给出定律：</p>
<ul>
<li>同一温度下，物体处于低能量状态的概率高于高能量状态</li>
<li>温度无限高的时候，物体等概率处于任何状态</li>
<li>温度无限低的时候，物体等概率处于任何最低能状态</li>
<li>温度下降的时候，物体进入低能量状态概率上升，进入高能量状态概率下降</li>
</ul>
<p>所以我们使用模拟退火方法的时候需要尽可能保证：</p>
<ul>
<li>初始能量足够高</li>
<li>每个温度下状态交换足够充分</li>
<li>温度的下降足够缓慢</li>
</ul>
<p>所以算法的基本思路就是：</p>
<ul>
<li>选定初始状态</li>
<li>随机选定初始状态的某一个相邻状态，考察它和初始状态的评估函数差：
<ul>
<li>如果新状态更优，直接迁移</li>
<li>如果原状态更优，则按照概率迁移</li>
</ul></li>
<li>迁移完毕后降温，重复上述迁移步骤直到寻找到满意的状态</li>
</ul>
<p>这里有些细节的问题需要考量。</p>
<p>首先是<strong>什么是满意的状态</strong>，一般而言最简单的就是设定温度阈值或者降温次数阈值，另外一个是如果多次降温都没有能够让评估函数的变化超过阈值就可以认为稳定了。</p>
<p>其次是<strong>什么时机降温</strong>，上述算法框架之中每次迁移完毕就会降温，但实际上有的时候会进行若干次迁移后才会降温。一般而言我们可以设定迁移次数阈值。</p>
<p>之后是<strong>怎么降温</strong>。等比例降温是最简单的，另外还有一个较为常用的：</p>
<p><span class="math display">\[
t_{k + 1} = \frac{t_k}{1 + \frac{t_k\ln(1 + \delta)}{3\sigma_{t_k}}}
\]</span></p>
<p>最后是<strong>初始温度如何设定</strong>。一般而言较高就可以了。</p>
<h3 id="遗传算法">遗传算法</h3>
<p>遗传算法的本质就是模拟生物进化的过程，通过引入交叉、变异等干扰因素尝试在若干代迭代后获得满意的结果。不过我们首先关注最为重要的<strong>选优</strong>过程的模拟。</p>
<p>考虑一个包含 <span class="math inline">\(N\)</span> 个个体的群体，其中第 <span class="math inline">\(i\)</span> 个个体的适应值为 <span class="math inline">\(F(x_i)\)</span>，那么在进化过程中其被选中的概率为：</p>
<p><span class="math display">\[
p(x_i) = \frac{F(x_i)}{\sum_{j = 1}^N F(x_j)}
\]</span></p>
<p>之后就可以模拟选优，过程为：</p>
<ul>
<li>从 <span class="math inline">\(x_1\)</span> 开始，以 <span class="math inline">\(p(x_1)\)</span> 的概率选择 <span class="math inline">\(x_1\)</span>。若选中，结束模拟，否则继续</li>
<li>转到 <span class="math inline">\(x_2\)</span>，以 <span class="math inline">\(p(x_1) + p(x_2)\)</span> 的概率选择 <span class="math inline">\(x_2\)</span>。若选中，结束模拟，否则继续</li>
<li>......</li>
<li>结束模拟</li>
</ul>
<p>这是选出一个染色体的方式，下面介绍如何选出一个群体：</p>
<p>对于每一个个体 <span class="math inline">\(x_i\)</span>，我们用上述方法在 <span class="math inline">\(N\)</span> 个个体之中选取 <span class="math inline">\(\lfloor p(x_i)N\rfloor\)</span> 次。之后按照 <span class="math inline">\(p(x_i)N - \lfloor p(x_i)N\rfloor\)</span> 从大到小排序群体，再取若干个让选出的群体恰好有 <span class="math inline">\(N\)</span> 个个体。</p>
<p>这种方法就是模拟了群体的一次进化，高适应的个体就有高可能得到繁殖（被多次取到）。</p>
<p>另外，交叉和变异则是对表示状态的二进制（或者十进制）数字串进行一定处理。</p>
<p>从而就有了遗传算法的基本框架：</p>
<ul>
<li>给定群体规模 <span class="math inline">\(N\)</span>，交叉概率 <span class="math inline">\(p_c\)</span> 以及变异概率 <span class="math inline">\(p_m\)</span></li>
<li>随机生成 <span class="math inline">\(N\)</span> 个染色体作为初始群体，并计算适应值</li>
<li>下面不断重复循环直到找到合适的解：
<ul>
<li>选优出 <span class="math inline">\(N\)</span> 个染色体成为扩展群体</li>
<li>按照 <span class="math inline">\(p_c,p_m\)</span> 进行交叉和变异，未变化的染色体保留，形成新群体</li>
</ul></li>
<li>选取整个进化过程中最适应的染色体作为最后输出</li>
</ul>
<p>不过我们注意，我们一定要<strong>选取合适的编码方式</strong>，否则可能会因为问题的状态难以描述而导致编码串有过多无用位，从而导致无效变异。</p>
<p>二进制的交叉和变异是简单的，十进制的交叉可以如此：</p>
<ul>
<li>子代 1 的交叉位之后的基因从父代 2 的所有基因之中按顺序取出尚未在子代 1 之中基因</li>
<li>指定若干的欠缺位，让父代 2 这些位置留空，之后按照父代1的顺序把原来的数字填回去形成子代 2</li>
<li>指定一个一一对应的映射，以生成子代</li>
</ul>
<p>变异则可以：</p>
<ul>
<li>指定两个位置，将后面的数字移到前面的指定位置之前</li>
<li>指定两个位置，交换两个位置上的基因</li>
<li>随意打乱某一区间。</li>
</ul>
<h2 id="统计机器学习">统计机器学习</h2>
<h3 id="基本概念">基本概念</h3>
<p>现实中的预测问题都可以归纳为在函数空间 <span class="math inline">\(H = \{f \mid f: X \rightarrow Y\}\)</span> 之中寻找最优的预测函数。这里 <span class="math inline">\(X\)</span> 是输入集，其中的元素一般表示预测的基础（已知信息）。而 <span class="math inline">\(Y\)</span> 是输出集，其中的元素一般表示需要预测的结果。</p>
<p>我们假设 <span class="math inline">\(f \in H\)</span> 为最优函数，也就是我们要寻找的。一般这个函数不会已知，但我们可以知道若干对输入输出组 <span class="math inline">\((x_i, y_i)\)</span> 满足 <span class="math inline">\(f(x_i) = y_i \pm {\rm noise}\)</span>（<span class="math inline">\({\rm noise}\)</span> 指的是可能出现的数据扰动）。这些输入输出组构成<strong>训练集</strong>。</p>
<p>统计机器学习的目标就是根据训练集，按照某种算法尝试找一个 <span class="math inline">\(g \in H\)</span>，让 <span class="math inline">\(g\)</span> 尽可能表现类似 <span class="math inline">\(f\)</span>。</p>
<p>统计机器学习可以按照监督的介入分为：</p>
<ul>
<li>监督学习</li>
<li>无监督学习</li>
<li>半 / 弱监督学习</li>
</ul>
<p>监督学习事实上更贴近我们上述的统计机器学习定义，其又可以被分为<strong>回归</strong>（如线性回归、二次回归）以及<strong>分类</strong>。而无监督学习实际上常常被称为<strong>聚类</strong>。</p>
<p>有无监督的差别可以理解为训练集之中的输入输出对 <span class="math inline">\((x_i, y_i)\)</span> 的 <span class="math inline">\(y_i\)</span> 是否明确。如果 <span class="math inline">\(y_i\)</span> 明确，那么这个学习就有监督，否则无监督。</p>
<p>下面解释为何无监督又被称为聚类。由于 <span class="math inline">\(y_i\)</span> 是不给定的，所以我们不能很明确给出一个已知局面具体属于何种类别，但我们对于给定的两个已知局面，我们可以判断其相似性（断定两者是否大概率属于同一类别），进而将类似的输入输出对聚合在一类里面，不类似的尽可能分开，这就是<strong>聚类（clustering）</strong>。所以尽管学习目标都是寻找 <span class="math inline">\(g\)</span> 让模型的预测尽可能准确，但是两者的学习方式是不同的。</p>
<p>之后我们给出两个概念，就是<strong>过拟合</strong>以及<strong>泛化能力</strong>。</p>
<p>过拟合是机器学习要处理的一个重要问题，其描述的就是算法给出了一个相当复杂的函数 <span class="math inline">\(g\)</span>，其在训练集上能够相当准确率地和 <span class="math inline">\(f\)</span> 类似，但是在其余输入上却不够好。泛化能力描述的是这个模型在面对未知输入的时候是否能够做出合理输出的能力。</p>
<h3 id="朴素-bayes-法">朴素 Bayes 法</h3>
<p>这个方法应用在多分类问题上。我们可以认为输入空间为若干 <span class="math inline">\(n\)</span> 维向量的集合 <span class="math inline">\(\boldsymbol X \subset \mathbb R^n\)</span>，输出空间则是若干类别（标签）的集合 <span class="math inline">\(\boldsymbol Y = \{c_1, c_2, \cdots, c_k\}\)</span>。所以说输入 <span class="math inline">\(X\)</span> 是 <span class="math inline">\(\boldsymbol X\)</span> 上的随机变量，输出 <span class="math inline">\(Y\)</span> 是 <span class="math inline">\(\boldsymbol Y\)</span> 上的随机变量。考虑 <span class="math inline">\(X, Y\)</span> 的联合分布 <span class="math inline">\(f(x, y)\)</span>。</p>
<p>我们得出：</p>
<p><span class="math display">\[
P(Y = c_k \mid X = x) = \frac{
    P(X = x \mid Y = c_k)P(Y = c_k)
} {
    \sum_k P(X = x \mid Y = c_k)P(Y = c_k)
}
\]</span></p>
<p>这个概率实际上是在给定输入 <span class="math inline">\(X = x\)</span> 的时候，输出 <span class="math inline">\(Y = c_k\)</span> 的后验概率。所有的先验概率来源于训练集，也就是用频率近似概率。</p>
<p>我们确定最后的输出的方式是寻找令后验概率最大的 <span class="math inline">\(c_k\)</span>。由于上述分母保持常数，所以输出：</p>
<p><span class="math display">\[
y = \arg\max_{c_k} P(X = x \mid Y = c_k)P(Y = c_k)
\]</span></p>
<p>但是我们这里要注意到先验概率之中的 <span class="math inline">\(P(X = x \mid Y = c_k)\)</span> 项，其复杂度随着 <span class="math inline">\(n\)</span> 的上升而指数上升。但是我们可以假设 <span class="math inline">\(X\)</span> 的各个维度是独立的，所以我们可以得到：</p>
<p><span class="math display">\[
\begin{aligned}
P(X = x \mid Y = c_k) &amp;= P\left(X^{(1)} = x^{(1)}, X^{(2)} = x^{(2)}, \cdots, X^{(n)} = x^{(n)} \ \middle| \  Y = c_k\right) \\
&amp;= \prod_{j = 1}^n P\left(X^{(j)} = x^{(j)} \ \middle| \ Y = c_k\right)
\end{aligned}
\]</span></p>
<p>最终给出的 <strong>Bayes 分类器</strong>为： <span class="math display">\[
y = \arg\max_{c_k} P(Y = c_k)\prod_{j = 1}^n P\left(X^{(j)} = x^{(j)} \ \middle| \ Y = c_k\right)
\]</span></p>
<p>这里给出<strong>平滑</strong>的概念。也就是如果训练集中如果没有出现过某一个 case，这个时候 case 的频率为 <span class="math inline">\(0\)</span>，但是显然我们不能把概率估计为 <span class="math inline">\(0\)</span>，这个时候会引入平滑。这里给出一个例子：</p>
<p><span class="math display">\[
P_\lambda\left(X^{(j)} = a_{jl} \ \middle| \ Y = c_k\right) = \frac{
    \sum_{i = 1}^N {\rm idx}\left(x_i^{(j)} = a_{jl}, y_i = c_k\right) + \lambda
} {
    \sum_{i = 1}^N {\rm idx}(y_i = c_k) + S_j\lambda
}
\]</span></p>
<p><span class="math inline">\({\rm idx}\)</span> 函数为<strong>示性函数</strong>，其参数为布尔表达式，为真的时候函数返回 <span class="math inline">\(1\)</span>，否则返回 <span class="math inline">\(0\)</span>。</p>
<p>这里 <span class="math inline">\(S_j\)</span> 为 <span class="math inline">\(x^{(j)}\)</span>（输入第 <span class="math inline">\(j\)</span> 维）的取值集合 <span class="math inline">\(\{a_{j1}, a_{j2}, \cdots, a_{jS_j}\}\)</span> 的大小。</p>
<p>这里 <span class="math inline">\(\lambda\)</span> 是平滑系数，一般取 <span class="math inline">\(\lambda = 1\)</span>，此时平滑成为 <strong>Laplace 平滑</strong>。</p>
<h3 id="支持向量机svm">支持向量机（SVM）</h3>
<p>SVM 是一个适用于二分类问题的计算模型。</p>
<p>给定线性可分训练集 <span class="math inline">\(T = \{(\boldsymbol x_1, y_1), (\boldsymbol x_2, y_2), \cdots, (\boldsymbol x_N, y_N)\}\)</span>，这里 <span class="math inline">\(\boldsymbol x_i \in X = \mathbb R^n\)</span> 以及 <span class="math inline">\(y_i \in Y = \{1, -1\}\)</span>。这里我们称 <span class="math inline">\(1\)</span> 为正类，<span class="math inline">\(-1\)</span> 为负类。</p>
<p>我们希望寻找一个超平面 <span class="math inline">\(\boldsymbol w^{*T}\boldsymbol x + b^* = 0\)</span>，给定决策函数：</p>
<p><span class="math display">\[
f(\boldsymbol x) = {\rm sgn}(\boldsymbol w^{*T}\boldsymbol x + b^*)
\]</span></p>
<p>这就是<strong>线性可分支持向量机</strong>。</p>
<p>为了评估一个超平面 <span class="math inline">\(\boldsymbol w^T\boldsymbol x + b = 0\)</span>，我们给定 <span class="math inline">\(T\)</span> 之中的一个样本点 <span class="math inline">\((x_i, y_i)\)</span>，定义<strong>函数间隔</strong>：</p>
<p><span class="math display">\[
\hat\gamma_i = y_i(\boldsymbol w^T\boldsymbol x_i + b)
\]</span></p>
<p>定义<strong>几何间隔</strong>：</p>
<p><span class="math display">\[
\gamma_i = y_i\left(\frac{\boldsymbol w^T}{\|\boldsymbol w\|}\boldsymbol x_i + \frac{b}{\|\boldsymbol w\|}\right)
\]</span></p>
<p>上述定义是针对单个样本点的，所以对于整个训练集 <span class="math inline">\(T\)</span>，定义：</p>
<p><span class="math display">\[
\begin{cases}
    \hat\gamma = \min_i \hat\gamma_i \\
    \gamma = \min_i \gamma_i \\
\end{cases}
\]</span></p>
<p>这也就是训练集和超平面的函数间隔以及几何间隔。这两种间隔之间相差 <span class="math inline">\(\|\boldsymbol w\|\)</span> 倍。</p>
<p>我们选择超平面的标准就是<strong>最大化超平面和训练集的间隔</strong>，也就是求取 <span class="math inline">\(\max_{\boldsymbol w, b}\gamma\)</span>。由于 <span class="math inline">\(\boldsymbol w, b\)</span> 可以成比例缩放，所以说我们完全可以假设 <span class="math inline">\(\hat\gamma = 1\)</span>，从而最优化问题转化为最大化 <span class="math inline">\(1 / \|\boldsymbol w\|\)</span>，等价于最小化 <span class="math inline">\(1 / 2\|\boldsymbol w\|^2\)</span>。所以说问题就是求解 <span class="math inline">\(\min_{\boldsymbol w, b} 1 / 2\|\boldsymbol w\|^2\)</span>。</p>
<p>这里由于 <span class="math inline">\(\hat\gamma = 1\)</span>，所以说总是存在 <span class="math inline">\((\boldsymbol x_i, y_i)\)</span> 满足 <span class="math inline">\(y_i(\boldsymbol w^T\boldsymbol x_i + b) = \hat\gamma = 1\)</span>，这个向量就是<strong>支持向量</strong>。</p>
<p>SVM 的学习过程，可以先定义 Lagrange 函数：</p>
<p><span class="math display">\[
L(\boldsymbol w, b, \boldsymbol\alpha) = \frac{1}{2}\|\boldsymbol w\|^2 + \sum_{i = 1}^N \alpha_i[1 - y_i(\boldsymbol w^T\boldsymbol x_i + b)]
\]</span></p>
<p>这里 <span class="math inline">\(\alpha_i \geq 0\)</span>，并且 <span class="math inline">\(\boldsymbol\alpha = (\alpha_1, \alpha_2, \cdots, \alpha_N)^T\)</span> 为 Lagrange 乘子向量。</p>
<p>我们知道：</p>
<p><span class="math display">\[
\max_\boldsymbol\alpha L(\boldsymbol w, b, \boldsymbol\alpha) =
\begin{cases}
    \dfrac{1}{2}\|\boldsymbol w\|^2 &amp; {\rm when\ some\ requirements\ are\ satisfied} \\
    \infty &amp; {\rm otherwise}
\end{cases}
\]</span></p>
<p>所以说 <span class="math inline">\(\min_{\boldsymbol w, b}\max_\alpha L(\boldsymbol w, b, \boldsymbol\alpha)\)</span> 与原问题等价。</p>
<p>另外，我们断定：</p>
<p><span class="math display">\[
\min_{\boldsymbol w, b} L(\boldsymbol w, b, \boldsymbol\alpha) \leq L(\boldsymbol w, b, \boldsymbol\alpha) \leq \max_\boldsymbol\alpha L(\boldsymbol w, b, \boldsymbol\alpha)
\]</span></p>
<p>所以我们有：</p>
<p><span class="math display">\[
\max_\boldsymbol\alpha\min_{\boldsymbol w, b} L(\boldsymbol w, b, \boldsymbol\alpha) \leq \min_{\boldsymbol w, b}\max_\boldsymbol\alpha L(\boldsymbol w, b, \boldsymbol\alpha)
\]</span></p>
<p>这个等号成立的条件为 <strong>KKT 条件</strong>。所以我们将问题转化为求 <span class="math inline">\(\max_\boldsymbol\alpha\min_{\boldsymbol w, b} L(\boldsymbol w, b, \boldsymbol\alpha)\)</span>。</p>
<p>我们令 <span class="math inline">\(L(\boldsymbol w, b, \boldsymbol\alpha)\)</span> 对 <span class="math inline">\(\boldsymbol w, b\)</span> 偏导为 <span class="math inline">\(0\)</span> 并代入就将问题转化为：</p>
<p><span class="math display">\[
\max_\boldsymbol\alpha\left[-\frac{1}{2}\sum_{i = 1}^N \sum_{j = 1}^N \alpha_i\alpha_jy_iy_j(\boldsymbol x_i^T\boldsymbol x_j) + \sum_{i = 1}^N \alpha_i\right]
\]</span></p>
<p>这里的约束条件为：</p>
<p><span class="math display">\[
\sum_{i = 1}^N \alpha_iy_i = 0\ (\alpha_i \geq 0)
\]</span></p>
<p>我们据此获得 <span class="math inline">\(\alpha^*\)</span>，从而我们可以计算：</p>
<p><span class="math display">\[
\begin{cases}
    \boldsymbol w^* = \sum_{i = 1}^N \alpha_i^*y_i\boldsymbol x_i \\
    b^* = y_j - \sum_{i = 1}^N \alpha_i^*y_i(\boldsymbol x_i^T\boldsymbol x_j)\ (\alpha_j^* \neq 0)
\end{cases}
\]</span></p>
<p>但是有的时候这些点并不能被线性超平面完全分隔，所以说 <span class="math inline">\(y_i(\boldsymbol w^T\boldsymbol x_i + b) \geq 1\)</span> 并不能处处满足，所以需要引入<strong>松弛变量</strong>：</p>
<p><span class="math display">\[
y_i(\boldsymbol w^T\boldsymbol x_i + b) \geq 1 - \xi_i
\]</span></p>
<p>为了尽量减小 <span class="math inline">\(\xi_i\)</span> 的影响，所以我们可以把优化目标改为：</p>
<p><span class="math display">\[
\min_{\boldsymbol w, b, \xi}\left(\frac{1}{2}\|\boldsymbol w\|^2 + C\sum_{i = 1}^N \xi_i\right)
\]</span></p>
<p>这种处理方式称为<strong>软间隔最大化</strong>，这里 <span class="math inline">\(C &gt; 0\)</span> 为惩罚参数，<span class="math inline">\(C\)</span> 越大惩罚力度越大。</p>
<p>按照线性可分 SVM 的方法，问题转化为：</p>
<p><span class="math display">\[
\max_\alpha\left[-\frac{1}{2}\sum_{i = 1}^N \sum_{j = 1}^N \alpha_i\alpha_jy_iy_j(\boldsymbol x_i^T\boldsymbol x_j) + \sum_{i = 1}^N \alpha_i\right]
\]</span></p>
<p>这里的约束条件为：</p>
<p><span class="math display">\[
\sum_{i = 1}^N \alpha_iy_i = 0\ (0 \leq \alpha_i \leq C)
\]</span></p>
<p>我们据此获得 <span class="math inline">\(\alpha^*\)</span>，从而我们可以计算：</p>
<p><span class="math display">\[
\begin{cases}
    \boldsymbol w^* = \sum_{i = 1}^N \alpha_i^*y_i\boldsymbol x_i \\
    b^* = y_j - \sum_{i = 1}^N \alpha_i^*y_i(\boldsymbol x_i^T\boldsymbol x_j)\ (0 &lt; \alpha_j^* &lt; C)
\end{cases}
\]</span></p>
<p><span class="math inline">\(\alpha_i^* &gt; 0\)</span> 对应的 <span class="math inline">\(\boldsymbol x_i\)</span> 是支持向量。</p>
<ul>
<li>若 <span class="math inline">\(\alpha_i^* = 0\)</span>，则不是支持向量（对应曲线外侧的点）</li>
<li>若 <span class="math inline">\(0 &lt; \alpha_i^* &lt; C\)</span>，则 <span class="math inline">\(\xi_i = 0\)</span>，那么 <span class="math inline">\(\boldsymbol x_i\)</span> 在间隔边界上，是支持向量（对应两条虚线上的点）</li>
<li>若 <span class="math inline">\(\alpha_i^* = C\)</span>，那么 <span class="math inline">\(\boldsymbol x_i\)</span> 也是支持向量
<ul>
<li>若 <span class="math inline">\(0 &lt; \xi_i &lt; 1\)</span>，则分类正确（对应在己方虚线和实线之间的点）</li>
<li>若 <span class="math inline">\(\xi_i = 1\)</span>，则在超平面上（对应在实线上的点）</li>
<li>若 <span class="math inline">\(\xi_i &gt; 1\)</span>，则被误分（对应在实线和对方虚线之间的点）</li>
</ul></li>
</ul>
<p>这里给出一个结论，也就是样本点到软间隔边界（虚线边界）的距离为 <span class="math inline">\(\xi_i / \|\boldsymbol w\|\)</span>。</p>
<p>另外一方面，我们考虑使用非线性的方式分割数据点。事实上就是尝试建立一个非线性映射将原空间的数据点映射到新空间上，这些数据点在新空间上线性可分。</p>
<p>考虑使用映射 <span class="math inline">\(\phi: X \rightarrow H\)</span> 将输入 <span class="math inline">\(\boldsymbol x \in X\)</span> 映射到新空间 <span class="math inline">\(H\)</span> 上，这里把 <span class="math inline">\(K(\boldsymbol x, \boldsymbol y) := \phi(\boldsymbol x)^T\phi(\boldsymbol y)\)</span> 称为<strong>核函数</strong>。这个时候所有的与内积相关的运算均应该使用核函数进行。</p>
<p>按照线性可分 SVM 的方法，问题转化为：</p>
<p><span class="math display">\[
\max_\alpha\left[-\frac{1}{2}\sum_{i = 1}^N \sum_{j = 1}^N \alpha_i\alpha_jy_iy_jK(\boldsymbol x_i, \boldsymbol x_j) + \sum_{i = 1}^N \alpha_i\right]
\]</span></p>
<p>这里的约束条件为：</p>
<p><span class="math display">\[
\sum_{i = 1}^N \alpha_iy_i = 0\ (0 \leq \alpha_i \leq C)
\]</span></p>
<p>我们据此获得 <span class="math inline">\(\alpha^*\)</span>，从而我们可以计算：</p>
<p><span class="math display">\[
b^* = y_j - \sum_{i = 1}^N \alpha_i^*y_iK(\boldsymbol x_i, \boldsymbol x_j)\ (0 &lt; \alpha_j^* &lt; C)
\]</span></p>
<p>原有的决策函数之中含有内积，所以也需要将其修改为：</p>
<p><span class="math display">\[
f(\boldsymbol x) = {\rm sgn}\left(\sum_{i = 1}^N \alpha_i^*y_iK(\boldsymbol x_i, \boldsymbol x) + b^*\right)
\]</span></p>
<p>常用的核函数包括<strong>多项式核函数</strong>：</p>
<p><span class="math display">\[
K(\boldsymbol x, \boldsymbol y) = (\boldsymbol x^T\boldsymbol y + 1)^p
\]</span></p>
<p>以及<strong>高斯核函数</strong>：</p>
<p><span class="math display">\[
K(\boldsymbol x, \boldsymbol y) = \exp\left(-\frac{\|\boldsymbol x - \boldsymbol y\|^2}{2\sigma^2}\right)
\]</span></p>
<h3 id="决策树">决策树</h3>
<p>我们定义随机变量 <span class="math inline">\(X\)</span> 的熵为：</p>
<p><span class="math display">\[
H(X) = -\sum_{i = 1}^n p_i\log p_i
\]</span></p>
<p>当概率由训练集 <span class="math inline">\(D\)</span> 给出，该熵可以标记为 <span class="math inline">\(H(D)\)</span>。</p>
<p>之后给出条件熵：</p>
<p><span class="math display">\[
H(Y \mid X) = \sum_{i = 1}^n P(X = x_i)H(Y \mid X = x_i)
\]</span></p>
<p>这表示的是已经知道 <span class="math inline">\(X\)</span> 的时候 <span class="math inline">\(Y\)</span> 的不确定性。</p>
<p>之后定义特征 <span class="math inline">\(A\)</span> 对数据集 <span class="math inline">\(D\)</span> 的<strong>信息增益</strong>为：</p>
<p><span class="math display">\[
g(D, A) = H(D) - H(D \mid A)
\]</span></p>
<p>这实际上表示的是给定特征 <span class="math inline">\(A\)</span> 的时候数据集 <span class="math inline">\(D\)</span> 不确定性减少的程度。</p>
<p>假设有训练集 <span class="math inline">\(D\)</span>，有 <span class="math inline">\(K\)</span> 个类 <span class="math inline">\(C_k\)</span>，特征 <span class="math inline">\(A\)</span> 有 <span class="math inline">\(n\)</span> 个取值 <span class="math inline">\(a_i\)</span>，特征 <span class="math inline">\(A\)</span> 的不同取值将 <span class="math inline">\(D\)</span> 划分为 <span class="math inline">\(n\)</span> 个子集 <span class="math inline">\(D_i\)</span>，记 <span class="math inline">\(D_i\)</span> 中属于 <span class="math inline">\(C_k\)</span> 类的样本集合为 <span class="math inline">\(D_{ik}\)</span>，那么：</p>
<p><span class="math display">\[
\begin{aligned}
    g(D, A) &amp;= H(D) - H(D \mid A) \\
    &amp;= -\sum_{k = 1}^K \frac{|C_k|}{|D|}\log\frac{|C_k|}{|D|} + \sum_{i = 1}^n \frac{|D_i|}{|D|}\left(\sum_{k = 1}^K \frac{|D_{ik}|}{|D_i|}\log\frac{|D_{ik}|}{|D_i|}\right)
\end{aligned}
\]</span></p>
<p>下面介绍 ID3 算法，这个算法可以用于生成决策树：</p>
<ul>
<li>如果 <span class="math inline">\(D\)</span> 之中所有例子属于同一类或者没有用于判断的特征，则返回单节点树，类标记为实例数最多的类</li>
<li>选择信息增益最大的特征 <span class="math inline">\(A_g\)</span>，其信息增益为 <span class="math inline">\(\delta_A\)</span></li>
<li>如果 <span class="math inline">\(\delta_A\)</span> 小于阈值 <span class="math inline">\(\varepsilon\)</span>，那么置单节点决策树，类标记为实例数最多的类</li>
<li>否则按照特征取值分割训练集，如果某个分割后的块为空，那么构建单节点子树，类标记为 <span class="math inline">\(D\)</span> 实例数最多的类。若非空则构建子树，递归上述过程</li>
</ul>
<p>这样的算法倾向于选择分支比较多的属性。</p>
<p>所以定义<strong>信息增益比</strong>：</p>
<p><span class="math display">\[
g_R(D, A) = \frac{g(D, A)}{H_A(D)}
\]</span></p>
<p>将 ID3 算法之中的信息增益换成信息增益比则得到 C4.5 算法。</p>
<p>这种方法生成的决策树可能产生过拟合，所以需要一定程度上的剪枝。剪枝的基本流程在于找到一个父节点，剪取其下一代后将其作为新的叶子节点，其类型标记为其原来对应的子树中量最大的类。</p>
<p>在数据量足够大的时候，可以使用验证集进行剪枝，也就是不断使用验证集剪枝直到性能下降。如果数据量不够，则使用训练集，从下往上缩节点，直到损失函数回升。损失函数定义：</p>
<p><span class="math display">\[
C_a(T) = \sum_{t = 1}^{|T|}N_tH_t(T) + a|T|
\]</span></p>
<p>这里经验熵定义为：</p>
<p><span class="math display">\[
H_t(T) = -\sum_k \frac{N_{tk}}{N_t}\log\frac{N_{tk}}{N_t}
\]</span></p>
<p>这里某一个节点 <span class="math inline">\(t\)</span> 的样本数为 <span class="math inline">\(N_t\)</span>，其中 <span class="math inline">\(k\)</span> 类的样本数为 <span class="math inline">\(N_{tk}\)</span>。</p>
<h2 id="神经网络与深度学习">神经网络与深度学习</h2>
<h3 id="基本神经元结构">基本神经元结构</h3>
<p>一个神经网络中的神经元一般接受多个输出并产生一个输出，一般而言其数学表达为：</p>
<p><span class="math display">\[
y = g\left(\sum_{i = 1}^n w_ix_i + b\right)
\]</span></p>
<p>这里函数 <span class="math inline">\(g\)</span> 一般是非线性的，称为<strong>激活函数</strong>。激活函数常见的有 sigmoid 等。</p>
<h3 id="反向传播算法bp">反向传播算法（BP）</h3>
<p>训练一个多层神经网络可以分为两步，首先是正向从输入计算出输出，和标准输出对比，算出损失函数（衡量实际输出和标准输出的差别），这是<strong>正向传播</strong>。之后就是根据差别的大小，计算出网络中各个权重对最终输出的偏导数，从而更新权重值，这是<strong>反向传播</strong>。</p>
<p>一般而言我们常常使用均方误差评价输出，也就是说对于某一层神经元以及某一个样本 <span class="math inline">\(d\)</span>，标记其中第 <span class="math inline">\(j\)</span> 个神经元的实际输出为 <span class="math inline">\(o_j\)</span>，理想输出为 <span class="math inline">\(t_j\)</span>，那么损失函数为：</p>
<p><span class="math display">\[
E_d(\boldsymbol w) = \frac{1}{2}\sum_j (t_j - o_j)^2
\]</span></p>
<p>根据损失函数，权重 <span class="math inline">\(w_{ji}\)</span>（第 <span class="math inline">\(j\)</span> 个神经元对第 <span class="math inline">\(i\)</span> 个输入的权重）的更新量为：</p>
<p><span class="math display">\[
\Delta w_{ji} = -\eta\frac{\partial E_d}{\partial w_{ji}}
\]</span></p>
<p>这里 <span class="math inline">\(0 &lt; \eta &lt; 1\)</span> 称为<strong>学习率</strong>。</p>
<p>我们设置一个中间量：</p>
<p><span class="math display">\[
n_j := \sum_iw_{ji}x_{ji} + b_j
\]</span></p>
<p>也就是未激活的神经元输出。那么我们知道：</p>
<p><span class="math display">\[
\frac{\partial E_d}{\partial w_{ji}} = \frac{\partial E_d}{\partial n_j}\frac{\partial n_j}{\partial w_{ji}} = \frac{\partial E_d}{\partial n_j}x_{ji}
\]</span></p>
<p>下面我们对输出层和隐含层分别计算损失函数对未激活输出的偏导数。</p>
<p>如果该层为输出层，那么我们进一步展开：</p>
<p><span class="math display">\[
\frac{\partial E_d}{\partial n_j} = \frac{\partial E_d}{\partial o_j}\frac{\partial o_j}{\partial n_j} = \frac{\partial}{\partial o_j}\left(\frac{1}{2}\sum_k(t_k - o_k)^2\right)\frac{\partial \sigma(n_j)}{\partial n_j} = -(t_j - o_j)o_j(1-o_j)
\]</span></p>
<p>这里默认激活函数为 sigmoid 函数。</p>
<p>如果该层为隐藏层，我们记其下游层的神经元构成集合 <span class="math inline">\(D\)</span>。作如下展开：</p>
<p><span class="math display">\[
\begin{aligned}
\frac{\partial E_d}{\partial n_j} &amp;= \sum_{k \in D}\frac{\partial E_d}{\partial n_k}\frac{\partial n_k}{\partial o_j}\frac{\partial o_j}{\partial n_j} \\
&amp;= \sum_{k \in D}\frac{\partial E_d}{\partial n_k}\frac{\partial}{\partial o_j}\left(\sum_l w_{kj}o_j + b\right)\frac{\partial\sigma(n_j)}{\partial n_j} \\
&amp;= \sum_{k \in D}\frac{\partial E_d}{\partial n_k}w_{kj}o_j(1 - o_j) \\
&amp;= o_j(1 - o_j)\sum_{k \in D}\frac{\partial E_d}{\partial n_k}w_{kj}
\end{aligned}
\]</span></p>
<p>这里还有一项偏导数实则可以继续按照上述的方式递推计算，直到计算到输出层。</p>
<p>这里额外提一下，均方误差只是一个选择，在分类问题中，更常用的是<strong>交叉熵误差</strong>：</p>
<p><span class="math display">\[
H_\boldsymbol t(\boldsymbol o) = -\sum_i t_i\log(o_i)
\]</span></p>
<h3 id="过拟合问题与正则化">过拟合问题与正则化</h3>
<p>过拟合问题在之前有过说明，在深度学习之中减少过拟合的一个方法就是在损失函数之中加入正则项：</p>
<p><span class="math display">\[
E_d(\boldsymbol w) = \frac{1}{2}\sum_k(t_k - o_k)^2 + \|\boldsymbol w\|
\]</span></p>
<p>另外还有引入 Dropout 以及引入验证集的方式，这里均不展开。</p>
<h3 id="卷积神经网络cnn">卷积神经网络（CNN）</h3>
<p><code>TODO</code></p>
<h3 id="循环神经网络rnn">循环神经网络（RNN）</h3>
<p><code>TODO</code></p>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>云游戏相关知识杂谈笔记</title>
    <url>/2023/09/20/note-of-media/</url>
    <content><![CDATA[<p>在正式加入云游戏相关项目之前，学长还是扔了一些学习材料过来让我补一下基础，这里就正常开一个笔记来记录一下学习过程了。大概先从显示器的一些工作原理和 WebRTC 相关知识开始吧。</p>
<span id="more"></span>
<h1 id="垂直同步与-g-sync">垂直同步与 G-sync</h1>
<p>https://www.youtube.com/watch?v=dnsPyyaNCWc&amp;list=PL7mmImi_1wpMVhVpBWr3Bob7kdchdDEoX&amp;index=23</p>
<p>主要分析了游戏之中画面撕裂的问题成因和相关的解决方案，这里也就主要关注显卡和显示器的配合问题。</p>
<p>首先需要明确的是，在游戏过程中，每一帧都是显卡负责绘制的，而显卡每秒绘制出的帧的数目就是<strong>帧率</strong>，简称 <strong>FPS</strong>。而显示器在接收到显卡所提供的帧的时候，需要在屏幕上绘制帧。当前所有的显示器采用的绘制方法都是<strong>逐行扫描</strong>，即光标从屏幕左上角开始向右向下逐个扫过像素点绘制帧，在扫描到右下角的时候，一帧绘制完成。绘制完一帧之后，显示器将光标从右下角重置到左上角的过程称为 <strong>VBlank</strong>。此外，显示器一秒内能够在屏幕上逐行扫描出的帧的数量称为<strong>刷新率</strong>。</p>
<p>这里有两个比较重要的概念，就是帧率和刷新率。需要注意的是，帧率描述显卡绘制帧的性能，刷新率描述显示器扫描帧的性能。</p>
<p>在真实的游戏场景中，由于游戏场景的复杂性不同，显卡所承受的渲染负载不同，显卡的帧率常常会波动。然而相对应地，显示器的刷新率一般是不波动的。这意味着，我们需要某种机制平衡波动的帧率和固定的刷新率。一般而言，常见的系统会采用<strong>帧缓冲</strong>机制来完成这一任务。</p>
<p>帧缓冲机制中一般会设置一个前缓冲区和一个后缓冲区，显示器仅仅会读取前缓冲区之中存放的帧，显卡只会修改后缓冲区中的帧。在这个机制之下，将后缓冲区中的帧传递到前缓冲区的操作称为<strong>帧传递</strong>。显然，何时进行帧传递就构成了这个系统的核心机制。</p>
<p>如果刷新率和帧率一致，那么我们只需要在显卡绘制完毕之后进行帧传递即可，此时显示器也应当恰好刷新完毕进入 VBlank，恰好准备绘制新帧。然而如果秉持着显卡绘制完毕即帧传递的策略，在帧率比刷新率更高的时候，后缓冲区中已经形成新的帧的时候显示器还没有进入 VBlank，此时将新帧传递入前缓冲区，显示器上则会出现上半为旧帧而下半为新帧的情况，即所谓的画面撕裂。另外，帧率低于刷新率的时候，显示器已经进入 VBlank 的时候后缓冲区依然没有触发帧传递，所以显示器只能重新绘制先前帧，此时新帧由显卡绘制完毕，帧传递后会出现显示器上上半为旧帧而下半为新帧的情况，同样也是画面撕裂。</p>
<p>总之，在这一策略之下，只要刷新率不等于帧率就会出现画面撕裂问题：</p>
<p><img src="/uploads/note-of-media/1.png" /></p>
<p>这里显示的是显示器角度的时间轴，A 到 F 各个色块则显示各个帧在前缓冲区中存续的时间。可以看到，无论是帧率高于刷新率还是低于刷新率，显示器所显示的画面都会有撕裂现象。</p>
<h2 id="垂直同步">垂直同步</h2>
<p>所谓的垂直同步策略，是在帧率高于刷新率的时候，强制令显卡空转等待 VBlank 到来后才触发帧交换。简而言之，就是强制令显卡等待显示器：</p>
<p><img src="/uploads/note-of-media/2.png" /></p>
<p>这里 G 区域就是强制令显卡等待的时间块。</p>
<p>而在帧率低于刷新率的时候，则强制令显示器再显示一次旧帧，若显示完显卡依然没有绘制完毕则一直显示，直到某一次显示的时候显卡绘制完了。此时显卡空转等待 VBlank 触发帧交换。简而言之，就是等效降低显示器刷新率，将问题化归为帧率高于刷新率的问题，再强制令显卡等待显示器：</p>
<p><img src="/uploads/note-of-media/3.png" /></p>
<p>这里 G 区域就是强制令显卡等待的时间块。</p>
<p>然而垂直同步的弊端也是显而易见的，即实际帧率一定会被锁定在显示器刷新率以下，事实上是一种卡死显卡性能换画面完整的交易。</p>
<p>在这个基础上，Nvidia 推出了<strong>自适应垂直同步</strong>方案，事实上就是在垂直同步系统之前加一个是否开启垂直同步的判断器。当显卡帧率高于刷新率的时候，该系统打开垂直同步令显卡空转等待显示器，而显卡帧率低于刷新率的时候，则关闭垂直同步，立即触发帧传递而不让显示器重复绘制先前帧。</p>
<p>但是无论如何改进，依然无法改变垂直同步具有延迟的缺陷，即 MTP latency 过高。简而言之，当场景变化较大的时候，即使显卡已经快速绘制出来还是有可能因为垂直同步被迫稍晚传递给显示器，导致用户操作和屏幕反应之间存在较大延迟。这对实时性高的游戏（如 FPS、Moba）是致命的。</p>
<h2 id="三重缓冲">三重缓冲</h2>
<p>为了解决垂直同步的延迟问题，有一种方式是将一般的前缓冲区和后缓冲区设计中加入新的中缓冲区构成三重缓冲。简单而言就是再设置一个缓冲区来存放显卡提前绘制好的帧，可以一定程度缓解显卡帧率突涨的问题。然而这是治标不治本的，也就是说当显卡性能保持在高位过长时间后，后缓冲区和中缓冲区都已经满了，此时显卡依然不得不空转等待显示器。</p>
<p>Nvidia 为了解决三重缓冲这种治标不治本的问题，提出了<strong>快速垂直同步（无阻塞垂直同步）</strong>方案，即允许中缓冲区和后缓冲区交换，当中后缓冲区全满的时候再次交换中后缓冲区，显卡用新的帧覆盖掉本应该交给显示器绘制的帧。此时中缓冲区始终有一个可以交给前缓冲区，即显示器绘制的帧，而显卡也始终没有等待显示器。</p>
<p>无阻塞垂直同步虽然做到了显示器和显卡都处于满负荷状态，但是两者之间不同步的差距则代偿给了帧丢失，也就是先前说的，如果中后缓冲区都满了，就会用新帧覆盖掉原本交给显示器的帧，从而导致实际的丢帧。</p>
<h2 id="g-sync-与-freesync">G-sync 与 Freesync</h2>
<p>实际上上述所有方案都有治标不治本的问题。为了从根源上解决画面撕裂又不产生过分的延迟，Nvidia 直接从显示器一侧尝试解决问题，即 G-sync 方案（该方案核心为<strong>自适应显示器刷新率</strong>，即 VRR，所以有时也称为 VRR 方案）。该方案的核心是令显示器可以调节 VBlank 时长，从而在显卡帧率较低的时候通过长 VBlank 时间来让“显示器等显卡”。</p>
<p>也就是说，垂直同步核心是显卡空转等显示器，而 G-sync 则是显示器空转等显卡。</p>
<p>然而在实际情况下，即使通过 VRR 也不可能让刷新率超越额定刷新率，所以当显卡帧率高于刷新率的时候依然会出现画面撕裂（也就是所说的 VRR 只能解决显卡帧率低于刷新率的情况）。所以厂家会推荐打开 G-sync 的时候同时打开垂直同步。</p>
<p>另外一个角度，过长时间的 VBlank 有时也不现实，因为显示器主板也有最低刷新率要求。这意味着如果帧率显著低于刷新率，打开 G-sync 甚至可能因刷新率锚定帧率导致更严重的后果。这个时候只能打开<strong>低帧补偿（Low Frame Compensation / LFC）</strong>，即通过多次扫描显示一帧，等效倍增显示器刷新率。然而 LFC 需要预测显卡的性能，因为毕竟需要提前决定到底下一帧需要几次扫描，一旦预测失误，依然会遇到问题。</p>
<p>所以 VRR 技术即使可以做到在一定范围内让刷新率锚定帧率，但是这依然需要帧率相对稳定。这时候就有个有趣的矛盾，既然能做到帧率相对稳定，那么即使画面撕裂也都会出现在屏幕上下方贴近边框的地方，那我为什么不能直接接受垂直同步之类的方案呢？</p>
<p>所以现今的解决方案中就是不能在低延迟、无撕裂上面做到兼顾，G-sync 也只是众多权衡中的一种。</p>
<p>最后，说明一下 Freesync。事实上 G-sync 是 Nvidia 授权部分显示器型号内置 Nvidia 芯片来达成的技术，是一种需要 Nvidia 官方认证才能采用的技术。而 Freesync 是开源的技术标准，所有显示器均可以使用，目前由 AMD 主要采用。而两者的技术框架几乎一致，仅仅在细节上有一定差别。</p>
<h1 id="webrtc-kalman-filter-render-time-estimation">WebRTC Kalman filter render time estimation</h1>
<p>参考文章：https://www.jianshu.com/p/0bc6a4998b32</p>
<p>由于这篇文章已经是 2020 年的文章了，感觉 WebRTC 源码也已经做了很大的更新，所以还是以 2023.09 的最新源码为准，文章终究是参考。</p>
<h2 id="形成帧的过程中播放延迟的传递">形成帧的过程中播放延迟的传递</h2>
<p>这篇文章主要介绍的是 WebRTC playout delay 的计算原理。WebRTC 源码之中 playout delay 表示为两个 <code>double</code> 浮点数构成的元组，分别表示最小播放延迟和最大播放延迟。一般而言，playout delay 会携带在 RTC 扩展头之中，如果没有携带，则使用默认初始化。</p>
<p>源码上的体现是：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// video_timing.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTC_EXPORT</span> <span class="title">VideoPlayoutDelay</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Maximum supported value for the delay limit.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> TimeDelta kMax = TimeDelta::<span class="built_in">Millis</span>(<span class="number">10</span>) * <span class="number">0xFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TimeDelta min_ = TimeDelta::<span class="built_in">Zero</span>();</span><br><span class="line">    TimeDelta max_ = kMax;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rtp_video_header.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RTPVideoHeader</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    absl::optional&lt;VideoPlayoutDelay&gt; playout_delay;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encoded_image.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RTC_EXPORT</span> <span class="title">EncodedImage</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    absl::optional&lt;VideoPlayoutDelay&gt; playout_delay_;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RtpFrameObject::<span class="built_in">RtpFrameObject</span>(<span class="comment">/* ... */</span>)</span><br><span class="line">    : <span class="built_in">first_seq_num_</span>(first_seq_num),</span><br><span class="line">      <span class="built_in">last_seq_num_</span>(last_seq_num),</span><br><span class="line">      <span class="built_in">last_packet_receive_time_</span>(last_packet_receive_time),</span><br><span class="line">      <span class="built_in">times_nacked_</span>(times_nacked) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">SetPlayoutDelay</span>(rtp_video_header_.playout_delay);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要观察最后一个构造函数的逻辑，在 <code>PacketBuffer</code> 模块将数据包排列组合出一帧的最后会创建一个 <code>RtpFrameObject</code> 实例来管理这一帧，此时会使用 <code>SetPlayoutDelay</code> 函数设定播放延迟。同时可以注意到，<code>RTPVideoHeader</code> 结构体中如果没有设定播放延迟，则默认为 <code>&#123;0, +Infinity&#125;</code>，也就是说创建帧对象的时候如果没有设定播放延迟则默认设定为 <code>&#123;0, +Infinity&#125;</code>。</p>
<p>在帧构建完成之后会调用 <code>VideoReceiveStream2::OnCompleteFrame</code> 函数将新帧插入帧队列：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VideoReceiveStream2::OnCompleteFrame</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    std::unique_ptr&lt;video_encoding::EncodedFrame&gt; frame,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (absl::optional&lt;VideoPlayoutDelay&gt; playout_delay =</span><br><span class="line">        frame-&gt;<span class="built_in">EncodedImage</span>().<span class="built_in">PlayoutDelay</span>()) &#123;</span><br><span class="line">        frame_minimum_playout_delay_ = playout_delay-&gt;<span class="built_in">min</span>();</span><br><span class="line">        frame_maximum_playout_delay_ = playout_delay-&gt;<span class="built_in">max</span>();</span><br><span class="line">        <span class="built_in">UpdatePlayoutDelays</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里涉及到了 <code>absl::optional</code> 的隐式类型转换，观察一下库函数就有：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// optional::operator bool()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns false if and only if the `optional` is empty.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   if (opt) &#123;</span></span><br><span class="line"><span class="comment">//      // do something with *opt or opt-&gt;;</span></span><br><span class="line"><span class="comment">//   &#125; else &#123;</span></span><br><span class="line"><span class="comment">//      // opt is empty.</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;engaged_; &#125;</span><br></pre></td></tr></table></figure>
<p>也就是说只有这个 <code>absl::optional</code> 容器内部没有存放任何值的时候才会返回 <code>false</code>，这也就对应着播放延迟没有在 RTC 扩展头之中携带。</p>
<p>这里可以注意当 <code>playout_delay_</code> 是非默认值的时候会做两件事：</p>
<ul>
<li>更新 <code>VideoReceiveStream2</code> 之中的 <code>frame_minimum_playout_delay_ms_</code> 等成员变量</li>
<li>调用 <code>UpdatePlayoutDelays</code> 函数更新 <code>VCMTiming</code> 类中的数据</li>
</ul>
<p>具体的源码为：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VideoReceiveStream2::UpdatePlayoutDelays</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">RTC_DCHECK_RUN_ON</span>(&amp;worker_sequence_checker_);</span><br><span class="line">    <span class="keyword">const</span> std::initializer_list&lt;absl::optional&lt;TimeDelta&gt;&gt; min_delays = &#123;</span><br><span class="line">        frame_minimum_playout_delay_,</span><br><span class="line">        base_minimum_playout_delay_,</span><br><span class="line">        syncable_minimum_playout_delay_&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since nullopt &lt; anything, this will return the largest of the minumum</span></span><br><span class="line">    <span class="comment">// delays, or nullopt if all are nullopt.</span></span><br><span class="line">    absl::optional&lt;TimeDelta&gt; minimum_delay = std::<span class="built_in">max</span>(min_delays);</span><br><span class="line">    <span class="keyword">if</span> (minimum_delay) &#123;</span><br><span class="line">        <span class="keyword">auto</span> num_playout_delays_set =</span><br><span class="line">            absl::<span class="built_in">c_count_if</span>(min_delays, [](<span class="keyword">auto</span> opt) &#123; <span class="keyword">return</span> opt.<span class="built_in">has_value</span>(); &#125;);</span><br><span class="line">        <span class="keyword">if</span> (num_playout_delays_set &gt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">            timing_-&gt;<span class="built_in">min_playout_delay</span>() != minimum_delay) &#123;</span><br><span class="line">            <span class="built_in">RTC_LOG</span>(LS_WARNING)</span><br><span class="line">                &lt;&lt; <span class="string">&quot;Multiple playout delays set. Actual delay value set to &quot;</span></span><br><span class="line">                &lt;&lt; *minimum_delay &lt;&lt; <span class="string">&quot; frame min delay=&quot;</span></span><br><span class="line">                &lt;&lt; <span class="built_in">OptionalDelayToLogString</span>(frame_minimum_playout_delay_)</span><br><span class="line">                &lt;&lt; <span class="string">&quot; base min delay=&quot;</span></span><br><span class="line">                &lt;&lt; <span class="built_in">OptionalDelayToLogString</span>(base_minimum_playout_delay_)</span><br><span class="line">                &lt;&lt; <span class="string">&quot; sync min delay=&quot;</span></span><br><span class="line">                &lt;&lt; <span class="built_in">OptionalDelayToLogString</span>(syncable_minimum_playout_delay_);</span><br><span class="line">        &#125;</span><br><span class="line">        timing_-&gt;<span class="built_in">set_min_playout_delay</span>(*minimum_delay);</span><br><span class="line">        <span class="keyword">if</span> (frame_minimum_playout_delay_ == TimeDelta::<span class="built_in">Zero</span>() &amp;&amp;</span><br><span class="line">            frame_maximum_playout_delay_ &gt; TimeDelta::<span class="built_in">Zero</span>()) &#123;</span><br><span class="line">            <span class="comment">// TODO(kron): Estimate frame rate from video stream.</span></span><br><span class="line">            <span class="keyword">constexpr</span> Frequency kFrameRate = Frequency::<span class="built_in">Hertz</span>(<span class="number">60</span>);</span><br><span class="line">            <span class="comment">// Convert playout delay in ms to number of frames.</span></span><br><span class="line">            <span class="keyword">int</span> max_composition_delay_in_frames =</span><br><span class="line">                std::<span class="built_in">lrint</span>(*frame_maximum_playout_delay_ * kFrameRate);</span><br><span class="line">            <span class="comment">// Subtract frames in buffer.</span></span><br><span class="line">            max_composition_delay_in_frames =</span><br><span class="line">                std::<span class="built_in">max</span>(max_composition_delay_in_frames - buffer_-&gt;<span class="built_in">Size</span>(), <span class="number">0</span>);</span><br><span class="line">            timing_-&gt;<span class="built_in">SetMaxCompositionDelayInFrames</span>(max_composition_delay_in_frames);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (frame_maximum_playout_delay_) &#123;</span><br><span class="line">        timing_-&gt;<span class="built_in">set_max_playout_delay</span>(*frame_maximum_playout_delay_);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一段看起来有一个前提，就是 <code>min_delays</code> 列表之中最多有一个有效值，而这个有效值将会被处理为真实的播放延迟。可以看到，在第 25 行，这里调用了 <code>timimg_-&gt;set_min_playout_delay</code> 函数，而这个函数的作用就是将播放延迟设定到 <code>VCMTiming</code> 类之中。这里 <code>timing_</code> 的类型为 <code>std::unique_ptr&lt;VCMTiming&gt;</code>。</p>
<p>再具体展开：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VCMTiming::set_min_playout_delay</span><span class="params">(TimeDelta min_playout_delay)</span> </span>&#123;</span><br><span class="line">    <span class="function">MutexLock <span class="title">lock</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (min_playout_delay_ != min_playout_delay) &#123;</span><br><span class="line">        <span class="built_in">CheckDelaysValid</span>(min_playout_delay, max_playout_delay_);</span><br><span class="line">        min_playout_delay_ = min_playout_delay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VCMTiming::set_max_playout_delay</span><span class="params">(TimeDelta max_playout_delay)</span> </span>&#123;</span><br><span class="line">    <span class="function">MutexLock <span class="title">lock</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (max_playout_delay_ != max_playout_delay) &#123;</span><br><span class="line">        <span class="built_in">CheckDelaysValid</span>(min_playout_delay_, max_playout_delay);</span><br><span class="line">        max_playout_delay_ = max_playout_delay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至少这里看起来是相当普通的一个 setter 代码。按这里的代码的话，<code>VCMTiming</code> 的作用在于维护帧级别的播放延迟，并作为最终存放点用于后续的延迟估计工作。</p>
<h2 id="帧插入过程中延迟的估计">帧插入过程中延迟的估计</h2>
<p>在形成新的一帧之后，需要通过帧插入操作将新的帧加入到帧缓冲区之中供后续解码。承接上述说明，在 <code>VideoReceiveStream2::OnCompleteFrame</code> 函数之后，会通过 <code>VideoStreamBufferController::InsertFrame</code> 函数将新帧压入缓冲区，而这个函数则进一步调用了 <code>FrameBuffer::InsertFrame</code> 函数：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">absl::optional&lt;<span class="keyword">int64_t</span>&gt; <span class="title">VideoStreamBufferController::InsertFrame</span><span class="params">(std::unique_ptr&lt;EncodedFrame&gt; frame)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">RTC_DCHECK_RUN_ON</span>(&amp;worker_sequence_checker_);</span><br><span class="line">    <span class="function">FrameMetadata <span class="title">metadata</span><span class="params">(*frame)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> complete_units = buffer_-&gt;<span class="built_in">GetTotalNumberOfContinuousTemporalUnits</span>();</span><br><span class="line">    <span class="keyword">if</span> (buffer_-&gt;<span class="built_in">InsertFrame</span>(std::<span class="built_in">move</span>(frame))) &#123;</span><br><span class="line">        <span class="built_in">RTC_DCHECK</span>(metadata.receive_time) &lt;&lt; <span class="string">&quot;Frame receive time must be set!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!metadata.delayed_by_retransmission &amp;&amp; metadata.receive_time &amp;&amp;</span><br><span class="line">            (field_trials_.<span class="built_in">IsDisabled</span>(<span class="string">&quot;WebRTC-IncomingTimestampOnMarkerBitOnly&quot;</span>) ||</span><br><span class="line">            metadata.is_last_spatial_layer)) &#123;</span><br><span class="line">            timing_-&gt;<span class="built_in">IncomingTimestamp</span>(metadata.rtp_timestamp, *metadata.receive_time);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (complete_units &lt; buffer_-&gt;<span class="built_in">GetTotalNumberOfContinuousTemporalUnits</span>()) &#123;</span><br><span class="line">            stats_proxy_-&gt;<span class="built_in">OnCompleteFrame</span>(metadata.is_keyframe, metadata.size, metadata.contentType);</span><br><span class="line">            <span class="built_in">MaybeScheduleFrameForRelease</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buffer_-&gt;<span class="built_in">LastContinuousFrameId</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 <code>FrameBuffer::InsertFrame</code> 函数具体细节不再阐述，基本上就是管理缓冲区的一些操作，我们主要看后续有关延迟的计算方式。首先，第 7 行的判定表示，如果该帧不是重传帧则进入分支内部。在此基础上，该函数会调用 <code>VCMTiming::IncomingTimestamp</code> 并立刻跳转到 <code>TimestampExtrapolator::Update</code>。在这个函数内部，框架将会根据当前帧的 RTP 时间戳估计当前帧的期望接收时间，并对 Kalman gain 进行校准（内心 OS：这一句话真的是没看懂啊，不过参考文献说后面会具体说明这个函数的目的，这里就先不深究了吧）。</p>
<hr />
<p>首先说明一帧从完整构成到显示到屏幕上所需要经历的阶段。在帧组装完毕之后，首先会送往解码器解码，解码完毕之后则送给渲染器渲染。</p>
<p>这里我们关注一个函数，即 <code>VCMTiming::MaxWaitingTime</code>。这个函数的作用是给出帧组装所能容忍的最大时长，也就是说如果在给定的阈值内没有能够从网络上获取足够的数据包将这一帧组装完毕，则这一帧大概率来不及走完解码、渲染的流程并显示在屏幕上。事实上这个函数是一个预测性质的函数，用来预测当前条件下我们能等待网络延迟多长时间：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">TimeDelta <span class="title">VCMTiming::MaxWaitingTime</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    Timestamp render_time,</span></span></span><br><span class="line"><span class="params"><span class="function">    Timestamp now,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">bool</span> too_many_frames_queued</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="function">MutexLock <span class="title">lock</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        render_time.<span class="built_in">IsZero</span>() &amp;&amp;</span><br><span class="line">        zero_playout_delay_min_pacing_-&gt;<span class="built_in">us</span>() &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        min_playout_delay_.<span class="built_in">IsZero</span>() &amp;&amp;</span><br><span class="line">        max_playout_delay_ &gt; TimeDelta::<span class="built_in">Zero</span>()</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="comment">// `render_time` == 0 indicates that the frame should be decoded and</span></span><br><span class="line">        <span class="comment">// rendered as soon as possible. However, the decoder can be choked if too</span></span><br><span class="line">        <span class="comment">// many frames are sent at once. Therefore, limit the interframe delay to</span></span><br><span class="line">        <span class="comment">// |zero_playout_delay_min_pacing_| unless too many frames are queued in</span></span><br><span class="line">        <span class="comment">// which case the frames are sent to the decoder at once.</span></span><br><span class="line">        <span class="keyword">if</span> (too_many_frames_queued) &#123;</span><br><span class="line">            <span class="keyword">return</span> TimeDelta::<span class="built_in">Zero</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        Timestamp earliest_next_decode_start_time =</span><br><span class="line">            last_decode_scheduled_ + zero_playout_delay_min_pacing_;</span><br><span class="line">        TimeDelta max_wait_time =</span><br><span class="line">            now &gt;= earliest_next_decode_start_time</span><br><span class="line">                ? TimeDelta::<span class="built_in">Zero</span>()</span><br><span class="line">                : earliest_next_decode_start_time - now;</span><br><span class="line">        <span class="keyword">return</span> max_wait_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_time - now - <span class="built_in">EstimatedMaxDecodeTime</span>() - render_delay_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数中 <code>render_time == 0</code> 表示这一帧需要尽快显示，这里忽略这一分支。该函数接受的参数分别为：</p>
<ul>
<li>要求渲染完成的时间戳 <code>render_time</code>，即我们的目标是在 <code>render_time</code> 之前渲染完毕这一帧</li>
<li>当前的时间戳 <code>now</code></li>
</ul>
<p>而返回值可以看到，首先我们用 <code>render_timer - now</code> 得到我们总共的容忍时长，之后减去预估的解码延迟 <code>EstimatedMaxDecodeTime()</code>，再减去预估的渲染延迟 <code>render_delay_</code>，即得到了剩余可以用来等待网络的时长。</p>
<hr />
<p>这里我们看另外一个函数，即 <code>VCMTiming::RenderTimeInternal</code>：</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function">Timestamp <span class="title">VCMTiming::RenderTimeInternal</span><span class="params">(<span class="keyword">uint32_t</span> frame_timestamp, Timestamp now)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">UseLowLatencyRendering</span>()) &#123;</span><br><span class="line">        <span class="comment">// Render as soon as possible or with low-latency renderer algorithm.</span></span><br><span class="line">        <span class="keyword">return</span> Timestamp::<span class="built_in">Zero</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note that TimestampExtrapolator::ExtrapolateLocalTime is not a const</span></span><br><span class="line">    <span class="comment">// method; it mutates the object&#x27;s wraparound state.</span></span><br><span class="line">    Timestamp estimated_complete_time =</span><br><span class="line">        ts_extrapolator_-&gt;<span class="built_in">ExtrapolateLocalTime</span>(frame_timestamp).<span class="built_in">value_or</span>(now);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the actual delay stays in the range of `min_playout_delay_`</span></span><br><span class="line">    <span class="comment">// and `max_playout_delay_`.</span></span><br><span class="line">    TimeDelta actual_delay =</span><br><span class="line">        current_delay_.<span class="built_in">Clamped</span>(min_playout_delay_, max_playout_delay_);</span><br><span class="line">    <span class="keyword">return</span> estimated_complete_time + actual_delay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要在预测某一帧何时应该被渲染完毕，事实上返回的就是上一个函数中的 <code>render_time</code> 时间戳参数。首先，判断是否是低延迟渲染模式，如果采用了低延迟模式，则直接返回零表示要求立刻渲染。</p>
<p>在此之后，首先会通过 <code>TimestampExtrapolator::ExtrapolateLocalTime</code> 函数，利用 Kalman filter 估计应当何时将这一帧送入渲染器队列。之后将 <code>current_delay_</code> 通过上下界 <code>[min_playout_delay_, max_playout_delay_]</code> 截断生成渲染过程耗时的估计，而这里的上下界则是上一阶段之中所获得的。<code>current_delay_</code> 本身的计算方式则在后面给出说明。</p>
<hr />
<p>由于最新代码框架已经和参考文章中的框架大为不同，这里重新叙述一下一个帧构建完毕后的函数调用链：</p>
<ul>
<li>构建帧的时候将播放延迟设置到 <code>VCMTiming</code> 类之中</li>
<li>帧构建完成后触发 <code>VideoReceiveStream2::OnCompleteFrame</code> 回调函数</li>
<li>上述回调函数之中触发 <code>VideoStreamBufferController::InsertFrame</code> 函数将帧插入帧缓冲区</li>
<li>帧插入操作通过 controller 最终交给 <code>FrameBuffer::InsertFrame</code> 实际完成</li>
<li>正常插入完毕后，非重传帧通过 <code>VCMTiming::IncomingTimestamp</code> 函数进入 Kalman filter 流程</li>
<li>正常插入完毕后，帧缓冲通过 <code>VideoStreamBufferController::MaybeScheduleFrameForRelease</code> 函数对后续帧作预测和规划</li>
<li>预测未来帧的时候调用 <code>FrameDecodeTiming::OnFrameBufferUpdated</code> 回调</li>
<li>该回调中通过 <code>VCMTiming::RenderTime</code> 预测渲染完毕时间戳，在此之后通过 <code>VCMTiming::MaxWaitingTime</code> 获取最大容忍等待时间</li>
</ul>
<h2 id="kalman-filter">Kalman filter</h2>
<p>首先，WebRTC 之中的 RTP 时间戳并非是 Unix 时间戳，而是按照 90kHz 的采样率计算采样次数。在 90kHz 之下每秒采样 90000 次，所以如果帧率为 60FPS，则每一帧之间相距 1/60 秒，即 1500 个采样点，也就是说 60FPS 之下相邻两帧之间的 RTP 时间戳相差值为 1500。</p>
<p>Kalman filter 的目标是，在已知起始帧到达时间 <span class="math inline">\(t_0\)</span> 的基础上预测第 <span class="math inline">\(k\)</span> 帧的到达时间 <span class="math inline">\(t_k\)</span>。如果将第 <span class="math inline">\(k\)</span> 帧的 RTP 时间戳记为 <span class="math inline">\(T_k\)</span>，从起始帧到第 <span class="math inline">\(k\)</span> 帧间因网络发生的 RTP 时间戳抖动记为 <span class="math inline">\(\Delta_k\)</span>，第 <span class="math inline">\(k\)</span> 帧的采样率记为 <span class="math inline">\(s_k\)</span>，那么：</p>
<p><span class="math display">\[
t_k = t_0 + \frac{(T_k - T_0) - \Delta_k}{s_k}
\]</span></p>
<h1 id="webrtc-jitter-buffer">WebRTC jitter buffer</h1>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>《信号处理原理》学习笔记</title>
    <url>/2021/09/14/note-of-dsp/</url>
    <content><![CDATA[<p>一门纯数学课，没有什么特别有意思的地方。但也正因为它是数学课，所以我感觉我学起来会稍微轻松一些，希望是我四大原理之中最舒服的一门课。</p>
<p><span class="math display">\[
\newcommand{\d}{\mathrm{d}}
\newcommand{\j}{\mathop{\mathrm{j}}}
\newcommand{\b}{\boldsymbol}
\newcommand{\lv}{\left[\begin{matrix}}
\newcommand{\rv}{\end{matrix}\right]}
\]</span></p>
<span id="more"></span>
<h1 id="信号处理基本知识">信号处理基本知识</h1>
<p>信号是一种载有信息的物理量，所以可以说信号是信息的表现形式，信息是信号蕴含的内容。我们探测信号的工具称为<strong>传感器（Sensor）</strong>，传感器是将一种物理变化转化为另一种物理变化的装置。比如说为了探测声波，我们可以使用传感器将声波转化为电信号。</p>
<p>通过传感器我们可以将某些难以处理的信号转化为我们易于处理的信号。对信号的处理大致可以分为三类，即<strong>降噪</strong>、<strong>特征抽取</strong>以及<strong>编码解码</strong>。</p>
<p>信号常常使用函数或者序列进行描述，而函数具有图像，所以有的时候信号也会使用具体的图像进行描述。</p>
<hr />
<p>信号可以按照对于给定的自变量能不能得到确定的因变量分类为<strong>确定信号</strong>和<strong>随机信号</strong>。另外，信号 <span class="math inline">\(f(t)\)</span> 也可以按照是否存在 <span class="math inline">\(T &gt; 0\)</span> 满足 <span class="math inline">\(\forall t \in \mathbb R, f(t) = f(t + T)\)</span> 分为<strong>周期信号</strong>和<strong>非周期信号</strong>。</p>
<h2 id="常见信号形式">常见信号形式</h2>
<p><strong>正余弦信号</strong>是最常见的信号形式之一，其数学表达式为：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; f(t) = K \sin(\omega t + \theta) \\
&amp; f(t) = K \cos(\omega t + \theta) \\
\end{aligned}
\]</span></p>
<p>这里 <span class="math inline">\(K\)</span> 表示<strong>振幅</strong>，<span class="math inline">\(\omega\)</span> 表示<strong>角频率</strong>，<span class="math inline">\(\theta\)</span> 表示<strong>初相位</strong>。</p>
<hr />
<p>除去正弦余弦信号，<strong>Sa 信号</strong>也是常见的一种信号形式，其数学表达式为：</p>
<p><span class="math display">\[
{\rm Sa}(t) = \frac{\sin t}{t}
\]</span></p>
<p>这个信号是一个偶函数，其零点构成的集合为 <span class="math inline">\(\{ k\pi \mid k \in \mathbb Z, k \neq 0 \}\)</span>。这个信号的积分性质为：</p>
<p><span class="math display">\[
\int_{-\infty}^{+\infty} {\rm Sa}(t) \d t = \pi
\]</span></p>
<p>这个积分一般被称为 <strong>Dirichlet 积分</strong>，其一种计算方式可以看下列推导。</p>
<p>考虑函数：</p>
<p><span class="math display">\[
F(t) = \int_{0}^{+\infty} \frac{\sin x}{x} e^{-tx} \d x
\]</span></p>
<p>这个函数的导数可以描述为：</p>
<p><span class="math display">\[
\frac{\d F}{\d t} = \frac\d{\d t} \int_{0}^{+\infty} \frac{\sin x}{x} e^{-tx} \d x = \int_{0}^{+\infty} \frac{\partial e^{-tx}}{\partial t} \frac{\sin x}{x} \d x = -\int_{0}^{+\infty} e^{-tx}\sin x \d x
\]</span></p>
<p>进一步：</p>
<p><span class="math display">\[
\begin{aligned}
\frac{\d F}{\d t} &amp;= \int_{0}^{+\infty} e^{-tx} \d \cos x = \left. e^{-tx}\cos x \right|_{0}^{+\infty} + t \int_{0}^{+\infty} e^{-tx}\cos x \d x \\
&amp;= -1 + t \int_{0}^{+\infty} e^{-tx} \d \sin x = -1 + t \left( \left. e^{-tx}\sin x \right|_{0}^{+\infty} + t \int_{0}^{+\infty} e^{-tx}\sin x \d x \right) \\
&amp;= -1 + t^2 \int_{0}^{+\infty} e^{-tx}\sin x \d x = -1 - t^2 \frac{\d F}{\d t}
\end{aligned}
\]</span></p>
<p>也就是说：</p>
<p><span class="math display">\[
\frac{\d F}{\d t} = -\frac{1}{1 + t^2} \Rightarrow F(t) = -\arctan t + C
\]</span></p>
<p>不难得知 <span class="math inline">\(F(+\infty) = 0\)</span>，这就说明 <span class="math inline">\(C = \pi / 2\)</span>，从而 Dirichlet 积分的结果为：</p>
<p><span class="math display">\[
\int_{-\infty}^{+\infty} {\rm Sa}(t) \d t = 2F(0) = \pi
\]</span></p>
<hr />
<p>此外，<strong>指数信号</strong>也较为常见，其数学表达式为：</p>
<p><span class="math display">\[
f(t) = K e^{\alpha t}
\]</span></p>
<p>指数信号的特征就是，其积分或微分后依然是指数信号。</p>
<h2 id="复信号分析">复信号分析</h2>
<p>在分析一般的信号的时候，我们可以常常将其看作某一个复信号的实部或者虚部。比如说考虑复指数信号 <span class="math inline">\(f(t) = K e^{st}\)</span>，这里 <span class="math inline">\(s \in \mathbb C\)</span>。显然有：</p>
<p><span class="math display">\[
f(t) = K e^{[\Re(s) + \j\Im(s)]t} = K e^{(\Re s)t} (\cos(t\Im(s)) + \j\sin(t\Im(s)))
\]</span></p>
<p>这里可以发现，<strong>复指数信号的实部和虚部都是正余弦信号</strong>。</p>
<h2 id="函数空间与函数分解">函数空间与函数分解</h2>
<p>我们继续沿用线性空间的基向量、正交向量组、正交基和标准正交基的概念。现在我们考虑这样的一个线性空间，即定义在 <span class="math inline">\([t_1, t_2]\)</span> 上的可积复函数空间，定义其内积为：</p>
<p><span class="math display">\[
\langle\varphi_1, \varphi_2\rangle = \int_{t_1}^{t_2} \varphi_1(t)\varphi^*_2(t) \d t
\]</span></p>
<p>两函数如果内积为零，则称两函数<strong>正交</strong>。</p>
<p>如果函数 <span class="math inline">\(\varphi_1, \varphi_2, \cdots, \varphi_n\)</span> 满足：</p>
<p><span class="math display">\[
\langle\varphi_i, \varphi_j\rangle = \int_{t_1}^{t_2} \varphi_i(t)\varphi^*_j(t) \d t = \begin{cases}
0 &amp; i \neq j \\
k_i &amp; i = j
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(k_i\)</span> 为非零常数。那么这些函数构成<strong>正交函数集</strong>。</p>
<p>称一个正交函数集是完备的，如果不存在一个这个函数集之外的函数 <span class="math inline">\(\psi\)</span> 满足 <span class="math inline">\(0 &lt; \psi \cdot \psi &lt; +\infty\)</span> 且 <span class="math inline">\(\psi\)</span> 和该函数集之中所有函数正交。实际上完备的正交函数集就说明了这个函数集不能容纳更多的成员。</p>
<h1 id="信号的运算">信号的运算</h1>
<h2 id="常规运算">常规运算</h2>
<p>对于信号 <span class="math inline">\(f_1, f_2\)</span>，我们可以仿照函数四则运算的规定来规定其四则运算方式：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; (f_1 + f_2)(t) = f_1(t) + f_2(t) \\
&amp; (f_1 - f_2)(t) = f_1(t) - f_2(t) \\
&amp; (f_1 \cdot f_2)(t) = f_1(t) \cdot f_2(t) \\
&amp; \left(\frac{f_1}{f_2}\right)(t) = \frac{f_1(t)}{f_2(t)}
\end{aligned}
\]</span></p>
<p>另外，我们还可以对信号进行波形变换。常见的变换包括<strong>平移变换</strong>、<strong>反褶变换</strong>、<strong>压扩变换</strong>。</p>
<p>考虑平移变换：</p>
<p><span class="math display">\[
\begin{aligned}
f &amp;\mapsto f&#39; \\
f(t) &amp;\to f(t - b)\\
\end{aligned}
\]</span></p>
<p>这个变换可以将信号的波形沿着横轴（时间轴）正向平移 <span class="math inline">\(b\)</span> 个单位。</p>
<p>反褶变换指的是下述的变换：</p>
<p><span class="math display">\[
\begin{aligned}
f &amp;\mapsto f&#39; \\
f(t) &amp;\to f(-t)\\
\end{aligned}
\]</span></p>
<p>这个变换会将信号沿着纵轴翻折。</p>
<p>而压扩变换指的是：</p>
<p><span class="math display">\[
\begin{aligned}
f &amp;\mapsto f&#39; \\
f(t) &amp;\to f(at)\\
\end{aligned}
\]</span></p>
<p>参数 <span class="math inline">\(a\)</span> 控制了压扩的形式。如果 <span class="math inline">\(a &gt; 0\)</span>，则压扩的时候不需要反褶。如果 <span class="math inline">\(a &lt; 0\)</span>，则压扩的时候需要反褶。如果 <span class="math inline">\(|a| &gt; 1\)</span>，则变换是压缩。如果 <span class="math inline">\(|a| &lt; 1\)</span>，则变换是扩张。</p>
<h2 id="积分微分运算与能量">积分微分运算与能量</h2>
<p>对于符合一定条件的信号，我们可以进行微分积分运算，记号为：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \left(\frac{\d}{\d t} f\right)(t_0) = \left.\frac{\d f}{\d t}\right|_{t = t_0} \\
&amp; \left(\int_{-\infty} f \d t\right)(t_0) = \int_{-\infty}^{t_0} f(t) \d t
\end{aligned}
\]</span></p>
<p>基于积分微分运算，我们可以给定信号能量和信号功率的定义。对于连续空间（即定义在全实数上）的信号 <span class="math inline">\(f(t)\)</span>，能量定义为：</p>
<p><span class="math display">\[
E(f) = \int_{-\infty}^{+\infty} \|f(t)\|^2 \d t
\]</span></p>
<p>功率则是能量除以时间，但是考虑到时间范围是无穷大的，所以需要从极限进行定义：</p>
<p><span class="math display">\[
P(f) = \lim_{T\to+\infty}\frac{1}{T}\int_{-T / 2}^{T / 2} \|f(t)\|^2 \d t
\]</span></p>
<p>对于离散空间定义的信号 <span class="math inline">\(f\)</span>，表达类似：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; E(f) = \sum_{n = -\infty}^{+\infty} \|f(n)\|^2 \\
&amp; P(f) = \lim_{N\to\infty}\frac{1}{2N + 1} \sum_{n = -N}^{N} \|f(n)\|^2
\end{aligned}
\]</span></p>
<p>能量有限的信号称为能量有限信号，或在不引起混淆的时候简称<strong>能量信号</strong>。功率有限的信号称为功率有限信号，或在不引起混淆的时候简称<strong>功率信号</strong>。</p>
<h2 id="卷积运算">卷积运算</h2>
<p>对于两个连续时间信号 <span class="math inline">\(f, g\)</span>，定义两者的卷积为：</p>
<p><span class="math display">\[
(f * g)(t) = \int_{-\infty}^{+\infty} f(t - \tau)g(\tau) \d\tau
\]</span></p>
<p>卷积的存在性取决于上述积分是否存在，并且要求积分结果是有限的。</p>
<p>而对于离散的时间信号 <span class="math inline">\(f, g\)</span>，卷积定义为：</p>
<p><span class="math display">\[
(f * g)(n) = \sum_{m = -\infty}^{+\infty} f(n - m)g(m)
\]</span></p>
<p>从几何意义上讲，卷积指的是一个信号的反褶信号在时间轴上滑动的过程中，它与另外一个信号重合部分相乘得到的新信号的面积。</p>
<p>卷积显然符合下述运算律：</p>
<p><span class="math display">\[
\begin{cases}
f_1 * f_2 = f_2 * f_1 \\
f_1 * (f_2 + f_3) = f_1 * f_2 + f_1 * f_3 \\
(f_1 * f_2) * f_3 = f_1 * (f_2 * f_3)
\end{cases}
\]</span></p>
<p>卷积和微分积分运算的关系则为：</p>
<p><span class="math display">\[
\frac{\d}{\d t}(f_1 * f_2) = f_1 * \left(\frac{\d}{\d t} f_2\right) = \left(\frac{\d}{\d t} f_1\right) * f_2
\]</span></p>
<p>以及：</p>
<p><span class="math display">\[
\int_{-\infty} (f_1 * f_2) \d t = f_1 * \left(\int_{-\infty} f_2 \d t\right) = \left(\int_{-\infty} f_1 \d t\right) * f_2
\]</span></p>
<p>对于高阶微分积分，存在下述关系：</p>
<p><span class="math display">\[
(f_1 * f_2)^{(n)} = f_1^{(m)} * f_2^{(n - m)}
\]</span></p>
<p>上标括号中若为正整数，则表示高阶微分。若为负整数，则表示高阶积分。可以发现上述卷积的积分微分运算规律均为该公式的特殊情况。</p>
<h2 id="相关运算">相关运算</h2>
<p>定义两个信号的相关为：</p>
<p><span class="math display">\[
R(f_1, f_2)(t) = \int_{-\infty}^{+\infty} f_1(\tau)f_2^*(\tau - t)\d\tau = \int_{-\infty}^{+\infty} f_1(\tau + t)f_2^*(\tau)\d\tau
\]</span></p>
<p>显然可以注意到：</p>
<p><span class="math display">\[
\begin{cases}
R(f_1, f_2) = \mathcal{R}[R^*(f_2, f_1)] \\
R(f_1, f_2) = f_1 * \mathcal{R}^*[f_2]
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(\mathcal{R}\)</span> 表示反褶变换，即 <span class="math inline">\(\mathcal{R}[f](t) = f(-t)\)</span>。</p>
<p>第一条定律说明了相关运算并不是交换的。</p>
<h1 id="常用奇异信号">常用奇异信号</h1>
<p>我们已经介绍过正弦余弦信号、指数信号等常用信号，另外还有一些形式较为特殊的信号称为奇异信号。这些信号的价值一般在于具有一些较为优越的运算特性。</p>
<p>首先介绍<strong>单位斜变信号</strong>，数学形式为：</p>
<p><span class="math display">\[
R(t) := \begin{cases}
0 &amp; t &lt; 0 \\
t &amp; t \geq 0
\end{cases}
\]</span></p>
<p>另外常用的还有<strong>截顶单位斜变信号</strong>：</p>
<p><span class="math display">\[
R_\tau(t) := \begin{cases}
0 &amp; t &lt; 0 \\
t &amp; 0 \leq t &lt; \tau \\
\tau &amp; t \geq \tau
\end{cases}
\]</span></p>
<p>从单位斜变信号衍生得到<strong>单位阶跃信号</strong>：</p>
<p><span class="math display">\[
u(t_0) = \frac{\d R}{\d t}(t_0) := \begin{cases}
0 &amp; t_0 &lt; 0 \\
1 &amp; t_0 \geq 0
\end{cases}
\]</span></p>
<p>进而可以衍生出<strong>单位矩形脉冲信号</strong>：</p>
<p><span class="math display">\[
G_\tau(t) := \begin{cases}
1 &amp; |t| \leq \tau / 2 \\
0 &amp; |t| &gt; \tau / 2
\end{cases}
\]</span></p>
<p>矩形脉冲信号和阶跃信号具有下述的关系：</p>
<p><span class="math display">\[
G_\tau(t) = u\left(t + \frac{\tau}{2}\right) - u\left(t - \frac{\tau}{2}\right)
\]</span></p>
<p>单位矩形脉冲信号的一个重要作用是作<strong>窗函数</strong>以截取某信号的某一段信息。对于信号 <span class="math inline">\(f\)</span>，将其与单位矩形脉冲信号作乘法得到 <span class="math inline">\(G_\tau f\)</span>。该信号仅有 <span class="math inline">\([-\tau / 2, \tau / 2]\)</span> 上的信息被保留，其余均为零。也就是说单位矩形脉冲信号进行了信息截取。</p>
<hr />
<p>单位阶跃信号另外一种衍生是<strong>符号函数信号</strong>：</p>
<p><span class="math display">\[
{\rm sgn}(t) := \begin{cases}
1 &amp; t \geq 0 \\
-1 &amp; t &lt; 0
\end{cases}
\]</span></p>
<p>该信号和单位阶跃信号的关系是：</p>
<p><span class="math display">\[
{\rm sgn}(t) = 2u(t) - 1
\]</span></p>
<hr />
<p>对单位阶跃信号求导即可得到<strong>单位冲激信号</strong> <span class="math inline">\(\delta\)</span>，其定义为：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \int_{-\infty}^{+\infty} \delta(t) \d t = 1 \\
&amp; \delta(t) = 0 (t \neq 0)
\end{aligned}
\]</span></p>
<p>更一般的冲激信号可以用单位冲激信号定义，对于在 <span class="math inline">\(t_0\)</span> 处冲激，强度为 <span class="math inline">\(E\)</span> 的冲激信号，其表达式为：</p>
<p><span class="math display">\[
\delta_{E, t_0}(t) = E\delta(t - t_0)
\]</span></p>
<p>另外一种定义方式是利用单位矩形脉冲信号取极限，也就是保证全实数集上积分为 <span class="math inline">\(1\)</span> 的条件下令取非零值的区间尽可能小：</p>
<p><span class="math display">\[
\delta = \lim_{\tau\to 0}\frac{G_\tau}{\tau}
\]</span></p>
<p>冲激信号具有下述压扩性质：</p>
<p><span class="math display">\[
\delta(at) = \frac{1}{|a|}\delta(t) (a \neq 0)
\]</span></p>
<p>冲激信号的一个特征就是<strong>搬移特性</strong>：</p>
<p><span class="math display">\[
f * \delta_{1, t_0} = \mathcal{S}_{t_0}[f]
\]</span></p>
<p>这里 <span class="math inline">\(\mathcal{S}_{t_0}\)</span> 表示平移变换，即 <span class="math inline">\(\mathcal{S}_{t_0}[f](t) = f(t - t_0)\)</span>。</p>
<p>上述的平移会将 <span class="math inline">\(f\)</span> 原先的原点平移到冲激信号的冲激点处。</p>
<p>证明则可以直接根据卷积的定义：</p>
<p><span class="math display">\[
(f * \delta_{1, t_0})(t) = \int_{-\infty}^{+\infty}f(t - \tau)\delta_{1, t_0}(\tau)\d\tau = f(t - t_0) = \mathcal{S}_{t_0}[f](t)
\]</span></p>
<p>与搬移特性原理类似的是<strong>筛选特性</strong>，也就是冲激信号和信号乘积的积分会得到该信号在冲激点处的值：</p>
<p><span class="math display">\[
\int_{-\infty}^{+\infty}f(t)\delta(t - t_0)\d t = f(t_0)
\]</span></p>
<h1 id="一般模拟信号分解">一般模拟信号分解</h1>
<h2 id="基本分解">基本分解</h2>
<p>对于信号 <span class="math inline">\(f\)</span>，我们可以将其分解为直流分量和交流分量，我们规定交流分量的积分为零，即：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; f_{\rm DC}(t) = \lim_{T\to+\infty}\frac{1}{T}\int_{-T / 2}^{T / 2}f(t)\d t \\
&amp; f_{\rm AC}(t) = f(t) - f_{\rm DC}(t) \\
\end{aligned}
\]</span></p>
<p>此外，还有奇偶分解：</p>
<p><span class="math display">\[
\begin{aligned}
f_e(t) = \frac{f(t) + f(-t)}{2} \\
f_o(t) = \frac{f(t) - f(-t)}{2} \\
\end{aligned}
\]</span></p>
<p>以及实虚分解：</p>
<p><span class="math display">\[
\begin{aligned}
f_r(t) = \frac{f(t) + f^*(t)}{2} \\
f_i(t) = \frac{f(t) - f^*(t)}{2\j} \\
\end{aligned}
\]</span></p>
<p>上述分解都是严格的，但下述的脉冲分解则是一种近似分解。脉冲分解的思想是把信号分解为若干个矩形脉冲的和，在 <span class="math inline">\([t_0, t_0 + \Delta t]\)</span> 区间上，信号 <span class="math inline">\(f\)</span> 可以近似表示为：</p>
<p><span class="math display">\[
f(t) \approx f(t_0)[u(t - t_0) - u(t - t_0 - \Delta t)]
\]</span></p>
<p>将这些脉冲求和，则得到了信号 <span class="math inline">\(f\)</span> 的一个近似表达。</p>
<h2 id="正交分解概述">正交分解概述</h2>
<p>下述讨论均基于函数平方可积的性质。如果函数 <span class="math inline">\(f\)</span> 满足：</p>
<p><span class="math display">\[
\int_{-\infty}^{+\infty} f^2(t) \d t &lt; +\infty
\]</span></p>
<p>那么函数 <span class="math inline">\(f\)</span> 平方可积。所有的平方可积函数构成函数空间 <span class="math inline">\(\mathcal{L}^2(\mathbb{R})\)</span>。</p>
<p>此外，依然沿用先前的函数内积、正交、完备正交函数集等定义。</p>
<hr />
<p>我们考虑 <span class="math inline">\([t_1, t_2]\)</span> 上的完备正交函数集 <span class="math inline">\(\{\varphi_i\}\)</span> 以及函数 <span class="math inline">\(f\)</span>，其正交分解为：</p>
<p><span class="math display">\[
f = \sum_{k = 1}^{+\infty} c_k\varphi_k
\]</span></p>
<p>显然我们可以得到（这一步求解系数的变换称为 Karhunen-Loeve 变换）：</p>
<p><span class="math display">\[
c_k = \frac{\langle f, \varphi_k \rangle}{\langle \varphi_k, \varphi_k \rangle}
\]</span></p>
<p>据此，可以证明 Parseval 恒等式：</p>
<p><span class="math display">\[
E(f) = \int_{t_1}^{t_2} \|f(t)\|^2 \d t = \sum_{k = 1}^{+\infty} \langle \varphi_k, \varphi_k \rangle\|c_k\|^2 = \sum_{k = 1}^{+\infty} E(c_k\varphi_k)
\]</span></p>
<p>这个定理表明，在正交分解下，信号的能量等于各个分量能量的和。其证明只需要进行展开就可得到：</p>
<p><span class="math display">\[
\begin{aligned}
\int_{t_1}^{t_2} \|f\|^2 \d t &amp;= \int_{t_1}^{t_2} \left\|\sum_{k = 1}^{+\infty} c_k\varphi_k(t)\right\|^2 \d t = \int_{t_1}^{t_2} \left(\sum_{k = 1}^{+\infty} c_k\varphi_k(t)\right)\left(\sum_{k = 1}^{+\infty} c_k\varphi_k(t)\right)^* \d t \\
&amp;= \int_{t_1}^{t_2} \left(\sum_{k = 1}^{+\infty} c_k\varphi_k(t)\right)\left(\sum_{k = 1}^{+\infty} c_k^*\varphi_k^*(t)\right) \d t \\
&amp;= \int_{t_1}^{t_2} \left(\sum_{k = 1}^{+\infty} c_kc_k^*\varphi_k(t)\varphi_k^*(t) + \sum_{i\neq j} c_ic_j^*\varphi_i(t)\varphi_j^*(t)\right) \d t \\
&amp;= \sum_{k = 1}^{+\infty} \|c_k\|^2 \int_{t_1}^{t_2} \varphi_k(t)\varphi_k^*(t) \d t = \sum_{k = 1}^{+\infty} \langle \varphi_k, \varphi_k \rangle\|c_k\|^2
\end{aligned}
\]</span></p>
<div class="note info"><p>你说我展开没考虑连续、可导、收敛啥的？我们工科生不懂这些。</p>
</div>
<p>将信号展开为完全正交函数集的线性组合的过程即函数正交分解，求解线性组合系数的过程为<strong>信号变换</strong>。</p>
<h2 id="周期信号的正交分解">周期信号的正交分解</h2>
<p>现在考虑满足 Dirichlet 条件的周期信号 <span class="math inline">\(f\)</span>。Dirichlet 条件指的是：</p>
<ul>
<li><p>在一个周期内间断点有限</p></li>
<li><p>在一个周期内极值点有限</p></li>
<li><p>在一个周期内绝对值积分有限</p></li>
</ul>
<p>我们考虑下述两个常见的完备正交函数集，这里 <span class="math inline">\(\omega = 2\pi / T\)</span>，<span class="math inline">\(T\)</span> 是 <span class="math inline">\(f\)</span> 的周期，下述函数集在任意的长度为 <span class="math inline">\(T\)</span> 的闭区间上正交完备：</p>
<ul>
<li><p>三角函数集 <span class="math inline">\(\{1, \cos(n\omega t), \sin(n\omega t): n \in \mathbb{N}^+\}\)</span></p></li>
<li><p>指数函数集 <span class="math inline">\(\{e^{\j n\omega t}: n \in \mathbb{Z}\}\)</span></p></li>
</ul>
<p>在这两个基底下展开得到的线性组合式可以理解为一个无穷级数，这个无穷级数就是<strong>傅里叶级数（Fourier series）</strong>。两个函数集得到的傅里叶级数分别称为三角形式的傅里叶级数和指数形式的傅里叶级数。</p>
<p>三角形式的傅里叶级数表示为：</p>
<p><span class="math display">\[
f(t) = a_0 + \sum_{k = 1}^{+\infty} (a_n\cos(n\omega t) + b_n\sin(n\omega t))
\]</span></p>
<p>不难根据先前的论证得到系数的计算公式，这里 <span class="math inline">\(t_0\)</span> 为任意实数：</p>
<p><span class="math display">\[
\begin{aligned}
a_0 &amp;= \frac{\omega}{2\pi} \int_{t_0}^{t_0 + 2\pi / \omega} f(t) \d t \\
a_n &amp;= \frac{\omega}{\pi} \int_{t_0}^{t_0 + 2\pi / \omega} f(t)\cos(n\omega t) \d t \\
b_n &amp;= \frac{\omega}{\pi} \int_{t_0}^{t_0 + 2\pi / \omega} f(t)\sin(n\omega t) \d t \\
\end{aligned}
\]</span></p>
<p>指数形式的傅里叶级数表示为：</p>
<p><span class="math display">\[
f(t) = \sum_{k = -\infty}^{+\infty} F_ke^{\j k\omega t}
\]</span></p>
<p>其中有：</p>
<p><span class="math display">\[
F_k = \frac{\omega}{2\pi} \int_{t_0}^{t_0 + 2\pi / \omega} f(t)e^{-\j k\omega t} \d t
\]</span></p>
<div class="note info"><p>两个形式的傅里叶级数的适用范围均是全实数，但实际上这只是因为 <span class="math inline">\(f\)</span> 是周期的。</p>
<p>严格意义上说，由于我们给定的正交函数集只是在某个长度为 <span class="math inline">\(T\)</span> 的闭区间上正交，所以展开的傅里叶级数也只应当在这个闭区间上可用。但是由于周期性，我们可以简单地说明闭区间外这个级数表达依然成立。</p>
<p>这个区分是有必要的，因为严格意义上，在计算 <span class="math inline">\(f\)</span> 的能量、功率等数值的时候，积分区间均应该是长度为 <span class="math inline">\(T\)</span> 的闭区间。</p>
</div>
<p>三角形式和指数形式的傅里叶级数之间的关系可以考虑下述变形：</p>
<p><span class="math display">\[
\begin{aligned}
f(t) &amp;= a_0 + \sum_{k = 1}^{+\infty} (a_n\cos(n\omega t) + b_n\sin(n\omega t)) \\
&amp;= a_0 + \sum_{k = 1}^{+\infty} \left(a_n\frac{e^{\j n\omega t} - e^{-\j n\omega t}}{2\j} + b_n\frac{e^{\j n\omega t} + e^{-\j n\omega t}}{2}\right) \\
&amp;= a_0 + \sum_{k = 1}^{+\infty} \left(-\j a_n\frac{e^{\j n\omega t} - e^{-\j n\omega t}}{2} + b_n\frac{e^{\j n\omega t} + e^{-\j n\omega t}}{2}\right) \\
&amp;= a_0 + \sum_{k = 1}^{+\infty} \left(\frac{b_n - \j a_n}{2} e^{\j n\omega t} + \frac{b_n + \j a_n}{2} e^{-\j n\omega t}\right) \\
\end{aligned}
\]</span></p>
<p>也就是说这两者之间是等价的，并且可以据此发现上述系数计算公式之间的关系。</p>
<p>据此，我们也可以得到，如果周期信号 <span class="math inline">\(f\)</span> 是偶函数，那么其指数形式 FS 系数为实数序列。如果为奇函数，则为纯虚数序列。</p>
<hr />
<p>考虑 Parseval 定律在 FS 上的应用，显然有（注意积分区间是长度为 <span class="math inline">\(T\)</span> 的闭区间）：</p>
<p><span class="math display">\[
P(f) = \sum_{k = -\infty}^{+\infty} \|F_k\|^2 = \|a_0\|^2 + \frac12 \sum_{k = 1}^{+\infty}(\|a_k\|^2 + \|b_k\|^2)
\]</span></p>
<h2 id="频谱">频谱</h2>
<h3 id="频谱的定义">频谱的定义</h3>
<p>现在默认 FS 使用指数形式的。考虑系数序列 <span class="math inline">\(\{F_n \in \mathbb C\}_{-\infty &lt; n &lt; +\infty}\)</span>。以频率为横轴，将频率所对应的 FS 系数的模为该处的频谱值，即可做出信号的幅度频谱。如果以 FS 系数的辐角作为该处的频谱值，则得到相位频谱。两个频谱合并就可以表现出该信号所有的 FS 系数的信息。</p>
<p>我们思考 FS 系数的意义，事实上 FS 系数作为线性组合的系数，代表了被分解信号中某一个频率的成分的多少。从而这就意味着，频谱表现的是信号在频率意义上的构成。</p>
<p>不过注意，由于指数形式的 FS 之中包含 <span class="math inline">\(e^{-\j n\omega t}(n\in \mathbb{N}^+)\)</span> 项，其频率为负数 <span class="math inline">\(-n\omega\)</span>，所以信号的频谱图上会出现负频率。</p>
<p>我们可以断定频谱的一些性质：</p>
<ul>
<li><p>频谱是离散的，且只会在 <span class="math inline">\(n\omega(n\in \mathbb Z)\)</span> 点处存在值，这些具有值的频率称为<strong>谐波频率（Harmonic frequency）</strong>。</p></li>
<li><p>幅度频谱图是关于纵轴对称的，而相位频谱是关于原点对称的，这是由于 <span class="math inline">\(F_k\)</span> 与 <span class="math inline">\(F_{-k}\)</span> 共轭。</p></li>
</ul>
<p>现在我们考虑一个重要周期信号的频谱，即周期矩形脉冲。</p>
<p>假设某一周期矩形脉冲信号 <span class="math inline">\(f\)</span> 周期为 <span class="math inline">\(T_0 = 2\pi / \omega_0\)</span>，在区间 <span class="math inline">\([-T_0 / 2, T_0 / 2]\)</span> 上定义为：</p>
<p><span class="math display">\[
f(t) = \begin{cases}
E &amp; |t| \leq \tau_0 / 2 \\
0 &amp; |t| &gt; \tau_0 / 2
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(E &gt; 0\)</span> 且 <span class="math inline">\(\tau_0 &lt; T_0\)</span>。</p>
<p>其 FS 系数是显然的：</p>
<p><span class="math display">\[
F_k = \frac{\omega_0}{2\pi} \int_{-\pi / \omega_0}^{\pi / \omega_0} f(t)e^{-\j k\omega_0 t} \d t = \frac{E\omega_0}{2\pi} \int_{-\tau_0 / 2}^{\tau_0 / 2} e^{-\j k\omega_0 t} \d t = \frac{E\omega_0\tau_0}{2\pi}\frac{\sin(\omega_0 k\tau_0 / 2)}{\omega_0 k\tau_0 / 2}
\]</span></p>
<p>也就是：</p>
<p><span class="math display">\[
F_k = \frac{E\omega_0\tau_0}{2\pi}{\rm Sa}\left(\frac{\omega_0 k\tau_0}{2}\right)
\]</span></p>
<p>这个结果说明了，周期矩形脉冲信号的频谱具有包络线：</p>
<p><span class="math display">\[
F(\omega) = \frac{E\omega_0\tau_0}{2\pi}{\rm Sa}\left(\frac{\omega\tau_0}{2}\right)
\]</span></p>
<h3 id="带宽">带宽</h3>
<p>事实上我们注意到，大多的信号幅度频谱在高频区域取值很小，这也就说明大多信号在高频区域几乎不具有能量。</p>
<p>实际应用中，在失真可忽略的条件下，信号传递可以只传递低频分量（一般而言取频谱包络线最小绝对值的零点以内的分量），这一段区间的长度称为<strong>频带宽度</strong>，简称<strong>带宽</strong>。</p>
<h2 id="非周期信号的正交分解和频谱">非周期信号的正交分解和频谱</h2>
<h3 id="ft-表达式的推理">FT 表达式的推理</h3>
<p>任何非周期信号 <span class="math inline">\(f\)</span> 实际上都可以看成周期无穷大的周期信号。我们考虑周期为 <span class="math inline">\(T\)</span> 的周期信号 <span class="math inline">\(f_T\)</span>，其在周期 <span class="math inline">\([-T / 2, T / 2)\)</span> 上定义为 <span class="math inline">\(f_T(t) = f(t), t \in [-T / 2, T / 2)\)</span>。实际上可以得到：</p>
<p><span class="math display">\[
\lim_{T \to +\infty} f_T = f
\]</span></p>
<div class="note info"><p>我们没有定义过一个函数列如何收敛为一个函数，故这样的表述并非严谨。</p>
<p>后续很多证明也仅仅是形式化的，其作用仅仅是形成对定律的直观理解，请不要将这些推导用于严谨的证明之中。</p>
</div>
<p>考虑 <span class="math inline">\(f_T\)</span> 的傅里叶级数，如果令 <span class="math inline">\(\omega = 2\pi / T\)</span>，显然有：</p>
<p><span class="math display">\[
\begin{aligned}
f_T(t) &amp;= \sum_{k = -\infty}^{+\infty} F_k e^{\j k\omega t} = \sum_{k = -\infty}^{+\infty} \left(\frac{1}{T}\int_{-T / 2}^{T / 2} f_T(\tau)e^{-\j k\omega\tau} \d\tau\right)e^{\j k\omega t}
\end{aligned}
\]</span></p>
<p>考虑离散频谱中相邻谱线之间的间隔，即 <span class="math inline">\(\Delta\omega = \omega = \dfrac{2\pi}{T}\)</span>，在 <span class="math inline">\(T \to +\infty\)</span> 的时候谱线间隔 <span class="math inline">\(\Delta\omega \to 0\)</span>，那么我们有：</p>
<p><span class="math display">\[
\begin{aligned}
f(t) &amp;= \lim_{T \to +\infty} f_T(t) = \lim_{T \to +\infty} \sum_{k = -\infty}^{+\infty} \left(\frac{1}{T}\int_{-T / 2}^{T / 2} f_T(\tau)e^{-\j k\omega\tau} \d\tau\right)e^{\j k\omega t} \\
&amp;= \frac{1}{2\pi} \lim_{\Delta\omega \to 0} \sum_{k = -\infty}^{+\infty} \left(\int_{-T / 2}^{T / 2} f_T(\tau)e^{-\j k\omega\tau} \d\tau\right)e^{\j k\omega t} \Delta\omega
\end{aligned}
\]</span></p>
<p>现在我们定义：</p>
<p><span class="math display">\[
\begin{aligned}
F_T(x) &amp;= \int_{-T / 2}^{T / 2} f_T(\tau)e^{-\j x\tau} \d\tau \\
F(x) &amp;= \int_{-\infty}^{+\infty} f(\tau)e^{-\j x\tau} \d\tau
\end{aligned}
\]</span></p>
<p>显然有：</p>
<p><span class="math display">\[
\lim_{\Delta\omega \to 0} F_T = F
\]</span></p>
<p>该定义下，可以有：</p>
<p><span class="math display">\[
f(t) = \frac{1}{2\pi} \lim_{\Delta\omega \to 0} \sum_{k = -\infty}^{+\infty} F_T(k\omega) e^{\j k\omega t} \Delta\omega
\]</span></p>
<p>下一步则是将该极限转写为积分。但我们注意这样的一点，即 <span class="math inline">\(\Delta\omega\)</span> 在变动的时候，被积函数 <span class="math inline">\(F_T\)</span> 本身也在变动。按照严格的数学理论，这里我们应当严格说明收敛性。但我们只需要直观理解，具体的证明则省略：</p>
<p><span class="math display">\[
f(t) = \frac{1}{2\pi} \lim_{\Delta\omega \to 0} \sum_{k = -\infty}^{+\infty} F_T(k\omega) e^{\j k\omega t} \Delta\omega = \frac{1}{2\pi} \int_{-\infty}^{+\infty} F(\omega) e^{\j\omega t} \d\omega
\]</span></p>
<hr />
<p>上述推导中，我们实际上已经给出了一个函数 <span class="math inline">\(F(\omega)\)</span> 和信号 <span class="math inline">\(f(t)\)</span> 之间的关系：</p>
<p><span class="math display">\[
\begin{aligned}
f(t) &amp;= \frac{1}{2\pi} \int_{-\infty}^{+\infty} F(\omega) e^{\j\omega t} \d\omega \\
F(\omega) &amp;= \int_{-\infty}^{+\infty} f(t)e^{-\j\omega t} \d t
\end{aligned}
\]</span></p>
<p>这里我们可以给出函数 <span class="math inline">\(F(\omega)\)</span> 的一个理解，我们将其和 FS 比较：</p>
<p><span class="math display">\[
\begin{aligned}
f(t) &amp;= \sum_{k = -\infty}^{+\infty} F_ke^{\j k\omega t} \\
f(t) &amp;= \frac{1}{2\pi} \int_{-\infty}^{+\infty} F(\omega) e^{\j\omega t} \d\omega \\
\end{aligned}
\]</span></p>
<p>可以发现上述用 <span class="math inline">\(F(\omega)\)</span> 推出 <span class="math inline">\(f(t)\)</span> 的公式实际上类似于将 <span class="math inline">\(f\)</span> 表达为正交函数的线性组合，只不过这里的正交函数集是无穷集。这里 <span class="math inline">\(F(\omega)\)</span> 实际上相当于信号 <span class="math inline">\(f(t)\)</span> 的频谱，即其频域表现。</p>
<p>由 <span class="math inline">\(f\)</span> 推出 <span class="math inline">\(F\)</span> 的过程就称为<strong>傅立叶变换（Fourier transformation）</strong>，简称 FT。反过来由 <span class="math inline">\(F\)</span> 推出 <span class="math inline">\(f\)</span> 则称为<strong>傅立叶逆变换</strong>，简称 IFT。标记为：</p>
<p><span class="math display">\[
F = \mathcal{F}[f], f = \mathcal{F}^{-1}[F]
\]</span></p>
<h3 id="ft-的运算性质">FT 的运算性质</h3>
<p>FT 显然是线性变换：</p>
<p><span class="math display">\[
\mathcal{F}\left[\sum_{k = 1}^n \lambda_kf_k\right] = \sum_{k = 1}^n \lambda_k\mathcal{F}[f_k]
\]</span></p>
<p>下述论述中，记 <span class="math inline">\(F := \mathcal{F}[f]\)</span>。</p>
<p>其与反褶变换 <span class="math inline">\(\mathcal{R}\)</span> 具有以下性质：</p>
<p><span class="math display">\[
\begin{cases}
\mathcal{F}\mathcal{R}[f] = \mathcal{R}[F] \\
\mathcal{F}[f^*] = \mathcal{R}^*[F] \\
\mathcal{F}\mathcal{R}^*[f] = F^* \\
\end{cases}
\]</span></p>
<p>即时域上反褶等价于频域反褶，时域上共轭等价于频域反褶共轭，时域上反褶共轭等价于频域共轭。</p>
<p>而对于压扩变换 <span class="math inline">\(\mathcal{E}_a\)</span>，这里 <span class="math inline">\(\mathcal{E}_a[f](t) = f(at)\)</span>，我们有：</p>
<p><span class="math display">\[
\mathcal{F}\mathcal{E}_a[f] = \frac{1}{|a|}\mathcal{E}_{\frac{1}{a}}[F]
\]</span></p>
<p>对于平移变换 <span class="math inline">\(\mathcal{S}_{t_0}\)</span>，我们有（这里符号 <span class="math inline">\(\mathcal{F}\)</span> 的两个下标分别代表时域和频域使用的自变量符号）：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}[f(t - t_0)] = F(\omega)e^{-\j\omega t_0}
\]</span></p>
<p>综合压扩变换和平移变换：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}[f(at - t_0)] = \frac{1}{|a|}F\left(\frac{\omega}{a}\right)e^{-\j\omega t_0 / a}
\]</span></p>
<p>综合上述可以看出，时域的压扩会导致频域相反的压扩，并且会伴随幅度的变化。而时域的平移不影响幅度频谱，但是相位频谱会发生改变。</p>
<div class="note info"><p>这里使用 <span class="math inline">\(\mathcal{F}_{t, \omega}\)</span> 实在是折中之举。我自己一向是想要明确函数和函数值的区别的，比如说对函数的变换应该使用花写字体，使用中括号。按照这样的思路，<span class="math inline">\(\mathcal{F}[f(at - t_0)]\)</span> 是错误表达，因为方括号内实际上是函数值而非一个函数。</p>
<p>但是由于通用数学符号很多时候并没有区分两者，所以为了避免使用更多自定义符号导致难以阅读，还是暂且使用 <span class="math inline">\(\mathcal{F}_{t, \omega}\)</span> 这样的折中符号。</p>
</div>
<p>实际上我们注意到 FT 和 IFT 具有相同的数学结构，那么如果在时域上乘以复指数，频域则会发生平移：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}[f(t)e^{\j\omega_0 t}] = F(\omega - \omega_0)
\]</span></p>
<p>结合压扩变换得到：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}\left[\frac{1}{|a|}f\left(\frac{t}{a}\right)e^{\j\omega_0 t / a}\right] = F(a\omega - \omega_0)
\]</span></p>
<hr />
<p>FT 和微分积分运算关系大致如下。</p>
<p>考虑时域上的微分：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}\left[f^{(1)}(t)\right] = \j\omega F(\omega)
\]</span></p>
<p>考虑频域上的微分：</p>
<p><span class="math display">\[
\mathcal{F}^{-1}_{t, \omega}\left[F^{(1)}(\omega)\right] = -\j tf(t)
\]</span></p>
<p>考虑时域上的积分：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}\left[f^{(-1)}(t)\right] = \frac{1}{\j\omega}F(\omega) + \pi F(0)\delta(\omega)
\]</span></p>
<p>考虑频域上的积分：</p>
<p><span class="math display">\[
\mathcal{F}^{-1}_{t, \omega}\left[F^{(-1)}(\omega)\right] = -\frac{1}{\j t}f(t) + \pi f(0)\delta(t)
\]</span></p>
<hr />
<p>而 FT 和卷积的关系就很明朗，时域与频域相对，其中一个域上的乘积直接对应另一个域上的卷积。不过需要注意可能出现的常系数：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \mathcal{F}[f_1 * f_2] = \mathcal{F}[f_1] \cdot \mathcal{F}[f_2] \\
&amp; \mathcal{F}[f_1 \cdot f_2] = \frac{1}{2\pi} \mathcal{F}[f_1] * \mathcal{F}[f_2] \\
\end{aligned}
\]</span></p>
<p>FT 和相关运算的关系为：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \mathcal{F}[R(f_1, f_2)] = F_1F_2^* \\
&amp; \mathcal{F}[R(f, f)] = \|F\|^2
\end{aligned}
\]</span></p>
<div class="note info"><p>使用这个数学关系就可以得到矩形窗截取可能导致频域畸形的理论解释。我们提到过矩形脉冲乘以某一个信号可以用于截取信号指定区间的信息。但是截取后的信号在频域上的表现则会畸形，考虑下述关系：</p>
<p><span class="math display">\[
\mathcal{F}[G_\tau f] = \frac{1}{2\pi} \mathcal{F}[G_\tau] * \mathcal{F}[f]
\]</span></p>
<p>而 <span class="math inline">\(\mathcal{F}[G_\tau]\)</span> 是 <span class="math inline">\({\rm Sa}\)</span> 函数的衍生函数，其和原信号频谱的卷积可能导致频域畸变。</p>
</div>
<h3 id="fs-和-ft-的关系">FS 和 FT 的关系</h3>
<p>我们可以这样研究 FS 和 FT 的关系，考虑非周期信号 <span class="math inline">\(f\)</span>，其在区间 <span class="math inline">\([-T / 2, T / 2]\)</span> 外取值均为零。定义周期为 <span class="math inline">\(T\)</span> 的周期信号 <span class="math inline">\(\tilde{f}\)</span>，其在周期 <span class="math inline">\([-T / 2, T / 2]\)</span> 上有 <span class="math inline">\(\tilde{f} = f\)</span>。</p>
<p>考虑 <span class="math inline">\(\tilde{f}\)</span> 的 FS 系数（这里 <span class="math inline">\(\omega := 2\pi / T\)</span>）：</p>
<p><span class="math display">\[
F_k = \frac{1}{T} \int_{-T / 2}^{T / 2} \tilde{f}(t)e^{-\j k\omega t} \d t = \frac{1}{T} \int_{-\infty}^{+\infty} f(t)e^{-\j k\omega t} \d t = \frac{1}{T} F(k\omega)
\]</span></p>
<p>也就是说如果将一个脉冲式的信号（即除了某一个有限区间外取值均为零）扩展为一个周期信号，那么周期信号的离散频谱的包络线和脉冲信号的连续频谱仅仅相差一个常数倍数。</p>
<p>比如说上述求解过的周期矩形脉冲信号，如果我们仅仅关注一个周期内的矩形脉冲，其连续频谱的表达式为（和之前的论证使用相同的变量符号）：</p>
<p><span class="math display">\[
F(\omega) = E\tau_0{\rm Sa}\left(\frac{\omega\tau_0}{2}\right)
\]</span></p>
<h3 id="准周期信号">准周期信号</h3>
<p>有一些非周期信号可能会具有类似周期信号的时域重复结构，即可以将时域均匀划分为准周期，每一个准周期内信号的结构相互类似，这类信号就是准周期信号，如果其准周期的长度为 <span class="math inline">\(T\)</span>，一般会将 <span class="math inline">\(f_0 = 1 / T\)</span> 称为准周期信号的<strong>基频（Pitch）</strong>。</p>
<p>准周期信号的频谱特征也介于周期信号频谱和非周期信号频谱之间，即其频谱依然连续，但是在谐波频率处具有明显的尖峰。谐波频率处的尖峰就是准周期信号的一大特征。</p>
<h3 id="周期信号的-ft">周期信号的 FT</h3>
<p>鉴于 FS 和 FT 具有相同的本质，而周期信号的频谱表现是离散的，我们可以预料到对周期信号求解 FT 会得到若干离散的冲激函数之和。</p>
<p>比如说根据：</p>
<p><span class="math display">\[
\frac{1}{2\pi} \int_{-\infty}^{+\infty} (2\pi\delta(\omega - \omega_0)) e^{\j\omega t} \d\omega = e^{\j\omega_0 t}
\]</span></p>
<p>就可以得到复指数信号的 FT 为：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}[e^{\j\omega_0 t}] = 2\pi\delta(\omega - \omega_0)
\]</span></p>
<p>进一步可以推出：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \mathcal{F}_{t, \omega}[\cos\omega_0 t] = \pi(\delta(\omega + \omega_0) + \delta(\omega - \omega_0)) \\
&amp; \mathcal{F}_{t, \omega}[\sin\omega_0 t] = \j\pi(\delta(\omega + \omega_0) - \delta(\omega - \omega_0)) \\
\end{aligned}
\]</span></p>
<h3 id="其他常用函数的-ft">其他常用函数的 FT</h3>
<p>考虑冲激函数的 FT：</p>
<p><span class="math display">\[
\mathcal{F}[\delta_{E, 0}](\omega) = \int_{-\infty}^{+\infty} E\delta(t)e^{-\j\omega t} \d t = E
\]</span></p>
<p>也就是说冲激函数的傅立叶变换为常函数。这意味着冲激信号的频谱是处处均匀的，这种频谱一般称为<strong>白色谱</strong>或者<strong>均匀谱</strong>。</p>
<p>对冲激函数做 IFT 得到：</p>
<p><span class="math display">\[
\mathcal{F}^{-1}[\delta_{E, 0}](t) = \frac{1}{2\pi} \int_{-\infty}^{+\infty} E\delta(\omega) e^{\j\omega t} \d\omega = \frac{E}{2\pi}
\]</span></p>
<p>也就是说常函数的傅立叶变换是在原点的冲激函数，这是好理解的，因为常函数就是频率为零的三角函数。</p>
<p>上述推理说明了：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \mathcal{F}[\delta] = 1 \\
&amp; \mathcal{F}[1] = 2\pi\delta \\
\end{aligned}
\]</span></p>
<h1 id="信号采样">信号采样</h1>
<h2 id="采样的概念">采样的概念</h2>
<p>我们使用计算机存储时域上连续的信号的时候，只能存储部分点处的信号幅度，这就要求我们决定存储哪些点的信号值。这类每隔一定的时间间隔，从连续信号上取出该点信号幅度的行为就是<strong>采样</strong>。每次采样之间的时间间隔称为<strong>采样周期</strong>，一般标记为 <span class="math inline">\(T_s\)</span>。其倒数 <span class="math inline">\(f_s = 1 / T_s\)</span> 即称为<strong>采样频率</strong>，<span class="math inline">\(\omega_s = 2\pi / T_s\)</span> 则是<strong>采样（角）频率</strong>。</p>
<p>理想情况下，我们一般使用冲激串采样，即使用函数：</p>
<p><span class="math display">\[
p(t) = \sum_{k = -\infty}^{+\infty} \delta(t - kT_s)
\]</span></p>
<p>使用 <span class="math inline">\(p(t)\)</span> 乘以需要采样的信号 <span class="math inline">\(f(t)\)</span> 即可得到采样的结果。</p>
<h2 id="采样定理">采样定理</h2>
<p>现在考虑理想冲激串采样，我们考虑采样后信号的频谱表现。记：</p>
<p><span class="math display">\[
f_p(t) := f(t)p(t) = \sum_{k = -\infty}^{+\infty} f(t)\delta(t - kT_s)
\]</span></p>
<p>那么根据 FT 和卷积的关系（这里规定 <span class="math inline">\(F := \mathcal{F}[f]\)</span>）：</p>
<p><span class="math display">\[
\begin{aligned}
\mathcal{F}[f_p] &amp;= \frac{1}{2\pi}F * \mathcal{F}[p]
\end{aligned}
\]</span></p>
<p>这里我们需要求解 <span class="math inline">\(\mathcal{F}[p]\)</span>，即冲激串的傅立叶变换。由于冲激串函数实际上是周期函数，所以可以得知其频谱表现也是冲激串。我们可以求解其 FS 系数（这里 <span class="math inline">\(\omega_s := 2\pi / T_s\)</span>）：</p>
<p><span class="math display">\[
F_k = \frac{1}{T_s} \int_{-T_s / 2}^{T_s / 2} p(t)e^{-\j k\omega_s t} \d t = \frac{1}{T_s}
\]</span></p>
<p>将 <span class="math inline">\(p(t)\)</span> 写成 FS 得到：</p>
<p><span class="math display">\[
p(t) = \sum_{k = -\infty}^{+\infty} \frac{1}{T_s}e^{\j k\omega_s t}
\]</span></p>
<p>所以说可以有：</p>
<p><span class="math display">\[
\mathcal{F}[p](\omega) = \mathcal{F}_{t, \omega}\left[\sum_{k = -\infty}^{+\infty} \frac{1}{T_s}e^{\j k\omega_s t}\right] = \frac{1}{T_s} \sum_{k = -\infty}^{+\infty} \mathcal{F}_{t, \omega}[e^{\j k\omega_s t}] = \frac{2\pi}{T_s} \sum_{k = -\infty}^{+\infty} \delta(\omega - k\omega_s)
\]</span></p>
<p>也就是说时域的冲激串在频域上也是冲激串。</p>
<div class="note info"><p>如果你尝试这样求解 <span class="math inline">\(\mathcal{F}[p]\)</span>：</p>
<p><span class="math display">\[
\mathcal{F}[p] = \mathcal{F}\left[\sum_{k = -\infty}^{+\infty} \delta_{1, kT_s}\right] = \sum_{k = -\infty}^{+\infty} \mathcal{F}[\delta_{1, kT_s}]
\]</span></p>
<p>显然这会得到错误的结果。错误的原因是这里的级数和傅立叶变换这里不能交换（而上面先写成 FS 再 FT 的时候，级数和傅立叶变换又是可以交换的），而更深层次的原因则是冲激串严格上不具有 FT（不满足 Dirichlet 条件）。</p>
<p>实际上如果从更深层的意义上说，我们根本没有严格定义冲激函数，毕竟我们能看出来冲激函数根本不可能使用 Riemann 积分计算，所以还有更深层的数学原理被忽视了。</p>
<p>但一定程度上，这就是工科。想要钻研这些理论内部严格数学原理的读者可以阅读拓扑、泛函、实分析相关内容。</p>
</div>
<p>那么就可以计算取样后信号的频谱了：</p>
<p><span class="math display">\[
\mathcal{F}[f_p] = \frac{1}{2\pi}F * \mathcal{F}[p] = \frac{1}{T_s}F * \left(\sum_{k = -\infty}^{+\infty} \delta_{1, k\omega_s}\right) = \frac{1}{T_s}\sum_{k = -\infty}^{+\infty} \mathcal{S}_{k\omega_s}[F]
\]</span></p>
<p>也就是说抽样后的信号的频谱是将原先的频谱以 <span class="math inline">\(\omega_s\)</span> 为周期平移后叠加后得到的。</p>
<hr />
<p>现在我们考虑现实中常见的信号。常见信号往往具有一个<strong>高频截止频率</strong> <span class="math inline">\(\omega_M\)</span>，其含义为信号的频谱 <span class="math inline">\(F\)</span> 在区间 <span class="math inline">\([-\omega_M, \omega_M]\)</span> 外均取零。此外，之前也有提到过带宽相关知识，即大多数信号的能量聚集在低频区段，所以往往会截断高频的部分，而这个截断频率，也可以称为高频截止频率。这类信号频谱中位于区间 <span class="math inline">\([-\omega_M, \omega_M]\)</span> 内的频谱峰称为<strong>主峰</strong>。</p>
<p>对一个高频截止频率为 <span class="math inline">\(\omega_M\)</span> 的信号按照频率 <span class="math inline">\(\omega_s\)</span> 采样，采样后的频谱记为 <span class="math inline">\(F_p\)</span>，其是周期为 <span class="math inline">\(\omega_s\)</span> 的周期函数，每一个周期都是由原先信号的频谱主峰平移而来。我们现在固定高频截止频率，降低采样频率，考察 <span class="math inline">\(F_p\)</span> 的变化。在 <span class="math inline">\(\omega_s\)</span> 降低的时候，<span class="math inline">\(F_p\)</span> 周期减小，峰与峰之间的距离减小，从而存在一个临界取样频率，让相邻的两个频谱峰恰好相交。如果取样频率低于这个临界频率，就意味着 <span class="math inline">\(F_p\)</span> 的各个相邻的频谱峰会相互重叠，即发生<strong>频谱混叠</strong>。</p>
<p>如果没有发生频谱混叠，我们可以在采样之后使用低通滤波器将 <span class="math inline">\(F_p\)</span> 的主峰过滤出来，从而完美还原原先的信号。但是如果发生混叠，这种完美复原则是不可能的。而这个临界频率是显而易见的，即 <span class="math inline">\(\omega_s = 2\omega_M\)</span>。</p>
<p>这就是 Nyquist 取样定理，即使用不低于两倍高频截止频率 <span class="math inline">\(\omega_M\)</span> 的采样频率 <span class="math inline">\(\omega_s\)</span> 采样得到的数据点可以完美还原原信号。</p>
<p>综合上述，只有信号满足<strong>频带受限</strong>（即严格具有高频截止频率）并且<strong>取样频率足够高</strong>的时候，取样才能无损表示原有信号。</p>
<h2 id="信号复原内插">信号复原（内插）</h2>
<p>思考从采样序列恢复原先连续信号的方法，这其实就是<strong>插值法</strong>的应用，只不过在信号处理原理中我们将之称为内插法。</p>
<p>现在我们有信号 <span class="math inline">\(x(t)\)</span> 以抽样周期 <span class="math inline">\(T\)</span> 抽样得到的抽样序列 <span class="math inline">\(\{x(nT)\}_{n \in \mathbb Z}\)</span>。进行内插之前，我们需要确定内插函数 <span class="math inline">\(h(t)\)</span>，而内插函数一般就是我们使用的滤波器的单位冲激响应函数。随后用下述方法计算出内插后的连续信号 <span class="math inline">\(\tilde x(t)\)</span>：</p>
<p><span class="math display">\[
\tilde x(t) := \sum_{n = -\infty}^{+\infty} x(nT)h(t - nT) \approx x(t)
\]</span></p>
<p>使用不同的滤波器对应的内插函数 <span class="math inline">\(h(t)\)</span>，我们能获取到不同效果的复原信号 <span class="math inline">\(x(t)\)</span>。</p>
<div class="note info"><p>这里需要尝试解释一下滤波器、单位冲激响应、内插这些概念。</p>
<p>首先简单理解一下<strong>系统（System）</strong>的概念。系统可以简单理解为对给定输入（称之为<strong>激励</strong>）给出给定输出（称之为<strong>响应</strong>）的，具有特定功能的整体。</p>
<p>滤波器本质上就是一个对信号函数的变换，也是一种系统。只不过这个变换很多时候是用于过滤信号频谱之中的低频（或高频）成分的，所以才会有低通滤波器（或高通滤波器）之类的名称。其激励就是要过滤的信号，响应就是过滤后的信号。根据我们对滤波器性质的要求，我们至少需要滤波器是线性系统，满足激励叠加等于响应叠加以及激励倍增等于响应倍增。</p>
<p>而单位冲激响应就是一种特殊的响应。如果某一个滤波器的激励为单位冲激信号，其在这个条件下的响应就是单位冲激响应。</p>
<p>现在考虑一个滤波器，其对应的函数变换为 <span class="math inline">\(\mathcal{P}\)</span>，其单位冲激响应为 <span class="math inline">\(h\)</span>，即 <span class="math inline">\(\mathcal{P}[\delta] = h\)</span>。滤波器的线性保证了下述的性质：</p>
<p><span class="math display">\[
\begin{cases}
\mathcal{P}[f + g] = \mathcal{P}[f] + \mathcal{P}[g] \\
\mathcal{P}[\lambda f] = \lambda\mathcal{P}[f]
\end{cases}
\]</span></p>
<p>接下来我们证明<strong>任何激励和单位冲激响应的卷积就是该激励下滤波器的响应</strong>。这个结论说明了单位冲激响应携带了一个线性系统所有的信息，即只需要知晓一个线性系统的单位冲激响应就可以计算任何激励下的系统响应。本证明完全不理会系统函数变换和极限、级数是否可交换，工科生不管这些：</p>
<p><span class="math display">\[
\begin{aligned}
\mathcal{P}[x] &amp;= \mathcal{P}[x * \delta] = \mathcal{P}\left[\int_{-\infty}^{+\infty} x(\tau)\delta(\cdot - \tau) \d\tau\right] = \mathcal{P}\left[\lim_{\Delta \to 0} \sum_{k = -\infty}^{+\infty} x(k\Delta)\delta(\cdot - k\Delta) \Delta\right] \\
&amp;= \lim_{\Delta \to 0} \sum_{k = -\infty}^{+\infty} x(k\Delta) \mathcal{P}[\delta_{1, k\Delta}]\Delta = \lim_{\Delta \to 0} \sum_{k = -\infty}^{+\infty} x(k\Delta) h(\cdot - k\Delta)\Delta \\
&amp;= \int_{-\infty}^{+\infty} x(\tau)h(\cdot - \tau) \d\tau = x * h
\end{aligned}
\]</span></p>
<p>这里第一行到第二行直接默认系统函数变换和极限可交换且无穷求和下系统线性依然可以保证。</p>
<p>现在我们讨论上述说明的这些和信号复原（内插）是什么关系。我们已经说明了在符合取样定理的条件下，时域取样等价于频域周期延拓，所以我们要复原信号，只需要在频域上过滤出主峰即可。这个时候就需要使用到低通滤波器，我们假设使用的低通滤波器具有单位冲激响应 <span class="math inline">\(h(t)\)</span>。而这个滤波器的输入信号就是取样周期为 <span class="math inline">\(T\)</span> 的理想冲激串对原信号 <span class="math inline">\(x(t)\)</span> 取样得到的取样信号：</p>
<p><span class="math display">\[
x_p(t) = \sum_{k = -\infty}^{+\infty} x(kT)\delta(t - kT)
\]</span></p>
<p>我们考虑 <span class="math inline">\(x_p(t)\)</span> 通过滤波器处理后的输出，根据上述结论，该输出就是 <span class="math inline">\(x_p\)</span> 与 <span class="math inline">\(h\)</span> 的卷积，这里证明依然默认级数和无穷积分可交换：</p>
<p><span class="math display">\[
\begin{aligned}
(x_p * h)(t) &amp;= \int_{-\infty}^{+\infty} x_p(\tau)h(t - \tau) \d\tau = \int_{-\infty}^{+\infty} \left(\sum_{k = -\infty}^{+\infty} x(kT)\delta(\tau - kT)\right) h(t - \tau) \d\tau \\
&amp;= \sum_{k = -\infty}^{+\infty} x(kT) \int_{-\infty}^{+\infty} h(t - \tau)\delta(\tau - kT) \d\tau = \sum_{k = -\infty}^{+\infty} x(kT)h(t - kT)
\end{aligned}
\]</span></p>
<p>这个结果和我们介绍的使用内插函数 <span class="math inline">\(h\)</span> 对 <span class="math inline">\(x\)</span> 的取样序列进行内插法得到 <span class="math inline">\(\tilde x\)</span> 的公式一致。</p>
<p>其实内插法和使用滤波器滤波本质上在叙说同样的概念，只不过内插法是从时域的角度观察，即这样操作之后时域上缺失的数值点就会被插入回来，从而复原信号。而滤波是从频域的角度观察，即这样的操作本质上是在频域上过滤出低频峰。内插和滤波其实就是信号复原这个操作两个角度下观察的结果。</p>
</div>
<p>在此基础上我们继续介绍。为了复原初始连续信号，最理想的情况是使用理想低通滤波器，其频域表现为矩形窗，时域表现为 Sa 函数。其只需要在时域上将取样后的信号卷积上一个 Sa 函数即可获取原先的连续信号。</p>
<p>但是这里我们介绍两个不完全恢复的内插函数，即<strong>零阶保持内插</strong>和<strong>一阶保持内插（线性内插）</strong>。零阶保持内插的内插函数为：</p>
<p><span class="math display">\[
h(t) = \begin{cases}
1 &amp; 0 \leq t \leq T \\
0 &amp; {\rm otherwise}
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(T\)</span> 是取样周期。可以发现，内插函数是时域上的矩形窗，将其代入 <span class="math inline">\(\tilde x\)</span> 的公式会发现其复原出的信号大致为：</p>
<p><img src="/uploads/note-of-dsp/1.png" /></p>
<p>这里灰色线是原先的信号 <span class="math inline">\(x\)</span>，红色线则是内插后得到的 <span class="math inline">\(\tilde x\)</span>。这样的内插在每一个抽样周期内保持了抽样值本身，最终复原得到了类似阶跃的信号。</p>
<p>而一阶保持内插则是使用线性的方式插值，其内插函数为三角窗：</p>
<p><span class="math display">\[
h(t) = \begin{cases}
\dfrac{t}{T} + 1 &amp; -T \leq t &lt; 0 \\
-\dfrac{t}{T} + 1 &amp; 0 \leq t \leq T \\
0 &amp; {\rm otherwise}
\end{cases}
\]</span></p>
<p>其内插复原的信号则为：</p>
<p><img src="/uploads/note-of-dsp/2.png" /></p>
<p>可见其效果为直接使用线段连接各取样值以近似原信号。</p>
<hr />
<p>上述讨论完全基于采样满足采样定理，现在讨论采样频率过低导致频谱混叠的<strong>欠采样</strong>情况。此时即使采用理想低通滤波也无法获取原信号，但是我们可以说明，无论如何内插，采样点处的值保持。即无论采用何种内插函数 <span class="math inline">\(h\)</span>，得到的 <span class="math inline">\(\tilde x\)</span> 都保证 <span class="math inline">\(\tilde x(kT) = x(kT)(k \in \mathbb Z)\)</span>。</p>
<div class="note warning"><p>事实上这个性质要求内插函数 <span class="math inline">\(h\)</span> 满足这样的条件：</p>
<p><span class="math display">\[
\begin{cases}
h(0) = 1 \\
h(kT) = 0, k \in \mathbb Z \backslash \{0\}
\end{cases}
\]</span></p>
<p>事实上我们上面的叙述也只能为大家建立内插和滤波之间的一个直观感受，但是严格而言内插和滤波并非是一对完全严格对应的概念。内插法，或者说插值，天然要求插值后采样点处的函数值不改变，但是滤波并不严格保证这一点，比如说令滤波器的单位脉冲响应为 <span class="math inline">\(h(t) \equiv 1\)</span>，就不能保证采样点处函数值不变了。</p>
</div>
<h1 id="离散信号处理">离散信号处理</h1>
<p>上述的讨论均是理论的，理论的模拟信号时域连续、时域无限长、数值取值范围无限、精度无限。但是实际使用计算机处理的时候，这三点均无法满足，即计算机能处理的信号时域离散、时域有限长、数值取值范围有限、精度有限。</p>
<p>所以我们需要将上述的理论进行一定的修正才能应用到真实的信号处理场景中。</p>
<h2 id="从抽样序列还原原信号时域">从抽样序列还原原信号时域</h2>
<p>这一问题已经在采样部分叙述过，频带有限信号的采样频率足够高的时候，就可以根据抽样序列无损还原原信号。</p>
<h2 id="从抽样序列还原原信号频谱">从抽样序列还原原信号频谱</h2>
<p>连续时域信号通过抽样可以得到离散时域信号。考虑具有高频截止频率 <span class="math inline">\(\omega_M\)</span> 的频带有限信号 <span class="math inline">\(f\)</span>，其抽样信号 <span class="math inline">\(f_p\)</span> 定义为下式，这里 <span class="math inline">\(T_s\)</span> 是抽样周期：</p>
<p><span class="math display">\[
f_p(t) = \sum_{n = -\infty}^{+\infty} f(nT_s)\delta(t - nT_s)
\]</span></p>
<p>我们先前计算过抽样信号的 FT，这里 <span class="math inline">\(\omega_s\)</span> 是抽样频率，<span class="math inline">\(F\)</span> 是 <span class="math inline">\(f\)</span> 的频谱：</p>
<p><span class="math display">\[
F_p(\omega) = \frac{1}{T_s} \sum_{m = -\infty}^{+\infty} F(\omega - m\omega_s)
\]</span></p>
<p>在不发生频谱混叠的时候，抽样信号的频谱的主峰严格和原信号的频谱仅相差常数系数。也就是说在满足抽样定理的时候：</p>
<p><span class="math display">\[
F_p(\omega) = \frac{1}{T_s} F(\omega), \omega \in \left[-\frac{\omega_s}{2}, \frac{\omega_s}{2}\right] 
\]</span></p>
<p>我们形式上根据 FT 的计算公式可以推理得到下述关系，这里形式上将级数和无穷积分认为是可以交换的，所以严格而言是不严谨的推理：</p>
<p><span class="math display">\[
\begin{aligned}
F_p(\omega) &amp;= \int_{-\infty}^{+\infty} f_p(t)e^{-\j\omega t} \d t = \int_{-\infty}^{+\infty} \left(\sum_{n = -\infty}^{+\infty} f(nT_s)\delta(t - nT_s)\right)e^{-\j\omega t} \d t \\
&amp;= \sum_{n = -\infty}^{+\infty} f(nT_s) \left(\int_{-\infty}^{+\infty} \delta(t - nT_s)e^{-\j\omega t} \d t\right) = \sum_{n = -\infty}^{+\infty} f(nT_s) e^{-\j\omega nT_s} \d t
\end{aligned}
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
F(\omega) = T_sF_p(\omega) = T_s\sum_{n = -\infty}^{+\infty} f(nT_s) e^{-\j\omega nT_s}, \omega \in \left[-\frac{\omega_s}{2}, \frac{\omega_s}{2}\right] 
\]</span></p>
<p>从而我们就有从抽样信号序列复原原信号频谱的方式，这种变换相当于从离散信号作傅立叶变换，称为<strong>离散时间傅立叶变换（Discrete Time Fourier Transformation / DTFT）</strong>。</p>
<p>考虑其逆变换，即从原信号的频谱获取抽样信号。事实上 DTFT 的式子可以认为是一个 FS，<span class="math inline">\(\{f(nT_s)\}_{n \in \mathbb Z}\)</span> 可以认为是频域上的 FS 系数数列，原信号周期为 <span class="math inline">\(\omega_s\)</span>，不过注意这里指数上是 <span class="math inline">\(-\j\omega nT_s\)</span>，是有负号的。那么根据 FS 系数的公式：</p>
<p><span class="math display">\[
f(nT_s) = \frac{1}{\omega_s} \int_{-\omega_s / 2}^{\omega_s / 2} F_p(\omega)e^{\j n\omega T_s} \d\omega
\]</span></p>
<p>现在我们尝试进行归一化。由于 <span class="math inline">\(T_s\)</span> 实质上只是作为系数出现，所以可以将其归一化为 <span class="math inline">\(1\)</span>。而原先的采样序列记作数列 <span class="math inline">\(\{x(n)\}_{n \in \mathbb Z}\)</span>，这种归一化后的采样序列一般称为<strong>数字信号（Digital signal）</strong>。在这样的表示之下考虑 DTFT 和 IDTFT，我们将 DTFT 的结果记作 <span class="math inline">\(X(\omega)\)</span>，这也称为数字信号的频谱：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; X(\omega) = {\rm DTFT}[x](\omega) = \sum_{n = -\infty}^{+\infty} x(n) e^{-\j\omega n} \\
&amp; x(n) = \frac{1}{2\pi} \int_{-\pi}^{\pi} X(\omega)e^{\j n\omega} \d\omega
\end{aligned}
\]</span></p>
<p>根据上述推理，很容易知晓数字信号的频谱一定是周期的（根据 FT 和 IFT 的对偶，实际上根据周期信号的频谱离散就不难理解），并且由于进行了归一化处理，所以这个周期一定是 <span class="math inline">\(2\pi\)</span>：</p>
<p><span class="math display">\[
X(\omega + 2\pi) = X(\omega)
\]</span></p>
<p>DTFT 的运算法则和 FT 有很大类似之处。首先有 DTFT 是线性的：</p>
<p><span class="math display">\[
{\rm DTFT}\left[\sum_{k = 1}^n \lambda_kx_k\right] = \sum_{k = 1}^n \lambda_k{\rm DTFT}[x_k]
\]</span></p>
<p>时域和频域的平移均会导致另外一个域的相位平移：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; {\rm DTFT}_{n, \omega}[x(n - n_0)] = X(\omega)e^{-\j\omega n_0} \\
&amp; {\rm DTFT}_{n, \omega}[x(t)e^{\j\omega_0 n}] = X(\omega - \omega_0)
\end{aligned}
\]</span></p>
<p>其和反褶、共轭的关系也和 FT 类似：</p>
<p><span class="math display">\[
\begin{cases}
{\rm DTFT}[\mathcal{R}x] = \mathcal{R}[X] \\
{\rm DTFT}[x^*] = \mathcal{R}^*[X] \\
{\rm DTFT}[\mathcal{R}^*x] = X^* \\
\end{cases}
\]</span></p>
<p>压扩变换不能直接应用到数字信号上，所以我们给出时域扩展的定义：</p>
<p><span class="math display">\[
\mathcal{E}_a[x](n) = \begin{cases}
x(k) &amp; n = ka, k \in \mathbb Z \\
0 &amp; {\rm otherwise}
\end{cases} \ (a \in \mathbb{Z} \backslash \{0\})
\]</span></p>
<p>和 FT 类似，时域扩展的 DTFT 满足：</p>
<p><span class="math display">\[
{\rm DTFT}_{n, \omega}[\mathcal{E}_a[x](n)] = X(a\omega)
\]</span></p>
<p>DTFT 我们只探讨频域微分，和 FT 类似，频域微分等价于时域上的加权求和：</p>
<p><span class="math display">\[
{\rm DTFT}_{n, \omega}[nx(n)] = \j X^{(1)}(\omega)
\]</span></p>
<p>讨论卷积的时候，就不得不考虑到 DTFT 得到的频谱是周期的，普通的卷积可能不收敛。所以这里定义<strong>圆卷积</strong>，直观上而言就是指考虑一个周期内的卷积。比如说周期为 <span class="math inline">\(T\)</span> 的两个周期信号 <span class="math inline">\(x, y\)</span> 的圆卷积定义为：</p>
<p><span class="math display">\[
(x\otimes y)(t) := \int_T x(\tau)y(t - \tau) \d\tau
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; {\rm DTFT}[x_1 * x_2] = {\rm DTFT}[x_1] \cdot {\rm DTFT}[x_2] \\
&amp; {\rm DTFT}[x_1 \cdot x_2] = \frac{1}{2\pi} {\rm DTFT}[x_1] \otimes {\rm DTFT}[x_2] \\
\end{aligned}
\]</span></p>
<p>Parseval 定律依然类似成立：</p>
<p><span class="math display">\[
\sum_{n = -\infty}^{+\infty} \|x(n)\|^2 = \frac{1}{2\pi} \int_{-\pi}^{\pi} \|X(\omega)\|^2 \d\omega
\]</span></p>
<h2 id="从有限抽样序列还原信号频谱">从有限抽样序列还原信号频谱</h2>
<p>现在我们基本上解决了时域离散的问题，但是我们要考虑到计算机处理信号的时候时域不可能无限。</p>
<p>我们考虑对数字信号加上一个窗函数：</p>
<p><span class="math display">\[
w(n) := \begin{cases}
1 &amp; 0 \leq n \leq L - 1 \\
0 &amp; {\rm otherwise}
\end{cases}
\]</span></p>
<p>那么 <span class="math inline">\(L\)</span> 长的有限长度数字信号就可以表示为：</p>
<p><span class="math display">\[
x_L = x \cdot w
\]</span></p>
<p>那么显然根据 DTFT 的性质得到 <span class="math inline">\(x_L\)</span> 的 DTFT 为：</p>
<p><span class="math display">\[
X_L(\omega) = \frac{1}{2\pi} ({\rm DTFT}[x] \otimes {\rm DTFT}[w])(\omega)
\]</span></p>
<p>显然：</p>
<p><span class="math display">\[
\begin{aligned}
{\rm DTFT}[w](\omega) &amp;= \sum_{n = -\infty}^{+\infty} w(n)e^{-\j\omega n} = \sum_{n = 0}^{L - 1} e^{-\j\omega n} \\
&amp;= \frac{1 - e^{-\j L\omega}}{1 - e^{-\j\omega}}
\end{aligned}
\]</span></p>
<p>这个窗函数的频谱在周期 <span class="math inline">\([-\pi, \pi]\)</span> 内表现为低频有一个主峰，其余部分有若干指数衰减的副峰。主峰的宽度是绝对值最小两个零点的距离：</p>
<p><span class="math display">\[
\Delta\omega_L = \frac{2\pi}{L}
\]</span></p>
<h3 id="窗宽的限制">窗宽的限制</h3>
<p>现在我们考虑下述数字信号：</p>
<p><span class="math display">\[
x(n) = A_1e^{\j\omega_1 n} + A_2e^{\j\omega_2 n} (0 &lt; \omega_1, \omega_2 &lt; \pi)
\]</span></p>
<p>显然其 DTFT 为：</p>
<p><span class="math display">\[
X(\omega) = 2\pi(A_1\delta(\omega - \omega_1) + A_2\delta(\omega - \omega_2))
\]</span></p>
<p>现在我们将其乘上窗函数得到有限长的数字信号：</p>
<p><span class="math display">\[
x_L(n) = x(n)w(n)
\]</span></p>
<p>其 DTFT 为：</p>
<p><span class="math display">\[
X_L(\omega) = \frac{1}{2\pi}(X \otimes W)(\omega) = A_1W(\omega - \omega_1) + A_2W(\omega - \omega_2)
\]</span></p>
<p>这里我们只考虑 <span class="math inline">\(W\)</span> 的主峰，显然使用窗函数截取之后，频谱上原先是两个冲激的位置变为了两个窗函数频谱主峰。为了保证这两个主峰可以区分，我们要求这两个主峰不重叠。显然这需要 <span class="math inline">\(|\omega_1 - \omega_2|\)</span> 足够大。根据已知的主峰宽度，我们有：</p>
<p><span class="math display">\[
|\omega_1 - \omega_2| &gt; \frac{2\pi}{L}
\]</span></p>
<p>也就是说如果数字信号的最小频率间隔为 <span class="math inline">\(\Delta\omega\)</span>，那么为了保证截取后频谱上各个频率峰可分辨，必须要求窗函数宽度 <span class="math inline">\(L\)</span> 不小于 <span class="math inline">\(2\pi / \Delta\omega\)</span>。</p>
<h3 id="dft-的引入和矩阵形式">DFT 的引入和矩阵形式</h3>
<p>现在我们回到求解有限长数字信号傅立叶变换的问题上。我们继续延续上述 DTFT 的思路。不过我们现在只考虑在 <span class="math inline">\(\omega_k = 2k\pi / N\)</span> 处频谱的取值，即频域 <span class="math inline">\([0, 2\pi]\)</span> 区间内的 <span class="math inline">\(N\)</span> 个特征点：</p>
<p><span class="math display">\[
\begin{aligned}
X_L(\omega_k) &amp;= \frac{1}{2\pi} ({\rm DTFT}[x] \otimes {\rm DTFT}[w])(\omega) \\
&amp;= \frac{1}{2\pi} \int_{-\pi}^{\pi} \left(\sum_{m = -\infty}^{+\infty} x(m)e^{-\j\left(\frac{2k\pi}{N} - \mu\right) m}\right)\left(\sum_{n = 0}^{L - 1} e^{-\j\mu n}\right) \d\mu \\
&amp;= \frac{1}{2\pi} \int_{-\pi}^{\pi} \sum_{n = 0}^{L - 1}\sum_{m = -\infty}^{+\infty} x(m)e^{-\j\frac{2km\pi}{N}}e^{-\j\mu (n - m)} \d\mu \\
&amp;= \frac{1}{2\pi} \sum_{n = 0}^{L - 1}\sum_{m = -\infty}^{+\infty} x(m)e^{-\j\frac{2km\pi}{N}} \int_{-\pi}^{\pi} e^{-\j\mu (n - m)} \d\mu \\
&amp;= \sum_{n = 0}^{L - 1} x(n)e^{-\j\frac{2kn\pi}{N}}
\end{aligned}
\]</span></p>
<p>这里最后一个等号是利用指数函数在周期上的积分除非系数为零，否则积分结果均为零，所以最后只有 <span class="math inline">\(m = n\)</span> 的项被保留。</p>
<p>便于表示，我们把 <span class="math inline">\(X_L(\omega_k)\)</span> 简记为 <span class="math inline">\(X(k)\)</span>。</p>
<p>从而我们就可以做到从有限长的数字信号还原出原信号频谱，这个变换就是<strong>离散傅立叶变换（Discrete Fourier Transformation / DFT）</strong>。</p>
<p>我们注意到这样的一点，就是这里有两个参数是可以独立确定的，即窗函数长度 <span class="math inline">\(L\)</span> 和频域特征点数 <span class="math inline">\(N\)</span>。但实际应用中一般都有 <span class="math inline">\(L = N\)</span>，这主要是因为这样计算方便且 <span class="math inline">\(L \neq N\)</span> 的情况均可以还原成 <span class="math inline">\(L = N\)</span> 的情况。</p>
<hr />
<p>为了论证这一点，我们可以从另外一个角度推导 DFT 公式。也就是回归傅里叶分析的本质，而傅里叶分析的本质就是将函数分解成若干个指数函数的线性组合。之前论述过的 FT 用于分解时域无限的连续信号，而 DFT 则会用于分析时域有限的离散信号。</p>
<p>考虑信号 <span class="math inline">\(f\)</span>，我们在区间 <span class="math inline">\([0, 1]\)</span> 上均匀取 <span class="math inline">\(N\)</span> 个样，组成代表这个信号的向量：</p>
<p><span class="math display">\[
\b{x} = \lv
f(0) &amp; f\left(\frac{1}{N}\right) &amp; \cdots &amp; f\left(\frac{N - 1}{N}\right)
\rv
\]</span></p>
<p>同样的，我们需要对作为基的函数 <span class="math inline">\(e^{2\pi\j kt}\)</span> 也在这些点取样，函数 <span class="math inline">\(e^{2\pi\j kt}\)</span> 取到的样为：</p>
<p><span class="math display">\[
\b{e}_k = \lv
\varepsilon_N^0 &amp; \varepsilon_N^k &amp; \cdots &amp; \varepsilon_N^{(N - 1)k}
\rv
\]</span></p>
<p>这里 <span class="math inline">\(\varepsilon_N\)</span> 表示 <span class="math inline">\(N\)</span> 次单位根。</p>
<p>根据周期性，显然得到：</p>
<p><span class="math display">\[
\b{e}_k = \b{e}_{k + N}
\]</span></p>
<p>所以将 <span class="math inline">\(\b{x}\)</span> 拆分为 <span class="math inline">\(\b{e}_k\)</span> 的线性组合的时候只需要考虑一个周期内的 <span class="math inline">\(\b{e}_k\)</span> 即可，也就是说我们假设存在这样的一系列系数 <span class="math inline">\(\b{X} = \lv X(0) &amp; X(1) &amp; \cdots &amp; X(N - 1)\rv\)</span> 满足（这里的系数 <span class="math inline">\(1 / N\)</span> 是为了简化后续的讨论）：</p>
<p><span class="math display">\[
\b{x} = \frac{1}{N}\sum_{k = 0}^{N - 1} X(k)\b{e}_k
\]</span></p>
<p>如果我们定义这样的一个矩阵：</p>
<p><span class="math display">\[
F_N = \lv \b{e}_0 &amp; \b{e}_1 &amp; \cdots &amp; \b{e}_{N - 1}\rv
\]</span></p>
<p>上述等式实际上就是 <span class="math inline">\(N\b{x} = F_N\b{x}\)</span>。所以要求解系数向量，其实就等价于求解 <span class="math inline">\(F_N\)</span> 的逆矩阵。</p>
<p>考虑这样的数学关系（这里 <span class="math inline">\(\cdot^H\)</span> 表示 Hermit 转置，即共轭转置）：</p>
<p><span class="math display">\[
\b{e}_i^H\b{e}_j = \sum_{k = 0}^{N - 1} (\varepsilon_N^{ik})^*\varepsilon_N^{jk} = \sum_{k = 0}^{N - 1} \varepsilon_N^{(j - i)k} = \begin{cases}
N &amp; i = j \\
\dfrac{1 - \varepsilon_N^{N(j - i)}}{1 - \varepsilon_N^{j - i}} = 0 &amp; i \neq j
\end{cases}
\]</span></p>
<p>这说明 <span class="math inline">\(\dfrac{F_N}{\sqrt{N}}\)</span> 是酉矩阵。即有：</p>
<p><span class="math display">\[
F_N^{-1} = \frac{1}{\sqrt{N}}\left(\frac{F_N}{\sqrt{N}}\right)^{-1} = \frac{1}{\sqrt{N}}\left(\frac{F_N}{\sqrt{N}}\right)^H = \frac{1}{N} (F_N^T)^* = \frac{1}{N} F_N^*
\]</span></p>
<p>所以系数向量就可以表示为：</p>
<p><span class="math display">\[
\b{X} = F_N^* \b{x}
\]</span></p>
<p>对比会发现这个和我们之前推导出来的 DFT 公式是一致的。也就是说我们得到了 <span class="math inline">\(L = N\)</span> 时的 DFT 向量表示。</p>
<hr />
<p>回到先前的问题，我们思考为何 <span class="math inline">\(L \neq N\)</span> 的情况都可以化归为 <span class="math inline">\(L = N\)</span>。</p>
<p>如果 <span class="math inline">\(L &lt; N\)</span>，也就是说窗宽（序列长度）不足，我们可以在序列 <span class="math inline">\(x(n)\)</span> 末尾补零至 <span class="math inline">\(N\)</span> 位得到 <span class="math inline">\(x_D(n)\)</span>，以此计算 DFT：</p>
<p><span class="math display">\[
X_D(k) = \sum_{n = 0}^{N - 1} x_D(n)e^{-\j\frac{2\pi nk}{N}} = \sum_{n = 0}^{L - 1} x_D(n)e^{-\j\frac{2\pi nk}{N}} = \sum_{n = 0}^{L - 1} x(n)e^{-\j\frac{2\pi nk}{N}} = X(k)
\]</span></p>
<p>可见通过补零，补零序列的 DFT 就是原序列的 DFT。所以完全可以认为 <span class="math inline">\(L &lt; N\)</span> 时应化归为 <span class="math inline">\(L = N\)</span>。</p>
<p>而在 <span class="math inline">\(L &gt; N\)</span> 的时候，我们需要使用<strong>回绕</strong>。即定义这样的新序列：</p>
<p><span class="math display">\[
\tilde{x}(n) = \sum_{k \mathop{\equiv} n \mathop{\rm mod} N} x(k)
\]</span></p>
<p>直观而言，就是将原先的过长序列拆为若干长度为 <span class="math inline">\(N\)</span> 的短序列后对齐相加。为了解释此时依然可以化归，我们使用先前得到矩阵形式的 DFT 即可说明。首先我们取 <span class="math inline">\(F_N\)</span>，这里 <span class="math inline">\(N\)</span> 即 DFT 点数，<span class="math inline">\(F_N\)</span> 定义与之前相同。取新矩阵：</p>
<p><span class="math display">\[
F_{N\times L} = \lv F_N &amp; F_N &amp; \cdots \rv
\]</span></p>
<p>即使用 <span class="math inline">\(F_N\)</span> 的列按顺序拼接出一个 <span class="math inline">\(N\)</span> 行 <span class="math inline">\(L\)</span> 列的新矩阵，那么：</p>
<p><span class="math display">\[
{\rm DFT}[x](k) = F_{N\times L}\b{x} = (F_N\lv I_N &amp; I_N &amp; \cdots \rv)\b{x} = F_N\tilde{\b{x}} = {\rm DFT}[\tilde{x}](k)
\]</span></p>
<p>所以回绕序列和原序列具有相同的 DFT。</p>
<p>基于上述讨论，考虑到 <span class="math inline">\(L\)</span> 一般而言是原信号的长度，是一个不能修改的量。而 DFT 的点数 <span class="math inline">\(N\)</span> 则是计算过程中自由选取的参数，是可以随意更改的。为了方便，一般而言直接选定 <span class="math inline">\(N = L\)</span> 以方便计算。</p>
<h3 id="dft-的性质">DFT 的性质</h3>
<p>实际上我们可以发现 DFT 就是对 DTFT 频域一个周期内的取样，即时域从无限变为有限的时候，频域就会变成原先频域一个周期内的取样。这一点对连续信号也是成立的，时域从无限（周期无限）变为有限（有限周期信号）的时候，频域也会变为原先频域一个周期内的取样（周期信号的频域是离散的）。</p>
<p>现在考虑实序列的 DFT，实际上我们考虑 DTFT 即可。令实序列 <span class="math inline">\(x(n)\)</span> 的 DTFT 为 <span class="math inline">\(X(\omega)\)</span>。根据 DTFT 定义：</p>
<p><span class="math display">\[
X(\omega) = \sum_{n = -\infty}^{+\infty} x(n)e^{-\j\omega n}
\]</span></p>
<p>显然：</p>
<p><span class="math display">\[
X(-\omega) = X^*(\omega)
\]</span></p>
<p>另外一个相当重要的性质是：</p>
<p><span class="math display">\[
X(\omega) = X^*(2\pi - \omega)
\]</span></p>
<p>这说明了在周期 <span class="math inline">\([0, 2\pi]\)</span> 上，实序列的 DTFT 和自身共轭对称。这个性质的证明也是简单的：</p>
<p><span class="math display">\[
\begin{aligned}
X(2\pi - \omega) = \sum_{n = -\infty}^{+\infty} x(n)e^{-\j(2\pi - \omega) n} = \sum_{n = -\infty}^{+\infty} x(n)e^{\j\omega n} = X^*(\omega)
\end{aligned}
\]</span></p>
<p>这个性质反映在 DFT 上就是，实序列的偶数点 DFT 序列自身和自身共轭对称。即长度为 <span class="math inline">\(2N\)</span> 的实序列 <span class="math inline">\(x\)</span> 的 DFT 序列 <span class="math inline">\(X\)</span> 满足：</p>
<p><span class="math display">\[
X(N + k) = X^*(N - k)
\]</span></p>
<hr />
<p>DFT 的其他性质和 FT 类似。比如 DFT 是线性的，和共轭及反褶的关系也和 FT 一致，其余类似时域平移、频域平移等性质则自行推导。</p>
<p><code>TODO</code></p>
<h3 id="fft-算法">FFT 算法</h3>
<p>直接计算 <span class="math inline">\(N\)</span> 点 DFT 的时间复杂度为 <span class="math inline">\(O(n^2)\)</span>，但是考虑到 <span class="math inline">\(F_N\)</span> 矩阵的优良性质，应该具有更快速的算法。有一种思路是使用分治，考虑下述数学事实，这里 <span class="math inline">\(X\)</span> 为 <span class="math inline">\(x\)</span> 的 <span class="math inline">\(N\)</span> 点 DFT 序列，<span class="math inline">\(x\)</span> 长度为 <span class="math inline">\(N\)</span>，不妨 <span class="math inline">\(N\)</span> 是偶数：</p>
<p><span class="math display">\[
\begin{aligned}
{\rm DFT}_{n, k}[x(n)](k) &amp;= \sum_{n = 0}^{N - 1} x(n)e^{-\j\frac{2\pi nk}{N}} \\
&amp;= \sum_{r = 0}^{N / 2 - 1} x(2r)e^{-\j\frac{2\pi rk}{N / 2}} + \sum_{r = 0}^{N / 2 - 1} x(2r + 1)e^{-\j\frac{2\pi(r + 1 / 2)k}{N / 2}} \\
&amp;= \sum_{r = 0}^{N / 2 - 1} x(2r)e^{-\j\frac{2\pi rk}{N / 2}} + e^{-\j\frac{2\pi k}{N}}\sum_{r = 0}^{N / 2 - 1} x(2r + 1)e^{-\j\frac{2\pi rk}{N / 2}} \\
&amp;= {\rm DFT}_{n, k}[x(2n)](k) + e^{-\j\frac{2\pi k}{N}}{\rm DFT}_{n, k}[x(2n + 1)](k)
\end{aligned}
\]</span></p>
<p>也就是说，将原序列按照奇偶拆为两个序列，分别作 DFT 后再合并即得到原序列的 DFT。按此分治算法即可得到 <span class="math inline">\(O(n\log n)\)</span> 的 FFT 算法。</p>
<h1 id="laplace-变换与-z-变换">Laplace 变换与 Z 变换</h1>
<p>首先给出两个感性认识，Laplace 变换是拓展的 Fourier 变换，Z 变换是拓展的离散时间 Fourier 变换。</p>
<p>Fourier 变换显然要求连续信号平方可积，但是对于平方积分发散的信号，其进行 FT 后是不收敛的。最简单的让信号 <span class="math inline">\(f\)</span> 平方积分收敛的方式是乘以一个指数衰减 <span class="math inline">\(e^{-\sigma t}(\sigma \in \mathbb R)\)</span>。感性理解就是，大部分信号总是可以用指数信号迫敛的。</p>
<p>此时我们对迫敛后的信号进行 Fourier 变换：</p>
<p><span class="math display">\[
\mathcal{F}_{t, \omega}[f(t)e^{-\sigma t}] = \int_{-\infty}^{+\infty} f(t)e^{-\sigma t}e^{-\j\omega t} \d t = \int_{-\infty}^{+\infty} f(t)e^{-(\sigma + \j\omega) t} \d t
\]</span></p>
<p>此时考虑到 <span class="math inline">\(\sigma\)</span> 的不确定性和 <span class="math inline">\(\omega\)</span> 的任意性，我们取 <span class="math inline">\(s := \sigma + \j\omega \in \mathbb C\)</span>，定义新的变换：</p>
<p><span class="math display">\[
\mathcal{L}[f](s) := \int_{-\infty}^{+\infty} f(t)e^{-st} \d t
\]</span></p>
<p>这就是 Laplace 变换，其为拓展后的 Fourier 变换。Laplace 变换中 <span class="math inline">\(s\)</span> 可以取全复数集，而如果沿用 <span class="math inline">\(\omega\)</span> 是角频率的物理意义，Laplace 变换本质上引入了复频率空间。而如果一个信号 Laplace 变换后的复频率空间的虚轴上全收敛，就说明其 Fourier 变换收敛，此时其频域就是负频率空间虚轴截面。</p>
<hr />
<p>而同样的，DTFT 要求序列之模求和收敛。如果不收敛，我们同样模仿 Laplace 变换的引入，将序列乘以一个指数衰减 <span class="math inline">\(a^{-n}(a &gt; 0)\)</span>，对此时的序列进行 DTFT：</p>
<p><span class="math display">\[
{\rm DTFT}_{n, \omega}[x(n)a^{-n}] = \sum_{n = -\infty}^{+\infty} x(n)a^{-n}e^{-\j\omega n} = \sum_{n = -\infty}^{+\infty} x(n)(ae^{\j\omega})^{-n}
\]</span></p>
<p>同样发现 <span class="math inline">\(z = ae^{\j\omega}\)</span> 取遍全复平面，则不妨定义新变换：</p>
<p><span class="math display">\[
\mathcal{Z}[x](z) := \sum_{n = -\infty}^{+\infty} x(n)z^{-n}
\]</span></p>
<p>此时类似的，Z 变换将变换结果拓展到了整个复平面上。但是和 Laplace 变换后原先 FT 的残余是虚轴不同，Z 变换下 DTFT 的残余是单位圆（即 <span class="math inline">\(a = 1\)</span>）。也就是说，如果 Z 变换下，单位圆上处处收敛，就说明原先信号 DTFT 收敛，此时信号的 DTFT 后频域的一个周期就是单位圆截面。</p>
<hr />
<p>上述讲解的 ZT 是双边 ZT，事实上在应用的时候可能会使用单边 ZT。比如左边 ZT 的表达为：</p>
<p><span class="math display">\[
\mathcal{Z}_L[x](z) := \sum_{n = -\infty}^{0} x(n)z^{-n}
\]</span></p>
<p>右边 ZT 的表达为：</p>
<p><span class="math display">\[
\mathcal{Z}_R[x](z) := \sum_{n = 0}^{+\infty} x(n)z^{-n}
\]</span></p>
<p>一般而言，单边 ZT 中使用最多的是右边 ZT，所以在不引起混淆的时候，可以用单边 ZT 代表右边 ZT。</p>
<h2 id="z-变换的收敛域">Z 变换的收敛域</h2>
<p>Z 变换实际上是一个复平面上的幂级数，所以其具有收敛域（ROC）。</p>
<p>思考两个单边 ZT 的 ROC，这里考虑两个特殊点，即复平面零点 <span class="math inline">\(0\)</span> 与复平面无穷点 <span class="math inline">\(\infty\)</span>。显然左边 ZT 中 <span class="math inline">\(z = 0\)</span> 的时候幂级数收敛至 <span class="math inline">\(0\)</span>，而右边 ZT 中 <span class="math inline">\(z = \infty\)</span> 的时候幂级数收敛至 <span class="math inline">\(0\)</span>。所以左边 ZT 的 ROC 永远包含零点，而右边 ZT 的 ROC 永远包含无穷远点。</p>
<p>此外，考虑这样显然的结论（Abel 定理）。如果幂级数 <span class="math inline">\(\sum_{n = 0}^{+\infty} x(n)z^n\)</span> 在 <span class="math inline">\(z_0\)</span> 处绝对收敛，那么该级数在 <span class="math inline">\(|z| &lt; z_0\)</span> 处均收敛。如果在 <span class="math inline">\(z_0\)</span> 处发散，那么该级数在 <span class="math inline">\(|z| &gt; z_0\)</span> 处发散。那么左边 ZT 的 ROC 的表现为一个圆的内部，右边 ZT 的 ROC 的表现为一个圆的外部。</p>
<p>考虑双边 ZT，其显然可以认为是一个左边 ZT 和右边 ZT 的和，所以其 ROC 只能为两个单边 ZT 的交。考虑到左边 ZT 的 ROC 为圆的内部，右边 ZT 的 ROC 为圆的外部，所以双边 ZT 的 ROC 可以为空集，也可以为某一个圆环。</p>
<hr />
<p>我们需要指出的是，对于同一个 ZT 的结果，只有在指定 ROC 之后才能唯一确定 IZT 的结果。也就是说，必须要指定 ZT 结果和相应的 ROC 才能确定变换前的序列。</p>
<p>考虑某一个 ZT 的结果，假设其极点构成有限集 <span class="math inline">\(\{z_1, z_2, \cdots, z_n\}(|z_i| \leq |z_{i + 1}|)\)</span>。数学上可以证明，所有可能的 ROC 仅可以是 <span class="math inline">\(\{z: |z_i| \leq |z| \leq |z_{i + 1}|\}(0 \leq i \leq n)\)</span>，这里 <span class="math inline">\(z_0 = 0, z_{n + 1} = \infty\)</span>。</p>
<h2 id="z-变换的性质简介">Z 变换的性质简介</h2>
<p>首先简单介绍一些特殊信号的 Z 变换。先考虑单位阶跃信号：</p>
<p><span class="math display">\[
\delta(n) := \begin{cases}
1 &amp; n = 0 \\
0 &amp; n \neq 0
\end{cases}
\Rightarrow \mathcal{Z}[\delta] = 1, {\rm ROC} = \{z: 0 \leq |z| \leq +\infty\}
\]</span></p>
<p>随后是单位阶跃信号：</p>
<p><span class="math display">\[
u(n) := \begin{cases}
1 &amp; n \geq 0 \\
0 &amp; n &lt; 0
\end{cases}
\Rightarrow \mathcal{Z}[u](z) = \frac{1}{1 - z^{-1}}, {\rm ROC} = \{z: |z| &gt; 1\}
\]</span></p>
<p>然后是矩形窗信号：</p>
<p><span class="math display">\[
G_N(n) := \begin{cases}
1 &amp; 0 \leq n &lt; N \\
0 &amp; {\rm otherwise}
\end{cases}
\Rightarrow \mathcal{Z}[G_N](z) = \frac{1 - z^{-N}}{1 - z^{-1}}, {\rm ROC} = \{z: 0 &lt; |z| \leq +\infty\}
\]</span></p>
<p>然后是指数序列的右侧：</p>
<p><span class="math display">\[
\mathcal{Z}_{n, z}[a^nu(n)](z) = \frac{1}{1 - az^{-1}}, {\rm ROC} = \{z: |z| &gt; |a|\}
\]</span></p>
<p>最后是指数序列的左侧：</p>
<p><span class="math display">\[
\mathcal{Z}_{n, z}[-a^nu(-n - 1)](z) = \begin{cases}
\dfrac{1}{1 - az^{-1}} &amp; 0 &lt; |z| &lt; |a| \\
0 &amp; z = 0
\end{cases}, {\rm ROC} = \{z: |z| &lt; |a|\}
\]</span></p>
<hr />
<p>接下来的讨论默认 <span class="math inline">\(X := \mathcal{Z}[x]\)</span>。</p>
<p>ZT 显然是线性的。其时域平移对复频域影响为：</p>
<p><span class="math display">\[
\mathcal{Z}_{n, z}[x(n + m)] = z^mX(z)
\]</span></p>
<h1 id="数字滤波器">数字滤波器</h1>
<p>滤波器我们已经讲解过很多次，但是在理解了离散信号处理的基础上，我们需要说明一下<strong>数字滤波器</strong>和<strong>模拟滤波器</strong>的差别。不过我们首先建立这样的认同，即滤波器可以使用其单位冲激响应唯一代表。</p>
<p>我们在采样部分一直采用的是模拟滤波器的概念，其工作在连续的时域上，具有连续的单位冲激响应，其接受的激励也是连续的模拟信号。从频域上观察其单位冲激响应，显然其单位冲激响应的频域并非周期（这个和非周期信号的频域连续类似，根据时域频域的对偶，时域上连续的单位冲激响应在频域上就不周期）。比如说理想（模拟）低通滤波器在频域上就是一个低频区域的矩形窗，其余部分频域均为零。</p>
<p>接下来我们需要引入新的概念，即数字滤波器。在具体讲解之前，我们先根据我们对模拟滤波器的了解给出一些感性理解。</p>
<ul>
<li><p>数字滤波器是工作在离散时域上的，接受离散激励，具有离散的单位冲激响应</p></li>
<li><p>频域上，其单位冲激响应是周期的，且周期是该滤波器单位冲激响应的采样频率</p></li>
</ul>
<h2 id="数字滤波器的差分方程">数字滤波器的差分方程</h2>
<p>约定这样的记号，<span class="math inline">\(x(n)\)</span> 表示数字滤波器接收到的激励，<span class="math inline">\(y(n)\)</span> 表示数字滤波器作出的响应。</p>
<p>首先我们说明，我们要求滤波器是线性时不变因果系统。线性系统定义先前已经阐述，时不变的含义是无论何时系统接收到相同的激励，其永远给出相同的响应。因果系统则要求系统响应仅依赖于现在及先前的激励，而不依赖于未来未知的激励。所有实际系统都是因果系统。</p>
<p>有时我们要求系统稳定性，即对于任何有界激励都给出有界响应。</p>
<p>基于此，我们考虑数字滤波器。根据其线性时不变及因果性，我们给出数字滤波器需要满足的一般规律，这一般称为滤波器的<strong>差分方程</strong>：</p>
<p><span class="math display">\[
\sum_{k = 0}^N b_ky(n - k) = \sum_{r = 0}^M a_rx(n - r)
\]</span></p>
<p>这里 <span class="math inline">\(N\)</span> 表示滤波器需要的过去输出的个数，一般也称为滤波器的<strong>阶数</strong>。</p>
<p>我们考虑该滤波器的单位冲激响应。如果 <span class="math inline">\(N = 1\)</span>，我们可以注意到在足够大的 <span class="math inline">\(n\)</span> 下，<span class="math inline">\(x(n - r) = \delta(n - r)\)</span> 总是会全部变为零，此时响应为零。也就是说在有限长时间内，滤波器响应总会衰变为零，此时的滤波器称为<strong>有限脉冲响应滤波器</strong>，简称 <strong>FIR 滤波器</strong>。</p>
<p>对应的，如果 <span class="math inline">\(N &gt; 1\)</span>，由于每一个响应都依赖于先前的非零响应，其响应始终不消失，该滤波器则为<strong>无限脉冲响应滤波器</strong>，简称 <strong>IIR 滤波器</strong>。</p>
<h2 id="数字滤波器的流图">数字滤波器的流图</h2>
<p>流图是系统的一种表示方式，没有很深刻的理论需要讲解，这里不赘述。该课程基本仅要求掌握根据差分方程绘制滤波器的 I 型直接实现和 II 型直接实现，根据 PPT 即可很快掌握。</p>
<h2 id="数字滤波器的频率响应">数字滤波器的频率响应</h2>
<p>假设数字滤波器具有单位冲激响应 <span class="math inline">\(h(n)\)</span>，我们先前证明过：</p>
<p><span class="math display">\[
y(n) = (x * h)(n) = \sum_{k = -\infty}^{+\infty} h(k)x(n - k)
\]</span></p>
<p>考虑对两边同时 DTFT，如果将 <span class="math inline">\(x, y, h\)</span> 的 DTFT 分别记作 <span class="math inline">\(X, Y, H\)</span>，则显然有 <span class="math inline">\(Y = XH\)</span>。定义：</p>
<p><span class="math display">\[
H(\omega) = \frac{Y(\omega)}{X(\omega)}
\]</span></p>
<p>为数字滤波器的<strong>频率响应</strong>，频率响应是单位冲激响应的 DTFT。根据 DTFT 可逆，我们实际上也可以说明频率响应唯一代表了一个数字滤波器。然而差分方程的系数理论上也唯一代表了一个数字滤波器。实际上，我们可以使用差分方程系数推导频率响应，即这两者实际等价。</p>
<p>对差分方程两边 DTFT：</p>
<p><span class="math display">\[
\begin{aligned}
&amp; \sum_{k = 0}^N b_ky(n - k) = \sum_{r = 0}^M a_rx(n - r) \\
\iff&amp; {\rm DTFT}_{n, \omega}\left[\sum_{k = 0}^N b_ky(n - k)\right] = {\rm DTFT}_{n, \omega}\left[\sum_{r = 0}^M a_rx(n - r)\right] \\
\iff&amp; \sum_{k = 0}^N b_k{\rm DTFT}_{n, \omega}[y(n - k)] = \sum_{r = 0}^M a_r{\rm DTFT}_{n, \omega}[x(n - r)] \\
\iff&amp; Y(\omega)\sum_{k = 0}^N b_ke^{-\j k\omega} = X(\omega)\sum_{r = 0}^M a_re^{-\j r\omega} \\
\iff&amp; H(\omega) = \frac{Y(\omega)}{X(\omega)} = \frac{\sum_{r = 0}^M a_re^{-\j r\omega}}{\sum_{k = 0}^N b_ke^{-\j k\omega}}
\end{aligned}
\]</span></p>
<p>频率响应可以用来断定滤波器的通阻性质。比如说具有下述差分方程的数字滤波器：</p>
<p><span class="math display">\[
y(n) = ay(n - 1) + x(n)
\]</span></p>
<p>计算其频率响应：</p>
<p><span class="math display">\[
H(\omega) = \frac{\sum_{r = 0}^M a_re^{-\j r\omega}}{\sum_{k = 0}^N b_ke^{-\j k\omega}} = \frac{e^{\j\omega}}{e^{\j\omega} - a} = \frac{1}{1 - a\cos\omega + \j a\sin\omega}
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
|H(\omega)| = \frac{1}{\sqrt{1 + a^2 - 2a\cos\omega}}
\]</span></p>
<p>其在区间 <span class="math inline">\([-\pi, \pi]\)</span> 上的图像为：</p>
<p><img src="/uploads/note-of-dsp/4.png" /></p>
<p>其对低频段给出高响应，所以该数字滤波器为低通滤波器。</p>
<div class="note info"><p>显然可以看出频率响应作为单位冲激响应的 DTFT，其是以 <span class="math inline">\(2\pi\)</span> 为周期的函数。所以我们只需要关注一个周期内的函数表现即可，一般选用 <span class="math inline">\([-\pi, \pi]\)</span>。</p>
</div>
<h2 id="数字滤波器的传递函数与零极点图">数字滤波器的传递函数与零极点图</h2>
<p>我们现在研究系统的稳定性，我们给出下述定理。线性时不变系统稳定的充分必要条件为其单位冲激响应 <span class="math inline">\(h(n)\)</span> 满足：</p>
<p><span class="math display">\[
\sum_{k = -\infty}^{+\infty} |h(k)| &lt; +\infty
\]</span></p>
<p>如果单位冲激响应的模之和收敛，假设其收敛为 <span class="math inline">\(A &lt; +\infty\)</span>，考虑一个有界输入 <span class="math inline">\(x(n)\)</span>，其满足 <span class="math inline">\(|x(n)| &lt; B &lt; +\infty\)</span>。那么系统的响应为：</p>
<p><span class="math display">\[
|y(n)| = \left|\sum_{k = -\infty}^{+\infty} h(k)x(n - k)\right| \leq \sum_{k = -\infty}^{+\infty} |h(k)|\cdot|x(n - k)| &lt; B\sum_{k = -\infty}^{+\infty} h(k) = AB
\]</span></p>
<p>得到了系统稳定的结论。</p>
<p>如果单位冲激响应的模之和发散，考虑这样的激励：</p>
<p><span class="math display">\[
x(n) = {\rm sgn}(h(-n))
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
|y(0)| = \left|\sum_{k = -\infty}^{+\infty} h(k)x(-k)\right| = \left|\sum_{k = -\infty}^{+\infty} h(k){\rm sgn}(h(k))\right| = \left|\sum_{k = -\infty}^{+\infty} |h(k)|\right| = +\infty
\]</span></p>
<p>得到了系统不稳定的结论。</p>
<hr />
<p>这样思考，如果系统的单位冲激响应之模的和不收敛，就意味着我们不能对其进行 DTFT。而我们先前已经介绍过作为 DTFT 拓展的 Z 变换，不妨对用 ZT 代替 DTFT，我们对差分方程两边取 ZT。如果假设 <span class="math inline">\(x, y, h\)</span> 的 ZT 分别为 <span class="math inline">\(X, Y, H\)</span>，仿照之前推导频率响应的方法，不难说明：</p>
<p><span class="math display">\[
H(z) = \frac{Y(z)}{X(z)} = \frac{\sum_{r = 0}^M a_rz^{-r}}{\sum_{k = 0}^N b_kz^{-k}}
\]</span></p>
<p>此时的 <span class="math inline">\(H\)</span> 称为<strong>传递函数</strong>，其为单位冲激响应的 ZT。如果滤波器的传递函数的 ROC 包含了单位圆，意味着其单位冲激响应可以进行 DTFT，也意味着单位冲激响应模之和收敛，这就意味着系统稳定。</p>
<p>从这个角度观察，一个数字滤波器的稳定性等价于其传递函数的 ROC 包含单位圆。</p>
<p>现在我们考虑因果性。显然一个因果数字滤波器的单位冲激响应必然在负数上取零，所以其 ZT 最终退化为右边 ZT，这意味着其 ROC 必然是一个圆的外部。换言之，非因果数字滤波器的单位冲激响应会在负数上取非零，非退化的双边 ZT 的 ROC 不包含无穷远点。从这个角度观察，数字滤波器的因果性等价于 ROC 为某一圆的外部，包含无穷远点。</p>
<hr />
<p>现在考虑 <span class="math inline">\(H(z)\)</span> 的形式，显然其是一个有理分式，其分子为 <span class="math inline">\(z^{-1}\)</span> 的 <span class="math inline">\(M\)</span> 次多项式，分母则是 <span class="math inline">\(N\)</span> 次。那么根据代数基本定理，<span class="math inline">\(H(z)\)</span> 具有 <span class="math inline">\(M\)</span> 个零点和 <span class="math inline">\(N\)</span> 个极点。另外，<span class="math inline">\(0, \infty\)</span> 也可能是零点或者极点。将这些零点和极点绘制在复平面上，则得到了传递函数的零极点图。</p>
<h2 id="由传递函数推算单位冲激响应">由传递函数推算单位冲激响应</h2>
<p>通过传递函数可以推算数字滤波器的差分方程，之后我们可以通过令输入为单位冲激信号的方式求解单位冲激响应。但实际上，我们考虑到传递函数是单位冲激响应的 ZT，而我们已经知道，在给定 ZT 结果和 ROC 之后可以唯一确定 IZT 的结果，而 ROC 可以通过极点来确定。</p>
<h1 id="数模转换">数模转换</h1>
<p>之前讲解的采样与信号复原实际上就已经简单引入了数模转换这个话题。但是当时我们并没有讲解如何处理数字信号（时域离散信号），所以完全采用了模拟信号的视角。现在我们希望能够在理解了数字信号处理的基础上对数模转换进行更深刻的理解。</p>
<p>这里需要提一下，模拟滤波器一般而言成本高，截止频率低的模拟低通滤波器成本则相当高。这一因素决定了实际信号处理往往会<strong>使用高质量的数字信号处理来弥补低成本的模拟抗混叠滤波器</strong>。</p>
<h2 id="抗混叠滤波器">抗混叠滤波器</h2>
<p>我们先前提到过，如果取样频率达不到信号的高频截止频率的两倍则会发生频谱混叠导致无法通过理想低通滤波还原信号。然而现实中的信号的高频截止频率可以很高也可以很低，无法通过统一的采样频率进行采样。面对这种情况，有一种解决方式是引入<strong>抗混叠滤波器</strong>，其作用是滤去信号中过高频率的部分，这样就可以保证后续取样一定不会发生混叠。</p>
<p>抗混叠滤波器是低通滤波器，但是不一定是理想的矩形窗低通滤波器，其频谱表现一般为从低频到高频逐步下降，而非理想矩形窗滤波器的突变。这样做的原因是尽可能保留原信号的所有信息：</p>
<p><img src="/uploads/note-of-dsp/3.png" /></p>
<p>上述图中灰色实线是某信号的频谱，红色虚线是抗混叠滤波器的频谱。</p>
<p>抗混叠滤波器需要和后续的采样器配合使用以保证频谱不混叠。如果后续使用的采样频率过低，则要求抗混叠滤波器的频谱在较低的频段就需要降低到零，这对滤波器设计提出了较高要求，实现成本高。所以即使有抗混叠滤波器，采样频率也不能很低。</p>
<h2 id="过采样与二次采样">过采样与二次采样</h2>
<p>过采样与二次采样就是一种使用高质量数字信号处理弥补低成本模拟抗混叠滤波器的方法。我们考虑这样的实际场景，即需要对某模拟信号以 <span class="math inline">\(2\omega\)</span> 频率进行采样，该信号的重要信息分布于频谱的 <span class="math inline">\([0, \omega)\)</span> 频段。</p>
<p>按照先抗混叠再直接 <span class="math inline">\(2\omega\)</span> 采样的思路，模拟抗混叠滤波器的截止频率必须至多为 <span class="math inline">\(\omega\)</span>，否则会发生频谱混叠，但是这会导致成本过高。</p>
<p>有一种这样的思路，也就是使用很高的采样频率，降低对模拟抗混叠滤波器的截止频率要求，最后再二次取样，将实际的采样频率降回需求值。</p>
<p>比如说我们可以实际使用 <span class="math inline">\(8\omega\)</span> 的采样频率，此时模拟抗混叠滤波器的最高截止频率就放松到了 <span class="math inline">\(4\omega\)</span>。经过模拟抗混叠滤波器和 <span class="math inline">\(8\omega\)</span> 采样后，信号的频谱的 <span class="math inline">\([\omega + 8k\omega, 7\omega + 8k\omega](k \in \mathbb Z)\)</span> 频段实际上混杂着不需要的高频信息，需要过滤。但是注意，此时信号已经是数字信号，所以可以使用数字滤波器处理。</p>
<p>此时使用截止频率为 <span class="math inline">\(\omega\)</span> 的数字滤波器过滤出原信号在低频段的重要信息，再使用 <span class="math inline">\(2\omega\)</span> 频率取样。这样，我们就既做到了抗混叠，也做到了过滤不必要的高频信息。</p>
<p>这里使用远高于二倍高频截止频率的采样频率进行采样的方式称为<strong>过采样</strong>，而二次滤波之后进行的第二次采样就是<strong>二次采样</strong>。这样的方法可以放松对模拟滤波器的要求以降低成本。</p>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>Next.js 框架摸索实录</title>
    <url>/2022/11/24/note-of-next/</url>
    <content><![CDATA[<p>在出软工小作业的时候遇到了 React Router 配置和跨域问题，虽然这两个都不是什么大问题，我也不是不会解决，但是要是出到作业里面，势必会导致我要写好多文档还要写很多讲解。这个时候 yfgg 告诉我 Next.js 框架好之又好，昨天稍微试了一下感觉确实不错，所以就吃了安利迁移到了 Next.js 框架。但是今天接着写的时候，还是发现不少细节是需要注意的，这里就当备忘了。</p>
<span id="more"></span>
<h1 id="初始配置">初始配置</h1>
<p>由于 Next.js 自己带了不少初始配置，所以加东西的时候不一定每个都需要自己从头再来，完全可以用官方模板。</p>
<p>我出的小作业采用 Next.js + TypeScript + ESLint + Jest，这一整套模板也正在编写，到时候可以开放给同学们直接下载。</p>
<h1 id="csr-还是-ssr">CSR 还是 SSR</h1>
<p>Next.js 框架的一大优势就在 SSR。然而说实话我自己也没有特别明白 SSR 之类的概念，所以昨晚花了点时间学了一下。</p>
<p>最早期的前后端耦合应用实际上就采用 SSR，即 <strong>S</strong>erver <strong>S</strong>ide <strong>R</strong>ender，服务端渲染。当时严格而言就没有前端这个概念，服务器直接将渲染好的 HTML 扔给浏览器就结束了。</p>
<p>而随着前后端分离开发概念的出现，Vue、React 等框架逐渐采用 CSR，即 <strong>C</strong>lient <strong>S</strong>ide <strong>R</strong>ender，客户端渲染。CSR 中，数据交互大致可以描述为：</p>
<ul>
<li>浏览器向前端服务器请求模板 HTML（或者说空缺关键数据的 HTML），这些 HTML 中携带获取关键数据的脚本</li>
<li>浏览器渲染模板 HTML，执行获取数据的脚本，向后端服务器请求关键数据</li>
<li>浏览器获得关键数据后，调整 DOM 展示最终页面</li>
</ul>
<p>CSR 比较大的问题有两点：</p>
<ul>
<li>如果后端服务器响应慢或者数据量大，模板 HTML 在页面上留存时间长，表现为 Loading 界面或者白屏，严重削弱用户体验</li>
<li>爬虫难以处理这类网页，对搜索引擎的优化（<strong>S</strong>earch <strong>E</strong>ngine <strong>O</strong>pimization，简称 SEO）困难，导致网页宣传效果不佳</li>
</ul>
<p>但就开发环节而言，开发需要不断处理白屏问题，不断在组件中设置 <code>refreshing</code> 状态实际上比较浪费开发时间。</p>
<p>而现代优化过的 SSR 则相应做出了部分解决，其基本思路为：</p>
<ul>
<li>浏览器向前端服务器请求页面</li>
<li>前端服务器向后端服务器请求关键数据，获取数据后根据自己已有的模板 HTML 渲染出完整 HTML 发回浏览器</li>
<li>浏览器直接渲染出完整页面</li>
</ul>
<p>首先，浏览器不会收到缺失数据的 HTML，这样就从根源上解决白屏问题。进一步，由于服务端的算力和内网传输速度一般高于客户端算力和外网传输速度，所以渲染出最终 HTML 的时间相应缩短。另外，由于客户端能够直接得到完整 HTML，所以 SEO 也是简单的。</p>
<p>然而 SSR 显然也是有问题的：</p>
<ul>
<li>服务器端压力极大，对于多并发情况处理无力</li>
<li>针对每个用户都需要重新渲染完整 HTML，重复计算问题严重</li>
</ul>
<p>其中第二个问题实际上比较重要，如果某个网页和客户端具体信息无关，也就是说任何客户端都收到相同内容，那么这种 SSR 实际上不如 CSR。CSR 可以通过 CDN 缓存模板 HTML，而 SSR 此时对每个用户的请求，每次都需要完整渲染 HTML。</p>
<p>所以这也是 SSG，<strong>S</strong>erver <strong>S</strong>ide <strong>G</strong>eneration，服务端生成提出的契机。针对与客户端无关的、更新速度慢的页面，SSG 会在构建时直接生成页面并缓存在前端服务器，浏览器发出请求后会直接返回缓存页面，从而解决上述问题。</p>
<p>显然，CSR、SSR、SSG 各有利弊。就目前你清的教学、科协各个成员的掌握情况看，CSR 系列的开发明显占优势。另外考虑到软工课程不少类似于后台管理页面等更重视数据时效性、用户交互体验的应用，CSR 更应当重点讲解。</p>
<p>然而 SSR 不能因此完全废弃不讲，因为其针对用户无关页面的白屏加载问题绝对是重要的一种解决方案。SSR 依然是企业官网、个人博客等网页的首选。</p>
<p>所以目前依然是将传统的 CSR 布置为作业，然后让他们强制将 API 睡眠，体验白屏问题后让他们叙述 SSR 的好处，用此作为思考题。</p>
<h1 id="useeffect-重复调用问题"><code>useEffect</code> 重复调用问题</h1>
<p>这是一个老问题，说实话也和 Next.js 没有多少关系。如果在 React 中写下述代码：</p>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;useEffect called!&quot;</span>);</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Test page. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>会发现控制台里出现了两次 <code>useEffect called!</code> 的输出。</p>
<p>虽然严格而言不会出现很大的问题，然而由于这种 <code>useEffect</code> 常常用于获取页面的初始数据（CSR 常用手法），这个问题可能导致重复请求后端数据，对于用户鉴权等需求甚至可能是危险的，后端如果不去做相应处理甚至可能打穿后端（我软工还真的差点出锅，然而当时也没在意）。</p>
<p>然后我搜索引擎大作业里面采用了非常丑陋的写法解决了：</p>
<p><img src="/uploads/note-of-next/1.jpeg" /></p>
<p>今天才知道这个是 React 的严格模式的锅。严格模式下，在 dev 条件下 React 会有意重复调用这些钩子来提示可能的危险。</p>
<p>也就是说打穿后端实际上就是 React 告诉你，你这有可能出锅，你自己不处理好不怪我。</p>
<p>当然，release 之后 React 就不会有意重复调用了。</p>
<p>所以解决方式就两种：</p>
<ul>
<li>好好写能够处理并发的代码，React 都告诉你会出事了</li>
<li>关掉严格模式，让 React 闭嘴</li>
</ul>
<p>我选择了后者。</p>
<p>参考：<a href="https://juejin.cn/post/7105652180501135367" class="uri">https://juejin.cn/post/7105652180501135367</a>。</p>
<h1 id="useroute-与注水"><code>useRoute</code> 与注水</h1>
<p>使用动态路由的时候，我按照 React 的开发习惯写了下述代码：</p>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> route = useRouter();</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(route.query.id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use route.query.id to fetch data</span></span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>
<p>令人惊讶的是，这里输出了 <code>undefined</code>。</p>
<p>事实上这是 Next.js 预渲染的锅，原文是这样的：</p>
<div class="note info no-icon"><p>Pages that are statically optimized by <strong>Automatic Static Optimization</strong> will be hydrated without their route parameters provided, i.e <code>query</code> will be an empty object (<code>{}</code>).</p>
<p>After hydration, Next.js will trigger an update to your application to provide the route parameters in the <code>query</code> object.</p>
</div>
<p>简而言之，ASO 是一种预渲染优化，在不获取路由信息的条件下先弄出来一个页面给浏览器，然后再注水（即向 <code>query</code> 注入路由信息）并触发组件更新，也就是说页面获取到路由信息并不是一开始，从而 <code>useEffect(*, [])</code> 是拿不到路由信息的。</p>
<p>了解这一点后，代码就应该写为：</p>
<figure class="highlight typescript"><figcaption><span>TypeScript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> route = useRouter();</span><br><span class="line"><span class="keyword">const</span> query = route.query;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!route.isReady) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(route.query.id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use route.query.id to fetch data</span></span><br><span class="line">&#125;, [route, query]);</span><br></pre></td></tr></table></figure>
<p>应该让 <code>useEffect</code> 检测 <code>route</code> 和 <code>query</code> 的变动，在注水完成后才能触发数据获取。</p>
]]></content>
      <categories>
        <category>【杂谈】开发</category>
      </categories>
  </entry>
  <entry>
    <title>《计算机网络原理》学习笔记</title>
    <url>/2021/09/13/note-of-net/</url>
    <content><![CDATA[<p>网原总之是一个没打算认真学的专业课，因为真的对网络没有很大的兴趣。再加上上学期曾经看着迅哥哥他们被网原折磨，自己也没什么信心能学好这门专业课。</p>
<p>这个笔记完全基于上一届流传下来的《网原干饭背诵》，在此基础上对重点做一些标记做一些讲解，反正是个背书课，那么就只能一点一点背了。根据前人经验，这个笔记会把比较重要的东西用星号标注出来。</p>
<span id="more"></span>
<h1 id="计算机网络的历史和新进展">计算机网络的历史和新进展</h1>
<h2 id="背诵-1-网络基础">【背诵 1 】网络基础</h2>
<ul>
<li><p>网络所提供的最基本服务为<strong>信息传递</strong>，不同的网络依据其提供的服务进行区分。而区分服务的依据则包括功能、延迟、带宽等各种<strong>外部特性</strong>。</p></li>
<li><p>网络依据<strong>空间距离</strong>可以分为局域网（LAN）、城域网（MAN）、广域网（WAN）和个域网（PAN）。依据<strong>信息类型</strong>可以分为数据网络、电话网络。依据<strong>应用类型</strong>可以分为专用网络、通用网络。依据<strong>使用权</strong>可以分为私有网络、公用网络。同时，网络也可以按照使用的协议进行分类，如 IP 协议等。</p></li>
</ul>
<h2 id="背诵-2-计算机网络发展历史">【背诵 2 】计算机网络发展历史</h2>
<p>计算机网络的历史可以大致描述为：</p>
<ul>
<li>1940 年代，第一个计算机 ENIAC 诞生</li>
<li>1950 年代，大型机和多终端系统诞生</li>
<li>1960 - 1964 年，分组交换网络诞生（Paul Baran）</li>
<li>1960 年代，计算机网络研究开始</li>
<li>* 1969 年，ARPANET 研究启动</li>
<li>1970 年代，计算机网络发展
<ul>
<li>各国电信部门建设运行 X.25 分组交换网</li>
<li>SNA 以及 DNA 等专用网络体系结构出现</li>
<li>Internet 的前身 ARPANET 进行实验运行，带宽小且仅有不到 100 台计算机接入</li>
<li>* 以太网和 Telnet 出现</li>
<li>* 1979 年，TCP/IP 协议成熟</li>
</ul></li>
<li>1980 年代，计算机网络逐步成型
<ul>
<li>标准化的计算机网络体系结构 ISO/OSI 出现</li>
<li>局域网 LAN 技术发展</li>
<li>FTP、NFS、E-mail、USENET 等技术出现</li>
<li>1980 - 1983 年，ARPANET 和 MILNET 分离，前者采用 TCP/IP 协议</li>
<li>1983 年，BSD UNIX 内置 TCP/IP 协议</li>
<li>1985 - 1986 年，NSFNET 建成，用于连接 6 个超级计算中心</li>
<li>1987 - 1990 年，NSFNET 开始连接地区网络</li>
<li>Internet 初具规模，1987 年，中国第一个电子邮件发送到 Internet</li>
<li>中国开始依赖电话线建立低速广域网</li>
</ul></li>
<li>1990 年代，计算机网络进一步发展
<ul>
<li>Internet 商业化，在中国也得到了广泛应用</li>
<li>Web 技术在 Internet 上得到广泛应用</li>
<li>中国出现局域网，如 Novell 等</li>
<li>1990 - 1992 年，NSFNET 带宽提高，连接了 16 个地区网络</li>
<li>1994 年，NSFNET 骨干网解体，出现了若干其他的商用骨干网</li>
<li>1995 年，中国教育和科研网 CERNET 出现</li>
</ul></li>
<li>2000 年代，计算机网络广泛应用
<ul>
<li>网络应用发展迅速，搜索引擎和社交网络出现</li>
<li>移动互联网产业快速发展</li>
<li>2006 年，与 IPv6 相关的 CNGI-CERNET2 出现</li>
</ul></li>
<li>最近，数据中心网络、天地一体化网络、 IPv6 技术等快速发展
<ul>
<li>2011 年开始设立 World IPv6 Day</li>
<li>2011 年 2 月 3 日，全球互联网名称与数字地址分配机构 ICANN 宣布 IPv4 地址耗尽</li>
</ul></li>
</ul>
<h2 id="背诵-3-internet-技术">【背诵 3 】 Internet 技术</h2>
<ul>
<li>Internet 是全球范围的、通用的、异构的公用计算机网络</li>
<li>Internet 是其他类型的计算机网络技术的基础，如企业内部网（Intranet）</li>
<li>Internet 开放的标准由 IETF 负责制定、维护和协调。其他类似 IRTF、IAB、IESG 等机构也参与了标准的维护
<ul>
<li>IETF 全称 Internet Engineering Task Force，其分为若干个工作组（WG），其提交的 Internet 标准被称为 RFC，即 Request For Comments</li>
<li>IRTF 全称 Internet Researching Task Force，由各类专注某一个领域的研究小组组成</li>
<li>IAB 全称 Internet Architecture Board，负责定义 Internet 的大体框架，为 IETF 提供方向上的指导</li>
<li>IESG 全称 Internet Engineering Steering Group，负责在技术方面上管理 IETF 的活动</li>
</ul></li>
<li>Internet 是历史上发展最快的一种技术，其发展速度甚至超越摩尔定律</li>
</ul>
<h2 id="背诵-4-网络时代三大定律">【背诵 4 】网络时代三大定律</h2>
<ul>
<li>【摩尔定律】 CPU 性能每 18 个月会翻番，每 10 年翻 100 倍</li>
<li>【光纤定律】也称超摩尔定律，骨干网带宽每 9 个月会翻番。每 10 年翻 10000 倍</li>
<li>【麦特卡菲定律】也称联网定律，网络价值和用户数量的平方成正比</li>
</ul>
<h2 id="理解-1-分组交换技术">【理解 1 】分组交换技术</h2>
<p>Paul Baran 在设计能承受核攻击的通信系统的时候，确立了三个设计准则。</p>
<ul>
<li>自适应系统的<strong>热土豆路由策略</strong>（能够学习并适应各种新的环境）
<ul>
<li>如果不知道正确的路由，就将分组转发给所有邻居</li>
<li>通过观察路过的分组来更新路由表，旧的路由表项会被删除</li>
<li>尽可能快地转发分组，分组途径的路径并不一定是最短路径</li>
</ul></li>
<li>分组发送策略（端节点能够容忍错误并恢复）
<ul>
<li>每个节点根据自我的路由表决定如何转发分组</li>
<li>每个分组的转发完全独立于其他的分组</li>
<li>交换节点不保存端节点信息，这一点让网络的可拓展性大大增强</li>
</ul></li>
<li>分布式策略
<ul>
<li>所有交换节点平等，避免单一节点失效问题</li>
<li>通过物理硬件冗余和自适应路由实现系统稳健性</li>
</ul></li>
</ul>
<p>而 Internet 就是这一类网络。Internet 连接了各种异构的子网，提供两个最基本的功能，即全球唯一地址和分组通过动态路由传输。</p>
<p>分组交换技术具有相当多的优点，包括：</p>
<ul>
<li>简单性
<ul>
<li>每个分组自身携带信息</li>
<li>一个路由表可以为所有的流量服务</li>
<li>可以适应快速增长的网络规模</li>
</ul></li>
<li>灵活性
<ul>
<li>可以在各种物理底层上运行</li>
<li>可以支持各种网络应用</li>
</ul></li>
<li>可扩展性
<ul>
<li>可以应对端系统的增加</li>
<li>可以应对流量的增加</li>
<li>可以应对网络规模增大带来的路由表增大和路由频繁变化</li>
</ul></li>
<li>健壮性
<ul>
<li>默认了网络结构变化是正常现象</li>
<li>牺牲一定的效率换取网络的稳定</li>
</ul></li>
</ul>
<h2 id="背诵-5-今日互联网">【背诵 5 】今日互联网</h2>
<ul>
<li>今日的互联网具有更大的规模和更多的用户，而且支持更多的功能，具有更高的价值，但是其健壮性、适应性和互联程度都下降了</li>
<li>当今互联网面临的一个问题就是 IPv4 地址耗尽，而目前缓解这个问题地方案是<strong>网络地址转换协议（Network Address Translation / NAT）</strong>
<ul>
<li>NAT 缓解了地址耗尽的问题，增强了安全性和控制性</li>
<li>但是另外一方面却打破了 Internet 中地址唯一的假设</li>
<li>端到端的分组传输路径变成多个 NAT 域的级联，相当于虚电路</li>
<li>为了恢复 Internet 的原有结构，目前正在推进 IPv6 技术</li>
</ul></li>
</ul>
<h2 id="杂项-1-未分类知识点">【杂项 1 】未分类知识点</h2>
<ul>
<li>二十世纪后期人类两项最伟大的战略工程为<strong>星球大战计划</strong>和<strong>互联网计划</strong>。目前互联网已经发展为继海、陆、空、天之后的<strong>第五空间</strong>。</li>
</ul>
<h1 id="计算机网络体系结构">计算机网络体系结构</h1>
<h2 id="背诵-6-计算机网络的定义和组成">【背诵 6 】计算机网络的定义和组成</h2>
<ul>
<li>计算机网络定义为若干独立自治的计算机系统的互联集合体
<ul>
<li>计算机网络和分布式系统不同，分布式系统虽然也是由若干个计算机系统组成，但其具有<strong>内聚性</strong>和<strong>透明性</strong>，故分布式系统呈现给用户的更像是一台计算机。计算机网络则明显分立，在用户的视角依然是若干不同的计算机</li>
<li>目前分布式系统和计算机网络有合流的趋势，两者正在走向统一</li>
</ul></li>
<li>计算机网络有两级组成，即<strong>资源子网</strong>和<strong>通信子网</strong>。资源子网常常是服务器或者用户计算机，而通信子网常常是通信线路等信道和路由器、交换机等网络互联设备</li>
<li>计算机网络之中的通信通常有两种，即<strong>交换式通信</strong>和<strong>广播式通信</strong>
<ul>
<li>交换式通信又称<strong>点对点通信</strong>
<ul>
<li>需要经过交换设备，将消息转发给一个或一组结点</li>
<li>交换设备根据需要选择输出</li>
<li>网络典型的拓扑结构包括 star / ring(loop) / tree / complete / intersecting rings / irregular</li>
<li>关键技术是<strong>路由选择</strong></li>
</ul></li>
<li>广播式通信
<ul>
<li>多台计算机共享通信线路</li>
<li>任一台计算机发出的信息可以直接被其它计算机接收</li>
<li>网络典型的拓扑结构包括 bus / ring(loop)</li>
<li>关键技术是<strong>通道分配</strong>
<ul>
<li>静态分配，即分时间片。特点是控制简单，但通道利用率低</li>
<li>动态分配，即各站点动态使用通道。特点是控制复杂，但通道利用率高。通道分配方法有两种。集中式指的是只有一个仲裁机构，分布式指的是各站点均有仲裁机构</li>
</ul></li>
</ul></li>
<li>传统的 LAN 一般使用广播式通信，而 MAN 和 WAN 一般使用交换式通信。现代的 LAN 中交换式通信的应用正在增多</li>
</ul></li>
</ul>
<h2 id="理解-2-计算机网络体系结构">【理解 2 】计算机网络体系结构</h2>
<ul>
<li>计算机网络体系结构指的是对计算机网络及其部件所完成功能的比较精确的定义，即从功能的角度描述计算机网络的结构，是<strong>层次和层间关系</strong>的集合。但体系结构只会从功能上定义网络，并不会定义协议的细节和接口关系
<ul>
<li>现代计算机网络体系架构指出，计算机网络的基本功能是为地理位置不同的计算机用户之间提供访问通路，并且应当提供若干功能（具体功能列表见 PPT），这些功能中最重要的是<strong>通信功能</strong></li>
<li>这些功能的特征是<strong>分层</strong>，也就是说计算机网络中提供的功能是分成层次的</li>
<li>位于不同计算机上进行对话的同一层通信各方可分别看成是一种进程，称为<strong>对等（同等）进程</strong></li>
</ul></li>
<li>计算机网络分层的体系结构有三个重要的概念，即协议、服务和接口
<ul>
<li>计算机网络体系结构定义了计算机网络的功能是分层次的，而协议（Protocol）就是计算机网络同等层次中，通信双方进行信息交换时必须遵守的规则
<ul>
<li>协议由三部分组成
<ul>
<li>语法（Syntax）部分。即以二进制形式表示的命令和相应的结构</li>
<li>语义（Semantics）部分。即发出的命令请求，完成的动作和回送的响应组成的集合</li>
<li>定时关系（Timing）部分。即有关事件顺序的说明</li>
</ul></li>
<li>网络体系结构的分层决定了协议的分层，协议的分层构成了<strong>洋葱结构</strong>
<ul>
<li>目的主机某一层收到的报文与源主机同一层发出的报文相同</li>
<li>协议分层要保证整个通信系统功能完备高效</li>
</ul></li>
</ul></li>
<li>协议定义了不同计算机同层次之间的关系，而服务（Service）定义同一个计算机的上下层之间的交换信息时必须遵守的规则
<ul>
<li>服务有两种，即面向连接的服务和无连接服务。
<ul>
<li>在使用面向连接的服务进行传输的时候，首先需要建立连接，然后使用这个连接传递数据，使用完毕需要关闭连接。这类服务的顺序性较好</li>
<li>在使用无连接服务的时候，不建立连接，直接通过服务发送数据每个包都需要独立确定路由。这类服务的顺序性较差</li>
<li>需要注意，连接并不意味着可靠，可靠性依然需要通过确认、重传等机制进行保证</li>
</ul></li>
<li>服务在形式上需要通过一组服务原语（Primitive）规定。原语可以分为四类，即请求、指示、响应、确认</li>
</ul></li>
<li>在同一个计算机之中相邻层之间都有一个接口（Interface），它定义了下层向上层提供的原语操作和服务</li>
</ul></li>
<li>基于三大基本概念，计算机网络体系结构的具体实现大致为
<ul>
<li>服务访问点（Service Access Point / SAP）
<ul>
<li>任何的层间服务都是在接口的 SAP 上完成的</li>
<li>每一个 SAP 都有唯一的识别地址</li>
<li>每一个层间接口可以具有多个 SAP</li>
</ul></li>
<li>接口数据单元（Interface Data Unit / IDU）
<ul>
<li>IDU 是通过 SAP 传递的层间信息单元（上下传输）</li>
<li>IDU 的构成是上一层的服务数据单元（Service Data Unit / SDU）和接口控制信息（Interface Control Information / ICI）的拼接</li>
</ul></li>
<li>协议数据单元（Protocol Data Unit / PDU）
<ul>
<li>PDU 是在同层实体之间通过网络传输的信息单元（水平传输）</li>
<li>PDU 的构成是上一层的 SDU 或其分段和协议控制信息（Protocol Control Information / PCI）的拼接</li>
</ul></li>
<li>基于上述定义，计算机网络的工作类似于下述
<ul>
<li>当本层需要水平传输的时候，首先获得上层通过 SAP 传递的，由 SDU 和 ICI 拼接得到的 IDU。然后本层删除 ICI，将剩余的 SDU 拼接上 PCI 获得 PDU 并通过本层网络协议传输</li>
<li>当本层需要继续向下层传输的时候，首先获得上层的 IDU，这个从上层获得到本层的 IDU 在下层看来就是一个新的 SDU。本层随后直接拼接上新的 ICI 获得新的 IDU 向下传输。所以说，最上层产生的数据包向下传播的时候，会逐层添加各层控制信息。而底层接收的数据包向上传播的时候，会逐层把这些控制信息删去，获取最后的数据</li>
</ul></li>
</ul></li>
<li>分层的优点包括模块化、功能抽象、可复用。缺点是数据隐藏会导致可能的低效</li>
<li>计算机网络体系结构的设计中还有两个原则，分别称为<strong>端到端原则</strong>和 <strong>Rule of thumb</strong>
<ul>
<li>端到端原则的思想是底层需要尽可能简单，但是上层应用可以较为复杂（完成验证、纠错等工作），只有当这样的功能明显能提升功能的时候才会放在底层</li>
<li>Rule of thumb 的思想是，底层的新功能不能影响其他不使用这个新功能的部分</li>
</ul></li>
</ul>
<h2 id="理解-3-osi-和-tcpip-模型及其他网络模型">【理解 3 】 OSI 和 TCP/IP 模型及其他网络模型</h2>
<ul>
<li>模型建立的历史事件见 PPT</li>
<li>OSI 模型在 1983 年提出，模型分为七层，从下至上为
<ul>
<li>物理层，这一层包含基础网络硬件，在物理通信线路上传输二进制位（Bit）</li>
<li>数据链路层，这一层目标是在有差错的物理线路上传输无差错的数据帧（Frame）</li>
<li>网络层，这一层控制通信子网提供数据包（Packet）传输功能</li>
<li>传输层，这一层为用户提供端到端的数据传输功能</li>
<li>会话层，这一层为用户提供类似安全认证等会话控制服务</li>
<li>表示层，这一层为用户提供数据表示和数据转换功能</li>
<li>应用层</li>
</ul></li>
<li>TCP/IP 模型的提出早于 OSI 模型，且仅有四层：
<ul>
<li>Host-to-Internet 层，相当于 OSI 的物理层和数据链路层</li>
<li>Internet 层（网络层），控制通信子网提供源点到目的点的 IP 包传送，实现异构网络互联</li>
<li>传输层，提供端到端的数据传送服务，如 TCP 和 UDP</li>
<li>应用层，内部包含了 OSI 的会话层和表示层</li>
</ul></li>
<li>X.25 分组交换网在 70 年代提出，早于 OSI 模型，为公用包交换网与用户之间提供接口
<ul>
<li>该模型面向连接，支持交换虚电路和永久虚电路</li>
<li>物理层使用协议 X.21 以及 X.3 / X.28 / X.29</li>
<li>数据链路层使用协议 LAP 和 LAPB</li>
<li>网络层使用协议 PLP</li>
<li>该模型提出了以下名词 -（用户侧）数据终端设备（Digital Terminal Equipment / DTE）
<ul>
<li>数字线路设备（Digital Circuit Terminating Equipment / DCE）</li>
<li>打包解包设备（Packet Assembler and Disassembler / PAD）</li>
</ul></li>
</ul></li>
<li>Novell Netware 在 1983 年提出，在 2005 年终止开发
<ul>
<li>模型基于 client-server 结构，设计的基本思想是<strong>文件共享</strong>（同时期其它系统还基于磁盘共享，所以模型有一定先进性）</li>
<li>基于 XNS（Xeror Network System），网络层协议是不可靠无连接协议 IPX（Internet Packet Exchange），传输层协议是面向连接的 NCP（Netware Core Protocol）和 SPX（Sequenced Package Exchange）</li>
</ul></li>
<li>B-ISDN 即宽带综合业务数字网，其技术基础为 ATM 异步传输模式（Asynchronous Transfer Mode）
<ul>
<li>ATM 也是分组交换技术
<ul>
<li>异步传输，即不具有主时钟</li>
<li>传输单元为短而定长的信元（cell）</li>
<li>采用虚电路，面向连接</li>
<li>常见速率包括 155M 和 622M</li>
</ul></li>
</ul></li>
</ul>
<h2 id="杂项-2-未分类知识点">【杂项 2 】未分类知识点</h2>
<ul>
<li>美国的标准化组织包括 ANSI 和 NIST，中国的标准化组织包括 CCSA，行业标准则是 IEEE</li>
<li>计算机网络标准化，电信标准为 ITU 而国际标准则是 ISO</li>
<li>Internet 的标准是自发的，并非政府干预，每个标准诞生前都需要提出请求意见稿，即 RFC</li>
</ul>
<h1 id="数据通信基本原理">数据通信基本原理</h1>
<h2 id="理解-4-信号的傅里叶分析">【理解 4 】信号的傅里叶分析</h2>
<ul>
<li>注意网原里傅里叶级数的定义为：</li>
</ul>
<p><span class="math display">\[
g(t) = \frac12 c + \sum_{n = 1}^{+\infty} a_n\sin(2\pi f nt) + \sum_{n = 1}^{+\infty} b_n\cos(2\pi f nt)
\]</span></p>
<p>所以：</p>
<p><span class="math display">\[
\begin{aligned}
c &amp;= \frac2T \int_0^T g(t) {\rm d}t \\
a_n &amp;= \frac2T \int_0^T g(t)\sin(2\pi f nt) {\rm d}t \\
b_n &amp;= \frac2T \int_0^T g(t)\cos(2\pi f nt) {\rm d}t \\
\end{aligned}
\]</span></p>
<ul>
<li>一个信号所包含的信号频率范围为频谱（Spectrum），其宽度称为信号的绝对带宽（Definite bandwidth）。大部分信号有无穷的绝对带宽，但是其能量可能仅集中于某一个频段，这个频带的宽度称为有效带宽（Effective bandwidth），简称带宽</li>
<li>带宽越宽，信号的信息承载能力越强</li>
<li>信号在给定截止频率 <span class="math inline">\(f_c\)</span> 的信道传输的过程中，高于截止频率的频率分量的振幅衰减明显大于低于截止频率的</li>
<li>通过信道的谐波次数越多，信号越逼真</li>
</ul>
<h2 id="计算-1-信号传输基础计算">【计算 1 】信号传输基础计算</h2>
<ul>
<li>波特率指的是信号每秒钟变化的次数，也称调制速率</li>
<li>比特率指的是信号每秒钟传输的二进制位个数</li>
<li>波特率和比特率的关系取决于信号值与比特位的关系，如果每个信号值能表示 <span class="math inline">\(N\)</span> 个二进制位，那么比特率为波特率的 <span class="math inline">\(N\)</span> 倍</li>
<li>对于比特率为 <span class="math inline">\(B({\rm bps})\)</span> 的信道，如果 <span class="math inline">\(M\)</span> 个二进制位为一个周期，则波特率为 <span class="math inline">\(B/M({\rm baud})\)</span>，一次谐波的频率为 <span class="math inline">\(f_1 = B/M({\rm Hz})\)</span>（一次谐波指的是信号傅里叶级数中周期等于原信号周期的分量），能通过信道的最高次谐波次数为 <span class="math inline">\(N = f_c / f_1\)</span>，这里 <span class="math inline">\(f_c\)</span> 为信道的截止频率</li>
<li>信道的有限带宽限制了信号的传输速率，<strong>无噪声</strong>带宽为 <span class="math inline">\(H\)</span> 的信道传输有 <span class="math inline">\(V\)</span> 种电平状态的信号时，最高传输速率为：</li>
</ul>
<p><span class="math display">\[
v = 2H\log_2 V({\rm bps})
\]</span></p>
<ul>
<li>对于<strong>有噪声</strong>信道，其噪声功率为 <span class="math inline">\(N\)</span>，信号功率为 <span class="math inline">\(S\)</span>，其<strong>信噪比</strong>为：</li>
</ul>
<p><span class="math display">\[
x = 10\log_{10}\frac{S}{N}({\rm dB})
\]</span></p>
<p>一般电话系统的典型信噪比为 <span class="math inline">\(30({\rm dB})\)</span>。</p>
<p>带宽为 <span class="math inline">\(H({\rm Hz})\)</span>，信噪比为 <span class="math inline">\(S/N\)</span> 的任何信道的最大传输速率为：</p>
<p><span class="math display">\[
v = H\log_2\left(1 + \frac{S}{N}\right)({\rm bps})
\]</span></p>
<p>该传输速率为理论上限，实际很难达到。该传输速率与电平级数和采样速度无关</p>
<h2 id="背诵-7-传输方式分类">【背诵 7 】传输方式分类</h2>
<ul>
<li>数字传输、模拟传输
<ul>
<li>数字传输的优点是成本低，对噪声不敏感，缺点是易受衰减（频率越高越严重）</li>
</ul></li>
<li>并行传输、串行传输</li>
<li>点到点传输、点到多点传输
<ul>
<li>为适应不同的需要，通信线路采用不同的连接方式</li>
</ul></li>
<li>单工、半双工和全双工传输
<ul>
<li>单工传输：信息只能单向传输，监视信号可回送</li>
<li>半双工传输：信息可以双向传输，但在某一时刻只能单向传输</li>
<li>全双工传输：信息可以同时双向传输</li>
</ul></li>
<li>同步传输、异步传输
<ul>
<li>同步传输
<ul>
<li>传输以报文为基本单位</li>
<li>传输开始的时候需要传输<strong>同步字符</strong>让双方同步</li>
<li>可以不间断传输，传输效率较高但是需要<strong>透明传输处理</strong>，即传输的信息中不存在同步字符</li>
<li>接收方必须知道每一位信号的开始及其持续时间，以便正确的采样接收</li>
<li>基于<strong>二进制位</strong>的传输一般使用同步传输，信息以<strong>二进制位流</strong>为单位传送，传输过程中以<strong>位</strong>为单位同步，传输的开始和结束以特定的<strong>八位二进制位</strong>同步</li>
</ul></li>
<li>异步传输
<ul>
<li>需要辅助位，如起始位、奇偶校验位、终止位</li>
<li>传输效率低，主要用于字符终端与计算机之间的通信</li>
<li>传输字符时，信息传送以字符为单位</li>
</ul></li>
</ul></li>
</ul>
<h2 id="背诵-8-信号发送方式">【背诵 8 】信号发送方式</h2>
<ul>
<li>数据表示分为两种，即模拟数据和数字数据</li>
<li>数据传输方式中以信号为载体，分为模拟信号（模拟信道）和数字信号（数字信道）两种（见【背诵 7 】）</li>
<li>两种数据表示和两种数据传输方式对应形成四种信号发送方式：</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"></th>
<th style="text-align: center;">模拟数据</th>
<th style="text-align: center;">数字数据</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">模拟信道</td>
<td style="text-align: center;">电话系统</td>
<td style="text-align: center;">频带传输、调制解调器（Modem）</td>
</tr>
<tr class="even">
<td style="text-align: center;">数字信道</td>
<td style="text-align: center;">编码解码器（Codec）</td>
<td style="text-align: center;">基带传输、数字编码解码器</td>
</tr>
</tbody>
</table>
<ul>
<li>数字数据的数字传输
<ul>
<li>基带传输
<ul>
<li>基带指的是传输变换前所占用的频带，是原始信号所固有的频带</li>
<li>基带传输指的是在传输时直接使用基带信号，是一种基本的传输方式，适用于高速低速各种情况</li>
<li>其限制为因基带信号所带的频率成分很宽，所以对传输线有一定的要求</li>
</ul></li>
<li>编码方式
<ul>
<li>不归零制码（NRZ）
<ul>
<li>用高电平表示 1，用低电平表示 0</li>
<li>难以分辨某一位的开始或结束，所以发送和接受方都需要时钟同步</li>
<li>如果信号中 0 或者 1 连续出现，直流电平会叠加</li>
<li>容易产生传播错误</li>
</ul></li>
<li>曼彻斯特码（相位编码）
<ul>
<li>每个周期中间有一个跳变，由低到高为 0，由高到低为 1</li>
<li>克服了 NRZ 的不足，并且每个周期中间的跳变既是信息又是时钟，可以自同步</li>
</ul></li>
<li>差分曼彻斯特码
<ul>
<li>每个周期中间有一个跳变作为时钟</li>
<li>每个周期开始有跳变表示 0，没有跳变表示 1</li>
<li>时钟、数据相分离，便于提取</li>
<li>差分曼彻斯特注意分类讨论初始时是高电平还是低电平</li>
</ul></li>
<li>逢 0 变化 NRZ
<ul>
<li>每个周期开始有跳变表示 0，没有跳变表示 1</li>
<li>每个周期中间没有跳变</li>
<li>注意讨论初始时的电平</li>
</ul></li>
<li>逢 1 变化 NRZ
<ul>
<li>每个周期开始有跳变表示 1，没有跳变表示 0</li>
<li>每个周期中间没有跳变</li>
<li>注意讨论初始时的电平</li>
</ul></li>
</ul></li>
</ul></li>
<li>数字数据的模拟传输
<ul>
<li>频带传输
<ul>
<li>在一定频率范围内的线路上，进行载波传输</li>
<li>用基带信号对载波进行调制，使其变为适合于线路传送的信号</li>
<li>调制指的是用基带脉冲控制载波参数，使得这些参数反应基带脉冲信息</li>
<li>使用调制解调器</li>
</ul></li>
<li>调制技术
<ul>
<li>幅移键控法（调幅 / ASK），即根据基带脉冲调整载波振幅</li>
<li>频移键控法（调频 / FSK），即根据基带脉冲调整载波频率</li>
<li>相移键控法（调相 / PSK），即根据基带脉冲调整载波相位</li>
</ul></li>
</ul></li>
<li>模拟数据的数字传输
<ul>
<li>脉冲代码调制 PCM 技术
<ul>
<li>根据 Nyquist 原理进行采样</li>
<li>将模拟信号的振幅分为 <span class="math inline">\(2^n\)</span> 级，每一个采样点用 <span class="math inline">\(n\)</span> 位二进制位表示</li>
<li>贝尔系统的 T1 载波每个采样点用 7 位二进制表示</li>
</ul></li>
<li>差分脉冲代码调制
<ul>
<li>与 PCM 数字化振幅不同，差分脉冲代码调制数字化的是相邻采样点的振幅差值</li>
<li>可以使用较少的二进制位表示</li>
</ul></li>
<li><span class="math inline">\(\delta\)</span> 调制
<ul>
<li>根据每个采样值与前一个值之间的差来决定输出 1 还是 0</li>
<li>编码速度可能无法跟上变化较快的模拟信号</li>
</ul></li>
</ul></li>
</ul>
<h2 id="背诵-9-多路复用技术">【背诵 9 】多路复用技术</h2>
<ul>
<li>使得多路信号同时使用一条物理线路的技术,允许用户使用一个共享信道进行通信，避免相互干扰，降低成本，提高利用率</li>
<li>多路复用技术分类
<ul>
<li>时分复用（TDM）
<ul>
<li>T1 载波电话系统分为 24 个信道，每个 <span class="math inline">\(64({\rm Kbps})\)</span>，一共 <span class="math inline">\(1.544({\rm Mbps})\)</span>，控制信息带内传输</li>
</ul></li>
<li>频分复用（FDM）
<ul>
<li>频率分割为频段，多用于手机通信</li>
</ul></li>
<li>波分复用（WDM）
<ul>
<li>光传输使用，对波长分段，是特殊的频分复用</li>
</ul></li>
</ul></li>
</ul>
<h2 id="背诵-10-交换技术">【背诵 10 】交换技术</h2>
<ul>
<li>计算机网络通信分为交换式和广播式</li>
<li>交换是在多结点通信网络中，为有效利用通信设备和线路，动态接通、断开、切换通信线路</li>
<li>交换技术分类
<ul>
<li>电路交换
<ul>
<li>直接利用可以切换的物理电路动态调整通信线路</li>
<li>分为建立电路、传输数据、拆除电路三个阶段</li>
<li>在发送数据前，必须建立起点到点的物理通路。建立物理通路时间较长，数据传送延迟较短</li>
<li>电话网和 ISDN 采用电路交换</li>
<li>电路交换一般采用时分复用
<ul>
<li>时间被分为帧（Frame），帧被分为时槽（Slot）</li>
<li>时槽在帧内的相对位置决定这个槽所传输数据所属的会话</li>
<li>发送方和接收方间需要同步</li>
<li>非永久会话需要动态绑定时槽到一个会话</li>
</ul></li>
</ul></li>
<li>报文交换（存储转发方式）
<ul>
<li>信息以报文（逻辑上完整的信息段）为单位进行存储转发</li>
<li>线路利用率高、要求中间结点（网络通信设备）缓冲大、延迟时间长</li>
</ul></li>
<li>分组交换（包交换）
<ul>
<li>分组是一种报文还小的信息段，可定长也可变长。分组交换中信息以分组为单位进行存储转发。源结点把报文分为分组，在中间结点存储转发，目的结点把分组合成报文。用附加的分组头来区分数据</li>
<li>特点
<ul>
<li>每个分组头包括源地址和目的地址，独立进行路由选择
<ul>
<li>所以不保证到达顺序</li>
</ul></li>
<li>网络结点设备中不预先分配资源，使用统计复用，线路利用率高
<ul>
<li>相比于电路交换最明显的优势</li>
</ul></li>
<li>易于重传，可靠性高</li>
<li>易于开始新的传输，让紧急信息优先通过</li>
<li>开销增加</li>
<li>需要处理拥塞问题
<ul>
<li>需要复杂的路由器，难以保证端到端的服务质量</li>
</ul></li>
</ul></li>
<li>分组交换分为虚电路分组交换和数据报分组交换
<ul>
<li>数据报分组交换（如 IP Networks）
<ul>
<li>每个分组均带有网络地址（源、目的），可走不同的路径</li>
</ul></li>
<li>虚电路分组交换（如 ATM Networks）
<ul>
<li>其是电路交换和分组交换的结合
<ul>
<li>数据以分组形式传输，来自同一流的分组通过一个预先建立的路径（虚电路）传输</li>
<li>确保分组的顺序，但是来自不同虚电路的分组可能会交错在一起</li>
</ul></li>
<li>分三个阶段
<ul>
<li>建立：发带有全称网络地址的呼叫分组，建立虚电路</li>
<li>传输：沿建立好的虚电路传输数据</li>
<li>拆除：拆除虚电路</li>
</ul></li>
<li>分组头不需要包含完整的地址信息，路由器需要维护虚电路的状态信息</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>电路交换、报文交换、分组交换的时序图如下。其中电路交换要逐层申请预留占用资源，这段申请时间用于<strong>寻找出境中继线</strong>，申请完毕后节点会占用这段传输线</li>
</ul>
<p><img src="/uploads/note-of-net/1.png" /></p>
<ul>
<li>三类交换技术的特点
<ul>
<li>电路交换适用于实时信息和模拟信号传送，在线路带宽比较低的情况下使用比较经济</li>
<li>报文交换适用于线路带宽比较高的情况，可靠灵活，但延迟大</li>
<li>分组交换缩短了延迟，也能满足一般的实时信息传送。在高带宽的通信中更为经济、合理、可靠。是目前公认较好的一种交换技术</li>
<li>电路交换和分组交换可以结合，如 IP over SONET 以及 IP over Frame Relay</li>
</ul></li>
</ul>
<h2 id="背诵-11-交换结构">【背诵 11 】交换结构</h2>
<ul>
<li>Crossbar 交换结构：无阻塞内部交换</li>
<li>空分交换：多个 Crossbar 互联，有无阻塞均可</li>
<li>时分交换：高效处理</li>
</ul>
<h2 id="杂项-3-未分类知识点">【杂项 3 】未分类知识点</h2>
<ul>
<li>数据通信技术由编码技术、多路复用和交换技术构成</li>
</ul>
<h1 id="物理层接口及其协议">物理层接口及其协议</h1>
<h2 id="背诵-12-物理层的定义与功能">【背诵 12 】物理层的定义与功能</h2>
<ul>
<li>物理层提供机械的、电气的、功能的和规程的特性，目的是启动、维护和关闭<strong>数据链路实体</strong>之间进行<strong>比特传输</strong>的<strong>物理连接</strong>。这种连接可能通过中继系统，在中继系统内的传输也是在物理层</li>
<li>物理层的功能是在两个网络设备之间提供透明的比特流传输</li>
<li>物理层的传输方式
<ul>
<li>连接方式（点到点，点到多点）</li>
<li>通信方式（单工，半双工，全双工）</li>
<li>位传输方式（串行，并行）</li>
</ul></li>
<li>物理层的重要特性
<ul>
<li>机械特性（Mechanical characteristics）
<ul>
<li>定义物理连接的边界点，即接插装置</li>
<li>规定物理连接时所采用的规格、引脚的数量和排列情况</li>
</ul></li>
<li>电气特性（Electrical characteristics）
<ul>
<li>规定传输二进制位时，线路上信号的电压高低、阻抗匹配、传输速率和距离限制</li>
</ul></li>
<li>功能特性（Functional characteristics）
<ul>
<li>主要定义各条物理线路的功能，比如数据、控制、定时、地线</li>
</ul></li>
<li>规程特性（Procedural characteristics）
<ul>
<li>主要定义各条物理线路的工作规程和时序关系</li>
</ul></li>
</ul></li>
</ul>
<h2 id="背诵-13-物理层传输介质">【背诵 13 】物理层传输介质</h2>
<ul>
<li>双绞线。既可以用于模拟传输，也可以用于数字传输，带宽依赖于线的类型和传输距离</li>
<li>同轴电缆
<ul>
<li>基带同轴电缆，用于数字传输（数字数据数字传输用基带传输）</li>
<li>宽带同轴电缆，用于模拟传输（模拟数据数字传输用频带传输）</li>
</ul></li>
<li>光纤
<ul>
<li>分为单模光纤和多模光纤，两者都支持波分复用，使用的波长越长衰减越小，但成本也越高
<ul>
<li>单模光纤只有一个入射角度，半径小，适合<strong>长距离传输</strong></li>
<li>多模光纤有多个入射角度，半径大，适合短距离传输</li>
</ul></li>
<li>光纤组网
<ul>
<li>点到点，使用四根线，两根用于保护倒换</li>
<li>环，使用两根线，一根用于保护倒换</li>
</ul></li>
<li>光纤中继器。分为光电光式和全光式
<ul>
<li>全光网具有光因特网论坛 OIF</li>
</ul></li>
</ul></li>
</ul>
<h2 id="背诵-14-sonet-sdh-网络传输技术">【背诵 14 】 SONET / SDH 网络传输技术</h2>
<ul>
<li>80 年代提出，应用<strong>时分复用</strong>技术，同步传输，有主时钟控制</li>
<li>SONET 路径为：路径（Path）、线路（Line）、段（Section）</li>
<li>基于<strong>字节</strong>的复用。但是 OC-3c 中的 c 表示<strong>级联</strong>而非复用</li>
</ul>
<h2 id="背诵-15-移动电话网络传输技术">【背诵 15 】移动电话网络传输技术</h2>
<ul>
<li>单方向的寻呼系统
<ul>
<li>寻呼过程
<ul>
<li>打电话给寻呼公司，输入寻呼机号码</li>
<li>寻呼公司的计算机收到请求，通过线路传到高处的天线</li>
<li>天线直接广播信号（本地寻呼），或传递给卫星（异地寻呼），卫星再广播</li>
</ul></li>
<li>单向系统</li>
<li>需要很小的带宽</li>
</ul></li>
<li>蜂窝电话
<ul>
<li>1G：模拟蜂窝电话，只能传送话音</li>
<li>2G：数字蜂窝电话，主要传送话音，相关概念有 GSM 和 CDMA</li>
<li>3G / 4G：可以传送话音和数据</li>
</ul></li>
<li>模拟蜂窝电话
<ul>
<li>Push-to-talk system。早期用于军事通信，单信道，半双工系统</li>
<li>IMTS。双频，全双工系统</li>
<li>AMPS。使用小蜂窝，蜂窝中心有基站，不相邻且相近的蜂窝中<strong>重用频率</strong></li>
</ul></li>
</ul>
<div class="note warning"><p>网原实在是看不会了，这个笔记也就到此为止吧。</p>
</div>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>原创数学题集</title>
    <url>/2022/07/12/orginal-problems/</url>
    <content><![CDATA[<p>一些奇妙的数学想法而已，可能是初中、高中、大学题，反正是弄着玩的。</p>
<span id="more"></span>
<p><span class="math display">\[
\newcommand{\i}{\mathop{\rm i}}
\]</span></p>
<h1 id="problem-1">Problem 1</h1>
<p>已知函数 <span class="math inline">\(f(x) = [x](x - [x]), x \geq 0\)</span>，这里 <span class="math inline">\([x]\)</span> 表示不大于 <span class="math inline">\(x\)</span> 的最大整数。</p>
<p>另外定义函数迭代符号 <span class="math inline">\(f^{(n)}\)</span> 如下：</p>
<p><span class="math display">\[
\begin{cases}
f^{(1)}(x) = f(x) \\
f^{(k + 1)}(x) = f(f^{(k)}(x)), k \in \mathbb{N}^*
\end{cases}
\]</span></p>
<p>证明：对于任何 <span class="math inline">\(x \geq 0\)</span>，都有：</p>
<p><span class="math display">\[
\lim_{n \to \infty} f^{(n)}(x) = 0
\]</span></p>
<h2 id="solution">Solution</h2>
<p>首先证明，<span class="math inline">\(x \geq 1\)</span> 时 <span class="math inline">\(f(x) \leq x - 1\)</span>。</p>
<p>我们不妨记 <span class="math inline">\(\{x\} := x - [x]\)</span>，显然有 <span class="math inline">\(0 \leq \{x\} &lt; 1\)</span>。进一步，根据 <span class="math inline">\(x \geq 1\)</span> 得知 <span class="math inline">\([x] \geq 1\)</span>，那么显然：</p>
<p><span class="math display">\[
([x] - 1)(\{x\} - 1) \leq 0
\]</span></p>
<p>展开得到：</p>
<p><span class="math display">\[
f(x) = [x]\{x\} \leq [x] + \{x\} - 1 = x - 1
\]</span></p>
<p>引理证明完毕，回到原题。</p>
<p>此外，我们需要了解，若 <span class="math inline">\(x \in [0, 1)\)</span>，则有 <span class="math inline">\([x] = 0\)</span>，即 <span class="math inline">\(f(x) = 0\)</span>。</p>
<p>那么我们考虑下述数列，我们即需要证明下述数列极限为零：</p>
<p><span class="math display">\[
x, f(x), f^{(2)}(x), \cdots, f^{(n)}(x), \cdots
\]</span></p>
<p>若 <span class="math inline">\(x \in [0, 1)\)</span>，显然 <span class="math inline">\(f(x) = 0\)</span>，且根据 <span class="math inline">\(f(0) = 0\)</span> 得到 <span class="math inline">\(\forall n \in \mathbb{N}^*\)</span> 有 <span class="math inline">\(f^{(n)}(x) = 0\)</span>，上述数列极限显然为零。</p>
<p>若 <span class="math inline">\(x \geq 1\)</span>，我们只需要证明必然存在 <span class="math inline">\(k \in \mathbb{N}^*\)</span> 使得 <span class="math inline">\(f^{(k)}(x) &lt; 1\)</span> 即可，因为只要该结论成立，就说明 <span class="math inline">\(f^{(k + 1)}(x) = 0\)</span>，从而之后的所有项均为零，结论成立。</p>
<p>使用反证法，如果结论不成立，即 <span class="math inline">\(\forall k \in \mathbb{N}^*\)</span> 有 <span class="math inline">\(f^{(k)}(x) \geq 1\)</span>。那么根据引理：</p>
<p><span class="math display">\[
f^{(k + 1)}(x) \leq f^{(k)}(x) - 1, k \in \mathbb{N}^*
\]</span></p>
<p>所以：</p>
<p><span class="math display">\[
f^{([x])}(x) \leq f^{([x] - 1)}(x) - 1 \leq \cdots \leq f^{(0)}(x) - [x] = x - [x] \in [0, 1)
\]</span></p>
<p>和假设矛盾，故原结论成立。</p>
<p>至此，结论证明完毕。</p>
<h1 id="problem-2">Problem 2</h1>
<p>已知凸多边形 <span class="math inline">\(\mathcal{A}, \mathcal{B}\)</span> 没有公共点，且 <span class="math inline">\(\mathcal{A}\)</span> 的任何一边不平行于 <span class="math inline">\(\mathcal{B}\)</span> 的任何一边。</p>
<p>已知点 <span class="math inline">\(A \in \mathcal{A}, B \in \mathcal{B}\)</span>。给出已知向量 <span class="math inline">\(\boldsymbol t\)</span>，且已知 <span class="math inline">\(\vec{AB} \parallel \boldsymbol{t}\)</span>。</p>
<p>证明：当 <span class="math inline">\(\vec{AB}\)</span> 的长度最小的时候，点 <span class="math inline">\(A, B\)</span> 中必有一个为其所在凸多边形的顶点。</p>
<h2 id="solution-1">Solution</h2>
<p>使用反证法。假设当 <span class="math inline">\(\|\vec{AB}\|_2\)</span> 取到最小值的时候 <span class="math inline">\(A, B\)</span> 中至少有一点位于其所在多边形的内部（即不位于其所在多边形的边界），不妨令 <span class="math inline">\(A\)</span> 位于 <span class="math inline">\(\mathcal{A}\)</span> 的内部。由于 <span class="math inline">\(\mathcal{A} \cap \mathcal{B} = \varnothing\)</span> 与 <span class="math inline">\(B \in \mathcal{B}\)</span>，可以得知 <span class="math inline">\(B\)</span> 位于多边形 <span class="math inline">\(\mathcal{A}\)</span> 的外部。那么线段 <span class="math inline">\(AB\)</span> 显然与 <span class="math inline">\(\mathcal{A}\)</span> 的边界 <span class="math inline">\(\partial\mathcal{A}\)</span> 有交点，不妨记为 <span class="math inline">\(A&#39;\)</span>。那么我们显然得到 <span class="math inline">\(\|\vec{A&#39;B}\|_2 &lt; \|\vec{AB}\|_2\)</span>，这与最小性假设矛盾，假设不成立。故当 <span class="math inline">\(\|\vec{AB}\|_2\)</span> 取到最小值的时候 <span class="math inline">\(A, B\)</span> 均应当位于其所在多边形的边界上。</p>
<p>继续使用反证法。假设当 <span class="math inline">\(\|\vec{AB}\|_2\)</span> 取到最小值的时候 <span class="math inline">\(A, B\)</span> 均不位于其所在多边形的顶点。此时不妨假设 <span class="math inline">\(A\)</span> 所在的 <span class="math inline">\(\mathcal{A}\)</span> 的边为线段 <span class="math inline">\(a\)</span>，<span class="math inline">\(B\)</span> 所在的 <span class="math inline">\(\mathcal{B}\)</span> 的边为线段 <span class="math inline">\(b\)</span>。由 <span class="math inline">\(\mathcal{A}\)</span> 的任何一条边不平行于 <span class="math inline">\(\mathcal{B}\)</span> 的任何一条边知 <span class="math inline">\(a\)</span> 不平行于 <span class="math inline">\(b\)</span>，且据假设知 <span class="math inline">\(A\)</span> 不位于 <span class="math inline">\(a\)</span> 的顶点，<span class="math inline">\(B\)</span> 不位于 <span class="math inline">\(b\)</span> 的顶点。</p>
<p>由于 <span class="math inline">\(a\)</span> 不平行于 <span class="math inline">\(b\)</span>，记 <span class="math inline">\(a\)</span> 所在直线和 <span class="math inline">\(b\)</span> 所在直线的交点为 <span class="math inline">\(C\)</span>，令点 <span class="math inline">\(A&#39;\)</span> 为线段 <span class="math inline">\(AC\)</span> 上一点，过 <span class="math inline">\(A&#39;\)</span> 作 <span class="math inline">\(A&#39;B&#39; \parallel AB\)</span> 与 <span class="math inline">\(b\)</span> 所在直线相交于 <span class="math inline">\(B&#39;\)</span>。显然无论 <span class="math inline">\(A&#39;\)</span> 如何取，均能够满足 <span class="math inline">\(\|\vec{A&#39;B&#39;}\|_2 &lt; \|\vec{AB}\|_2\)</span>。</p>
<p>由于 <span class="math inline">\(A, B\)</span> 均不是其所在线段的顶点，那么存在一个 <span class="math inline">\(\delta_A &gt; 0\)</span> 满足 <span class="math inline">\(\|\vec{AA&#39;}\|_2 &lt; \delta_A\)</span> 时即有 <span class="math inline">\(A&#39; \in a\)</span>，即 <span class="math inline">\(A&#39; \in \mathcal{A}\)</span>。同理也存在类似的 <span class="math inline">\(\delta_B &gt; 0\)</span> 满足 <span class="math inline">\(\|\vec{BB&#39;}\|_2 &lt; \delta_B\)</span> 时即有 <span class="math inline">\(B&#39; \in \mathcal{B}\)</span>。</p>
<p>考虑到 <span class="math inline">\(\triangle CAB \backsim \triangle CA&#39;B&#39;\)</span>，我们有下述关系：</p>
<p><span class="math display">\[
\frac{\|\vec{AA&#39;}\|_2}{\|\vec{BB&#39;}\|_2} = \frac{\|\vec{CA}\|_2}{\|\vec{CB}\|_2} \iff\|\vec{AA&#39;}\|_2 = \frac{\|\vec{CA}\|_2 \cdot \|\vec{BB&#39;}\|_2}{\|\vec{CB}\|_2}
\]</span></p>
<p>故我们只需要令：</p>
<p><span class="math display">\[
0 &lt; \|\vec{AA&#39;}\|_2 &lt; \min\left\{\delta_A, \frac{\|\vec{CA}\|_2 \cdot \delta_B}{\|\vec{CB}\|_2}\right\}
\]</span></p>
<p>即可保证 <span class="math inline">\(\|\vec{AA&#39;}\|_2 &lt; \delta_A\)</span> 且 <span class="math inline">\(\|\vec{BB&#39;}\|_2 &lt; \delta_B\)</span>，这就保证了 <span class="math inline">\(A&#39; \in \mathcal{A}, B&#39; \in \mathcal{B}\)</span>，并且有 <span class="math inline">\(\|\vec{A&#39;B&#39;}\|_2 &lt; \|\vec{AB}\|_2\)</span>。这样就与最小性假设矛盾，假设不成立。故当 <span class="math inline">\(\|\vec{AB}\|_2\)</span> 取到最小值的时候 <span class="math inline">\(A, B\)</span> 中至少有一个点为其所在多边形的顶点。</p>
<h1 id="problem-3">Problem 3</h1>
<p>(Credit to PKU 零之审判)</p>
<p>边长为 <span class="math inline">\(2\)</span> 的正方形 <span class="math inline">\(ABCD\)</span> 内有四条长度为 <span class="math inline">\(1\)</span> 的线段 <span class="math inline">\(l_{1, 2, 3, 4}\)</span>，这四条线段满足：</p>
<ul>
<li><span class="math inline">\(l_i\)</span> 与 <span class="math inline">\(l_{i + 1}\)</span> 相交但其内部不相交（即交点为 <span class="math inline">\(l_i\)</span> 或 <span class="math inline">\(l_{i + 1}\)</span> 的端点）</li>
<li><span class="math inline">\(l_1, l_3\)</span> 没有公共点且 <span class="math inline">\(l_2, l_4\)</span> 没有公共点</li>
<li><span class="math inline">\(l_i\)</span> 垂直于 <span class="math inline">\(l_{i + 1}\)</span></li>
</ul>
<p>上述陈述中 <span class="math inline">\(i \in \{1, 2, 3, 4\}\)</span>，并且定义 <span class="math inline">\(l_5 := l_1\)</span>。</p>
<p>记 <span class="math inline">\(S = l_1 \cup l_2 \cup l_3 \cup l_4\)</span>，<span class="math inline">\(V\)</span> 为正方形 <span class="math inline">\(ABCD\)</span> 四边中点构成的集合，定义：</p>
<p><span class="math display">\[
d := \max_{v \in V, s \in S} |v - s|
\]</span></p>
<p>求 <span class="math inline">\(d\)</span> 的最小值。</p>
<h2 id="solution-2">Solution</h2>
<p>考虑如下图所示的 <span class="math inline">\(l_{1, 2, 3, 4}\)</span>：</p>
<p><img src="/uploads/original-problems/1.png" height="20%" width="20%" /></p>
<p>这里 <span class="math inline">\(l_{1, 2, 3, 4}\)</span> 构成边长为 <span class="math inline">\(1\)</span> 的正方形，该正方形与正方形 <span class="math inline">\(ABCD\)</span> 有共同中心且 <span class="math inline">\(l_1 \parallel AD\)</span>。不难看出若令 <span class="math inline">\(M\)</span> 为 <span class="math inline">\(CD\)</span> 中点，<span class="math inline">\(N\)</span> 为 <span class="math inline">\(l_1, l_2\)</span> 交点，则 <span class="math inline">\(d = MN = \dfrac{\sqrt{10}}{2}\)</span>。</p>
<p>下面我们证明 <span class="math inline">\(d \geq \dfrac{\sqrt{10}}{2}\)</span>。为了证明该结论，我们考虑下述圆 <span class="math inline">\(P\)</span>：</p>
<p><img src="/uploads/original-problems/3.png" height="20%" width="20%" /></p>
<p>圆 <span class="math inline">\(P\)</span> 以正方形 <span class="math inline">\(ABCD\)</span> 的中心 <span class="math inline">\(O\)</span> 为圆心，半径为 <span class="math inline">\(\dfrac{\sqrt{2}}{2}\)</span>。</p>
<p>我们首先证明下述引理，即如果 <span class="math inline">\(l_{1, 2, 3, 4}\)</span> 上有点 <span class="math inline">\(X\)</span> 在圆 <span class="math inline">\(P\)</span> 外或者在圆 <span class="math inline">\(P\)</span> 边界上，那么 <span class="math inline">\(d \geq \dfrac{\sqrt{10}}{2}\)</span>。</p>
<p>我们考虑下述图形：</p>
<p><img src="/uploads/original-problems/4.png" height="35%" width="35%" /></p>
<p>这里的四个虚线圆为以正方形 <span class="math inline">\(ABCD\)</span> 各边中点为圆心，以 <span class="math inline">\(\dfrac{\sqrt{10}}{2}\)</span> 为半径所作的。注意到由于这四个圆的内部（不包含边界）的交集完全位于圆 <span class="math inline">\(P\)</span> 的内部，这说明 <span class="math inline">\(X\)</span> 必然在这四个虚线圆中的某个之外或者这四个虚线圆中的某个的边界上。也就是说必然存在某个 <span class="math inline">\(M \in V\)</span> 使得 <span class="math inline">\(MX \geq \dfrac{\sqrt{10}}{2}\)</span>，从而：</p>
<p><span class="math display">\[
d \geq MX \geq \dfrac{\sqrt{10}}{2}
\]</span></p>
<p>引理证明完毕，回到原题。</p>
<p>根据引理我们得知，如果 <span class="math inline">\(l_{1, 2, 3, 4}\)</span> 上有点在圆 <span class="math inline">\(P\)</span> 外，则欲证命题成立，所以现在只需要考虑 <span class="math inline">\(S \subseteq P\)</span>。</p>
<p>根据题设对四条线段的约束，我们可以得知这四条线段仅有下述两种可能：</p>
<p><img src="/uploads/original-problems/2.png" height="50%" width="50%" /></p>
<p>上述两种情况的旋转、镜面对称等视为同种情况。</p>
<p>首先考虑左边的情况，这里记 <span class="math inline">\(A&#39;D&#39; = B&#39;C&#39; =: a, A&#39;B&#39; = C&#39;D&#39; =: b\)</span>，我们有 <span class="math inline">\(0 &lt; a, b \leq 1\)</span>。根据 <span class="math inline">\(S \subseteq P\)</span> 此时必然有下述两条虚线段长度不大于 <span class="math inline">\(\sqrt{2}\)</span>：</p>
<p><img src="/uploads/original-problems/5.png" height="25%" width="25%" /></p>
<p>从而有下述约束：</p>
<p><span class="math display">\[
\begin{cases}
a^2 + (2 - b)^2 \leq 2 \Rightarrow a^2 + b^2 - 4b + 2 \leq 0 \\
b^2 + (2 - a)^2 \leq 2 \Rightarrow a^2 + b^2 - 4a + 2 \leq 0 \\
\end{cases}
\]</span></p>
<p>两式相加并整理得到：</p>
<p><span class="math display">\[
(a - 1)^2 + (b - 1)^2 \leq 0
\]</span></p>
<p>可知 <span class="math inline">\(a = b = 1\)</span>，此时 <span class="math inline">\(A&#39;, B&#39;, C&#39;, D&#39;\)</span> 构成边长为 <span class="math inline">\(1\)</span> 的正方形。考虑到边长为 <span class="math inline">\(1\)</span> 的正方形的外接圆半径为 <span class="math inline">\(\dfrac{\sqrt{2}}{2}\)</span>，所以为了 <span class="math inline">\(S \subseteq P\)</span>，只能有该正方形内接于圆 <span class="math inline">\(P\)</span>。</p>
<p>之后考虑右边的情况，根据 <span class="math inline">\(S \subseteq P\)</span> 此时必然有下述两条虚线段长度不大于 <span class="math inline">\(\sqrt{2}\)</span>。</p>
<p>这里记 <span class="math inline">\(A&#39;B&#39; = C&#39;D&#39; =: a, A&#39;A&#39;&#39; =: b, D&#39;D&#39;&#39; =: c\)</span>，我们有 <span class="math inline">\(0 &lt; a \leq 1\)</span> 以及 <span class="math inline">\(0 \leq b, c \leq 1 - a\)</span>：</p>
<p><img src="/uploads/original-problems/6.png" height="20%" width="20%" /></p>
<p>从而有下述约束：</p>
<p><span class="math display">\[
\begin{cases}
D&#39;&#39;C&#39; + B&#39;B&#39;&#39; \leq 1 \Rightarrow b - c + 1 \leq 1 \\
A&#39;&#39;B&#39; + C&#39;C&#39;&#39; \leq 1 \Rightarrow c - b + 1 \leq 1 \\
\end{cases}
\]</span></p>
<p>可知 <span class="math inline">\(b = c\)</span>，此时 <span class="math inline">\(A&#39;&#39;, B&#39;&#39;, C&#39;&#39;, D&#39;&#39;\)</span> 构成边长为 <span class="math inline">\(1\)</span> 的正方形。考虑到边长为 <span class="math inline">\(1\)</span> 的正方形的外接圆半径为 <span class="math inline">\(\dfrac{\sqrt{2}}{2}\)</span>，所以为了 <span class="math inline">\(S \subseteq P\)</span>，只能有该正方形内接于圆 <span class="math inline">\(P\)</span>。</p>
<p>综上所述，此时无论如何均存在四个 <span class="math inline">\(S\)</span> 内的点构成内接于圆 <span class="math inline">\(P\)</span> 的正方形，至少说明 <span class="math inline">\(S\)</span> 中存在某一个点 <span class="math inline">\(X\)</span> 在圆 <span class="math inline">\(P\)</span> 边界上。根据引理，原命题证明完毕。</p>
<p>综上所述，<span class="math inline">\(d\)</span> 的最小值为 <span class="math inline">\(\dfrac{\sqrt{10}}{2}\)</span>。</p>
<h1 id="problem-4">Problem 4</h1>
<p>记 <span class="math inline">\(\theta_{n, k} := \dfrac{(2k + 1)\pi}{2^n}\)</span>，证明：</p>
<p><span class="math display">\[
\sum_{k = 0}^{2^n - 1} \frac{1}{1 - \cos\theta_{n, k}} = 2^{2n - 1}
\]</span></p>
<h2 id="solution-3">Solution</h2>
<p>我们注意到下述恒等式：</p>
<p><span class="math display">\[
\frac{4}{1 - \cos 2\theta} = \frac{1}{1 - \cos\theta} + \frac{1}{1 + \cos\theta}
\]</span></p>
<p>证明如下：</p>
<p><span class="math display">\[
\frac{1}{1 - \cos\theta} + \frac{1}{1 + \cos\theta} = \frac{2}{1 - \cos^2\theta} = \frac{4}{1 - (2\cos^2\theta - 1)} = \frac{4}{1 - \cos 2\theta}
\]</span></p>
<p>基于上述恒等式，我们令：</p>
<p><span class="math display">\[
S_n := \sum_{k = 0}^{2^n - 1} \frac{1}{1 - \cos\theta_{n, k}}
\]</span></p>
<p>我们即可得到：</p>
<p><span class="math display">\[
S_{n + 1} = \sum_{k = 0}^{2^{n + 1} - 1} \frac{1}{1 - \cos\theta_{n + 1, k}} = \sum_{k = 0}^{2^n - 1} \left(\frac{1}{1 - \cos\theta_{n + 1, k}} + \frac{1}{1 - \cos\theta_{n + 1, 2^n + k}}\right) \\
\]</span></p>
<p>这里注意到：</p>
<p><span class="math display">\[
\cos\theta_{n + 1, 2^n + k} = \cos\dfrac{[2(2^n + k) + 1]\pi}{2^{n + 1}} = \cos\left(1 + \frac{2k + 1}{2^{n + 1}}\right)\pi = -\cos\theta_{n + 1, k}
\]</span></p>
<p>另外注意到：</p>
<p><span class="math display">\[
\theta_{n, k} = \dfrac{(2k + 1)\pi}{2^n} = 2\theta_{n + 1, k}
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
\begin{aligned}
S_{n + 1} &amp;= \sum_{k = 0}^{2^n - 1} \left(\frac{1}{1 - \cos\theta_{n + 1, k}} + \frac{1}{1 - \cos\theta_{n + 1, 2^n + k}}\right) \\
&amp;= \sum_{k = 0}^{2^n - 1} \left(\frac{1}{1 - \cos\theta_{n + 1, k}} + \frac{1}{1 + \cos\theta_{n + 1, k}}\right) \\
&amp;= \sum_{k = 0}^{2^n - 1} \frac{4}{1 - \cos2\theta_{n + 1, k}} \\
&amp;= 4\sum_{k = 0}^{2^n - 1} \frac{1}{1 - \cos\theta_{n, k}} \\
&amp;= 4S_n
\end{aligned}
\]</span></p>
<p>而显然有 <span class="math inline">\(S_1 = 2\)</span>，从而命题证明完毕。</p>
<h1 id="problem-5">Problem 5</h1>
<p>已知正整数 <span class="math inline">\(n\)</span> 与实数 <span class="math inline">\(x\)</span>，证明：</p>
<p><span class="math display">\[
\sum_{k = 0}^n C_n^k\sin kx = 2^n\cos^n\frac{x}{2}\sin\frac{nx}{2}
\]</span></p>
<h2 id="solution-4">Solution</h2>
<p>考虑 <span class="math inline">\((\cos x + \i\sin x + 1)^n \in \mathbb{C}\)</span> 的虚部。</p>
<p>一方面：</p>
<p><span class="math display">\[
\begin{aligned}
(\cos x + \i\sin x + 1)^n &amp;= \left[\left(2\cos^2\frac{x}{2} - 1\right) + 2\i\sin\frac{x}{2}\cos\frac{x}{2} + 1\right]^n \\
&amp;= 2^n\cos^n\frac{x}{2}\left(\cos\frac{x}{2} + \i\sin\frac{x}{2}\right)^n \\
&amp;= 2^n\cos^n\frac{x}{2}\cos\frac{nx}{2} + \i2^n\cos^n\frac{x}{2}\sin\frac{nx}{2}
\end{aligned}
\]</span></p>
<p>可知该复数的虚部即为欲证等式的右侧。</p>
<p>另一方面：</p>
<p><span class="math display">\[
\begin{aligned}
(\cos x + \i\sin x + 1)^n &amp;= \sum_{k = 0}^n C_n^k(\cos x + \i\sin x)^k \\
&amp;= \sum_{k = 0}^n C_n^k(\cos kx + \i\sin kx) \\
&amp;= \sum_{k = 0}^n C_n^k\cos kx + \i\sum_{k = 0}^n C_n^k\sin kx
\end{aligned}
\]</span></p>
<p>可知该复数的虚部即为欲证等式的左侧。</p>
<p>综上所述，证明完毕。</p>
<h1 id="problem-6">Problem 6</h1>
<p>已知数列 <span class="math inline">\(\{a_n\}_{n \geq 0}\)</span> 满足 <span class="math inline">\(a_0 = 1, a_1 = 0\)</span> 且 <span class="math inline">\(a_{n + 2} = (n + 1)(a_{n + 1} + a_n)\)</span>。证明：</p>
<p><span class="math display">\[
\sum_{k = 0}^n C_n^ka_k = n!
\]</span></p>
<h2 id="solution-5">Solution</h2>
<p>定义命题 <span class="math inline">\(A_n\)</span> 表示下述等式成立：</p>
<p><span class="math display">\[
\sum_{k = 0}^{n + 1} C_{n + 1}^ka_k = (n + 1)\sum_{k = 0}^n C_n^ka_k
\]</span></p>
<p>命题 <span class="math inline">\(B_n\)</span> 表示下述等式成立：</p>
<p><span class="math display">\[
\sum_{k = 0}^n C_n^ka_{k + 1} = n\sum_{k = 0}^n C_n^ka_k
\]</span></p>
<p>首先我们证明由 <span class="math inline">\(B_n\)</span> 能推出 <span class="math inline">\(A_n\)</span>。现在在 <span class="math inline">\(B_n\)</span> 成立的基础上，考虑下述计算：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;(n + 1)\sum_{k = 0}^n C_n^ka_k = n\sum_{k = 0}^n C_n^ka_k + \sum_{k = 0}^n C_n^ka_k = \sum_{k = 0}^n C_n^ka_{k + 1} + \sum_{k = 0}^n C_n^ka_k \\
=&amp; C_n^na_{n + 1} + \left(\sum_{k = 1}^n C_n^{k - 1}a_k + \sum_{k = 1}^n C_n^ka_k\right) + C_n^0a_0 = C_n^na_{n + 1} + \sum_{k = 1}^n (C_n^{k - 1} + C_n^k)a_k + C_n^0a_0 \\
=&amp; C_{n + 1}^{n + 1}a_{n + 1} + \sum_{k = 1}^n C_{n + 1}^ka_k + C_{n + 1}^0a_0 = \sum_{k = 0}^{n + 1} C_{n + 1}^ka_k
\end{aligned}
\]</span></p>
<p>这就说明了在 <span class="math inline">\(B_n\)</span> 成立的基础上 <span class="math inline">\(A_n\)</span> 成立，其中第二个等号的依据为 <span class="math inline">\(B_n\)</span> 成立。</p>
<p>之后我们证明 <span class="math inline">\(A_n, B_n\)</span> 能推出 <span class="math inline">\(B_{n + 1}\)</span>。现在在 <span class="math inline">\(A_n, B_n\)</span> 均成立的基础上，考虑下述计算：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\sum_{k = 0}^{n + 1} C_{n + 1}^ka_{k + 1} = C_{n + 1}^0a_1 + \sum_{k = 1}^{n + 1} C_{n + 1}^ka_{k + 1} = \sum_{k = 1}^{n + 1} \frac{n + 1}{k}C_{n}^{k - 1}a_{k + 1} \\
=&amp; (n + 1)\sum_{k = 0}^{n} \frac{1}{k + 1}C_{n}^{k} \cdot (k + 1)(a_{k + 1} + a_k) = (n + 1)\left(\sum_{k = 0}^{n} C_{n}^{k}a_{k + 1} + \sum_{k = 0}^{n} C_{n}^{k}a_k\right) \\
=&amp; (n + 1)\left(n\sum_{k = 0}^{n} C_{n}^{k}a_k + \sum_{k = 0}^{n} C_{n}^{k}a_k\right) = (n + 1)\left[(n + 1)\sum_{k = 0}^{n} C_{n}^{k}a_k\right] = (n + 1)\sum_{k = 0}^{n + 1} C_{n + 1}^ka_k\\
\end{aligned}
\]</span></p>
<p>这就说明了在 <span class="math inline">\(A_n, B_n\)</span> 成立的基础上 <span class="math inline">\(B_{n + 1}\)</span> 成立，其中倒数第二个等号的依据为 <span class="math inline">\(B_n\)</span> 成立，倒数第一个等号的依据为 <span class="math inline">\(A_n\)</span> 成立。</p>
<p>而我们显然可以计算出 <span class="math inline">\(a_2 = 1\)</span>，从而得知命题 <span class="math inline">\(B_1\)</span> 成立，进而据归纳法得到对任何的正整数 <span class="math inline">\(n\)</span>，都有命题 <span class="math inline">\(A_n\)</span> 成立。据命题 <span class="math inline">\(A_n\)</span> 成立即可得到本问题欲证命题成立。</p>
<h1 id="problem-7">Problem 7</h1>
<p>已知正数数列 <span class="math inline">\(\{x_k\}_{0 \leq k \leq n}\)</span> 满足：</p>
<p><span class="math display">\[
x_0 = \sum_{k = 1}^n x_k
\]</span></p>
<p>定义数列 <span class="math inline">\(\{y_k\}_{1 \leq k \leq n}\)</span> 为：</p>
<p><span class="math display">\[
y_k := \sqrt{\sum_{i = 0}^{k - 1} x_i} \sqrt{\sum_{i = k}^n x_i}
\]</span></p>
<p>证明：</p>
<p><span class="math display">\[
1 &lt; \sum_{k = 1}^n \frac{x_k}{y_k} &lt; \frac{\pi}{2}
\]</span></p>
<h2 id="solution-6">Solution</h2>
<p>根据均值不等式显然有：</p>
<p><span class="math display">\[
y_k = \sqrt{\sum_{i = 0}^{k - 1} x_i} \sqrt{\sum_{i = k}^n x_i} \leq \frac{1}{2}\left(\sum_{i = 0}^{k - 1} x_i + \sum_{i = k}^n x_i\right) = \frac{1}{2}\left(x_0 + \sum_{i = 1}^n x_i\right) = x_0
\]</span></p>
<p>并且由于：</p>
<p><span class="math display">\[
\sum_{i = 0}^{k - 1} x_i &gt; x_0 = \sum_{i = 1}^n x_i &gt; \sum_{i = k}^n x_i
\]</span></p>
<p>得知上述等号无法取到，那么：</p>
<p><span class="math display">\[
\sum_{k = 1}^n \frac{x_k}{y_k} &gt; \sum_{k = 1}^n \frac{x_k}{x_0} = 1
\]</span></p>
<p>从而不等式左侧得证。</p>
<p>为了证明不等式右侧，我们考虑下述数列 <span class="math inline">\(\{S_k\}_{0 \leq k \leq n}\)</span>，其在 <span class="math inline">\(k = 0\)</span> 的时候定义为 <span class="math inline">\(S_0 := 0\)</span>，在 <span class="math inline">\(k &gt; 0\)</span> 的时候定义为：</p>
<p><span class="math display">\[
S_k := \sum_{i = 1}^k \frac{x_k}{x_0}
\]</span></p>
<p>考虑到 <span class="math inline">\(\{x_k\}_{0 \leq k \leq n}\)</span> 是正数数列，可以得知 <span class="math inline">\(\{S_k\}_{0 \leq k \leq n}\)</span> 是递增数列。另一方面，我们可以得知 <span class="math inline">\(S_n = 1\)</span>。综合上述条件我们可以得知 <span class="math inline">\(\{S_k\}_{0 \leq k \leq n}\)</span> 各项均落在区间 <span class="math inline">\([0, 1]\)</span> 上。</p>
<p>那么即存在所有项均落在区间 <span class="math inline">\(\left[0, \dfrac{\pi}{2}\right]\)</span> 上的数列 <span class="math inline">\(\{\theta_k\}_{0 \leq k \leq n}\)</span> 使得 <span class="math inline">\(\sin\theta_k = S_k\)</span> 对所有 <span class="math inline">\(0 \leq k \leq n\)</span> 成立。此时 <span class="math inline">\(\theta_0 = 0\)</span> 并且 <span class="math inline">\(\theta_n = \dfrac{\pi}{2}\)</span>。另一方面，据 <span class="math inline">\(\{S_k\}_{0 \leq k \leq n}\)</span> 是递增数列得知 <span class="math inline">\(\{\theta_k\}_{0 \leq k \leq n}\)</span> 是递增数列。</p>
<p>从而我们得知：</p>
<p><span class="math display">\[
\begin{aligned}
y_k &amp;= \sqrt{\sum_{i = 0}^{k - 1} x_i} \sqrt{\sum_{i = k}^n x_i} = x_0 \sqrt{\sum_{i = 0}^{k - 1} \frac{x_i}{x_0}} \sqrt{\sum_{i = k}^n \frac{x_i}{x_0}} = x_0 \sqrt{1 + S_{k - 1}} \sqrt{S_n - S_{k - 1}} \\
&amp;= x_0 \sqrt{1 - S^2_{k - 1}} = x_0 \sqrt{1 - \sin^2\theta_{k - 1}} = x_0\cos\theta_{k - 1}
\end{aligned}
\]</span></p>
<p>从而：</p>
<p><span class="math display">\[
\begin{aligned}
\sum_{k = 1}^n \frac{x_k}{y_k} &amp;= \sum_{k = 1}^n \frac{x_k}{x_0\cos\theta_{k - 1}} = \sum_{k = 1}^n \frac{S_k - S_{k - 1}}{\cos\theta_{k - 1}} = \sum_{k = 1}^n \frac{\sin\theta_k - \sin\theta_{k - 1}}{\cos\theta_{k - 1}} \\
&amp;= \sum_{k = 1}^n \frac{2\cos\dfrac{\theta_k + \theta_{k - 1}}{2}\sin\dfrac{\theta_k - \theta_{k - 1}}{2}}{\cos\theta_{k - 1}} &lt; 2\sum_{k = 1}^n\sin\dfrac{\theta_k - \theta_{k - 1}}{2}
\end{aligned}
\]</span></p>
<p>这里的不等号考虑到 <span class="math inline">\(\{\theta_k\}_{0 \leq k \leq n}\)</span> 是递增数列，从而 <span class="math inline">\(\theta_k &gt; \theta_{k - 1}\)</span>。</p>
<p>应用不等式 <span class="math inline">\(\sin x &lt; x, x &gt; 0\)</span> 得到：</p>
<p><span class="math display">\[
\sum_{k = 1}^n \frac{x_k}{y_k} &lt; 2\sum_{k = 1}^n\sin\dfrac{\theta_k - \theta_{k - 1}}{2} &lt; \sum_{k = 1}^n \theta_k - \theta_{k - 1} = \theta_n - \theta_0 = \frac{\pi}{2}
\]</span></p>
<p>综上所述，证明完毕。</p>
<h1 id="problem-8">Problem 8</h1>
<p>已知函数：</p>
<p><span class="math display">\[
f(x) = \frac{1}{[x] - \{x\} + 1}
\]</span></p>
<p>定义数列 <span class="math inline">\(a_1 = 1\)</span> 以及 <span class="math inline">\(a_{n + 1} = f(a_n), n \geq 1\)</span>。证明：所有正有理数在数列 <span class="math inline">\(\{a_n\}_{n \geq 1}\)</span> 中均出现且仅出现一次。</p>
<h2 id="solution-7">Solution</h2>
<p>若 <span class="math inline">\(x \in \mathbb{N}^+\)</span>，显然：</p>
<p><span class="math display">\[
f(x) = \frac{1}{x + 1} \in \mathbb{Q}^+
\]</span></p>
<p>若 <span class="math inline">\(x \in \mathbb{Q}^+ \backslash \mathbb{N}^+\)</span>，记 <span class="math inline">\(n := [x], \dfrac{p}{q} := \{x\}\)</span>，这里 <span class="math inline">\(p, q \in \mathbb{N}^+, p &lt; q, \mathop{\rm gcd}(p, q) = 1\)</span>，那么：</p>
<p><span class="math display">\[
f(x) = \frac{q}{nq - p + q} \in \mathbb{Q}
\]</span></p>
<p>注意到 <span class="math inline">\(nq - p + q = (n + 1)q - p \geq q - p &gt; 0\)</span>，所以 <span class="math inline">\(f(x) \in \mathbb{Q}^+\)</span>。</p>
<p>所以若 <span class="math inline">\(x \in \mathbb{Q}^+\)</span> 则 <span class="math inline">\(f(x) \in \mathbb{Q}^+\)</span>，据归纳法得知 <span class="math inline">\(\{a_n\}_{n \geq 1}\)</span> 中项均是正有理数。</p>
<p>下面说明数列 <span class="math inline">\(\{a_n\}_{n \geq 1}\)</span> 中没有重复项，即不存在 <span class="math inline">\(m \neq n, m, n \in \mathbb{N}^+\)</span> 使得 <span class="math inline">\(a_m = a_n\)</span>。</p>
<p>首先说明 <span class="math inline">\(f\)</span> 是单射，即不存在 <span class="math inline">\(x \neq y\)</span> 使得 <span class="math inline">\(f(x) = f(y)\)</span>。使用反证法，如果存在 <span class="math inline">\(x \neq y\)</span> 使得 <span class="math inline">\(f(x) = f(y)\)</span>，那么：</p>
<p><span class="math display">\[
\frac{1}{[x] - \{x\} + 1} = \frac{1}{[y] - \{y\} + 1} \iff [x] - [y] = \{x\} - \{y\}
\]</span></p>
<p>那么：</p>
<p><span class="math display">\[
\mathbb{Z} \ni |[x] - [y]| = |\{x\} - \{y\}| &lt; 1
\]</span></p>
<p>从而 <span class="math inline">\([x] = [y]\)</span>，进一步 <span class="math inline">\(\{x\} = \{y\}\)</span>，也就是说 <span class="math inline">\(x = y\)</span>，矛盾。故 <span class="math inline">\(f\)</span> 是单射。</p>
<p>回到原先证明，使用反证法。如果存在 <span class="math inline">\(m \neq n, m, n \in \mathbb{N}^+\)</span> 使得 <span class="math inline">\(a_m = a_n\)</span>，考虑到 <span class="math inline">\(f(0) = 1\)</span>，记函数迭代符号为 <span class="math inline">\(f^{(n)}\)</span>，可以得到 <span class="math inline">\(f^{(m)}(0) = f^{(n)}(0)\)</span>。考虑到 <span class="math inline">\(f\)</span> 是单射，所以 <span class="math inline">\(f^{(|m - n|)}(0) = 0\)</span>，即 <span class="math inline">\(a_{|m - n|} = 0\)</span>。这与先前证明的该数列均为正有理数矛盾。故数列 <span class="math inline">\(\{a_n\}_{n \geq 1}\)</span> 中没有重复项。</p>
<p>现在我们仅需要说明任何正有理数均出现在该数列中即可。</p>
<p>我们令 <span class="math inline">\(g(x) := x + 1, h(x) := \dfrac{x}{x + 1}\)</span>。我们证明 <span class="math inline">\(g(a_n) = a_{2n + 1}, h(a_n) = a_{2n}\)</span>。</p>
<p>使用归纳法，<span class="math inline">\(n = 1\)</span> 时上述命题的成立是显然的，假设 <span class="math inline">\(n = k\)</span> 时上述命题成立，考虑 <span class="math inline">\(n = k + 1\)</span>。此时：</p>
<p><span class="math display">\[
a_{2k + 2} = f(a_{2k + 1}) = f(g(a_k)) = f(a_k + 1) = \frac{1}{[a_k + 1] - \{a_k + 1\} + 1} = \frac{1}{[a_k] - \{a_k\} + 2}
\]</span></p>
<p>而：</p>
<p><span class="math display">\[
h(a_{k + 1}) = \frac{a_{k + 1}}{a_{k + 1} + 1} = \frac{1}{1 + a_{k + 1}^{-1}} = \frac{1}{1 + (f(a_k))^{-1}} = \frac{1}{1 + ([a_k] - \{a_k\} + 1)} = \frac{1}{[a_k] - \{a_k\} + 2}
\]</span></p>
<p>故 <span class="math inline">\(h(a_{k + 1}) = a_{2k + 2}\)</span>，此时：</p>
<p><span class="math display">\[
a_{2k + 3} = f(a_{2k + 2}) = f(h(a_{k + 1})) = \frac{1}{[h(a_{k + 1})] - \{h(a_{k + 1})\} + 1}
\]</span></p>
<p>由于 <span class="math inline">\(x &gt; 0\)</span> 时 <span class="math inline">\(0 &lt; h(x) &lt; 1\)</span>，所以：</p>
<p><span class="math display">\[
a_{2k + 3} = \frac{1}{1 - h(a_{k + 1})} = \frac{1}{1 - \dfrac{a_{k + 1}}{a_{k + 1} + 1}} = a_{k + 1} + 1 = g(a_{k + 1})
\]</span></p>
<p>故 <span class="math inline">\(g(a_{k + 1}) = a_{2k + 3}\)</span>。据归纳法，证明完毕。</p>
<p>定义函数：</p>
<p><span class="math display">\[
\varphi(x) := \begin{cases}
g^{-1}(x) &amp; x \geq 1 \\
h^{-1}(x) &amp; x &lt; 1 \\
\end{cases} = \begin{cases}
x - 1 &amp; x \geq 1 \\
\dfrac{x}{1 - x} &amp; x &lt; 1 \\
\end{cases}
\]</span></p>
<p>对于既约分数 <span class="math inline">\(\dfrac{p}{q} \in \mathbb{Q}^+\)</span>，显然有：</p>
<p><span class="math display">\[
\varphi\left(\dfrac{p}{q}\right) = \begin{cases}
\dfrac{p - q}{q} &amp; p \geq q \\
\dfrac{p}{q - p} &amp; p &lt; q \\
\end{cases}
\]</span></p>
<p>显然任何正既约分数经过 <span class="math inline">\(\varphi\)</span> 映射后依然既约且分子和分母的和严格减少（特别规定 <span class="math inline">\(0\)</span> 的分子分母和为 <span class="math inline">\(0\)</span>），而 <span class="math inline">\(\varphi(0) = 0\)</span>，分子和分母的和保持不变。</p>
<p>对任何正既约分数 <span class="math inline">\(\dfrac{p}{q}\)</span>，考虑序列 <span class="math inline">\(\dfrac{p}{q}, \varphi\left(\dfrac{p}{q}\right), \varphi^{(2)}\left(\dfrac{p}{q}\right), \cdots, \varphi^{(n)}\left(\dfrac{p}{q}\right), \cdots\)</span>，序列中分子和分母的和显然始终非负且不增，这意味着从某一项开始分子分母和始终不变，而此时序列的项仅有可能全零。考虑到 <span class="math inline">\(\varphi(x) = 0\)</span> 的解仅有 <span class="math inline">\(x = 0\)</span> 或者 <span class="math inline">\(x = 1\)</span>，这意味着序列中必然有 <span class="math inline">\(1\)</span>。</p>
<p>这说明对任何正既约分数 <span class="math inline">\(\dfrac{p}{q}\)</span> 存在某一个 <span class="math inline">\(g^{-1}, h^{-1}\)</span> 组成的有限序列使得，这里 <span class="math inline">\(\circ\)</span> 是映射复合符号：</p>
<p><span class="math display">\[
g^{-1} \circ h^{-1} \circ h^{-1} \circ \cdots \circ g^{-1}\left(\dfrac{p}{q}\right) = 1
\]</span></p>
<p>也就是存在某一个 <span class="math inline">\(g, h\)</span> 组成的有限序列使得：</p>
<p><span class="math display">\[
g \circ \cdots \circ h \circ h \circ g(1) = \dfrac{p}{q}
\]</span></p>
<p>据之前的证明，<span class="math inline">\(g \circ \cdots \circ h \circ h \circ g(1)\)</span> 显然在数列 <span class="math inline">\(\{a_n\}_{n \geq 1}\)</span> 内，证明完毕。</p>
<h1 id="problem-9">Problem 9</h1>
<p>(Credit to 2023 某四省联考数学试卷)</p>
<p>椭圆曲线可以用于区块链等技术中的加密环节。</p>
<p>定义椭圆曲线 <span class="math inline">\(C\)</span>：</p>
<p><span class="math display">\[
C := \{(x, y): y^2 = x^3 + ax + b, 4a^3 + 27b^2 \neq 0\}
\]</span></p>
<p>定义两个运算：</p>
<ul>
<li>运算 <span class="math inline">\(\tilde{\cdot}: C \to C\)</span>。令 <span class="math inline">\(\tilde{P} \in C\)</span> 是 <span class="math inline">\(P \in C\)</span> 关于 <span class="math inline">\(x\)</span> 轴的对称点</li>
<li>运算 <span class="math inline">\(\oplus: C^2 \to C\)</span>。对 <span class="math inline">\(P, Q \in C\)</span>：
<ul>
<li>若直线 <span class="math inline">\(PQ\)</span> 与 <span class="math inline">\(C\)</span> 有第三个交点 <span class="math inline">\(R \in C\)</span>，令 <span class="math inline">\(P \oplus Q = \tilde{R}\)</span></li>
<li>若直线 <span class="math inline">\(PQ\)</span> 与 <span class="math inline">\(C\)</span> 相切且切点为 <span class="math inline">\(P\)</span>，定义 <span class="math inline">\(P \oplus Q = \tilde{P}\)</span></li>
<li>定义 <span class="math inline">\(P \oplus \tilde{P} = 0^*\)</span> 以及 <span class="math inline">\(P \oplus 0^* = 0^* \oplus P = 0^*\)</span></li>
</ul></li>
</ul>
<ol type="1">
<li>已知 <span class="math inline">\(\oplus\)</span> 满足交换律、结合律，对于与曲线 <span class="math inline">\(C\)</span> 相切于 <span class="math inline">\(P\)</span> 的直线 <span class="math inline">\(PQ\)</span>，其中 <span class="math inline">\(P, Q \in C\)</span>，证明 <span class="math inline">\(P \oplus P = \tilde{Q}\)</span></li>
<li>已知 <span class="math inline">\(P(x_1, y_1), Q(x_2, y_2) \in C\)</span>，且 <span class="math inline">\(PQ\)</span> 与 <span class="math inline">\(C\)</span> 有第三个交点，求 <span class="math inline">\(P \oplus Q\)</span> 坐标</li>
</ol>
<h2 id="solution-8">Solution</h2>
<p>Subproblem 1.</p>
<p>我们考虑式子 <span class="math inline">\(P \oplus P \oplus Q \oplus \tilde{Q}\)</span>，据结合律：</p>
<p><span class="math display">\[
\begin{aligned}
P \oplus P \oplus Q \oplus \tilde{Q} &amp;= (P \oplus P) \oplus (Q \oplus \tilde{Q}) = (P \oplus P) \oplus 0^* = P \oplus P
\end{aligned}
\]</span></p>
<p>另据结合律：</p>
<p><span class="math display">\[
\begin{aligned}
P \oplus P \oplus Q \oplus \tilde{Q} &amp;= P \oplus (P \oplus Q) \oplus \tilde{Q}
\end{aligned}
\]</span></p>
<p>又 <span class="math inline">\(PQ\)</span> 与 <span class="math inline">\(C\)</span> 相切于 <span class="math inline">\(P\)</span>，故 <span class="math inline">\(P \oplus Q = \tilde{P}\)</span>，所以：</p>
<p><span class="math display">\[
\begin{aligned}
P \oplus P \oplus Q \oplus \tilde{Q} &amp;= P \oplus \tilde{P} \oplus \tilde{Q} = 0^* \oplus \tilde{Q} = \tilde{Q}
\end{aligned}
\]</span></p>
<p>Subproblem 2.</p>
<p>设 <span class="math inline">\(PQ\)</span> 与曲线 <span class="math inline">\(C\)</span> 的第三个交点 <span class="math inline">\(R\)</span> 坐标为 <span class="math inline">\((x_3, y_3)\)</span>，那么 <span class="math inline">\(P \oplus Q\)</span> 的坐标为 <span class="math inline">\((x_3, -y_3)\)</span>。</p>
<p>从而 <span class="math inline">\(y_i^2 = x_i^3 + ax_i + b, i \in \{1, 2, 3\}\)</span>。作差：</p>
<p><span class="math display">\[
\begin{cases}
y_3^2 - y_2^2 = (x_3^3 - x_2^3) + a(x_3 - x_2) \\
y_3^2 - y_1^2 = (x_3^3 - x_1^3) + a(x_3 - x_1) \\
\end{cases}
\]</span></p>
<p>若令 <span class="math inline">\(PQ\)</span> 的斜率为 <span class="math inline">\(k\)</span>（斜率必然存在，否则 <span class="math inline">\(R\)</span> 不存在），则有：</p>
<p><span class="math display">\[
\begin{cases}
k(y_3 + y_2) = x_3^2 + x_2x_3 + x_2^2 + a \\
k(y_3 + y_1) = x_3^2 + x_1x_3 + x_1^2 + a \\
\end{cases}
\]</span></p>
<p>再作差：</p>
<p><span class="math display">\[
k(y_2 - y_1) = x_3(x_2 - x_1) + (x_2^2 - x_1^2) \Rightarrow k^2 = x_1 + x_2 + x_3
\]</span></p>
<p>从而就可以得到 <span class="math inline">\(x_3\)</span>，基于此得到 <span class="math inline">\(y_3\)</span> 的计算则很简单了。</p>
<h2 id="comment">Comment</h2>
<p>这题我还是有些话想说的，我感觉这道题出得很新，但我并不觉得很好。因为很多学生会对这个运算是否是良定义产生疑问，进而在解题的时候对一些地方畏手畏脚，尤其是优等生会产生这种现象。</p>
<p>而且基于一个很新的背景出运算题，说实话，没什么意思。</p>
<h1 id="problem-10">Problem 10</h1>
<p>定义一个非负整数 <span class="math inline">\(n\)</span> 的二进制表示 <span class="math inline">\((a_ka_{k - 1} \cdots a_0)_2\)</span>，其需要满足：</p>
<ul>
<li>对于所有 <span class="math inline">\(0 \leq i \leq k\)</span>，都有 <span class="math inline">\(a_i \in \{0, 1\}\)</span></li>
<li>等式 <span class="math inline">\(\sum_{i = 0}^k 2^ia_i = n\)</span> 成立</li>
<li><span class="math inline">\(0\)</span> 的二进制表示为 <span class="math inline">\((0)_2\)</span>，并且 <span class="math inline">\(n \neq 0\)</span> 时有 <span class="math inline">\(a_k = 1\)</span></li>
</ul>
<p>例如，<span class="math inline">\(9\)</span> 的二进制表示为 <span class="math inline">\((1001)_2\)</span>，二进制表示 <span class="math inline">\((101)_2\)</span> 所代表的非负整数为 <span class="math inline">\(5\)</span>。</p>
<ol type="1">
<li>证明对于任意 <span class="math inline">\(n \in \mathbb{N}\)</span>，其二进制表示存在且唯一</li>
<li>对非负整数定义满足交换律与结合律的运算 <span class="math inline">\(\oplus\)</span> 如下：</li>
</ol>
<ul>
<li>若 <span class="math inline">\(x, y \in \{0, 1\}\)</span>，若 <span class="math inline">\(x = y\)</span>，那么 <span class="math inline">\(x \oplus y = 0\)</span>，否则 <span class="math inline">\(x \oplus y = 1\)</span></li>
<li>若 <span class="math inline">\(x, y\)</span> 中有一个不属于 <span class="math inline">\(\{0, 1\}\)</span>，记 <span class="math inline">\(x\)</span> 的二进制表示为 <span class="math inline">\((x_px_{p - 1} \cdots x_0)_2\)</span>，<span class="math inline">\(y\)</span> 的二进制表示为 <span class="math inline">\((y_qy_{q - 1} \cdots y_0)_2\)</span>。不妨 <span class="math inline">\(p \geq q\)</span>，并额外约定 <span class="math inline">\(i &gt; q\)</span> 时 <span class="math inline">\(y_i = 0\)</span>，定义：</li>
</ul>
<p><span class="math display">\[
x \oplus y = \sum_{i = 0}^p 2^i(x_i \oplus y_i)
\]</span></p>
<p>计算 <span class="math inline">\(0 \oplus 1 \oplus \cdots \oplus n (n \in \mathbb{N})\)</span> 的值</p>
<h2 id="solution-9">Solution</h2>
<p>Subproblem 1.</p>
<p>首先说明存在性，我们使用归纳法说明所有非负整数都存在二进制表示。首先容易看出 <span class="math inline">\(0\)</span> 的二进制表示唯一为 <span class="math inline">\((0)_2\)</span>，<span class="math inline">\(1\)</span> 的二进制表示唯一为 <span class="math inline">\((1)_2\)</span>。</p>
<p>假设任意 <span class="math inline">\(n \leq 2^k - 1, k \in \mathbb{N}\)</span> 的 <span class="math inline">\(n\)</span> 都具有二进制表示，下面证明所有 <span class="math inline">\(n \leq 2^{k + 1} - 1\)</span> 的 <span class="math inline">\(n\)</span> 都具有二进制表示。</p>
<p>显然得知 <span class="math inline">\(n = 2^k\)</span> 有二进制表示 <span class="math inline">\((100 \cdots 0)_2\)</span>。取 <span class="math inline">\(2^k &lt; n \leq 2^{k + 1} - 1\)</span>，显然有 <span class="math inline">\(n - 2^k \leq 2^k - 1\)</span>，所以根据归纳假设 <span class="math inline">\(n - 2^k\)</span> 具有二进制表示 <span class="math inline">\((a_pa_{p - 1} \cdots a_0)_2\)</span>，根据定义有 <span class="math inline">\(a_p = 1\)</span>。显然 <span class="math inline">\(p &lt; k\)</span>，否则：</p>
<p><span class="math display">\[
n - 2^k = \sum_{i = 0}^p 2^ia_i \geq 2^p \geq 2^k
\]</span></p>
<p>矛盾，故 <span class="math inline">\(p &lt; k\)</span>。</p>
<p>作二进制表示 <span class="math inline">\((b_kb_{k - 1} \cdots b_0)_2\)</span>，其中 <span class="math inline">\(b_k = 1\)</span>，并且 <span class="math inline">\(i \leq p\)</span> 时 <span class="math inline">\(b_i = a_i\)</span>，<span class="math inline">\(p &lt; i &lt; k\)</span> 时 <span class="math inline">\(b_i = 0\)</span>。显然其满足二进制表示的第一和第三个条件，第二个条件验证如下：</p>
<p><span class="math display">\[
\sum_{i = 0}^k 2^ib_i = 2^k + \sum_{i = 0}^p 2^ia_i = 2^k + (n - 2^k) = n
\]</span></p>
<p>成立。据归纳法得知所有非负整数都有二进制表示。</p>
<p>之后说明唯一性，我们使用归纳法说明所有非负整数二进制表示唯一。首先容易看出 <span class="math inline">\(0\)</span> 的二进制表示唯一为 <span class="math inline">\((0)_2\)</span>，<span class="math inline">\(1\)</span> 的二进制表示唯一为 <span class="math inline">\((1)_2\)</span>。</p>
<p>假设任意 <span class="math inline">\(n \leq 2^k - 1, k \in \mathbb{N}\)</span> 的 <span class="math inline">\(n\)</span> 二进制表示唯一，下面证明所有 <span class="math inline">\(n \leq 2^{k + 1} - 1\)</span> 的 <span class="math inline">\(n\)</span> 二进制表示唯一。</p>
<p>对于 <span class="math inline">\(2^k \leq n \leq 2^{k + 1} - 1\)</span>，假设其具有两个不同的二进制表示 <span class="math inline">\((a_pa_{p - 1} \cdots a_0)_2, (b_qb_{q - 1} \cdots b_0)_2\)</span>，根据定义 <span class="math inline">\(a_p = b_q = 1\)</span>。这里不妨令 <span class="math inline">\(p \geq q\)</span>。</p>
<p>如果 <span class="math inline">\(p \neq q\)</span>，那么我们有：</p>
<p><span class="math display">\[
n = \sum_{i = 0}^q 2^ib_i \leq \sum_{i = 0}^q 2^i = 2^{q + 1} - 1 &lt; 2^p \leq \sum_{i = 0}^p 2^ia_i = n
\]</span></p>
<p>矛盾，故 <span class="math inline">\(p = q\)</span>。</p>
<p>另外，如果 <span class="math inline">\(p &gt; k\)</span>，则有：</p>
<p><span class="math display">\[
n = \sum_{i = 0}^p 2^ia_i \geq 2^p \geq 2^{k + 1}
\]</span></p>
<p>如果 <span class="math inline">\(p &lt; k\)</span>，则有：</p>
<p><span class="math display">\[
n = \sum_{i = 0}^p 2^ia_i \leq \sum_{i = 0}^p 2^i = 2^{p + 1} - 1 \leq 2^k - 1
\]</span></p>
<p>均矛盾，所以 <span class="math inline">\(p = q = k\)</span>。</p>
<p>那么 <span class="math inline">\((a_{k - 1}a_{k - 2} \cdots a_0)_2, (b_{k - 1}b_{k - 2} \cdots b_0)_2\)</span> 应当构成了 <span class="math inline">\(n - 2^k\)</span> 的两个不同的二进制表示，然而 <span class="math inline">\(n - 2^k \leq 2^k - 1\)</span>，这与归纳假设矛盾。</p>
<p>据归纳法得知所有非负整数二进制表示唯一。</p>
<p>Subproblem 2.</p>
<p>我们归纳地证明：</p>
<p><span class="math display">\[
0 \oplus 1 \oplus \cdots \oplus n = \begin{cases}
n &amp; n = 4k \\
1 &amp; n = 4k + 1 \\
n + 1 &amp; n = 4k + 2 \\
0 &amp; n = 4k + 3 \\
\end{cases} \ (k \in \mathbb{N})
\]</span></p>
<p>在此之前，我们需要指出该运算具有以下性质：</p>
<p><span class="math display">\[
0 \oplus n = n, n \oplus n = 0, 2n \oplus 1 = 2n + 1, n \in \mathbb{N}^+
\]</span></p>
<p>不妨记 <span class="math inline">\(n\)</span> 的二进制表示为 <span class="math inline">\((a_ka_{k - 1} \cdots a_0)_2\)</span>，那么：</p>
<p><span class="math display">\[
\begin{aligned}
0 \oplus n &amp;= \sum_{i = 0}^k 2^k(0 \oplus a_i) = \sum_{i = 0}^k 2^ka_i = n \\
n \oplus n &amp;= \sum_{i = 0}^k 2^k(a_i \oplus a_i) = 0 \\
\end{aligned}
\]</span></p>
<p>另外考虑二进制表示 <span class="math inline">\((a_ka_{k - 1} \cdots a_00)_2\)</span>，其所代表的正整数为：</p>
<p><span class="math display">\[
\sum_{i = 1}^{k + 1} 2^ia_{i - 1} = 2\sum_{i = 0}^k 2^ia_i = 2n
\]</span></p>
<p>所以：</p>
<p><span class="math display">\[
2n \oplus 1 = (0 \oplus 1) + \sum_{i = 1}^{k + 1} 2^i(a_{i - 1} \oplus 0) = 1 + 2\sum_{i = 0}^k 2^ia_i = 2n + 1
\]</span></p>
<p>回到原题，我们首先计算出：</p>
<p><span class="math display">\[
\begin{aligned}
0 &amp;= 0 \\
0 \oplus 1 &amp;= 1 \\
0 \oplus 1 \oplus 2 &amp;= 1 \oplus 2 = (1)_2 \oplus (10)_2 = (11)_2 = 3 \\
0 \oplus 1 \oplus 2 \oplus 3 &amp;= 3 \oplus 3 = (11)_2 \oplus (11)_2 = 0 \\
\end{aligned}
\]</span></p>
<p>为简化记号，定义 <span class="math inline">\(f(n) := 0 \oplus 1 \oplus \cdots \oplus n\)</span>。</p>
<p>假设 <span class="math inline">\(n = 4(k - 1), 4(k - 1) + 1, 4(k - 1) + 2, 4(k - 1) + 3 (k \in \mathbb{N}^+)\)</span> 时结论成立。</p>
<p>下证明 <span class="math inline">\(n = 4k, 4k + 1, 4k + 2, 4k + 3\)</span> 时结论成立。</p>
<p>不难根据先前得到的运算性质运算出：</p>
<p><span class="math display">\[
\begin{aligned}
f(4k) &amp;= 0 \oplus 4k = 4k \\
f(4k + 1) &amp;= 4k \oplus (4k + 1) = 4k \oplus (4k \oplus 1) = (4k \oplus 4k) \oplus 1 = 0 \oplus 1 = 1 \\
f(4k + 2) &amp;= 1 \oplus (4k + 2) = 4k + 3 \\
f(4k + 3) &amp;= (4k + 3) \oplus (4k + 3) = 0 \\
\end{aligned}
\]</span></p>
<p>据此，证明完毕。</p>
]]></content>
      <categories>
        <category>【杂谈】数学</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年 2 月论文笔记</title>
    <url>/2022/01/18/paper-2022-02/</url>
    <content><![CDATA[<p>2022 年 2 月，主要工作为可微渲染相关方向。</p>
<span id="more"></span>
<h1 id="soft-rasterizer---a-differentiable-renderer-for-image-based-3d-reasoning">Soft Rasterizer - A Differentiable Renderer for Image-based 3D Reasoning</h1>
<h2 id="工作概述">工作概述</h2>
<p>主要思想还是想把逆向渲染管线（通过二维图像推理三维模型的参数）和神经网络结合，但是最大的问题是管线中的光栅化是离散化操作，可能导致不可微。一些其他的工作在尝试<strong>近似估算</strong>梯度，但是这个工作提出了一种真正可微的框架，能做到：</p>
<ul>
<li>直接用可微函数渲染染色的网格</li>
<li>能从轮廓、阴影等各种二维图像信息有效反向传递为网格顶点参数</li>
</ul>
<p>这个工作的重点是把渲染过程的部分看作<strong>聚合函数（Aggregation function）</strong>，该函数联系了三维模型的网格三角形的概率分布以及其渲染出来的像素。</p>
<div class="note info no-icon"><p>看起来标题中的 Soft 的含义就是使用概率分布的方式来把离散的光栅化变成可微的，最初始的光栅化一般会涉及到离散采样（即确定每一个离散的像素是否要显示网格上的某一个三角形），这也是不可微性的来源。</p>
</div>
<p>本论文主要讲述了如何通过 Soft rasterization 框架实现可微的光栅化以保证渲染管线的可微性，基于此，该渲染框架即可方便地接入神经网络以将二维图像信息反向传播到三维模型。同时，本论文也会指出近期的近似估算梯度的方式（使用 hand-crafted 的函数近似表示梯度）并不具有泛用性，且可能会降低三维模型信息更新的效率。</p>
<h3 id="softras-与传统光栅化">SoftRas 与传统光栅化</h3>
<p>SoftRas 在将模型投影到平面上的时候，会将模型转换为投影平面上的概率分布。而传统光栅化则是转化为具体某个像素是否染色。</p>
<p>另外，似乎 SoftRas 对遮挡的处理也和传统渲染管线的 z-buffer 不一样。传统光栅化会使用 onehot 的方式处理遮挡（应该指的是处理为完全遮挡），而 SoftRas 也会基于概率分布做出不同处理。</p>
<h2 id="相关工作">相关工作</h2>
<h3 id="可微渲染">可微渲染</h3>
<p>主要关注如何描述二维图像变化和三维模型操作的关系，主要解决如何从二维图像重建三维场景。考虑给定的二维图片 <span class="math inline">\(A\)</span>，首先粗略初始化一个三维场景 <span class="math inline">\(B&#39;\)</span>，然后通过渲染管线渲染得到二维图片 <span class="math inline">\(B\)</span>。计算 <span class="math inline">\(A\)</span> 和 <span class="math inline">\(B\)</span> 的 loss，将其梯度反向传播给三维场景 <span class="math inline">\(B&#39;\)</span> 的参数，更新之。这里反向传播就是可微渲染最重要的步骤，即如何计算梯度，因为三维场景参数更新量取决于 loss 对参数的偏导数。</p>
<p>先前提到，这里获取梯度有困难。有些工作使用估计梯度的方式进行，有些工作可以精确计算梯度但是不具有泛用性。</p>
<h3 id="基于图像的三维推理">基于图像的三维推理</h3>
<p>依然考虑从二维图像重建三维场景。传统方法往往要求获得从多个角度观察得到的二维图像，而由于数据集的扩大，基于学习的重建方法可以使用一张或少量二维图像来重建场景。部分工作会将重建三维场景拆分为首先重建 2.5 维的表示（深度表等）。</p>
<p>另外，姿态估计也是三位推理的一个重要的子任务。通过深度学习的方法，预测刚体姿态是较为简单的，而预测人体这类非刚体的姿态则较为困难。</p>
<h2 id="softras-基本原理">SoftRas 基本原理</h2>
<p>大约是这样的一个流程：</p>
<p><img src="/uploads/paper-2022-02/1.png" /></p>
<p>这里外部因素包含相机参数 <span class="math inline">\(\boldsymbol{P}\)</span> 和环境光照 <span class="math inline">\(\boldsymbol{L}\)</span>，内部因素包括网格信息 <span class="math inline">\(\boldsymbol{M}\)</span> 以及各个顶点的信息（如颜色、材质）<span class="math inline">\(\boldsymbol{A}\)</span>。</p>
<p>这里第一步要做的是获取三个中间信息，即网格法向量 <span class="math inline">\(\boldsymbol{N}\)</span>、视图空间（投影后的空间）各点坐标 <span class="math inline">\(\boldsymbol{U}\)</span> 以及 View dependent depths <span class="math inline">\(\boldsymbol{Z}\)</span>。这三个量只需要使用相机参数和网格信息即可得到。</p>
<p>之后可以使用例如 Phong 模型等着色模型计算出颜色 <span class="math inline">\(\boldsymbol{C}\)</span>。</p>
<p>进行到这一步，上述这些操作都是可微的。但是如果按照传统的渲染管线，下一步应该分别确定每一个网格三角形与每一个像素的对应（即光栅化），之后还要用 z-buffer 处理遮挡，这两步都因为离散采样从而是不可微的。</p>
<p>SoftRas 软化光栅化和 z-buffer 的方式是引入 probability maps <span class="math inline">\(\{\mathcal{D}_j\}\)</span> 和聚合函数 <span class="math inline">\(\mathcal{A}(\cdot)\)</span> 分别代替光栅化和 z-buffer。这里 <span class="math inline">\(\mathcal{D}_j\)</span> 表示的是每一个像素在网格三角形 <span class="math inline">\(f_j\)</span> 内部的概率在平面上的分布。而聚合函数 <span class="math inline">\(\mathcal{A}(\cdot)\)</span> 联系起了 probability maps 以及深度信息，作为整个后续渲染流程的代表。</p>
<h3 id="probability-maps-计算">probability maps 计算</h3>
<p>考虑网格三角形在屏幕上的投影 <span class="math inline">\(f_j\)</span> 和屏幕上的像素 <span class="math inline">\(p_i\)</span>，记在屏幕上 <span class="math inline">\(p_i\)</span> 到 <span class="math inline">\(f_j\)</span> 的边最近距离为 <span class="math inline">\(d(i, j)\)</span>。显然，这个距离越小的像素点，出现在内部的概率越大。由于其可以反映三角形对屏幕的影响，并且其可微，所以可以用此作为 probability maps 的代表。随后通过添加控制常数、符号标记并归一化到 <span class="math inline">\((0, 1)\)</span> 内之后，我们得到了 probability maps 的公式：</p>
<p><span class="math display">\[
\mathcal{D}_{i, j} = \mathrm{sigmoid}\left(\delta_{i, j}\cdot\frac{d^2(i, j)}{\sigma}\right)
\]</span></p>
<p>这里 <span class="math inline">\(\sigma\)</span> 是一个正常数，一般默认为 <span class="math inline">\(1\times 10^{-4}\)</span>。而 <span class="math inline">\(\delta_{i, j}\)</span> 标记了 <span class="math inline">\(p_i\)</span> 是否在 <span class="math inline">\(f_j\)</span> 之中。若在，则 <span class="math inline">\(\delta_{i, j} = 1\)</span>，否则 <span class="math inline">\(\delta_{i, j} = -1\)</span>。</p>
<p>下图展示了 <span class="math inline">\(d(i, j)\)</span> 的定义以及 <span class="math inline">\(\sigma\)</span> 常数对概率分布的影响：</p>
<p><img src="/uploads/paper-2022-02/2.png" /></p>
<p>显然看出 <span class="math inline">\(\sigma\)</span> 越大，概率分布就越模糊。</p>
<p>另外一个显然的点是 <span class="math inline">\(\sigma \to 0\)</span> 的时候概率分布中三角形外的点概率密度为 <span class="math inline">\(0\)</span>，而三角形内的点为 <span class="math inline">\(1\)</span>。此时 SoftRas 退化为一般的光栅化。</p>
<h3 id="聚合函数">聚合函数</h3>
<p>我们考虑最后一个阶段，这里我们需要根据深度信息、 probability maps 以及颜色信息计算出最后的渲染结果。</p>
<p>最后渲染结果中，像素 <span class="math inline">\(p_i\)</span> 的渲染结果用聚合函数表示，定义为：</p>
<p><span class="math display">\[
I_i = \mathcal{A}_S(\{C_j\}) := \sum_j w_{i, j}C_{i, j} + w_{i, b}C_b
\]</span></p>
<p>这里渲染结果定义为一系列颜色信息的加权求和，颜色构成的集合为 <span class="math inline">\(\{C_j\}\)</span>，符号 <span class="math inline">\(C_{i, j}\)</span> 表示三角形 <span class="math inline">\(f_j\)</span> 在像素 <span class="math inline">\(p_i\)</span> 处的颜色。而 <span class="math inline">\(C_b\)</span> 表示背景颜色。</p>
<p>权重 <span class="math inline">\(w_{i, j}\)</span> 至少满足归一化条件：</p>
<p><span class="math display">\[
w_{i, b} + \sum_j w_{i, j} = 1
\]</span></p>
<p>而权重的具体值取决于先前得到的 probability maps 以及深度信息。我们将三角形 <span class="math inline">\(f_j\)</span> 中投影到 <span class="math inline">\(p_i\)</span> 像素的点的逆深度记为 <span class="math inline">\(z_{i, j}\)</span>。概率分布沿用先前的符号。定义：</p>
<p><span class="math display">\[
w_{i, j} := \frac{\mathcal{D}_{i, j}\exp(z_{i, j} / \gamma)}{\sum_k \mathcal{D}_{i, k}\exp(z_{i, k} / \gamma) + \exp(\varepsilon / \gamma)}
\]</span></p>
<p>依据归一化条件就有：</p>
<p><span class="math display">\[
w_{i, b} := \frac{\exp(\varepsilon / \gamma)}{\sum_k \mathcal{D}_{i, k}\exp(z_{i, k} / \gamma) + \exp(\varepsilon / \gamma)}
\]</span></p>
<div class="note info no-icon"><p>可以看出权重的计算公式其实是类似 Softmax 函数：</p>
<p><span class="math display">\[
{\rm softmax}(z_1, z_2, \cdots, z_n)_j = \frac{e^{z_j}}{\sum_i e^{z_i}}
\]</span></p>
</div>
<p>这里可以看出 <span class="math inline">\(\varepsilon\)</span> 是一个小正常数，其作用是将背景颜色纳入计算。<span class="math inline">\(\gamma\)</span> 是一个调节清晰度的正常数，与计算 probability maps 的 <span class="math inline">\(\sigma\)</span> 类似，默认值一般是 <span class="math inline">\(1 \times 10^{-4}\)</span>。</p>
<p>可以看出，具有更大概率密度的，且离投影平面更近的（即具有更大逆深度的）三角形会获得更大的权重，这符合直觉。</p>
<hr />
<p>现在考虑退化。针对像素 <span class="math inline">\(p_i\)</span>，假设 <span class="math inline">\(z_{i, 1} &lt; z_{i, 2} &lt; \cdots &lt; z_{i, N}\)</span>，考虑 <span class="math inline">\(\gamma\to 0\)</span>。首先考察 <span class="math inline">\(j = N\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
w_{i, N} &amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, N}\exp(z_{i, N} / \gamma)}{\sum_k \mathcal{D}_{i, k}\exp(z_{i, k} / \gamma) + \exp(\varepsilon / \gamma)} \\
&amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, N}}{\sum_k \mathcal{D}_{i, k}\exp((z_{i, k} - z_{i, N}) / \gamma) + \exp((\varepsilon - z_{i, N}) / \gamma)} \\
&amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, N}}{\sum_{k = 1}^{N - 1} \mathcal{D}_{i, k}\exp((z_{i, k} - z_{i, N}) / \gamma) + \mathcal{D}_{i, N} + \exp((\varepsilon - z_{i, N}) / \gamma)} \\
&amp;= 1
\end{aligned}
\]</span></p>
<p>最后一步注意到 <span class="math inline">\(z_{i, N}\)</span> 大于任何 <span class="math inline">\(z_{i, k}(k &lt; N)\)</span>，故有这样的结果。而对于 <span class="math inline">\(j &lt; N\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
w_{i, j} &amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, j}\exp(z_{i, j} / \gamma)}{\sum_k \mathcal{D}_{i, k}\exp(z_{i, k} / \gamma) + \exp(\varepsilon / \gamma)} \\
&amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, N}}{\sum_k \mathcal{D}_{i, k}\exp((z_{i, k} - z_{i, j}) / \gamma) + \exp((\varepsilon - z_{i, j}) / \gamma)} \\
&amp;= \lim_{\gamma\to 0}\frac{\mathcal{D}_{i, N}}{\left(\sum_{k = 1}^{j - 1} + \sum_{k = j + 1}^{N}\right) \mathcal{D}_{i, k}\exp((z_{i, k} - z_{i, N}) / \gamma) + \mathcal{D}_{i, N} + \exp((\varepsilon - z_{i, N}) / \gamma)} \\
&amp;= 0
\end{aligned}
\]</span></p>
<p>这里要注意到分母上 <span class="math inline">\(\sum_{k = j + 1}^{N}\)</span> 的部分最终会趋向于正无穷，整体极限为 <span class="math inline">\(0\)</span>。最后根据归一化条件也有 <span class="math inline">\(w_{i, b} = 0\)</span>。</p>
<p>结合这样的推理，可以看出：</p>
<p><span class="math display">\[
I_i = \mathcal{A}_S(\{C_j\}) = C_{i, N}
\]</span></p>
<p>也就是说最后渲染的结果只考虑了最近的网格三角形，这也就是 z-buffer 方法。</p>
<hr />
<p>似乎还有一个和轮廓相关的聚合函数：</p>
<p><span class="math display">\[
I_{i, S} = \mathcal{A}_O(\{\mathcal{D}_j\}) := 1 - \prod_j (1 - \mathcal{D}_{i, j})
\]</span></p>
<p>这里没有出现颜色项，这是因为轮廓的颜色一般设定为常数。这里聚合函数形式上实际上就是计算出了像素 <span class="math inline">\(p_i\)</span> 被至少一个三角形覆盖的概率。</p>
<h2 id="实验内容">实验内容</h2>
<h3 id="single-view-mesh-reconstruction">Single-View Mesh Reconstruction</h3>
<p>使用这样的结构：</p>
<p><img src="/uploads/paper-2022-02/3.png" /></p>
<p>这里固定了渲染管线中的外部变量，即固定了相机位置和环境光照。每一个输入图片都会进入 color generator 和 shape generator 生成三维模型参数 <span class="math inline">\(\boldsymbol{C}\)</span> 和 <span class="math inline">\(\boldsymbol{M}\)</span>。随后后续接入 SoftRas，渲染得到带颜色的图像 <span class="math inline">\(I_C\)</span> 和轮廓 <span class="math inline">\(I_S\)</span>，最后和原先图像比较计算 loss。</p>
<p>最后定义的 loss 分为三部分。在叙述定义之前，我们将原始图像的颜色和轮廓定义为 <span class="math inline">\(\hat I_C\)</span> 以及 <span class="math inline">\(\hat I_S\)</span>：</p>
<ul>
<li>color loss。定义为颜色之差的 1- 范数：</li>
</ul>
<p><span class="math display">\[
\mathcal{L}_C := \|I_C - \hat I_C\|_1
\]</span></p>
<ul>
<li>silhouette loss。定义为，这里使用 <span class="math inline">\(\otimes\)</span> 表示逐元素求积，<span class="math inline">\(\oplus\)</span> 表示逐元素求和：</li>
</ul>
<p><span class="math display">\[
\mathcal{L}_S := 1 - \frac{\|I_S \otimes \hat I_S\|_1}{\|I_S \oplus \hat I_S - I_S \otimes \hat I_S\|_1}
\]</span></p>
<ul>
<li>geometry loss。作用是对 loss 进行 L1 正则化。</li>
</ul>
<p>最后定义的 loss 是这三部分的加权求和：</p>
<p><span class="math display">\[
\mathcal{L} := \mathcal{L}_S + \lambda\mathcal{L}_C + \mu\mathcal{L}_G
\]</span></p>
<p>这里论文主要提了一下 color generator 的结构：</p>
<p><img src="/uploads/paper-2022-02/4.png" /></p>
<p>似乎是提出了一种新结构，让颜色重建变为一个多分类问题，进而降低了时间复杂度。但是论文的描述中有若干的暂且不太清楚的名词，暂且把原文贴在这里以后再来看：</p>
<div class="note info no-icon"><p>Instead of directly regressing the color value, our color generator formulates color reconstruction as a classification problem that learns to reuse the pixel colors in the input image for each sampling point. Let <span class="math inline">\(N_c\)</span> denote the number of sampling points on <span class="math inline">\(\boldsymbol{M}\)</span> and <span class="math inline">\(H, W\)</span> be the height and width of the input image respectively. However, the computational cost of a naive color selection approach is prohibitive, i.e. <span class="math inline">\(O(HWN_c)\)</span>. To address this challenge, we propose a novel approach to colorize mesh using a color palette, as shown in Figure 7. Specifically, after passing input image to a neural network, the extracted features are fed into (1) a sampling network that samples the representative colors for building the palette; and (2) a selection network that combines colors from the palette for texturing the sampling points. The color prediction is obtained by multiplying the color selections with the learned color palette. Our approach reduces the computation complexity to <span class="math inline">\(O(N_d(HW + N_c))\)</span>, where <span class="math inline">\(N_p\)</span> is the size of color palette. With a proper setting of <span class="math inline">\(N_p\)</span>, one can significantly reduce the computational cost while achieving sharp and accurate color recovery.</p>
</div>
<h3 id="image-based-shape-fitting">Image-based Shape Fitting</h3>
<p>似乎依然是从图像重建模型，但是这个重建任务似乎和姿态预测有较为紧密的联系。</p>
<p>传统方法面临的问题依然是梯度不精确的问题，这样就导致反向传播较为困难。另外，传统方法也面临这样的问题：</p>
<ul>
<li><p>遮挡问题。传统方法中，被遮挡的三角形无法调整参数，而 SoftRas 允许被遮挡的三角形参与到运算中，所以这个问题可以解决。</p></li>
<li><p>局部最小值问题。我们希望误差反向传播可以传播到较大范围，即希望一次三维模型参数调整不局限于较小的局部，否则可能会导致模型收敛到局部最小值而非更优的结果。而 SoftRas 使用的概率分布算法允许全局的像素参与到运算中，所以理论上误差可以传播到较大范围，这个问题可以解决。</p></li>
</ul>
<p>所以最后就直接使用这样的方式训练就行了：</p>
<p><span class="math display">\[
\{\rho, \theta, t\} = \mathop{\mathrm{argmin}}_{\rho, \theta, t}\|R(M(\rho, \theta, t)) - I_t\|_2
\]</span></p>
<p>这里 <span class="math inline">\(\rho, \theta, t\)</span> 是三维模型的参数，分别是非刚体形变参数、姿态角度、转换参数（或许就是视图转换的参数），<span class="math inline">\(M(\cdot)\)</span> 将这些参数转换为网格，<span class="math inline">\(R(\cdot)\)</span> 是渲染函数，<span class="math inline">\(I_t\)</span> 则是目标图像。这个训练方式也就是机器学习的通式。</p>
<h2 id="实验结果">实验结果</h2>
<h3 id="single-view-mesh-reconstruction-1">Single-View Mesh Reconstruction</h3>
<p>实验结果看确实挺好的，下面展示的是不带颜色的网格重建：</p>
<p><img src="/uploads/paper-2022-02/5.png" /></p>
<p>颜色似乎也重建得挺好：</p>
<p><img src="/uploads/paper-2022-02/6.png" height="50%" width="50%" /></p>
<p>使用的评价方法是 3D IoU，即 3D Intersection over Union。这是一种物体检测领域的评价函数。二维情况下的 IoU 定义如下图所示。这里的矩形均指代物体的包围盒，分别为实际的包围盒和模型预测的包围盒：</p>
<p><img src="/uploads/paper-2022-02/7.png" height="50%" width="50%" /></p>
<p>SoftRas 的平均 3D IoU 超出了 state-of-art 的 NMR 的 3D IoU 约 4.5 点，从而说明在网格重建任务上 SoftRas 的表现超出了传统方法。</p>
<p>另外似乎还有一项称为 Ablation Study 的后续实验，这里省略。</p>
<h3 id="image-based-shape-fitting-1">Image-based Shape Fitting</h3>
<p>首先实验刚体结构预测，这里采用六面着不同色的正方体。给定渲染后图像，要求给出正方体应当旋转的角度。SoftRas 和 NMR 的实验结果如下：</p>
<p><img src="/uploads/paper-2022-02/8.png" /></p>
<p>可以发现 SoftRas 成功获得了最后的结果，而 NMR 则收敛到了一个局部最小值无法得到正确结果。</p>
<p>论文认为 NMR 失败的原因正是因为六个面的相互遮挡，这导致了 NMR 无法越过局部最小值。</p>
<p>另外其也做了大量实验，表明 SoftRas 预测的旋转角度误差严格优于 NMR，在不优化的情况下，SoftRas 的角度误差平均比 NMR 低 <span class="math inline">\(10.60^\circ\)</span>。</p>
<p>这里似乎涉及到 <span class="math inline">\({\rm SO}(3)\)</span> 旋转群的一些东西，后面再来研究吧。</p>
<hr />
<p>非刚体结构预测则选用了人体结构预测，这里初始化时人的右手位于背后，而目标图像中右手已经移动到前面，实验目标是将手移出来。显然 NMR 依然因为无法处理遮挡，最后没有能够完成任务。而 SoftRas 完成了：</p>
<p><img src="/uploads/paper-2022-02/9.png" /></p>
<h2 id="附录梯度计算">附录：梯度计算</h2>
<p>我们现在研究一下 SoftRas 渲染出来的图像 <span class="math inline">\(\boldsymbol{I}\)</span> 对网格参数 <span class="math inline">\(\boldsymbol{M}\)</span> 的梯度，这个梯度也就是在反向传播的时候要计算的值。首先显然有：</p>
<p><span class="math display">\[
\frac{\partial\boldsymbol{I}}{\partial\boldsymbol{M}} = \frac{\partial\boldsymbol{I}}{\partial\boldsymbol{U}}\frac{\partial\boldsymbol{U}}{\partial\boldsymbol{M}} + \frac{\partial\boldsymbol{I}}{\partial\boldsymbol{Z}}\frac{\partial\boldsymbol{Z}}{\partial\boldsymbol{M}} + \frac{\partial\boldsymbol{I}}{\partial\boldsymbol{N}}\frac{\partial\boldsymbol{N}}{\partial\boldsymbol{M}}
\]</span></p>
<p>这里显然可以看出 <span class="math inline">\(\dfrac{\partial\boldsymbol{U}}{\partial\boldsymbol{M}}, \dfrac{\partial\boldsymbol{Z}}{\partial\boldsymbol{M}}, \dfrac{\partial\boldsymbol{N}}{\partial\boldsymbol{M}}\)</span> 是可以简单计算的，因为 <span class="math inline">\(\boldsymbol{U}, \boldsymbol{Z}, \boldsymbol{N}\)</span> 都可以由 <span class="math inline">\(\boldsymbol{M}\)</span> 通过简单的视图变换得到，由变换矩阵即可推算偏导数。</p>
<p>而根据着色模型，<span class="math inline">\(\dfrac{\partial\boldsymbol{I}}{\partial\boldsymbol{N}}\)</span> 也是可以计算的。</p>
<p>剩余的两个梯度中，<span class="math inline">\(\dfrac{\partial\boldsymbol{I}}{\partial\boldsymbol{Z}}\)</span> 直接和聚合函数相关，而 <span class="math inline">\(\dfrac{\partial\boldsymbol{I}}{\partial\boldsymbol{U}}\)</span> 经过了两层，分别是概率分布计算和聚合函数，所以我们需要拆解：</p>
<p><span class="math display">\[
\dfrac{\partial\boldsymbol{I}}{\partial\boldsymbol{U}} = \dfrac{\partial\boldsymbol{I}}{\partial\mathcal{D}}\dfrac{\partial\mathcal{D}}{\partial\boldsymbol{U}}
\]</span></p>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年 8 月论文笔记</title>
    <url>/2022/06/10/paper-2022-08/</url>
    <content><![CDATA[<p>这个月主要是刚刚进入流媒体相关的方向，需要阅读一些论文来了解目前的发展。</p>
<span id="more"></span>
<h1 id="stick---a-harmonious-fusion-of-buffer-based-and-learning-based-approach-for-adaptive-streaming">Stick - A Harmonious Fusion of Buffer-based and Learning-based Approach for Adaptive Streaming</h1>
<h2 id="introduction">Introduction</h2>
<p>首先考虑到现实应用背景，视频流传输已经占据了大部分的网络传输带宽。但视频传输的问题在于视频内容的多样性和可能的网络波动。一种可能的解决方案是使用 Adaptive bitrate (ABR) 算法，这些算法已经被证实可以提供高 QoE 的传输服务。</p>
<p>传统的 ABR 算法往往是 buffer-based 的（例如 BBA 和 BOLA），这些算法通过固定的 buffer 和参数来选定下一个视频块的码率，这可能难以在波动网络环境下保证 QoE。</p>
<p>另一方面，基于深度强化学习（DRL）的 ABR 算法 Pensieve 却给出了 state-of-the-art 的表现。在实践上，这类算法也常常部署在服务器侧以避免客户端的高计算开销。但是考虑到 ABR 算法往往需要部署在前端以避免连接后端的网络延迟，这使得这类算法理论可用但是并不实际。</p>
<p>那么我们可以将这两种方法结合起来，使用 DRL 来强化 buffer-based 的方法，同时使用固定的缓冲区限制来限制计算开销。从而该论文提出了 Stick 框架，该框架将 QoE 参数、网络状态、视频特征作为输入参数，而缓冲区限制（连续的标量）作为其输出。</p>
<p>考虑到连续的动作空间，我们计划使用 Deep deterministic policy gradient (DDPG) 来从头开始训练模型。此外，Stick 在无假设条件下通过和 ABR 环境交互来学习策略。</p>
<p>为了保证计算效率，我们进一步提出了 Trigger。Trigger 会观测当前和先前的缓冲区限制，只在必要的时候激活 Stick 来更新缓冲区限制。Trigger 使用 imitation learing 方法来学习专家行为。同时，为了克服数据的无偏分布【Question #1】，我们使用了 prioritized experience replay 来存储专家策略。同时，该论文还提出了一种可以让其他 ABR 算法框架接入 Trigger 的方法。</p>
<p>这篇论文的重点在于：</p>
<ul>
<li>首次提出结合 buffer-based 方法和 learning-based 方法</li>
<li>通过 Stick，可以使用更小的模型实现比已有方法更好的效果</li>
<li>通过 Trigger，证明轻量级模型可以有效降低计算开销</li>
</ul>
<h2 id="buffer-based-learning-based-abr-algorithm">Buffer-based &amp; learning-based ABR algorithm</h2>
<p>BBA 只根据当前缓冲区限制来选定下一个视频块的码率。具体而言，其将对吞吐量的估计固定为启动态额吞吐量以克服吞吐量的波动，之后在稳定态时，使用缓冲区限制 <span class="math inline">\(\{B_{\rm min}, B_{\rm max}\}\)</span> 来获取块映射，块映射的作用是将缓冲区占用情况映射为码率。</p>
<p>而这个映射也是简单的分块线性映射，缓冲区占用低于 <span class="math inline">\(B_{\rm min}\)</span> 时下一个视频块码率为低码率 <span class="math inline">\(R_{\rm min}\)</span>，缓冲区占用高于 <span class="math inline">\(B_{\rm max}\)</span> 时下一个视频块码率为高码率 <span class="math inline">\(R_{\rm max}\)</span>，位于这两者之间的时候使用线性函数决定。</p>
<p>这个方法大部分情况下简单且有效，但是也在许多条件下效果不理想。原因是 BBA 使用的固定参数应当根据应用环境做出相应的调整。</p>
<p>而 learning-based ABR，例如 Pensieve 则给出了较好的理论结果，但是该方案并不容易应用到现实中。此外，Pensieve 也在部分应用环境下效果不理想。</p>
<h2 id="key-ideas">Key ideas</h2>
<p>总结起来是这样的几点：</p>
<ul>
<li>使用 DRL 的方法调整 ABR 的参数，避免使用查表或者预训练模型造成的过大存储和计算成本</li>
<li>模型的状态空间需要考虑全面，不仅包括当前缓冲区限制，还要包括网络状况和视频特征
<ul>
<li>此外，实验发现 Stick 可以仅使用一个参数控制缓冲区，而非两个参数</li>
</ul></li>
<li>QoE 要求会被作为 goal 输入模型，该参数会随机初始化，这会让模型意识到 QoE 参数和 feedback reward 之间的关系</li>
<li>使用轻量级的 Trigger 来决定是否需要通过 Stick 更新缓冲区限制，以降低计算成本</li>
</ul>
<h2 id="system-overview">System overview</h2>
<p>整体的框架可以表现为：</p>
<p><img src="/uploads/paper-2022-08/1.png" /></p>
<h3 id="stick-mechanism">Stick mechanism</h3>
<p>Stick 的结构图可以表示为：</p>
<p><img src="/uploads/paper-2022-08/2.png" /></p>
<h4 id="design">Design</h4>
<p>首先叙述状态空间的构造：</p>
<ul>
<li><span class="math inline">\(T\)</span> 为由客户端测量的前 <span class="math inline">\(k\)</span> 个序列的吞吐量</li>
<li><span class="math inline">\(d\)</span> 为前 <span class="math inline">\(k\)</span> 个序列的下载时间</li>
<li><span class="math inline">\(q\)</span> 为上一个视频块选定的码率</li>
<li><span class="math inline">\(r\)</span> 为视频剩余播放时间</li>
<li><span class="math inline">\(b\)</span> 为当前缓冲区占有情况</li>
<li><span class="math inline">\(S\)</span> 为表示下一个视频块大小的向量</li>
<li><span class="math inline">\(g\)</span> 为 QoE goal 参数，由 <span class="math inline">\(\mu, \tau\)</span> 构成</li>
</ul>
<p>动作空间则是一个连续标量 <span class="math inline">\(B \in [0, {\rm buffer}_{\rm max}]\)</span>，用于控制缓冲区限制。</p>
<p>奖励函数则根据不同的 <span class="math inline">\(g\)</span>，使用经典的线性 QoE 指标来构造。</p>
<h4 id="training-methodology-implementation">Training methodology &amp; Implementation</h4>
<p>【这一部分在阅读完 DPG 相关论文之后再具体展开】</p>
<h3 id="trigger">Trigger</h3>
<p>Trigger 的一个核心思想在于，如果 Stick 在连续两个视频块上给出相同的结果，那么其第二次计算是无用的。而实验证明，无用操作可能占比达到 30%，所以我们的目标就是用 Trigger 去判别哪些操作是无用的。</p>
<p>现在考量 Trigger 的状态空间。根据 Related work，网络吞吐量是我们需要考虑的重要参数。但是我们也发现了，先前的缓冲区占用情况也是一个重要特征，其可以揭示网络环境状态和视频块大小之间的隐藏关系。</p>
<p>所以我们最终令 Trigger 的输入是先前的网络吞吐量、缓冲区大小和现在的缓冲区限制。而输出是一个二维向量，表示 Stick 保持或者改变当前缓冲区限制的概率。</p>
<hr />
<p>使用 imitation learning 来训练 Trigger，这种方法能够根据 expert demonstration 给出预期的结果。训练的算法可以表示为：</p>
<p><img src="/uploads/paper-2022-08/3.png" /></p>
<hr />
<p>另外，我们需要关注训练数据集分布的问题。论文使用的数据集中有 83% 的操作是无用操作，这种分布不均匀的数据集和理想的 50%-50% 数据集差距过大，可能导致特征训练不均衡。所以这里使用了 Prioritized experience replay 方法来重新平衡数据集。</p>
<p>关于这个方法的介绍可以参考 <a href="https://paperswithcode.com/method/prioritized-experience-replay">这篇文章</a>。</p>
<p>之后讨论如何将 Trigger 应用到其他的 ABR 算法上。</p>
<p>【这一部分在阅读完 DPG 相关论文之后再具体展开】</p>
<h2 id="evaluation">Evaluation</h2>
<p>介绍了使用的实验环境、数据集、训练方式、Baseline 的选取、QoE 指标的计算公式等等。</p>
<p>首先在一个数据集上，实验证明了 Stick 输出单参数的表现并不比双参数差很多，甚至在一些条件下能得到更好的 QoE 指标。</p>
<p>之后通过实验说明了 Stick 在各种数据集上都表现出了比 buffer-based 方法更为优秀的性能。</p>
<p>有关比较性能，论文里面有这样一句被强调的话：</p>
<div class="note success"><p>Note that Stick only utilize onequarter number of neurons that of Pensieve.</p>
<p>感觉是一种简单的强大。</p>
</div>
<p>之后还探讨了不同 QoE 指标下 Stick 的表现，探讨了 Trigger 的网络结构（全连接、LSTM 还是 CNN），做了一些进一步的 Evaluation，这里就不具体展开了。</p>
<h1 id="neural-adaptive-video-streaming-with-pensieve">Neural Adaptive Video Streaming with Pensieve</h1>
<h2 id="introduction-1">Introduction</h2>
<p>现行的 ABR 算法在选择下一个视频块的码率的时候往往面临下述四个问题：</p>
<ul>
<li>网络吞吐量的不稳定</li>
<li>部分 QoE 指标内存在相互矛盾的要求（如高质量和尽可能减少缓冲）</li>
<li>当前码率选择可能对未来的选择产生影响</li>
<li>ABR 的决策可能是粗粒度的</li>
</ul>
<p>现行的大部分 ABR 方法都依赖于对网络吞吐的估计或者对缓冲区大小的估计，所以其难以应对网络吞吐的不稳定。比如说 SOTA 方法 MPC 依赖于对网络吞吐量的预估，原文：</p>
<div class="note info no-icon"><p>However, MPC’s performance relies on an accurate model of the system dynamics - particularly, a forecast of future network throughput.</p>
</div>
<p>这样的限制使得 MPC 对预测结果的偏差十分敏感。</p>
<p>从而本文提出了 Pensieve，该方法会自动学习 ABR 算法，而不需要任何的预训练的控制规则或者对运行环境的假设条件。Pensieve 是基于强化学习的，其完全通过其与环境交互的经验学习。Pensieve 的核心为一个神经网络，该神经网络代表了 Pensieve 所采取的针对网络环境的策略。该网络接受的输入为各种对网络环境的原始观测数据（吞吐量采样、回放缓冲区占用率、视频块尺寸等），而其输出则为下一个视频块应当采取的码率。该网络的训练方式为 A3C。</p>
<p>Pensieve 的训练方式的核心则是一个模拟器，用于将大规模的网络跟踪信息数据库回放给 Pensieve，其划分粒度可以是块级别的，也可以是包级别的或者其他。Pensieve 的评测方式为将算法部署在一个 ABR 服务器上，令算法不断给出下一个视频块应当采取的码率，这样做可以避免在客户端上进行繁重的神经网络计算。</p>
<p>最后 Pensieve 在几乎所有的网络环境和 QoE 指标上持平或超过现有最佳的 ABR 算法。</p>
<h2 id="background">Background</h2>
<p>当前占主导地位的视频分发策略为 HTTP-based adaptive streaming，而其标准化技术为 DASH，即 Dynamic Adaptive Streaming over HTTP。而 DASH 的流程可以大致描述为下图：</p>
<p><img src="/uploads/paper-2022-08/4.png" /></p>
<ul>
<li>首先播放器向服务器获得认证</li>
<li>服务器应答一个保存有实际视频数据的 CDN 地址，并且列出所有可选码率</li>
<li>播放器使用 ABR 算法逐个请求视频块，视频块下载完成后渲染到屏幕上播放</li>
</ul>
<p>这里 ABR 算法几乎决定了整体的视频传输性能，其面临的若干挑战已经在 Introduction 部分给出了基本的介绍，这里稍加详细叙述。</p>
<ol type="1">
<li><p>ABR 算法并不能仅考虑网络情况，因为在类似蜂窝移动网络等不稳定网络条件下，我们难以预测未来的网络吞吐，最后往往仅能够获取到保守估计导致性能浪费，或者过高估计导致传输延迟。从而 ABR 也应当考虑缓冲区占有率等更为稳定的参数。</p></li>
<li><p>QoE 指标可能是相互冲突的。在带宽有限的网络环境中持续以最高码率请求视频可以保证视频质量，但是会升高缓冲率。相反，在不稳定的网络环境中，在任何时候选取当前网络环境能提供的最高码率会导致视频播放不平滑。</p></li>
<li><p>当前视频块的选择会对后续视频块的码率选择产生影响。其一，高码率视频块常常会导致后续视频块难以维持该高码率，因为可能导致缓冲。其二，为了保证视频播放平滑，ABR 算法不倾向于突然改变码率，所以后续视频块的码率并不会在当前码率基础上改变很大。</p></li>
<li><p>由于 ABR 算法能选择的码率范围被服务器给出的 Manifest file 限制，所以其选择往往是粗粒度的。有时网络环境会恰好落在某一个低码率过于浪费资源而稍高的码率就会导致缓冲的临界区域。</p></li>
</ol>
<h2 id="learning-abr-algorithms">Learning ABR Algorithms</h2>
<p>其首先将 Pensieve 和 Robust MPC 进行了对比，指出了 Robust MPC 的部分缺陷（基本还是先前部分提到的缺陷，只是使用了实验数据做了支持）。</p>
<p>这一部分似乎并没有写出很多新东西，还是先前部分的重复。</p>
<h2 id="design-1">Design</h2>
<h3 id="training-methodology">Training Methodology</h3>
<p>训练策略的核心是一个模拟视频下载流程的模拟器。其对于每一个视频块，模拟器会根据该视频块的码率以及网络状况生成下载耗时。在这一段时间，模拟器会缓慢消耗缓冲区内已经存在的视频块以模拟视频播放，之后再将该视频块压入缓冲区。模拟器会跟踪所有可能导致重新缓冲的事件，比如缓冲区剩余视频块长度小于正在下载的视频块需要的时间（这会导致已经缓冲的视频播放完成后新的视频块还未下载完毕）。另外一方面，如果当前缓冲区无法容纳新的视频块，那么模拟器会暂停下载 500 毫秒，之后重新开始请求。</p>
<p>在完成下载之后，模拟器会给出若干参数，比如当前缓冲区占有率、重新缓冲时间、视频块下载时间、（在所有可选码率下）下一个视频块的大小、该视频剩余的视频块数量等。这些参数的具体使用方式见后。</p>
<p>基于该模拟器，Pensieve 可以在很短的时间内学习一个本应占用长时间的视频下载流程。</p>
<p>虽然上述基于应用层行为的建模简单直接，但是实际上由于传输层复杂的行为，上述建模有可能并不精确。例如，播放器在缓冲区已满的条件下可能并不会在视频块下载完成后立刻请求下一个视频块，这可能导致传输层 TCP 回退到慢启动状态，这样可能并不能充分利用带宽。该问题实际上让 ABR 算法需要考虑的方面增多了，因为通常意义上快速填满缓冲区的策略会导致 TCP 慢启动从而造成事实上的低效率。</p>
<p>为了了解 TCP 慢启动造成的影响，设计的实验为在带宽 6 Mbps 的条件下不断以某一个恒定的码率请求视频块。得出的结论为，在启用 TCP 慢启动的条件下请求的码率越低带宽利用率越低，而不启用 TCP 慢启动的条件下所有码率均充分利用了带宽。</p>
<p>所以为了让模拟贴合现实，我们可以关闭服务器的 TCP 慢启动。虽然这可能导致流量的突变，但目前可以有其他的解决方案解决这一问题而不需要 Pensieve 来处理。</p>
<p>事实上上述模拟依然是不精确的，但是我们发现 Pensieve 依然可以通过上述不完整的模拟学习到高质量的 ABR 算法，这可能是由于 Pensieve 强大的泛用能力。</p>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年 9 月论文笔记</title>
    <url>/2022/09/20/paper-2022-09/</url>
    <content><![CDATA[<p>这个月正式参与进入了实验室和快手的一个合作项目，依然还是需要从论文先开始。</p>
<span id="more"></span>
<h1 id="causalsim---unbiased-trace-driven-network-simulation">CausalSim - Unbiased Trace-Driven Network Simulation</h1>
<h2 id="abstract-introduction">Abstract &amp; Introduction</h2>
<p>在测评网络协议在线上的实际性能的时候，虽然 RCT 方法是最为标准的，但是由于其极其昂贵，对周边基础设施的要求也很高，所以只有若干大型网络运营方才能支持这种测评方法。基于此，一般的研究所会选择网络模拟器或者 trace-based simulation。但是网络模拟器往往难以模拟出真实网络环境中的复杂情况，并且这类模拟器需要对网络环境的极其详细的掌握。而 trace-based simulation 又常常因为数据质量不高或者有偏导致测评不精确。</p>
<p>【RCT 方法之后看论文】</p>
<p>应用反事实模拟以利用离线历史数据的主要思路为，首先获取在某一个给定网络条件下使用某一个网络协议时的 trajectory，而我们需要训练一个模型来预测在这个网络条件下使用其他网络协议的时候的 trajectory。基于这个模型，我们只需要已知一个协议的性能，就能够得知新协议的性能表现而不需要实际部署该协议。</p>
<p>使用反事实模拟的好处包括：</p>
<ul>
<li>节省部署协议和使用 RCT 方法评测的成本</li>
<li>能够在完全一致的网络条件下比较不同协议的差异</li>
<li>使用模型进行反事实模拟得到的数据可在社区内交流，帮助无法访问大型网络以测试其协议设计的开发者</li>
</ul>
<p>当然，反事实模拟的方法是困难的，原因之一是用于采集观测数据的策略可能破坏无偏性，这一点我们后续阐述。</p>
<p>那么本文的核心成果就是：</p>
<div class="note info no-icon"><p>We present CausalSim, a framework for learning <strong>unbiased trace-driven counterfactual simulation models</strong> for network protocols.</p>
</div>
<h2 id="motivation">Motivation</h2>
<p>总体而言，该文章尝试解决的问题依然是，考虑到直接线上测试算法性能较为耗时且代价较大，能否：</p>
<ul>
<li>使用历史数据预测算法的性能</li>
<li>服务运营商能否使用历史数据构建一个模拟器使得开发者可以在不接触实际网络环境的条件下评测算法</li>
</ul>
<h3 id="the-problem-of-trace-driven-network-simulation">The problem of trace-driven network simulation</h3>
<p>这一部分假设了一个新算法 FabABR，然后在 Puffer 数据集上收集了类似 BOLA-BASIC、BBA、Fugu 等已知的算法在给定的网络条件下的 buffer occupancy，令 BOLA-BASIC v1 充当新算法 FabABR，之后构建了两个模型来通过其他已知算法的 buffer occupancy 预测 FabABR 的 buffer occupancy，并和 ground truth 比较。</p>
<p>当然，在实际环境中，我们是没有 ground truth 的，因为我们没有新算法通过 RCT 方法评测得到的 buffer occupancy 作为 ground truth。</p>
<p>第一个模型是 ExpertSim。其原理为，在某个网络条件下，如果某个算法在时刻 <span class="math inline">\(t\)</span> 达成的吞吐率为 <span class="math inline">\(\hat c_t\)</span>，那么我们假设在该网络条件下，新算法达成的吞吐率也是 <span class="math inline">\(\hat c_t\)</span>。这也是该模型的首要假设，即不同算法对码率的决策不影响观测到的网络吞吐率，而这个假设广泛应用于各种模型。</p>
<p>在这个假设下，记时刻 <span class="math inline">\(t\)</span> 时的 buffer size 为 <span class="math inline">\(b_t\)</span>，而时刻 <span class="math inline">\(t + 1\)</span> 时的 buffer size 为 <span class="math inline">\(b_{t + 1}\)</span>，时刻 <span class="math inline">\(t\)</span> 的视频块时间为 <span class="math inline">\(T\)</span>，根据 FabABR 选择的码率该视频块的大小为 <span class="math inline">\(s_t\)</span>，那么：</p>
<p><span class="math display">\[
b_{t + 1} = \max\left(0, b_t - \frac{s_t}{\hat c_t}\right) + T
\]</span></p>
<p>第二个模型为 SLSim。其模型为两层全链接层，每层 128 个 ReLU 激活的神经元。该网络的输入为 <span class="math inline">\(b_t, \hat c_t, s_t\)</span>，输出为 <span class="math inline">\(b_{t + 1}\)</span>，符号的意义同上。由于我们具有 ground truth，我们就将其作为 supervisor 进行训练，loss 设定为 L2 loss。最后的实验结果为：</p>
<p><img src="/uploads/paper-2022-09/1.png" height="50%" width="50%" /></p>
<p>这里可以看见两种模型都不及 CausalSim 做出的预测。而这一差距的本质就是这两个模型都默认了不同算法对码率的决策不影响观测到的网络吞吐率，但实际上由于类似于 TCP 慢启动、和其他流量竞争等因素，不同的码率选择实际上会影响实际的吞吐率。而 Puffer 数据集实际上就能证明该假设错误：</p>
<p><img src="/uploads/paper-2022-09/2.png" height="50%" width="50%" /></p>
<p>可见不同算法影响了吞吐率的分布。这种错误的假设导致了数据的有偏。</p>
<h3 id="causal-inference-to-the-rescue">Causal inference to the rescue</h3>
<p>如果我们能够获取更深层次的网络情况而非仅仅是表层的吞吐率，我们完全就能修正原先的错误假设，这是因为我们可以将这些底层的网络情况视作独立于 ABR 算法的因素。</p>
<p>但是这些底层网络情况并不出现在数据集中，我们需要通过表层数据推测这些底层情况，而这也就是反事实推理介入的地方。</p>
<p>具体的设计见下述部分。</p>
<h2 id="model">Model</h2>
<h3 id="causal-dynamics">Causal dynamics</h3>
<p>我们给出这样的建模，令 <span class="math inline">\(o_t^\star\)</span> 表示时刻 <span class="math inline">\(t\)</span> 的时候系统观测到的表层数据，<span class="math inline">\(u_t\)</span> 表示时刻 <span class="math inline">\(t\)</span> 的时候系统的底层数据，<span class="math inline">\(a_t\)</span> 表示时刻 <span class="math inline">\(t\)</span> 时我们对系统做出的决策，那么系统行为可以建模为：</p>
<p><span class="math display">\[
o_{t + 1}^\star = \mathcal{F}_{\rm evolution}(o_t^\star, u_t, a_t)
\]</span></p>
<p>在 ABR 问题中，<span class="math inline">\(o_t^\star\)</span> 包括的因素有 buffer size、实际吞吐率、Min RTT、可选视频块大小，而 <span class="math inline">\(u_t\)</span> 包括的因素有瓶颈连接时间、竞争流量的数量、竞争流量的 congestion control。</p>
<p>此外，我们可以将 <span class="math inline">\(o_t^\star\)</span> 拆分为 <span class="math inline">\(o_t\)</span> 和 <span class="math inline">\(m_t\)</span>，这里 <span class="math inline">\(m_t\)</span> 是观测数据中受到底层数据所影响的部分，从而我们可以拆分出纯外部数据 <span class="math inline">\(o_t\)</span>，而后续我们所称呼的“观测数据”即指代 <span class="math inline">\(o_t\)</span>。这一步拆分后，建模可以变为：</p>
<p><span class="math display">\[
\begin{aligned}
m_t &amp;= \mathcal{F}_{\rm mediation}(a_t, u_t) \\
o_{t + 1} &amp;= \mathcal{F}_{\rm system}(o_t, m_t, a_t) \\
o_t^\star &amp;= [o_t, m_t]
\end{aligned}
\]</span></p>
<p>这里，我们需要说明的是 <span class="math inline">\(m_t\)</span> 是可观测的，而 <span class="math inline">\(u_t\)</span> 是潜在而不可观测的。另外，<span class="math inline">\(m_t\)</span> 受到决策的影响，而 <span class="math inline">\(u_t\)</span> 不受到决策的影响。</p>
<p>在 ABR 问题中，<span class="math inline">\(m_t\)</span> 就是我们实现的吞吐率，其不仅受到潜在网络环境影响，还受到 ABR 码率决策的影响，而这也就是先前两个策略失败的核心原因。此外，根据该建模，在得知吞吐率 <span class="math inline">\(m_t\)</span> 的信息之后，我们完全不需要了解其他信息即可推断出其他可观测的信息 <span class="math inline">\(o_t\)</span>。</p>
<h3 id="trace-driven-simulation-is-counterfactual-estimation">Trace-driven simulation is counterfactual estimation</h3>
<p>首先统一符号，我们假设数据集一共采用了 <span class="math inline">\(K\)</span> 种不同算法，一共生成了 <span class="math inline">\(N\)</span> 条 trajectory，我们记第 <span class="math inline">\(i\)</span> 个 trajectory 的长度为 <span class="math inline">\(H_i\)</span>。</p>
<p>那么我们的训练策略可以描述为，首先对于任何 <span class="math inline">\(i\)</span>，我们给出决策序列 <span class="math inline">\(\{\tilde a_t^i\}_{t = 1}^{H_i}\)</span>，给定初始观测 <span class="math inline">\(o_1^i\)</span>，并且我们确定所有 trajectory 均基于同一个潜在状态序列 <span class="math inline">\(\{u_t^i\}_{t = 1}^{H_i}\)</span>，我们的目的是预测出观测序列 <span class="math inline">\(\{\tilde o_t^i\}_{t = 1}^{H_i}\)</span>。</p>
<p>此外，我们注意到学习 <span class="math inline">\(\mathcal{F}_{\rm system}\)</span> 是完全监督的，因为所有需要的数据均可以观测。所以最终的困难点在于估计 <span class="math inline">\(\{u_t^i\}_{t = 1}^{H_i}, \{m_t^i\}_{t = 1}^{H_i}\)</span> 以及学习 <span class="math inline">\(\mathcal{F}_{\rm mediation}\)</span>。</p>
<h2 id="causalsim---key-insights">CausalSim - Key insights</h2>
<h3 id="counterfactual-estimation-as-matrix-completion">Counterfactual estimation as matrix completion</h3>
<p>这一步的核心在于将反事实推理等效为矩阵填充问题。我们假设动作空间大小为 <span class="math inline">\(A\)</span>，即 <span class="math inline">\(a_t^i \in \{1, 2, \cdots, A\}\)</span>，另外记：</p>
<p><span class="math display">\[
U := \sum_{i = 1}^NH_i
\]</span></p>
<p>那么我们考虑一个 <span class="math inline">\(A \times U\)</span> 的矩阵，其中每一行代表一种决策，每一列代表潜在状态。这里我们将第 <span class="math inline">\(i\)</span> 个 trajectory 的第 <span class="math inline">\(t\)</span> 时刻中所有的 <span class="math inline">\((i, t)\)</span> 按 <span class="math inline">\(i\)</span> 为主序数排列为长度为 <span class="math inline">\(U\)</span> 的序列，从而每一个 <span class="math inline">\((i, t)\)</span> 都能对应到 <span class="math inline">\(M\)</span> 中的某一列。</p>
<p>在第 <span class="math inline">\(i\)</span> 个 trajectory 的第 <span class="math inline">\(t\)</span> 时刻，我们观测到 <span class="math inline">\(m_t^i = \mathcal{F}_{\rm mediation}(a_t^i, u_t^i)\)</span>，而 <span class="math inline">\(m_t^i\)</span> 就是矩阵 <span class="math inline">\(M\)</span> 中 <span class="math inline">\(a_t^i\)</span> 所对应的行和 <span class="math inline">\((i, t)\)</span> 所对应的列处的已知元素，该列其余元素均为未知元素。也就是说我们在初始条件下，每一列都会有一个已知元素。</p>
<p>而现有的矩阵填充算法并不能直接应用到本问题上，因为本问题中的 <span class="math inline">\(M\)</span> 元素缺失的 pattern 并不随机并且缺失元素数量过多。但是另外一方面，矩阵 <span class="math inline">\(M\)</span> 显然具有更为优越的结构，因为元素缺失的 pattern 和已知的 ABR 算法决策流程相关，并且 <span class="math inline">\(N\)</span> 个 trajectory 的网络潜在条件是一致的。</p>
<h3 id="exploiting-the-policy-invarience-of-latent-factors">Exploiting the policy invarience of latent factors</h3>
<p>我们这里考虑一个简单情况，即 <span class="math inline">\(A = 2, U = 2n\)</span>，并且矩阵 <span class="math inline">\(M\)</span> 秩为 <span class="math inline">\(1\)</span>。这说明存在 <span class="math inline">\(a \in \mathbb{R}^2, u \in \mathbb{R}^{2n}\)</span> 满足 <span class="math inline">\(M = au^T\)</span>。之后我们令 <span class="math inline">\(K = 2\)</span>。</p>
<p>考虑到：</p>
<p><span class="math display">\[
\frac{M_{1, j}}{M_{2, j}} = \frac{a_1u_j}{a_2u_j} = \frac{a_1}{a_2}
\]</span></p>
<p>并且每一列必然有一个已知元素，所以我们只需要估计 <span class="math inline">\(a_1 / a_2\)</span>。</p>
<p>另外，基于两个 trajectory 均基于一致的网络潜在条件，所以对于较大的 <span class="math inline">\(n\)</span>，每一列的期望应当类似，所以有以下估计（这个估计我感觉比较奇怪，说理也比较不充分）：</p>
<p><span class="math display">\[
\frac{1}{n}\sum_{j = 1}^n u_j \approx \frac{1}{n}\sum_{j = n + 1}^{2n} u_j
\]</span></p>
<p>之后我们就可以得到下述估计：</p>
<p><span class="math display">\[
\frac{\sum_{j = 1}^n M_{1, j}}{\sum_{j = n + 1}^{2n} M_{2, j}} = \frac{\sum_{j = 1}^n a_1u_j}{\sum_{j = n + 1}^{2n} a_2u_j} \approx \frac{a_1}{a_2}
\]</span></p>
<p>从而我们得到了我们需要的估计，从而我们就能补充完整整个矩阵。</p>
<h2 id="causalsim---details">CausalSim - Details</h2>
<p>最后采用了这样的一个网络结构：</p>
<p><img src="/uploads/paper-2022-09/3.png" height="50%" width="50%" /></p>
<p>该网络的目标是为了获取不变的潜在条件 <span class="math inline">\(\{u_t^i\}_{t = 1}^{H_i}\)</span>，而完成这项任务的网络是 Policy Discriminator，其接受 <span class="math inline">\(\{u_t^i\}_{t = 1}^{H_i}\)</span> 作为输入，输出为其认为该行为决策是由哪一个算法做出的。由于其为一个简单的多分类任务，所以其 loss 就采用简单的交叉熵表示为：</p>
<p><span class="math display">\[
\mathcal{L}_{\rm disc} := \mathbb{E}_D[-\ln \mathbb{P}(\pi \mid \hat u)]
\]</span></p>
<p>而我们的目标是让 Policy Discriminator 的 loss 尽可能大，从而通过分类器无法区分各类算法保证抽取的潜在不变条件确实和具体的算法无关。</p>
<p>整个网络采用的 loss 为：</p>
<p><span class="math display">\[
\mathcal{L}_{\rm total} := \mathbb{E}_D[\delta(m_t^i - \hat m_t^i)^2 + (o_t^i - \hat o_t^i)^2] - \kappa\mathcal{L}_{\rm disc}
\]</span></p>
<h2 id="evaluation">Evaluation</h2>
<h3 id="a-real-world-abr-experiment">A real-world ABR experiment</h3>
<p>实验过程比较简单，问题出现在如何评测。因为 Puffer 数据集里每一个 trajectory 仅使用了一种算法跑过，所以实际上是无法对多个新算法进行评测的。所以其采用了评价变量分布的方式进行评测。即，不同的算法在不同的 trajectory 上运行，只要潜在网络因素不变，各类变量的分布应该是类似的。那么基于此，我们只要再做一次模拟，之后指定一个变量，评价两次模拟中该变量分布之间的差距。这里评价分布的差距使用 EMD：</p>
<p><span class="math display">\[
{\rm EMD}(\mathcal{P}, \mathcal{Q}) := \int_{-\infty}^{+\infty} |\mathcal{P}(x) - \mathcal{Q}(x)| {\rm d}x
\]</span></p>
<p>这里 <span class="math inline">\(\mathcal{P}, \mathcal{Q}\)</span> 都是累积分布函数。</p>
<p>评测结果自然是 CausalSim 很厉害：</p>
<p><img src="/uploads/paper-2022-09/4.png" height="50%" width="50%" /></p>
<h3 id="learning-abr-policies-with-causalsim">Learning ABR policies with CausalSim</h3>
<p>既然现在已经具有了工作良好的模拟器，我们就可以利用该模拟器训练 ABR，具体的过程不阐述，结果如下：</p>
<p><img src="/uploads/paper-2022-09/5.png" height="70%" width="70%" /></p>
<p>总体而言，CausalSim 显然和真实环境下训练的结果贴近，而其他的模拟器均有很大偏差。并且对于高 RTT 的 Agent，这个差距更大。这个差距的根本原因依然是其他模拟器都是有偏的，在例如慢启动等条件下，容易选择保守的码率。</p>
<h3 id="server-load-balancing">Server load balancing</h3>
<p>【PASS】</p>
<h2 id="final-analysis">Final analysis</h2>
<p>读这一篇论文目的是为了研究怎么离线评测算法，也就是训练一个合理的环境模拟器出来。但感觉本文的一个核心思想为将网络吞吐率等因素视作和 ABR 决策有关的变量，将其纳入考虑。严格而言就是更新了对环境内部逻辑的建模，使之更为贴近真实环境。而如果不把网络吞吐率纳入考虑，则前一时刻无论做出什么选择，下一时刻环境都会要求算法实现同样的吞吐率，从而导致算法趋近于保守，在高 RTT Agent 上表现出仅选择较低码率。</p>
<p>方法上的话，感觉 Policy Discriminator 没有太见过，是一个训练无关性的好方法。</p>
<h1 id="deployment-efficient-reinforcement-learning-via-model-based-offline-optimization">Deployment-Efficient Reinforcement Learning via Model-Based Offline Optimization</h1>
<h2 id="abstract-introduction-1">Abstract &amp; Introduction</h2>
<p>离线 RL 的问题在于在线和环境交互可能导致较大开销，为了解决这一问题，主要的策略分为：</p>
<ul>
<li>限制 agent 的行为，防止其做出错误举动。这里 BCQ 就采用了这样的做法（但是 BCQ 论文实在是需要慢慢看）</li>
<li>强化 agent 的 exploitation 能力，令其最大化利用有限的数据</li>
</ul>
<p>本文的成果是提出了衡量 RL 算法的一个指标，即 deployment efficiency，其基于了 RL 学习过程中数据采集策略发生变化的次数（因为策略发生变化意味着需要一次新的部署）。完全离线的 RL 算法如 BCQ、BRAC 具有很高的 deployment efficiency，而完全在线的 RL 算法如 DDPG、SAC 则较低。</p>
<p>论文特别指出，deployment efficiency 和已有的 data efficiency 并不完全类似，这里后者衡量了 RL 学习过程中采集数据的次数。这意味着，即使 data efficiency 很低（数据采样次数极大），只要收集数据的策略没变，那么 deployment efficiency 依然较高。</p>
<p>目前大部分的离线 RL 算法都在大数据集上进行训练和评测，以保证 deployment efficiency 和 data efficiency 都很高。但实际上我们注意到由于 extrapolation error，这种简单直接的算法其实并不优越。而对于在线算法，虽然可以克服数据集数据分布不符合真实数据分布的问题，但实际上会限制 policy 的表达能力【Question #1：这里没有特别明白】。</p>
<p>此外，本文还提出了 BREMEN，即 Behavior Regularized Model ENsemble。</p>
<div class="note info no-icon"><p>We propose Behavior-Regularized Model-ENsemble (BREMEN), which learns an ensemble of dynamics models in conjunction with a policy using imaginary rollouts while implicitly regularizing the learned policy via appropriate parameter initialization and conservative trust-region learning updates.</p>
</div>
<p>自然，BREMEN 在高维连续决策空间上也表现很好。</p>
<h2 id="preliminaries">Preliminaries</h2>
<p>首先定义 MDP <span class="math inline">\((\mathcal{S}, \mathcal{A}, p, r, \gamma)\)</span>，而 policy <span class="math inline">\(\pi\)</span> 定义了 agent 的行为，<span class="math inline">\(\pi\)</span> 接受一个状态，输出一个状态空间 <span class="math inline">\(\mathcal{A}\)</span> 上的概率分布，表示 agent 做出给定行为的概率。我们的目标是获取下述最优 policy：</p>
<p><span class="math display">\[
\pi^* = \mathop{\rm argmax}_\pi \eta[\pi] = \mathop{\rm argmax}_\pi \mathbb{E}_\pi\left[\sum_{t = 0}^{+\infty} \gamma^tr(s_t)\right]
\]</span></p>
<p>而所谓 model-based 的 RL 方法，就需要对 MDP 中的 <span class="math inline">\(p(s&#39; \mid s, a)\)</span> 建模估计。</p>
<p>RL 的学习过程中包含两种行为，分别为获取 MDP 转移对（即 deployment）与更新 policy 参数（即 learning）。如果学习过程中每次更新参数后均将收集到的数据舍弃，那么该学习就是 on-policy 的。反之，如果不断积累数据形成 replay dataset <span class="math inline">\(\mathcal{D}\)</span>，那么该学习就是 off-policy 的，因为用于更新 policy 的数据并不一定通过当前 policy 收集。</p>
<p>但是上述的学习过程都是 online 的，因为其 deployment 和 learning 是混合进行的，而纯 offline 算法中 agent 不会直接与环境进行任何的交互，agent 只能从固定的数据集之中学习。当然，介于 online 和 offline 之间有 semi-batch RL，其实现了较高的 deployment efficiency，当然这种方法并没有完全研究过。</p>
<h2 id="deployment-efficiency">Deployment efficiency</h2>
<p>这里主要阐述这样的观点，即对于 online RL，无论其是 on-policy 还是 off-policy，在一次迭代之后，必然会部署新的 policy 并获取数据，这显然是 deployment unefficient 的。相反，纯 offline RL 只会学习一次部署得到的数据。而一个理想的平衡算法应当位于这两个极端之间。</p>
<p>论文认为现在的 RL 算法忽视了 deployment efficiency，并且现行的部分 SOTA 算法甚至需要百万量级的部署次数（如 SAC）。本文提出了只需要五次到十次部署即可有效学习的算法。</p>
<h2 id="behavior-regularized-model-ensemble">Behavior regularized model ensemble</h2>
<h3 id="imaginary-rollout-from-model-ensemble">Imaginary rollout from model ensemble</h3>
<p>为了解决 model bias 的问题，BREMEN 使用了包含 <span class="math inline">\(K\)</span> 个 deterministic dynamic model 的 <span class="math inline">\(\hat f_\phi := \left\{\hat f_{\phi_1}, \cdots, \hat f_{\phi_K}\right\}\)</span>，其中 <span class="math inline">\(\phi_i\)</span> 表示模型参数。这些模型的训练方式都是最小化下述均方误差，即 model 预测的后续状态和数据集 <span class="math inline">\(\mathcal{D}\)</span> 指示的后续状态：</p>
<p><span class="math display">\[
\min_{\phi_i} \frac{1}{|\mathcal{D}|} \sum_{(s_t, a_t; s_{t + 1}) \in \mathcal{D}} \frac{1}{2} \left\|s_{t + 1} - \hat f_{\phi_i}(s_t, a_t)\right\|_2^2
\]</span></p>
<p>在实际训练 policy <span class="math inline">\(\pi_\theta\)</span> 的时候，会从这 <span class="math inline">\(K\)</span> 个 model 中随机选择一个来提供下一状态：</p>
<p><span class="math display">\[
a_t \sim \pi_\theta(\cdot \mid \hat s_t), \hat s_{t + 1} = \hat f_{\phi_t}(\hat s_t, a_t), i \sim \{1, 2, \cdots, K\}
\]</span></p>
<h3 id="policy-update-with-behavior-regularization">Policy update with behavior regularization</h3>
<p>这里训练具体的 policy 的时候，需要使用置信区间约束来解决 distribution shift 的问题，即在每一次部署之后都使用 behavior clone 得到的 policy <span class="math inline">\(\hat\pi_\beta\)</span> 对 <span class="math inline">\(\pi_\theta\)</span> 重新初始化。具体而言，在每一次部署之后我们都能得到一个更新过的数据集 <span class="math inline">\(\mathcal{D}\)</span>，从而我们使用 BC 对真实的 policy <span class="math inline">\(\pi_b\)</span> 进行估计。具体的训练方式为下述，这里论文作了 fixed variance 假设：</p>
<p><span class="math display">\[
\min_\beta \frac{1}{|\mathcal{D}|} \sum_{(s_t, a_t) \in \mathcal{D}} \frac{1}{2} \left\|a_t - \hat\pi_\beta(s_t)\right\|_2^2
\]</span></p>
<div class="note info no-icon"><p>好像 behavior clone 和 distribution shift 都是模仿学习的东西，这里还真的不太会，后面补。</p>
<p>一个可能有用的 <a href="https://wensun.github.io/CS4789_data/Imitation_Learning_April_8_annotated.pdf">slide</a>。</p>
<hr />
<p>似乎学明白了一点东西，模仿学习是一种改进的 RL，其面对的是无法合理得到 reward signal 的 RL 环境，但是其可以获得部分专家数据，那么我们就可以模仿专家数据进行学习，这就是 behavior clone。</p>
<p>behavior clone 的基本思想借鉴了监督学习。例如我们获得了专家数据集 <span class="math inline">\(\mathcal{D}\)</span>，那么我们的训练方式就是：</p>
<p><span class="math display">\[
\theta^* := \mathop{\rm argmin}_\theta \mathbb{E}_{(s, a) \sim \mathcal{D}} \mathcal{L}(\pi_\theta(s), a)
\]</span></p>
<p>这里 <span class="math inline">\(\mathcal{L}\)</span> 是 loss，可以设定为负 reward 等。</p>
<p>但这个方法有很多问题，包括在数据集较小的时候学习效率极低、无法分辨真正导致 reward 上升的行为等，但是更为致命的问题是 distribution shift。</p>
<p>这个问题指的是专家数据和实际数据分布不一致，尤其指训练集和测试集分布之间有偏差。由于我们参考了监督学习的思想，behavior clone 实际上也继承了监督学习的一个假设，即数据集分布和真实数据分布一致。但是，即使这个假设并不严格成立，监督学习也是可以忽略的，因为监督学习的各个数据之间独立，可以忽略。然而 RL 是逐步决策的，某一步的偏差可能导致后续误差的累积导致后续决策的极大偏移。</p>
<p>有一种解决方式是数据聚合，这里就和论文无关了，故不做讨论。</p>
</div>
<p>而通过 <span class="math inline">\(\hat\pi_\beta\)</span> 重新初始化 <span class="math inline">\(\pi_\theta\)</span> 的方式为正态分布初始化，均值设定为 <span class="math inline">\(\hat\pi_\beta\)</span> 而标准差置 <span class="math inline">\(1\)</span>。论文认为在这里将 BC 和普通的梯度下降相结合可以使得 <span class="math inline">\(\pi_\theta\)</span> 趋向于新数据集 <span class="math inline">\(\mathcal{D}\)</span> 代表的 policy，可以认为是一种 distribution shift 问题的补救措施。</p>
<p>为了进一步补救，其进一步使用 KL-based trust region optimization。总体上 BREMEN 的 policy 更新策略就是：</p>
<p><span class="math display">\[
\theta_{k + 1} = \mathop{\rm argmax}_\theta \mathbb{E}_{(s, a) \sim (\pi_{\theta_k}, \hat f_{\phi_i})} \left[\frac{\pi_\theta(a \mid s)}{\pi_{\theta_k}(a \mid s)} A^{\pi_{\theta_k}}(s, a)\right]
\]</span></p>
<p>这里要求：</p>
<p><span class="math display">\[
\mathbb{E}_{s \sim (\pi_{\theta_k}, \hat f_{\phi_i})} D_{\rm KL}(\pi_\theta(\cdot \mid s) \parallel \pi_{\theta_k}(\cdot \mid s)) \leq \delta
\]</span></p>
<p>此外定义初始值：</p>
<p><span class="math display">\[
\pi_{\theta_0} := \mathcal{N}(\hat\pi_\beta, 1)
\]</span></p>
<p>得到的 BREMEN 算法流程为：</p>
<p><img src="/uploads/paper-2022-09/6.png" /></p>
<p>总体来看，简化了部署的过程，然后使用类似 TRPO 中信任域的方式约束了 agent 的行为。</p>
<h2 id="experiments">Experiments</h2>
<p>既然 BREMEN 的优势在于少量部署条件下能高效学习，其第一个实验就是和其余 RL 在约束部署次数的条件下比较 reward，效果是明显的：</p>
<p><img src="/uploads/paper-2022-09/7.png" /></p>
<p>这里每一条竖直虚线都代表一次部署，部署次数约束在五次到十次之间，每次 batch size 约束在 200k 到 100k。可见 BREMEN 明显优于大部分算法，而几乎仅劣于完全在线的 SAC，但是 SAC 可能需要近百万量级的部署次数。</p>
<p>此外，为了测试 data efficiency，论文采用的方法是训练一个 SAC 后用该 policy 采集一个 dataset 并用该 dataset 训练各种离线算法，根据下述结果可以看出 BREMEN 能在很小的数据集下就能超越 BC 的 baseline，而其余类似 BCQ 等的方法甚至无法超越 baseline，这说明了 BREMEN 不仅 deployment efficient 而且是 data efficient 的：</p>
<p><img src="/uploads/paper-2022-09/8.png" /></p>
<h2 id="final-analysis-1">Final analysis</h2>
<p>说实话由于 RL 基础还是有点欠缺，自己不是很了解信任域相关方法的数学基础，所以对其数学论证也没看很细致，尤其是涉及到 implicit KL regularization 的部分。</p>
<p>但总体而言这篇文章提出的核心思想是需要考虑部署带来的开销，并且提出了利用 BC 等方法来强化模型的 exploitation 能力并且尝试使用信任域的想法约束 agent 的行为，总体上依然符合离线 RL 的两大思路。</p>
<p>数学证明之类的可能真的要等到补补 TRPO 之类 RL 方法之后写，目前打算基于 Sutton 把博客里面这些有关 RL 的一些东西串起来。</p>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>强化学习入门笔记</title>
    <url>/2023/02/22/note-of-rl/</url>
    <content><![CDATA[<p>这学期选了一门深度强化学习，也正好趁此机会系统性质地把强化学习理论基础过一下，如果可以的话可能还打算过一下深度学习基础扩展一下视野之类的。</p>
<span id="more"></span>
<p><span class="math display">\[
\newcommand{\Pe}{\mathbb{P}_{\mathcal{E}}}
\newcommand{\P}{\mathbb{P}}
\newcommand{\E}{\mathbb{E}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\S}{\mathcal{S}}
\newcommand{\A}{\mathcal{A}}
\newcommand{\Eop}{\mathop{\mathbb{E}}}
\newcommand{\b}{\boldsymbol}
\newcommand{\d}{\mathrm{d}}
\newcommand{\argmax}{\mathop{\rm argmax}}
\]</span></p>
<h1 id="强化学习的基本概念与基本优化理论">强化学习的基本概念与基本优化理论</h1>
<h2 id="环境与策略">环境与策略</h2>
<p>强化学习的基本框架为一个智能体和环境交互，环境对智能体的决策给出反馈，即收益信号并转移到下一状态，智能体需要学会在不同的状态下应该做出何种决策以收获最高总收益。</p>
<p>这里环境常常建模为 Markov 决策过程，即 MDP <span class="math inline">\((\S, \A, \Pe, r, \gamma)\)</span>。所谓 Markov 过程，指的是状态转移和历史状态无关，仅仅和当前状态有关，可以简单描述为 <span class="math inline">\(\P(s_{t + 1} \mid s_t) = \P(s_{t + 1} \mid s_t, s_{t - 1}, \cdots, s_1)\)</span>。MDP 中各项指的是：</p>
<ul>
<li>状态空间 <span class="math inline">\(\S\)</span>。即环境可以表现出的所有状态构成的集合。</li>
<li>决策空间 <span class="math inline">\(\A\)</span>。即环境允许智能体做出的所有决策构成的集合。</li>
<li>状态转移概率函数 <span class="math inline">\(\Pe\)</span>。<span class="math inline">\(\Pe(s&#39; \mid s, a)\)</span> 表示环境在状态 <span class="math inline">\(s \in \S\)</span> 且智能体做出决策 <span class="math inline">\(a \in \A\)</span> 的时候环境下一步转移到状态 <span class="math inline">\(s&#39; \in \S\)</span> 的概率。这里下标 <span class="math inline">\(\mathcal{E}\)</span> 表示该概率仅与环境 <span class="math inline">\(\mathcal{E}\)</span> 本身有关。其一般称为 model 或者 dynamics。</li>
<li>收益函数 <span class="math inline">\(r\)</span>。收益函数为从 <span class="math inline">\(\S \times \A \times \S\)</span> 到 <span class="math inline">\(\R\)</span> 的映射。<span class="math inline">\(r(s, a, s&#39;)\)</span> 表示环境在状态 <span class="math inline">\(s \in \S\)</span> 且智能体做出决策 <span class="math inline">\(a \in \A\)</span> 并转移到新状态 <span class="math inline">\(s&#39; \in \S\)</span> 的时候环境给予智能体的收益。</li>
<li>收益衰减系数 <span class="math inline">\(\gamma\)</span>。这里 <span class="math inline">\(\gamma \in [0, 1]\)</span>。该参数代表收益随着时间步衰减的系数，具体含义将会在后续定义累计收益的时候展开。</li>
</ul>
<p>另外需要说明的是，状态 <span class="math inline">\(s \in \S\)</span> 可能并不是完全可以观测的，如果 <span class="math inline">\(s\)</span> 不能完全观测，我们会将 <span class="math inline">\(s\)</span> 中能观测的部分记作 <span class="math inline">\(o\)</span>，称为<strong>观测</strong>，即 observation。所有观测构成的集合记作 <span class="math inline">\(\mathcal{O}\)</span>。这种部分可以观测的 MDP 称为 <strong>P</strong>artially <strong>O</strong>bservable MDP，缩写 POMDP。</p>
<p>而智能体内部所使用的策略一般表现为 <span class="math inline">\(\pi(a \mid s)\)</span>，其表示了智能体在该策略条件下，在状态 <span class="math inline">\(s\)</span> 时做出决策 <span class="math inline">\(a\)</span> 的概率。</p>
<p>上述的策略往往称为<strong>非确定性策略</strong>，因为其对于某个状态给出的是做出某一种决策的概率，是不确定的。而另外一类策略，即<strong>确定性策略</strong>，会对于某个状态给出具体的某一种决策。确定性策略的记号，为了和非确定性策略的 <span class="math inline">\(\pi\)</span> 区别，往往使用 <span class="math inline">\(\mu\)</span>。而 <span class="math inline">\(a := \mu(s)\)</span> 就表示了智能体在该策略条件下，在状态 <span class="math inline">\(s\)</span> 时会做出决策 <span class="math inline">\(a\)</span>。</p>
<p>一条<strong>轨迹（Trajectory）</strong>，指的是智能体和环境不断交互的过程的记录。具体而言，环境首先位于状态 <span class="math inline">\(s_0\)</span>，智能体做出决策 <span class="math inline">\(a_0\)</span>，环境返回收益 <span class="math inline">\(r_1\)</span> 后转入新状态 <span class="math inline">\(s_1\)</span>。以此类推形成 <span class="math inline">\(s_0, a_0, r_1; s_1, a_1, r_2; \cdots\)</span>。轨迹常常使用记号 <span class="math inline">\(\tau\)</span> 表示。</p>
<p>显然根据 Markov 的特性，我们可以得到在策略 <span class="math inline">\(\pi\)</span> 的条件下某一条轨迹 <span class="math inline">\(\tau = (s_0, a_0, r_1; s_1, a_1, r_2; \cdots)\)</span> 出现的概率为：</p>
<p><span class="math display">\[
\P_\pi(\tau) = \Pe(s_0)\prod_{t = 0}^{+\infty} \pi(a_t \mid s_t)\Pe(s_{t + 1} \mid s_t, a_t)
\]</span></p>
<p>这里 <span class="math inline">\(\Pe(s_0)\)</span> 表示环境初始状态为 <span class="math inline">\(s_0\)</span> 的概率。</p>
<p>我们表示轨迹 <span class="math inline">\(\tau\)</span> 服从上述概率分布的时候，可以写成多种符号，包括 <span class="math inline">\(\tau \sim \P_\pi(\tau)\)</span> 或者 <span class="math inline">\(\tau \sim \pi\)</span> 等等，本文会使用第二种表达。</p>
<h2 id="累计收益与价值函数">累计收益与价值函数</h2>
<p>对一条轨迹，<strong>累计收益（Utility）</strong>的定义为：</p>
<p><span class="math display">\[
G_t(\tau) := \sum_{k = 0}^{+\infty} \gamma^k r_{t + k + 1}
\]</span></p>
<p>其中 <span class="math inline">\(t = 0\)</span> 时，<span class="math inline">\(G_0\)</span> 可以简写为 <span class="math inline">\(G\)</span>。</p>
<p>这里注意到我们累加收益的时候需要不断使用衰减因子进行衰减，这一操作主要是为了拟合现实中距离现在越远的行为对当前决策的影响越小的特征，这一操作同时也保证了收敛性。</p>
<p>之后，我们进一步定义<strong>价值函数</strong>。首先需要定义<strong>状态行为价值函数</strong>：</p>
<p><span class="math display">\[
Q^\pi(s, a) := \Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s, a_0 = a]
\]</span></p>
<p>进一步即可有<strong>状态价值函数</strong>：</p>
<p><span class="math display">\[
V^\pi(s) := \Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s]
\]</span></p>
<p>我们可以发现状态行为价值函数描述了在状态 <span class="math inline">\(s\)</span> 下做出决策 <span class="math inline">\(a\)</span> 后期望的累计收益，也就是说该价值函数评价了给定状态下的某个决策的期望收益，所以我们常常使用状态行为价值函数辅助决策。而状态价值函数则和具体的决策无关，是衡量从某一个状态出发，能够获得的期望收益。</p>
<p>显然这两个价值函数之间存在相互推出关系，而这种关系描述如下：</p>
<div class="note info no-icon"><p><strong>Theorem 1.01</strong> 对于任何 MDP 与其上的策略 <span class="math inline">\(\pi\)</span>，该策略的状态价值函数与状态行为价值函数满足：</p>
<p><span class="math display">\[
\begin{aligned}
{\color{red} V^\pi(s)} &amp;= \sum_{a \in \A} \pi(a \mid s){\color{red} Q^\pi(s, a)} \\
{\color{red} Q^\pi(s, a)} &amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\pi(s&#39;)}] \\
\end{aligned}
\]</span></p>
</div>
<p>第一个等式是由 <span class="math inline">\(Q^\pi\)</span> 推出 <span class="math inline">\(V^\pi\)</span> 的路径，证明也是简单的：</p>
<p><span class="math display">\[
\begin{aligned}
V^\pi(s) &amp;= \Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s] \\
&amp;= \sum_{\tau} \P_\pi(\tau \mid s_0 = s)G(\tau) \\
&amp;= \sum_{\tau} \left(\sum_{a \in \A} \P_\pi(\tau, a_0 = a \mid s_0 = s)\right)G(\tau) \\
&amp;= \sum_{\tau} \left(\sum_{a \in \A} \P_\pi(\tau \mid s_0 = s, a_0 = a)\P_\pi(a_0 = a \mid s_0 = s)\right)G(\tau) \\
&amp;= \sum_{a \in \A} \P_\pi(a_0 = a \mid s_0 = s) \left(\sum_{\tau} \P_\pi(\tau \mid s_0 = s, a_0 = a) G(\tau)\right) \\
&amp;= \sum_{a \in \A} \pi(a \mid s)\Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s, a_0 = a] \\
&amp;= \sum_{a \in \A} \pi(a \mid s)Q^\pi(s, a) \\
\end{aligned}
\]</span></p>
<p>第二个等式是由 <span class="math inline">\(V^\pi\)</span> 推出 <span class="math inline">\(Q^\pi\)</span> 的路径，其涉及到了后续状态，从而实际上描述出了价值函数之间的递推关系。</p>
<p>我们考虑其证明，首先我们显然有这个等式：</p>
<p><span class="math display">\[
r(s, a, s&#39;) = \Eop_{\tau \sim \pi}[r_1 \mid s_0 = s, a_0 = a, s_1 = s&#39;]
\]</span></p>
<p>之后考虑对状态行为价值函数的单步展开：</p>
<p><span class="math display">\[
\begin{aligned}
Q^\pi(s) &amp;= \Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s, a_0 = a] \\
&amp;= \Eop_{\tau \sim \pi}\left[\sum_{k = 0}^{+\infty} \gamma^k r_{k + 1} \middle| s_0 = s, a_0 = a\right] \\
&amp;= \Eop_{\tau \sim \pi}\left[r_1 + \sum_{k = 1}^{+\infty} \gamma^k r_{k + 1} \middle| s_0 = s, a_0 = a\right] \\
&amp;= \Eop_{\tau \sim \pi}\left[r_1 + \gamma\sum_{k = 0}^{+\infty} \gamma^k r_{k + 2} \middle| s_0 = s, a_0 = a\right] \\
&amp;= \Eop_{\tau \sim \pi}[r_1 \mid s_0 = s, a_0 = a] + \Eop_{\tau \sim \pi}\left[\gamma\sum_{k = 0}^{+\infty} \gamma^k r_{k + 2} \middle| s_0 = s, a_0 = a\right] \\
&amp;= \Eop_{\tau \sim \pi}[r_1 \mid s_0 = s, a_0 = a] + \gamma\Eop_{\tau \sim \pi}[G_1(\tau) \mid s_0 = s, a_0 = a] \\
\end{aligned}
\]</span></p>
<p>之后我们使用全期望公式处理条件期望中的条件：</p>
<p><span class="math display">\[
\begin{aligned}
\Eop_{\tau \sim \pi}[r_1 \mid s_0 = s, a_0 = a] &amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a) \Eop_{\tau \sim \pi}[r_1 \mid s_0 = s, a_0 = a, s_1 = s&#39;] \\
&amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)r(s, a, s&#39;) \\
\Eop_{\tau \sim \pi}[G_1(\tau) \mid s_0 = s, a_0 = a] &amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a) \Eop_{\tau \sim \pi}[G_1(\tau) \mid s_0 = s, a_0 = a, s_1 = s&#39;] \\
&amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a) \Eop_{\tau \sim \pi}[G_1(\tau) \mid s_1 = s&#39;] \\
&amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)V^\pi(s&#39;) \\
\end{aligned}
\]</span></p>
<p>这里注意到处理第二个条件期望的时候，直接删去了 <span class="math inline">\(s_0 = s\)</span> 和 <span class="math inline">\(a_0 = a\)</span> 两个条件，这是因为 <span class="math inline">\(G_1(\tau)\)</span> 与 <span class="math inline">\(s_0, a_0\)</span> 无关，可以直接删去而不影响最后的期望。</p>
<p>将此代入原有展开式即可证明完毕。</p>
<p>事实上，基于这两个价值函数的互相推出，我们可以得到 <span class="math inline">\(Q^\pi\)</span> 推出 <span class="math inline">\(Q^\pi\)</span> 的公式：</p>
<p><span class="math display">\[
{\color{red} Q^\pi(s, a)} = \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a) \left[r(s, a, s&#39;) + \gamma\sum_{a&#39; \in \A} \pi(a&#39; \mid s&#39;){\color{red} Q^\pi(s&#39;, a&#39;)}\right]
\]</span></p>
<p>以及 <span class="math inline">\(V^\pi\)</span> 推出 <span class="math inline">\(V^\pi\)</span> 的公式：</p>
<p><span class="math display">\[
{\color{red} V^\pi(s)} = \sum_{a \in \A} \pi(a \mid s) \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\pi(s&#39;)}]
\]</span></p>
<p>这两个公式直接表现出了价值函数自身具有的迭代结构，也就是当前强化学习中最为重要的方程之一，目前大部分强化学习方法的核心就是拟合该方程。该方程即 <strong>Bellman 方程（Bellman Equation）</strong>。</p>
<h2 id="基本优化理论">基本优化理论</h2>
<p>现在我们讨论如何获取一个最有价值的策略。</p>
<p>首先，我们定义<strong>最优状态行为价值函数</strong>和<strong>最优状态价值函数</strong>：</p>
<p><span class="math display">\[
\begin{aligned}
Q^\star(s, a) &amp;:= \max_\pi Q^\pi(s, a) \\
V^\star(s) &amp;:= \max_\pi V^\pi(s) \\
\end{aligned}
\]</span></p>
<p>基于最优性，我们可以定义策略之间的序。我们称策略 <span class="math inline">\(\pi\)</span> 优于 <span class="math inline">\(\pi&#39;\)</span>，记作 <span class="math inline">\(\pi \geq \pi&#39;\)</span>，当且仅当对于所有 <span class="math inline">\(s \in \S\)</span> 都满足 <span class="math inline">\(\pi\)</span> 的状态函数优于 <span class="math inline">\(\pi&#39;\)</span>，即 <span class="math inline">\(V^\pi(s) \geq V^{\pi&#39;}(s)\)</span>。</p>
<p>我们有下述基本优化理论：</p>
<div class="note info no-icon"><p><strong>Theorem 1.02</strong> 对于任何 MDP，都存在一个最优策略 <span class="math inline">\(\pi^\star\)</span> 满足对于任何 <span class="math inline">\(\pi\)</span> 都有 <span class="math inline">\(\pi^\star \geq \pi\)</span>。并且该最优策略 <span class="math inline">\(\pi^\star\)</span> 在在任何状态与任何决策下均实现了最优价值，即对于任何 <span class="math inline">\(s \in \S, a \in \A\)</span> 都有 <span class="math inline">\(V^{\pi^\star}(s) = V^\star(s), Q^{\pi^\star}(s, a) = Q^\star(s, a)\)</span>。</p>
</div>
<p>本文不加证明地认为该理论成立。另外，这里给出最优策略的构造。可见最优策略是确定性策略：</p>
<p><span class="math display">\[
\pi^\star(a \mid s) := \begin{cases}
1 &amp; a = \argmax_{a \in \A} Q^\star(s, a) \\
0 &amp; \text{otherwise}
\end{cases}
\]</span></p>
<p>基于该定理我们能够得到两个最优价值函数之间存在的关系：</p>
<div class="note info no-icon"><p><strong>Theorem 1.03</strong> 对于任何 MDP，其最优状态价值函数与最优状态行为价值函数满足：</p>
<p><span class="math display">\[
\begin{aligned}
{\color{red} V^\star(s)} &amp;= \max_{a \in \A} {\color{red} Q^\star(s, a)} \\
{\color{red} Q^\star(s, a)} &amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\star(s&#39;)}] \\
\end{aligned}
\]</span></p>
</div>
<p>第一个等式是简单的：</p>
<p><span class="math display">\[
V^\star(s) = V^{\pi^\star}(s) = \sum_{a \in \A} \pi^\star(a \mid s)Q^{\pi^\star}(s, a) = \max_{a \in \A} Q^{\pi^\star}(s, a) = \max_{a \in \A} Q^\star(s, a)
\]</span></p>
<p>第二个等式直接对 <span class="math inline">\(\pi^\star\)</span> 应用一般的 Bellman 方程即可得到。</p>
<p>从而还有下述<strong>最优 Bellman 方程（Bellman Optimality Equation）</strong>：</p>
<p><span class="math display">\[
{\color{red} Q^\star(s, a)} = \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a) \left[r(s, a, s&#39;) + \gamma\max_{a&#39; \in \A} {\color{red} Q^\star(s&#39;, a&#39;)}\right]
\]</span></p>
<p>以及：</p>
<p><span class="math display">\[
{\color{red} V^\star(s)} = \max_{a \in \A} \left[\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\star(s&#39;)}]\right]
\]</span></p>
<p>理论上我们可以求解最优 Bellman 方程得到 <span class="math inline">\(V^\star\)</span>，从而就能够反推出 <span class="math inline">\(\pi^\star\)</span>。然而求解最优 Bellman 方程是计算困难的，现行的强化学习方法就是在尝试近似求解最优 Bellman 方程。</p>
<h1 id="基于完全环境知识的-rl-方法">基于完全环境知识的 RL 方法</h1>
<p>如果我们能够完全掌握环境，即完全掌握转移概率 <span class="math inline">\(\Pe\)</span> 和收益函数 <span class="math inline">\(r\)</span>，那么我们可以使用<strong>动态规划（Dynamic Programming, DP）</strong>来求解最优策略。DP 方法有两种类别，分别是<strong>策略迭代（Policy Iteration, PI）</strong>和<strong>值迭代（Value Iteration, VI）</strong>。</p>
<h2 id="policy-iteration-pi">Policy Iteration (PI)</h2>
<p>如果我们已经对环境有了完整的建模，我们完全可以使用迭代的方式求解最优 Bellman 方程。</p>
<p>具体的迭代过程分为两步，分别为<strong>策略评估（Policy Evaluation）</strong>和<strong>策略提升（Policy Improvement）</strong>，这两步会交替进行。具体而言，策略评估是在已知 <span class="math inline">\(\pi\)</span> 的条件下计算其状态价值函数 <span class="math inline">\(V^\pi\)</span>。而策略提升为在得知状态价值函数的基础上优化策略 <span class="math inline">\(\pi\)</span>。</p>
<p>首先阐述策略评估的过程，这里举出一个迭代计算的方式。</p>
<p>我们记 <span class="math inline">\(V_k\)</span> 是第 <span class="math inline">\(k\)</span> 轮迭代的时候的状态价值函数，那么我们在初始化 <span class="math inline">\(V_0\)</span> 之后不断进行下述迭代直到状态价值函数收敛：</p>
<p><span class="math display">\[
V_{k + 1}(s) \leftarrow \sum_{a \in \A} \pi(a \mid s) \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma V_k(s&#39;)]
\]</span></p>
<p>收敛后，应当有 <span class="math inline">\(V_{+\infty} = V^\pi\)</span>，此时我们就得到了策略 <span class="math inline">\(\pi\)</span> 所对应的价值函数。</p>
<p>策略评估除了使用迭代的方式计算，也可以使用求解线性方程组等方式计算，这些方法我们不具体展开。</p>
<p>之后阐述策略提升的方法。</p>
<p>我们在得知了策略 <span class="math inline">\(\pi\)</span> 的状态价值函数 <span class="math inline">\(V^\pi\)</span> 之后，我们可以贪心地构造一个确定性策略 <span class="math inline">\(\pi&#39;\)</span>，保证策略更优。保证这一点能够成立的是下述定理：</p>
<div class="note info no-icon"><p><strong>Theorem 2.01 (Policy Improvement Theorem)</strong> 对于已知的策略 <span class="math inline">\(\pi\)</span>，定义确定性策略 <span class="math inline">\(\pi&#39;\)</span>：</p>
<p><span class="math display">\[
\pi&#39;(a \mid s) := \begin{cases}
1 &amp; a = \argmax_{a \in \A} Q^\pi(s, a) \\
0 &amp; \text{otherwise}
\end{cases}
\]</span></p>
<p>那么 <span class="math inline">\(\pi&#39; \geq \pi\)</span>，并且等号成立当且仅当 <span class="math inline">\(\pi = \pi&#39; = \pi^\star\)</span>。</p>
</div>
<p>证明是简单的，首先我们可以注意到：</p>
<p><span class="math display">\[
Q^\pi(s, \pi&#39;(s)) = \max_{a \in \A} Q^\pi(s, a) \geq \sum_{a \in \A} \pi(a \mid s)Q^\pi(s, a) = V^\pi(s)
\]</span></p>
<p>我们从而能得到下述不等式。这里事实上进行了单步展开，进一步就可以尝试利用迭代结构构造不等式链，具体细节则在后续证明中说明：</p>
<p><span class="math display">\[
\begin{aligned}
V^\pi(s) &amp;\leq Q^\pi(s, \pi&#39;(s)) \\
&amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))[r(s, \pi&#39;(s), s&#39;) + \gamma V^\pi(s&#39;)] \\
&amp;= \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))r(s, \pi&#39;(s), s&#39;) + \gamma\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s)) V^\pi(s&#39;) \\
\end{aligned}
\]</span></p>
<p>另外，我们可以证明：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))r(s, \pi&#39;(s), s&#39;) \\
=&amp; \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))\Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s, a_0 = \pi&#39;(s), s_1 = s&#39;] \\
=&amp; \sum_{a \in \A} \pi&#39;(a \mid s)\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)\Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s, a_0 = a, s_1 = s&#39;] \\
=&amp; \Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s]
\end{aligned}
\]</span></p>
<p>即得到：</p>
<p><span class="math display">\[
V^\pi(s) \leq \Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s] + \gamma\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s)) V^\pi(s&#39;)
\]</span></p>
<p>对这个不等式迭代展开：</p>
<p><span class="math display">\[
\begin{aligned}
V^\pi(s) &amp;\leq \Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s] + \gamma\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s)) V^\pi(s&#39;) \\
&amp;\leq \Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s] + \gamma\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s)) \left[\Eop_{\tau \sim \pi&#39;}[r_2 \mid s_1 = s&#39;] + \gamma\sum_{s&#39;&#39; \in \S} \Pe(s&#39;&#39; \mid s&#39;, \pi&#39;(s&#39;)) V^\pi(s&#39;&#39;)\right] \\
&amp;= \Eop_{\tau \sim \pi&#39;}[r_1 \mid s_0 = s] + \gamma{\color{red} \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))\Eop_{\tau \sim \pi&#39;}[r_2 \mid s_1 = s&#39;]} + \gamma^2\sum_{s&#39; \in \S}\sum_{s&#39;&#39; \in \S}\Pe(s&#39;&#39; \mid s&#39;, \pi&#39;(s&#39;)) V^\pi(s&#39;&#39;) \\
\end{aligned}
\]</span></p>
<p>对于红色部分，我们容易发现 <span class="math inline">\(s_0 = s\)</span> 对于 <span class="math inline">\(r_2\)</span> 的期望是无效条件，所以：</p>
<p><span class="math display">\[
\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))\Eop_{\tau \sim \pi&#39;}[r_2 \mid s_1 = s&#39;] = \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, \pi&#39;(s))\Eop_{\tau \sim \pi&#39;}[r_2 \mid s_0 = s, s_1 = s&#39;] = \Eop_{\tau \sim \pi&#39;}[r_2 \mid s_0 = s]
\]</span></p>
<p>所以：</p>
<p><span class="math display">\[
V^\pi(s) \leq \Eop_{\tau \sim \pi&#39;}[{\color{red} r_1 + \gamma r_2} \mid s_0 = s] + {\color{green} \gamma^2\sum_{s&#39; \in \S}\sum_{s&#39;&#39; \in \S}\Pe(s&#39;&#39; \mid s&#39;, \pi&#39;(s&#39;)) V^\pi(s&#39;&#39;)}
\]</span></p>
<p>我们接下来展开绿色部分的时候，可以注意到我们需要为 <span class="math inline">\(r_3\)</span> 的条件期望补上 <span class="math inline">\(s_0 = s\)</span> 和 <span class="math inline">\(s_1 = s&#39;\)</span> 两个无效条件，然后两个求和号通过全期望公式消去 <span class="math inline">\(s_1 = s&#39;\)</span> 以及 <span class="math inline">\(s_2 = s&#39;&#39;\)</span> 两个条件，故剩余的条件仅有 <span class="math inline">\(s_0 = s\)</span>，从而可以进一步合并到红色部分。以此类推，我们就能够说明该不等式的迭代展开是可行的，从而得到：</p>
<p><span class="math display">\[
V^\pi(s) \leq \Eop_{\tau \sim \pi&#39;}[{\color{red} r_1 + \gamma r_2 + \gamma^2r_3 + \cdots} \mid s_0 = s] = V^{\pi&#39;}(s)
\]</span></p>
<p>从而欲证明的不等式成立。</p>
<p>而根据证明过程，该不等式取等当且仅当满足 <span class="math inline">\(V^\pi(s) = Q^\pi(s, \pi&#39;(s)) = \max_{a \in \A}Q^\pi(s, a)\)</span>，而这正是最优 Bellman 方程。也就是说我们使得 <span class="math inline">\(V^\pi = V^\star\)</span>。此外，<span class="math inline">\(\pi\)</span> 目前也必须是一个确定性策略，从而也就保证了 <span class="math inline">\(\pi = \pi^\star\)</span>。</p>
<p>综合策略评估和策略提升，交替进行两者我们就可以保证能够获取到最优策略。然而这个方法并不现实，因为理论上我们需要对环境有完全把握，至少我们需要得到整个环境状态转移矩阵才能进行。</p>
<h2 id="value-iteration-vi">Value Iteration (VI)</h2>
<p>同样，在已经完全得知环境的条件下，除了策略迭代，我们还可以用值迭代求解最优策略。相较于策略迭代是迭代策略本身，值迭代则是在迭代求解状态价值函数。</p>
<p>考虑最优 Bellman 方程：</p>
<p><span class="math display">\[
{\color{red} V^\star(s)} = \max_{a \in \A} \left[\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\star(s&#39;)}]\right]
\]</span></p>
<p>也就是说我们完全可以直接先随意初始化一个 <span class="math inline">\(V_0 \equiv 0\)</span>，然后不断使用上述方程做迭代直到收敛，此时 <span class="math inline">\(V_{+\infty} = V^\star\)</span>。迭代的流程描述为：</p>
<p><span class="math display">\[
{\color{red} V_{k + 1}(s)} \leftarrow \max_{a \in \A} \left[\sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V_k(s&#39;)}]\right]
\]</span></p>
<p>重复该迭代直到收敛，即可获得最优状态价值函数。基于最优状态价值函数，可以推知最优策略，从而算法求解完毕。</p>
<p>这里需要说明的一点是，使用值迭代求解的时候，策略是比价值函数先收敛的。这一点是显然的，因为通过价值函数获取对应的策略是贪心的。从而，在价值函数还未实际完全收敛的时候，各个状态的价值大小关系很有可能已经确定且不变化，从而从这一时间点开始，推知的策略都不会发生变化，理论上都是最优策略。</p>
<p>值迭代的时间复杂度为 <span class="math inline">\(O(|\S|^2|\A|)\)</span>。</p>
<h2 id="有关-pi-和-vi-的一些对比">有关 PI 和 VI 的一些对比</h2>
<p>事实上基于 Bellman 方程而言，VI 方法是最直观也是最容易想到的，因为通过迭代法求解有递归结构的方程确实是一种很常见的方法。然而 VI 的两个特点也是限制其运用的缺陷，即<strong>策略早于价值函数收敛</strong>和<strong>复杂度较高</strong>。</p>
<p>前者事实上是 VI 的一个致命缺陷，因为从根本上而言我们需要获取的是最优策略，具体的价值函数可能并不关注，或者至少不是最主要目标。另外，高复杂度也让 VI 的实际运算难度较高，而这也一定程度上催生了 PI 方法。</p>
<p>VI 在运算过程中有一步涉及到了 <span class="math inline">\(\max_{a \in \A}\)</span>，这需要遍历行为空间却没有有效利用遍历的信息（仅取了最大值）。那么一个显然的性能换时间的操作就是我们取一个并非最优但足够优的策略 <span class="math inline">\(\pi: \S \to \A\)</span>，直接用 <span class="math inline">\(a := \pi(s)\)</span> 代替掉 <span class="math inline">\(a := \argmax_{a \in \A}\)</span>，这样复杂度直接就降低到 <span class="math inline">\(O(|\S|^2)\)</span>。</p>
<p>为了保证 <span class="math inline">\(\pi\)</span> 能够足够优，那我们可以两路并进，一路优化 <span class="math inline">\(\pi\)</span>，一路更新 <span class="math inline">\(V^\pi\)</span>，从而我们就得到了 PI 方法。PI 方法在部分条件下会比 VI 方法收敛快很多，并且我们依然可以证明 PI 理论可以得到最优策略。</p>
<h2 id="有关-bellman-算子的拓展">有关 Bellman 算子的拓展</h2>
<p>如果仔细观察 Bellman 方程，其事实上就是一个线性方程：</p>
<p><span class="math display">\[
{\color{red} V^\pi(s)} = \sum_{a \in \A} \pi(a \mid s) \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)[r(s, a, s&#39;) + \gamma {\color{red} V^\pi(s&#39;)}]
\]</span></p>
<p>首先作一些记号简化：</p>
<p><span class="math display">\[
\begin{aligned}
\P^\pi(s&#39; \mid s) &amp;:= \sum_{a \in \A} \pi(a \mid s)\Pe(s&#39; \mid s, a) \\
r^\pi(s) &amp;:= \sum_{a \in \A} \pi(a \mid s) \sum_{s&#39; \in \S} \Pe(s&#39; \mid s, a)r(s, a, s&#39;) \\
\end{aligned}
\]</span></p>
<p>得到：</p>
<p><span class="math display">\[
{\color{red} V^\pi(s)} = r^\pi(s) + \gamma\sum_{s&#39; \in \S} \P^\pi(s&#39; \mid s){\color{red} V^\pi(s&#39;)}
\]</span></p>
<p>如果记 <span class="math inline">\(\S = \{s_1, s_2, \cdots, s_n\}, n = |\S|\)</span>，并定义矩阵：</p>
<p><span class="math display">\[
\begin{aligned}
\b{V}^\pi &amp;:= (v^\pi_i)^T_{n} \in \R^n &amp;&amp; v^\pi_i := V^\pi(s_i) \\
\b{R}^\pi &amp;:= (r^\pi_i)^T_{n} \in \R^n &amp;&amp; r^\pi_i := r^\pi(s_i) \\
\b{P}^\pi &amp;:= (p^\pi_{ij})_{n \times n} \in \R^{n \times n} &amp;&amp; p^\pi_{ij} := \P^\pi(s_j \mid s_i) \\
\end{aligned}
\]</span></p>
<p>那么 Bellman 方程等价于：</p>
<p><span class="math display">\[
\b{V}^\pi = \b{R}^\pi + \gamma\b{P}^\pi\b{V}^\pi \Rightarrow (I - \gamma\b{P}^\pi)\b{V}^\pi = \b{R}^\pi
\]</span></p>
<p>这里就可以引入 Bellman 算子：</p>
<p><span class="math display">\[
\mathcal{T}^\pi(\b{x}) := \b{R}^\pi + \gamma\b{P}^\pi\b{x}
\]</span></p>
<p>如果状态空间足够小，那么在 PI 的策略评估阶段，事实上完全可以通过求解上述线性方程组解的方式得到策略的价值函数。</p>
<p>除了 Bellman 算子，还可以从最优 Bellman 方程引入最优 Bellman 算子。首先依然是定义矩阵：</p>
<p><span class="math display">\[
\begin{aligned}
\b{V}^\star &amp;:= (v^\star_i)^T_{n} \in \R^n &amp;&amp; v^\star_i := V^\star(s_i) \\
\b{R}(a) &amp;:= (r_i(a))^T_{n} \in \R^n &amp;&amp; r_i(a) := \sum_{s_j \in \S} \Pe(s_j \mid s_i, a)r(s_i, a, s_j) \\
\b{P}(a) &amp;:= (p_{ij}(a))_{n \times n} \in \R^{n \times n} &amp;&amp; p_{ij}(a) := \Pe(s_j \mid s_i, a) \\
\end{aligned}
\]</span></p>
<p>那么最优 Bellman 算子就定义为：</p>
<p><span class="math display">\[
\mathcal{T}^\star(\b{x}) := \max_{a \in \A}(\b{R}(a) + \gamma\b{P}(a)\b{x})
\]</span></p>
<p>现在我们需要证明一个我们并没有严格说明的引理，即使用迭代法求解价值函数的合法性，无论是 PI 中策略评估还是 VI 求最优价值函数本身。事实上，这两者本质相同，其都在求解 Bellman 算子的不动点，只不过一个是一般 Bellman 算子，一个是最优 Bellman 算子。这里以最优 Bellman 算子为例进行证明。</p>
<p>证明的主要思想就是 Banach 空间不动点定理。</p>
<div class="note info no-icon"><p><strong>Theorem 2.02 (Banach Fixed-point Theorem)</strong> 给定完备度量空间 <span class="math inline">\(X\)</span> 以及其范数 <span class="math inline">\(d\)</span>，假设 <span class="math inline">\(f: X \to X\)</span> 是一个压缩映射，即存在 <span class="math inline">\(\gamma \in [0, 1)\)</span> 令 <span class="math inline">\(\forall x_1, x_2 \in X\)</span> 都有：</p>
<p><span class="math display">\[
d(f(x_1), f(x_2)) \leq \gamma d(x_1, x_2)
\]</span></p>
<p>那么 <span class="math inline">\(f\)</span> 在 <span class="math inline">\(X\)</span> 上存在唯一不动点 <span class="math inline">\(x^*\)</span>。</p>
<p>该不动点满足，任取 <span class="math inline">\(x_0 \in X\)</span>，定义序列 <span class="math inline">\(\{x_n\}_{n \geq 0}\)</span>，其中 <span class="math inline">\(x_{n + 1} = f(x_n), n \geq 0\)</span>，那么该序列必然收敛到 <span class="math inline">\(x^*\)</span>。</p>
</div>
<p>证明是简单的。首先我们任取 <span class="math inline">\(x_0 \in X\)</span>，考虑对 <span class="math inline">\(m &gt; n\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
d(f^{(m)}(x_0), f^{(n)}(x_0)) &amp;\leq d(f^{(m)}(x_0), f^{(m - 1)}(x_0)) + d(f^{(m - 1)}(x_0), f^{(m - 2)}(x_0)) + \cdots + d(f^{(n + 1)}(x_0), f^{(n)}(x_0)) \\
&amp;\leq \gamma^{m - 1}d(f(x_0), x_0) + \gamma^{m - 2}d(f(x_0), x_0) + \cdots + \gamma^nd(f(x_0), x_0) \\
&amp;\leq \dfrac{\gamma^n}{1 - \gamma}d(f(x_0), x_0) \\
\end{aligned}
\]</span></p>
<p>也就是无论给多紧的界，我总能令 <span class="math inline">\(n\)</span> 充分大满足上界约束，从而该序列是 Cauchy 序列，在完备度量空间上其自然是收敛的。</p>
<p>假定这个序列收敛到 <span class="math inline">\(x^*\)</span>，我们需要说明 <span class="math inline">\(x^*\)</span> 是 <span class="math inline">\(f\)</span> 的不动点以及其唯一性。其是不动点是容易的，考虑：</p>
<p><span class="math display">\[
0 \leq d(x_{n + 1}, f(x^*)) = d(f(x_n), f(x^*)) \leq \gamma d(x_n, x^*)
\]</span></p>
<p>由于 <span class="math inline">\(n \to \infty\)</span> 时 <span class="math inline">\(d(x_n, x^*) \to 0\)</span>，这说明 <span class="math inline">\(d(x_{n + 1}, f(x^*)) \to 0\)</span>，也就说明 <span class="math inline">\(f(x^*)\)</span> 也是序列 <span class="math inline">\(\{x_n\}_{n \geq 0}\)</span> 的极限，据极限的唯一性，不动点得证。</p>
<p>唯一性则据反证。若存在第二个不动点 <span class="math inline">\(f(y) = y\)</span>，那么：</p>
<p><span class="math display">\[
d(x^*, y) = d(f(x^*), f(y)) \leq \gamma d(x^*, y) \Rightarrow (1 - \gamma)d(x^*, y) \leq 0
\]</span></p>
<p>上述约束仅有 <span class="math inline">\(y = x^*\)</span> 时成立，唯一性得证。</p>
<hr />
<p>基于该引理，我们只需要说明最优 Bellman 算子也满足引理所述条件即可。在空间 <span class="math inline">\(\S\)</span> 上取其 <span class="math inline">\(L^{\infty}\)</span> 范数（即各分量最大值）。我们证明最优 Bellman 算子是压缩的：</p>
<p><span class="math display">\[
\begin{aligned}
\|\mathcal{T}^\star(\b{V}_1) - \mathcal{T}^\star(\b{V}_2)\|_\infty &amp;= \left\|\max_{a \in \A}(\b{R}(a) + \gamma\b{P}(a)\b{V}_1) - \max_{a \in \A}(\b{R}(a) + \gamma\b{P}(a)\b{V}_2)\right\|_\infty \\
&amp;\leq \left\|\max_{a \in \A}(\b{R}(a) + \gamma\b{P}(a)\b{V}_1 - \b{R}(a) - \gamma\b{P}(a)\b{V}_2)\right\|_\infty \\
&amp;= \gamma\left\|\max_{a \in \A}(\b{P}(a)(\b{V}_1 - \b{V}_2))\right\|_\infty \\
&amp;\leq \gamma\|\b{V}_1 - \b{V}_2\|_\infty
\end{aligned}
\]</span></p>
<p>最后一个不等号源于 <span class="math inline">\(\b{P}(a)\)</span> 矩阵中，每一行的元素之和必然为 <span class="math inline">\(1\)</span>。如果假设 <span class="math inline">\(\b{V}_1 - \b{V}_2\)</span> 各元素中最大为 <span class="math inline">\(p\)</span>（亦其 <span class="math inline">\(L^\infty\)</span> 范数），那么 <span class="math inline">\(\b{P}(a)(\b{V}_1 - \b{V}_2)\)</span> 每一个元素都不会大于 <span class="math inline">\(p\)</span>。</p>
<p>从而得证。</p>
<p>事实上我们有下述定理，描述了迭代法求解的正确性。对于任意初始化的 <span class="math inline">\(\b{V}_0\)</span>：</p>
<p><span class="math display">\[
\lim_{n \to \infty} \mathcal{T}^{\pi(n)}\b{V}_0 = \b{V}^\pi, \lim_{n \to \infty} \mathcal{T}^{\star(n)}\b{V}_0 = \b{V}^\star
\]</span></p>
<h1 id="基于环境交互的-rl-方法">基于环境交互的 RL 方法</h1>
<p>如果我们无法掌握环境的信息，我们就需要令智能体与环境交互以收集信息。而这也是当前绝大多数 RL 问题需要采用的方法，因为我们完全能掌握的环境几乎不存在。</p>
<p>这里简单提一下<strong>无模型（Model-free）</strong>与<strong>基于模型（Model-based）</strong>的概念。在智能体和环境交互的过程中，事实上我们有两种选择，其一是让智能体去和真实的环境作交互，这就是无模型方法。其二是我们事先使用另外一个模型去拟合环境，让智能体和这个模型交互，这就是基于模型方法。基于模型方法的优势在于，如果智能体和真实的环境交互成本高昂或者环境响应较慢，则可以用于大幅降低实验成本。但相应地，基于模型方法也需要一个相当优越的和环境契合的模型才能让智能体真正学习到最优策略。</p>
<p>基于环境交互的 RL 方法的流程事实上近似于策略迭代，也被称为<strong>广义策略迭代（General Policy Iteration, GPI）</strong>。GPI 的流程是首先初始化一个价值函数和策略 <span class="math inline">\(V, \pi\)</span>，并不断重复下述两个操作：</p>
<ul>
<li>（策略评估）更新价值函数使得其符合当前的策略，即 <span class="math inline">\(V = V^\pi\)</span></li>
<li>（策略改进）根据当前价值函数贪心地更新策略，即 <span class="math inline">\(\pi = {\rm greedy}(V)\)</span></li>
</ul>
<p>当然，这里是以状态价值函数 <span class="math inline">\(V\)</span> 作为比方，事实上状态行为价值函数 <span class="math inline">\(Q\)</span> 也可以应用到上述流程中。</p>
<p>具体讲解之前，首先引入<strong>同轨（On-policy）</strong>和<strong>异轨（Off-policy）</strong>的概念。这类 RL 方法中智能体所执行的策略一般有两种用途，其一是用于与环境交互收集转移轨迹，这个策略称为<strong>采样策略（Sample Policy）</strong>或者<strong>行为策略（Behavioral Policy）</strong>，其二是用于在环境中获取收益，这个策略称为<strong>目标策略（Target Policy）</strong>。如果一个智能体的行为策略和目标策略是不一致的，那这个方法就是异轨的，相对应地，行为策略和目标策略一致的时候这个方法是同轨的。</p>
<p>如果采用同轨方法，那么策略评估、策略改进的流程就是简单的，也就是按照描述迭代即可。然而如果采用异轨方法，通用的方法是：</p>
<ul>
<li>策略评估时应当估算<strong>目标策略</strong>的价值函数</li>
<li>策略改进时应当贪心地生成<strong>行为策略</strong></li>
</ul>
<h2 id="策略评估">策略评估</h2>
<h3 id="monte-carlo-mc">Monte-Carlo (MC)</h3>
<p>MC 方法计算目标策略的价值函数的方法非常简单，即使用行为策略直接采样一整条轨迹，利用这一条轨迹上的信息更新价值函数。更新方式也相对简单，直接使用算术平均值或者利用学习率更新即可。设定固定的学习率 <span class="math inline">\(\alpha\)</span>，若行为策略采样得到的轨迹为 <span class="math inline">\(\tau\)</span>，对该轨迹上任何一个状态 <span class="math inline">\(s_t\)</span>，MC 方法的更新公式为：</p>
<p><span class="math display">\[
V(s_t) \leftarrow V(s_t) + \alpha(G_t(\tau) - V(s_t))
\]</span></p>
<p>理论而言，MC 方法相当简易且不涉及到 bootstrap。这里 bootstrap 指的是一类“利用估计值本身更新估计值”的更新策略，在后续 TD 方法中展开说明。另一方面，MC 方法也因为低效和并没有充分利用 Bellman 方程而具有缺陷。</p>
<div class="note info no-icon"><p>GPI 中使用 MC 方法做策略评估的算法一般称为 <strong>蒙特卡洛控制算法</strong>。</p>
</div>
<h3 id="temporal-difference-td">Temporal-Difference (TD)</h3>
<p>TD 方法与 MC 方法目标是一致的，也是尽力取得价值函数的准确估计。但是两者的核心差别在于，TD 方法是一个更新力度更小的 bootstrap 方法，TD 方法会在每一次决策后进行更新。这种逐步更新的问题在于我们无法精确获取某一个状态的累计收益，所以我们需要虚化一个更新目标，这也就是所谓的 TD target。</p>
<p>假设我们在时刻 <span class="math inline">\(t\)</span> 时位于状态 <span class="math inline">\(s_t\)</span>，我们通过决策行为 <span class="math inline">\(a_t\)</span> 迁移到了状态 <span class="math inline">\(s_{t + 1}\)</span>，并且获取收益 <span class="math inline">\(r_{t + 1}\)</span>。另外，我们保存有一个所有状态的价值函数估计值表 <span class="math inline">\(V(s), s \in \S\)</span>。那么 TD target 指的是：</p>
<p><span class="math display">\[
{\rm TD\ target} := r_{t + 1} + \gamma V(s_{t + 1})
\]</span></p>
<p>可以注意到，TD target 本身是利用类似 Bellman 方程中的步进展开方法，通过 <span class="math inline">\(V(s_{t + 1})\)</span> 对 <span class="math inline">\(V(s_t)\)</span> 作出估计，并以此作为 <span class="math inline">\(V(s_t)\)</span> 更新的目标。这和 MC 使用真实采样获取到真实的累计收益作为更新目标完全不同，这也就是 bootstrap 的含义。</p>
<p>在获取 TD target 后，就可以计算目标和当前估计值的差，即 TD error：</p>
<p><span class="math display">\[
{\rm TD\ error} = \delta_t := r_{t + 1} + \gamma V(s_{t + 1}) - V(s_t)
\]</span></p>
<p>之后，设定一个适当的学习率 <span class="math inline">\(\alpha\)</span>，即可得到 TD 方法的核心更新策略，下述这种简单的更新策略也被称为 TD(0) 方法：</p>
<p><span class="math display">\[
V(s_t) \leftarrow V(s_t) + \alpha\delta_t = V(s_t) + \alpha(r_{t + 1} + \gamma V(s_{t + 1}) - V(s_t))
\]</span></p>
<p>从理论上比较 TD 方法与 MC 方法。MC 方法使用的累计收益 <span class="math inline">\(G_t(\tau)\)</span> 是对价值函数 <span class="math inline">\(V^\pi(s)\)</span> 的无偏估计，而 TD 方法使用的 TD target 则相应是有偏估计。然而就估计方差而言，TD 方法由于仅仅涉及到一步决策，其方差显然较 MC 方法小。就初始值方面而言，MC 方法对估计的初始值设置并不敏感，然而 TD 由于基于 bootstrap，故对初始值设置极为敏感。</p>
<p>如果简单总结上述方法，可以使用下述图：</p>
<p><img src="/uploads/note-of-rl/1.webp" /></p>
<p>简而言之，MC 方法较 TD 方法而言有着更深的探索。而 DP 方法（尤其是 VI）则是遍历所有可能的后继状态进行更新，从而具有更广泛的视角，也就拥有广度。与这三者均不同的则是搜索，其需要完整探索整个决策树，但这自然是相当浪费资源的。</p>
<div class="note info no-icon"><p>GPI 中使用 TD 方法做策略评估的算法一般称为 <strong>TD 控制算法</strong>或者<strong>时序差分控制算法</strong>。</p>
</div>
<h4 id="多步-td-target-与-tdlambda">多步 TD target 与 TD(<span class="math inline">\(\lambda\)</span>)</h4>
<p>TD target 事实上可以设置为多步的。传统的 TD target 是单步的，即仅仅考虑轨迹上的一步转移。考虑多步 TD target，不妨考虑三步，假定轨迹上有三步转移片段 <span class="math inline">\(s_t, a_t, r_{t + 1}; s_{t + 1}, a_{t + 1}, r_{t + 2}; s_{t + 2}, a_{t + 2}, r_{t + 3}; s_{t + 3}\)</span>，那么 TD target 可以定义为：</p>
<p><span class="math display">\[
{\rm TD\ target} := r_{t + 1} + \gamma r_{t + 2} + \gamma^2 r_{t + 3} + \gamma^3 V(s_{t + 3})
\]</span></p>
<p>这也可以称为三步 TD target。事实上，如果令考虑的步数趋向于无限，无穷步 TD target 也就成为了事实的累计收益，TD 方法转化为 MC 方法。</p>
<p>我们先前提到过，TD 方法对估计值初始化敏感，但是其效率较高。另一方面，MC 方法对初始值不敏感，但是效率较低。我们事实上可以使用一种方法将其两者结合，即基于介于 TD 与 MC 方法之间的多步 TD target，利用一定的权重将其组合，作为新的 TD target，这就是 TD(<span class="math inline">\(\lambda\)</span>) 方法。</p>
<p>将 <span class="math inline">\(n\)</span> 步 TD target 记为 <span class="math inline">\(G^{(n)}_t\)</span>，那么 TD(<span class="math inline">\(\lambda\)</span>) 中的 TD target 定义为：</p>
<p><span class="math display">\[
G^\lambda_t := (1 - \lambda)\sum_{n = 1}^{+\infty}\lambda^{n - 1}G_t^{(n)}
\]</span></p>
<p>传统的 TD 方法即 <span class="math inline">\(\lambda = 0\)</span> 的 TD(<span class="math inline">\(\lambda\)</span>) 方法。</p>
<h4 id="backward-view-tdlambda-eligibility-traces">Backward-view TD(<span class="math inline">\(\lambda\)</span>) &amp; Eligibility Traces</h4>
<p>然而使用 <span class="math inline">\(\lambda \neq 0\)</span> 的 TD(<span class="math inline">\(\lambda\)</span>) 方法的时候显然存在一个问题，那就是由于 <span class="math inline">\(G^\lambda_t\)</span> 的求和上限是 <span class="math inline">\(+\infty\)</span>，这就代表我们需要让智能体在环境中一直采样到轨迹终止。这样的话事实上就违背了使用 TD(<span class="math inline">\(\lambda\)</span>) 方法的初衷，我们希望在保持 TD 方法的效率的基础上引入多步实际采样来做到更精准的估计，所以要求采样到轨迹终止是不能容忍的。</p>
<p>一种简单的解决方式，那就是用 Backward-view TD(<span class="math inline">\(\lambda\)</span>) 取代上面的 Forward-view TD(<span class="math inline">\(\lambda\)</span>)。Forward-view 的含义是通过未来的 <span class="math inline">\(s_{t + 1}, s_{t + 2}, \cdots\)</span> 来更新 <span class="math inline">\(V(s_t)\)</span> 的估计。而 Backward-view 与之相反，其通过之前经历的状态和轨迹确定价值函数估计。</p>
<p>一种直观的解释是，Backward-view 就是反思先前的哪一个决策是导致到达当前状态的核心原因。</p>
<p>我们定义<strong>效用函数（Eligibility）</strong>为 <span class="math inline">\(E_t(s), s \in \S\)</span>，这里下标 <span class="math inline">\(t\)</span> 表示不同的时间的效用函数都是不同的。我们引入效用函数的目的是将其作为权重引入价值函数更新流程中，表示 TD error 以多大程度影响价值函数估计：</p>
<p><span class="math display">\[
V(s_t) \leftarrow V(s_t) + \alpha\delta_tE_t(s_t) = V(s_t) + \alpha E_t(s_t)(r_{t + 1} + \gamma V(s_{t + 1}) - V(s_t))
\]</span></p>
<p>然后，定义效用函数的初始化和更新原则：</p>
<p><span class="math display">\[
\begin{aligned}
&amp;E_0(s) = 0, \forall s \in \S \\
&amp;E_t(s) = \gamma\lambda E_{t - 1}(s) + \b{1}(s_t = s), \forall t \in \mathbb{N}^+, s \in \S \\
\end{aligned}
\]</span></p>
<p>现在简单从数学角度说明使用效用函数的 Backward-view TD(<span class="math inline">\(\lambda\)</span>) 与 Forward-view TD(<span class="math inline">\(\lambda\)</span>) 方法等价。为了简化，这里假设轨迹中经历过的状态后续不在经过。假设我们在 <span class="math inline">\(k\)</span> 时刻到达了状态 <span class="math inline">\(s_k\)</span>，那么：</p>
<p><span class="math display">\[
E_t(s_k) = \begin{cases}
0 &amp; t &lt; k \\
(\gamma\lambda)^{t - k} &amp; t \geq k \\
\end{cases}
\]</span></p>
<p>那么使用效用函数时，我们在迭代终止时得到的状态 <span class="math inline">\(s_k\)</span> 的价值函数估计为（价值函数上标 <span class="math inline">\({\rm B}\)</span> 表示后向视角）：</p>
<p><span class="math display">\[
V_{+\infty}^{\rm B}(s_k) = V_0(s_k) + \sum_{t = 1}^{+\infty} \alpha\delta_tE_t(s_k) = V_0(s_k) + \alpha\sum_{t = k}^{+\infty} (\gamma\lambda)^{t - k}\delta_t = V_0(s_k) + \alpha\sum_{t = 0}^{+\infty} (\gamma\lambda)^t\delta_{t + k}
\]</span></p>
<p>考虑下述计算：</p>
<p><span class="math display">\[
\begin{aligned}
G_t^\lambda - V_t(s_t) &amp;= -V_t(s_t) + (1 - \lambda)\sum_{n = 1}^{+\infty}\lambda^{n - 1}G_t^{(n)} \\
&amp;= -V_t(s_t) + (1 - \lambda)\sum_{n = 1}^{+\infty}\lambda^{n - 1}\left(\gamma^nV_t(s_{t + n}) + \sum_{i = 1}^n \gamma^{i - 1}r_{t + i}\right) \\
&amp;= -V_t(s_t) + \sum_{n = 1}^{+\infty}\lambda^{n - 1}\left(\gamma^nV_t(s_{t + n}) + \sum_{i = 1}^n \gamma^{i - 1}r_{t + i}\right) -  \sum_{n = 1}^{+\infty}\lambda^n\left(\gamma^nV_t(s_{t + n}) + \sum_{i = 1}^n \gamma^{i - 1}r_{t + i}\right) \\
&amp;= -V_t(s_t) + \sum_{n = 0}^{+\infty}\lambda^n\left(\gamma^{n + 1}V_t(s_{t + n + 1}) + \sum_{i = 1}^{n + 1} \gamma^{i - 1}r_{t + i}\right) -  \sum_{n = 1}^{+\infty}\lambda^n\left(\gamma^nV_t(s_{t + n}) + \sum_{i = 1}^n \gamma^{i - 1}r_{t + i}\right) \\
&amp;= -V_t(s_t) + \gamma V_t(s_{t + 1}) + r_{t + 1} + \sum_{n = 1}^{+\infty} \lambda^n\left(\gamma^{n + 1}V_t(s_{t + n + 1}) - \gamma^nV_t(s_{t + n}) + \gamma^nr_{t + n + 1}\right) \\
&amp;= \sum_{n = 0}^{+\infty} \lambda^n\left(\gamma^{n + 1}V_t(s_{t + n + 1}) - \gamma^nV_t(s_{t + n}) + \gamma^nr_{t + n + 1}\right) \\
&amp;= \sum_{n = 0}^{+\infty} \gamma^n\lambda^n\left(\gamma V_t(s_{t + n + 1}) - V_t(s_{t + n}) + r_{t + n + 1}\right) \\
&amp;\approx \sum_{n = 0}^{+\infty} \gamma^n\lambda^n\left(\gamma V_{t + n}(s_{t + n + 1}) - V_{t + n}(s_{t + n}) + r_{t + n + 1}\right) \\
&amp;= \sum_{n = 0}^{+\infty} (\gamma\lambda)^n\delta_{t + n}
\end{aligned}
\]</span></p>
<p>这就说明通过效用函数，我们最终得到的状态 <span class="math inline">\(s_k\)</span> 的价值函数估计为：</p>
<p><span class="math display">\[
V_{+\infty}^{\rm B}(s_k) = V_0(s_k) + \alpha(G_k^\lambda - V_k(s_k))
\]</span></p>
<p>而如果通过 Forward-view TD(<span class="math inline">\(\lambda\)</span>)，由于后续不在经历 <span class="math inline">\(s_k\)</span>，那么 <span class="math inline">\(s_k\)</span> 的价值函数只会在时刻 <span class="math inline">\(k\)</span> 发生一步更新，其余时刻并不更新。而在时刻 <span class="math inline">\(k\)</span>，TD target 为 <span class="math inline">\(G_k^\lambda\)</span>，即可得到最终的价值函数估计（价值函数上标 <span class="math inline">\({\rm F}\)</span> 表示前向视角）：</p>
<p><span class="math display">\[
V_{+\infty}^{\rm F}(s_k) = V_0(s_k) + \alpha(G_k^\lambda - V_k(s_k))
\]</span></p>
<p>从而证明完毕。事实上，如果去掉状态不重复的假设，也只是把每次经过该状态时的状态函数值变化拆开，每一部分都可以通过上面的过程证明两个视角的等价性，从而求和后依然是等价的。</p>
<div class="note info no-icon"><p>这里简单说明 RL 中<strong>在线（Online）</strong>和<strong>离线（Offline）</strong>的区别。在线指的是智能体通过策略收集环境信息和通过这些信息更新策略是同时的，而离线则指的是通过某个固定策略在环境中收集信息，然后离线通过这些数据更新策略。</p>
<p>在线算法的特征在于价值函数估计在每个时间步都会发生更新。而离线算法由于已经事先采集若干条轨迹，所以更新的粒度是整条轨迹，即完整考虑一条轨迹，每次完整读取完一条轨迹后做一次价值函数估计更新。</p>
<p>上述推理中使用了约等于，这仅限于在线场景，而对于离线场景，价值函数 <span class="math inline">\(V_t\)</span> 中下标 <span class="math inline">\(t\)</span> 即失效（不再每个时间步更新），此时约等于变为严格等于。这也就说明两个视角在离线条件下是严格等价，在在线条件下是大致等价。</p>
</div>
<h2 id="策略改进">策略改进</h2>
<p>策略改进的方式实际上不拘一格，这和策略评估相对手段有限形成对比的原因是，策略评估严格要求价值函数收敛到当前策略（采用异轨方法时是当前目标策略）的真实价值函数，而策略改进仅仅是要求贪心地生成，并没有严格要求生成方式。</p>
<p>常见的策略改进之一就是<strong>完全贪心策略（Greedy Policy）</strong>，最优 Bellman 方程 <span class="math inline">\(V^\star(s) = \max_{a \in \A} Q^\star(s, a)\)</span> 保证了完全贪心策略依然可以收敛到最优策略：</p>
<p><span class="math display">\[
\pi(a \mid s) := \begin{cases}
1 &amp; a = \argmax_{a&#39; \in \A} Q(s, a&#39;) \\
0 &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>然而这种方法并不一定在实际上优越，这是因为一个策略往往需要同时考虑下面两种相对立的优化目标：</p>
<ul>
<li>（Exploration）能够充分探索未知的状态和行为，增加对环境的认识</li>
<li>（Exploitation）能够充分利用已经掌握的环境信息，获取尽可能高的累计收益</li>
</ul>
<p>Exploration 会要求行为策略更加激进而 Exploitation 会要求目标策略更加保守，如何平衡这两者以获取高收益也就是这一类 RL 方法的核心。</p>
<p>一种简单的方式是 <strong><span class="math inline">\(\varepsilon\)</span> 贪心策略（<span class="math inline">\(\varepsilon\)</span> Greedy Policy）</strong>，其表现为：</p>
<p><span class="math display">\[
\pi(a \mid s) := \begin{cases}
\varepsilon / |\A| + 1 - \varepsilon &amp; a = \argmax_{a&#39; \in \A} Q(s, a&#39;) \\
\varepsilon / |\A| &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>当然，还会有类似 <strong>Boltzman 探索</strong>之类的并不常见的策略改进：</p>
<p><span class="math display">\[
\pi(a \mid s) := \frac{\exp(Q(s, a) / T)}{\sum_{a&#39; \in \A} \exp(Q(s, a&#39;) / T)}
\]</span></p>
<div class="note success no-icon"><p><strong>Definition 3.01 (GLIE)</strong> 假设第 <span class="math inline">\(k\)</span> 时刻策略改进得到策略 <span class="math inline">\(\pi_k\)</span>，状态行为价值函数 <span class="math inline">\(Q_k\)</span>，记经过 <span class="math inline">\(k\)</span> 时长后策略在状态 <span class="math inline">\(s\)</span> 处做出决策 <span class="math inline">\(a\)</span> 的次数为 <span class="math inline">\(N(s, a)\)</span>。我们称该策略改进是 <strong>Greedy in the Limit with Infinite Exploration (GLIE)</strong>，如果：</p>
<ul>
<li>充分长时间后所有状态决策对均探索无穷次</li>
</ul>
<p><span class="math display">\[
\lim_{k \to +\infty} N_k(s, a) = +\infty, \forall s \in \S, a \in \A
\]</span></p>
<ul>
<li>策略最终收敛到贪心策略</li>
</ul>
<p><span class="math display">\[
\lim_{k \to +\infty} \pi_k(a \mid s) = \b{1}\left(a = \argmax_{a&#39; \in \A} Q_k(s, a&#39;)\right), \forall s \in \S, a \in \A
\]</span></p>
</div>
<p>Boltzman 探索是 GLIE，而 <span class="math inline">\(\varepsilon\)</span> 贪心策略则可能不是 GLIE。</p>
<h1 id="时序差分控制">时序差分控制</h1>
<p>时序差分控制的一般流程如下所示：</p>
<ul>
<li>初始化目标策略 <span class="math inline">\(\pi\)</span> 以及价值函数 <span class="math inline">\(Q^\pi\)</span></li>
<li>循环执行下述步骤直到收敛
<ul>
<li>【策略改进】利用 <span class="math inline">\(Q^\pi\)</span> 生成<strong>行为策略</strong>并执行<strong>一次</strong>，采样得到<strong>一步状态转移</strong></li>
<li>【策略评估】根据行为策略得到的一步状态转移更新<strong>目标策略</strong> <span class="math inline">\(\pi\)</span> 的价值函数 <span class="math inline">\(Q^\pi\)</span></li>
</ul></li>
</ul>
<h2 id="同轨时序差分控制sarsa">同轨时序差分控制（SARSA）</h2>
<p>在同轨时序差分控制之中使用 <span class="math inline">\(\varepsilon\)</span> 贪心策略即可得到 SARSA 算法。若令时刻 <span class="math inline">\(t\)</span> 智能体位于状态 <span class="math inline">\(s_t\)</span>，做出决策 <span class="math inline">\(a_t\)</span> 转移到状态 <span class="math inline">\(s_{t + 1}\)</span> 并获得收益 <span class="math inline">\(r_{t + 1}\)</span>，如果其下一时刻做出决策 <span class="math inline">\(a_{t + 1}\)</span>，可以得到其策略评估阶段所采用的更新为：</p>
<p><span class="math display">\[
Q(s_t, a_t) \leftarrow Q(s_t, a_t) + \alpha[r_{t + 1} + \gamma Q(s_{t + 1}, a_{t + 1}) - Q(s_t, a_t)]
\]</span></p>
<h2 id="异轨时序差分控制q-learning">异轨时序差分控制（Q learning）</h2>
<p>在异轨时序差分控制中，令目标策略为完全贪心策略，行为策略为 <span class="math inline">\(\varepsilon\)</span> 贪心策略即可得到 Q learning 算法。若令时刻 <span class="math inline">\(t\)</span> 智能体位于状态 <span class="math inline">\(s_t\)</span>，做出决策 <span class="math inline">\(a_t\)</span> 转移到状态 <span class="math inline">\(s_{t + 1}\)</span> 并获得收益 <span class="math inline">\(r_{t + 1}\)</span>，可以得到其策略评估阶段所采用的更新为：</p>
<p><span class="math display">\[
Q(s_t, a_t) \leftarrow Q(s_t, a_t) + \alpha\left[r_{t + 1} + \gamma\max_{a \in \A} Q(s_{t + 1}, a) - Q(s_t, a_t)\right]
\]</span></p>
<h1 id="蒙特卡洛控制">蒙特卡洛控制</h1>
<p>蒙特卡洛控制的一般流程如下所示：</p>
<ul>
<li>初始化目标策略 <span class="math inline">\(\pi\)</span> 以及价值函数 <span class="math inline">\(Q^\pi\)</span></li>
<li>循环执行下述步骤直到收敛
<ul>
<li>【策略改进】利用 <span class="math inline">\(Q^\pi\)</span> 生成<strong>行为策略</strong>并执行<strong>至终止</strong>，采样得到<strong>一条完整轨迹</strong></li>
<li>【策略评估】根据行为策略得到的轨迹更新<strong>目标策略</strong> <span class="math inline">\(\pi\)</span> 的价值函数 <span class="math inline">\(Q^\pi\)</span></li>
</ul></li>
</ul>
<h2 id="同轨蒙特卡洛控制">同轨蒙特卡洛控制</h2>
<p>若在采样得到的轨迹 <span class="math inline">\(\tau\)</span> 中，时刻 <span class="math inline">\(t\)</span> 智能体位于状态 <span class="math inline">\(s_t\)</span>，做出决策 <span class="math inline">\(a_t\)</span> 转移到状态 <span class="math inline">\(s_{t + 1}\)</span> 并获得收益 <span class="math inline">\(r_{t + 1}\)</span>，可以得到其策略评估阶段所采用的更新为：</p>
<p><span class="math display">\[
Q(s_t, a_t) \leftarrow Q(s_t, a_t) + \alpha[G_t(\tau) - Q(s_t, a_t)]
\]</span></p>
<h2 id="异轨蒙特卡洛控制">异轨蒙特卡洛控制</h2>
<p>现在我们需要考虑异轨带来的一个重要问题，我们通过行为策略采样得到的数据直接更新目标策略的价值函数估计是否合理。在时序差分控制中我们并没有思考这一问题，仅仅是由于时序差分控制中，行为策略和目标策略的更新每步都在进行，两者可以认为相对接近，从而可以忽略这一问题，并不是说明时序差分控制中不存在这一问题。例如，Q learning 的更新公式中：</p>
<p><span class="math display">\[
Q(s_t, a_t) \leftarrow Q(s_t, a_t) + \alpha\left[r_{t + 1} + \gamma{\color{red} \max_{a \in \A} Q(s_{t + 1}, a)} - Q(s_t, a_t)\right]
\]</span></p>
<p>这里 <span class="math inline">\(s_{t + 1}\)</span> 是通过行为策略确定的，然而在更新的时候则直接使用其计算目标策略（完全贪心策略）价值函数的 TD target。</p>
<p>然而在蒙特卡洛控制中这一问题则较为明显，因为行为策略会直接采样得到一整条轨迹，其会导致目标策略价值函数的大批量更新。</p>
<p>该问题可以形式化定义为，已知行为策略 <span class="math inline">\(b\)</span> 与目标策略 <span class="math inline">\(\pi\)</span>，以及使用行为策略 <span class="math inline">\(b\)</span> 采样得到的轨迹 <span class="math inline">\(\tau\)</span>，我们应当如何拟合计算目标策略的价值函数 <span class="math inline">\(Q^\pi\)</span>。</p>
<p>此时一般会使用<strong>重要性采样</strong>方法。我们考虑随机变量 <span class="math inline">\(X\)</span> 以及其概率密度函数 <span class="math inline">\(f_X(x) := \P(X = x)\)</span>，随机变量 <span class="math inline">\(X\)</span> 的期望显然定义为：</p>
<p><span class="math display">\[
\Eop_{x \sim X}[x] := \int_{\mathbb R} xf_X(x) \d x
\]</span></p>
<p>并且对于任何实数集上的函数 <span class="math inline">\(\varphi\)</span> 都有：</p>
<p><span class="math display">\[
\Eop_{x \sim X}[\varphi(x)] := \int_{\mathbb R} \varphi(x)f_X(x) \d x
\]</span></p>
<p>为了估算 <span class="math inline">\(\E[\varphi(X)]\)</span>，我们可以使用采样并利用样本均值作为数学期望的估计值。例如我们采样获取了 <span class="math inline">\(X\)</span> 的 <span class="math inline">\(N\)</span> 个值 <span class="math inline">\(x_1, x_2, \cdots, x_N\)</span>，那么：</p>
<p><span class="math display">\[
\Eop_{x \sim X}[\varphi(x)] \approx \frac{1}{N}\sum_{k = 1}^N \varphi(x_k)
\]</span></p>
<p>然而如果分布 <span class="math inline">\(f_X\)</span> 并不容易采样，那么这一条路线就有可能出现问题。此时，如果我们有一个容易采样的分布 <span class="math inline">\(f_Y\)</span>，则我们考虑：</p>
<p><span class="math display">\[
\Eop_{x \sim X}[\varphi(x)] := \int_{\mathbb R} \varphi(x)f_X(x) \d x = \int_{\mathbb R} \varphi(x)\frac{f_X(x)}{f_Y(x)} f_Y(x) \d x = \Eop_{y \sim Y}\left[\frac{f_X(y)}{f_Y(y)}\varphi(y)\right]
\]</span></p>
<p>这样，我们不需要直接采样 <span class="math inline">\(f_X\)</span>，仅需要得知 <span class="math inline">\(f_X\)</span> 的表达，即可通过采样 <span class="math inline">\(f_Y\)</span> 得到样本 <span class="math inline">\(y_1, y_2, \cdots, y_M\)</span> 即可作出下述估算：</p>
<p><span class="math display">\[
\Eop_{x \sim X}[\varphi(x)] = \Eop_{y \sim Y}\left[\frac{f_X(y)}{f_Y(y)}\varphi(y)\right] \approx \frac{1}{M}\sum_{k = 1}^M \frac{f_X(y_k)}{f_Y(y_k)}\varphi(y_k)
\]</span></p>
<p>回到原先的问题，我们首先得到：</p>
<p><span class="math display">\[
\frac{\P_\pi(\tau)}{\P_b(\tau)} = \frac{\prod_{(s, a, s&#39;) \in \tau} \pi(a \mid s)\Pe(s&#39; \mid s, a)}{\prod_{(s, a, s&#39;) \in \tau} b(a \mid s)\Pe(s&#39; \mid s, a)} = \prod_{(s, a) \in \tau} \frac{\pi(a \mid s)}{b(a \mid s)}
\]</span></p>
<p>那么对于任意的 <span class="math inline">\(s_{\rm param} \in \mathcal{S}, a_{\rm param} \in \mathcal{A}\)</span>，我们作下述计算：</p>
<p><span class="math display">\[
\begin{aligned}
Q^\pi(s_{\rm param}, a_{\rm param}) &amp;= \Eop_{\tau \sim \pi}[G(\tau) \mid s_0 = s_{\rm param}, a_0 = a_{\rm param}] \\
&amp;= \Eop_{\tau \sim b}\left[\frac{\P_\pi(\tau)}{\P_b(\tau)}G(\tau) \middle| s_0 = s_{\rm param}, a_0 = a_{\rm param}\right] \\
&amp;= \Eop_{\tau \sim b}\left[G(\tau)\prod_{(s, a) \in \tau} \frac{\pi(a \mid s)}{b(a \mid s)} \middle| s_0 = s_{\rm param}, a_0 = a_{\rm param}\right] \\
\end{aligned}
\]</span></p>
<p>那么，若在利用行为策略 <span class="math inline">\(b\)</span> 采样得到的轨迹 <span class="math inline">\(\tau\)</span> 中，时刻 <span class="math inline">\(t\)</span> 智能体位于状态 <span class="math inline">\(s_t\)</span>，做出决策 <span class="math inline">\(a_t\)</span> 转移到状态 <span class="math inline">\(s_{t + 1}\)</span> 并获得收益 <span class="math inline">\(r_{t + 1}\)</span>，可以得到其策略评估阶段所采用的更新为：</p>
<p><span class="math display">\[
Q(s_t, a_t) \leftarrow Q(s_t, a_t) + \alpha\left[G_t(\tau)\prod_{k = t}^{+\infty} \frac{\pi(a_k \mid s_k)}{b(a_k \mid s_k)} - Q(s_t, a_t)\right]
\]</span></p>
<p>我们也很容易发现若 <span class="math inline">\(\pi = b\)</span>，则异轨蒙特卡洛控制退化为同轨蒙特卡洛控制。</p>
<h1 id="函数估计与深度学习">函数估计与深度学习</h1>
<p>我们可以注意到上述介绍的所有算法，如果直接运用的话可能面临一些困难，这是因为现实问题的状态空间和决策空间都是巨大的，我们很难如实记录每一次迭代时价值函数在每个状态、每个行为上的值，这会需要大量的存储空间。</p>
<p>解决这一问题的最常用方案就是构造函数估计。例如，我们需要拟合一个难以直接计算的函数 <span class="math inline">\(f\)</span>，我们可以使用一系列较小的参数 <span class="math inline">\(\b w\)</span> 构造一个相对容易计算的函数 <span class="math inline">\(f_{\b w}\)</span>，尝试通过某种方式调整参数 <span class="math inline">\(\b w\)</span> 以令 <span class="math inline">\(f_{\b w} \approx f\)</span>。这样就可以使用 <span class="math inline">\(f_{\b w}\)</span> 来代替 <span class="math inline">\(f\)</span> 使用。</p>
<p>函数估计的方式是多样的，可行的方式包括线性拟合、决策树、最近邻等。当然，目前最为普遍的方式是使用神经网络，而调整参数的方式一般是梯度下降算法。</p>
<p>假设我们现在需要使用神经网络学习策略 <span class="math inline">\(\pi\)</span> 的状态价值函数 <span class="math inline">\(V^\pi\)</span>，我们使用参数 <span class="math inline">\(\b w\)</span> 构建一个函数 <span class="math inline">\(V_{\b w}\)</span>。我们可以利用 MSE 来构建一个简单的衡量拟合效果的损失函数：</p>
<p><span class="math display">\[
\mathcal{J}(\b w) := \Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} (V^\pi(s) - V_{\b w}(s))^2\right]
\]</span></p>
<p>之后我们计算其梯度：</p>
<p><span class="math display">\[
\begin{aligned}
\nabla_{\b w}\mathcal{J}(\b w) &amp;= \nabla_{\b w}\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} (V^\pi(s) - V_{\b w}(s))^2\right] \\
&amp;= \Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} \nabla_{\b w}(V^\pi(s) - V_{\b w}(s))^2\right] \\
&amp;= -2\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} (V^\pi(s) - V_{\b w}(s))\nabla_{\b w}V_{\b w}(s)\right]
\end{aligned}
\]</span></p>
<p>设定学习率为 <span class="math inline">\(-1/2 \cdot \alpha\)</span>，即可得到参数 <span class="math inline">\(\b w\)</span> 的更新方式：</p>
<p><span class="math display">\[
\b w \leftarrow \b w - \frac{1}{2}\alpha\nabla_{\b w}\mathcal{J}(\b w) = \b w + \alpha\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} ({\color{red} V^\pi(s)} - V_{\b w}(s))\nabla_{\b w}V_{\b w}(s)\right]
\]</span></p>
<p>这里注意上述策略中标红项，显然这里我们需要得到真实值，或者可靠的真实值估计才能更新参数。而由于强化学习非监督学习，这里不存在标签，所以只能通过采样或者估计的方式处理这一项。</p>
<p>如果采用 MC 方法，这一项就可以使用轨迹累计收益：</p>
<p><span class="math display">\[
\b w \leftarrow \b w + \alpha\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{s \in \tau} ({\color{red} G_t(\tau)} - V_{\b w}(s))\nabla_{\b w}V_{\b w}(s)\right]
\]</span></p>
<p>如果采用 TD 方法，这一项就可以使用 bootstrap 的 TD target：</p>
<p><span class="math display">\[
\b w \leftarrow \b w + \alpha\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{(s, r, s&#39;) \in \tau} ({\color{red} r + \gamma V_{\b w}(s&#39;)} - V_{\b w}(s))\nabla_{\b w}V_{\b w}(s)\right]
\]</span></p>
<p>当然如果使用 TD(<span class="math inline">\(\lambda\)</span>)，这一项就是相应的 TD target。</p>
<p>目前基于通过神经网络实现的函数估计，我们可以将 Q learning 转换为深度学习算法 DQN。</p>
<h2 id="deep-q-network-dqn">Deep Q Network (DQN)</h2>
<p>使用神经网络后，Q learning 的基本算法框架不变，依然与上一节中所示一致，仅需要将价值函数 <span class="math inline">\(Q^\pi\)</span> 替换为一个神经网络 <span class="math inline">\(f_{\b w}: \mathcal{S} \to \mathbb{R}^{|\mathcal{A}|}\)</span>。该神经网络结构的语义为，其接受当前的状态 <span class="math inline">\(s \in \mathcal{S}\)</span>，输出这个状态下所有可能的行为带来的价值函数估计，即 <span class="math inline">\(f_{\b w}(s) = [Q_{\b w}(s, a_1), Q_{\b w}(s, a_2), \cdots, Q_{\b w}(s, a_{|\mathcal{A}|})]\)</span>。</p>
<p>此外，基于上述神经网络设计，策略改进过程中利用价值函数生成行为策略的方式在代码上是显然的，只需要将神经网络输出的数组求最大值后直接应用 <span class="math inline">\(\varepsilon\)</span> 贪心方式即可，所以不需要另开辟内存存储策略本身。</p>
<p>而策略评估过程则为上一部分所介绍的梯度下降算法：</p>
<p><span class="math display">\[
\b w \leftarrow \b w + \alpha\Eop_{\tau \sim \pi} \left[\frac{1}{|\tau|} \sum_{(s, a) \in \tau} ({\color{red} Q^\pi(s, a)} - Q_{\b w}(s, a))\nabla_{\b w}Q_{\b w}(s, a)\right]
\]</span></p>
<p>故基本的 DQN 算法流程为：</p>
<ul>
<li>初始化估计价值函数的神经网络 <span class="math inline">\(f_{\b w}\)</span></li>
<li>循环执行下述步骤直到收敛
<ul>
<li>【策略改进】求取 <span class="math inline">\(a_{\rm max} = \argmax f_{\b w}(s)\)</span> 并利用 <span class="math inline">\(\varepsilon\)</span> 贪心方式生成行为策略决策执行</li>
<li>【策略评估】利用梯度更新神经网络参数</li>
</ul></li>
</ul>
<p>至于如何求解梯度，我们</p>
]]></content>
      <categories>
        <category>【学习笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>2022 年 12 月论文笔记</title>
    <url>/2022/12/06/paper-2022-12/</url>
    <content><![CDATA[<p>12 月开始就得准备做毕设了，先要充分阅读文献，确定自己要做的方向有什么要解决的问题，以及目前已经有的探索和目前还存在的困难。</p>
<p><span class="math display">\[
\newcommand{\b}{\boldsymbol}
\]</span></p>
<span id="more"></span>
<h1 id="learning-tailored-adaptive-bitrate-algorithms-to-heterogeneous-network-conditions---a-domain-specific-priors-and-meta-reinforcement-learning-approach">Learning Tailored Adaptive Bitrate Algorithms to Heterogeneous Network Conditions - A Domain-Specific Priors and Meta-Reinforcement Learning Approach</h1>
<p>黄老师的文章，作为起手还是需要好好看看的。</p>
<p>这篇文章的基本概念是，基于学习的 ABR 已经能够实现一个平均而言优秀的 ABR 算法，但是对于部分特殊的网络环境其依然表现不佳，而这也就是所谓的个性化。然后这篇文章使用了 meta RL 的方式实现了 AABR（其实应当是 <span class="math inline">\(A^2BR\)</span>，但是我真的不想打公式了，AABR 表示 Adaptation of ABR）。</p>
<p>AABR 首先离线学习一个元算法，之后再在在线的个性化环境下学习一个针对当前网络环境的个性化算法。另外，还需要不断优化离线学习来保证元算法的优势。</p>
<h2 id="introduction">Introduction</h2>
<p>首先对 ABR 算法做了总结，启发式算法根据当前网络情况和一部分状态变量给出决策，但是只有在选定较好的算法参数的时候这种算法才能表现较好。基于学习的算法则根据网络情况学习这些参数。然而总而言之，这些算法都不会自动调节自己的算法参数，尤其在面对变化较多的网络环境下时，这些算法表现较差。</p>
<p>之后是通过实验说明了现在的网络状况不仅是多样性（diverse）的，更多的是独一无二（unique）的。基于这一点，这篇文章认为做用户个性化是一个重要的提升。</p>
<p>所以基于 Input-driven Markov Decision Process (IMDP)，本文提出了 AABR。分为离线和在线两步，具体的训练方式见后续。</p>
<p>总结一下这篇文章的工作就是确认了当今网络环境的独特性，并通过 meta RL 解决了 ABR 的个性化问题。</p>
<h2 id="background-motivation">Background &amp; Motivation</h2>
<p>关于 ABR 之类的介绍这里忽略，主要看这篇文章如何论证当今网络的多样性。</p>
<p>多样性分为三个方向去论证，即不同用户间差异、不同场景间差异以及已有的部分 ABR 算法在这些网络环境下的表现。</p>
<p>用户间差异和场景间差异可以关注下图：</p>
<p><img src="/uploads/paper-2022-12/1.png" /></p>
<p>可以首先注意到网络吞吐率和 RTT 的变动是相当大的，而如果观察具体的用户，也可以发现用户之间的网络状况差异也很大，部分用户网络稳定（整体带宽 CDF 陡峭）而部分用户的网络波动较大，而且各个用户的网络指标平均值也差异较大。</p>
<p>对于场景，也可以注意到步行、地铁、公交、汽车的网络情况也各有不同，并不能一概而论。</p>
<p>如果从 ABR 的角度出发，这篇文章在两个不同环境下测试了若干个 ABR 算法的性能，得到的结果是：</p>
<p><img src="/uploads/paper-2022-12/2.png" /></p>
<p>显然可以注意到已有的算法都很难兼顾两种情况，常常顾此失彼。这就意味着不稳定的网络情况很容易导致这些算法失效，从而也难以实现用户个性化。</p>
<h2 id="methods">Methods</h2>
<h3 id="input-driven-markov-decision-process">Input-driven Markov Decision Process</h3>
<p>基本而言是在正常的 MDP 中引入了 input process <span class="math inline">\(\mathcal{Z}\)</span>，这个时候环境的转移概率定义为：</p>
<p><span class="math display">\[
\mathbb{T}[s&#39; \mid s, a, z] := \mathbb{P}[s_{t + 1} = s&#39; \mid s_t = s, a_t = a, z_t = z]
\]</span></p>
<p>此外，决策依然仅仅和 <span class="math inline">\(s_t \in \mathcal{S}\)</span> 有关，也就是说具体行为 <span class="math inline">\(a_t \in \mathcal{A}\)</span> 与 <span class="math inline">\(z_t \in \mathcal{Z}\)</span> 是独立的。</p>
<p>进一步的价值函数定义为：</p>
<p><span class="math display">\[
Q(s, a, z) := \sum_{s&#39; \in \mathcal{S}} \mathbb{T}[s&#39; \mid s, a, z](r(s, a, z) + \gamma V(s&#39;, z&#39;))
\]</span></p>
<p>在 IMDP 下，最优策略也就定义为：</p>
<p><span class="math display">\[
\pi^*(s, z) := \mathop{\rm argmax}_{a \in \mathcal{A}} \sum_{s&#39; \in \mathcal{S}} \mathbb{T}[s&#39;, z&#39; \mid s, a, z]\left[r(s, a, z) + \gamma \max_{a&#39; \in \mathcal{A}} Q(s&#39;, a&#39;, z&#39;)\right]
\]</span></p>
<p>可以注意到，如果两个 agent 运行相同的 policy <span class="math inline">\(\pi\)</span>，其不同之处仅仅是 input process <span class="math inline">\(\mathcal{Z}_{1, 2}\)</span> 不同。可以注意到这两个 agent 将会始终保持相同的决策，所以其价值函数相同当且仅当 <span class="math inline">\(\mathcal{Z}_1 = \mathcal{Z}_2\)</span>。</p>
<p>如果在完全得知 input process <span class="math inline">\(\mathcal{Z}\)</span> 的条件下，求解最优策略相当于一般的强化学习问题，可以通过大量的强化学习方法完成。但是我们现在需要假定 input process 是完全不可感知的，在这种条件下，一般强化学习方法学习到的最优策略 <span class="math inline">\(\hat\pi^*\)</span> 的价值函数实际上是与 input process 无关的，其价值函数用 <span class="math inline">\(Q(s&#39;, a&#39;)\)</span> 表示，其满足：</p>
<p><span class="math display">\[
\max_{a&#39; \in \mathcal{A}} Q(s&#39;, a&#39;) = \mathbb{E}_{z&#39;} \max_{a&#39; \in \mathcal{A}} Q(s&#39;, a&#39;, z&#39;)
\]</span></p>
<p>所以现在解决 input process 未知条件下的最优策略求解问题就是最重要的。</p>
<h3 id="meta-rl-with-domain-knowledge">Meta RL with Domain Knowledge</h3>
<p>总之就是又阐述了一边 AABR 分为离线和在线两个训练过程，离线训练一个元算法之后在线训练一个个性化 ABR 算法。那么两个问题就是：</p>
<div class="note info no-icon"><ol type="i">
<li><p>How to obtain a good parameter initialization for fast-learning?</p></li>
<li><p>How to efficiently learn tailor-made ABR algorithms online?</p></li>
</ol>
</div>
<h3 id="model-agnostic-meta-learning">Model Agnostic Meta-Learning</h3>
<p>总之就是选定了 MAML 作为 AABR 的核心算法，MAML 的论文后面慢慢推着看。</p>
<p>不过这一部分也阐释了为何 MAML 适合用于这个场景，原文是：</p>
<div class="note info no-icon"><p>We find that model agnostic meta learning (MAML) is quite suitable in personalized ABR scenarios where the network traces on each user are quite limited.</p>
<p>Specifically, MAML consists of an inner loop and an outer loop.</p>
</div>
<p>也就是说从数据集的角度和训练流程的角度上说，MAML 和这个实验场景的契合度比较高。</p>
<h3 id="leveraging-domain-knowledge">Leveraging Domain Knowledge</h3>
<p>总体的含义是设计了一个模拟器用于生成数据以及相关的启发式算法，一方面补充了现实世界中数据量不足的问题，另外一方面其代表的启发式算法可以在 policy 无法处理某些状态的时候作为 backup 使用。</p>
<p><strong>注：</strong>这一部分可能需要结合下面的 overview 仔细学一下，然后对这里做一些扩充，因为这里模拟器的细节应该是做数据扩充的重要部分。</p>
<h2 id="aabr-overview">AABR Overview</h2>
<p>系统的大致结构为：</p>
<p><img src="/uploads/paper-2022-12/3.png" /></p>
<h3 id="basic-training-algorithm">Basic Training Algorithm</h3>
<p>在设计网络的输入的时候首先需要考虑的是什么才是真正需要考虑的状态，这篇文章采用的方式是首先将所有可以使用的状态都作为输入以训练一个 teacher network，之后采用类似模仿学习的方式，采用类似决策树等较为轻量级的模型去模仿神经网络的策略，之后再使用决策树剪枝的方式去获取真正有意义的非平凡状态。</p>
<div class="note success no-icon"><p>这个方法似乎是比较好玩的一个方法，用于筛选真正有用的输入状态。</p>
</div>
<p>这里剪枝的目的也是为了压缩最后的成本。</p>
<p>最后筛选出来的状态包括：</p>
<ul>
<li>上一次选定的视频块质量 <span class="math inline">\(q_t\)</span></li>
<li>目前的缓冲区占用率 <span class="math inline">\(b_t\)</span></li>
<li>前 <span class="math inline">\(k\)</span> 个视频块传输时网络吞吐率 <span class="math inline">\(C_t\)</span></li>
<li>前 <span class="math inline">\(k\)</span> 个视频块的下载时间 <span class="math inline">\(D_t\)</span></li>
<li>前 <span class="math inline">\(k\)</span> 个视频块的应答时间 <span class="math inline">\(P_t\)</span></li>
</ul>
<p>这里为了控制成本，实验中选取 <span class="math inline">\(k = 5\)</span>。</p>
<p>另外，为了保证模型的泛化性，这里需要将参数正则化，这样至少能保证模型面对完全没有经历过的网络环境不至于将其认为非法输入。</p>
<p>模型的输出和正常的 AC 网络没有很大的差别，都是 Actor 网络输出一个 softmax 后的概率张量表示各个行为的决策概率，而 Critic 网络输出一个标量表示对当前状态的价值评估。</p>
<h4 id="maximum-entropy-ppo-me-ppo">Maximum Entropy PPO (ME-PPO)</h4>
<p>这里的训练策略是 ME-PPO，其与 PPO 的差别在于最优行为的定义里纳入了熵：</p>
<p><span class="math display">\[
a_t^* := \mathop{\rm argmax}_a \hat{\mathbb{E}}_t\left[\sum_t \gamma^t(r_t + \lambda H^{\pi_\theta}(s_t))\right]
\]</span></p>
<p>这里定义熵为：</p>
<p><span class="math display">\[
H^{\pi_\theta}(s_t) = -\sum_{a \in \mathcal{A}} \pi_\theta(a \mid s_t) \ln\pi_\theta(a \mid s_t)
\]</span></p>
<p>元学习要求在离线环境下更重视 exploration 而在线环境下更重视 exploitation。这里将熵纳入考虑，如果策略 <span class="math inline">\(\pi_\theta\)</span> 对动作空间 <span class="math inline">\(\mathcal{A}\)</span> 中的所有动作给出的概率约趋向于平均，则熵越高，从而越会支持这样的选择。</p>
<p>ME-PPO 的具体策略是基于 Dual-PPO 的 double clip 策略，具体如下：</p>
<p><span class="math display">\[
\begin{aligned}
\mathcal{L}^{\rm PPO} &amp;:= \min\left(\frac{\pi_\theta(a_t \mid s_t)}{\pi_{\theta_{\rm old}}(a_t \mid s_t)}(\theta) \hat A_t, {\rm clip}\left(\frac{\pi_\theta(a_t \mid s_t)}{\pi_{\theta_{\rm old}}(a_t \mid s_t)}(\theta), 1 - \varepsilon, 1 + \varepsilon\right)\hat A_t\right) \\
\mathcal{L}^{\rm Actor} &amp;:= \begin{cases}
\hat{\mathbb{E}}_t[\max(\mathcal{L}^{\rm PPO}, c\hat A_t)] &amp; \hat A_t &lt; 0 \\
\hat{\mathbb{E}}_t[\mathcal{L}^{\rm PPO}] &amp; \hat A_t \geq 0 \\
\end{cases}
\end{aligned}
\]</span></p>
<p>这里 <span class="math inline">\(\hat A_t\)</span> 是优势函数，定义为：</p>
<p><span class="math display">\[
\hat A_t := r_t + \gamma(V^{\pi_\theta}(s_{t + 1}) + \lambda H^{\pi_\theta}(s_{t + 1})) - V^{\pi_\theta}(s_t)
\]</span></p>
<p>这里 <span class="math inline">\(c, \varepsilon\)</span> 是用来控制梯度的超参数。</p>
<p>AABR 中的 Critic 网络的训练策略就是最小化优势函数的均方误差：</p>
<p><span class="math display">\[
\mathcal{L}^{\rm Critic} := \frac12 \hat{\mathbb{E}}_t[A_t]^2
\]</span></p>
<p>从而整体的 loss 可以总结为：</p>
<p><span class="math display">\[
\nabla\mathcal{L}^{\rm MEPPO} := -\nabla_\theta \mathcal{L}^{\rm Actor}(\pi_\theta, \hat A_t) + \nabla_{\theta_v} \mathcal{L}^{\rm Critic}
\]</span></p>
<hr />
<p>此外，由于算法对 <span class="math inline">\(\lambda\)</span> 较为敏感，我们需要在训练过程中不断调节 <span class="math inline">\(\lambda\)</span>，调节方式较为简单：</p>
<p><span class="math display">\[
\lambda \leftarrow \lambda + \alpha[H^{\pi_\theta}(s_t) - H^{\rm Target}]
\]</span></p>
<p>这个目标在于熵逐步接近目标的时候衰减 <span class="math inline">\(\lambda\)</span> 以减缓接近速度。</p>
<h3 id="meta-learned-policies-for-offline-stage">Meta-Learned Policies for Offline Stage</h3>
<p><strong>注：</strong>具体的训练方式后续补充。</p>
<h1 id="model-agnostic-meta-learning-for-fast-adaptation-of-deep-networks">Model-Agnostic Meta-Learning for Fast Adaptation of Deep Networks</h1>
<p>这是 MAML 训练方法的原始论文，看情况有没有时间做一个复现。</p>
<p>文章的主要贡献就是一个元学习方式，并且似乎泛用性很广：</p>
<div class="note info no-icon"><p>In this work, we propose a meta-learning algorithm that is general and model-agnostic, in the sense that it can be directly applied to any learning problem and model that is trained with a gradient descent procedure.</p>
</div>
<p>元学习的核心在于训练好的模型能够迅速通过少量数据学习到新的任务，并且其能够应用到大量的下游任务中。这篇文章将训练模型理解为在模型内部建立起适用于某种任务的特征表示，如果这种表示能够适合于多种任务，那么我们只需要进行合适的微调就可以迅速适应新的任务。如果从动力系统的角度理解，我们需要提高需要完成的任务的 loss 对参数的敏感度，这个敏感度越高，参数的变化对 loss 的提升的影响越大。</p>
<h2 id="model-agnostic-meta-learning-1">Model-Agnostic Meta-Learning</h2>
<h3 id="meta-learning-problem-set-up">Meta-Learning Problem Set-Up</h3>
<p>这里严格定义了元学习需要解决的问题。</p>
<p>首先我们需要形式化定义什么是任务，这篇文章定义为：</p>
<p><span class="math display">\[
\mathcal{T} := \{\mathcal{L}(\b x_1, \b a_1, \cdots, \b x_H, \b a_H), q(\b x_1), q(\b x_{t + 1} \mid \b x_t, \b a_t), H\}
\]</span></p>
<p>这里 <span class="math inline">\(\mathcal{L}\)</span> 表示 loss，<span class="math inline">\(q(\b x_1)\)</span> 是初始状态的分布，<span class="math inline">\(q(\b x_{t + 1} \mid \b x_t, \b a_t)\)</span> 是状态转移的概率分布，<span class="math inline">\(H\)</span> 是 episode 的长度。这个定义同时涵盖了普通的强化学习和监督学习，其中监督学习中 <span class="math inline">\(H = 1\)</span>。</p>
<p>模型本身描述为一个函数 <span class="math inline">\(f\)</span>，其接受当前状态 <span class="math inline">\(\b x\)</span> 并给出输出 <span class="math inline">\(\b a\)</span>，即 <span class="math inline">\(\b a = f(\b x)\)</span>。模型不断在该任务中给定 <span class="math inline">\(\b a_1, \b a_2, \cdots, \b a_H\)</span>，而 loss <span class="math inline">\(\mathcal{L}\)</span> 则给出了实际的反馈，这种反馈可以是分类问题中的失配损失或者 Markov 决策过程中的负收益。</p>
<p>在元学习中我们需要考虑一系列的任务的分布，这里记作 <span class="math inline">\(p(\mathcal{T})\)</span>。如果我们要求 <span class="math inline">\(K\)</span> shot learning，对于每一个从 <span class="math inline">\(p(\mathcal{T})\)</span> 抽取的具体任务 <span class="math inline">\(\mathcal{T}_i\)</span>，我们需要再通过 <span class="math inline">\(q_i\)</span> 抽取 <span class="math inline">\(K\)</span> 个样本，并且考虑 <span class="math inline">\(\mathcal{L}_{\mathcal{T}_i}\)</span> 的反馈。</p>
<p>之后直接搬一个论文原句，也应该是论文后面算法设计的主要出发点：</p>
<div class="note info no-icon"><p>The model <span class="math inline">\(f\)</span> is then improved by considering how the <em>test</em> error on new data from <span class="math inline">\(q_i\)</span> changes with respect to the parameters.</p>
</div>
<h3 id="a-model-agnostic-meta-learning-algorithm">A Model-Agnostic Meta-Learning Algorithm</h3>
<p>这里提供了算法设计，一个关键词就是之前提到的<strong>敏感度</strong>。</p>
<p>考虑用参数 <span class="math inline">\(\theta\)</span> 表示的模型 <span class="math inline">\(f_\theta\)</span>。在学习具体的任务 <span class="math inline">\(\mathcal{T}_i\)</span> 的时候，参数的更新方式为：</p>
<p><span class="math display">\[
\theta \leftarrow \theta - \alpha\nabla_\theta\mathcal{L}_{\mathcal{T}_i}(f_\theta)
\]</span></p>
<p>为了简化记号，我们假设在元学习之后学习具体任务仅用了一次梯度更新，此时任务 <span class="math inline">\(\mathcal{T}_i\)</span> 的最优参数就是 <span class="math inline">\(\theta_i&#39; := \theta - \alpha\nabla_\theta\mathcal{L}_{\mathcal{T}_i}(f_\theta)\)</span>，那么元学习的目标是：</p>
<p><span class="math display">\[
\min_\theta \sum_{\mathcal{T}_i \in p(\mathcal{T})} \mathcal{L}_{\mathcal{T}_i}(f_{\theta_i&#39;}) = \min_\theta \sum_{\mathcal{T}_i \in p(\mathcal{T})} \mathcal{L}_{\mathcal{T}_i}(f_{\theta - \alpha\nabla_\theta\mathcal{L}_{\mathcal{T}_i}(f_\theta)})
\]</span></p>
<p>那么还是使用简单的梯度下降，元学习中的参数更新就是：</p>
<p><span class="math display">\[
\theta \leftarrow \theta - \beta\nabla_\theta \sum_{\mathcal{T}_i \in p(\mathcal{T})} \mathcal{L}_{\mathcal{T}_i}(f_{\theta_i&#39;})
\]</span></p>
<p>在这里我们注意到出现了二阶梯度，部分深度学习框架能够支持这一操作，但本文也同样指出作一阶近似（即舍去二阶及以上的高阶项）是可行的。</p>
<p>基于此，MAML 的整体框架为：</p>
<p><img src="/uploads/paper-2022-12/4.png" /></p>
<h2 id="species-of-maml">Species of MAML</h2>
<p>本文这里举出了监督学习和强化学习中运用 MAML 的例子，这里我们只关注强化学习。</p>
<p>强化学习特化的 MAML 主要关注的是 loss 的选定，这里选定的就是最经典的负收益。另外，此时 <span class="math inline">\(q_{\mathcal{T}_i}\)</span> 实际上就是环境中的状态转移概率分布：</p>
<p><span class="math display">\[
\mathcal{L}_{\mathcal{T}_i}(f_\phi) = -\mathbb{E}_{(\b x_t, \b a_t) \sim (f_\phi, q_{\mathcal{T}_i})} \left[\sum_{t = 1}^H R(\b x_t, \b a_t)\right]
\]</span></p>
<p>从而，强化学习特化的 MAML 算法为：</p>
<p><img src="/uploads/paper-2022-12/5.png" /></p>
<p>这之后就是一些实验结果了，感觉没啥意思了。</p>
<h1 id="learning-to-adapt-in-dynamic-real-world-environments-through-meta-reinforcement-learning">Learning to Adapt in Dynamic, Real-World Environments through Meta Reinforcement Learning</h1>
<p>这篇文章似乎没有官方的 code base，只有两个 community code base，现在可以在 <a href="https://paperswithcode.com/paper/learning-to-adapt-in-dynamic-real-world">这个链接</a> 获取，分别是 Tensorflow 和 Pytorch 版本。</p>
<h2 id="abstract-introduction">Abstract &amp; Introduction</h2>
<p>需要解决的问题依然是生成数据很困难以及测试环境中无法预料到的数据可能导致所训练的策略失效，引言之中也基本上叙述了人类可以很快适应自身机体发生的变化和外界环境发生的变化，提出了如果模型经历了足够多的环境微扰，其就可以很快学习适应新环境。</p>
<p>相比较于原先的 meta RL 对任务的定义，这篇文章提出的模型能够处理每个时间步环境或者任务都在变化的情景。也就是说，原先的 meta RL 不过是提前预设好了需要解决什么样的任务，并且每一个 RL trajectory 仅会属于一个任务，而这篇文章的 RL trajectory 中可以涵盖多种任务并且任何时间都可以切换。所以这篇文章的 meta RL 更为 general。</p>
<p>本文也是有 trade off 的，主要表达如下：</p>
<div class="note info no-icon"><p>By specifically training a neural network model to require only a small amount of experience to adapt, we can enable effective online adaptation in complex environments while putting less pressure on needing a perfect global model.</p>
</div>
<p>也就是说，这篇文章为了能够在少数据条件下快速适应新环境，并不会强制要求这个模型在 global 环境下表现到 perfect。</p>
<p>总而言之，这篇文章主要强调学得快，学习速度大约是每个新任务需要在真实世界中经历 1.5 到 3 小时，不到原有 model-free RL 方法学习时间的十分之一。并且，在同等数据量条件下，这篇文章的模型效果也比其他方法优越。此外，为了展示本文模型的学习能力，其将其真实部署在了机器人上，来学习真实世界的情况。</p>
<h2 id="related-works">Related Works</h2>
<p>首先提到最原始的强化学习方法没有泛用性，以及 model-free RL 往往需要大量和真是环境交互从而不实际。发展为 model-based RL 之后，就需要面临对环境建模的 model 需要在不同的任务之间调整的问题，首先否决了单一的全局模型，而先前有人尝试通过 GP 方法合并模型不确定性从而让模型能够表示不同的环境，然而这个方法做出了额外的假设且拓展性差且难以运用到高维空间，而本文提出的结果能够通过观察从而快速切换到新的环境。</p>
<div class="note warning no-icon"><p>这里的问题就是我是真的没有太看懂这个 model 到底是对环境建模的模型还是最后要学习的 policy。</p>
</div>
<p>还有一种处理方式是首先学习一个全局模型，在测试的时候通过梯度下降进行微调。此外，还有工作表明不需要完美的全局模型，可以微调先验知识来处理小变化。然而，这些方法面临着模型的训练目的与测试时的使用方式之间的不匹配的问题。本文通过明确训练一个能快速有效适应的模型来弥合这一差距。</p>
<h2 id="preliminaries">Preliminaries</h2>
<h3 id="model-based-reinforcement-learning">Model-Based Reinforcement Learning</h3>
<p>马尔可夫决策过程在这里建模为 <span class="math inline">\((\mathcal{S}, \mathcal{A}, p, r, \gamma, \rho_0, H)\)</span>。这里 <span class="math inline">\(\mathcal{S}\)</span> 是状态空间，<span class="math inline">\(\mathcal{A}\)</span> 是动作空间，<span class="math inline">\(p(s&#39; \mid s, a)\)</span> 是环境状态转移概率，<span class="math inline">\(r: \mathcal{S} \times \mathcal{A} \to \mathbb{R}\)</span> 是奖励函数，<span class="math inline">\(\rho_0: \mathcal{S} \to \mathbb{R}^+\)</span> 是初始状态概率分布，<span class="math inline">\(\gamma\)</span> 是奖励衰减常数，<span class="math inline">\(H\)</span> 是轨迹长度。</p>
<p>一条轨迹描述为 <span class="math inline">\(\tau(i, j) := (s_i, a_i, \cdots, s_j, a_j, s_{j + 1})\)</span>，我们的目标是求取最优策略 <span class="math inline">\(\pi: \mathcal{S} \to \mathcal{A}\)</span> 使得累计收益期望最大。</p>
<p>model-based RL 目标是近似处理 <span class="math inline">\(p(s&#39; \mid s, a)\)</span>，这个模型也被称为 dynamics model。</p>
<h3 id="meta-learning">Meta Learning</h3>
<p>一般的元学习需要给定假设，即训练用的任务和最终的测试任务都是从同一个任务分布 <span class="math inline">\(\rho(\mathcal{T})\)</span> 中抽取。元学习的目标是获取一个学习流程 <span class="math inline">\(\theta&#39; := u_\psi(\mathcal{D}^{\rm tr}_{\mathcal{T}}, \theta)\)</span> 以通过小数据集 <span class="math inline">\(\mathcal{D}^{\rm tr}_{\mathcal{T}}\)</span> 来学习任务 <span class="math inline">\(\mathcal{T}\)</span>，学习过程可以表示为：</p>
<p><span class="math display">\[
\min_{\theta, \psi} \mathbb{E}_{\mathcal{T} \sim \rho(\mathcal{T})}\left[\mathcal{L}(\mathcal{D}^{\rm test}_{\mathcal{T}}, \theta&#39;)\right]
\]</span></p>
<p>其中 <span class="math inline">\(\theta&#39; := u_\psi(\mathcal{D}^{\rm tr}_{\mathcal{T}}, \theta)\)</span>。</p>
<div class="note info no-icon"><p>这里的记号是真的复杂，事实上训练过程应该是函数 <span class="math inline">\(u_\psi\)</span>，训练过程用参数 <span class="math inline">\(\psi\)</span> 代表，其输出为训练后的最优参数 <span class="math inline">\(\theta&#39;\)</span>，而 <span class="math inline">\(\theta\)</span> 表示初始化参数。</p>
<p>另外注意，<span class="math inline">\(\theta\)</span> 这里是模拟环境的模型的参数，而非 policy 的参数。</p>
</div>
<h4 id="gradient-based-meta-learning">Gradient Based Meta Learning</h4>
<p>MAML 就是一种基于梯度的元学习方法，其最主要的目标是学习一个较好的参数初始化保证在少数调整中即可实现较好的下游任务。</p>
<p>MAML 的 <span class="math inline">\(u_\psi\)</span> 就是一般的梯度下降：</p>
<p><span class="math display">\[
u_\psi(\mathcal{D}^{\rm tr}_{\mathcal{T}}, \theta) = \theta - \alpha\nabla_\theta \mathcal{L}(\mathcal{D}^{\rm tr}_{\mathcal{T}}, \theta)
\]</span></p>
<p>如果学习率 <span class="math inline">\(\alpha\)</span> 是一个固定参数，那么 <span class="math inline">\(\psi = \varnothing\)</span>，如果 <span class="math inline">\(\alpha\)</span> 是一个元学习过程中需要学习的参数，那么 <span class="math inline">\(\psi = \alpha\)</span>。</p>
<p>即使看起来 <span class="math inline">\(u_\psi\)</span> 是平凡的，但是这种方法的表达能力和下面介绍的方法是持平的。</p>
<h4 id="recurrence-based-meta-learning">Recurrence Based Meta Learning</h4>
<p>这里借用了 RNN 的思想，在这个方法中，更新函数 <span class="math inline">\(u_\psi\)</span> 始终需要不断学习，其中 <span class="math inline">\(\psi\)</span> 是用于更新 RNN 隐含层状态的参数，而 <span class="math inline">\(\theta\)</span> 是余下的参数。</p>
<div class="note warning no-icon"><p>这里是真的真的真的没看懂，这在说啥？是我前置知识欠缺太多了？</p>
<p>只能希望下面能有个稍微好一点的说明。</p>
</div>
<h2 id="meta-learning-for-online-model-adaptation">Meta Learning for Online Model Adaptation</h2>
<p>之前提到过本文的 trajectory 中任务可以随着时间步推进而变化，所以本文设定的目标是根据前 <span class="math inline">\(M\)</span> 个时间步的数据预测未来 <span class="math inline">\(K\)</span> 个时间步情况，这里 <span class="math inline">\(M, K\)</span> 都是固定的超参数。</p>
<p>所以在这样的设定下，训练目标就是：</p>
<p><span class="math display">\[
\begin{aligned}
\theta_{\mathcal{E}}&#39; &amp;= u_\psi(\tau_{\mathcal{E}}(t - M, t - 1), \theta) \\
\min_{\theta, \psi}&amp; \mathbb{E}_{\tau_{\mathcal{E}}(t - M, t + K)} [\mathcal{L}(\tau_{\mathcal{E}}(t, t + K), \theta_{\mathcal{E}}&#39;)]
\end{aligned}
\]</span></p>
<p>而这里 loss 定义为：</p>
<p><span class="math display">\[
\mathcal{L}(\tau_{\mathcal{E}}(t, t + K), \theta_{\mathcal{E}}&#39;) := -\frac{1}{K} \sum_{k = t}^{t + K} \log\hat{p}_{\theta_{\mathcal{E}&#39;}}(s_{k + 1} \mid s_k, a_k)
\]</span></p>
<p>GrBAL 采取的更新策略为：</p>
<p><span class="math display">\[
\theta_{\mathcal{E}}&#39; = u_\psi(\tau_{\mathcal{E}}(t - M, t - 1), \theta) = \theta_{\mathcal{E}} + \psi\nabla_\theta\frac{1}{M} \sum_{m = t - M}^{t - 1} \log\hat{p}_{\theta_{\mathcal{E}}}(s_{m + 1} \mid s_m, a_m)
\]</span></p>
<p>ReBAL 这里又是没看懂，所以这个基于循环模型的到底是个什么东西。</p>
<h2 id="model-based-meta-reinforcement-learning">Model Based Meta Reinforcement Learning</h2>
<p>这一部分就是在讲解如何在线上做 adaptation，我觉得整体不如直接看算法直观：</p>
<p><img src="/uploads/paper-2022-12/6.png" /></p>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>2023 年 10 月论文笔记</title>
    <url>/2023/10/08/paper-2023-10/</url>
    <content><![CDATA[<p>说是加入腾讯做云游戏，但是似乎一个月过去了暂且都没有等来信息，果然还是继续积累吧。</p>
<span id="more"></span>
<h1 id="zgaming---zero-latency-3d-cloud-gaming-by-image-prediction">ZGaming - Zero-Latency 3D Cloud Gaming by Image Prediction</h1>
<p>现在论文都直接吹零延迟的吗，不过如果说 Abstract 里面这句话是真的，那确实足够猛：</p>
<div class="note info no-icon"><p>与现有方法相比，ZGaming 在提供相同视频质量时，将互动延迟从 23 毫秒减少到 0 毫秒，或者在保持互动延迟为 0 毫秒时，提高了 5.4 分贝的视频质量。</p>
</div>
<h2 id="introduction">Introduction</h2>
<p>先讲了一下云游戏对 MTP 延迟很敏感，然后提出本文的目标是实现零延迟的云游戏系统。有关其他工作的部分，本文首先指出了单纯在系统上做优化的方案终究会因为网络的存在而至少具有一个 RTT 的延迟，从而零延迟的系统必定一定程度上涉及到预测操作，其中一个著名的工作是动作预取。动作预取的工作原理是对所有的可能潜在动作，都在服务端渲染下一帧，然后将这些帧发送到客户端，客户端上一旦执行操作即可直接访问到动作结果帧。但是动作预取面临两个困难：</p>
<ul>
<li>用户动作的随机性极高，很容易遭遇预测未命中的情况</li>
<li>商用云游戏大部分依然采用用户动作后再渲染的方案，工业界适配困难较大</li>
</ul>
<p>如果难以直接修改当前的工作流水线，那么一种可能的方案为基于图像的预测，常用的方法就是 DIBR。在具有 DIBR 的系统中，当用户做出操作的时候，该系统会根据最近接收到的 RGBD（即 RGB 色彩以及深度信息）直接预测接下来的视频帧，用户在此基础上几乎感知不到任何延迟。</p>
<p>本文基于上述方法，希望进一步精细化图像预测，主要面临的挑战有：</p>
<ul>
<li>预测图像中存在伪影，即像素缺失。例如出现了遮挡和视野外，此时由于缺失图像信息，无法准确预测该部分的像素信息导致缺失。目前已经有一部分针对伪影的解决方案</li>
<li>DIBR 不能应用于预测动态对象，因为动态对象的运动几乎无法通过静态的像素信息观察到，从而 DIBR 很难给出合理的预测值</li>
<li>码率和网络的匹配问题（有点奇怪，为什么这里需要考虑 ABR 相关的问题）</li>
</ul>
<p>ZGaming 的设计在于，首先通过 DIBR 预测出静态对象的图像，然后通过运动预测模型预测动态对象的图像（本文采用了 LSTM，我严格觉得 LSTM 做不了这种任务），最后将两者结合起来得到最终的预测图像。具体而言的工作：</p>
<ul>
<li>基于质量的静态场景缓存。如果完全存储所有历史静态场景则很有可能导致巨大的开销，所以 ZGaming 采用了基于质量的缓存，即只缓存质量较高的静态场景，而质量较低的场景则直接丢弃</li>
<li>服务器辅助的 LSTM 预测。在服务器端部署 LSTM 以预测动态物体的运动趋势，并预取到客户端</li>
<li>ABR。我不评价这一部分</li>
</ul>
<h2 id="motivation">Motivation</h2>
<p>首先说了一下云游戏条件下互动延迟的要求极高，大概限制在 60 毫秒左右。然后介绍了一下 DIBR 能够通过预测静态场景的方式做到一定程度上的零延迟，并且在工程的角度上可以增量式地连接到现有系统而不需要调整当下的云游戏渲染管线。</p>
<p>但是 DIBR 是有缺陷的：</p>
<p><img src="/uploads/paper-2023-10/9.png" /></p>
<p>简而言之本文的解决方法为：</p>
<ul>
<li>重用历史帧。本文的论据是大量的场景都有可能在历史场景中出现过，所以加大追溯历史的深度可以有效缓解空洞伪影（但是全新的场景怎么办呢）</li>
<li>利用 LSTM 预测动态对象的运动模式</li>
<li>ABR？（为什么 DIBR 的优化策略里面有 ABR？）</li>
</ul>
<h2 id="overview">Overview</h2>
<p>总之就是上面三个部分一个对应一个模块，也就是说 ZGaming 包括一个场景缓存，一个动态物体 LSTM 模型，一个 ABR 算法。</p>
<h2 id="quality-driven-3d-block-cache">Quality Driven 3D Block Cache</h2>
<p>其认为，一般的缓存设计方法无法直接应用到云游戏之中，因为传统的全量缓存会占用巨大的内存空间。一种方法是一定程度上限制缓存条目的大小，并且设计有效的缓存替换策略保证高效利用有限的内存资源。在考虑缓存替换策略的时候有以下需要注意的点：</p>
<ul>
<li>不同光照条件下，同样坐标处的材质并不能直接应用于恢复。这是显然的，阳光直射的墙壁图像显然无法直接应用于恢复夜晚墙壁的空洞</li>
<li>非缓存算法的竞争。事实上，缓存并非处处是最优方法，例如墙壁、地面等较为单调的场景中，一般的插值恢复法甚至会比缓存更好。这里本文认为优先执行历史缓存恢复是合理的，如果缓存内容依然无法完全填充空缺部分，那么再通过插值方法恢复</li>
<li>用户操作会使得缓存本身具有不均衡特性，部分场景明显会比其他场景有更高频的访问次数</li>
</ul>
<p>本文采用的策略为，将每一帧分为 <span class="math inline">\(64 \times 64\)</span> 的块，这样做可以避免全量缓存，并且可以避免重复场景的重复存储。对每一个块 <span class="math inline">\(b\)</span>，定义其质量为 <span class="math inline">\(U_b\)</span>，质量越高则越有可能被缓存。质量的计算方式为：</p>
<p><span class="math display">\[
U_b := \frac{1}{T_{\rm now} - t_b}\sum_{i = 1}^{N_b} ({\rm PSNR}_{b, i} - {\rm PSNR}_{b, i}&#39;)
\]</span></p>
<p>这里 <span class="math inline">\(N_b\)</span> 表示块 <span class="math inline">\(b\)</span> 在缓存中被使用的次数，求和项中的 PSNR 的差表示的是第 <span class="math inline">\(i\)</span> 次使用的时候相较于插值算法，用缓存修复所能得到的 PSNR 增益，之后使用块 <span class="math inline">\(b\)</span> 在缓存中持续的时间 <span class="math inline">\(T_{\rm now} - t_b\)</span> 归一化收益即可得到缓存块质量。可以注意到该函数的逻辑就是，单位时间内该缓存块相较于插值算法能够获得多高的额外收益。</p>
<p>在此基础上，缓存的替换策略为当存储满时交换出 30% 的缓存块，并且定期逐出质量为负数的块。这里的负数质量表示该块在缓存中的收益不如插值算法，所以应当逐出。</p>
<p>性能评价就不说了，基本就是形势大好。</p>
<h2 id="server-assisted-lstm-predicting-foreground">Server Assisted LSTM Predicting Foreground</h2>
<p>首先区分背景和前景，其实就是静态部分和动态部分。本文认为，即使某一些 NPC 在交互逻辑上不应该归类为背景，但是在渲染逻辑上其不会发生相对位置移动，所以应当归类为背景。在这一部分首先需要的是区分背景和前景，然后对前景进行预测。区分前景的逻辑就是将前一帧和后一帧对齐，比较是否发生了位置偏移，发生偏移则意味着是动态对象。</p>
<p>而为了预测动态物体的运动，这里使用了 LSTM。然而直接使用 LSTM 会遇到渲染帧模糊的问题，所以在 LSTM 后面本文加上了一个图像超分模块（RefSR）。</p>
<p><img src="/uploads/paper-2023-10/10.png" /></p>
<p>工程上，另外提到了一下 LSTM 是部署在服务端的，数据传输方面则把 LSTM 预测的动态部分作为高优先级数据附加上 FEC 传输到客户端，由客户端组装具体的帧。</p>
<h2 id="prediction-performance-driven-adaptive-bitrate">Prediction Performance Driven Adaptive Bitrate</h2>
<p>这一部分整体没看明白想要做什么，似乎是根据网络情况调节预测性能？然而云游戏里面考虑网络的话还是不太会单独拉出来一个 ABR？不是很懂，这样总觉得 ABR 很孤立。</p>
<h2 id="conclusion">Conclusion</h2>
<p>感觉和吴成磊学长说的一样，这篇文章总体给的感觉是很割裂，有种头痛医头脚痛医脚的感觉。而且我觉得这篇文章的 LSTM 部分一言难尽，LSTM 本身的能力不好说能不能完成这类预测任务，而且使用历史帧填充未知空洞也显得很没有道理。</p>
<p>总之，从 idea 到 writing 来看都不是很适合借鉴学习。</p>
<h1 id="ekho---synchronizing-cloud-gaming-media-across-multiple-endpoints">Ekho - Synchronizing cloud gaming media across multiple endpoints</h1>
<p>简而言之就是以往的工作都把云游戏简单化为视频画面的传输，而忽略了音频等多媒体的可能。多媒体事实上意味着需要做到媒体之间的同步，例如游戏画面需要与游戏音效同步。Ekho 则通过伪噪声的方式实现了多媒体之间的同步。</p>
<h2 id="introduction-1">Introduction</h2>
<p>简单来说，就是注意到现在常用的云游戏系统往往除了视频流之外还会有一个反馈流，这个反馈流一般作用于各种游戏配件，作用包括：</p>
<ul>
<li>在多人语音游戏的条件下混合其他玩家的声音，并提供给专用的游戏耳机等</li>
<li>对玩家的操作给出触觉反馈，如手柄震动等</li>
</ul>
<p>这里容易出现的问题在于，视频流和反馈流作用到不同的终端（一个是显示器一个是各种其他配件），这导致这两个流会使用不同的网络连接传输，从而两者之间的同步就成为了问题。</p>
<p>事实上，在有观众的游戏中，除了玩家本人的耳机会有一道音频流外，普通视频流中还会负载另一道音频流，这个音频流会对外播放给观众。这一道音频流播放之后还会被玩家耳机的麦克风捕捉。所以说云游戏除了多种流的同步问题外，还需要处理多道音频流之间的同步。</p>
<p>一般而言，流之间会产生 100 毫秒左右的流间延迟（Inter Stream Delay / ISD），具体取决于网络情况、终端类型、连接方式甚至玩家到屏幕的距离。但是总体而言，延迟的影响因素大概可以归纳为：</p>
<ul>
<li>网络延迟。大概来说就是网络延迟是相当复杂的，首先多设备的网络接入点不一定一样（屏幕直接通过以太网连接到路由器而控制器通过 AP 连接到 WiFi 等）。其次，不同设备可能使用不同的网络协议（屏幕使用 WebRTC 而控制器使用 URCP 协议）。最后，互联网提供商可能对不同端口的流量做不同的优先级处理，这也可能导致网络延迟</li>
<li>设备播放延迟。音频和视频在不同的设备上有不同的缓存管理措施，不同的播放策略也可能导致数十毫秒的 ISD</li>
<li>声音传播延迟。玩家从屏幕和耳机接收到的声音的 ISD 和玩家到屏幕的距离有关（毕竟声速也不过 340 米每秒），这可能带来十毫秒左右的延迟</li>
</ul>
<p>本文的目标是将 ISD 限制到 10 毫秒一下，考虑到 ISD 是波动的，所以需要在游戏进程中不断观测和动态调整来平稳 ISD。事实上，测量 ISD 就足够困难，主要挑战是：</p>
<ul>
<li>RTT 的测量本身会因为网络往返路径不同，测量值本身具有十几毫秒的误差</li>
<li>解码、播放、声音传播延迟等影响 ISD 的重要因素往往因为缺乏合适的 API 或者硬件而难以测量</li>
</ul>
<p>以往的设备间同步有三种常见方案：</p>
<ul>
<li>通过共享的网络组件建立专用链接完成时间同步。然而云游戏系统并不强制要求各个终端共享网络组件</li>
<li>通过网络时间协议同步时间。然而该协议往往测量不精准，甚至会有百毫秒的误差</li>
<li>通过记录设备播放的声音测量误差。然而这对硬件要求较高，此外还要求周围环境噪声较低</li>
</ul>
<p>而本文提出 Ekho，其可以在亚毫秒级别测量 ISD 并且做出调节。简要而言，Ekho 通过伪噪声序列的方式对齐各种流，并且在服务端根据测量结果调整发送序列来同步各种流。</p>
<h2 id="related-work">Related Work</h2>
<p>相关工作曾经研究过两路相似音频最大能够达到多大错位而不被用户感知，以前的研究结果认为单调、突发的信号音在错位超过 5 毫秒时就会被感知，而复杂语音则需要达到 16 毫秒左右才会感知。本文拓展了这些工作，并且通过数据论述了：</p>
<ul>
<li>音频之间的错位最大为 10 毫秒</li>
<li>视频与音频之间的错位，最多允许音频提前视频 15 毫秒或视频提前音频 45 毫秒</li>
<li>触觉反馈与音频之间错位最大为 24 毫秒</li>
<li>触觉反馈与视频之间错位可以宽容到 30 至 100 毫秒</li>
</ul>
<p>另外一部分的相关工作为媒体同步，指的是在一定范围的终端内同步媒体内容。现有的工作往往要求了下述前提（然后本文基于此做了点优化）：</p>
<ul>
<li>设备有准确的时钟。然而用于同步设备时钟的网络时间协议具有不可容忍的误差</li>
<li>支持 PTP 的设备可以通过连接到同一路由器实现同步。然而 PTP 并非广泛采用的协议</li>
<li>利用这些设备往往物理距离较近的特征，通过在一个设备上记录另一个设备声音的方式实现流之间的延迟测量。然而由于环境噪声、硬件设备等问题，这一方案在先前工作中没有获得很好的效果，而本文基于此，做出了一步重要的拓展（伪噪声打点）</li>
</ul>
<h2 id="background-motivation">Background &amp; Motivation</h2>
<h3 id="time-synchronization-requirements">Time Synchronization Requirements</h3>
<p>为了研究音频之间的错位阈值，这一章设计了用户实验。用户实验的基本方案是 ITU-T P.808 标准中规定的 DCR 测试方法。测试中使用的音频为 30 个长度为 15 秒的游戏录音，每个录音均加上了 0 到 300 毫秒不等的 ISD。</p>
<p>测试流程就直接翻译原文了。</p>
<div class="note info no-icon"><p>人类测试者首先听取没有回声的参考音频片段，然后听取带有未知延迟量的回声的相同片段，包括 0 毫秒，即没有回声。测试者需要选择由于回声引起的注意力分散程度。此外，每个测试者会定期进行训练，即按照 P.808 标准听取带有不同回声量的六个片段，以确保标准化。</p>
<p>我们总共收集了 3555 个评分，根据 ITU-T P.808 的规定，去除了低质量的回应（总数据的 33%）。每个片段被评分约 10 次，每个延迟级别有 30 个不同的片段，共计每个延迟级别约 296 个投票。受访者池由 17% 的年轻人（18-25 岁）、43% 的成年人（26-35 岁）、32% 的中年人（36-50 岁）和 8% 的老年人（51 岁及以上）组成，他们的母语是英语。按照伦理准则，调查是匿名的，我们在参与之前告知受访者有关调查过程和刺激类型。我们对受访者进行了补偿，并避免了可能被认为是令人不悦的刺激。Microsoft IRB 审查并批准了这项调查。</p>
</div>
<p>最后的具体结果事实上已经在先前提到了，即根据音频的不同类别，玩家的忍受阈值是不同的，但最后大体可以用 10 毫秒作为阈值。</p>
<p><img src="/uploads/paper-2023-10/1.png" /></p>
<div class="note success no-icon"><p>首先需要学一下 ITU 用户测试到底是个什么标准。</p>
<p>其次的话，这篇文章的 user study 给的启示大概就是如果要设立对比或者是五分量表类似的测试的话，需要定期通过所谓的 training phase 来保证测试者没有被“带偏”。</p>
<p>如果说要测试云游戏条件下画面撕裂更为显著的话，其实也可以借鉴这种主观评分模式。不同的游戏，不同的撕裂程度（或者说不同幅度的 jitter？）之下受访者到底能够容忍多少。如果发现云游戏条件下测试者的评分有显著下降，应该能说明问题了？</p>
<p>以及最好能提供一些现有的解决方案，证明现在的方案还不够解决这一问题？</p>
</div>
<p>上述实验是音频和音频之间的错位，其余种类流之间的错位本文似乎没有展开说明。</p>
<h3 id="inter-stream-delay">Inter Stream Delay</h3>
<p>这一部分主要是 ISD 的建模：</p>
<p><img src="/uploads/paper-2023-10/2.png" /></p>
<p>可以看到基本和 Introduction 中提出的一致，分为网络延迟、解码延迟、播放延迟、声音传播延迟。</p>
<p>网络延迟的测量也和先前一样，否定了 NTP 协议和对称 RTT 测量两种方案。解码延迟则理论可以测量（通过对目标设备和音频格式类型的仔细测量来分析这些延迟），然而受限于终端种类繁多，API 也不总是可用，这种测量几乎实际不可行。播放延迟则来源于硬件的 jitter buffer，这种延迟几乎无法测量。声音传播延迟自然因为硬件问题无法测量。</p>
<p>最终归纳为下表：</p>
<p><img src="/uploads/paper-2023-10/3.png" /></p>
<p>总而言之，目前的测量方法的误差都过大，根本无法做到从各个环节上把握 ISD，更不用谈以此为基础控制 ISD 了（这一部分就是用于说明问题的挑战性和本文方案的创新性的）。</p>
<h3 id="isd-variation">ISD Variation</h3>
<p>大概的意思是继续说现有方案解决不了问题，原因是 ISD 是动态的。简而言之，ISD 的组成成分中，包含了低概率发生的 IP 路径更改或者显卡调度更改导致的大幅度震荡，以及更常见的因为网络波动和 jitter buffer 耗尽导致的小幅度震荡。</p>
<p>也就是说，ISD 的校正需要尽快且足够频繁以应对这些变化。实践证明，Ekho 最多间隔 15 秒测量一次 ISD 足以应对这些震荡。</p>
<h2 id="ekho">Ekho</h2>
<h3 id="overview-of-isd-measurement-in-ekho">Overview of ISD Measurement in Ekho</h3>
<p>简而言之，Ekho 采用了端到端的测量方案，即忽略掉中途环节，直接在端侧考虑延迟：</p>
<p><img src="/uploads/paper-2023-10/4.png" /></p>
<p>这里两路音频指的是屏幕音频和耳机音频，由于屏幕音频最终会被耳机捕捉，所以可以在耳机中直接比较两路音频得到 ISD 的估算。</p>
<p>这一方案的问题在于，一般的游戏音频内部没有标志点，无法快速供算法分析捕捉。其次，屏幕音频在经过空气传播削弱之后，加上环境噪声，会导致两路音频更难对齐，这还没有考虑传输过程中两路音频均可能经过了有损压缩。</p>
<p>所以，一种简单的解决方案是在服务器端发送音频的时候，在其内部均匀地（实验中使用 1 秒作为间隔）插入伪噪声标记，这些标记会用来对齐两路音频。这种伪噪声标记需要精心设计，因为其不能影响到玩家正常游戏，需要尽力做到不可察觉。</p>
<h3 id="reliable-marker-detection-in-ekho">Reliable Marker Detection in Ekho</h3>
<p>这里就详细介绍了伪噪声序列的构造方式和检测方式。首先分析游戏音频的频谱特征，可以看到载波的频率基本都在 12 kHz 以上，而重要游戏信息内容基本都位于 6 kHz 以下，所以伪噪声的频率范围需要限制在 6-12 kHz 范围内。此外，由于可探测性取决于振幅，这里的目标是不断探测游戏本体音频的振幅并控制伪噪声标记振幅与其的比值尽可能恒定（游戏声音小标记振幅就小，反之亦然）。</p>
<p>假设 <span class="math inline">\(x[t]\)</span> 是游戏音频，<span class="math inline">\(w[t]\)</span> 为长度为 <span class="math inline">\(L\)</span> 的伪噪声序列，那么最终的带标记音频序列 <span class="math inline">\(x_m[t]\)</span> 为：</p>
<p><span class="math display">\[
\begin{aligned}
x_m[t] &amp;= x[t] + C\alpha_k w[t] \\
\alpha_k &amp;= \gamma\alpha_{k - 1} + (1 - \gamma)\rho(x[(k - 1)T : kT])
\end{aligned}
\]</span></p>
<p>参数 <span class="math inline">\(L\)</span> 影响 ISD 测量的速度和最大可测量的 ISD，一般的话设置为 48000（对应一秒音频，说明生成频率为 21 MHz 左右）。<span class="math inline">\(\rho(x[(k - 1)T : kT])\)</span> 则表示了在 <span class="math inline">\((k - 1)T\)</span> 到 <span class="math inline">\(kT\)</span> 范围内的游戏音频功率，实验中选择 <span class="math inline">\(T = 960\)</span>，这是 48 kHz 下的 20 毫秒音频。</p>
<p>这个公式的原理在于每 20 毫秒通过功率测算调整混入比例 <span class="math inline">\(\alpha_k\)</span>，而 <span class="math inline">\(\alpha_k\)</span> 采用的软更新参数 <span class="math inline">\(\gamma\)</span> 在实验中取 0.4。</p>
<p>在上述混入的基础上就可以介绍检测算法了，假设耳机的录音序列为 <span class="math inline">\(x_{\rm rec}[x]\)</span>，我们计算其交叉相关 <span class="math inline">\(Z[t]\)</span> 如下：</p>
<p><span class="math display">\[
Z[t] = \sum_{i = 1}^L x_{\rm rec}[t + i]w[i]
\]</span></p>
<p>可以注意到这里不断让录音和标记信号对齐，当标记对齐的时候 <span class="math inline">\(Z[t]\)</span> 应当在此处出现峰值。为了让峰值检测更为可靠，需要做下述归一化：</p>
<p><span class="math display">\[
Z^*[t] = \left|\frac{Z[t]}{\sqrt{\dfrac{1}{S}\sum_{i = 1}^S Z[t + i]^2}}\right|
\]</span></p>
<p>通过归一化后的 <span class="math inline">\(Z^*[t]\)</span> 会有比较好的包络线。实际测量中会使用 <span class="math inline">\(S\)</span> 为 100 毫秒，这个参数的来源大致是游戏音效大约都持续 100 毫秒。</p>
<p>为了更好检测峰值，下一步需要具体计算包络线：</p>
<p><span class="math display">\[
R[t] = \begin{cases}
|Z^*[t]| &amp; R[t - 1] \leq |Z^*[t]| \\
\beta R[t - 1] &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>原理是简单的，如果出现峰值则设定峰值，如果没有出现则按照等比数列衰减包络线。这样操作可以过滤掉除了峰值之外的大量无用数据。实验中 <span class="math inline">\(\beta = 0.99995\)</span>。在上述计算的基础上，所有 <span class="math inline">\(R[t] &gt; \theta = 5\)</span> 的值都认为是一次峰值。</p>
<p>峰值更具体的计算为：</p>
<p><span class="math display">\[
P[t] = \begin{cases}
R[t] &amp; R[t \pm 1] &lt; R[t], R[t] &gt; \theta \\
0 &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>此时 <span class="math inline">\(P[t]\)</span> 已经提取出了所有的峰值并且过滤掉了较低峰值。此外，由于峰值的间隔至少应当是 <span class="math inline">\(L\)</span>（峰值间隔应当是伪噪声间隔，如果有较近的峰值应当是游戏本身的峰值，需要过滤），所以给出了下述进一步过滤：</p>
<p><span class="math display">\[
P^*[t] = \begin{cases}
P[t] &amp; P[t] = \max_{|j| &lt; \delta}P[t + j] &gt; 0, \max_{|j| &lt; \delta}P[t + j + L] &gt; 0 \\
0 &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>全检测流程如下：</p>
<p><img src="/uploads/paper-2023-10/5.png" /></p>
<h3 id="isd-estimation">ISD Estimation</h3>
<p>由于 <span class="math inline">\(L\)</span> 选择了一秒，所以这里假定 ISD 不会超越 500 毫秒。在此基础上，将过滤过后的屏幕音频和耳机音频做对比，将距离最小的两个峰值之差作为 ISD 的估计：</p>
<p><img src="/uploads/paper-2023-10/6.png" /></p>
<h3 id="ekho-delay-compensation">Ekho Delay Compensation</h3>
<p>调节的方式很简单，就是塞零音频来强制同步（毕竟已经算出来 ISD 了），本文未来计划通过数据包丢失掩盖技术来做（毕竟插入零音频实在是有点粗暴），但是至少现在没做。</p>
<h2 id="design-implementation">Design &amp; Implementation</h2>
<p>结构是这样的：</p>
<p><img src="/uploads/paper-2023-10/7.png" /></p>
<p>总体来说的话，终端设备基本上仅仅承担了录音的任务，所有的计算负载依然放在云端。云端估算 ISD 的时候依赖于终端传回的音频数据。</p>
<p>具体的实现这里就不涉及了。</p>
<h2 id="evaluation">Evaluation</h2>
<p>评估的话大概包括如下部分：</p>
<ol type="1">
<li>Ekho 是否成功在端到端系统中同步音频流？</li>
<li>什么样的标记音量足以准确估算 ISD，同时又不被人察觉？</li>
<li>在标记辅助的 ISD 测量方面，Ekho 与先前的工作相比如何？</li>
<li>当屏幕音频流静音时，Ekho 是否可以用于视频与音频的同步？</li>
</ol>
<p>同步音频流的实验很简单，直接把 Ekho 开起来然后在每个终端开一个 log 来记录每一帧音频的播放时间，两个设备的时钟会在实验开始前同步：</p>
<p><img src="/uploads/paper-2023-10/8.png" /></p>
<p>总之可以看到 Ekho 将 ISD 控制在 10 毫秒内，而不用 Ekho 的时候几乎做不到压到 10 毫秒的可能。</p>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>《Petal Letter》歌词试译</title>
    <url>/2022/10/27/petal-letter-lyrics/</url>
    <content><![CDATA[<p>秋枫老师发来的一份歌词，感觉挺有意思就试着自己翻译看看了。</p>
<p>歌曲的地址是 BV1Y14y1j7Fi。</p>
<span id="more"></span>
<p><strong><code>@ 朝日 あさひ</code>に<code>@ 溶 と</code>ける<code>@ 微睡 まどろ</code>みと<code>@ 目覚 めざ</code>めの<code>@ 狭間 はざま</code>、そっと<code>@ 口遊 くちずさ</code>む<code>@ 旋律 メロディ</code>、<code>@ 花片 はなびら</code>にのせ、<code>@ 風 かぜ</code>よ<code>@ 届 とど</code>けて、あなたが<code>@ 旅 たび</code>する<code>@ 世界 せかい</code>へ。</strong></p>
<p>在朝阳中浅睡与苏醒的间隙中悄悄吟唱的旋律，乘上飘落的花瓣，就让微风将它传达到你所旅行的世界吧。</p>
<p><strong><code>@ 魔法 まほう</code>で<code>@ 出逢 であ</code>った、あなたと<code>@ 私 わたし</code>、<code>@ 今 いま</code>は<code>@ 別々 べつべつ</code>の<code>@ 物語 ものがたり</code>を<code>@ 行 ゆ</code>く。</strong></p>
<p>因魔法而相遇的你我二人，如今却向着不同的未来而去。</p>
<p>【注释 #1】这里并没有将「<code>@ 物語 ものがたり</code>」直接翻译为“故事”，感觉并不太符合中文的语感。</p>
<p><strong><code>@ 何 なに</code>かが<code>@ 始 はじ</code>まる<code>@ 予感 よかん</code>を<code>@ 胸 むね</code>に、<code>@ 歩 ある</code>き<code>@ 出 だ</code>してから、どれだけ<code>@ 経 た</code>ったの。</strong></p>
<p>心中不知为何，总有着何事将至的预感。即使知道那时的分别，已经过去了不知多长时间。</p>
<p><strong><code>@ 緩 ゆる</code>やかな<code>@ 坂道 さかみち</code>、<code>@ 登 のぼ</code>ればまた<code>@ 独 ひと</code>りきり。</strong></p>
<p>登上平缓的山坡，依然独自一人。</p>
<p><strong><code>@ 寂 さび</code>しさに、<code>@ 心細 こころぼそ</code>さに、<code>@ 寄 よ</code>り<code>@ 添 そ</code>ってくれる、あなたと<code>@ 交 か</code>わした<code>@ 心 こころ</code>の<code>@ 花束 はなたば</code>。</strong></p>
<p>在这寂寞与不安中，我依偎着的，是与你交换的心之花束。</p>
<p>【注释 #2】这里的语句结构有点怪异，歌曲中这里的断句也比较怪异，难以判定「くれる」与后续句子的关系。这里又要经典批判一遍为何现代日语的终止形和连体形合流，这显然难以判定一个动词词组究竟是修饰名词还是直接终止语句，这导致大量的歌词翻译困难。</p>
<p><strong>いつでも<code>@ 誰 だれ</code>かが<code>@ 泣 な</code>いている<code>@ 世界 せかい</code>、<code>@ 鏡 かがみ</code>の<code>@ 向 む</code>こうに<code>@ 霞 かす</code>んだ。<code>@ 今 いま</code>は<code>@ 消 き</code>えた、<code>@ 祭 まつ</code>りの<code>@ 果 は</code>てで。</strong></p>
<p>无论何时都有谁在哭泣着的世界，也在镜子中烟雾朦胧。现在早已在祭典的尽头，消失不见。</p>
<p><strong><code>@ 触 ふ</code>れ<code>@ 合 あ</code>うことすら、できずに<code>@ 別 わか</code>れた。</strong></p>
<p>我们甚至都还没有再次相遇，却又再次分别。</p>
<p><strong>あなたを<code>@ 感 かん</code>じたい<code>@ 時 とき</code>は、<code>@ 名前 なまえ</code>をもう<code>@ 一度 いちど</code> <code>@ 呼 よ</code>ぶ。</strong></p>
<p>每当想要感受你的温暖的时候，再一次，呼唤你的名字。</p>
<p><strong><code>@ 青 あお</code>い<code>@ 薔薇 ローズ</code>、<code>@ 赤 あか</code>い<code>@ 椿 カメリア</code>、<code>@ 花 はな</code>は<code>@ 今日 きょう</code>も<code>@ 咲 さ</code>いてますか。</strong></p>
<p>蓝色的玫瑰，红色的山茶花，花朵如今，也依然在绽放吗。</p>
<p><strong><code>@ 問 と</code>いかけて<code>@ 応 こた</code>えなくても、<code>@ 同 おな</code>じ<code>@ 楽園 そら</code>を<code>@ 見上 みあ</code>げてる。</strong></p>
<p>即使问而不答，我们也始终仰望着同一片乐园（天空）。</p>
<p><strong>あれから<code>@ 始 はじ</code>まった<code>@ 長 なが</code>い<code>@ 旅 たび</code>も、<code>@ 終 お</code>わる、いつかは、<code>@ 消 き</code>える、<code>@ 全 すべ</code>てが。そして、<code>@ 星 ほし</code>は、<code>@ 巡 めぐ</code>る。</strong></p>
<p>从那时开始的漫长旅途，总有一天也会结束，到那时，一切都会消逝。而后，群星依然流转。</p>
<p><strong><code>@ 止 や</code>まない<code>@ 嵐 あらし</code>に<code>@ 足 あし</code>を<code>@ 止 と</code>められ、<code>@ 草臥 くたび</code>れた<code>@ 靴 くつ</code>の<code>@ 跡 あと</code>を<code>@ 振 ふ</code>り<code>@ 返 かえ</code>る。</strong></p>
<p>无休无止的山林雾气中，我不得不停下脚步，回望着以往的足迹，鞋履也早因旅途破旧不堪。</p>
<p><strong><code>@ 大事 だいじ</code>なものはまだ、<code>@ 歩 ある</code>く<code>@ 度 たび</code>に<code>@ 増 ふ</code>えるでしょう。</strong></p>
<p>然而，那些珍贵的回忆，依然随着我们前行的每一步而积累着。</p>
<p><strong>それでも<code>@ 俯 うつむ</code>く<code>@ 私 わたし</code>の<code>@ 背中 せなか</code>を<code>@ 押 お</code>すのは、あなたと<code>@ 交 か</code>わした、<code>@ 叶 かな</code>わぬ<code>@ 約束 やくそく</code>。</strong></p>
<p>尽管如此，激励着早已疲惫不堪的我继续前行的，是与你定下的未竟约定。</p>
<p>【注释 #3】这里意译了「<code>@ 俯 うつむ</code>く」，其本意是“低下头”。</p>
<p><strong><code>@ 大 おお</code>きな<code>@ 鞄 かばん</code>に<code>@ 閉 と</code>じこめた<code>@ 願 ねが</code>い、<code>@ 鏡 かがみ</code>と<code>@ 一緒 いっしょ</code>に<code>@ 壊 こわ</code>れた。<code>@ 夢 ゆめ</code>と<code>@ 追憶 ついおく</code>が<code>@ 降 ふ</code>り<code>@ 注 そそ</code>ぐ。</strong></p>
<p>珍藏在大大的行李箱中的愿望，也随着镜子一同破碎，梦与追忆倾泻而下。</p>
<p><strong><code>@ 砂 すな</code>へと<code>@ 零 こぼ</code>れた<code>@ 涙 なみだ</code>を<code>@ 拭 ぬぐ</code>って、<code>@ 震 ふる</code>える<code>@ 手 て</code>が<code>@ 拾 ひろ</code>い<code>@ 上 あ</code>げた。</strong></p>
<p>拭去飘落在沙地上的泪水，用颤抖的手将碎片拾起。</p>
<p><strong><code>@ 光 ひかり</code>はきっと、<code>@ 同 おな</code>じ<code>@ 色 いろ</code>をした<code>@ 花 はな</code>。</strong></p>
<p>那光芒必然是，闪耀着相同颜色的花朵。</p>
<p><strong><code>@ 目 め</code>を<code>@ 閉 と</code>じれば、<code>@ 耳 みみ</code>を<code>@ 澄 す</code>ませば、<code>@ 花片 はなびら</code>が<code>@ 風 かぜ</code>に<code>@ 乗 の</code>って、<code>@ 旋律 メロディ</code>を<code>@ 届 とど</code>けるでしょう。</strong></p>
<p>闭上眼睛，侧耳倾听，花瓣乘上微风，将那旋律传达给你。</p>
<p><strong><code>@ 私 わたし</code>からあなたへの<code>@ 手紙 レター</code>。</strong></p>
<p>这就是，我寄给你的，一封信。</p>
]]></content>
      <categories>
        <category>【杂谈】日语</category>
      </categories>
  </entry>
  <entry>
    <title>2023 年 9 月论文笔记</title>
    <url>/2023/09/01/paper-2023-09/</url>
    <content><![CDATA[<p>博士生涯正式开始了，首先先看看论文吧。</p>
<span id="more"></span>
<h1 id="nebula---reliable-low-latency-video-transmission-for-mobile-cloud-gaming">Nebula - Reliable Low-latency Video Transmission for Mobile Cloud Gaming</h1>
<h2 id="introduction">Introduction</h2>
<p>云游戏（Mobile Cloud Gaming / MCG）系统的目标是高质量传输游戏内容，一般而言具有下列特征：</p>
<ul>
<li>轻量级的客户端（手机等终端）</li>
<li>相对重量级的云端服务器</li>
<li>分布广泛但是具有不可预测性的移动网络</li>
</ul>
<p>现行的云游戏系统往往针对家用定点游戏（原文是 sedentary gaming at home，我猜是类似主机游戏或者用户一般不会到处走动的手游），这类云游戏系统往往通过 WebRTC 等协议实现较低传输延迟，然而可能会导致较低的画质，从而影响 QoE。但是移动网络的带宽不确定性、丢包率高、公网传输不稳定等问题也是一大挑战。</p>
<p>目前，ABR 算法常用于应对带宽波动，FEC（Forward Error Correction，前向纠错）算法常用于应对丢包。然而，ABR 受限于难以精确预测可用带宽，FEC 受限于较高的成本。此外，这两类算法也较少同时使用。</p>
<p>然后就是本文：</p>
<div class="note success no-icon"><p>In this paper, we introduce Nebula, the first end-to-end framework combining (1) <strong>video distortion propagation modelling</strong> with (2) <strong>adaptive frame-level FEC</strong> and (3) <strong>joint video encoding bitrate</strong> and (4) <strong>FEC redundancy control</strong> for MCG over mobile networks (see Figure 1).</p>
</div>
<p>说实话四层 buff 确实让人看得有点迷糊。</p>
<p>Nebula 的基础是对误差在多个游戏帧之间的传播情况建模，以考虑视频信号的失真情况。这种方案相较于直接在整组图片（Group of Pictures / GoP）上应用 FEC，Nebula 使用了帧级别的 FEC，从而 GoP 中的帧将会按照时间顺序的接近程度被不同程度地保护。这是显然的，因为 Nebula 毕竟考虑的是错误传播，越远的帧上的错误传播情况自然更加难以把握。这样的操作可以尽可能压缩端到端传输延迟，并且显著减少错误在 GoP 之中的传播。此外，Nebula 显然也采用了一些用来应对带宽波动的算法，但是这显然不是文章的重点。</p>
<p>采用的 baseline 有标准 TCP Cubic based、标准 WebRTC based、BO 和 ESCOT。具体的一些评估还是看后面具体叙述吧。</p>
<h2 id="background-related-works">Background &amp; Related Works</h2>
<p>这一部分不局限于云游戏，还一并叙述了实时视频传输场景的一些工作（Question #1 - 实时视频传输是不是指的是直播场景呢？）。</p>
<p>首先是简单讲了一下实时视频传输场景的工作，首先讨论了聚焦于 FEC 算法的工作。本文指出这些工作虽然成功通过 FEC 实现了较为可靠的传输，但是难以满足低延迟的要求。在 FEC 算法之外，本文讨论了常见的实时视频传输场景中的常用算法架构。首先 WebRTC 偏好降低延迟以实现实时传输而非提高画质，此外 TCP Cubic 等方法并不将延迟纳入考虑，这些算法或多或少的偏颇考量导致了这些方法难以做到两全。</p>
<p>而和云游戏相关的工作本文似乎并没有介绍很多，但是点出了这么一句话：</p>
<div class="note success no-icon"><p>A few works target specifically MCG due to its novelty.</p>
</div>
<p>感觉和学长和我说的“现在云游戏相关的论文好发表”有一种异曲同工之妙。</p>
<p>文章之中所有和云游戏相关的工作都是采用了 GoP-level FEC，这虽然保证了较为正确的传输，但是也使得 MTP latency 很高。MTP latency 就是 Motion to Photon Latency，指的是游戏中玩家作出操作后反映到画面变化上所产生的延迟。显然，过重的纠错负担会使得构建新的视频帧和解码新视频帧耗时增加，明显加重了 MTP latency。在这之后，自然是吹一下自己使用的 frame-level FEC 在降低延迟上具有相当的实力。</p>
<h2 id="modelling-the-joint-sourcefec-rate-problem">Modelling the Joint Source/FEC Rate Problem</h2>
<p>这一章主要讲解了如何针对现有问题建模。云游戏为了保证实时性，或多或少依赖于有损压缩和传输，然而云游戏对 MTP latency 有着相当高的要求。</p>
<p>FEC 算法虽然能一定程度上抑制传输失真，但是由于 FEC 的冗余带来了新的传输成本，这导致了可用带宽降低。另外一方面，网络拥塞可能导致连续大量的丢包（文中描述为 burst of losses），此时 FEC 也很难做到恢复原有信号，而这种拥塞也有可能是 FEC 自身导致的。当前的工作也基本都将 FEC 应用在整个 GoP 上，导致 MTP latency 大幅上升（原因似乎是在展示某个 GoP 的任何一张图片前，必须完整解码整个 GoP，和我之前想的有一些不同），并且导致在有限带宽条件下画质降低。</p>
<p>本文首先提出了一个误差函数。对于 <span class="math inline">\(K\)</span> 个分辨率为 <span class="math inline">\(M \times N\)</span> 的帧，对 <span class="math inline">\(1 \leq m \leq M, 1 \leq n \leq N, 1 \leq k \leq K\)</span>，定义函数 <span class="math inline">\(f_k(m, n)\)</span> 表示传输前第 <span class="math inline">\(k\)</span> 帧在 <span class="math inline">\((m, n)\)</span> 坐标上的像素值，<span class="math inline">\(\hat f_k(m, n)\)</span> 则是传输后解码得到的像素值。使用均方差的方式定义传输误差：</p>
<p><span class="math display">\[
{\rm MSE} := \frac{1}{MNK} \sum_{k = 1}^K \sum_{m = 1}^M \sum_{n = 1}^N [f_k(m, n) - \hat f_k(m, n)]^2
\]</span></p>
<p>下面我们需要考虑全过程中可能产生失真的地方，这里主要考虑三处。</p>
<p>第一是<strong>编码失真</strong> <span class="math inline">\(D_e\)</span>。对于编码率 <span class="math inline">\(R_e\)</span>，编码失真描述为：</p>
<p><span class="math display">\[
D_e := \frac{\theta_1}{R_e - R_0}
\]</span></p>
<p>这里 <span class="math inline">\(\theta_1, R_0\)</span> 均为适当的参数，事实上这就描述了编码失真和编码率大致成反比例函数关系。</p>
<p>第二是<strong>传输失真</strong> <span class="math inline">\(D_c\)</span>。传输失真的衡量较为简单，记丢包率为 <span class="math inline">\(\Pi\)</span>，则：</p>
<p><span class="math display">\[
D_c := \theta_2\Pi
\]</span></p>
<p>这里 <span class="math inline">\(\theta_2\)</span> 是适当的参数，传输失真与传输丢包率成正比例关系。</p>
<p>第三是<strong>解码失真</strong> <span class="math inline">\(D_d\)</span>。在以往的工作中，将 FEC 应用在 GoP level 时，由于在不考虑 burst package loss 的条件下 GoP 内部丢包时均能正确解码，所以这里不需要考虑错误传播。然而将 FEC 应用在 frame level 时，就需要考虑 GoP 内部丢失帧导致的错误传播。若将 I 帧出现频率记为 <span class="math inline">\(\beta\)</span>，那么解码失真描述为：</p>
<p><span class="math display">\[
D_d := \frac{\theta_3\Pi}{\beta}
\]</span></p>
<p>这里 <span class="math inline">\(\theta_3\)</span> 是适当的参数，这表明丢包率越高，解码失真越高，并且 I 帧率越高，其恢复能力越强，从而使得解码失真越低。</p>
<p>综合得到全过程失真为：</p>
<p><span class="math display">\[
D := D_e + D_c + D_d = \frac{\theta_1}{R_e - R_0} + \theta_2\Pi + \frac{\theta_3\Pi}{\beta}
\]</span></p>
<p>那么可以得到这一套系统的峰值信噪比（即 PSNR）为：</p>
<p><span class="math display">\[
{\rm PSNR} = 20\log_{10}({\rm MAX}_I) - 10\log_{10}\left(\frac{\theta_1}{R_e - R_0} + \left(\theta_2 + \frac{\theta_3}{\beta}\right)\Pi\right)
\]</span></p>
<div class="note info no-icon"><p>PSNR 的定义是：</p>
<p><span class="math display">\[
{\rm PSNR} := 10\log_{10}\left(\frac{\mathrm{MAX}_I^2}{\mathrm{MSE}}\right) = 20\log_{10}({\rm MAX}_I) - 10\log_{10}(\mathrm{MSE})
\]</span></p>
<p>这里 <span class="math inline">\({\rm MAX}_I\)</span> 指的是每个像素点可能的最大取值。具体而言，如果某一类图像中每个像素均使用 <span class="math inline">\(B\)</span> 位二进制表示，那么 <span class="math inline">\({\rm MAX}_I = 2^B - 1\)</span>。</p>
<p>而这里 <span class="math inline">\({\rm MSE}\)</span> 就是上面提到的传输前后的均方差误差，在这一篇文章中就是三重失真叠加得到的 <span class="math inline">\(D\)</span>。</p>
</div>
<p>综上所述，本文对失真所采用的建模方式可以展现为：</p>
<p><img src="/uploads/paper-2023-09/1.png" /></p>
<p>但这里有个比较奇妙的地方就是，图的注释里面说了 <span class="math inline">\(\Pi = 0.1\%\)</span>，每一张图也都给定了 <span class="math inline">\(\beta\)</span>，那么为何 <span class="math inline">\(D_c, D_d\)</span> 还会跟随 <span class="math inline">\(R_e\)</span> 变化而线性变化呢？我找了一下原论文，里面也说 <span class="math inline">\(\theta_{1, 2, 3}\)</span> 都是常数，理应不变化的，这里就有点不太理解了。</p>
<hr />
<p>在此基础上，云游戏系统的目标应当是在满足实时性的约束下最小化失真，所以可以使用有约束优化问题的方式建模云游戏问题。我们能获取到客户端测量的部分网络参数，如往返时延 <span class="math inline">\({\rm RTT}\)</span>、丢包率 <span class="math inline">\(\Pi\)</span>、最大可用带宽 <span class="math inline">\(\mu\)</span>、MTP latency <span class="math inline">\({\rm MTP}\)</span>，此外，我们还知晓编码率 <span class="math inline">\(R_e\)</span> 和最大容忍延迟 <span class="math inline">\(T_d\)</span>。</p>
<p>云游戏最重要的一项指标就是 MTP latency，而 MTP latency 与发送速率 <span class="math inline">\(R = R_e + R_r\)</span>（这里 <span class="math inline">\(R_r\)</span> 是冗余率）以及可用带宽 <span class="math inline">\(\mu\)</span> 均不成反比，和排队延迟 <span class="math inline">\(Q_d = {\rm RTT} - {\rm RTT}_{\rm min}\)</span> 成正比。</p>
<p>基于此，每一帧都可以有以下建模。首先定义优化目标为：</p>
<p><span class="math display">\[
\{R_e, R_r\} = \mathop{\rm argmin}(D + \varphi{\rm MTP})
\]</span></p>
<p>其中：</p>
<p><span class="math display">\[
\begin{aligned}
D &amp;= \frac{\theta_1}{R_e - R_0} + \theta_2\Pi + \frac{\theta_3\Pi}{\beta} \\
{\rm MTP} &amp;= \frac{\alpha_1}{\mu} + \frac{\alpha_2}{R_e + R_r} + \alpha_3Q_d + \alpha_4 \\
\end{aligned}
\]</span></p>
<p>优化约束则为：</p>
<p><span class="math display">\[
\begin{cases}
{\rm MTP} \leq T_d \\
R_e + R_r \leq \mu \\
\end{cases}
\]</span></p>
<p>这里 <span class="math inline">\(\varphi\)</span> 是超参数，<span class="math inline">\(\theta_{1, 2, 3}, R_0\)</span> 都是根据编码器设定的，而 <span class="math inline">\(\alpha_{1, 2, 3, 4}\)</span> 则是根据回归方式得到的有 95% 置信度的参数，回归所使用的数据集涵盖了有线和 WiFi 等多种网络环境。</p>
<p>在给定帧位置 <span class="math inline">\(k\)</span> 和丢包率 <span class="math inline">\(\Pi(t)\)</span> 的条件下，在发送到该帧时需要发送的总包数为：</p>
<p><span class="math display">\[
n := \begin{cases}
k &amp; \Pi(t) = 0 \\
\max(k + 1, \lceil k(1 + \omega(F - f)\Pi(t))\rceil) &amp; \Pi(t) &gt; 0, {\rm cut}\ D_d \\
\max(k + 1, \lceil k(1 + \Pi(t))\rceil) &amp; {\rm otherwise} \\
\end{cases}
\]</span></p>
<p>这个公式实际上是冗余率的控制公式，也就是在给定 <span class="math inline">\(\Pi\)</span> 的条件下，为了发送 <span class="math inline">\(k\)</span> 个有效包，需要总共发送多少个包。</p>
<p>这里需要说明第二项之中的 <span class="math inline">\(\omega, F, f\)</span> 参数。首先我们能够注意到，当 I 帧率 <span class="math inline">\(\beta\)</span> 降低的时候，由于错误传递的链条增长，解码失真会更加严重。这里本文提出的方法是对 GoP 中的帧做不均匀保护，这也就是这些参数的来源。其中 <span class="math inline">\(f\)</span> 是该帧在 GoP 之中的位置，<span class="math inline">\(F\)</span> 则是总帧数，针对该帧的冗余率则是 <span class="math inline">\(k\omega\Pi(F - f)\)</span>，其中 <span class="math inline">\(0 &lt; \omega &lt; 0.4\)</span> 是一个经验参数，根据丢包率 <span class="math inline">\(\Pi\)</span> 调节。可以发现，离 I 帧越近的帧（即更小的 <span class="math inline">\(f\)</span>），会带来更多的冗余以及保护。</p>
<hr />
<p>综上所述，本文将云游戏的问题建模为一个带约束的优化问题，即在满足即时性（MTP latency 用上界限制）和预防网络过载（发送速率用上界限制）的条件下尽可能地降低失真，通过在每个离散时间点求解该优化问题即可得到下一段时间使用的编码率 <span class="math inline">\(R_e\)</span> 和冗余率 <span class="math inline">\(R_r\)</span>。</p>
<h2 id="distortion-minimization-framework">Distortion Minimization Framework</h2>
<p>然后就是系统架构了：</p>
<p><img src="/uploads/paper-2023-09/2.png" /></p>
<p>系统架构中主要的部分是 parameter tuner 和 controller。parameter tuner 接受网络环境的测量值，输出 <span class="math inline">\(R_e, R_r\)</span> 等参数，之后提供给 controller 来控制编码器和 FEC 编码。上述部分是服务端的结构，而这一系统在客户端还包括一个 network performace monitor，其用于检测网络信息上传到服务端供决策。</p>
<h3 id="encoder-decoder-control-redundancy-rate">Encoder &amp; Decoder (Control Redundancy Rate)</h3>
<p>系统中的 FEC Coder 采用了 RLNC 编码方法，该方法生成 <span class="math inline">\(r = n - k\)</span> 个冗余数据包，其中 FEC 块的大小为 <span class="math inline">\(n\)</span> 个数据包（<span class="math inline">\(n\)</span> 的公式在先前有叙述）。如果在块中收到任意随机 <span class="math inline">\(k\)</span> 个数据包，解码器即可恢复帧。paramerter tuner 从客户端的报告中提取数据包丢失信息，并根据 GoP 中的帧位置来调整冗余（参见方程式5）。GoP 帧的可变 FEC 编码确保了较低的错误传播，因为导致较高传播的帧会获得更高的保护。</p>
<p>将编解码器结构单独列出，得到：</p>
<p><img src="/uploads/paper-2023-09/3.png" /></p>
<p>这里 FEC 解码器在接收到超过 <span class="math inline">\(k\)</span> 个帧的时候就开始解码。</p>
<h3 id="adaptive-bitrate-control-encode-rate">Adaptive Bitrate (Control Encode Rate)</h3>
<p>之前提到过 FEC 并不能应对 burst package loss，所以类似 ABR，需要控制编码率 <span class="math inline">\(R_e\)</span>。当然，和 ABR 不同的地方是这一套系统还需要控制捕捉渲染帧的频率（说白了就是云游戏并不是所有帧都会渲染，在资源比较紧张的时候，会减小渲染频率，这也应该是导致丢帧的一个因素，只不过这里是主动丢帧）。</p>
<p>但是似乎带宽波动最终一般导致的是延迟波动，一般不会导致丢包。原文大概是：</p>
<div class="note success no-icon"><p>The resulting video dynamically changes resolution with minimal distortion as few packets are lost due to the bandwidth variations.</p>
</div>
<p>这一套系统也在上一幅图中有所体现，即 Source Rate Control。</p>
<h2 id="implementation">Implementation</h2>
<p>编码器的实现就不管了，总之就是讲了一下用了些什么库之类不是很重要的事情，具体结构之前也已经说过了，没什么新的。</p>
<p>客户端的网络性能检测器（Network Performance Monitor）主要是计算可用带宽：</p>
<p><span class="math display">\[
\mu := \frac{\sum_{f = 1}^{F_s}\sum_{p = 2}^kS(p)}{\sum_{f = 1}^{F_s}t(f)}
\]</span></p>
<p>丢包率 <span class="math inline">\(\Pi\)</span> 定义为丢失的数据包数量与成功恢复帧之前接收到的数据包中丢失的序列号数量 <span class="math inline">\(k\)</span> 之比。此外，NPM 还会计算 MTP latency。</p>
<p>最后，这些值会通过近五次测量取平均的方式完成平滑。</p>
<p>之后还有一些代码细节，这里就不管了，本文还把 Nebula 实现为 C++ 库供 WebAPP 通过 JavaScript 调用。</p>
<h2 id="evaluation">Evaluation</h2>
<p>baseline 算法已经叙述过了，这里不再叙述。有些实验参数设置这里也不再抄录，直接去原文找吧。</p>
<p>Nebula 系统的时延各部分占比情况如下，这里忽略了传输延迟：</p>
<p><img src="/uploads/paper-2023-09/4.png" /></p>
<p>文章的意思是，虽然这里视频编解码时延还是较大，但是通过硬件编解码应当可以压缩到合适的范围内。所以，本文认为 Nebula 可以在不显著增加时延的基础上实现更高的纠错能力。</p>
<p>在进一步的模拟实验中，本文模拟了一个带宽变化的无线网络，并在其上传输 60 秒的 1080p 视频。几种算法的表现如图：</p>
<p><img src="/uploads/paper-2023-09/5.png" /></p>
<p>可见只有 BO 具有较低的 MTP latency，然而 Nebula 至少保持了和 WebRTC 持平。此外，ESCOT 由于使用 GoP level FEC，展现了较高的 MTP latency。从画质（以 PSNR 衡量）的角度，BO 通过保持低画质才实现了低延迟。TCP Cubic 具有最高的画质，这是因为没有集成变化视频编码质量的机制，始终保持高画质。综合来看，只有 Nebula 和 WebRTC 做到了平衡画质和 MTP latency。</p>
<p>如果观察具体的发包速率，则可以解释这些现象：</p>
<p><img src="/uploads/paper-2023-09/6.png" /></p>
<ul>
<li>BO 始终保持对带宽的低估，所以保持了低画质和低延迟</li>
<li>WebRTC 相对较为保守，但已经足够完成画质和延迟的均衡</li>
<li>TCP Cubic 始终选择较为激进的超额策略</li>
<li>ESCOT 和 Nebula 选用了相同的方式估算带宽，但是 ESCOT 一次发出一个 GoP，Nebula 通过优化带宽使用实现了均衡</li>
</ul>
<p>后面还有用户实验，这里就跳过了。</p>
<h2 id="conclusion">Conclusion</h2>
<p>总而言之，我看下来觉得这篇文章的贡献主要是：</p>
<ul>
<li>将 FEC 降低到 frame level</li>
<li>结合了 FEC 和类似 ABR 的系统，实现了时延和画质的平衡</li>
<li>在更极端的条件下（这些条件令 baseline 算法崩溃）表现较好</li>
</ul>
<p>但我觉得这里的一些建模还是有点语焉不详，或许是我太菜看不懂罢了。</p>
<h1 id="qarc---video-quality-aware-rate-control-for-real-time-video-streaming-based-on-deep-reinforcement-learning">QARC - Video Quality Aware Rate Control for Real-Time Video Streaming based on Deep Reinforcement Learning</h1>
<p>又看到自己组的论文了，这下该逮着黄老师一顿狂问了。</p>
<h2 id="introduction-1">Introduction</h2>
<p>简而言之就是一个直播 ABR，用 DRL 来做码率决策。然而如果直接把原始图片作为模型的输入，那么状态空间可能会过大，所以本文最主要的是将这一个模型拆为 VQPN 和 VQRL 两部分。其中，VQPN 用来预测未来的视频质量，VQRL 则基于 VQPN 的预测和网络状态做出码率决策。为了训练 VQRL，本文还提出了一个离线模拟器。</p>
<p>主要贡献为：</p>
<ul>
<li>重新定义了 QoE，似乎指的是将以往基于码率的 QoE 改成了从整个视频会话的角度思考</li>
<li>Quality aware，但我还是不是很懂这个名词的含义，Google 的解释为：Quality awareness is the way to promote quality activities by emphasizing quality at all stages of the business</li>
<li>将庞大的模型拆为两部分，有效控制了状态空间的大小</li>
</ul>
<h2 id="motivation">Motivation</h2>
<p>这里主要是说明码率并不能完全反映视频质量，一个静态场景的视频，高码率并不能有效提高用户感知的质量，反而会过分占用带宽导致拥堵。这里使用基于支持向量机的 VMAF 算法作为视频质量评估算法，其分别评估了静态背景视频、动态背景视频和混合背景视频在不同码率、不同编码器下的 VMAF 得分，数据显示大部分情况下在较高码率区域，码率的增长对视频质量提高的作用十分有限。所以，单纯依靠提升码率或者换用编码器都不足以有效提升视频质量。</p>
<p><img src="/uploads/paper-2023-09/7.png" /></p>
<h2 id="system-architecture">System Architecture</h2>
<p>系统结构还是比较直观的：</p>
<p><img src="/uploads/paper-2023-09/8.png" /></p>
<p>整体上的话和 ABR 结构类似，但是由于码率和视频质量的不成比例，所以需要有 VQPN 来学习前一帧、网络状态和码率之间的关系，然后通过 VQRL 做出码率决策。</p>
<p>这里提出 VQPN 的必要性在于，根据本文的 motivation，制约视频质量（以 VMAF 衡量）的因素过多（视频种类、亮度、物体数量等），导致难以简单地通过启发式等方法预测未来的码率和视频质量的关系。基于此，通过神经网络来完成这一任务就是自然的了。</p>
<p>神经网络的设计是先通过 CNN 提取图像信息，然后预测部分则是一般的 RNN。首先定义视频质量指标，对某一个给定的时间槽 <span class="math inline">\(t\)</span> 以及其中的帧 <span class="math inline">\(f_i\)</span>，本文先在给定码率 <span class="math inline">\(b\)</span> 下将该帧编码后传入 VMAF 算法计算得到 <span class="math inline">\(V(f_i, b)\)</span>，定义时间槽内的 VMAF 分数为时间槽内各帧的平均值：</p>
<p><span class="math display">\[
V(t, b) := \frac{1}{F}\sum_{i = 1}^F V(f_i, b)
\]</span></p>
<p>最终这些分数会被归一化到 <span class="math inline">\([0, 1]\)</span> 区间中。</p>
<p>该模型接受的输入是时间槽 <span class="math inline">\(t\)</span> 中的各个帧，先通过 CNN 提取图像特征，再通过 RNN 提取时序特征，模型的输出则是不同码率下下一时间槽 <span class="math inline">\(t + 1\)</span> 的视频质量（VMAF 分数）。</p>
<p>损失函数是简单的均方差，下述公式中 <span class="math inline">\(\hat V\)</span> 是 ground truth。另外为了防止过拟合，增加了二次正则：</p>
<p><span class="math display">\[
\mathcal{L} := \frac{1}{B}\sum_{b = 1}^B |V(t + 1, b) - \hat V(t + 1, b)|^2 + \lambda \|\theta\|^2
\]</span></p>
<hr />
<p>之后是 VQRL，一个经典的 RL 算法。状态空间主要包括先前发送的视频质量、VQPN 预测的未来视频质量、过去视频发送速率、过去视频接收速率、过去视频延迟梯度、过去视频丢包率。但是这里和黄老师之前处理状态空间的区别有两个，一个是多了个延迟梯度，一个是莫名其妙引入了 FFT 算法，目前还不是很清楚这样做的原因。决策空间显然是码率，这没有什么好说的。QoE 使用了和以往不同的定义，这里先忽略。</p>
<p>具体算法是 A3C，策略梯度部分为：</p>
<p><span class="math display">\[
\nabla\mathbb{E}_{\pi_\theta}\left[\sum_{t = 0}^{+\infty} \gamma^t r_t\right] = \mathbb{E}_{\pi_\theta}\left[\nabla_\theta \ln\pi_\theta(s, a)A^{\pi_\theta}(s, a)\right]
\]</span></p>
<p>在此基础上，为了更好平滑策略，在具体更新的时候还增加策略熵项：</p>
<p><span class="math display">\[
\theta\leftarrow\theta + \alpha\sum_t \nabla_\theta \ln\pi_\theta(s_t, a_t)A(s_t, a_t) + \beta\nabla_\theta H(\pi_\theta(\cdot\mid s_t))
\]</span></p>
<p>此外，为了计算 <span class="math inline">\(A\)</span>，需要在策略网络之外设定值网络。值网络采用 Q learning 训练，这里就忽略掉了。</p>
<p>在具体训练阶段，VQRL 因为采用了 A3C 所以使用了多智能体可以理解，但是有关模拟器的部分可能还有点不是那么看得懂（这里悄悄偷懒不看了，真的缺失太多基础知识了，再说）。</p>
<h2 id="evaluation-1">Evaluation</h2>
<p>首先是实现算法，这里数据集啥的也都先跳过，主要要说 QoE 指标设定：</p>
<p><span class="math display">\[
{\rm QoE} := \sum_{n = 1}^N(V_n - \alpha B_n - \beta D_n) - \gamma\sum_{n = 1}^{N - 1}|V_{n + 1} - V_n|
\]</span></p>
<p>这里 <span class="math inline">\(V_n\)</span> 表示时间 <span class="math inline">\(n\)</span> 的视频质量，<span class="math inline">\(B_n\)</span> 是发送方选择的视频比特率，<span class="math inline">\(D_n\)</span> 代表接收方测量的延迟梯度，最后一项则表现了视频质量的平滑性。</p>
<p>之后就是系统实现，一样的，网络结构和超参数这里就不抄了。不过本文最有意思的是其不是直接给出网络结构和超参数的选择，而是详细写了选择这些超参数的实验结果。比如在选择网络结构、是否加入 FFT 和序列长度的时候，就有这些实验结果：</p>
<p><img src="/uploads/paper-2023-09/9.png" /></p>
<p>另外的一些实验结果这里就跳掉了，基本上就是吊打 baseline。</p>
<h2 id="related-works">Related Works</h2>
<p>讲了一下有关实时流量控制、视频质量评估和强化学习的一些基础工作。主要批评了一下用丢包事件调控发送速率的 TCP 拥塞控制（你都已经丢包了才开始降速率，早就已经晚了），然后批评了一下 PSNR、SSIM 不能很好形容视频质量，然后吹了一下 VMAF。</p>
<h1 id="sqp---congestion-control-for-low-latency-interactive-video-streaming">SQP - Congestion Control for Low-Latency Interactive Video Streaming</h1>
<p>云游戏原来更官方的说法叫<strong>互动视频流</strong>。当然，这不是个等价的说法，毕竟远程桌面啥的也叫互动视频流。但是，至少以后介绍自己在干什么的时候就可以：“我做互动视频流传输优化的”。</p>
<h2 id="introduction-2">Introduction</h2>
<p>本文是做一个拥塞控制算法（Congestion Control Algorithm / CCA），一个对互动视频流友好的 CCA 需要满足：</p>
<ul>
<li>低排队延迟。CCA 需要探测带宽，那么就需要发送探测数据包，但是过度的探测会导致带宽被浪费在测量行为上，所以 CCA 需要尽可能少占用带宽而能够获取尽可能精准的带宽测量。此外，CCA 在带宽降低的时候，需要迅速撤回发送以减少排队。Cubic 和 PCC 在这方面就不足够好</li>
<li>公平性。不是很懂这篇文章里面对公平性的定义，但是我自己认为就是要公平对待每一个流？不管了，先看后面的</li>
<li>友好型。就是不能饿死其他流</li>
<li>视频感知。这里也没怎么看得懂，还是后面慢慢看吧</li>
</ul>
<p>感觉 CCA 的一些基础可以看：https://www.fanyamin.com/blog/yong-sai-kong-zhi-ji-zhu-de-bi-ji-yi-li-lun-pian.html</p>
<p>然后就是说，现在通用的 CCA 可能不能满足互动视频流的需求，言下之意就是我们得专门设计一个 CCA。本文提出了 SQP，其主要特点在于：</p>
<ul>
<li>优先考虑低延迟而非链路利用率。总而言之就是优化目标的重新排序，SQP 首先考虑的是低延迟，即使并不能高强度压榨网络带宽</li>
<li>应用特定的权衡。似乎指的是如果延迟过高或者可用带宽过低，会允许终止视频流通话</li>
<li>帧关注式操作。网络排队是侦测网络参数的重要现象，部分不通过网络排队侦测网络的 CCA 可能无法充分利用网络带宽，即使其延迟较低。而 SQP 通过有节奏的突发传输将带宽测量值附加到帧信息中</li>
<li>直接码率控制。SQP 似乎会通过调整帧级别的码率来响应拥塞，似乎又是一个 ABR 类似的东西</li>
<li>竞争吞吐量。没太看懂，总之是比较猛的意思。此外似乎提到了自适应这一个属性，但 CCA 里面什么是自适应，还真的不知道</li>
</ul>
<h2 id="related-work">Related Work</h2>
<p>直接把 ChatGPT 的翻译贴过来吧：</p>
<div class="note success no-icon"><p>适用于低延迟互动式视频流媒体的拥塞控制算法必须满足在第 1 节中讨论的四个关键特性。各种拥塞控制算法总结在表 1 中。像 TCP-Lola [27]、TCP-Vegas [28] 和 Sprout（Salsify3）[21, 29] 这样使用数据包延迟作为信号的低延迟拥塞控制算法存在一个关键缺点：它们在与排队建立的交叉流量竞争时无法实现高吞吐量。一些模式切换算法（例如 Copa [14]）可能会误解自引发的排队为竞争流，导致高延迟，而其他拥塞控制算法如 Nimbus [15] 和 GoogCC（WebRTC）[17, 18] 收敛速度较慢，在与排队建立的流量竞争时吞吐量不稳定。</p>
</div>
<p>算法的比较表如下：</p>
<p><img src="/uploads/paper-2023-09/10.png" /></p>
<p>用数据包延迟做信号的 CCA 无法实现高吞吐的原因我猜测是因为这类算法一般也不会太激进，一旦遇到竞争就会导致包延迟加大，这就导致这类算法往回缩，直接退出竞争。模式切换算法不是很懂什么意思，后面还有攻击收敛速度慢导致不稳定的，这些就不再说了。</p>
<p>此外还有些算法，如 BBR 通过定期限制传输来做测量，这显然不适用于对实时性有高要求的互动视频流（毕竟做测量的时候就不能发包，这太恐怖了）。PCC 算法目标是较为精准地测量网络，结果就是收敛速度慢。</p>
<p>最后贴一个总结：</p>
<div class="note success no-icon"><p>拥塞控制算法使用基于速率或基于窗口的机制来在拥塞情况下控制传输速率。基于速率的拥塞控制算法更适合视频流媒体，因为数据包传输是无突发的，而基于窗口的机制可能会在发送端阻塞帧传输，使编码器速率控制变得复杂（例如，Salsify-Sprout）。基于速率的拥塞控制算法的另一个好处是它们的内部带宽估算可以直接用于设置视频比特率，而基于窗口的机制需要额外的机制来设置视频比特率。</p>
</div>
<h2 id="preliminary-study">Preliminary Study</h2>
<p>这里就直接开始拿实验结果攻击之前的算法了。</p>
<h3 id="variable-bandwidth-link">Variable Bandwidth Link</h3>
<p>大概就是让带宽从 20 Mbps 突降到 5 Mbps 然后拉回来，主要观察算法能不能觉察到带宽突降并保持低延迟，并且在带宽恢复的时候能够觉察到资源恢复并尽快拉高传输。</p>
<p><img src="/uploads/paper-2023-09/11.png" /></p>
<p>可以看到 Cubic 几乎打满了带宽利用，基本上就是猛猛参与竞争，但相应的就是延迟很高。其余的算法基本上能保持较低延迟，其中 Sprout 和 Copa 0.1 保持最好，但是利用率并不理想。PCC Vivace、GoogCC、BBR 适应较慢，基本上还是出现了延迟峰值。PCC 和 Copa Auto 则直接爆了，在低带宽时期保持了很高的延迟。</p>
<p>后面就从算法原理的角度批判了一下 BBR 的设置很容易导致延迟（对在途包数量有限制），之后批判 Copa 容易误判现象导致延迟。</p>
<p>之后是比较收敛性，显然 PCC 和 GoogCC 是不理想的，明显注意到在带宽恢复的时候这两个算法耗费了很长时间恢复。</p>
<p>综上，互动视频流对 CCA 的要求为：“拥塞控制算法必须能够快速识别链路容量，而不引起排队延迟，并在延迟是自引发的情况下迅速退避”。</p>
<h3 id="short-timescale-variations">Short Timescale Variations</h3>
<p>这一部分主要是观察各个算法在时间微观尺度上的行为。</p>
<p><img src="/uploads/paper-2023-09/12.png" /></p>
<p>Copa 的延迟波动极大，可以注意到其各个帧的发送率波动相当之大。BBR 则更为离谱，其由于在途包数量限制和阻塞发送测量网络的行为，其中间直接出现了极低的数据包发送率。相比较之下，Vivace 这一类基于速率的算法更适合互动视频流，其内部对发送速率的估算显然可以作为码率决策的参考。与其他类型的 CCA 相比，其他算法做码率决策的时候需要用其他参数七弯八拐得到决策，不如基于速率的算法直观和简单。</p>
<h2 id="design">Design</h2>
<p>SQP 目标是：</p>
<ul>
<li>提供实时带宽估算</li>
<li>在竞争条件下提供有竞争的吞吐量</li>
</ul>
<p>整体结构为：</p>
<p><img src="/uploads/paper-2023-09/13.png" /></p>
<p>这里直接进入各个组成部分细节的讨论。</p>
<h3 id="bandwidth-sampling">Bandwidth Sampling</h3>
<p>做带宽侦测，目标就是精确掌握当前可用的带宽大小，以尽可能利用并且减少排队、避免传输暂停（显然 BBR 的神奇设计给本文作者留下了深刻的印象）。SQP 的逻辑是，将某一个帧的各个数据包以略大于网络承载量的速率发送，以形成小范围的排队。如果视频的平均码率小于瓶颈链路可用流量，就意味着先前的队列可以在下一帧到达前排空。</p>
<p>此外，SQP 的特点在于其测量链路可用流量的粒度为子帧（在 60FPS 下粒度最大为 16.66 毫秒）</p>
<p><img src="/uploads/paper-2023-09/14.png" /></p>
<p>假定某视频的帧间隔时间为 <span class="math inline">\(I\)</span>（这是固定的，60FPS 下就是 16.66 毫秒），并且假定此时帧在给定码率下大小为 <span class="math inline">\(F\)</span>，那么 SQP 会以高于 <span class="math inline">\(F / I\)</span> 的速率发送这些数据包。如果没有竞争流，这些包的到达时间将会反映当前的可用链路带宽（如上图的红色点）。我们有以下公式：</p>
<p><span class="math display">\[
S = \frac{F}{R_{\rm end} - S_{\rm start} - \Delta_{\rm min}}
\]</span></p>
<p>这里 <span class="math inline">\(R_{\rm end}\)</span> 是最后一帧到达时间，<span class="math inline">\(S_{\rm start}\)</span> 是第一帧发出时间，<span class="math inline">\(\Delta_{\rm min}\)</span> 是最小单向延迟（在第一次发送的时候就已经测量，之后不再变化），通过上图我们可以看出，这实际计算出了红色点所在直线的斜率，从而构成了对当前链路可用带宽的估计。</p>
<p>可以注意到，上述计算成立是基于没有充分利用链路，因为两帧之间依然存在链路空闲（前一帧已经完全发送，但是后一帧还没编码完毕，称为<strong>无跨帧排队</strong>），这也就是图 (a) 所显示的。这个时候第二帧的第一个数据包出现的单向延迟 <span class="math inline">\(\Delta\)</span> 等于第一帧的第一个数据包 <span class="math inline">\(\Delta_{\rm min}\)</span>，此时 SQP 会试图提高码率，尝试提高视频质量。</p>
<p>但如果过分估计了可用带宽，则可能出现图 (b) 的现象，此时出现了跨帧排队。这个时候第二帧的第一个数据包出现的单向延迟 <span class="math inline">\(\Delta\)</span> 会大于第一帧的第一个数据包 <span class="math inline">\(\Delta_{\rm min}\)</span>。此时使用先前的公式计算出的 <span class="math inline">\(S\)</span> 是图中虚红线的斜率，这个计算值会小于先前的计算，这意味着 SQP 需要降低码率以排空队列。</p>
<p>现在我们需要思考，SQP 对带宽的估算是基于短时爆发流量而非视频平均码率。此时如果出现了较小的帧（例如游戏中打开了静态菜单界面等相对信息量较少的页面，此时编码器并不会完全遵守所请求的码率，而是会编码出一个小帧），如图 (c) 所示。若按照原先的公式，这里的带宽估计值将会被计算为图中较短的虚红线的斜率，这显然过低了。所以我们需要做出修正：</p>
<p><span class="math display">\[
S = \frac{F\gamma}{R_{\rm end} - S_{\rm start} - \Delta_{\rm min} + (R_{\rm end} - R_{\rm start})(\gamma - 1)}
\]</span></p>
<p>这里 <span class="math inline">\(\gamma\)</span> 是帧的大小比例。该式子在数学上成立是显然的。</p>
<h3 id="tracking-minimum-one-way-delay">Tracking Minimum One-way Delay</h3>
<p>这里主要探讨了 <span class="math inline">\(\Delta_{\rm min}\)</span> 的计算，SQP 里面应该有一个时间窗口一直计算每一帧的最小单向延迟，并取窗口中的最小值作为 <span class="math inline">\(\Delta_{\rm min}\)</span>。这里主要是窗口的大小应当如何设定，如果窗口过小，则由于记忆的延迟数据过少，很有可能无法感知到之前自引发的排队，导致一味降低码率。如果窗口过大，虽然可以让 SQP 更快从自引发排队中恢复，但是 SQP 也更容易受到其他流量的影响，降低吞吐量份额。</p>
<p>SQP 采取的窗口大小为 <span class="math inline">\(2 \times {\rm sRTT}\)</span>，这是一个动态的窗口设置。这一设置的好处在于，如果出现了自引发排队，那么随着 <span class="math inline">\({\rm sRTT}\)</span> 上升，窗口大小也随之上升，从而促进排空队列。另外似乎还有一个和竞争流相关的东西，但这里暂且没有看懂，先跳过。这之后还不忘攻击一下 BBR 的机制，虽然 BBR 能够更准确地测量延迟，但是代价是近 200 毫秒的传输暂停，这在交互视频流中几乎是不可接受的。</p>
<h3 id="bandwidth-estimate-update-rule">Bandwidth Estimate Update Rule</h3>
<p>从采样器那里获得的带宽估计将被送到这里处理为传送给编码器决定码率的平滑带宽，具体而言，我们希望平滑后的带宽越大越好，但是也需要惩罚不精准的平滑。本文采用的方式是求解一个优化目标，其中第一项是对数增长的，用来给平滑带宽的增长提供奖励，而第二项则较为严格地使用了平方项来给不精准估计以惩罚：</p>
<p><span class="math display">\[
\max\varphi(B) = \max\left[\log(1 + \alpha B) - \beta(B - e)^2\right]
\]</span></p>
<p>这里 <span class="math inline">\(B\)</span> 是我们需要求的平滑带宽，<span class="math inline">\(\alpha, \beta\)</span> 是超参数。由于 <span class="math inline">\(B = S\)</span> 显然是最佳平滑（<span class="math inline">\(S\)</span> 为采样器提供的估计），这里 <span class="math inline">\(e\)</span> 就是用于调节函数极值点，使得上述函数最大的时候 <span class="math inline">\(B = S\)</span>。为了求解这个 <span class="math inline">\(e\)</span>，我们观察这个函数的导数：</p>
<p><span class="math display">\[
\varphi&#39;(B) = \frac{\alpha}{1 + \alpha B} - 2\beta(B - e)
\]</span></p>
<p>得到：</p>
<p><span class="math display">\[
\frac{\alpha}{1 + \alpha S} = 2\beta(S - e) \iff e = S - \frac{\alpha}{2\beta(1 + \alpha S)}
\]</span></p>
<p>在实际平滑操作的时候，其显然采用了类似梯度下降的逻辑来平滑。即，维护一个当前估计 <span class="math inline">\(B\)</span>，并每次沿着导数方向前进一定步长来完成平滑：</p>
<p><span class="math display">\[
B \leftarrow B + \delta\varphi&#39;(B)
\]</span></p>
<p>这里 <span class="math inline">\(\delta\)</span> 是类似学习率的步长参数。我们做一些数学简化：</p>
<p><span class="math display">\[
\begin{aligned}
\varphi&#39;(B) &amp;= \frac{\alpha}{1 + \alpha B} - 2\beta\left(B - S + \frac{\alpha}{2\beta(1 + \alpha S)}\right) \\
&amp;= \frac{\alpha}{1 + \alpha B} - \frac{\alpha}{1 + \alpha S} - 2\beta(B - S) \\
&amp;= \frac{\alpha^2(S - B)}{(1 + \alpha B)(1 + \alpha S)} + 2\beta(S - B) \\
\end{aligned}
\]</span></p>
<div class="note info no-icon"><p>这里似乎推不出来论文里的更新表达式，找时间问问学长吧。</p>
</div>
<h3 id="pacing-and-target-multipliers">Pacing and Target Multipliers</h3>
<p>这一段似乎提到了公平性和友好性，但是实在是不是很懂，还是等到后面慢慢聊吧。</p>
<div class="note info no-icon"><p>这篇文章暂且就看到这里了，笔记也就到此为止了。</p>
</div>
<h1 id="enabling-high-quality-real-time-communications-with-adaptive-frame-rate">Enabling High Quality Real-Time Communications with Adaptive Frame-Rate</h1>
<h2 id="introduction-3">Introduction</h2>
<p>随着网络条件优化、游戏帧率提高，云游戏系统的解码器总是能快速接收到帧数据。另外一方面，游戏分辨率的提高也增加了解码器的解码时长。综上所述，解码器排队已经是一个不可忽略的延迟，经分析，延迟超过 100 毫秒的帧有过半数在解码器队列中等待了 50 毫秒以上。本文基于“仅仅调整码率并不能有效缓解队列延迟”，主要引入了自适应帧率控制器（AFR），通过控制编码器的帧率来控制解码器的队列压力。</p>
<p>需要注意的是，以往是有过调整帧率的相关工作的，但是随着解码硬件的发展渐渐失去了效用。然而随着高性能 RTC、高帧率和更高的延迟要求，这一需求又凸显出来。另外，我们发现了部分当下方案的问题。首先，现有的控制机制基于反馈速度较慢的延迟或队列长度，所以需要等待队列建立才能做出调整。AFR 相反，其依赖于到达和服务过程以及队列长度来调整帧率。其次，并非所有解码排队延迟的增加都需要降低帧率。例如，当由于瞬时的到达数据包突增而导致排队延迟增加。</p>
<p>总之就是，AFR 可以较快地通过调节帧率实现极低的延迟。</p>
<h2 id="background---high-quality-rtc">Background - High Quality RTC</h2>
<p>首先背景就是 RTC 传输越来越猛了。首先是帧率大幅度提高，现在达到了 60FPS 甚至 240FPS。其次是分辨率大幅度提高，已经开始出现默认 1080p 乃至 4K 的应用。最后是延迟容忍度大幅降低，视频会议阈值大约为 150 毫秒，云游戏则为 100 毫秒。</p>
<p>之后看一下现在的高质量 RTC 结构：</p>
<p><img src="/uploads/paper-2023-09/15.png" /></p>
<p>这里全流程优化里面，本文主要关注尾延迟，基本上也就是解码器排队。另外，出现次数较少的长时间延迟（称为<strong>延迟时间分布长尾</strong>）也需要考虑，本文甚至关注 99% 或 99.9% 百分位数的尾部延迟。例如，在 60FPS 的帧率下，即使是 99.9% 百分位数的延迟也可能每 16 秒发生一次。所以控制长尾也是重要的优化目标。</p>
<h2 id="motivation-and-challenges">Motivation and Challenges</h2>
<h3 id="motivation---drastic-queuing-delay">Motivation - Drastic Queuing Delay</h3>
<p>首先是调研了一下云游戏中的延迟来源，基本上确定了最主要延迟来源为解码器排队、解码、网络延迟（也就是图上面的红色字显示的部分）。记 <span class="math inline">\(N, Q, D, T\)</span> 分别为网络、解码器排队、解码、总延迟，数据统计时本文计算了 <span class="math inline">\(\mathbb{P}(X &gt; X_{\rm th} \mid T &gt; T_{\rm th})\)</span>，其中 <span class="math inline">\(X \in \{N, Q, D\}\)</span>，这里下标 <span class="math inline">\({\rm th}\)</span> 为给定的统计阈值。统计如下：</p>
<p><img src="/uploads/paper-2023-09/16.png" /></p>
<p>符合直觉的是，在总延迟大于 200 毫秒的时候，网络延迟往往占据了大部分。然而如果考虑 100 毫秒左右的延迟，解码器排队延迟反而是占主要部分的延迟。</p>
<p>这也是符合直觉的，这一切的根本原因就是高帧率和高分辨率的要求。如下图所示，这里展现了不同分辨率、帧率下视频流传输服务中 <strong>99 分位数</strong>解码器排队延迟的占比（即只关注尾部数据），可以看到在右上角的 VR/AR 服务中解码器排队延迟相当严重。即使尾部数据很有可能受到 CPU 发热等随机因素影响，但是通过更换更好的硬件，依然无法有效解决这一问题。此外，根据排队论，小幅度的排队波动都可能导致延迟的幅度增加，这些都是影响因素：</p>
<p><img src="/uploads/paper-2023-09/17.png" /></p>
<p>从硬软协同的角度上，软件上视频应用甚至已经开始提供 8K 视频服务，然而编解码器的能力却完全没能跟进。另外一方面，大量的用户依然保持了大量的中低端设备，完全无法流畅运行如此庞大的视频软件。</p>
<h3 id="choice---controlling-proper-parameters">Choice - Controlling Proper Parameters</h3>
<p>总之就是要调节编码器了，编码器主要参数就是帧率、码率、分辨率。从解码器队列的角度，该队列的入队速率取决于编码帧率，出队速率取决于解码效率，即分辨率。</p>
<p>本文需要分别控制各个参数以减少不同的延迟。作为响应，我们调整帧率来控制高质量 RTC 的排队延迟。当解码器和网络的波动导致排队延迟增加时，有必要调整编码参数以减少排队延迟。在这种情况下，经过从客户端和网络收集测量数据后，服务器上的编码器可以相应地调整以下帧的帧率。我们可以动态指定新帧被编码的特定时间戳。</p>
<div class="note info no-icon"><p>这里为什么选择调节帧率而非分辨率等参数似乎我并没有看得太懂，这里还是等等学长来讲解吧。</p>
</div>
<h3 id="challenges">Challenges</h3>
<p>实现超短队列延迟事实上是很困难的，因为一般的探测信号只有在队列已经建立的时候才会有所反馈。简而言之，大部分算法只有已经堵车了才能察觉到拥堵，而做不到预测将来会堵车而下调帧率。为了预测潜在的排队延迟增加，本文采用的方式是探测解码器队列的出队速率。另外，为了应对长尾，本文似乎提出了一整套基于排队论的延迟控制方法，更详细的叙述看来在后面了。</p>
<p>此外，由于队列积累的原因多种多样。解码器的突发退化和无线网络的爆发发包，这些情况很难通过测量出入队速率来做出反应。这里本文提出了根据不同原因在不同尺度下处理排队的系统。其中一个用来防止高负载下的队列积累（稳态控制器），一个用来防止突发条件下的排队延迟（瞬时控制器）。</p>
<h2 id="design---adaptive-frame-rate">Design - Adaptive Frame Rate</h2>
<p>算法结构：</p>
<p><img src="/uploads/paper-2023-09/18.png" /></p>
<p>总而言之，稳态控制器根据出入队情况尽可能将延迟控制在极低范围内，而瞬时控制器则通过队列状态计算折扣因子，在突发条件下需要折扣稳态控制器计算的帧率以响应突发条件。</p>
<h3 id="stationary-controller">Stationary Controller</h3>
<p>这里基于排队论中的 Kingman 公式设计了稳态控制器，可以得到排队时间的期望为：</p>
<p><span class="math display">\[
\mathbb{E}[\tau_{\rm queue}] \approx \left(\frac{\rho}{1 - \rho}\right)\left(\frac{c_a^2 + c_s^2}{2}\right)\mu_s
\]</span></p>
<p>这里：</p>
<p><span class="math display">\[
c_a = \frac{\sigma_a}{\mu_a}, c_s = \frac{\sigma_s}{\mu_s}, \rho = \frac{\mu_a}{\mu_s}
\]</span></p>
<p>其中：</p>
<p><span class="math display">\[
\mu_a = \mathbb{E}[A_n], \sigma_a = \sqrt{\mathop{\rm var}[A_n]}, \mu_s = \mathbb{E}[S_n], \sigma_s = \sqrt{\mathop{\rm var}[S_n]}
\]</span></p>
<p>这里 <span class="math inline">\(\rho\)</span> 即为队列利用率，<span class="math inline">\(\rho \to 1\)</span> 表示队列超载，此时排队时长增加。<span class="math inline">\(c_a, c_s\)</span> 则分别代表了入队和出队的波动程度。</p>
<div class="note info no-icon"><p>这篇文章暂且就看到这里了，笔记也就到此为止了。</p>
<p>这四篇文章主要还是引出目前在腾讯那边想做的画质感知相关工作的基本思路：</p>
<p>采用和 Nebula（实际上就是传统 WebRTC 云游戏）系统类似的架构，所要做的提升的 motivation 和 QARC 比较类似，即用户体验和码率并不完全对等，然而由于云游戏对低延迟的强大需求，类似 QARC 的基于 learning 的方法并不能很好适用，所以需要做一些其他的设计。目前的想法是通过 encoder 的一些编码信息来推测画质，例如如果一个帧之中独立编码的部分过多（大部分帧都会参照先前的帧做相对编码，而先前帧不能成为参考则会独立编码），就可以推测这一帧发生了较大的场景切换，从而需要调高码率来高清显示。</p>
<p>此外，码率决策也很难通过 RL 等方式来完成，所以采用了 reactive 的方法，即所谓的“面多了加水，水多了加面”的调整方法。然而现在面对画质闪烁等问题依然还有一些需要改进的地方。</p>
<p>SQP 这篇论文则是主要学习一下 CC 算法和云游戏的不同要求，其中 CC 要求打满网络，通过排队信息来获得网络测量数据，而云游戏做不到，其对低延迟要求很高。</p>
<p>AFR 这篇论文则主要是学习一下 writing，现在论文上面比较偏好提出新颖的问题，解决方案平凡、粗糙一点都可能不会太有影响。</p>
</div>
<h1 id="flashback---immersive-virtual-reality-on-mobile-devices-via-rendering-memoization">FlashBack - Immersive Virtual Reality on Mobile Devices via Rendering Memoization</h1>
<p>之前试着用了一下腾讯现在的云游戏系统，然后发现在新场景加载上有很长的延迟，然而这些场景虽然对我而言是新场景，对其他用户却不一定。所以我就猜应该可以加入一些缓存来加速这些场景的渲染，至少可以尝试做一下用户无关信息的缓存。学长和我说确实有道理，然而这已经是实践中的想法了，然后给我扔了个论文让我学学，结果我一看，2016 年的论文。</p>
<h2 id="introduction-4">Introduction</h2>
<p>2016 年的 VR 论文了，这里的背景部分就随便看看吧。简而言之，2016 年的 VR 方案（特指头戴式的 HMDs）大概有两种：</p>
<ul>
<li>有线方案：主要算力为主机，VR 设备通过数据线连接到主机，也就是说 VR 设备基本上起到显示屏的作用。这类方案的问题在于，数据线限制了用户的移动范围。并且，由于 VR 对低延迟、高帧率、高分辨率的要求，主机本身的算力要求也相当之高</li>
<li>移动渲染方案：即算力集成在头戴式设备之中，然而由于硬件设计的限制，这类设备的算力往往不足以满足 VR 的需求。所以低画质、低电池续航、热辐射成为了这类方案的问题</li>
</ul>
<p>另外，这两种方案事实上都成本高昂，很难做到成规模的商业化消费，乃至深入应用到生活的各个方面。</p>
<p>FLASHBACK 的设计思路很简单，就是通过增加缓存的方式，将场景提前渲染好后供 VR 设备索引。而如果出现缓存缺失，则通过快速求取近似值的方式完成这一任务。</p>
<p>然而即使如此，要在 VR 这种互动性极强的视频形式上直接运用缓存也是很困难的，所以 FLASHBACK 还在 VR 如何在移动端设备上部署这一问题上做出了创新成果。FLASHBACK 在 GPU 视频内存（VRAM）、系统 RAM 和辅助存储之间构建了三级帧缓存，用来存放提供给 VR 设备的帧。这一部分缓存的索引是玩家在场景中的三维坐标和姿势，当玩家移动的时候系统都会索引该缓存，使用最近邻算法快速搜索三维空间。</p>
<p>此外，为了处理动态场景（估计指的是 NPC 的移动等问题），FLASHBACK 为每一个动态物品创立动态帧，通过将各个动态帧和表示场景的静态帧叠加的方式完成动态场景的处理。</p>
<div class="note info no-icon"><p>这里感觉就是说了一下技术上的细节，本质上还是在重复说明 FLASHBACK 的核心思路是构建帧缓冲区。</p>
</div>
<h2 id="background">Background</h2>
<p>大概说了一下什么是 VR，然后主要说明了现在商用的 VR 场景创建的流程，也就是 Unity 或者虚幻引擎。本文认为现在商用引擎的工作逻辑是通过工程中预设的各种对象和场景来渲染最终图像，这种工作逻辑的好处在于其清晰地划分出了静态场景和动态对象，使得 FLASHBACK 处理动态的逻辑变得可能。其次，这些引擎渲染结果中的摄像机在概念上是独立的，所以将其替换也是简单的。</p>
<div class="note info no-icon"><p>这里有点似懂非懂，感觉技术细节很多。动态场景那里倒是大概明白，意思就是商用引擎暂且还没傻到渲染出来的结果就是一堆像素点，是有办法获得具体一个物体的信息的。然而摄像机就不是很懂了，虽然知道摄像机是个什么东西，但是这玩意和文章里面说的“以此建立缓存索引”是什么关系一概不知。</p>
</div>
<p>然后又大概强调了一下高分辨率、低延迟、高帧率的要求有多么多么高（但是实际上的 VR 产品失真感还是太离谱了，完全做不到沉浸感，至少 2016 年前后的产品实在是这样，所以我在听闻到元宇宙的时候只觉得离谱）。</p>
<h2 id="system-overview">System Overview</h2>
<p><img src="/uploads/paper-2023-09/19.png" /></p>
<p>整个系统概括并没有带来什么新的信息，只是另外多提到了：</p>
<ul>
<li>缓存未命中的时候使用网格扭曲处理近似，这种方法的处理速度与场景复杂度无关，只和屏幕分辨率有关</li>
<li>最后会使用桶形扭曲来将场景投射到 HMD 设备上</li>
</ul>
<div class="note info no-icon"><p>这篇文章感觉没那么重要，所以就不再多看了。</p>
</div>
]]></content>
      <categories>
        <category>【论文笔记】计算机</category>
      </categories>
  </entry>
  <entry>
    <title>直博招生专业面试的一些</title>
    <url>/2022/09/14/phd-interview/</url>
    <content><![CDATA[<p>2022 年 9 月 14 日，是清华大学计算机科学与技术系 2023 级免试攻读博士生招生专业面试。Holder 参加了这一场面试，然后人炸了。</p>
<span id="more"></span>
<p>今天面试本来就有点不安，最大的问题就是唯一能吹的一份挂了名的 SIGGRAPH 的文章实际上自己并没有参与特别核心的工作，而且做到一半就被拒了，所以实际上最后那段时间就在摆烂，组会吹水也不去了。</p>
<p>然而，今天就是这么时运不济，面试的评委里同时有徐昆老师和胡事民老师。没听过组会吹水不敢乱说，但胡老师就喜欢捉着这些问。他要是具体问如何实现了我负责的代码部分，我倒是可以说不少，但是问我一些 Overview，说实话倒还真的不会。</p>
<p>Holder 的科研真的毫无意义，毕竟自己就是如丧家之犬一般到处跑路。或许 Holder 真的就不应该硬头皮读这个博士，或许就该进厂上班了。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>《美少女万华镜 5 ——理与迷宫的少女》游戏测评</title>
    <url>/2021/08/18/renge-5/</url>
    <content><![CDATA[<p>Holder 不是一个玩 GAL 的人，能想到的 GAL 除了万华镜就是柚子社这种。但是 Holder 想了想，决定把万华镜 5 这个宣称中的最终章认真通一下，也算对我几乎唯一知晓的 GAL 致以敬意。</p>
<p>离万华镜 5 发售差不多过去一年半了，各路汉化理论上应该充斥互联网，但 Holder 也只找到了生肉，于是也顺便当成了日语阅读练习。</p>
<span id="more"></span>
<h1 id="总的感想">总的感想</h1>
<p>Holder 大概花掉了靠近三十个小时打通了所有的线，由于 H 情节在一年前实际上就已经都看过一遍而且自己也有全 CG，这次的重点就是把当时看来冗杂无比的剧情认真看一下。</p>
<p>当然，一直都说万华镜系列就是单纯的拔作，剧情几乎可有可无，这句话我可以说认同一半。首先，针对万华镜 5，如果不走莲华线，而是没有压住枪走了月丘线，那确实没有任何剧情，平平淡淡地每晚在澡堂触发 H 情节就结束了。而你如果剧情看到一半没忍住走了绿毛线（绿毛名字是もよか，说实话不知道怎么找当て字，倒是“绿毛”这个代号挺深入人心的），那也是很快就 BE 了。而如果你认认真真把莲华线推完，就会发现若干的伏笔被回收，剧情似乎就有了那么一点的道理（Holder 整体上还是觉得这个剧情偏扯，但是莲华线稍微补了一点论述）。其次，万华镜整个系列，确实几乎都是没啥剧情的，除了 5。其他系列都是推一会就开始炮火连天，而 5 我是整整看剧情看了靠近两天之后才解锁了新天地（当然玩的莲华线）。</p>
<p>如果说总的感想的话，就是感觉看了一个很普通的小说。撇去还算优秀的 H 情节不谈，我在玩的时候几乎全程在看底下的文字，因为图像说实话提供不了信息。比如说“ A 把 B 扶起来”，这个动作在番或者剧里面都可以画或者演出来，但是万华镜里面也仅仅是两个人的立绘贴了一下，动作则是文字给出。所以整体我还是一直在看文字，当小说看。</p>
<p>而说它“普通”，是因为贯穿全程的就是“理”或者“命运”或者“轮回转生”，题材不是什么新颖的东西，而且能预料到莲华和男主的一些前世姻缘之类的。然后中心矛盾之一也是普通的，“我能逆天改命”和“我们只能顺应命运”的矛盾，最后认为“我能逆天改命”的人盒饭了，但却让“我们只能顺应命运”的思想少许动摇，但是为时已晚不得不继续投入到命运的轮回之中。</p>
<p>要我说的话，论剧情，万华镜 5 就是很普通的一个小说，人物关系简单，矛盾点简单。但是论 H 情节，首先我认为绿毛连动态情节都没有是很难受的（巫女后辈啊！不配画一点动态的吗！），但是莲华在二次轮回的时候 H 情节确实作画很好，动态也不错，还是稍微给点表扬。</p>
<h1 id="剧情简要分析">剧情简要分析</h1>
<h2 id="莲华-轮回线">莲华-轮回线</h2>
<p>既然核心是“理”（不得不提的就是这个“理”在游戏里面训读成ことわり，而这个读音一般写成“断り”）和“轮回转生”，那么我们应该默认天理和轮回转生的存在。</p>
<p>剧情的主干实际上就是莲华和男主深见夏彦的前世姻缘，他们可以说每一世都会相遇相爱但由于各种不可抗力无法修成正果。先是罗马时代的奴隶主和奴隶，又是中世纪的女王和下臣，之后是猎巫人和女巫。而重点是第四世，他们是古代日本的一对恋人（这时深见夏彦的名字是“彦一”，记住，要考的），而第五世就是莲华和深见夏彦。</p>
<p>说第四世重要，是因为这里狐妖介入了进来。实际上狐妖附身了第四世的莲华，或者在一定程度上，莲华在这个时候已经成为了狐妖。而当彦一（第四世的深见夏彦）死于战火的时候，狐妖则处于对人类的憎恨和爱人亡故的怨念火烧城池。人们最后将狐妖的怨念封印为“杀生石”，并在城中修建相当数量的狐狸雕像望向杀生石的方向以镇压，同时也在杀生石所在的山顶修建了一座规模宏大的神社。但是神社实际上在很多年之后的又一次战火中被烧毁，但是村民并没有重建的计划（多半是已经忘了这段历史）。而杀生石和狐狸雕像却保留了下来，成为了传说。</p>
<p>这里的杀生石、狐狸雕像、神社则是第五世（现代）剧情推进的一条线索。</p>
<p>而这个时候就必须引出绿毛了。在第五世，也就是现代，绿毛先前有一个家境优渥的家庭，但是由于他人嫉妒而故意放出的无端谣言而招致了全村人的厌恶，随后她的家人因他人纵火全部亡故，而纵火者却至今逍遥法外，绿毛也因此有了对人类的憎恨和怨念。孤身一人的她投靠了从兄弟 H（名字不想打了，但是这个人的人设和痴汉别无他样，所以就用 Hentai 的首字母代称。这里 H 是一个女子中学的音乐老师），此时绿毛沉迷于深见夏彦所在的杂志社编辑的灵异杂志，自学了很多通灵方法。最终，她独身一人走上了原来有神社和杀生石的山顶，被满是怨念的狐妖附身，开启了剧情主线。</p>
<p>绿毛有了狐妖的力量，而狐妖的一个信念就是“我是可以逆天改命的”，或者说“我不愿意服从命运的安排”。狐妖因恋人离世而对人类憎恶，绿毛因为家人离世也对人类憎恶，两个怨念叠加，绿毛开始了复仇。她的第一步就是先转学到 H 所在的女子高中并要控制全校，因为女子高中生就是当时散布绿毛家族无端谣言的主力。绿毛看中了这所高中禁止使用手机和通信软件，利用了她们相对闭锁的信息环境，开始通过狐妖的力量诱骗她们迷信自己的占卜，随后再通过狐妖的力量对她们下诅咒。诅咒的内容就是：</p>
<div class="note info no-icon"><p>山顶有神社可以实现你的愿望，但是在前往神社之前，你必须不停地画白狐氏（びゃっこ氏）以表虔诚，否则就会降下惩罚。</p>
</div>
<p>而这座神社在现实中是真的不存在的（早就烧掉了还没重建），但是狐妖的灵力可以在山顶创建一个传送门，传送到若干年前的神社，而这个神社就在狐妖（或者说绿毛）控制之下。白狐氏就是这座神社供奉的神灵（就是狐妖），而所谓的惩罚是各种莫名其妙的伤害事件（突然被钢琴盖子砸断手指，实验的时候突然自燃之类），并且惩罚的共同点就是受伤的地方毛细血管会聚集成青色的蜘蛛网的样子，而且会长一个痣。</p>
<p>这也就是最初的最初，深见夏彦所要调查的“青蜘蛛的诅咒”事件。</p>
<hr />
<p>主角团是四人组，深见夏彦，他的编辑月丘香恋，同期的只相信科学的优秀作家皇公晓，以及实体化的莲华。</p>
<p>莲华在第五世转生的时候，没有获得肉体，成为了阿紫旅馆（也就是万华镜 1-4 开头的那个旅馆，其和神社等位于同一个村子）的座敷童子。所谓座敷童子，第五世的莲华的任务就是“超度”，也就是帮助满是怨念的灵魂安宁地走向死亡，走向轮回。而完成超度的道具就是“万华镜”。</p>
<p>所以说 1-4 里面深见夏彦透过万华镜看到的，就是那些已经被超度的魂灵的生前故事，而往往这些故事都或多或少带着点怨恨（1 是人鬼情恋的越界之恨，2 是沉溺于爱而伤害恋人的愧疚之恨，3 是文明凋亡的孤独之恨，4 则是近亲的禁忌之恨）。</p>
<p>另外，作为灵力的持有者，莲华的能力就是能够读取和修改人的记忆。</p>
<p>由于没有肉体，莲华无法被感知，从而也让她一直孤独一人。但深见夏彦，作为这么多次轮回之中莲华的恋人，自然是唯一一个能感知到她存在的的人。所以深见夏彦对莲华而言，简直就是世界上唯一可以交流的人类。</p>
<p>另一方面，莲华在得知深见夏彦想要来调查“青蜘蛛的诅咒”事件，要在阿紫旅馆住上一星期左右的时候，其花费了很多的灵力为自己构筑了肉体，并且通过修改记忆让主角团和旅馆工作人员都认为莲华是真实存在的一个女高中生，这也就是实体化。这个时候的莲华就可以和正常人一样活动了。</p>
<hr />
<p>先前提到，第四世的莲华和狐妖实际上几乎是一体的，而在第四世到第五世的轮回之中，莲华被拆分成了两部分，狐妖的部分被封印而剩下的部分幻化成了现在的莲华，这莲华是通过触碰了一只小狐狸之后回想起来的。</p>
<p>在主角团调查的时候，绿毛自然早已经觉察到，深见夏彦就是自己前世恋人彦一，所以绿毛对从兄弟 H 不屑一顾而单单对深见夏彦热情，而且在深见夏彦和莲华前往深山随便走走的时候将他们拉入了神社。绿毛自然也早就明白莲华和自己理论上是一体的，所以才有绿毛的“我唯一的朋友是莲华”这一句。</p>
<p>而绿毛为了在他人面前让自己和深见夏彦亲近显得合理，她故意称其为“哥哥”（大家都知道绿毛失去家人的过往，所以因此会把她亲近深见夏彦理解为“绿毛把对哥哥的思念寄托在深见身上”）。而绿毛则不需要对莲华隐藏，所以在澡堂里直接说“深见才不是我哥哥呢”。</p>
<p>绿毛在知道深见夏彦的存在后，除去复仇的主线，自然是尝试再构姻缘。所以她引诱深见夏彦去神社，去看杀生石，去看她舞蹈，去听铜铃的声音，给他托梦，目的就是让深见夏彦回想起自己的前世。深见夏彦在经历了若干天的噩梦和梦游（梦游去神社）之后，终于在某一天晚上回想起来了自己的一切。但是深见夏彦已经沉迷莲华，依然坚称自己是深见夏彦而非彦一。</p>
<p>得知恋人心意的绿毛，自然是相当悲愤。我大费周章为你复仇，你却出轨我自己（莲华理论上和绿毛是一体的，可以理解为绿毛是邪恶的一面，莲华是善良的一面），于是托了一个巨大的噩梦给深见夏彦（就是那个，裂嘴黑眼圈的莲华 CG，这也是游戏发售前就流传出来的梗图），想让他忘记莲华。随后动用了巨大的灵力干趴了学校里所有的学生，尝试吸取她们的灵魂。</p>
<p>而随着调查的深入，莲华也了解了狐妖已经附身到绿毛身上开始复仇，而这个时候绿毛也已经因为深见夏彦的背叛而暴走了。所以为了阻止这些计划，莲华只身一人前往神社和狐妖打灵力战斗去了。</p>
<p>但是莲华毕竟力量并非很充足，最后体力渐渐不支。这个时候深见夏彦突然赶到，给莲华挡下一击。绿毛眼看自己的攻击伤到的是自己的恋人，立马停手了。随后由于巨大的自责，她没有抵挡得住莲华的最后一击而幻化为怨念，被万华镜收纳住了。</p>
<p>绿毛是解脱了，和 H 去过平凡的女高中生生活去了。学校的诅咒也解除了，大家渐渐都回到正轨了。但是深见夏彦的灵魂却因为狐妖的一击变得支离破碎，如果不修复，就等于死亡。莲华这个时候想到了解决方式，就是和深见夏彦一起回到万华镜，让深见夏彦重新回想起来所有的回忆，补全灵魂，最后用莲华的力量让死者复生。这里显然就注意到了，死者复生是违反“理”的，也就是说，莲华最终还是走上了背离天理的路。</p>
<p>莲华和深见夏彦两人在万华镜里遨游，把 1-4 的场景都走了一遍，深见夏彦也渐渐回想起了各种东西，灵魂也渐渐补全。在走完第一圈后，莲华认为已经可以送深见夏彦回去了，但是深见夏彦坚决要和莲华在一起，于是他们又走了第二圈。这之后，莲华并不再是询问语气，而是命令深见夏彦赶快回去。</p>
<p>原因很简单，莲华知道自己也是狐妖的一部分，包括自己的实体化，所动用的灵力的基础都是狐妖赖以生存的力量——人类的悲痛，莲华决定自己超度自己肮脏的灵魂。而这最后的力量就是留给将深见夏彦死者复生的，违反天理的力量。但是深见夏彦最终还是不愿回去，而这个时候他需要经受身边人的各种诘难以确认自己的心意。最后在一通告白之后，两人携手走向又一次轮回。</p>
<p>轮回到第六世的结果，就是深见夏彦成了你（这也就是游戏开头让你输入你的名字的原因），莲华成为了一个知性大姐姐和你相遇，和你相恋。两人最后渐渐回想起了前世，由于狐妖已经消逝，阻碍已经消失，所以两人修成正果，过上了炮火连天的日子。</p>
<h2 id="莲华-非轮回线">莲华-非轮回线</h2>
<p>狐妖的部分都是一致的，第一世到第五世都是一致的，一直到两人走进万华镜都和莲华-轮回线一样。</p>
<p>莲华在第一圈后会询问两次深见夏彦是否愿意回去，第二圈则会再问一次。三次都回答不想回去，才会进入轮回线，只要有一次回答了想回去，就会进入非轮回线。</p>
<p>在这里，最后深见夏彦死者复生，但是他丧失了所有和莲华有关的记忆，“青蜘蛛的诅咒”事件也被科学解释了。苏醒的深见夏彦和月丘以及皇，去和旅馆工作人员、学校老师告别后回到东京过上了平凡的生活。虽然深见夏彦时不时还是觉得自己在搜寻着什么，但是总体而言并没有想起莲华。而莲华的灵魂，也随着狐妖一起被超度，不再和深见夏彦产生任何交集。</p>
<h2 id="绿毛线">绿毛线</h2>
<p>应该说是很单纯的 BE。</p>
<p>绿毛在无数若干次引诱深见夏彦，让他回想前世之后，最终有一天直接冲进澡堂色诱深见夏彦。这个时候如果选择“放任自己”，则会开启第一段绿毛 H，否则则会以绿毛无故消失结束这一天。</p>
<p>最后某一晚，深见夏彦再一次前往神社的时候终于回想起了一切，这个时候会有选项问“你是谁”。如果先前压住了枪，这里就会有两个选项，一个是“深见夏彦”一个是“彦一”。选择深见夏彦就进入莲华线，被绿毛噩梦调戏一番后直接开始和莲华炮火连天。选择彦一则进入第二段绿毛 H。不过在一炮之后，绿毛就会以“我要将你变成我的玩物”为由杀死深见夏彦后自杀。而在现实世界中，消息就是“深见夏彦和绿毛在深山中失踪”。随后两年后，月丘香恋和皇公晓回到这个村子尝试回忆一些什么，误入了深山，看到了杀生石下两人的遗体。</p>
<p>如果先前没有压住枪，那么在问“你是谁”的时候，只有“彦一”一个选项，后面的剧情是一样的。</p>
<h2 id="月丘线">月丘线</h2>
<p>最没有意思的线。</p>
<p>月丘实际上一直喜欢着深见。在主角组前往调查之前，月丘前往深见夏彦的家交代一些工作的事情，这个时候月丘得知深见一直不会做饭，于是她决定给深见做一顿饭。在饭后，带有一点醉意的两人突然趴倒在墙角，男下女上。这个时候月丘向深见表白，会有“接受”和“拒绝”的选项。</p>
<p>拒绝的话就正常开始调查，会调查到很多东西，会有机会进绿毛线、莲华线之类。</p>
<p>接受的话直接开启 H 情节。而因此深见夏彦的心态就变成了“我要尝试融入‘大人’的世界，不能再沉迷于莲华的万华镜了”。而这种心态下，主角组调查的时候，莲华就一直处于很边缘的地位，而月丘和深见则会每晚定时开 H 情节。</p>
<p>这次调查最终无疾而终，莲华在意识到深见的心意之后也只是默默留下一句“那就结束了吧”，便再也不见。主角组回到东京之后，自然是深见和月丘的炮火连天的二人世界。</p>
<h1 id="一些其他地方的想法">一些其他地方的想法</h1>
<p>总体而言还是贯彻了万华镜系列“压住枪的都是好儿郎”的准则，越早压不住枪就只能解锁越少的剧情，然后留下越多的没有起底的伏笔。</p>
<p>虽然说万华镜没啥剧情，但是实际上总体看下来虽然平淡无奇，但还算是叙事完整，能看明白。而且有些伏笔也还算可以，比如说旅馆的“野干（やかん）”面具（“野干”在日语中是狐狸的一种代称），一方面暗示了这里和狐狸有千丝万缕的联系，而最终，绿毛跳舞给深见夏彦看的时候，戴的就是野干面具。另一方面，这个村子叫“薬缶”，和“野干”日语同音，应该是讹传出来的地名。</p>
<p>此外，一定要抨击一下文案，不是说他写的东西多差，是<strong>经常把一些已经约定俗成不写汉字的关联词、虚词写成汉字</strong>，而有的时候又会把<strong>约定俗成写成汉字的词写成假名</strong>。这让我这个现代日语没学好的人读得有那么点难受。举点例子吧：</p>
<div class="note info no-icon"><p>成程、折角、兎に角、沢山、取り敢えず、一寸、丁度、其程、是迄</p>
</div>
<p>他们实际上是：</p>
<div class="note info no-icon"><p>なるほど、せっかく、とにかく、たくさん、とりあえず、ちょっと、ちょうど、それほど、ここまで</p>
</div>
<p>这些词可以说是，不太懂日语的人只要听到读音都能回想起来点什么的词，结果硬生生给我看不懂了。</p>
<h1 id="最后的最后">最后的最后</h1>
<p>万华镜系列我认为是，中下的剧情，中上的作画，虽然不知道为何如此火，但还是有点为三十个小时感到不值。</p>
<p>但如果闲的话推推也不错，当成一个耗时间的小说吧。不过个人建议先把月丘和绿毛推了，先推莲华会很容易没有推支线的动力，因为莲华线的叙事已经很完备，其他线的逻辑就是误入歧途从而有些事情没发现最后遗憾收场。</p>
<p>知乎上看了一句总结比较好：</p>
<div class="note info no-icon"><p>你以为是你把卖片的上了，谁知道人家是命中注定给你卖片。</p>
</div>
<p>就这样吧，小学期还在等着我。</p>
]]></content>
      <categories>
        <category>【杂谈】游戏 &amp; 番剧</category>
      </categories>
  </entry>
  <entry>
    <title>一部真实的校园恋爱番《龙与虎》</title>
    <url>/2022/12/29/toradora/</url>
    <content><![CDATA[<p>由于新冠阳性卧病在床三天，中间某一天我一天刷完了《龙与虎》的 26 集，作为为数不多的超长校园恋爱番，在看完《龙与虎》之后，我明显感受到了这部番和当下很多恋爱番的不同。</p>
<span id="more"></span>
<h1 id="人物感情线">人物感情线</h1>
<p>《龙与虎》可能最让人感到迷惑的就是错综复杂的感情线，很多观众也都评论说感情想相当扭曲。这里为了更好写读后感，还是稍微写写各个人物的感情线。</p>
<p>这里想要探讨的是男主角团龙儿、北村和女主角团大河、实乃梨、亚美、会长的感情线。这里另外做个补充，由于大河在日语中发音为たいが，和意为老虎的タイガー读音类似，加上番里大河凶狠乖戾的性格，故大河也有老虎的外号。</p>
<h2 id="北村与会长">北村与会长</h2>
<p>北村为本作男二，会长为本作女四。在进入高中之后，由于对理想中的高中生活的憧憬，有点为了谈恋爱而谈恋爱地向大河表白，却遭到了拒绝。在心灰意冷之际，会长出现了，其劝说北村高中生活并不只有感情。受到鼓励的北村于是加入了学生会，在学生会的一年中，北村逐渐对会长产生了好感。由于北村确实能力卓著，会长也在自己心中确认了对北村的好感。</p>
<p>然而转折出现在高二年级，会长作为毕业生即将毕业且计划留学。然而会长知道，北村之所以进学生会，之所以如此拼命干活，自己永远是重要乃至最重要的因素。也就是说，会长清晰地知道北村一直在追逐自己，所以即使答应了北村的感情，也注定将会是一段不平等的感情。所以会长为了防止北村不假思索追逐自己，强硬地隐瞒了留学的计划。</p>
<p>但是计划依然暴露了，北村一蹶不振，因为对他而言，会长是他继续做下去，并接过学生会长这一身份的唯一理由，他想要追逐会长。受到打击的北村束手无策，选择了自暴自弃。先是宣布不参与学生会长竞选，后是故意违反校规校纪染发逃学，用他自己的方式阐述自己自甘堕落。会长在目睹这一切后，即使心疼，但是从自己的立场出发，依然在他人面前刻薄地评价北村为懦弱的人。</p>
<p>在这个时间点，大河是喜欢北村的，为了拯救北村，大河宣布参加学生会长竞选，并故意宣扬自己在竞选成为学生会长后会推行相当严厉的政策毁掉所有人的高中生活。这种自爆行为，事实上是发动群众来劝说北村回到学生会长竞选中。在这一番操作之下，北村最终回到竞选，并且得到了会长的支持。</p>
<p>在最终的竞选演讲中，北村高调面对全校向会长表白，然而会长并没有正面回应，发好人卡一样地冷处理了这一充满勇气的行为。在这之后，大河被彻底激怒了，她认为会长在玩弄北村的感情，于是提着木刀和会长线下械斗。会长自然无法是大河的对手，在落败后，会长最终情感崩溃，承认了自己喜欢北村，同时也讲出了自己的心声，讲出了不想让北村仅仅是追随自己的真实想法。</p>
<p>最终，北村成为了学生会长，会长也按照计划前往美国留学。一年后，北村毕业，也同样规划前往美国留学，经历了高中三年的磨练，其心智更为成熟，也更加坚定了对会长的好感。</p>
<h2 id="大河与龙儿">大河与龙儿</h2>
<p>本作男女主。大河家庭情况较为混乱，父亲在和其生母诞下她后，不久就将其和其生母全部抛弃，除了每个月定时打入生活费外，与其生活完全没有交集。其与其生母的关系也较为冷淡，本作中是独居状态。正是因为这样的家庭背景，大河十分缺少关爱，这也是她感情线的重要基础。此外，大河的另外一个重要特征是十分缺乏生活技能和笨拙，这也和家庭背景有关联。</p>
<p>而龙儿的家庭环境则也较为混乱，父亲是不良少年，在和龙儿生母未婚基础上诞下龙儿后人间蒸发。龙儿生母为了抚养龙儿，决定离家出走，通过陪酒女的工作支撑家庭，并且一直向龙儿隐瞒其父亲真实的情况。所以龙儿自幼缺乏父爱，又相当追求父爱。另外，由于这样的家庭背景，龙儿不得不学会了各种生活技能，主妇属性拉满。</p>
<p>大河在刚进入高中被北村表白后，虽然其拒绝了北村，但是由于北村关注着她，在她困难的时候也会伸出援手，其得到了北村的关爱。在这样的基础上，大河萌生了对北村的好感。在某日，大河将写给北村的情书放到其书包中，但没想到不仅忘了把情书本体放到信封里，甚至还把情书错放到龙儿的书包内，这导致龙儿在回来拿书包回家的时候和大河起了争执，大河甚至在当晚为了夺回情书提着木刀来到龙儿家复仇。</p>
<p>在那天晚上，龙儿劝说了大河，情感并非是可耻之事，并且给大河看了其为暗恋对象实乃梨写的诗乃至未来生活规划。在一番交流后，两人发现，大河暗恋的北村是龙儿的好友，而龙儿暗恋的实乃梨是大河的好友，于是两人组成龙虎同盟，帮助对方追求自己的好友。</p>
<p>然而，由于大河严重缺乏生活技能，而龙儿又会做饭，两人家又很近，所以大河在此之后便稳定在龙儿家里吃饭，龙儿甚至还会帮助大河洗衣和打扫公寓。</p>
<p>这个时候，大河和龙儿仅仅是一种依存关系，虽然在外人眼中看来两人已经近乎同居，但是两人均不承认和对方有超过朋友的越界行为。在龙虎同盟的约定之下，龙儿帮助大河拍北村的照片，大河也会创造龙儿和实乃梨独处的机会。</p>
<p>其间，大河在龙儿鼓励之下向北村表白，但是被拒绝了，北村表示，其仅仅想作为朋友帮助大河。</p>
<p>第一次转折发生在亚美的出现，作为模特，亚美身材傲人，相比之下大河的身材就显得较为弱势。这一矛盾的激发是游泳课，大河由于身材自卑于是抵触游泳课，龙儿为了帮助大河找回自信，于是帮其缝制胸垫来伪装身材。亚美在游泳课上见到这一幕后决定挑战龙虎联盟的关系，提出和大河比赛，若亚美获胜则会把龙儿带去自己的别墅过暑假。无论是出于对龙儿离去后自己生活质量下降的担忧，还是此时由于已经和龙儿相处甚久而萌生的朦胧情愫，大河都决心为了龙儿赢下比赛。比赛最终确定为五十米自由泳，然而由于大河不会游泳，所以龙儿又承担了教学游泳的任务。在两人在市民泳池练习的时候，大河第一次因为对龙儿朦胧的好感而情感爆发。</p>
<p>比赛当场，大河在游泳过程中抽筋，龙儿立刻下水营救，但最终依然将自己搭了进去。然而这个时候群众的目光全都集中在亚美即将赢得比赛，没有多少人关注到龙儿即将陷入险境。最终，虽然在大河求救之下龙儿得救，但是大河也最终没能收束自己的情感，面对大家说出了著名的：</p>
<div class="note info no-icon"><p>龙儿是我的，你们一个都不许碰他！</p>
</div>
<p>事实上，即使经历了这样的事件，大河对龙儿也依然仅仅是无法确定的朦胧好感，大河依然对北村充满热情。在此之后，由于亚美依然是实际上赢得比赛，所以亚美依然可以带龙儿前往她的别墅过暑假，然而在北村劝说之下，最终变成了主角团五人全部前往亚美的别墅。在这一过程中龙虎联盟达成了本次主要是大河帮助龙儿追求实乃梨的作战计划，大河得知实乃梨害怕灵异，于是计划故意恐吓实乃梨，让龙儿趁机营救实乃梨来创造机会。然而，这个计划非常自然地失败了，因为实乃梨实际上并不害怕灵异，反倒十分喜欢灵异。</p>
<p>另外，这个时间段也是龙虎联盟在梦中和对方确认关系的时间点，两人都做了和对方确认关系的梦。</p>
<p>随后，大河的父亲出现，其希望能够将大河带回抚养。作为大河的挚友，实乃梨十分清楚大河父亲的本质。然而渴望父爱的龙儿由于并不清楚大河父亲的本质，强硬地要求大河离开自己家和父亲生活。在名义上收回抚养权的基础上，大河的父亲作出了会来看女儿在学园祭上的演出的承诺，然而显然，这个承诺是空虚的，最终一条短信依然把大河甩给了龙儿。</p>
<p>在学园祭的最后，发生了两件事。一件事是，由于大河没能等到父亲，其对家庭复原的期望再次落空，受伤的大河通过很有情感张力的演出赢下了学园祭选美比赛后，学生会追加举办了男子选拔赛，全校男子绕学校跑一圈，最快的人能够和选美比赛获胜者，也就是大河共舞。在这场比赛中，终于认识到自己没能看穿大河父亲而导致伤害了大河的龙儿为了赎罪，拼命希望抢下头名，在这过程中实乃梨也前来帮忙，两人自然地牵着手拿下第一。第二件事是，最终的篝火晚会上，北村邀请了大河一起跳舞。</p>
<p>在这里，似乎龙虎同盟的目的即将达成，因为大河和北村，龙儿和实乃梨，这两对的关系都得到了进展。然而，转折也就随之而来，学生会长竞选事件的爆发，让大河最终认识到北村早就心有所属，其对自己的关心不过是作为朋友的关心，大河对北村的热情也随之慢慢地弱化。但是，大河先前对北村的追求，是全班都知道的，在北村表白失败后，全班为了安慰北村防止其再次自暴自弃，尝试着撮合北村和大河。另外，由于大河的学生手册中夹着在篝火晚会上她和北村共舞的照片，北村和大河的关系，在<strong>旁人眼中</strong>得到了强化。而这也让实乃梨终于敢于承认对龙儿的好感，出于龙虎同盟的约定，大河也更加卖力地帮助龙儿追求实乃梨。</p>
<p>然而，实乃梨在亚美的质疑下，并没能成功面对自己对龙儿的好感，而是逃避着这一切。</p>
<p>这之后，就是圣诞夜。学生会计划在圣诞夜举办派对，大河此时依然在帮助龙儿在圣诞夜向实乃梨表白，龙儿也为实乃梨准备了发卡作为礼物。但是由于实乃梨此时不断地逃避着自己的感情，不愿意面对大河和龙儿，所以并不计划参与圣诞派对，即使龙儿已经盛情邀请。大河在派对当晚，完成了演出之后立刻前往实乃梨家劝说其前往派对，并撒谎夸大了龙儿对实乃梨的承诺。大河由于此时已经逐步对龙儿产生好感，无法面对实乃梨和龙儿最终将会走到一起的现实，于是在劝说实乃梨后径直回家，没有再前往派对。</p>
<p>在派对现场的龙儿，从亚美处了解到了大河早已回家，想到大河之前提到过想要见圣诞老人的想法，出于对大河的关心和担忧，立刻和别人借到一套戏服打扮成圣诞老人前往大河家。在和大河玩乐一圈后，大河意识到终究是要让龙儿回到派对现场，出于先前已经和实乃梨夸下海口并且龙虎同盟的约定也是如此，于是大河强硬地将龙儿赶去了派对。</p>
<p>然而，在送走龙儿后，大河终于意识到，如果一切进展顺利，实乃梨最终和龙儿在一起，自己将无法时时刻刻呆在龙儿身边。也就是说自己已经视之平常的和龙儿的相伴，被自己亲手推向了毁灭。意识到这一切的大河情感崩溃了，赶忙出门追龙儿，但是已经为时已晚，只能无助地跪在路边痛哭。</p>
<p>之后便是修学旅行，本年度修学旅行是前往雪山的滑雪之旅。在修学旅行中，亚美和实乃梨就情感问题爆发争执，这争执过程中，龙儿送给实乃梨的发卡掉落在悬崖下，而大河为了取回发卡，冒险滑下悬崖，最终被困。得知此事后，龙儿立刻前往营救并最终背回大河，大河在逐渐苏醒的过程中将龙儿错认为北村，并自言自语般透露了“这种时候还愿意管我的应该只有龙儿才对”并且透露了自己喜欢龙儿。龙儿听到了，但是没有戳穿自己不是北村这一事实。</p>
<p>最后，大河为了感谢大家在自己遇难的时候帮助自己，将主角团召集在一起计划送给大家巧克力作为答谢。为了统一口径，龙儿特别叮嘱了北村，要假装成救援大河的是北村而不是自己，因为其知道大河在躲避承认感情，要是让大河知道了当晚她说的话已经被自己听到了，很有可能导致矛盾，然而龙儿忘了叮嘱知道真相的实乃梨。于是在大河送巧克力的时候，实乃梨认识到了大河并不知道真相，并且立刻明白了龙儿也在躲避大河的感情，而非正面面对。主角团其余人在此时达成共识，坚决不能让龙虎再躲避两人之间的感情，于是强硬地要求两人面对内心。大河在这样的情况下，选择了逃跑，而在追逐大河的时候，实乃梨终于不再压抑自己的情感，大声宣称自己对龙儿也是充满好感，但是由于自己还有棒球梦想，而且龙虎同盟已经事实存在了很长时间，实乃梨最终决定放弃了自己在情感上的追求。</p>
<p>在这一连串事情后，龙虎二人最终互相表白。为了得到家长的认可，龙虎二人投奔了龙儿的祖父母，并用骗称龙儿遭遇事故将已经离家出走十余年的龙儿母亲骗回了家人身旁。大河在观察到龙儿的家庭之后，决心面对自己的家庭，在留下留言后，大河决定退学回到父母身边一段时间。面对这样的不辞而别，龙儿虽然不甘，但是依然充分理解。一年后，在毕业典礼上，大河终于回归，龙虎也终于破除了所有的感情障碍，走到了一起。</p>
<h2 id="实乃梨">实乃梨</h2>
<p>本作女二。其有一个弟弟，她和弟弟都擅长棒球，但是家庭却仅仅支持弟弟的棒球事业。不服输的实乃梨计划通过高中课余时间打工攒钱，在高中毕业后自给自足前往体育大学就读。实乃梨的性格对外而言是相当阳光开放的，然而其内心却相当闭塞和喜欢逃避现实。</p>
<p>在感情上，由于这一梦想的存在，实乃梨一般并没有体现出自己的情感取向，更多的时候是以一副和感情绝缘的面貌示人。然而，由于目睹了龙儿的很多事迹之后，实乃梨慢慢对龙儿产生了好感。</p>
<p>在暑期合宿中，龙儿在和实乃梨两人独处对话的时候，流露出了对实乃梨的好感，然而实乃梨并没有爽快承认，仅仅是搁置了这一议题。事实上，这是因为实乃梨想要维护龙虎同盟而在自己的感情上做出的让步。</p>
<p>学园祭的男子选拔中，其和龙儿为了安慰受伤的大河，联手拿下了比赛的第一，事后，两人都收藏了和对方牵手冲线的照片。</p>
<p>由于在她眼中看来，大河和北村的情感愈发成熟，其不需要再顾及好友的情感而不敢表达对龙儿的好感。所以在看到大河的学生手册中夹着和北村的合照之后，其松了一口气。但是这个时候，亚美发出了灵魂疑问：</p>
<div class="note info no-icon"><p>负罪感，减少了吗？</p>
</div>
<p>在这样的疑问之下，实乃梨又一次对自己的情感犹豫了，她认为自己的情感牵挂的事情太多，自己选择龙儿依然被好友大河的情感牵制，于是她躲避了自己对龙儿的情感。然而在这种心不在焉的状态下，实乃梨甚至输掉了从来没想过会输的棒球比赛。</p>
<p>在这样的低谷之下，实乃梨显然无法面对龙儿想和她一起参与圣诞派对的邀请。然而，在当晚大河的劝说下，实乃梨最终还是计划前往会场，但是，在路过大河公寓的时候，她看见了跪在地上痛哭的大河。这个时候实乃梨明白了实际上大河依然和自己想的一样喜欢着龙儿，大河依然还是出于朋友之间的情谊，将龙儿让给了自己，而大河自己却在忍耐着这些痛苦。实乃梨最终在遇到了龙儿的时候，还未等他开口，便拒绝了龙儿的所有好意。</p>
<p>实乃梨对自己感情的极端逃避引来了亚美的不满，而这也是修学旅行中两人争吵的根本原因。在争吵导致大河遇难等一系列事情后，最终在大河送巧克力的时候，实乃梨终于鼓起勇气面对自己的感情，承认了龙儿终究不会选择和自己走到一起，那么自己就要更为棒球梦想努力。而正式与自己的感情告别的标志是另外一个名场景，实乃梨为了激励龙儿去追逐大河，伸出拳头给龙儿打气，结果碰到了龙儿的嘴唇，当时并没有发生什么，但是当龙儿下定决心飞奔去追逐大河之后，实乃梨偷偷亲吻了刚刚碰到龙儿嘴唇的拳头。</p>
<p>然而，即使鼓起勇气，实乃梨依然改变不了自己的挚友和自己喜欢的人最终走到了一起，最终会离自己远去的事实，在痛哭一顿后，实乃梨最终接受了现实。</p>
<h2 id="亚美">亚美</h2>
<p>本作女三，是北村的青梅竹马。亚美是职业模特，因为跟踪狂的原因被迫放弃工作并转学，并且在工作中磨练了一套伪装术，也就是所谓人前一套人后一套。有着丰富的社会阅历，对主角团的这些情感问题看得最为透彻，甚至接近上帝视角，然而涉及到如何去解决的时候，又缺乏和青春期少年少女交流的能力，很容易触发意料之外的矛盾冲突。</p>
<p>亚美的感情线较为简单，即在龙儿劝说她放弃伪装和大河暴打跟踪狂后，亚美就对龙儿产生了好感。但是亚美作为主角团中心态最为成熟的一人，其对龙儿的依赖感是最弱的，仅仅是保持了好感和希望其多关心自己的愿望。</p>
<p>相对地，龙儿则几乎完全将亚美作为自己的朋友看待，在各种对话中也不会将自己和亚美并称。</p>
<h1 id="一些想说的话">一些想说的话</h1>
<p>这个作品的感情线是真的扭曲，尤其是圣诞夜，如果加上前夕的话，这一段时间主角团五人全部失恋。首先是北村表白被会长冷处理，之后是亚美向龙儿示好也被龙儿忽视，再然后是大河亲手将自己和龙儿相伴的机会毁灭而痛哭，其后是实乃梨看到大河对龙儿的热烈的情感而决心放弃自己的感情，最后是龙儿甚至没有表白就被实乃梨回绝。</p>
<p>虽然虽然，龙儿和大河在当时已经几乎快要两情相悦，但就是这么阴差阳错让两人到了更晚才确定互相的心意。</p>
<p>不过，我为什么还是觉得这部番相当优秀，是因为这部番的感情线虽然很扭曲，但是却真实。虽说不能忽视艺术加工，但是这部番对青春期的少年少女朦胧青涩、飘忽不定的情感，以及在此基础上对自己情感的逃避，对友情和爱情之间的抉择，对家庭的理解等等的刻画十分真实。就以我自己为例，我中学时期对爱情的认识也不过是一种飘忽的感情，大多时候并没有区分一场随便的恋爱和需要承诺和责任附加的一场恋爱，所以即使有观众认为不真实，但我认为大河到最后，到真正将龙儿推给实乃梨的时候才真正认识到一直支撑、关注自己的并非是北村而是龙儿，这样的认知变化也并不虚假，而且前期就已经铺垫了大河是笨拙迟钝的。事实上，就我个人而言，2021 年的时候我的情感动荡，直到 Sakana 离我远去才真正敢于面对自己内心对 Sakana 的情感而自责为何之前会冷处理两人的关系长达两三年。说实话，大河在圣诞夜的痛哭，我是觉得相当真实的，因为人真的是不见棺材不落泪，不到真的要失去了，都不会正视自己的情感。</p>
<p>但要说这部番的情感刻画上的问题，说实话我觉得对龙儿的情感刻画还有些欠缺，尤其是其一直到圣诞都还对实乃梨保持好感，那他究竟出于什么样的契机就爱上了大河呢？这一点实际上并没有描绘得很好。不过实际上也是可以理解的，就和大河认知转变一样，在实乃梨拒绝自己之后，龙儿这才回归了理智，缓慢认识到自己陪伴良久的大河才真正让自己动心。但这个说法也有问题，因为龙儿本身就有主妇属性，长期照顾的女性可以是母亲，可以是女儿，并不一定是恋人。所以正因此，这部番也有不少人调侃龙虎之间更像是父女。</p>
<p>但整体依然瑕不掩瑜，整部番很长，大河从开头的乖戾逐步变得善解人意和温柔，这样的成长和转变无疑让我钦佩作者对大河这个人物的刻画的深度，如此大的性格转变却不显得突兀。整部番的泪点很多，因为本身就设定在类似单亲家庭等并不健全的环境上，很容易凸显人物的伟大之处，无论是将龙儿抚养成人的母亲，还是最终决定重返家庭的大河，这些人物的光芒就显得相当耀眼。</p>
<p>整体上来看，我是真的觉得这部番和《中二病》可以并称我最喜欢的恋爱番，因为他们都不止是简单发糖，他们都让我看到了爱情对一个人的改变，让我看到了两个人互相支持应当是什么样的。虽然《龙与虎》对男女主之间的感情刻画并没有多少篇幅，但是这种从无感走到一起的长途跋涉却又是另外一番有趣。</p>
<p>总之，很好的一部番，很真实很有共鸣的一部番，让我能够一时脱离当下充斥的快节奏工业糖精恋爱番，重新想一想两个人应当如何建构感情，两个人应当如何面对各种现实问题，无论是家庭还是未来。</p>
]]></content>
      <categories>
        <category>【杂谈】游戏 &amp; 番剧</category>
      </categories>
  </entry>
  <entry>
    <title>第七回 V+Next 曲推《旅》小作文</title>
    <url>/2022/11/11/vnext-7/</url>
    <content><![CDATA[<p>整整 24 篇小作文呢！</p>
<span id="more"></span>
<h1 id="basic-info">Basic Info</h1>
<p>投 4 稿的群友：</p>
<ul>
<li>蒼</li>
</ul>
<p>投 3 稿的群友：</p>
<ul>
<li>Chake</li>
</ul>
<p>投 2 稿的群友：</p>
<ul>
<li>珍猪奶茶、rako、Ashitemaru、电球</li>
</ul>
<p>投 1 稿的群友：</p>
<ul>
<li>Ne.、星体、Aeterrno Amora、寄る寄る、nagi、Akechi、20、月檬、SauceCode</li>
</ul>
<h1 id="post-1-始発とカフカ">Post 1 始発とカフカ</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">n-buna</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">Chake</td>
</tr>
</tbody>
</table>
<p>我们乘上并非我们选择的列车，踏上并非我们选择的旅途。轻快的曲调背后是淡淡的哀伤，好似成为了不自觉的卑微存在，被命运一步步推向了终点与消亡。初听曲子只是感受到欢快，但是当深入了解之后，感觉每一句的唱腔都染上了悲哀的气息，这样的曲子总是那么吸引人呢。</p>
<h1 id="post-2-山遥路远">Post 2 山遥路远</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ChiliChill</td>
<td style="text-align: center;">乐正绫</td>
<td style="text-align: center;">蒼</td>
</tr>
</tbody>
</table>
<p>听闻这首歌使用了非常小众的北欧乐器，古典吉他的音色像温柔的月光虚虚地笼在皑皑的雪山上。</p>
<p>我非常喜欢这首歌的歌词，充满了不舍和祝福的道别。像是追随着对方的身影，直到其被山吞没的目光。</p>
<p>这是一首送挚爱的对方踏上旅程的歌，怕自己反悔不断催促着他的离去。</p>
<p>以及 V5 绫的歌声也很棒，很喜欢动点调的有张力的高音。</p>
<p>最后关注 chilichill 喵，谢谢喵。</p>
<h1 id="post-3-bon-voyage">Post 3 Bon Voyage!!</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Kevinz</td>
<td style="text-align: center;">洛天依 &amp; 星尘 &amp; 乐正绫</td>
<td style="text-align: center;">Ne.</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote-center">
<p>而我驰骋山川仍愿与你同享</p>
<p>行至银河深处 点亮每束林海和潮浪</p>
<p>生命颠扑流淌 而我们于浪潮中央</p>
<p>揽遍这世界盛况 笑谈一路风光</p>

</blockquote>
<p>krz 是一款我的中 V xp。</p>
<p>《Himawari》中的邂逅，《七月二十七号夏日记事》里的慵懒暑假出游，《Say a Good Bye》更为正对题目，可爱少女的一场异国旅行，上一期也很想推与题目最接近的《<span class="math inline">\(\beta\)</span> 受体阻滞剂与星辰》（《To the moon》的同人曲）。</p>
<p>《Say a Good Bye》大概是早期作品（词作于 2016），太甜啦，然而一看《Bon Voyage!!》的词作不免也同样是生气勃勃与年少气盛的意境（2017），我听来像是一觉起来，异常难得地觉得自己真的醒了。看 krz 的作品从学生时代到社畜时期，虽在我的阅历之外，多少还是唏嘘。没有什么不是时间的函数吧，在上演的别离与欢聚之中，听听歌好啦。</p>
<h1 id="post-4-last-journey">Post 4 Last Journey</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">いよわ</td>
<td style="text-align: center;">初音ミク &amp; V Flower</td>
<td style="text-align: center;">nagi</td>
</tr>
</tbody>
</table>
<p>胃弱早期作品中极具个性，散发着荒诞而又诡魅的美感的一作。</p>
<p>变成尸体后的最终旅程，将时钟反拨，哪怕爱情已经变为了灰烬，但是拖着僵直且腐坏的躯体，沿着昏暗的小路，在锈色的世界中，等待着破晓天明，希望能够再见爱过的你。</p>
<p>全曲使用了大量象征着颠倒的元素，采样逆再生、旋律倒放、画面反转、动画倒放，甚至歌词本身都是完全颠倒的，给音乐本身增添了神秘氛围和扭曲感的同时，也和时间逆行的死后旅程的世界观相照应。扭曲的文字、骇人的泪水、不安定的旋律和鼓点、行将支离破碎的和声、胃弱经典叮当效果音，勾勒出临终之际的幻梦与回光返照时的心景。</p>
<p>如果说最近的胃弱风格更加柔和和偏向流行了的话，那么这首曲子可以说是早期胃弱原初风格的最好代表之一，是只有胃弱才能做出来的东西，适合任何想要了解胃弱或尝试 Vocaloid 另类表现乐曲的人收听！（场外信息：这还是葱花曲！）</p>
<h1 id="post-5-alice">Post 5 Alice</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">古川本舗</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">蒼</td>
</tr>
</tbody>
</table>
<p>老曲回顾环节——！</p>
<p>一首曾经的爱曲。老实说刚开始看到这个题目的时候脑内并没有浮现出什么契合的曲子。契机是看到米白毕业的时候主页刚好给我推了 Alice，没由来地觉得非常合适。</p>
<p>古川说这首写的是单恋的故事，“我”与“你”在幽深的森林中不断地走着，互相交织，后来再分离，最后一个人踽踽独行。生命的旅程中总会有人到来过，走过。</p>
<p>这首歌确实也承载了很多回忆和旅程，无论是 12 年重填词创作了《至此，我不再独自前行》的 B 站，还是古川 P 本人的经历，亦或者是我自己都在旅程中经历着塑造与变化。</p>
<p>在长长的旅程中回望起点总有一种物是人非的感觉，但这样也显得它们弥足珍贵。依旧感谢相遇。</p>
<h1 id="post-6-サンセットバスストップ-sunset-bus-stop">Post 6 サンセットバスストップ (Sunset Bus Stop)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">トーマ</td>
<td style="text-align: center;">GUMI</td>
<td style="text-align: center;">SauceCode</td>
</tr>
</tbody>
</table>
<p>黄昏，一个人的旅途，却又不知道终点。些许忧伤的曲调，配上 GUMI 略带沙哑的声音，诉说着一个迷茫的故事。反复的铺垫，终于得以将饱含情绪的副歌引出：黄昏巴士会开向哪儿，又会在哪儿停下呢？谁能知道呢……</p>
<h1 id="post-7-タイムマシン-time-machine">Post 7 タイムマシン (Time Machine)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1640mP</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">rako</td>
</tr>
</tbody>
</table>
<p>旅途的意象总是带有一些孤寂的气息。告别，相遇，人生在一段段的旅途中前进。</p>
<p>「生活就像海洋，只有意志坚强的人才能到达彼岸。」我大概是不够坚强的，轻微的扰动也足以让我失去脆弱的平衡。我不喜欢沉浸在感伤中的自己，但又享受着与世隔绝的孤独感。戴上耳机，世界仿佛离我而去，我蜷缩在自己的空间之中，「悲しくなんかないさと、イヤホンで閉じ込めたよ」。清脆的钢琴声静静地流过心头；这一刻，我是属于自己的罢。</p>
<h1 id="post-8-daybreak-frontline">Post 8 DAYBREAK FRONTLINE</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Orangestar</td>
<td style="text-align: center;">IA</td>
<td style="text-align: center;">Akechi</td>
</tr>
</tbody>
</table>
<p>听着这首歌的时候总是会想起以前看过的一些公路片或某些“圣地巡礼”的图文记录。</p>
<p>一个旅行者，一辆车，在几乎是空空荡荡的公路上飞驰着，正在赶赴某一个早早就被写入行程表中的目的地。</p>
<p>黎明前夕的风从车窗里涌入，吹向了旅行者，但无法吹散那个人心中的兴奋和略微的不安——因为这是一场期待了太久的旅程，因为那里是曾经认为遥不可及的梦想之地。</p>
<p>想要奔向远方。</p>
<p>想要“看到同样的风景”。</p>
<p>想要站在那样的目的地。</p>
<p>想要跨越夜与昼的界线，跨越现实与梦境的边缘。</p>
<p>车轮继续向前，向着日出的方向奔赴而去。</p>
<h1 id="post-9-天穹のアクアリウム-stargazer-in-aquarium">Post 9 天穹のアクアリウム (Stargazer in Aquarium)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Fty</td>
<td style="text-align: center;">すずきつづみ</td>
<td style="text-align: center;">rako</td>
</tr>
</tbody>
</table>
<p>すずきつづみ的声音像大海一样清澈，听着感觉就可以给人带来活力。清爽的曲风搭配明快的PV，在略微悲伤的氛围中流露出一丝期冀，引领着视听者探寻「蒼く光る遥かな航路」。</p>
<h1 id="post-10-兔子先生">Post 10 兔子先生</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">小桦</td>
<td style="text-align: center;">洛天依</td>
<td style="text-align: center;">Aeterrno Amora</td>
</tr>
</tbody>
</table>
<p>摘自评论区：</p>
<blockquote class="blockquote-center">
<p>但渺小的我，流浪的步伐，还没法停下。</p>

</blockquote>
<p>为了寻求梦想和独立，我们不得不离开家，就像雏鹰会离开，幼狮会远去，兔子会流浪，父母会老去。</p>
<h1 id="post-11-starry-starry">Post 11 Starry Starry</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">FUZI &amp; 一二三</td>
<td style="text-align: center;">音街ウナ</td>
<td style="text-align: center;">珍猪奶茶</td>
</tr>
</tbody>
</table>
<p>有时候会有一种冲动，想开一辆随处可见的车，在一个无关紧要的夜晚，离开这个看不见什么星星的城市，往星光最明亮的方向前进，然后把天上的星星一颗一颗数清楚。不需要带上什么行李，走到哪就算哪吧，也许会抵达一个星星多到数不清楚的地方，那时候就停下来。夏天可以找找夏日大三角，冬天可以看看猎户座星云。为什么这几颗星星像一个猎户呢？如果它们可以是拿着弓的猎人的话，又为什么不可以是拿着葱的初音未来呢？想把多余的感情全都向着这片星空发射出去，它们又会化作怎样的星星呢？抛下这些思绪，然后继续前进吧。夜还很长，星星还有很多。</p>
<p>题外话，这个 una 居然一点也不吵。</p>
<h1 id="post-12-종착역终点站">Post 12 종착역（终点站）</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">상록수（常青树）</td>
<td style="text-align: center;">UNI</td>
<td style="text-align: center;">Chake</td>
</tr>
</tbody>
</table>
<p>希望大家能听到最后，感受那燃烧生命一般的歌声。</p>
<p>另：UNI 的歌声也是有独特魅力的呢。</p>
<h1 id="post-13-まほろば少年譚">Post 13 まほろば少年譚</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ユリイ・カノン</td>
<td style="text-align: center;">初音ミク &amp; GUMI</td>
<td style="text-align: center;">Chake</td>
</tr>
</tbody>
</table>
<p>初为笼中之鸟，后欲高飞翅振。迷途黑夜黯淡里，手中明灯尚存。生命不过一瞬，歌声却留永恒。人生恰似逆旅，我亦匆匆行人。</p>
<h1 id="post-14-チャンバラジョニー-chambara-johnny">Post 14 チャンバラジョニー (Chambara Johnny)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">DECO*27</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">20</td>
</tr>
</tbody>
</table>
<p>虽然歌词和主题没什么关系，不过像素风的 RPG 还是会给人一种旅途的感觉。</p>
<p>歌很可爱，PV 很好听。</p>
<p>顺便打听一下 Holder 什么时候能请来 DECO（<strong>Holder 注：</strong>今年看起来是没啥希望了）。</p>
<h1 id="post-15-だんだん早くなる">Post 15 だんだん早くなる</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">40mP</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">月檬</td>
</tr>
</tbody>
</table>
<p>（推首儿歌，希望不会被打）</p>
<p>令人感到轻松的歌曲。</p>
<p>如果用一个词来形容的话，我会选择“可愛い”。虽然不是我最喜欢的类型，但是应该没人拒绝可爱吧～</p>
<p>也许旅途就像这首歌一样，时而加快，时而放缓；时而高兴，时而沮丧。但不管怎么说，这一路已经走过来了，所以保持自己的步伐，继续前进吧。</p>
<p>＼(ˆ▽ˆ)／</p>
<h1 id="post-16-エイムレスウォーカー-aimless-walker">Post 16 エイムレスウォーカー (Aimless Walker)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">*Luna</td>
<td style="text-align: center;">Rana</td>
<td style="text-align: center;">珍猪奶茶</td>
</tr>
</tbody>
</table>
<p>很喜欢行走的感觉。双脚踩在坚实的大地上，一步一步的向前迈进，从脚底传来的地面的触感，让我不至于在这个飞速运转的世界中把自己弄丢。在喜欢的地方漫无目的的行走，对我来说大概是最完美的一种旅行方式。感谢重力，让我可以感受到大地。感谢我基本健全的腿脚，让我可以自由地在天地之间穿梭。和我行走的速度比起来，世界还是太广阔了，所以在我的躯壳灰飞烟灭之前，还有很多事情可以做，也有很多地方可以去，那么就以 5 km/h 的速度向远方开进吧，最好放点 *Luna 的 Progressive House 当 BGM。</p>
<h1 id="post-17-砂之惑星">Post 17 砂之惑星</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ハチ</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">蒼</td>
</tr>
</tbody>
</table>
<p>一首记录旅程的曲子。</p>
<p>一些人离开了我们，但是旅程还在继续。</p>
<h1 id="post-18-ネイロクラフト-neiro-craft">Post 18 ネイロクラフト (Neiro Craft)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ポリスピカデリー</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">星体</td>
</tr>
</tbody>
</table>
<p>总之就是非常真实。</p>
<h1 id="post-19-夢地図">Post 19 夢地図</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">40mP</td>
<td style="text-align: center;">GUMI</td>
<td style="text-align: center;">寄る寄る</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote-center">
<p>今僕が作り上げるもの全て</p>
<p>無に還っても</p>

</blockquote>
<p>这些年来，自己究竟做到了什么。我越思考，就越觉得迷茫。</p>
<p>走到现在，无论中学还是大学，最好的朋友们似乎都越走越远。</p>
<p>同时，也没能给家里带来什么变化，却只能为越来越少的时间而担忧。</p>
<p>自己的努力，也就像歌词中说的一样，变成了虚无吧。</p>
<p>这旅途的终点，恐怕不是我想要的。</p>
<p>什么时候，才能真正地描绘出属于自己的梦地图呢？</p>
<h1 id="post-20-上山岗">Post 20 上山岗</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ilem</td>
<td style="text-align: center;">洛天依</td>
<td style="text-align: center;">蒼</td>
</tr>
</tbody>
</table>
<p>大家好，其实我本来是想填《一人行者》的，但时过境迁，我觉得教主在 VC 的旅程中有了新的感悟，还是决定投这首。</p>
<p>这首歌最有意思的地方应该在于 PV，可以称其为旅途中的纪念照片吧！ilem 被称为教主以来也不乏商业活动，也有过非议。但是他愿意记得这些事情也是这首歌打动我，让我感到柔软的地方。</p>
<p>我们在路上记录着着我们看到的，把它们做成歌曲。请同我大声唱吧，“再次祝福你，朋友。”</p>
<h1 id="post-21-シンセカイ案内所">Post 21 シンセカイ案内所</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">DECO*27</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">电球</td>
</tr>
</tbody>
</table>
<p>新世界に出る旅。帰らなくてもいいですよね？（って、この曲、旅要素ある？）</p>
<p>去新世界旅行，总不能一帆风顺呢。（话说，这个曲子和旅行有关系吗？）</p>
<h1 id="post-22-蛍はいなかった">Post 22 蛍はいなかった</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">はるまきごはん</td>
<td style="text-align: center;">初音ミク</td>
<td style="text-align: center;">Holder</td>
</tr>
</tbody>
</table>
<p>先听《美影日记》给刀一轮之后再听这首缓一缓。</p>
<p>女孩子们的暑期出游，野餐、合影、睡前娱乐、偷偷跑去看萤火虫，一切都是那么的美好。</p>
<p>整个系列曲中，唯一色调是亮色的 PV，也是唯一一首曲风是欢快的，也是唯一一首美影红着脸笑了的。</p>
<p>虽然美好的夏季已经过去了，但是还是暂且想着下一个夏季，想着下一个夏天的每一个微热潮湿的夜晚，每一个美好的夏夜，应当如何度过吧。</p>
<h1 id="post-23-prologue">Post 23 Prologue</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ひとしずくP×やま△</td>
<td style="text-align: center;">鏡音リン</td>
<td style="text-align: center;">电球</td>
</tr>
</tbody>
</table>
<p>第一次听的时候感觉……啊怎么说呢……好可爱啊……</p>
<p>后来发现一滴妈妈她根本就是带铃去做噩梦吧……</p>
<p>不准欺负镜音铃！连倒是无所谓（bushi）</p>
<p>另外还有一首连的版本叫 Epilogue。</p>
<p>附歌词：</p>
<blockquote class="blockquote-center">
<p>「Prologue」</p>
<p>作曲・作詞：ひとしずくP×やま△</p>
<p>唄：鏡音リン</p>
<p>不思議な絵本のページをめくる（翻开奇妙的绘本）</p>
<p>その先には　何が待ってるの（那之中有什么在等待着呢）</p>
<p>素敵な王子様が現れて（帅气的王子出现）</p>
<p>優しく手を引いてくれる（温柔地牵起我的手）</p>
<p>流れるワルツに合わせて（随着华尔兹的节奏）</p>
<p>くるり踊る（旋转跳跃）</p>
<p>誰もが私に、夢中で憧れるの（在梦里谁都憧憬着我）</p>
<p>気がつけば真夜中（回过神来已是深夜）</p>
<p>みんな眠っている（大家都睡着了）</p>
<p>幸せな私の夢の中で（沉睡在我的幸福的梦中）</p>

</blockquote>
<p>读起来突然觉得有点恐怖呢。</p>
<h1 id="post-24-深海シティアンダーグラウンド-deep-sea-city-underground">Post 24 深海シティアンダーグラウンド (Deep Sea City Underground)</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">P 主</th>
<th style="text-align: center;">歌姬</th>
<th style="text-align: center;">投稿者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">田中 B</td>
<td style="text-align: center;">鏡音リン</td>
<td style="text-align: center;">Holder</td>
</tr>
</tbody>
</table>
<p>认识这首歌还是通过 maimai，某位群友给我开了这首歌，第一次，完全不会打，但是发现这歌真好听。</p>
<p>据说是这位 P 主唯一一首出名曲，这一点莫名显得有些凄凉。</p>
<p>歌词里面杂乱无章的意象，似乎描绘了沉在海底的荒诞世界。</p>
<p>似乎并不想去那里旅行呢（笑）。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>Holder 与 Vocaloid</title>
    <url>/2022/10/02/vocaloid-and-me/</url>
    <content><![CDATA[<p>和 V+ 群群友度过了一天快乐的国庆假期，这次的 V+ Next 推曲活动中，又一次提及了我的“自传”——即我和 Vocaloid 的一些故事。</p>
<p>先前已经和 nagi 以及莎布老师谈过一些，也在推曲小作文里面写过不少小故事。但回想起来我好像自己也没有系统总结过这些有趣的经历，明明是挺有意思的一段旅程，所以干脆晚上花点时间写写。</p>
<p>大约是一些按照年份编写的流水账和回忆录，随便看看就好。</p>
<span id="more"></span>
<h1 id="小学高年级2010---2013">小学高年级（2010 - 2013）</h1>
<p>大约这是一切的开端了。小学的时候 Holder 可能并没有什么爱好或者说口味，同学们在玩什么游戏我就玩什么游戏，似乎并没有什么主见。但是有几件事情倒是记忆挺深刻。</p>
<p>首先是《甩葱歌》的莫名走红。Holder 家所在的街区是县城中心的一个破旧商店街，当时的所有店铺，从手机店、音乐店，甚至是鞋店、服装店，都在大音量播放这首歌，每天上下学的时候多多少少都是一直听着这首歌的。继此之后的，是 2011 年突然爆火的《甩饼歌》。这首歌有了歌词，讲述的是 2011 年利比亚空袭、物价飞升之类的大事件。本来自己就已经对《甩葱歌》旋律很熟悉，有了能唱的歌词，自然是很快就上手了这首改编歌，和小学同学时不时还一起唱着玩。</p>
<p>其次是有一次我父亲问到我有没有喜欢的歌手，因为当时他一直在家里放歌自己听。但我当时说实话，真的不知道什么歌曲，而当时我的玩伴正沉迷汪峰，所以我就随口回答汪峰。结果我父亲大概是一下子就知道了我只是糊弄过去，于是无心地扔了一句“要找找自己喜欢的东西而不是随波逐流”。</p>
<p>这句话随后就应验了。2012 年前后，我进入了元素收藏这个小众坑，这个坑大约就是收集各种元素的单质。在当年这还是一项很难的事情，因为稀土很难有货源，类似 Rb、Cs 之类的碱金属还只能从国外进口，一克近一千，这对小学生来说已经是天价（题外话，现在国内自制 Rb、Cs 已经不稀奇，克价已经跌下两百，正所谓中国人擅长把东西搞成白菜价。此外，现在元素收藏坑也近乎是进坑投资几千左右就已经能买到全套单质了）。也正是因此，当时我对贴吧里面那些拥有类似 Rb、Cs、Tl、Sc 等这些元素的聚聚们可谓是十分敬仰，其中就包括一位元老——真·凤舞九天。</p>
<p>这位元老有一天晚上，在贴吧转载了一个视频，说自己今天单曲循环了一晚上。我点进去一看，是《世末舞厅》的一个自制 PV。当然，当时我是不知道这是什么的，但我能明白的是，这是一首日文歌，而且不同于小学音乐课上那些民歌、红歌、教学歌曲，不同于汪峰那种伤感，而是一种完全不能理解的，全新的歌曲艺术形式。</p>
<p>小学的我第一次看到类似心脏、死亡、骷髅、终结这些意象，而即使我一点点都看不懂英文和日文，歌词一句话都看不懂，但是图像和声音却将世界终结前的疯狂传达了出来。</p>
<p>这显然是震撼的，所以即使当时 Holder 只有一个充话费送的小手机，但我依然拿出了零花钱到同学家的手机店买下了一张 SD 卡，从家里人工作的地方偷偷拿了一个读卡器，自己在周末摸索着如何下载视频。这样忙活了一段时间后，我便能够随时听《世末舞厅》了。</p>
<p>然而，还是那句话，由于完全看不懂英文和日文，我没能借此机会认识 wowaka，也没能认识巡音，更没能借此机会打开术力口的大门，虽然我隐隐约约感觉到了这机械的电子音背后，似乎和《甩葱歌》有着千丝万缕的联系。</p>
<h1 id="初中2013---2016">初中（2013 - 2016）</h1>
<p>这一段时间似乎和术力口就没有什么关系了。</p>
<p>因为家人工作的原因，我离开了原先的住处，去往另外一个地方上初中，于是也就脱离了我小学的所有同学。在完全陌生的环境下，Holder 度过了一个并不美妙的初一。转机出现在初二，父亲的一位朋友送给我了一台 iPad。我的父母算是十分开明，决定将这个 iPad 交给我全权处置，并不打算限制我的使用时间之类。</p>
<p>那段时间，我注意到周围同学都在听歌，虽然我不知道他们在听什么，但是就是莫名其妙觉的一个人听歌似乎是一件很酷的事情。这样想着，Holder 在 iPad 上下载了音乐软件，添加了几首类似《江南 Style》之类的大众歌曲。</p>
<p>你可能会问，《世末舞厅》呢？然而这就很不好说了，我记忆中我似乎并没有将它加入到歌单里面，因为我不会打日文。当时我要是想听这首歌，我只能去贴吧翻找之前那位元老的贴子，或者拿 U 盘在电脑上听（SD 卡应该在搬家时遗失了，但是之后我有了一个 U 盘）。</p>
<p>《江南 Style》可能是一个并不好的种子，因为我为了扩充歌单，只能每天看看音乐软件的推荐。然而因为这个种子，加上当时 EXO 和 TFBoys 在网络上的对立导致两方热度都居高不下，我的歌单迅速充满了 EXO。EXO 的曲风大多是炫酷的类型，这也塑造了我后续的听歌风格。</p>
<p>然而，我并没有在 K-pop 的路上走得很深，因为我初中有一位朋友，很喜欢看番。当时我和他在一起玩的时候，常常是白天出门，晚上窝在某人家里看番，也就是那个时候我认识了《刀剑神域》和一些其他的番，也收获了第一个严格意义上加入歌单的日语歌——TV 动画《空战魔导士候补生的教官》OP《D.O.B.》，因为这首歌很炫酷，节奏有力量。</p>
<p>也是在他的带领之下，大约是 2014 年，我入了 B 站，但我当时几乎只会看鬼畜区。</p>
<p>虽然如此，我当时的歌单的主流依然是 EXO 和权志龙，最喜欢的可能依然是《Call me baby》或者《BANG BANG BANG》。而随后因为 K-pop 的外延了解到 Maroon 5、TheFatRat 的一些歌和欧美音乐则完全是支线了。</p>
<p>其实要说到为啥即使有这么一位看番的好朋友我还一直听韩流，倒也只能说是大环境所趋。当时我的初中班级，大部分同学更乐意听 K-pop。那种带着一些痞气，或者说是不良、叛逆、特立独行风格的歌曲，在初中生中很有市场。</p>
<p>不过也正是因此，我错过了阳炎 Project 的时代。</p>
<h1 id="高中一年级2016---2017">高中一年级（2016 - 2017）</h1>
<p>中考考上了当地最好的中学，并且在入学分班考试里考上了年级第一，这完全是出乎所有人的意料的，包括我自己，因为没人相信从那种初中出来的毕业生能考上这个高中的第一。这是一个非常奇妙的开局，在单纯的高中生之中，这样的成就足以让你受到瞩目。所以 Holder 的高一开局并不算很差，反倒是收获了一群朋友。</p>
<p>先前提到过 2014 年我开始看 B 站，等到我 2016 年高中入学的时候，我已经大体对鬼畜区了解了个遍，自然也就包括了音 MAD 和人力 Vocaloid。在此期间，我接触到了我严格意义上第一个知道是术曲的术曲——《千本樱》（《世末舞厅》我最开始并不知道这是术曲，我甚至不知道这首歌和初音未来有关）。</p>
<p>然而，2016 年的 B 站大事是和术无关的，而是《极乐净土》的爆火。这首歌的爆火让我经常逛的鬼畜区充满了这首歌的相关创作，自然而然地，这首歌也进入了我的歌单。</p>
<p>有一件黑历史和这首歌有着很大的关联。当时我不会日语，想唱《极乐净土》自然是唱不出来，只能哼调。然而当时哲♂学里的 FA 乐器又在鬼畜中广泛运用。于是有一次我在班上用 FA 乐器唱了一小段《极乐净土》。现在想起来的话，可以说是万分羞耻。</p>
<p>一切都是有开端的，自从《极乐净土》和《千本樱》进入歌单，随之而来的就是各种日语歌。但其实这个时候，我依然只是知道初音未来的名号，还不认识双子、IA 等其他歌姬。另外，这个时候，我还不知道什么是歌姬什么是 P 主，当时的 Holder 认为初音未来的所有作品都由一个运营方创作，甚至还因此惊讶于为何这个运营方作出的曲子曲风如此多变。</p>
<p>但也就是这个时候，我入了 LL 坑，听了不少缪斯的歌。不过即使如此，此时我的歌单依然是 K-pop 和欧美音乐占主流，日语歌有但不多，术也不过几首。</p>
<p>当然，要是说几件小事的话还是有的。</p>
<p>首先是高一的寒假，学校组织了去苏州的数学竞赛集训，那段时间比较休闲，我便无聊的时候去整理歌单，删掉了不少 K-pop 歌。这个行为的原因其实挺怪的，因为大约在 2016 年年底或者说 2017 年年初，我经历了第一次所谓的“被分手”。而为了将初中这些破事的记忆删除，我不仅删掉了她所有的照片（当然后面我居然在 iCloud 的自动备份里面翻出来了），删掉了聊天记录和所有联系方式。而寒假在苏州的时候，我翻了翻歌单，发现听歌的时候依然能回想起初中当时的一些奇怪经历，尤其是《Call me baby》，这首歌是我和她都喜欢的。于是，我删掉了大多的 K-pop 歌，只留下了几首自己特别喜欢的，比如《MAMA》和《Lightsaber》。</p>
<p>之后是 2016 年年底《你的名字》上映，而这让我的歌单中又多出了若干的日语歌，包括《前前前世》《火花》《没什么大不了》《黄昏之时》《梦灯笼》。其中最可说的就是《梦灯笼》，当时我沉迷这首歌到，即使我不会日语，不会写五十音，我也会拿并不富裕的晚饭休息时间跑回家打开电脑抄歌词和罗马音，尝试着学唱。</p>
<p>2017 年的暑假并没有多少可以称道的事情，虽然当时是第一年接触学科竞赛，辗转扬州、南京等地，但是就听歌而言，并没有什么可说的。硬要说的话，就是看了《未闻花名》，然后沉迷于《Secret base》这首歌。术曲方面，则是零零散散加了《深海少女》《天之弱》《反语》《脑浆炸裂女孩》一共四首。</p>
<h1 id="高中二年级2017---2018">高中二年级（2017 - 2018）</h1>
<p>熟悉 Holder 的人都知道，这是一切的转折点。</p>
<p>2017 年进入高二之后，发生了几件事情。</p>
<p>首先是 9 月份《病名为爱》投稿，这首歌莫名其妙地在国内收获了极高的热度。而在这段时间，我们高中为我们争取到了去南京旁听数学竞赛省队培训的机会，我又可以公款旅游了。于是我在南京和我同学两个人，反复听这首歌。这里比较好玩的是，我先听到的是 Neru 的术版，而非不少人先听到的翻唱版。就我记忆而言，这应该是我听到的第一首双子曲。</p>
<p>之后是 12 月份《打上花火》在国内上映，我和同学翘课去看了。当时通行的一位同学稍微对八爷有一点了解，晚上在 KFC 吃饭的时候，讲了不少八爷相关的小知识之类的，包括他前期作为 P 主投稿的一些曲子。</p>
<p>经过这一个学期，Holder 的歌单大致变成了术曲占一半，其他歌曲混混乱乱杂在里面的一种状态，但 Holder 此时依然没有主动去挖术曲或者去了解 Vocaloid，依然是听到好听的就放歌单。然而这个时候，大数据已经开始给我不断推术相关的东西，很少再有韩流或者欧美了。</p>
<p>高二寒假备战小高考，没有什么可以说的事情，除了通过一个人力 Vocaloid 认识了《太阳系 DISCO》。</p>
<p>而高二的春季学期，我遇到了两首歌，分别是《神佛》和《被生命所厌恶》，但是是 mafumafu 版本。mafumafu 这个名号的出现，让我本就不清楚的概念更加混乱，什么是歌姬，什么是 P 主，什么是唱见，这些我当时可以说万分混乱。然而也正是这两首歌，打开了一道通过 mafumafu 获取新术曲的大门。</p>
<p>3 月的时候，我在听《病名为爱》的时候，注意到评论里面有一句说 Neru 来 B 站了。我记得当时我并不是很清楚 Neru 到底是谁，但总之我给他点了关注，所以说 Neru 是我第一个关注的 P 主。在此之后，我也将 Neru 的《SNOBBISM》和《随便随便》加入了歌单。</p>
<p>也就是这段时间，我开始学习日语。</p>
<p>时间就这样到了传奇的 2018 年暑假。</p>
<p>这个暑假我为了争取清华的各种政策，首先是各个学科竞赛，数学要在扬州集训然后考试，化学要在南京集训然后考试，物理也是在南京，期间还需要参加清华的暑期学校，要去杭州参加一个训练。所以从 6 月份一直到 9 月份这近三个月的时间，我几乎一直在外，而且几乎孤身一人，因为我高中有资格参与化学国初的不过两人，能参与物理复赛的也寥寥无几。</p>
<p>这是我第一次远离熟悉的家乡如此长的时间，而且我父母也说为了锻炼我的独立能力，并不打算跟在后面，只是说了一句，有什么要紧的情况或者缺钱了就给家里打电话。显然，为了填补课余时间，除了刷题看书，似乎也只剩下听歌了，因为我几乎不玩游戏，除了当时短暂玩过的《炉石传说》。</p>
<p>这段时间给了我扩充歌单绝佳的机会，我开始第一次下意识地在搜索框中输入初音未来，我开始有意识地找各种番去看，去听它的 OP 和 ED。那段时间，类似 MARETU、れるりり、Neru 等这些名字开始慢慢变得熟悉，镜音双子、巡音也开始进入我的视野，虽然我还是区分不开 P 主和歌姬。</p>
<p>此时我收集到的术曲已经开始出现两极分化的特征，一类是吵闹的、喧嚣的、意味不明的，这些歌单纯提供一种精神上的刺激，似乎也和当时我沉迷 K-pop 有着相同的根源。而另外一类，则是舒缓的、抒情的、温柔的，这些歌，大约才真正是我当时能共鸣的。</p>
<p>这其中最为特殊的自然是《胧月》。第一次听到这首歌，我并没有觉得多么特殊，甚至因为它并不突出的调教觉得十分粗糙。然而，正所谓音乐并不仅仅是一段声音，是要和个人境遇相结合的。在那个晚上，我刚刚做完一套题，起身去阳台休息。凌晨两点的南大早已休眠，但是远处登山道的路灯依然闪烁，就在那一阵风之中，歌单循环到了《胧月》。</p>
<p>那应该是第一次我感受到了所谓的情景结合。因为匆匆学过一点日语，也看过歌词翻译，所以当「逃れる術を探すばかりの孤独な星」这一句响起的时候，那种孤身一人求学的寂寞，疲惫后的困倦一瞬间全部返了上来，而阳台上是依然燥热的夏夜晚风。</p>
<p>而这一幕大约也是我高中那么多回忆中最为深刻的几个之一，也就是这个契机，我第一次感受到了术曲机械音中的那一种，真人并不能表达出来的沙哑感。现在我依然觉得，《胧月》再如何使用真人翻唱，也难以表达出其中蕴含的孤寂感。人本身是社会性的，再如何表达孤独，也不过是先建立起和别人的连接再失去，比如那些表达孤独寂寞的失恋曲。然而机械音中表达出的那种，自己身为人造物或者非人，生来即无法和人们平等的孤寂感，或许才是深层的。这也是我在之后沉迷于《心》这首歌的原因。</p>
<p>在此之后，术曲便不断进入歌单，而自己听术曲的风格也渐渐明晰。</p>
<p>当然，Holder 这个时候还是分不清歌姬和 P 主。</p>
<h1 id="高中三年级2018---2019">高中三年级（2018 - 2019）</h1>
<p>备战高考的一年，并无什么可讲的。这段时间除去学习，几乎也没有其他事情可做。</p>
<p>然而这个时候我遇到了《月光润色女孩》。这首歌是网易云推荐给我的，第一次听也是一点感觉都没有，没有什么特别之处。然而就是这样听着听着，就沉迷了。</p>
<p>这段时间，为了学习日语，我买了标日，但是上面的课文实在是无聊乏味。这个时候我注意到，自己的歌单已经几乎全是日语了，为什么不去打印歌词来学呢。于是我打印了几首歌的歌词，一首一首学，这里面包括《Secret base》《鸟之诗》《心做》以及不用想就知道的《月光润色女孩》。</p>
<p>于是我早读课就不读语文或者英语了，而是把歌词偷偷藏在书下面，一个假名一个假名认，不会的语法就圈出来下课查标日。就这样，这几首歌也成为了我最先会的几首歌。不过，要是你问为啥我这么喜欢《胧月》却不打这首歌的歌词，我只能说，这首歌歌词太难了，生词太多，看不下去。</p>
<p>要问我多喜欢《月光润色女孩》，我只能引用我前桌在高考后和我说的那句话，“你早读课天天唱，唱得我都会唱了”。</p>
<h1 id="高考后暑假-大一2019---2020">高考后暑假 &amp; 大一（2019 - 2020）</h1>
<p>高考后的暑假，我依然不能说我是术术人，虽然听不少术，但还是没主动找过多少。当时我喜欢的一首歌是《Narrative》，一个电影的 ED。</p>
<p>这个暑假事实上记忆最深刻的术曲是《朗朗晴天》，是一位高中的好友推荐给我的。高考出分后，因为填报志愿的事情，我、我父母、我的高中和清北招生组之间产生了一些奇怪的摩擦，而这也让我产生了无法把握自身命运的一种无力感，也就在那个时候，我和高中好友交谈的时候她把这首曲子推荐给了我。</p>
<hr />
<p>进了大学之后，事情发生了一点转变。我开始接触 gyari 的 Voiceroid 小剧场，认识了缘兔、akari、琴叶姐妹这些歌姬，也就是这个时候，我才真正知道什么是 P 主，什么是歌姬。</p>
<p>如果要说大一上学期印象最为深刻的歌曲，就是《蜘蛛丝 Monopoly》、《妄想感伤代偿联盟》和《几望之月》。</p>
<p>然而大一的下学期，因为疫情一整个学期都只能在家。然而也正是这段时间，由于我已经开始主动认识术曲，从而也是我术曲底子正式构成的开端。这段时间，我听到了《霞む夏の灯》《Unknown mother goose》，和几乎是我听术曲里程碑一般的《无梦之梦》。</p>
<p>事实上，大一下学期在家的这一段时间，即使我依然在听动漫歌曲或者 J-pop，比如 Reol 之类，但实际上我开始明显地倾向于术曲。术曲具有一种奇妙的创作自由感，相比于动漫歌曲需要考虑类似表达主旨等约束，术曲更像是自由地让歌姬传达创作者的感情，无须特别关注所谓创作要求或者一些限制自由表达的限制。</p>
<p>在那段时间内，wowaka、怪力熊、MARETU、春卷饭、DECO 构成了我最初的底子。当然，还有类似《萤火虫》《ROKI》之类的单曲。</p>
<h1 id="在这之后2020--">在这之后（2020 - ）</h1>
<p>在这之后就并没有太多值得讲述的了，已经入了门的术术人自然是会自己去翻找自己所喜欢的曲子的。</p>
<p>不过也就是在这之后，我明显感觉到了听歌风格和个人境遇的关系。在大一的下学期，我就已经听过了《劣等上等》，而在那个时候，我觉得这首歌过分吵闹，毫无节奏可言，遂跳过。然而在我大二上学期再次听到的时候，我却觉得万分戳心。现在回想，大概是大一下学期还在为学业挣扎，社工上也因为团支书不作为而寸步难行。相比之下，大二已经适应了大学节奏并且取得一些成就，这首歌似乎也就不是那么刺耳了。</p>
<p>还可以作为例子的就是 2021 年的 5 月感情受挫的时候，在这事之前和在这事之后听春卷饭，完全是两个感觉。在这之前，我只能感受到单纯的震撼，而似乎并没有那么多的共鸣。然而在这之后，尤其是听《第三心脏》的时候，我甚至感觉这首歌就是为我而作。</p>
<p>说到《第三心脏》，春卷饭的幻影系列曲，从 2021 年更新到现在，似乎就和我奇妙地贴合了一般。在我低沉的时候，听到了《第三心脏》，在我逐步挣脱的时候，听到了《萤火虫未曾来过》，听《美影日记》的时候则又让我回到了一年前的一些混乱之中。</p>
<p>当然还有一些插曲，就是入了音游坑，通过 osu 和 PJSK 认识了不少新 P 主和术曲。还有就是认识了术群的各位，见识到了很多新的术曲口味，听到了很多新歌。</p>
<h1 id="所以呢">所以呢</h1>
<p>Holder 真正听术曲的时间并不长，或许只能说大一下学期之后才开始有意识听。然而实际上，Holder 小学就听过术曲了，虽然毫不自知。</p>
<p>Holder 正如自己所描述的那样，并不想把歌曲独立于个人的境遇去解释。就像《劣等上等》，不同的境遇下就是不同的体验。我依然习惯将歌曲、文字等这些艺术和具体的、切身体会的场景联系起来。</p>
<p>仔细回忆一下，Holder 喜欢夏天的晚上并不是没有原因，因为每一年的夏天都承载了太多太多的深刻回忆。18 年和 Sakana 的相遇以及独自求学终有回报，19 年为三年高中完美谢幕，20 年的一人旅行，21 年和 Sakana 最激烈的矛盾到最后的和解，22 年被导师拒绝和最后的平安上岸。而这些夏夜，都有一些曲子作伴，18 年的《胧月》、19 年的《朗朗晴天》、20 年的《无梦之梦》、21 年的《第三心脏》《某一家的茶会》、22 年的《坠入地狱》。</p>
<p>大约歌曲就像回忆的书签一般，听到这个旋律，就仿佛回到了当时那段时光。</p>
<p>Holder 和 Vocaloid 的故事，不如说就是 Holder 自己的故事，然而这个故事还很长很长。</p>
]]></content>
      <categories>
        <category>【杂谈】碎碎念</category>
      </categories>
  </entry>
</search>
